00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            		include "MapMacros.asm"		; TODO: UNFINISHED DON'T USE MAPMACROS!
00000000 =00000001                  SonicMappingsVer = 1
00000000 =00000001                  SonicDplcVer = 1
00000000                            
00000000                            ; macro to declare a mappings table (taken from Sonic 2 Hg disassembly)
00000000                            ;mappingsTable macro
00000000                            ;@current_mappings_table = *
00000000                            ;	endm
00000000                            
00000000 =00000005                  MappingSize		= 5
00000000 =00000001                  MappingHeaderSize	= 1
00000000                            
00000000                            ; macro to declare an entry in a mappings table (taken from Sonic 2 Hg disassembly)
00000000                            ;mappingsTableEntry macro ptr
00000000                            ;	dc.ATTRIBUTE ptr-.current_mappings_table
00000000                            ;	endm
00000000                            
00000000                            ;spriteHeader macro {INTLABEL}
00000000                            ;__LABEL__ label *
00000000                            ;	if SonicMappingsVer=1
00000000                            ;	dc.b ((__LABEL___End - __LABEL___Begin) / MappingSize)
00000000                            ;	elseif SonicMappingsVer=4
00000000                            ;	dc.w (((__LABEL___End - __LABEL___Begin) / MappingSize)-1)
00000000                            ;	else
00000000                            ;	dc.w ((__LABEL___End - __LABEL___Begin) / MappingSize)
00000000                            ;	endif
00000000                            ;__LABEL___Begin label *
00000000                            ;	endm
00000000                            
00000000                            spritePiece macro xpos,ypos,width,height,tile,xflip,yflip,pal,pri
00000000                            	if SonicMappingsVer=1
00000000                            	dc.b	ypos
00000000                            	dc.b	(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.b	((((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile))>>8
00000000                            	dc.b	tile&$FF
00000000                            	dc.b	xpos
00000000                            	elseif SonicMappingsVer=2
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(((tile)>>1)|((tile)&$8000))
00000000                            	dc.w	xpos
00000000                            	else
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile)
00000000                            	dc.w	xpos
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            spritePiece2P macro xpos,ypos,width,height,tile,xflip,yflip,pal,pri,tile2,xflip2,yflip2,pal2,pri2
00000000                            	if SonicMappingsVer=1
00000000                            	dc.b	ypos
00000000                            	dc.b	(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.b	((((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile))>>8
00000000                            	dc.b	tile&$FF
00000000                            	dc.b	xpos
00000000                            	elseif SonicMappingsVer=2
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile)
00000000                            	dc.w	(((pri2&1)<<15)|((pal2&3)<<13)|((yflip2&1)<<12)|((xflip2&1)<<11))+(tile2)
00000000                            	dc.w	xpos
00000000                            	else
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile)
00000000                            	dc.w	xpos
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ;dplcHeader macro {INTLABEL}
00000000                            ;__LABEL__ label *
00000000                            ;	if SonicDplcVer=1
00000000                            ;	dc.b ((__LABEL___End - __LABEL___Begin) / 2)
00000000                            ;	elseif SonicDplcVer=3
00000000                            ;	dc.w (((__LABEL___End - __LABEL___Begin) / 2)-1)
00000000                            ;	else
00000000                            ;	dc.w ((__LABEL___End - __LABEL___Begin) / 2)
00000000                            ;	endif
00000000                            ;__LABEL___Begin label *
00000000                            ;	endm
00000000                            
00000000                            dplcEntry macro tiles,offset
00000000                            	if SonicDplcVer=3
00000000                            	dc.w	((offset&$FFF)<<4)|((tiles-1)&$F)
00000000                            	elseif SonicDplcVer=4
00000000                            	dc.w	(((tiles-1)&$F)<<12)|((offset&$FFF)<<4)
00000000                            	else
00000000                            	dc.w	(((tiles-1)&$F)<<12)|(offset&$FFF)
00000000                            	endif
00000000                            	endm
00000000                            	endm
00000000                            
00000000                            ;level select constants (to not give the foward reference warning this was moved here)
00000000 =60860003                  lsscrpos = $60860003 ; level select screen position
00000000 =00240000                  lsoff = $240000 ; second row jump
00000000 =64C20003                  lsstpos = lsscrpos+$43C0000 ; sound test
00000000 =6C820003                  lsnppos = $6C820003	; now playing
00000000 =6D020003                  lsctrlpos = $6D020003 ; control help
00000000                            lsrow1size: equ (LMTSecondRow-LevelMenuText)/16
00000000                            lsrow2size: equ (LMTEnd-LMTSecondRow)/16
00000000                            lsselectable: equ ((LMTSelectableEnd-LevelMenuText)/16)-1 ; last selectable item
00000000                            ; level select item constants
00000000                            lssndtest: equ lsrow1size+8
00000000                            lswifi: equ lsrow1size+9
00000000                            
00000000 =FFFFFFC4                  vBlankRoutine equ $FFFFFFC4 ; VBlank Routine Jump Instruction (6 bytes)
00000000 =FFFFFFC4                  vBlankJump equ vBlankRoutine
00000000 =FFFFFFC6                  vBlankAdress equ vBlankRoutine+2
00000000                            ; options menu
00000000                            optamm: equ ((OMTEnd-OptionMenuText)/16)-1
00000000                            
00000000                            ; NOTES FOR ANYONE MAKING CHARACTERS
00000000 =FFFFFFE8                  v_character = $FFFFFFE8
00000000                            ; pointers for:
00000000                            ; PLAYER MAPPINGS -> Player_Maps
00000000                            ; PLAYER ANIM SCRIPTS -> Player_Anim
00000000                            ; PLAYER ART -> Player_Art
00000000                            ; PLAYER DPLC -> Player_DPLC
00000000                            ; PLAYER PALETTE -> Player_Palette
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 FFFF+  		dc.l PalToCRAM,	ErrorTrap, vBlankRoutine, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2949 444B 2032 3030+  Date:		dc.b '(C)IDK 2001.SEP '
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  '
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 007C 0700                  		ori	#$700,sr
0000030A                            
0000030A 0839 0006 00A1 000D        		btst	#6,($A1000D).l
00000312 6700                       		beq.s	CheckSumCheck
00000314 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
0000031C 6700 0000                  		beq.w	GameInit	; if yes, branch
00000320                            
00000320                            CheckSumCheck:
00000320                            ;		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000320                            ;		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000320                            ;		move.l	(a1),d0
00000320                            ;		moveq	#0,d1
00000320                            ;
00000320                            ;loc_32C:
00000320                            ;		add.w	(a0)+,d1
00000320                            ;		cmp.l	a0,d0
00000320                            ;		bcc.s	loc_32C
00000320                            ;		movea.l	#Checksum,a1	; read the checksum
00000320                            ;		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
00000320                            ;		bne.w	CheckSumError	; if they don't match, branch
00000320 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000324 7E00                       		moveq	#0,d7
00000326 3C3C 007F                  		move.w	#$7F,d6
0000032A                            
0000032A                            loc_348:
0000032A 2CC7                       		move.l	d7,(a6)+
0000032C 51CE FFFC                  		dbf	d6,loc_348
00000330                            ; HzMd NT/PL MCD JP/OV TMSS TMSS TMSS TMSS
00000330 303C 00EF                  		move.w	#$EF,d0
00000334 C039 00A1 0001             		and.b	($A10001).l,d0
0000033A 0880 0007                  		bclr	#7,d0
0000033E 6700                       		beq.s	@jap
00000340 0000 0010                  		or.b	#1<<4,d0
00000344                            @jap:
00000344 7201                       		moveq	#1,d1
00000346 C279 00C0 0004             		and.w	($C00004).l,d1
0000034C E219                       		ror.b	#1,d1
0000034E 8001                       		or.b	d1,d0
00000350 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
00000354 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
0000035C                            
0000035C                            GameInit:
0000035C 4DF9 00FF 0000             		lea	($FF0000).l,a6
00000362 7E00                       		moveq	#0,d7
00000364 3C3C 3F7F                  		move.w	#$3F7F,d6
00000368                            
00000368                            GameClrRAM:
00000368 2CC7                       		move.l	d7,(a6)+
0000036A 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
0000036E                            
0000036E 31FC 4EF9 FFC4             		move.w	#$4EF9,(vBlankJump).w			; JMP opcode
00000374 21FC 0000 0000 FFC6        		move.l	#loc_B10,(vBlankAdress).w		; Set the V-INT pointer to the standard V-INT routine
0000037C                            
0000037C 6100 0000                  		bsr.w	VDPSetupGame
00000380 6100 0000                  		bsr.w	SoundDriverLoad
00000384 6100 0000                  		bsr.w	JoypadInit
00000388                            
00000388 1038 FFF8                  		move.b	($FFFFFFF8).w,d0
0000038C 0240 000F                  		and.w	#$F,d0
00000390 6700                       		beq.s	@notmss
00000392 4EB9 0000 0000             		jsr	GM_AntiTMSS
00000398                            @notmss:
00000398 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
0000039E                            	;	move.b	#$20,($FFFFF600).w ; set Game Mode to Minecraft
0000039E                            
0000039E                            MainGameLoop:
0000039E 707E                       		moveq	#$7E,d0
000003A0 C038 F600                  		and.b	($FFFFF600).w,d0 ; load	Game Mode
000003A4 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
000003A8 60F4                       		bra.s	MainGameLoop
000003AA                            ; ===========================================================================
000003AA                            ; ---------------------------------------------------------------------------
000003AA                            ; Main game mode array
000003AA                            ; ---------------------------------------------------------------------------
000003AA                            
000003AA                            GameModeArray:
000003AA 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
000003AE                            ; ===========================================================================
000003AE 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
000003B2                            ; ===========================================================================
000003B2 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003B6                            ; ===========================================================================
000003B6 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003BA                            ; ===========================================================================
000003BA 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003BE                            ; ===========================================================================
000003BE 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003C2                            ; ===========================================================================
000003C2 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003C6                            ; ===========================================================================
000003C6 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003CA                            ; ===========================================================================
000003CA 4EF9 0000 0000             		jmp	Minecraft	; Minecraft ($20)	
000003D0                            ; ===========================================================================
000003D0                            
000003D0                            CheckSumError:
000003D0 6100 0000                  		bsr.w	VDPSetupGame
000003D4 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003DE 7E3F                       		moveq	#$3F,d7
000003E0                            
000003E0                            CheckSum_Red:
000003E0 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003E8 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003EC                            
000003EC                            CheckSum_Loop:
000003EC 60FE                       		bra.s	CheckSum_Loop
000003EE                            ; ===========================================================================
000003EE                            
000003EE                            BusError:
000003EE 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003F4 6000                       		bra.s	loc_43A
000003F6                            ; ===========================================================================
000003F6                            
000003F6                            AddressError:
000003F6 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003FC 6000                       		bra.s	loc_43A
000003FE                            ; ===========================================================================
000003FE                            
000003FE                            IllegalInstr:
000003FE 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
00000404 54AF 0002                  		addq.l	#2,2(sp)
00000408 6000                       		bra.s	loc_462
0000040A                            ; ===========================================================================
0000040A                            
0000040A                            ZeroDivide:
0000040A 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
00000410 6000                       		bra.s	loc_462
00000412                            ; ===========================================================================
00000412                            
00000412                            ChkInstr:
00000412 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000418 6000                       		bra.s	loc_462
0000041A                            ; ===========================================================================
0000041A                            
0000041A                            TrapvInstr:
0000041A 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
00000420 6000                       		bra.s	loc_462
00000422                            ; ===========================================================================
00000422                            
00000422                            PrivilegeViol:
00000422 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000428 6000                       		bra.s	loc_462
0000042A                            ; ===========================================================================
0000042A                            
0000042A                            Trace:
0000042A 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
00000430 6000                       		bra.s	loc_462
00000432                            ; ===========================================================================
00000432                            
00000432                            Line1010Emu:
00000432 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000438 54AF 0002                  		addq.l	#2,2(sp)
0000043C 6000                       		bra.s	loc_462
0000043E                            ; ===========================================================================
0000043E                            
0000043E                            Line1111Emu:
0000043E 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
00000444 54AF 0002                  		addq.l	#2,2(sp)
00000448 6000                       		bra.s	loc_462
0000044A                            ; ===========================================================================
0000044A                            
0000044A                            ErrorExcept:
0000044A 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
00000450 6000                       		bra.s	loc_462
00000452                            ; ===========================================================================
00000452                            
00000452                            loc_43A:
00000452 46FC 2700                  		move	#$2700,sr
00000456 544F                       		addq.w	#2,sp
00000458 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
0000045C 544F                       		addq.w	#2,sp
0000045E 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000464 6100 0000                  		bsr.w	ShowErrorMsg
00000468 202F 0002                  		move.l	2(sp),d0
0000046C 6100 0000                  		bsr.w	sub_5BA
00000470 2038 FC40                  		move.l	($FFFFFC40).w,d0
00000474 6100 0000                  		bsr.w	sub_5BA
00000478 6000                       		bra.s	loc_478
0000047A                            ; ===========================================================================
0000047A                            
0000047A                            loc_462:
0000047A 46FC 2700                  		move	#$2700,sr
0000047E 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000484 6100 0000                  		bsr.w	ShowErrorMsg
00000488 202F 0002                  		move.l	2(sp),d0
0000048C 6100 0000                  		bsr.w	sub_5BA
00000490                            
00000490                            loc_478:
00000490 6100 0000                  		bsr.w	ErrorWaitForC
00000494 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
0000049A 46FC 2300                  		move	#$2300,sr
0000049E 4E73                       		rte	
000004A0                            
000004A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000004A0                            
000004A0                            
000004A0                            ShowErrorMsg:				; XREF: loc_43A; loc_462
000004A0 4DF9 00C0 0000             		lea	($C00000).l,a6
000004A6 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
000004B0 41F9 0000 0000             		lea	(Art_Text).l,a0
000004B6 323C 027F                  		move.w	#$27F,d1
000004BA                            
000004BA                            Error_LoadGfx:
000004BA 3C98                       		move.w	(a0)+,(a6)
000004BC 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004C0 7000                       		moveq	#0,d0		; clear	d0
000004C2 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004C6 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004CA 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004CE 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004D8 7212                       		moveq	#$12,d1		; number of characters
000004DA                            
000004DA                            Error_LoopChars:
000004DA 7000                       		moveq	#0,d0
000004DC 1018                       		move.b	(a0)+,d0
000004DE 0640 0790                  		addi.w	#$790,d0
000004E2 3C80                       		move.w	d0,(a6)
000004E4 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004E8 4E75                       		rts	
000004EA                            ; End of function ShowErrorMsg
000004EA                            
000004EA                            ; ===========================================================================
000004EA 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004EE 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004F2 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004F6 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004FA 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004FE 0000                       		dc.w asc_5A6-ErrorText
00000500 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
00000513 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
00000526 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000539 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
0000054C 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
0000055F 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
00000572 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
00000585 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000598 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
000005AB 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005BE 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005D2 00                         		even
000005D2                            
000005D2                            ; ||||||||||||||| S U B	R O U T	I N ET |||||||||||||||||||||||||||||||||||||||
000005D2                            
000005D2                            
000005D2                            sub_5BA:				; XREF: loc_43A; loc_462
000005D2 3CBC 07CA                  		move.w	#$7CA,(a6)
000005D6 7407                       		moveq	#7,d2
000005D8                            
000005D8                            loc_5C0:
000005D8 E998                       		rol.l	#4,d0
000005DA 6100                       		bsr.s	sub_5CA
000005DC 51CA FFFA                  		dbf	d2,loc_5C0
000005E0 4E75                       		rts	
000005E2                            ; End of function sub_5BA
000005E2                            
000005E2                            
000005E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E2                            
000005E2                            
000005E2                            sub_5CA:				; XREF: sub_5BA
000005E2 3200                       		move.w	d0,d1
000005E4 0241 000F                  		andi.w	#$F,d1
000005E8 0C41 000A                  		cmpi.w	#$A,d1
000005EC 6500                       		bcs.s	loc_5D8
000005EE 5E41                       		addq.w	#7,d1
000005F0                            
000005F0                            loc_5D8:
000005F0 0641 07C0                  		addi.w	#$7C0,d1
000005F4 3C81                       		move.w	d1,(a6)
000005F6 4E75                       		rts	
000005F8                            ; End of function sub_5CA
000005F8                            
000005F8                            
000005F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005F8                            
000005F8                            
000005F8                            ErrorWaitForC:				; XREF: loc_478
000005F8 6100 0000                  		bsr.w	ReadJoypads
000005FC 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
00000602 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
00000606 4E75                       		rts	
00000608                            ; End of function ErrorWaitForC
00000608                            
00000608                            ; ===========================================================================
00000608                            
00000608                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D48                            Art_Text_end:		even
00000D48                            
00000D48                            ; ===========================================================================
00000D48                            ;VBlank
00000D48                            loc_B10:				; XREF: Vectors
00000D48 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000D4C 4A38 F62A                  		tst.b	($FFFFF62A).w
00000D50 6700                       		beq.s	loc_B88
00000D52 3039 00C0 0004             		move.w	($C00004).l,d0
00000D58 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000D62 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000D6A                            ;		btst	#6,($FFFFFFF8).w
00000D6A                            ;		beq.s	loc_B42
00000D6A                            ;		move.w	#$700,d0
00000D6A                            ;
00000D6A                            ;loc_B3E:
00000D6A                            ;		dbf	d0,loc_B3E
00000D6A                            
00000D6A                            ;loc_B42:
00000D6A 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000D6E 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000D74 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000D7A 0240 003E                  		andi.w	#$3E,d0
00000D7E 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000D82 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000D86                            
00000D86                            loc_B5E:				; XREF: loc_B88
00000D86 4EB9 0000 0000             		jsr	sub_71B4C
00000D8C                            
00000D8C                            loc_B64:				; XREF: loc_D50
00000D8C 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000D90 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000D94 4E73                       		rte	
00000D96                            ; ===========================================================================
00000D96 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000D9A 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000D9E 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000DA2 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000DA6 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000DAA 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000DAE 0000                       		dc.w loc_E72-off_B6E
00000DB0                            ; ===========================================================================
00000DB0                            
00000DB0                            loc_B88:				; XREF: loc_B10; off_B6E
00000DB0 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000DB6 6700                       		beq.s	loc_B9A
00000DB8 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000DBE 6600 FFC6                  		bne.w	loc_B5E
00000DC2                            
00000DC2                            loc_B9A:
00000DC2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000DC8 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000DCC 3039 00C0 0004             		move.w	($C00004).l,d0
00000DD2                            ;		btst	#6,($FFFFFFF8).w
00000DD2                            ;		beq.s	loc_BBA
00000DD2                            ;		move.w	#$700,d0
00000DD2                            ;
00000DD2                            ;loc_BB6:
00000DD2                            ;		dbf	d0,loc_BB6
00000DD2                            ;
00000DD2                            ;loc_BBA:
00000DD2 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000DD8 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000DE0                            
00000DE0                            loc_BC8:
00000DE0 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000DE8 66F6                       		bne.s	loc_BC8
00000DEA 4A38 F64E                  		tst.b	($FFFFF64E).w
00000DEE 6600                       		bne.s	loc_BFE
00000DF0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DF6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000DFC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E02 3ABC 977F                  		move.w	#$977F,(a5)
00000E06 3ABC C000                  		move.w	#$C000,(a5)
00000E0A 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E10 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E14 6000                       		bra.s	loc_C22
00000E16                            ; ===========================================================================
00000E16                            
00000E16                            loc_BFE:				; XREF: loc_BC8
00000E16 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E1C 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E22 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E28 3ABC 977F                  		move.w	#$977F,(a5)
00000E2C 3ABC C000                  		move.w	#$C000,(a5)
00000E30 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E36 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E3A                            
00000E3A                            loc_C22:				; XREF: loc_BC8
00000E3A 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E3E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E46 6000 FF3E                  		bra.w	loc_B5E
00000E4A                            ; ===========================================================================
00000E4A                            
00000E4A                            loc_C32:				; XREF: off_B6E
00000E4A 6100 0000                  		bsr.w	sub_106E
00000E4E                            
00000E4E                            loc_C36:				; XREF: off_B6E
00000E4E 4A78 F614                  		tst.w	($FFFFF614).w
00000E52 6700 0000                  		beq.w	locret_C42
00000E56 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E5A                            
00000E5A                            locret_C42:
00000E5A 4E75                       		rts	
00000E5C                            ; ===========================================================================
00000E5C                            
00000E5C                            loc_C44:				; XREF: off_B6E
00000E5C 6100 0000                  		bsr.w	sub_106E
00000E60 6100 0000                  		bsr.w	sub_6886
00000E64 6100 0000                  		bsr.w	sub_1642
00000E68 4A78 F614                  		tst.w	($FFFFF614).w
00000E6C 6700 0000                  		beq.w	locret_C5C
00000E70 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E74                            
00000E74                            locret_C5C:
00000E74 4E75                       		rts	
00000E76                            ; ===========================================================================
00000E76                            
00000E76                            loc_C5E:				; XREF: off_B6E
00000E76 6100 0000                  		bsr.w	sub_106E
00000E7A 4E75                       		rts	
00000E7C                            ; ===========================================================================
00000E7C                            
00000E7C                            loc_C64:				; XREF: off_B6E
00000E7C 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000E82 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000E86                            
00000E86                            loc_C6E:				; XREF: off_B6E
00000E86 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E8E                            
00000E8E                            loc_C76:
00000E8E 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000E96 66F6                       		bne.s	loc_C76		; if not, branch
00000E98 6100 0000                  		bsr.w	ReadJoypads
00000E9C 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EA0 6600                       		bne.s	loc_CB0
00000EA2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EA8 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EAE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EB4 3ABC 977F                  		move.w	#$977F,(a5)
00000EB8 3ABC C000                  		move.w	#$C000,(a5)
00000EBC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EC2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EC6 6000                       		bra.s	loc_CD4
00000EC8                            ; ===========================================================================
00000EC8                            
00000EC8                            loc_CB0:				; XREF: loc_C76
00000EC8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000ECE 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000ED4 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EDA 3ABC 977F                  		move.w	#$977F,(a5)
00000EDE 3ABC C000                  		move.w	#$C000,(a5)
00000EE2 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EE8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EEC                            
00000EEC                            loc_CD4:				; XREF: loc_C76
00000EEC 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EF0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EF6 203C 9401 93C0             		move.l	#$940193C0,d0		; 224
00000EFC 4A38 FFF8                  		tst.b	($FFFFFFF8).w		; hscroll
00000F00 6A00                       		bpl.s	@60hz
00000F02 303C 93E0                  		move.w	#$93E0,d0		; 240
00000F06                            @60hz:
00000F06 2A80                       		move.l	d0,(a5)
00000F08 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F0E 3ABC 977F                  		move.w	#$977F,(a5)
00000F12 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F16 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F1C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F20 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F26 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F2C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F32 3ABC 977F                  		move.w	#$977F,(a5)
00000F36 3ABC 7800                  		move.w	#$7800,(a5)
00000F3A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F40 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F44 4A38 F767                  		tst.b	($FFFFF767).w
00000F48 6700                       		beq.s	loc_D50
00000F4A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F50 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F56 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F5C 3ABC 977F                  		move.w	#$977F,(a5)
00000F60 3ABC 7000                  		move.w	#$7000,(a5)
00000F64 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F6A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F6E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F74                            
00000F74                            loc_D50:
00000F74 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000F7C 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F82 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F88 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F8E 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F94 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000F9A 6400                       		bcc.s	Demo_Time
00000F9C 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000FA2 588F                       		addq.l	#4,sp
00000FA4 6000 FDE6                  		bra.w	loc_B64
00000FA8                            
00000FA8                            ; ---------------------------------------------------------------------------
00000FA8                            ; Subroutine to	run a demo for an amount of time
00000FA8                            ; ---------------------------------------------------------------------------
00000FA8                            
00000FA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FA8                            
00000FA8                            
00000FA8                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000FA8 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000FAC 4EB9 0000 0000             		jsr	AniArt_Load
00000FB2 4EB9 0000 0000             		jsr	HudUpdate
00000FB8 6100 0000                  		bsr.w	sub_165E
00000FBC 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000FC0 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000FC4 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000FC8                            
00000FC8                            Demo_TimeEnd:
00000FC8 4E75                       		rts	
00000FCA                            ; End of function Demo_Time
00000FCA                            
00000FCA                            ; ===========================================================================
00000FCA                            
00000FCA                            loc_DA6:				; XREF: off_B6E
00000FCA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FD2                            
00000FD2                            loc_DAE:
00000FD2 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FDA 66F6                       		bne.s	loc_DAE		; if not, branch
00000FDC 6100 0000                  		bsr.w	ReadJoypads
00000FE0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FE6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FEC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FF2 3ABC 977F                  		move.w	#$977F,(a5)
00000FF6 3ABC C000                  		move.w	#$C000,(a5)
00000FFA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001000 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001004 4BF9 00C0 0004             		lea	($C00004).l,a5
0000100A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001010 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001016 3ABC 977F                  		move.w	#$977F,(a5)
0000101A 3ABC 7800                  		move.w	#$7800,(a5)
0000101E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001024 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001028 4BF9 00C0 0004             		lea	($C00004).l,a5
0000102E 203C 9401 93C0             		move.l	#$940193C0,d0		; 224
00001034 4A38 FFF8                  		tst.b	($FFFFFFF8).w		; hscroll
00001038 6A00                       		bpl.s	@60hz
0000103A 303C 93E0                  		move.w	#$93E0,d0		; 240
0000103E                            @60hz:
0000103E 2A80                       		move.l	d0,(a5)
00001040 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001046 3ABC 977F                  		move.w	#$977F,(a5)
0000104A 3ABC 7C00                  		move.w	#$7C00,(a5)
0000104E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001054 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001058 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00001060 6100 0000                  		bsr.w	PalCycle_SS
00001064 4A38 F767                  		tst.b	($FFFFF767).w
00001068 6700                       		beq.s	loc_E64
0000106A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001070 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001076 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000107C 3ABC 977F                  		move.w	#$977F,(a5)
00001080 3ABC 7000                  		move.w	#$7000,(a5)
00001084 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000108A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000108E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001094                            
00001094                            loc_E64:
00001094 4A78 F614                  		tst.w	($FFFFF614).w
00001098 6700 0000                  		beq.w	locret_E70
0000109C 5378 F614                  		subq.w	#1,($FFFFF614).w
000010A0                            
000010A0                            locret_E70:
000010A0 4E75                       		rts	
000010A2                            ; ===========================================================================
000010A2                            
000010A2                            loc_E72:				; XREF: off_B6E
000010A2 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000010AA                            
000010AA                            loc_E7A:
000010AA 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000010B2 66F6                       		bne.s	loc_E7A		; if not, branch
000010B4 6100 0000                  		bsr.w	ReadJoypads
000010B8 4A38 F64E                  		tst.b	($FFFFF64E).w
000010BC 6600                       		bne.s	loc_EB4
000010BE 4BF9 00C0 0004             		lea	($C00004).l,a5
000010C4 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010CA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000010D0 3ABC 977F                  		move.w	#$977F,(a5)
000010D4 3ABC C000                  		move.w	#$C000,(a5)
000010D8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010DE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010E2 6000                       		bra.s	loc_ED8
000010E4                            ; ===========================================================================
000010E4                            
000010E4                            loc_EB4:				; XREF: loc_E7A
000010E4 4BF9 00C0 0004             		lea	($C00004).l,a5
000010EA 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010F0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010F6 3ABC 977F                  		move.w	#$977F,(a5)
000010FA 3ABC C000                  		move.w	#$C000,(a5)
000010FE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001104 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001108                            
00001108                            loc_ED8:				; XREF: loc_E7A
00001108 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
0000110C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001112 203C 9401 93C0             		move.l	#$940193C0,d0		; 224
00001118 4A38 FFF8                  		tst.b	($FFFFFFF8).w		; hscroll
0000111C 6A00                       		bpl.s	@60hz
0000111E 303C 93E0                  		move.w	#$93E0,d0		; 240
00001122                            @60hz:
00001122 2A80                       		move.l	d0,(a5)
00001124 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000112A 3ABC 977F                  		move.w	#$977F,(a5)
0000112E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001132 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001138 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000113C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001142 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001148 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
0000114E 3ABC 977F                  		move.w	#$977F,(a5)
00001152 3ABC 7800                  		move.w	#$7800,(a5)
00001156 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000115C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001160 4A38 F767                  		tst.b	($FFFFF767).w
00001164 6700                       		beq.s	loc_F54
00001166 4BF9 00C0 0004             		lea	($C00004).l,a5
0000116C 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001172 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001178 3ABC 977F                  		move.w	#$977F,(a5)
0000117C 3ABC 7000                  		move.w	#$7000,(a5)
00001180 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001186 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000118A 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001190                            
00001190                            loc_F54:
00001190 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001198 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
0000119E 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
000011A4 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
000011AA 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
000011B0 6100 0000                  		bsr.w	LoadTilesAsYouMove
000011B4 4EB9 0000 0000             		jsr	AniArt_Load
000011BA 4EB9 0000 0000             		jsr	HudUpdate
000011C0 6100 0000                  		bsr.w	sub_1642
000011C4 4E75                       		rts	
000011C6                            ; ===========================================================================
000011C6                            
000011C6                            loc_F8A:				; XREF: off_B6E
000011C6 6100 0000                  		bsr.w	sub_106E
000011CA 5238 F628                  		addq.b	#1,($FFFFF628).w
000011CE 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
000011D4 4E75                       		rts	
000011D6                            ; ===========================================================================
000011D6                            
000011D6                            loc_F9A:				; XREF: off_B6E
000011D6 6100 0000                  		bsr.w	sub_106E
000011DA 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000011DE 6000 0000                  		bra.w	sub_1642
000011E2                            ; ===========================================================================
000011E2                            
000011E2                            loc_FA6:				; XREF: off_B6E
000011E2 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011EA                            
000011EA                            loc_FAE:
000011EA 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000011F2 66F6                       		bne.s	loc_FAE		; if not, branch
000011F4 6100 0000                  		bsr.w	ReadJoypads
000011F8 4BF9 00C0 0004             		lea	($C00004).l,a5
000011FE 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001204 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
0000120A 3ABC 977F                  		move.w	#$977F,(a5)
0000120E 3ABC C000                  		move.w	#$C000,(a5)
00001212 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001218 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000121C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001222 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001228 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
0000122E 3ABC 977F                  		move.w	#$977F,(a5)
00001232 3ABC 7800                  		move.w	#$7800,(a5)
00001236 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000123C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001240 4BF9 00C0 0004             		lea	($C00004).l,a5
00001246 203C 9401 93C0             		move.l	#$940193C0,d0		; 224
0000124C 4A38 FFF8                  		tst.b	($FFFFFFF8).w		; hscroll
00001250 6A00                       		bpl.s	@60hz
00001252 303C 93E0                  		move.w	#$93E0,d0		; 240
00001256                            @60hz:
00001256 2A80                       		move.l	d0,(a5)
00001258 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000125E 3ABC 977F                  		move.w	#$977F,(a5)
00001262 3ABC 7C00                  		move.w	#$7C00,(a5)
00001266 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000126C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001270 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001278 4A38 F767                  		tst.b	($FFFFF767).w
0000127C 6700                       		beq.s	loc_1060
0000127E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001284 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000128A 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001290 3ABC 977F                  		move.w	#$977F,(a5)
00001294 3ABC 7000                  		move.w	#$7000,(a5)
00001298 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000129E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012A2 11FC 0000 F767             		move.b	#0,($FFFFF767).w
000012A8                            
000012A8                            loc_1060:
000012A8 4A78 F614                  		tst.w	($FFFFF614).w
000012AC 6700 0000                  		beq.w	locret_106C
000012B0 5378 F614                  		subq.w	#1,($FFFFF614).w
000012B4                            
000012B4                            locret_106C:
000012B4 4E75                       		rts	
000012B6                            
000012B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012B6                            
000012B6                            
000012B6                            sub_106E:				; XREF: loc_C32; et al
000012B6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000012BE                            
000012BE                            loc_1076:
000012BE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000012C6 66F6                       		bne.s	loc_1076	; if not, branch
000012C8 6100 0000                  		bsr.w	ReadJoypads
000012CC 4BF9 00C0 0004             		lea	($C00004).l,a5
000012D2 4A38 F64E                  		tst.b	($FFFFF64E).w
000012D6 6600                       		bne.s	loc_10B0
000012D8 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012DE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000012E4 3ABC 977F                  		move.w	#$977F,(a5)
000012E8 3ABC C000                  		move.w	#$C000,(a5)
000012EC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012F2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012F6 6000                       		bra.s	loc_10D4
000012F8                            ; ===========================================================================
000012F8                            
000012F8                            loc_10B0:				; XREF: sub_106E
000012F8 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012FE 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00001304 3ABC 977F                  		move.w	#$977F,(a5)
00001308 3ABC C000                  		move.w	#$C000,(a5)
0000130C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001312 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001316                            
00001316                            loc_10D4:				; XREF: sub_106E
00001316 2ABC 9401 9340             		move.l	#$94019340,(a5)		; sprites
0000131C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001322 3ABC 977F                  		move.w	#$977F,(a5)
00001326 3ABC 7800                  		move.w	#$7800,(a5)
0000132A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001330 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001334                            
00001334 203C 9401 93C0             		move.l	#$940193C0,d0		; 224
0000133A 4A38 FFF8                  		tst.b	($FFFFFFF8).w		; hscroll
0000133E 6A00                       		bpl.s	@60hz
00001340 303C 93E0                  		move.w	#$93E0,d0		; 240
00001344                            @60hz:
00001344 2A80                       		move.l	d0,(a5)
00001346 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000134C 3ABC 977F                  		move.w	#$977F,(a5)
00001350 3ABC 7C00                  		move.w	#$7C00,(a5)
00001354 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000135A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000135E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001366 4E75                       		rts	
00001368                            ; End of function sub_106E
00001368                            
00001368                            ; ---------------------------------------------------------------------------
00001368                            ; Subroutine to	move pallets from the RAM to CRAM
00001368                            ; ---------------------------------------------------------------------------
00001368                            
00001368                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001368                            
00001368                            
00001368                            PalToCRAM:
00001368 46FC 2700                  		move	#$2700,sr
0000136C 4A78 F644                  		tst.w	($FFFFF644).w
00001370 6700                       		beq.s	locret_119C
00001372 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00001378 48E7 00C0                  		movem.l	a0-a1,-(sp)
0000137C 43F9 00C0 0000             		lea	($C00000).l,a1
00001382 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001386 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
0000138E 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
00001390 2298                       		move.l	(a0)+,(a1)
00001392 2298                       		move.l	(a0)+,(a1)
00001394 2298                       		move.l	(a0)+,(a1)
00001396 2298                       		move.l	(a0)+,(a1)
00001398 2298                       		move.l	(a0)+,(a1)
0000139A 2298                       		move.l	(a0)+,(a1)
0000139C 2298                       		move.l	(a0)+,(a1)
0000139E 2298                       		move.l	(a0)+,(a1)
000013A0 2298                       		move.l	(a0)+,(a1)
000013A2 2298                       		move.l	(a0)+,(a1)
000013A4 2298                       		move.l	(a0)+,(a1)
000013A6 2298                       		move.l	(a0)+,(a1)
000013A8 2298                       		move.l	(a0)+,(a1)
000013AA 2298                       		move.l	(a0)+,(a1)
000013AC 2298                       		move.l	(a0)+,(a1)
000013AE 2298                       		move.l	(a0)+,(a1)
000013B0 2298                       		move.l	(a0)+,(a1)
000013B2 2298                       		move.l	(a0)+,(a1)
000013B4 2298                       		move.l	(a0)+,(a1)
000013B6 2298                       		move.l	(a0)+,(a1)
000013B8 2298                       		move.l	(a0)+,(a1)
000013BA 2298                       		move.l	(a0)+,(a1)
000013BC 2298                       		move.l	(a0)+,(a1)
000013BE 2298                       		move.l	(a0)+,(a1)
000013C0 2298                       		move.l	(a0)+,(a1)
000013C2 2298                       		move.l	(a0)+,(a1)
000013C4 2298                       		move.l	(a0)+,(a1)
000013C6 2298                       		move.l	(a0)+,(a1)
000013C8 2298                       		move.l	(a0)+,(a1)
000013CA 2298                       		move.l	(a0)+,(a1)
000013CC 2298                       		move.l	(a0)+,(a1)
000013CE 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
000013D4 4CDF 0300                  		movem.l	(sp)+,a0-a1
000013D8 4A38 F64F                  		tst.b	($FFFFF64F).w
000013DC 6600                       		bne.s	loc_119E
000013DE                            
000013DE                            locret_119C:
000013DE 4E73                       		rte	
000013E0                            ; ===========================================================================
000013E0                            
000013E0                            loc_119E:				; XREF: PalToCRAM
000013E0 4238 F64F                  		clr.b	($FFFFF64F).w
000013E4 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000013E8 6100 FBBE                  		bsr.w	Demo_Time
000013EC 4EB9 0000 0000             		jsr	sub_71B4C
000013F2 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000013F6 4E73                       		rte	
000013F8                            ; End of function PalToCRAM
000013F8                            
000013F8                            ; ---------------------------------------------------------------------------
000013F8                            ; Subroutine to	initialise joypads
000013F8                            ; ---------------------------------------------------------------------------
000013F8                            
000013F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013F8                            
000013F8                            
000013F8                            JoypadInit:				; XREF: GameClrRAM
000013F8 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001400                            
00001400                            Joypad_WaitZ80:
00001400 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
00001408 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
0000140A 7040                       		moveq	#$40,d0
0000140C 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
00001412 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00001418 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
0000141E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001426 4E75                       		rts	
00001428                            ; End of function JoypadInit
00001428                            
00001428                            ; ---------------------------------------------------------------------------
00001428                            ; Subroutine to	read joypad input, and send it to the RAM
00001428                            ; ---------------------------------------------------------------------------
00001428                            
00001428                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001428                            
00001428                            
00001428                            ReadJoypads:
00001428 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
0000142C 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00001432 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001434 5449                       		addq.w	#2,a1		; do the second	joypad
00001436                            
00001436                            Joypad_Read:
00001436 12BC 0000                  		move.b	#0,(a1)
0000143A 4E71                       		nop	
0000143C 4E71                       		nop	
0000143E 1011                       		move.b	(a1),d0
00001440 E508                       		lsl.b	#2,d0
00001442 0200 00C0                  		andi.b	#$C0,d0
00001446 12BC 0040                  		move.b	#$40,(a1)
0000144A 4E71                       		nop	
0000144C 4E71                       		nop	
0000144E 1211                       		move.b	(a1),d1
00001450 0201 003F                  		andi.b	#$3F,d1
00001454 8001                       		or.b	d1,d0
00001456 4600                       		not.b	d0
00001458 1210                       		move.b	(a0),d1
0000145A B101                       		eor.b	d0,d1
0000145C 10C0                       		move.b	d0,(a0)+
0000145E C200                       		and.b	d0,d1
00001460 10C1                       		move.b	d1,(a0)+
00001462 4E75                       		rts	
00001464                            ; End of function ReadJoypads
00001464                            
00001464                            
00001464                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001464                            
00001464                            
00001464                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001464 41F9 00C0 0004             		lea	($C00004).l,a0
0000146A 43F9 00C0 0000             		lea	($C00000).l,a1
00001470 45FA 0000                  		lea	VDPSetupArray(pc),a2
00001474 7E12                       		moveq	#$12,d7
00001476                            
00001476                            VDP_Loop:
00001476 309A                       		move.w	(a2)+,(a0)
00001478 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
0000147C                            
0000147C 303A 0000                  		move.w	VDPSetupArray+2(pc),d0
00001480 0838 0007 FFF8             		btst	#7,($FFFFFFF8).w	; Is this a PAL console?
00001486 6700                       		beq.s	.UseV28			; If not, skip
00001488 08C0 0003                  		bset	#3,d0			; set v30 and pretend nothing happened
0000148C                            .UseV28:
0000148C 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001490 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001496 7000                       		moveq	#0,d0
00001498 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000014A2 3E3C 003F                  		move.w	#$3F,d7
000014A6                            
000014A6                            VDP_ClrCRAM:
000014A6 3280                       		move.w	d0,(a1)
000014A8 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
000014AC                            
000014AC 42B8 F616                  		clr.l	($FFFFF616).w
000014B0 42B8 F61A                  		clr.l	($FFFFF61A).w
000014B4 2F01                       		move.l	d1,-(sp)
000014B6 4BF9 00C0 0004             		lea	($C00004).l,a5
000014BC 3ABC 8F01                  		move.w	#$8F01,(a5)
000014C0 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
000014C6 3ABC 9780                  		move.w	#$9780,(a5)
000014CA 2ABC 4000 0080             		move.l	#$40000080,(a5)
000014D0 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000014D8                            
000014D8                            loc_128E:
000014D8 3215                       		move.w	(a5),d1
000014DA 0801 0001                  		btst	#1,d1
000014DE 66F8                       		bne.s	loc_128E
000014E0                            
000014E0 3ABC 8F02                  		move.w	#$8F02,(a5)
000014E4 221F                       		move.l	(sp)+,d1
000014E6 4E75                       		rts	
000014E8                            ; End of function VDPSetupGame
000014E8                            
000014E8                            ; ===========================================================================
000014E8 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000014F0 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000014F8 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
00001500 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
00001508 9001 9100 9200             		dc.w $9001, $9100, $9200
0000150E                            
0000150E                            ; ---------------------------------------------------------------------------
0000150E                            ; Subroutine to	clear the screen
0000150E                            ; ---------------------------------------------------------------------------
0000150E                            
0000150E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000150E                            
0000150E                            
0000150E                            ClearScreen:
0000150E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001514 3ABC 8F01                  		move.w	#$8F01,(a5)
00001518 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
0000151E 3ABC 9780                  		move.w	#$9780,(a5)
00001522 2ABC 4000 0083             		move.l	#$40000083,(a5)
00001528 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001530                            
00001530                            loc_12E6:
00001530 3215                       		move.w	(a5),d1
00001532 0801 0001                  		btst	#1,d1
00001536 66F8                       		bne.s	loc_12E6
00001538                            
00001538 3ABC 8F02                  		move.w	#$8F02,(a5)
0000153C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001542 3ABC 8F01                  		move.w	#$8F01,(a5)
00001546 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
0000154C 3ABC 9780                  		move.w	#$9780,(a5)
00001550 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001556 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000155E                            
0000155E                            loc_1314:
0000155E 3215                       		move.w	(a5),d1
00001560 0801 0001                  		btst	#1,d1
00001564 66F8                       		bne.s	loc_1314
00001566                            
00001566 3ABC 8F02                  		move.w	#$8F02,(a5)
0000156A 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001572 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
0000157A 43F8 F800                  		lea	($FFFFF800).w,a1
0000157E 7000                       		moveq	#0,d0
00001580 323C 009F                  		move.w	#$9F,d1
00001584                            
00001584                            loc_133A:
00001584 22C0                       		move.l	d0,(a1)+
00001586 51C9 FFFC                  		dbf	d1,loc_133A
0000158A                            
0000158A 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000158E 7000                       		moveq	#0,d0
00001590 323C 00FF                  		move.w	#$FF,d1
00001594                            
00001594                            loc_134A:
00001594 22C0                       		move.l	d0,(a1)+
00001596 51C9 FFFC                  		dbf	d1,loc_134A
0000159A 4E75                       		rts	
0000159C                            ; End of function ClearScreen
0000159C                            
0000159C                            ; ---------------------------------------------------------------------------
0000159C                            ; Subroutine to	load the sound driver
0000159C                            ; ---------------------------------------------------------------------------
0000159C                            
0000159C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000159C                            
0000159C                            
0000159C                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
0000159C 4E71                       		nop	
0000159E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000015A6 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
000015AE 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
000015B4 43F9 00A0 0000             		lea	($A00000).l,a1
000015BA 6100 0000                  		bsr.w	KosDec		; decompress
000015BE 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
000015C6 4E71                       		nop	
000015C8 4E71                       		nop	
000015CA 4E71                       		nop	
000015CC 4E71                       		nop	
000015CE 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
000015D6 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000015DE 4E75                       		rts	
000015E0                            ; End of function SoundDriverLoad
000015E0                            
000015E0                            ; ---------------------------------------------------------------------------
000015E0                            ; Subroutine to	play a sound or	music track
000015E0                            ; ---------------------------------------------------------------------------
000015E0                            
000015E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015E0                            
000015E0                            
000015E0                            PlaySound:
000015E0 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000015E4 4E75                       		rts	
000015E6                            ; End of function PlaySound
000015E6                            
000015E6                            ; ---------------------------------------------------------------------------
000015E6                            ; Subroutine to	play a special sound/music (E0-E4)
000015E6                            ;
000015E6                            ; E0 - Fade out
000015E6                            ; E1 - Sega
000015E6                            ; E2 - Speed up
000015E6                            ; E3 - Normal speed
000015E6                            ; E4 - Stop
000015E6                            ; ---------------------------------------------------------------------------
000015E6                            
000015E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015E6                            
000015E6                            
000015E6                            PlaySound_Special:
000015E6 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000015EA 4E75                       		rts	
000015EC                            ; End of function PlaySound_Special
000015EC                            
000015EC                            ; ===========================================================================
000015EC                            ; ---------------------------------------------------------------------------
000015EC                            ; Unused sound/music subroutine
000015EC                            ; ---------------------------------------------------------------------------
000015EC                            
000015EC                            PlaySound_Unk:
000015EC 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000015F0 4E75                       		rts	
000015F2                            
000015F2                            ; ---------------------------------------------------------------------------
000015F2                            ; Subroutine to	pause the game
000015F2                            ; ---------------------------------------------------------------------------
000015F2                            
000015F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015F2                            
000015F2                            
000015F2                            PauseGame:				; XREF: Level_MainLoop; et al
000015F2 4E71                       		nop	
000015F4 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000015F8 6700                       		beq.s	Unpause		; if not, branch
000015FA 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000015FE 6600                       		bne.s	loc_13BE	; if yes, branch
00001600 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001606 6700                       		beq.s	Pause_DoNothing	; if not, branch
00001608                            
00001608                            loc_13BE:
00001608 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
0000160E 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
00001614                            
00001614                            loc_13CA:
00001614 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
0000161A 6100 0000                  		bsr.w	DelayProgram
0000161E 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
00001622 6700                       		beq.s	Pause_ChkStart	; if not, branch
00001624 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0000162A 6700                       		beq.s	Pause_ChkBC	; if not, branch
0000162C 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
00001632 4E71                       		nop	
00001634 6000                       		bra.s	loc_1404
00001636                            ; ===========================================================================
00001636                            
00001636                            Pause_ChkBC:				; XREF: PauseGame
00001636 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
0000163C 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000163E 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
00001644 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001646                            
00001646                            Pause_ChkStart:				; XREF: PauseGame
00001646 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
0000164C 67C6                       		beq.s	loc_13CA	; if not, branch
0000164E                            
0000164E                            loc_1404:				; XREF: PauseGame
0000164E 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001654                            
00001654                            Unpause:				; XREF: PauseGame
00001654 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
0000165A                            
0000165A                            Pause_DoNothing:			; XREF: PauseGame
0000165A 4E75                       		rts	
0000165C                            ; ===========================================================================
0000165C                            
0000165C                            Pause_SlowMo:				; XREF: PauseGame
0000165C 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001662 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001668 4E75                       		rts	
0000166A                            ; End of function PauseGame
0000166A                            
0000166A                            ; ---------------------------------------------------------------------------
0000166A                            ; Subroutine to	display	patterns via the VDP
0000166A                            ; ---------------------------------------------------------------------------
0000166A                            
0000166A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000166A                            
0000166A                            
0000166A                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
0000166A 4DF9 00C0 0000             		lea	($C00000).l,a6
00001670 283C 0080 0000             		move.l	#$800000,d4
00001676                            
00001676                            loc_142C:
00001676 2D40 0004                  		move.l	d0,4(a6)
0000167A 3601                       		move.w	d1,d3
0000167C                            
0000167C                            loc_1432:
0000167C 3C99                       		move.w	(a1)+,(a6)
0000167E 51CB FFFC                  		dbf	d3,loc_1432
00001682 D084                       		add.l	d4,d0
00001684 51CA FFF0                  		dbf	d2,loc_142C
00001688 4E75                       		rts	
0000168A                            ; End of function ShowVDPGraphics
0000168A                            
0000168A                            ; ---------------------------------------------------------------------------
0000168A                            ; Nemesis decompression	algorithm
0000168A                            ; ---------------------------------------------------------------------------
0000168A                            
0000168A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000168A                            
0000168A                            
0000168A                            NemDec:
0000168A 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
0000168E 47F9 0000 0000             		lea	(loc_1502).l,a3
00001694 49F9 00C0 0000             		lea	($C00000).l,a4
0000169A 6000                       		bra.s	loc_145C
0000169C                            ; ===========================================================================
0000169C 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
000016A0 47F9 0000 0000             		lea	(loc_1518).l,a3
000016A6                            
000016A6                            loc_145C:				; XREF: NemDec
000016A6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000016AA 3418                       		move.w	(a0)+,d2
000016AC E34A                       		lsl.w	#1,d2
000016AE 6400                       		bcc.s	loc_146A
000016B0 D6FC 000A                  		adda.w	#$A,a3
000016B4                            
000016B4                            loc_146A:
000016B4 E54A                       		lsl.w	#2,d2
000016B6 3A42                       		movea.w	d2,a5
000016B8 7608                       		moveq	#8,d3
000016BA 7400                       		moveq	#0,d2
000016BC 7800                       		moveq	#0,d4
000016BE 6100 0000                  		bsr.w	NemDec4
000016C2 1A18                       		move.b	(a0)+,d5
000016C4 E145                       		asl.w	#8,d5
000016C6 1A18                       		move.b	(a0)+,d5
000016C8 3C3C 0010                  		move.w	#$10,d6
000016CC 6100                       		bsr.s	NemDec2
000016CE 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000016D2 4E75                       		rts	
000016D4                            ; End of function NemDec
000016D4                            
000016D4                            
000016D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016D4                            
000016D4                            
000016D4                            NemDec2:				; XREF: NemDec
000016D4 3E06                       		move.w	d6,d7
000016D6 5147                       		subq.w	#8,d7
000016D8 3205                       		move.w	d5,d1
000016DA EE69                       		lsr.w	d7,d1
000016DC 0C01 00FC                  		cmpi.b	#-4,d1
000016E0 6400                       		bcc.s	loc_14D6
000016E2 0241 00FF                  		andi.w	#$FF,d1
000016E6 D241                       		add.w	d1,d1
000016E8 1031 1000                  		move.b	(a1,d1.w),d0
000016EC 4880                       		ext.w	d0
000016EE 9C40                       		sub.w	d0,d6
000016F0 0C46 0009                  		cmpi.w	#9,d6
000016F4 6400                       		bcc.s	loc_14B2
000016F6 5046                       		addq.w	#8,d6
000016F8 E145                       		asl.w	#8,d5
000016FA 1A18                       		move.b	(a0)+,d5
000016FC                            
000016FC                            loc_14B2:
000016FC 1231 1001                  		move.b	1(a1,d1.w),d1
00001700 3001                       		move.w	d1,d0
00001702 0241 000F                  		andi.w	#$F,d1
00001706 0240 00F0                  		andi.w	#$F0,d0
0000170A                            
0000170A                            loc_14C0:				; XREF: NemDec3
0000170A E848                       		lsr.w	#4,d0
0000170C                            
0000170C                            loc_14C2:				; XREF: NemDec3
0000170C E98C                       		lsl.l	#4,d4
0000170E 8801                       		or.b	d1,d4
00001710 5343                       		subq.w	#1,d3
00001712 6600                       		bne.s	loc_14D0
00001714 4ED3                       		jmp	(a3)
00001716                            ; End of function NemDec2
00001716                            
00001716                            
00001716                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001716                            
00001716                            
00001716                            NemDec3:				; XREF: loc_1502
00001716 7800                       		moveq	#0,d4
00001718 7608                       		moveq	#8,d3
0000171A                            
0000171A                            loc_14D0:				; XREF: NemDec2
0000171A 51C8 FFF0                  		dbf	d0,loc_14C2
0000171E 60B4                       		bra.s	NemDec2
00001720                            ; ===========================================================================
00001720                            
00001720                            loc_14D6:				; XREF: NemDec2
00001720 5D46                       		subq.w	#6,d6
00001722 0C46 0009                  		cmpi.w	#9,d6
00001726 6400                       		bcc.s	loc_14E4
00001728 5046                       		addq.w	#8,d6
0000172A E145                       		asl.w	#8,d5
0000172C 1A18                       		move.b	(a0)+,d5
0000172E                            
0000172E                            loc_14E4:				; XREF: NemDec3
0000172E 5F46                       		subq.w	#7,d6
00001730 3205                       		move.w	d5,d1
00001732 EC69                       		lsr.w	d6,d1
00001734 3001                       		move.w	d1,d0
00001736 0241 000F                  		andi.w	#$F,d1
0000173A 0240 0070                  		andi.w	#$70,d0
0000173E 0C46 0009                  		cmpi.w	#9,d6
00001742 64C6                       		bcc.s	loc_14C0
00001744 5046                       		addq.w	#8,d6
00001746 E145                       		asl.w	#8,d5
00001748 1A18                       		move.b	(a0)+,d5
0000174A 60BE                       		bra.s	loc_14C0
0000174C                            ; End of function NemDec3
0000174C                            
0000174C                            ; ===========================================================================
0000174C                            
0000174C                            loc_1502:				; XREF: NemDec
0000174C 2884                       		move.l	d4,(a4)
0000174E 534D                       		subq.w	#1,a5
00001750 380D                       		move.w	a5,d4
00001752 66C2                       		bne.s	NemDec3
00001754 4E75                       		rts	
00001756                            ; ===========================================================================
00001756 B982                       		eor.l	d4,d2
00001758 2882                       		move.l	d2,(a4)
0000175A 534D                       		subq.w	#1,a5
0000175C 380D                       		move.w	a5,d4
0000175E 66B6                       		bne.s	NemDec3
00001760 4E75                       		rts	
00001762                            ; ===========================================================================
00001762                            
00001762                            loc_1518:				; XREF: NemDec
00001762 28C4                       		move.l	d4,(a4)+
00001764 534D                       		subq.w	#1,a5
00001766 380D                       		move.w	a5,d4
00001768 66AC                       		bne.s	NemDec3
0000176A 4E75                       		rts	
0000176C                            ; ===========================================================================
0000176C B982                       		eor.l	d4,d2
0000176E 28C2                       		move.l	d2,(a4)+
00001770 534D                       		subq.w	#1,a5
00001772 380D                       		move.w	a5,d4
00001774 66A0                       		bne.s	NemDec3
00001776 4E75                       		rts	
00001778                            
00001778                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001778                            
00001778                            
00001778                            NemDec4:				; XREF: NemDec
00001778 1018                       		move.b	(a0)+,d0
0000177A                            
0000177A                            loc_1530:
0000177A 0C00 00FF                  		cmpi.b	#-1,d0
0000177E 6600                       		bne.s	loc_1538
00001780 4E75                       		rts	
00001782                            ; ===========================================================================
00001782                            
00001782                            loc_1538:				; XREF: NemDec4
00001782 3E00                       		move.w	d0,d7
00001784                            
00001784                            loc_153A:
00001784 1018                       		move.b	(a0)+,d0
00001786 0C00 0080                  		cmpi.b	#$80,d0
0000178A 64EE                       		bcc.s	loc_1530
0000178C 1200                       		move.b	d0,d1
0000178E 0247 000F                  		andi.w	#$F,d7
00001792 0241 0070                  		andi.w	#$70,d1
00001796 8E41                       		or.w	d1,d7
00001798 0240 000F                  		andi.w	#$F,d0
0000179C 1200                       		move.b	d0,d1
0000179E E149                       		lsl.w	#8,d1
000017A0 8E41                       		or.w	d1,d7
000017A2 7208                       		moveq	#8,d1
000017A4 9240                       		sub.w	d0,d1
000017A6 6600                       		bne.s	loc_1568
000017A8 1018                       		move.b	(a0)+,d0
000017AA D040                       		add.w	d0,d0
000017AC 3387 0000                  		move.w	d7,(a1,d0.w)
000017B0 60D2                       		bra.s	loc_153A
000017B2                            ; ===========================================================================
000017B2                            
000017B2                            loc_1568:				; XREF: NemDec4
000017B2 1018                       		move.b	(a0)+,d0
000017B4 E368                       		lsl.w	d1,d0
000017B6 D040                       		add.w	d0,d0
000017B8 7A01                       		moveq	#1,d5
000017BA E36D                       		lsl.w	d1,d5
000017BC 5345                       		subq.w	#1,d5
000017BE                            
000017BE                            loc_1574:
000017BE 3387 0000                  		move.w	d7,(a1,d0.w)
000017C2 5440                       		addq.w	#2,d0
000017C4 51CD FFF8                  		dbf	d5,loc_1574
000017C8 60BA                       		bra.s	loc_153A
000017CA                            ; End of function NemDec4
000017CA                            
000017CA                            ; ---------------------------------------------------------------------------
000017CA                            ; Subroutine to	load pattern load cues
000017CA                            ; ---------------------------------------------------------------------------
000017CA                            
000017CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017CA                            
000017CA                            
000017CA                            LoadPLC:
000017CA 48E7 0060                  		movem.l	a1-a2,-(sp)
000017CE 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017D4 D040                       		add.w	d0,d0
000017D6 3031 0000                  		move.w	(a1,d0.w),d0
000017DA 43F1 0000                  		lea	(a1,d0.w),a1
000017DE 45F8 F680                  		lea	($FFFFF680).w,a2
000017E2                            
000017E2                            loc_1598:
000017E2 4A92                       		tst.l	(a2)
000017E4 6700                       		beq.s	loc_15A0
000017E6 5C4A                       		addq.w	#6,a2
000017E8 60F8                       		bra.s	loc_1598
000017EA                            ; ===========================================================================
000017EA                            
000017EA                            loc_15A0:				; XREF: LoadPLC
000017EA 3019                       		move.w	(a1)+,d0
000017EC 6B00                       		bmi.s	loc_15AC
000017EE                            
000017EE                            loc_15A4:
000017EE 24D9                       		move.l	(a1)+,(a2)+
000017F0 34D9                       		move.w	(a1)+,(a2)+
000017F2 51C8 FFFA                  		dbf	d0,loc_15A4
000017F6                            
000017F6                            loc_15AC:
000017F6 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017FA 4E75                       		rts	
000017FC                            ; End of function LoadPLC
000017FC                            
000017FC                            
000017FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017FC                            
000017FC                            
000017FC                            LoadPLC2:
000017FC 48E7 0060                  		movem.l	a1-a2,-(sp)
00001800 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001806 D040                       		add.w	d0,d0
00001808 3031 0000                  		move.w	(a1,d0.w),d0
0000180C 43F1 0000                  		lea	(a1,d0.w),a1
00001810 6100                       		bsr.s	ClearPLC
00001812 45F8 F680                  		lea	($FFFFF680).w,a2
00001816 3019                       		move.w	(a1)+,d0
00001818 6B00                       		bmi.s	loc_15D8
0000181A                            
0000181A                            loc_15D0:
0000181A 24D9                       		move.l	(a1)+,(a2)+
0000181C 34D9                       		move.w	(a1)+,(a2)+
0000181E 51C8 FFFA                  		dbf	d0,loc_15D0
00001822                            
00001822                            loc_15D8:
00001822 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001826 4E75                       		rts	
00001828                            ; End of function LoadPLC2
00001828                            
00001828                            ; ---------------------------------------------------------------------------
00001828                            ; Subroutine to	clear the pattern load cues
00001828                            ; ---------------------------------------------------------------------------
00001828                            
00001828                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001828                            
00001828                            
00001828                            ClearPLC:				; XREF: LoadPLC2
00001828 45F8 F680                  		lea	($FFFFF680).w,a2
0000182C 701F                       		moveq	#$1F,d0
0000182E                            
0000182E                            ClearPLC_Loop:
0000182E 429A                       		clr.l	(a2)+
00001830 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
00001834 4E75                       		rts	
00001836                            ; End of function ClearPLC
00001836                            
00001836                            ; ---------------------------------------------------------------------------
00001836                            ; Subroutine to	use graphics listed in a pattern load cue
00001836                            ; ---------------------------------------------------------------------------
00001836                            
00001836                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001836                            
00001836                            
00001836                            RunPLC_RAM:				; XREF: Pal_FadeTo
00001836 4AB8 F680                  		tst.l	($FFFFF680).w
0000183A 6700                       		beq.s	locret_1640
0000183C 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001840 6600                       		bne.s	locret_1640
00001842 2078 F680                  		movea.l	($FFFFF680).w,a0
00001846 47F9 0000 174C             		lea	(loc_1502).l,a3
0000184C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001850 3418                       		move.w	(a0)+,d2
00001852 6A00                       		bpl.s	loc_160E
00001854 D6FC 000A                  		adda.w	#$A,a3
00001858                            
00001858                            loc_160E:
00001858 0242 7FFF                  		andi.w	#$7FFF,d2
0000185C 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001860 6100 FF16                  		bsr.w	NemDec4
00001864 1A18                       		move.b	(a0)+,d5
00001866 E145                       		asl.w	#8,d5
00001868 1A18                       		move.b	(a0)+,d5
0000186A 7C10                       		moveq	#$10,d6
0000186C 7000                       		moveq	#0,d0
0000186E 21C8 F680                  		move.l	a0,($FFFFF680).w
00001872 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001876 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
0000187A 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
0000187E 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001882 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001886 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
0000188A                            
0000188A                            locret_1640:
0000188A 4E75                       		rts	
0000188C                            ; End of function RunPLC_RAM
0000188C                            
0000188C                            
0000188C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000188C                            
0000188C                            
0000188C                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
0000188C 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001890 6700 0000                  		beq.w	locret_16DA
00001894 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
0000189A 7000                       		moveq	#0,d0
0000189C 3038 F684                  		move.w	($FFFFF684).w,d0
000018A0 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
000018A6 6000                       		bra.s	loc_1676
000018A8                            ; End of function sub_1642
000018A8                            
000018A8                            
000018A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000018A8                            
000018A8                            
000018A8                            sub_165E:				; XREF: Demo_Time
000018A8 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000018AC 6700                       		beq.s	locret_16DA
000018AE 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
000018B4 7000                       		moveq	#0,d0
000018B6 3038 F684                  		move.w	($FFFFF684).w,d0
000018BA 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
000018C0                            
000018C0                            loc_1676:				; XREF: sub_1642
000018C0 49F9 00C0 0004             		lea	($C00004).l,a4
000018C6 E588                       		lsl.l	#2,d0
000018C8 E448                       		lsr.w	#2,d0
000018CA 0040 4000                  		ori.w	#$4000,d0
000018CE 4840                       		swap	d0
000018D0 2880                       		move.l	d0,(a4)
000018D2 594C                       		subq.w	#4,a4
000018D4 2078 F680                  		movea.l	($FFFFF680).w,a0
000018D8 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000018DC 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000018E0 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000018E4 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000018E8 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000018EC 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000018F0 43F8 AA00                  		lea	($FFFFAA00).w,a1
000018F4                            
000018F4                            loc_16AA:				; XREF: sub_165E
000018F4 3A7C 0008                  		movea.w	#8,a5
000018F8 6100 FE1C                  		bsr.w	NemDec3
000018FC 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
00001900 6700                       		beq.s	loc_16DC
00001902 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
00001906 66EC                       		bne.s	loc_16AA
00001908 21C8 F680                  		move.l	a0,($FFFFF680).w
0000190C 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001910 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001914 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00001918 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
0000191C 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001920 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001924                            
00001924                            locret_16DA:				; XREF: sub_1642
00001924 4E75                       		rts	
00001926                            ; ===========================================================================
00001926                            
00001926                            loc_16DC:				; XREF: sub_165E
00001926 41F8 F680                  		lea	($FFFFF680).w,a0
0000192A 7015                       		moveq	#$15,d0
0000192C                            
0000192C                            loc_16E2:				; XREF: sub_165E
0000192C 20E8 0006                  		move.l	6(a0),(a0)+
00001930 51C8 FFFA                  		dbf	d0,loc_16E2
00001934 4E75                       		rts	
00001936                            ; End of function sub_165E
00001936                            
00001936                            ; ---------------------------------------------------------------------------
00001936                            ; Subroutine to	execute	the pattern load cue
00001936                            ; ---------------------------------------------------------------------------
00001936                            
00001936                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001936                            
00001936                            
00001936                            RunPLC_ROM:
00001936 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
0000193C D040                       		add.w	d0,d0
0000193E 3031 0000                  		move.w	(a1,d0.w),d0
00001942 43F1 0000                  		lea	(a1,d0.w),a1
00001946 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
00001948                            
00001948                            RunPLC_Loop:
00001948 2059                       		movea.l	(a1)+,a0	; get art pointer
0000194A 7000                       		moveq	#0,d0
0000194C 3019                       		move.w	(a1)+,d0	; get VRAM address
0000194E E588                       		lsl.l	#2,d0		; divide address by $20
00001950 E448                       		lsr.w	#2,d0
00001952 0040 4000                  		ori.w	#$4000,d0
00001956 4840                       		swap	d0
00001958 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
0000195E 6100 FD2A                  		bsr.w	NemDec		; decompress
00001962 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
00001966 4E75                       		rts	
00001968                            ; End of function RunPLC_ROM
00001968                            
00001968                            ; ---------------------------------------------------------------------------
00001968                            ; Enigma decompression algorithm
00001968                            ; ---------------------------------------------------------------------------
00001968                            
00001968                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001968                            
00001968                            
00001968                            EniDec:
00001968 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
0000196C 3640                       		movea.w	d0,a3
0000196E 1018                       		move.b	(a0)+,d0
00001970 4880                       		ext.w	d0
00001972 3A40                       		movea.w	d0,a5
00001974 1818                       		move.b	(a0)+,d4
00001976 E70C                       		lsl.b	#3,d4
00001978 3458                       		movea.w	(a0)+,a2
0000197A D4CB                       		adda.w	a3,a2
0000197C 3858                       		movea.w	(a0)+,a4
0000197E D8CB                       		adda.w	a3,a4
00001980 1A18                       		move.b	(a0)+,d5
00001982 E145                       		asl.w	#8,d5
00001984 1A18                       		move.b	(a0)+,d5
00001986 7C10                       		moveq	#$10,d6
00001988                            
00001988                            loc_173E:				; XREF: loc_1768
00001988 7007                       		moveq	#7,d0
0000198A 3E06                       		move.w	d6,d7
0000198C 9E40                       		sub.w	d0,d7
0000198E 3205                       		move.w	d5,d1
00001990 EE69                       		lsr.w	d7,d1
00001992 0241 007F                  		andi.w	#$7F,d1
00001996 3401                       		move.w	d1,d2
00001998 0C41 0040                  		cmpi.w	#$40,d1
0000199C 6400                       		bcc.s	loc_1758
0000199E 7006                       		moveq	#6,d0
000019A0 E24A                       		lsr.w	#1,d2
000019A2                            
000019A2                            loc_1758:
000019A2 6100 0000                  		bsr.w	sub_188C
000019A6 0242 000F                  		andi.w	#$F,d2
000019AA E849                       		lsr.w	#4,d1
000019AC D241                       		add.w	d1,d1
000019AE 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
000019B2                            ; End of function EniDec
000019B2                            
000019B2                            ; ===========================================================================
000019B2                            
000019B2                            loc_1768:				; XREF: loc_17B4
000019B2 32CA                       		move.w	a2,(a1)+
000019B4 524A                       		addq.w	#1,a2
000019B6 51CA FFFA                  		dbf	d2,loc_1768
000019BA 60CC                       		bra.s	loc_173E
000019BC                            ; ===========================================================================
000019BC                            
000019BC                            loc_1772:				; XREF: loc_17B4
000019BC 32CC                       		move.w	a4,(a1)+
000019BE 51CA FFFC                  		dbf	d2,loc_1772
000019C2 60C4                       		bra.s	loc_173E
000019C4                            ; ===========================================================================
000019C4                            
000019C4                            loc_177A:				; XREF: loc_17B4
000019C4 6100 0000                  		bsr.w	loc_17DC
000019C8                            
000019C8                            loc_177E:
000019C8 32C1                       		move.w	d1,(a1)+
000019CA 51CA FFFC                  		dbf	d2,loc_177E
000019CE 60B8                       		bra.s	loc_173E
000019D0                            ; ===========================================================================
000019D0                            
000019D0                            loc_1786:				; XREF: loc_17B4
000019D0 6100 0000                  		bsr.w	loc_17DC
000019D4                            
000019D4                            loc_178A:
000019D4 32C1                       		move.w	d1,(a1)+
000019D6 5241                       		addq.w	#1,d1
000019D8 51CA FFFA                  		dbf	d2,loc_178A
000019DC 60AA                       		bra.s	loc_173E
000019DE                            ; ===========================================================================
000019DE                            
000019DE                            loc_1794:				; XREF: loc_17B4
000019DE 6100 0000                  		bsr.w	loc_17DC
000019E2                            
000019E2                            loc_1798:
000019E2 32C1                       		move.w	d1,(a1)+
000019E4 5341                       		subq.w	#1,d1
000019E6 51CA FFFA                  		dbf	d2,loc_1798
000019EA 609C                       		bra.s	loc_173E
000019EC                            ; ===========================================================================
000019EC                            
000019EC                            loc_17A2:				; XREF: loc_17B4
000019EC 0C42 000F                  		cmpi.w	#$F,d2
000019F0 6700                       		beq.s	loc_17C4
000019F2                            
000019F2                            loc_17A8:
000019F2 6100 0000                  		bsr.w	loc_17DC
000019F6 32C1                       		move.w	d1,(a1)+
000019F8 51CA FFF8                  		dbf	d2,loc_17A8
000019FC 608A                       		bra.s	loc_173E
000019FE                            ; ===========================================================================
000019FE                            
000019FE                            loc_17B4:				; XREF: EniDec
000019FE 60B2                       		bra.s	loc_1768
00001A00                            ; ===========================================================================
00001A00 60B0                       		bra.s	loc_1768
00001A02                            ; ===========================================================================
00001A02 60B8                       		bra.s	loc_1772
00001A04                            ; ===========================================================================
00001A04 60B6                       		bra.s	loc_1772
00001A06                            ; ===========================================================================
00001A06 60BC                       		bra.s	loc_177A
00001A08                            ; ===========================================================================
00001A08 60C6                       		bra.s	loc_1786
00001A0A                            ; ===========================================================================
00001A0A 60D2                       		bra.s	loc_1794
00001A0C                            ; ===========================================================================
00001A0C 60DE                       		bra.s	loc_17A2
00001A0E                            ; ===========================================================================
00001A0E                            
00001A0E                            loc_17C4:				; XREF: loc_17A2
00001A0E 5348                       		subq.w	#1,a0
00001A10 0C46 0010                  		cmpi.w	#$10,d6
00001A14 6600                       		bne.s	loc_17CE
00001A16 5348                       		subq.w	#1,a0
00001A18                            
00001A18                            loc_17CE:
00001A18 3008                       		move.w	a0,d0
00001A1A E248                       		lsr.w	#1,d0
00001A1C 6400                       		bcc.s	loc_17D6
00001A1E 5248                       		addq.w	#1,a0
00001A20                            
00001A20                            loc_17D6:
00001A20 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
00001A24 4E75                       		rts	
00001A26                            ; ===========================================================================
00001A26                            
00001A26                            loc_17DC:				; XREF: loc_17A2
00001A26 360B                       		move.w	a3,d3
00001A28 1204                       		move.b	d4,d1
00001A2A D201                       		add.b	d1,d1
00001A2C 6400                       		bcc.s	loc_17EE
00001A2E 5346                       		subq.w	#1,d6
00001A30 0D05                       		btst	d6,d5
00001A32 6700                       		beq.s	loc_17EE
00001A34 0043 8000                  		ori.w	#-$8000,d3
00001A38                            
00001A38                            loc_17EE:
00001A38 D201                       		add.b	d1,d1
00001A3A 6400                       		bcc.s	loc_17FC
00001A3C 5346                       		subq.w	#1,d6
00001A3E 0D05                       		btst	d6,d5
00001A40 6700                       		beq.s	loc_17FC
00001A42 0643 4000                  		addi.w	#$4000,d3
00001A46                            
00001A46                            loc_17FC:
00001A46 D201                       		add.b	d1,d1
00001A48 6400                       		bcc.s	loc_180A
00001A4A 5346                       		subq.w	#1,d6
00001A4C 0D05                       		btst	d6,d5
00001A4E 6700                       		beq.s	loc_180A
00001A50 0643 2000                  		addi.w	#$2000,d3
00001A54                            
00001A54                            loc_180A:
00001A54 D201                       		add.b	d1,d1
00001A56 6400                       		bcc.s	loc_1818
00001A58 5346                       		subq.w	#1,d6
00001A5A 0D05                       		btst	d6,d5
00001A5C 6700                       		beq.s	loc_1818
00001A5E 0043 1000                  		ori.w	#$1000,d3
00001A62                            
00001A62                            loc_1818:
00001A62 D201                       		add.b	d1,d1
00001A64 6400                       		bcc.s	loc_1826
00001A66 5346                       		subq.w	#1,d6
00001A68 0D05                       		btst	d6,d5
00001A6A 6700                       		beq.s	loc_1826
00001A6C 0043 0800                  		ori.w	#$800,d3
00001A70                            
00001A70                            loc_1826:
00001A70 3205                       		move.w	d5,d1
00001A72 3E06                       		move.w	d6,d7
00001A74 9E4D                       		sub.w	a5,d7
00001A76 6400                       		bcc.s	loc_1856
00001A78 3C07                       		move.w	d7,d6
00001A7A 0646 0010                  		addi.w	#$10,d6
00001A7E 4447                       		neg.w	d7
00001A80 EF69                       		lsl.w	d7,d1
00001A82 1A10                       		move.b	(a0),d5
00001A84 EF3D                       		rol.b	d7,d5
00001A86 DE47                       		add.w	d7,d7
00001A88 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001A8C D245                       		add.w	d5,d1
00001A8E                            
00001A8E                            loc_1844:				; XREF: loc_1868
00001A8E 300D                       		move.w	a5,d0
00001A90 D040                       		add.w	d0,d0
00001A92 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A96 D243                       		add.w	d3,d1
00001A98 1A18                       		move.b	(a0)+,d5
00001A9A E14D                       		lsl.w	#8,d5
00001A9C 1A18                       		move.b	(a0)+,d5
00001A9E 4E75                       		rts	
00001AA0                            ; ===========================================================================
00001AA0                            
00001AA0                            loc_1856:				; XREF: loc_1826
00001AA0 6700                       		beq.s	loc_1868
00001AA2 EE69                       		lsr.w	d7,d1
00001AA4 300D                       		move.w	a5,d0
00001AA6 D040                       		add.w	d0,d0
00001AA8 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001AAC D243                       		add.w	d3,d1
00001AAE 300D                       		move.w	a5,d0
00001AB0 6000                       		bra.s	sub_188C
00001AB2                            ; ===========================================================================
00001AB2                            
00001AB2                            loc_1868:				; XREF: loc_1856
00001AB2 7C10                       		moveq	#$10,d6
00001AB4                            
00001AB4                            loc_186A:
00001AB4 60D8                       		bra.s	loc_1844
00001AB6                            ; ===========================================================================
00001AB6 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001ACC 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001AD6                            
00001AD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AD6                            
00001AD6                            
00001AD6                            sub_188C:				; XREF: EniDec
00001AD6 9C40                       		sub.w	d0,d6
00001AD8 0C46 0009                  		cmpi.w	#9,d6
00001ADC 6400                       		bcc.s	locret_189A
00001ADE 5046                       		addq.w	#8,d6
00001AE0 E145                       		asl.w	#8,d5
00001AE2 1A18                       		move.b	(a0)+,d5
00001AE4                            
00001AE4                            locret_189A:
00001AE4 4E75                       		rts	
00001AE6                            ; End of function sub_188C
00001AE6                            
00001AE6                            ; ---------------------------------------------------------------------------
00001AE6                            ; Kosinski decompression algorithm
00001AE6                            ; ---------------------------------------------------------------------------
00001AE6                            
00001AE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AE6                            
00001AE6                            
00001AE6                            KosDec:
00001AE6                            
00001AE6 =FFFFFFFE                  var_2		= -2
00001AE6 =FFFFFFFF                  var_1		= -1
00001AE6                            
00001AE6 558F                       		subq.l	#2,sp
00001AE8 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AEC 1E98                       		move.b	(a0)+,(sp)
00001AEE 3A17                       		move.w	(sp),d5
00001AF0 780F                       		moveq	#$F,d4
00001AF2                            
00001AF2                            loc_18A8:
00001AF2 E24D                       		lsr.w	#1,d5
00001AF4 40C6                       		move	sr,d6
00001AF6 51CC 0000                  		dbf	d4,loc_18BA
00001AFA 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AFE 1E98                       		move.b	(a0)+,(sp)
00001B00 3A17                       		move.w	(sp),d5
00001B02 780F                       		moveq	#$F,d4
00001B04                            
00001B04                            loc_18BA:
00001B04 44C6                       		move	d6,ccr
00001B06 6400                       		bcc.s	loc_18C2
00001B08 12D8                       		move.b	(a0)+,(a1)+
00001B0A 60E6                       		bra.s	loc_18A8
00001B0C                            ; ===========================================================================
00001B0C                            
00001B0C                            loc_18C2:				; XREF: KosDec
00001B0C 7600                       		moveq	#0,d3
00001B0E E24D                       		lsr.w	#1,d5
00001B10 40C6                       		move	sr,d6
00001B12 51CC 0000                  		dbf	d4,loc_18D6
00001B16 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B1A 1E98                       		move.b	(a0)+,(sp)
00001B1C 3A17                       		move.w	(sp),d5
00001B1E 780F                       		moveq	#$F,d4
00001B20                            
00001B20                            loc_18D6:
00001B20 44C6                       		move	d6,ccr
00001B22 6500                       		bcs.s	loc_1906
00001B24 E24D                       		lsr.w	#1,d5
00001B26 51CC 0000                  		dbf	d4,loc_18EA
00001B2A 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B2E 1E98                       		move.b	(a0)+,(sp)
00001B30 3A17                       		move.w	(sp),d5
00001B32 780F                       		moveq	#$F,d4
00001B34                            
00001B34                            loc_18EA:
00001B34 E353                       		roxl.w	#1,d3
00001B36 E24D                       		lsr.w	#1,d5
00001B38 51CC 0000                  		dbf	d4,loc_18FC
00001B3C 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B40 1E98                       		move.b	(a0)+,(sp)
00001B42 3A17                       		move.w	(sp),d5
00001B44 780F                       		moveq	#$F,d4
00001B46                            
00001B46                            loc_18FC:
00001B46 E353                       		roxl.w	#1,d3
00001B48 5243                       		addq.w	#1,d3
00001B4A 74FF                       		moveq	#-1,d2
00001B4C 1418                       		move.b	(a0)+,d2
00001B4E 6000                       		bra.s	loc_191C
00001B50                            ; ===========================================================================
00001B50                            
00001B50                            loc_1906:				; XREF: loc_18C2
00001B50 1018                       		move.b	(a0)+,d0
00001B52 1218                       		move.b	(a0)+,d1
00001B54 74FF                       		moveq	#-1,d2
00001B56 1401                       		move.b	d1,d2
00001B58 EB4A                       		lsl.w	#5,d2
00001B5A 1400                       		move.b	d0,d2
00001B5C 0241 0007                  		andi.w	#7,d1
00001B60 6700                       		beq.s	loc_1928
00001B62 1601                       		move.b	d1,d3
00001B64 5243                       		addq.w	#1,d3
00001B66                            
00001B66                            loc_191C:
00001B66 1031 2000                  		move.b	(a1,d2.w),d0
00001B6A 12C0                       		move.b	d0,(a1)+
00001B6C 51CB FFF8                  		dbf	d3,loc_191C
00001B70 6080                       		bra.s	loc_18A8
00001B72                            ; ===========================================================================
00001B72                            
00001B72                            loc_1928:				; XREF: loc_1906
00001B72 1218                       		move.b	(a0)+,d1
00001B74 6700                       		beq.s	loc_1938
00001B76 0C01 0001                  		cmpi.b	#1,d1
00001B7A 6700 FF76                  		beq.w	loc_18A8
00001B7E 1601                       		move.b	d1,d3
00001B80 60E4                       		bra.s	loc_191C
00001B82                            ; ===========================================================================
00001B82                            
00001B82                            loc_1938:				; XREF: loc_1928
00001B82 548F                       		addq.l	#2,sp
00001B84 4E75                       		rts	
00001B86                            ; End of function KosDec
00001B86                            
00001B86                            ; ---------------------------------------------------------------------------
00001B86                            ; Pallet cycling routine loading subroutine
00001B86                            ; ---------------------------------------------------------------------------
00001B86                            
00001B86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B86                            
00001B86                            
00001B86                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001B86 7400                       		moveq	#0,d2
00001B88 7000                       		moveq	#0,d0
00001B8A 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001B8E D040                       		add.w	d0,d0		; multiply by 2
00001B90 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001B94 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001B98                            ; End of function PalCycle_Load
00001B98                            
00001B98                            ; ===========================================================================
00001B98                            ; ---------------------------------------------------------------------------
00001B98                            ; Pallet cycling routines
00001B98                            ; ---------------------------------------------------------------------------
00001B98 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001B9A 0000                       		dc.w PalCycle_LZ-PalCycle
00001B9C 0000                       		dc.w PalCycle_MZ-PalCycle
00001B9E 0000                       		dc.w PalCycle_SLZ-PalCycle
00001BA0 0000                       		dc.w PalCycle_SYZ-PalCycle
00001BA2 0000                       		dc.w PalCycle_SBZ-PalCycle
00001BA4 0000                       		dc.w PalCycle_GHZ-PalCycle
00001BA6 0000                       		dc.w PalCycle_GHZ-PalCycle
00001BA8                            
00001BA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BA8                            
00001BA8                            
00001BA8                            PalCycle_Title:				; XREF: TitleScreen
00001BA8 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001BAE 6000                       		bra.s	loc_196A
00001BB0                            ; ===========================================================================
00001BB0                            
00001BB0                            PalCycle_GHZ:				; XREF: PalCycle
00001BB0 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001BB6                            
00001BB6                            loc_196A:				; XREF: PalCycle_Title
00001BB6 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BBA 6A00                       		bpl.s	locret_1990
00001BBC 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001BC2 3038 F632                  		move.w	($FFFFF632).w,d0
00001BC6 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BCA 0240 0003                  		andi.w	#3,d0
00001BCE E748                       		lsl.w	#3,d0
00001BD0 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001BD4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BD8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BDC                            
00001BDC                            locret_1990:
00001BDC 4E75                       		rts	
00001BDE                            ; End of function PalCycle_Title
00001BDE                            
00001BDE                            
00001BDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BDE                            
00001BDE                            
00001BDE                            PalCycle_LZ:				; XREF: PalCycle
00001BDE 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BE2 6A00                       		bpl.s	loc_19D8
00001BE4 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001BEA 3038 F632                  		move.w	($FFFFF632).w,d0
00001BEE 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BF2 0240 0003                  		andi.w	#3,d0
00001BF6 E748                       		lsl.w	#3,d0
00001BF8 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001BFE 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001C04 6600                       		bne.s	loc_19C0
00001C06 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001C0C                            
00001C0C                            loc_19C0:
00001C0C 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001C10 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C14 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C18 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001C1C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C20 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C24                            
00001C24                            loc_19D8:
00001C24 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001C28 0240 0007                  		andi.w	#7,d0
00001C2C 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001C30 6700                       		beq.s	locret_1A3A
00001C32 7201                       		moveq	#1,d1
00001C34 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001C38 6700                       		beq.s	loc_19F0
00001C3A 4441                       		neg.w	d1
00001C3C                            
00001C3C                            loc_19F0:
00001C3C 3038 F650                  		move.w	($FFFFF650).w,d0
00001C40 0240 0003                  		andi.w	#3,d0
00001C44 D041                       		add.w	d1,d0
00001C46 0C40 0003                  		cmpi.w	#3,d0
00001C4A 6500                       		bcs.s	loc_1A0A
00001C4C 3200                       		move.w	d0,d1
00001C4E 7000                       		moveq	#0,d0
00001C50 4A41                       		tst.w	d1
00001C52 6A00                       		bpl.s	loc_1A0A
00001C54 7002                       		moveq	#2,d0
00001C56                            
00001C56                            loc_1A0A:
00001C56 31C0 F650                  		move.w	d0,($FFFFF650).w
00001C5A D040                       		add.w	d0,d0
00001C5C 3200                       		move.w	d0,d1
00001C5E D040                       		add.w	d0,d0
00001C60 D041                       		add.w	d1,d0
00001C62 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001C68 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C6C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C70 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C74 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001C7A 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001C7E 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C82 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C86                            
00001C86                            locret_1A3A:
00001C86 4E75                       		rts	
00001C88                            ; End of function PalCycle_LZ
00001C88                            
00001C88                            ; ===========================================================================
00001C88 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001C90                            ; ===========================================================================
00001C90                            
00001C90                            PalCycle_MZ:				; XREF: PalCycle
00001C90 4E75                       		rts	
00001C92                            
00001C92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C92                            
00001C92                            
00001C92                            PalCycle_SLZ:				; XREF: PalCycle
00001C92 4E75                       		rts	
00001C94                            ; End of function PalCycle_SLZ
00001C94                            
00001C94                            
00001C94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C94                            
00001C94                            
00001C94                            PalCycle_SYZ:				; XREF: PalCycle
00001C94 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C98 6A00                       		bpl.s	locret_1AC6
00001C9A 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001CA0 3038 F632                  		move.w	($FFFFF632).w,d0
00001CA4 5278 F632                  		addq.w	#1,($FFFFF632).w
00001CA8 0240 0003                  		andi.w	#3,d0
00001CAC E548                       		lsl.w	#2,d0
00001CAE 3200                       		move.w	d0,d1
00001CB0 D040                       		add.w	d0,d0
00001CB2 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001CB8 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001CBC 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001CC0 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001CC4 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001CCA 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001CCE 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001CD2 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001CD8                            
00001CD8                            locret_1AC6:
00001CD8 4E75                       		rts	
00001CDA                            ; End of function PalCycle_SYZ
00001CDA                            
00001CDA                            
00001CDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CDA                            
00001CDA                            
00001CDA                            PalCycle_SBZ:				; XREF: PalCycle
00001CDA 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001CE0 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CE4 6700                       		beq.s	loc_1ADA
00001CE6 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001CEC                            
00001CEC                            loc_1ADA:
00001CEC 43F8 F650                  		lea	($FFFFF650).w,a1
00001CF0 321A                       		move.w	(a2)+,d1
00001CF2                            
00001CF2                            loc_1AE0:
00001CF2 5311                       		subq.b	#1,(a1)
00001CF4 6B00                       		bmi.s	loc_1AEA
00001CF6 5489                       		addq.l	#2,a1
00001CF8 5C8A                       		addq.l	#6,a2
00001CFA 6000                       		bra.s	loc_1B06
00001CFC                            ; ===========================================================================
00001CFC                            
00001CFC                            loc_1AEA:				; XREF: PalCycle_SBZ
00001CFC 12DA                       		move.b	(a2)+,(a1)+
00001CFE 1011                       		move.b	(a1),d0
00001D00 5200                       		addq.b	#1,d0
00001D02 B01A                       		cmp.b	(a2)+,d0
00001D04 6500                       		bcs.s	loc_1AF6
00001D06 7000                       		moveq	#0,d0
00001D08                            
00001D08                            loc_1AF6:
00001D08 12C0                       		move.b	d0,(a1)+
00001D0A 0240 000F                  		andi.w	#$F,d0
00001D0E D040                       		add.w	d0,d0
00001D10 305A                       		movea.w	(a2)+,a0
00001D12 365A                       		movea.w	(a2)+,a3
00001D14 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001D18                            
00001D18                            loc_1B06:				; XREF: PalCycle_SBZ
00001D18 51C9 FFD8                  		dbf	d1,loc_1AE0
00001D1C 5378 F634                  		subq.w	#1,($FFFFF634).w
00001D20 6A00                       		bpl.s	locret_1B64
00001D22 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001D28 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001D2E 4A38 FE11                  		tst.b	($FFFFFE11).w
00001D32 6700                       		beq.s	loc_1B2E
00001D34 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001D3A 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001D40                            
00001D40                            loc_1B2E:
00001D40 72FF                       		moveq	#-1,d1
00001D42 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001D46 6700                       		beq.s	loc_1B38
00001D48 4441                       		neg.w	d1
00001D4A                            
00001D4A                            loc_1B38:
00001D4A 3038 F632                  		move.w	($FFFFF632).w,d0
00001D4E 0240 0003                  		andi.w	#3,d0
00001D52 D041                       		add.w	d1,d0
00001D54 0C40 0003                  		cmpi.w	#3,d0
00001D58 6500                       		bcs.s	loc_1B52
00001D5A 3200                       		move.w	d0,d1
00001D5C 7000                       		moveq	#0,d0
00001D5E 4A41                       		tst.w	d1
00001D60 6A00                       		bpl.s	loc_1B52
00001D62 7002                       		moveq	#2,d0
00001D64                            
00001D64                            loc_1B52:
00001D64 31C0 F632                  		move.w	d0,($FFFFF632).w
00001D68 D040                       		add.w	d0,d0
00001D6A 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001D6E 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D72 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001D76                            
00001D76                            locret_1B64:
00001D76 4E75                       		rts	
00001D78                            ; End of function PalCycle_SBZ
00001D78                            
00001D78                            ; ===========================================================================
00001D78                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001D98                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001DB8                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001DD8                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001DEA                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001DFC                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001E64                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001E88                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001EA8                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001EB8                            
00001EB8                            Pal_SBZCycList:
00001EB8                            	include "_inc\SBZ pallet script 1.asm"
00001EB8                            ; ---------------------------------------------------------------------------
00001EB8                            ; Scrap Brain Zone 1 pallet cycling script
00001EB8                            ; ---------------------------------------------------------------------------
00001EB8 0008                       	dc.w 8			; number of entries - 1
00001EBA 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001EBC 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001EBE FB50                       	dc.w $FB50		; RAM address
00001EC0 0D08                       	dc.b $D, 8
00001EC2 0000                       	dc.w Pal_SBZCyc2
00001EC4 FB52                       	dc.w $FB52
00001EC6 0E08                       	dc.b $E, 8
00001EC8 0000                       	dc.w Pal_SBZCyc3
00001ECA FB6E                       	dc.w $FB6E
00001ECC 0B08                       	dc.b $B, 8
00001ECE 0000                       	dc.w Pal_SBZCyc5
00001ED0 FB70                       	dc.w $FB70
00001ED2 0708                       	dc.b 7,	8
00001ED4 0000                       	dc.w Pal_SBZCyc6
00001ED6 FB72                       	dc.w $FB72
00001ED8 1C10                       	dc.b $1C, $10
00001EDA 0000                       	dc.w Pal_SBZCyc7
00001EDC FB7E                       	dc.w $FB7E
00001EDE 0303                       	dc.b 3,	3
00001EE0 0000                       	dc.w Pal_SBZCyc8
00001EE2 FB78                       	dc.w $FB78
00001EE4 0303                       	dc.b 3,	3
00001EE6 0000                       	dc.w Pal_SBZCyc8+2
00001EE8 FB7A                       	dc.w $FB7A
00001EEA 0303                       	dc.b 3,	3
00001EEC 0000                       	dc.w Pal_SBZCyc8+4
00001EEE FB7C                       	dc.w $FB7C
00001EF0                            	even
00001EF0                            	even
00001EF0                            
00001EF0                            Pal_SBZCycList2:
00001EF0                            	include "_inc\SBZ pallet script 2.asm"
00001EF0                            ; ---------------------------------------------------------------------------
00001EF0                            ; Scrap Brain Zone 2 pallet cycling script
00001EF0                            ; ---------------------------------------------------------------------------
00001EF0 0006                       	dc.w 6
00001EF2 0708                       	dc.b 7,	8
00001EF4 0000                       	dc.w Pal_SBZCyc1
00001EF6 FB50                       	dc.w $FB50
00001EF8 0D08                       	dc.b $D, 8
00001EFA 0000                       	dc.w Pal_SBZCyc2
00001EFC FB52                       	dc.w $FB52
00001EFE 0908                       	dc.b 9,	8
00001F00 0000                       	dc.w Pal_SBZCyc9
00001F02 FB70                       	dc.w $FB70
00001F04 0708                       	dc.b 7,	8
00001F06 0000                       	dc.w Pal_SBZCyc6
00001F08 FB72                       	dc.w $FB72
00001F0A 0303                       	dc.b 3,	3
00001F0C 0000                       	dc.w Pal_SBZCyc8
00001F0E FB78                       	dc.w $FB78
00001F10 0303                       	dc.b 3,	3
00001F12 0000                       	dc.w Pal_SBZCyc8+2
00001F14 FB7A                       	dc.w $FB7A
00001F16 0303                       	dc.b 3,	3
00001F18 0000                       	dc.w Pal_SBZCyc8+4
00001F1A FB7C                       	dc.w $FB7C
00001F1C                            	even
00001F1C                            	even
00001F1C                            
00001F1C                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001F2C                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001F3C                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001F4C                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001F58                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001F68                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001F78                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001F98                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001FA2                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001FB2                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001FBE                            ; ---------------------------------------------------------------------------
00001FBE                            ; Subroutine to	fade out and fade in
00001FBE                            ; ---------------------------------------------------------------------------
00001FBE                            
00001FBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FBE                            
00001FBE                            
00001FBE                            Pal_FadeTo:
00001FBE 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001FC4                            
00001FC4                            Pal_FadeTo2:
00001FC4 7000                       		moveq	#0,d0
00001FC6 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FCA 1038 F626                  		move.b	($FFFFF626).w,d0
00001FCE D0C0                       		adda.w	d0,a0
00001FD0 7200                       		moveq	#0,d1
00001FD2 1038 F627                  		move.b	($FFFFF627).w,d0
00001FD6                            
00001FD6                            Pal_ToBlack:
00001FD6 30C1                       		move.w	d1,(a0)+
00001FD8 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001FDC                            
00001FDC 383C 0015                  		move.w	#$15,d4
00001FE0 1A3C 0009                  		move.b	#9,d5
00001FE4                            
00001FE4                            loc_1DCE:
00001FE4 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FEA 6100 0000                  		bsr.w	DelayProgram
00001FEE 6100                       		bsr.s	Pal_FadeIn
00001FF0 6100 F844                  		bsr.w	RunPLC_RAM
00001FF4 51CC FFEE                  		dbf	d4,loc_1DCE
00001FF8 4E75                       		rts	
00001FFA                            ; End of function Pal_FadeTo
00001FFA                            
00001FFA                            ; ---------------------------------------------------------------------------
00001FFA                            ; Pallet fade-in subroutine
00001FFA                            ; ---------------------------------------------------------------------------
00001FFA                            
00001FFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FFA                            
00001FFA                            
00001FFA                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001FFA 7000                       		moveq	#0,d0
00001FFC 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002000 43F8 FB80                  		lea	($FFFFFB80).w,a1
00002004 1038 F626                  		move.b	($FFFFF626).w,d0
00002008 D0C0                       		adda.w	d0,a0
0000200A D2C0                       		adda.w	d0,a1
0000200C 1038 F627                  		move.b	($FFFFF627).w,d0
00002010                            
00002010                            loc_1DFA:
00002010 6100                       		bsr.s	Pal_AddColor
00002012 51C8 FFFC                  		dbf	d0,loc_1DFA
00002016 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000201C 6600                       		bne.s	locret_1E24
0000201E 7000                       		moveq	#0,d0
00002020 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002024 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002028 1038 F626                  		move.b	($FFFFF626).w,d0
0000202C D0C0                       		adda.w	d0,a0
0000202E D2C0                       		adda.w	d0,a1
00002030 1038 F627                  		move.b	($FFFFF627).w,d0
00002034                            
00002034                            loc_1E1E:
00002034 6100                       		bsr.s	Pal_AddColor
00002036 51C8 FFFC                  		dbf	d0,loc_1E1E
0000203A                            
0000203A                            locret_1E24:
0000203A 4E75                       		rts	
0000203C                            ; End of function Pal_FadeIn
0000203C                            
0000203C                            
0000203C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000203C                            
0000203C                            
0000203C                            Pal_AddColor:				; XREF: Pal_FadeIn
0000203C 3419                       		move.w	(a1)+,d2
0000203E 3610                       		move.w	(a0),d3
00002040 B642                       		cmp.w	d2,d3
00002042 6700                       		beq.s	loc_1E4E
00002044 3203                       		move.w	d3,d1
00002046 0641 0200                  		addi.w	#$200,d1	; increase blue	value
0000204A B242                       		cmp.w	d2,d1		; has blue reached threshold level?
0000204C 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
0000204E 30C1                       		move.w	d1,(a0)+	; update pallet
00002050 4E75                       		rts	
00002052                            ; ===========================================================================
00002052                            
00002052                            Pal_AddGreen:				; XREF: Pal_AddColor
00002052 3203                       		move.w	d3,d1
00002054 0641 0020                  		addi.w	#$20,d1		; increase green value
00002058 B242                       		cmp.w	d2,d1
0000205A 6200                       		bhi.s	Pal_AddRed
0000205C 30C1                       		move.w	d1,(a0)+	; update pallet
0000205E 4E75                       		rts	
00002060                            ; ===========================================================================
00002060                            
00002060                            Pal_AddRed:				; XREF: Pal_AddGreen
00002060 5458                       		addq.w	#2,(a0)+	; increase red value
00002062 4E75                       		rts	
00002064                            ; ===========================================================================
00002064                            
00002064                            loc_1E4E:				; XREF: Pal_AddColor
00002064 5448                       		addq.w	#2,a0
00002066 4E75                       		rts	
00002068                            ; End of function Pal_AddColor
00002068                            
00002068                            
00002068                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002068                            
00002068                            
00002068                            Pal_FadeFrom:
00002068 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000206E 383C 0015                  		move.w	#$15,d4
00002072                            loc_1E5C:
00002072 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002078 6100 0000                  		bsr.w	DelayProgram
0000207C 6100                       		bsr.s	Pal_FadeOut
0000207E 6100 F7B6                  		bsr.w	RunPLC_RAM
00002082 51CC FFEE                  		dbf	d4,loc_1E5C
00002086 4E75                       		rts	
00002088                            ; End of function Pal_FadeFrom
00002088                            
00002088                            ; ---------------------------------------------------------------------------
00002088                            ; Pallet fade-out subroutine
00002088                            ; ---------------------------------------------------------------------------
00002088                            
00002088                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002088                            
00002088                            
00002088                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00002088 7000                       		moveq	#0,d0
0000208A 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000208E 1038 F626                  		move.b	($FFFFF626).w,d0
00002092 D0C0                       		adda.w	d0,a0
00002094 1038 F627                  		move.b	($FFFFF627).w,d0
00002098                            
00002098                            loc_1E82:
00002098 6100                       		bsr.s	Pal_DecColor
0000209A 51C8 FFFC                  		dbf	d0,loc_1E82
0000209E                            
0000209E 7000                       		moveq	#0,d0
000020A0 41F8 FA80                  		lea	($FFFFFA80).w,a0
000020A4 1038 F626                  		move.b	($FFFFF626).w,d0
000020A8 D0C0                       		adda.w	d0,a0
000020AA 1038 F627                  		move.b	($FFFFF627).w,d0
000020AE                            
000020AE                            loc_1E98:
000020AE 6100                       		bsr.s	Pal_DecColor
000020B0 51C8 FFFC                  		dbf	d0,loc_1E98
000020B4 4E75                       		rts	
000020B6                            ; End of function Pal_FadeOut
000020B6                            
000020B6                            
000020B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020B6                            
000020B6                            
000020B6                            Pal_DecColor:				; XREF: Pal_FadeOut
000020B6 3410                       		move.w	(a0),d2
000020B8 6700                       		beq.s	loc_1ECC
000020BA 3202                       		move.w	d2,d1
000020BC 0241 000E                  		andi.w	#$E,d1
000020C0 6700                       		beq.s	Pal_DecGreen
000020C2 5558                       		subq.w	#2,(a0)+	; decrease red value
000020C4 4E75                       		rts	
000020C6                            ; ===========================================================================
000020C6                            
000020C6                            Pal_DecGreen:				; XREF: Pal_DecColor
000020C6 3202                       		move.w	d2,d1
000020C8 0241 00E0                  		andi.w	#$E0,d1
000020CC 6700                       		beq.s	Pal_DecBlue
000020CE 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000020D2 4E75                       		rts	
000020D4                            ; ===========================================================================
000020D4                            
000020D4                            Pal_DecBlue:				; XREF: Pal_DecGreen
000020D4 3202                       		move.w	d2,d1
000020D6 0241 0E00                  		andi.w	#$E00,d1
000020DA 6700                       		beq.s	loc_1ECC
000020DC 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000020E0 4E75                       		rts	
000020E2                            ; ===========================================================================
000020E2                            
000020E2                            loc_1ECC:				; XREF: Pal_DecColor
000020E2 5448                       		addq.w	#2,a0
000020E4 4E75                       		rts	
000020E6                            ; End of function Pal_DecColor
000020E6                            
000020E6                            ; ---------------------------------------------------------------------------
000020E6                            ; Subroutine to	fill the pallet	with white (special stage)
000020E6                            ; ---------------------------------------------------------------------------
000020E6                            
000020E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020E6                            
000020E6                            
000020E6                            Pal_MakeWhite:				; XREF: SpecialStage
000020E6 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020EC 7000                       		moveq	#0,d0
000020EE 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020F2 1038 F626                  		move.b	($FFFFF626).w,d0
000020F6 D0C0                       		adda.w	d0,a0
000020F8 323C 0EEE                  		move.w	#$EEE,d1
000020FC 1038 F627                  		move.b	($FFFFF627).w,d0
00002100                            
00002100                            PalWhite_Loop:
00002100 30C1                       		move.w	d1,(a0)+
00002102 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00002106 383C 0015                  		move.w	#$15,d4
0000210A                            
0000210A                            loc_1EF4:
0000210A 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002110 6100 0000                  		bsr.w	DelayProgram
00002114 6100                       		bsr.s	Pal_WhiteToBlack
00002116 6100 F71E                  		bsr.w	RunPLC_RAM
0000211A 51CC FFEE                  		dbf	d4,loc_1EF4
0000211E 4E75                       		rts	
00002120                            ; End of function Pal_MakeWhite
00002120                            
00002120                            
00002120                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002120                            
00002120                            
00002120                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
00002120 7000                       		moveq	#0,d0
00002122 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002126 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000212A 1038 F626                  		move.b	($FFFFF626).w,d0
0000212E D0C0                       		adda.w	d0,a0
00002130 D2C0                       		adda.w	d0,a1
00002132 1038 F627                  		move.b	($FFFFF627).w,d0
00002136                            
00002136                            loc_1F20:
00002136 6100                       		bsr.s	Pal_DecColor2
00002138 51C8 FFFC                  		dbf	d0,loc_1F20
0000213C                            
0000213C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002142 6600                       		bne.s	locret_1F4A
00002144 7000                       		moveq	#0,d0
00002146 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000214A 43F8 FA00                  		lea	($FFFFFA00).w,a1
0000214E 1038 F626                  		move.b	($FFFFF626).w,d0
00002152 D0C0                       		adda.w	d0,a0
00002154 D2C0                       		adda.w	d0,a1
00002156 1038 F627                  		move.b	($FFFFF627).w,d0
0000215A                            
0000215A                            loc_1F44:
0000215A 6100                       		bsr.s	Pal_DecColor2
0000215C 51C8 FFFC                  		dbf	d0,loc_1F44
00002160                            
00002160                            locret_1F4A:
00002160 4E75                       		rts	
00002162                            ; End of function Pal_WhiteToBlack
00002162                            
00002162                            
00002162                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002162                            
00002162                            
00002162                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00002162 3419                       		move.w	(a1)+,d2
00002164 3610                       		move.w	(a0),d3
00002166 B642                       		cmp.w	d2,d3
00002168 6700                       		beq.s	loc_1F78
0000216A 3203                       		move.w	d3,d1
0000216C 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00002170 6500                       		bcs.s	loc_1F64
00002172 B242                       		cmp.w	d2,d1
00002174 6500                       		bcs.s	loc_1F64
00002176 30C1                       		move.w	d1,(a0)+
00002178 4E75                       		rts	
0000217A                            ; ===========================================================================
0000217A                            
0000217A                            loc_1F64:				; XREF: Pal_DecColor2
0000217A 3203                       		move.w	d3,d1
0000217C 0441 0020                  		subi.w	#$20,d1		; decrease green value
00002180 6500                       		bcs.s	loc_1F74
00002182 B242                       		cmp.w	d2,d1
00002184 6500                       		bcs.s	loc_1F74
00002186 30C1                       		move.w	d1,(a0)+
00002188 4E75                       		rts	
0000218A                            ; ===========================================================================
0000218A                            
0000218A                            loc_1F74:				; XREF: loc_1F64
0000218A 5558                       		subq.w	#2,(a0)+	; decrease red value
0000218C 4E75                       		rts	
0000218E                            ; ===========================================================================
0000218E                            
0000218E                            loc_1F78:				; XREF: Pal_DecColor2
0000218E 5448                       		addq.w	#2,a0
00002190 4E75                       		rts	
00002192                            ; End of function Pal_DecColor2
00002192                            
00002192                            ; ---------------------------------------------------------------------------
00002192                            ; Subroutine to	make a white flash when	you enter a special stage
00002192                            ; ---------------------------------------------------------------------------
00002192                            
00002192                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002192                            
00002192                            
00002192                            Pal_MakeFlash:				; XREF: SpecialStage
00002192 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002198 383C 0015                  		move.w	#$15,d4
0000219C                            
0000219C                            loc_1F86:
0000219C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000021A2 6100 0000                  		bsr.w	DelayProgram
000021A6 6100                       		bsr.s	Pal_ToWhite
000021A8 6100 F68C                  		bsr.w	RunPLC_RAM
000021AC 51CC FFEE                  		dbf	d4,loc_1F86
000021B0 4E75                       		rts	
000021B2                            ; End of function Pal_MakeFlash
000021B2                            
000021B2                            
000021B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021B2                            
000021B2                            
000021B2                            Pal_ToWhite:				; XREF: Pal_MakeFlash
000021B2 7000                       		moveq	#0,d0
000021B4 41F8 FB00                  		lea	($FFFFFB00).w,a0
000021B8 1038 F626                  		move.b	($FFFFF626).w,d0
000021BC D0C0                       		adda.w	d0,a0
000021BE 1038 F627                  		move.b	($FFFFF627).w,d0
000021C2                            
000021C2                            loc_1FAC:
000021C2 6100                       		bsr.s	Pal_AddColor2
000021C4 51C8 FFFC                  		dbf	d0,loc_1FAC
000021C8 7000                       		moveq	#0,d0
000021CA 41F8 FA80                  		lea	($FFFFFA80).w,a0
000021CE 1038 F626                  		move.b	($FFFFF626).w,d0
000021D2 D0C0                       		adda.w	d0,a0
000021D4 1038 F627                  		move.b	($FFFFF627).w,d0
000021D8                            
000021D8                            loc_1FC2:
000021D8 6100                       		bsr.s	Pal_AddColor2
000021DA 51C8 FFFC                  		dbf	d0,loc_1FC2
000021DE 4E75                       		rts	
000021E0                            ; End of function Pal_ToWhite
000021E0                            
000021E0                            
000021E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021E0                            
000021E0                            
000021E0                            Pal_AddColor2:				; XREF: Pal_ToWhite
000021E0 3410                       		move.w	(a0),d2
000021E2 0C42 0EEE                  		cmpi.w	#$EEE,d2
000021E6 6700                       		beq.s	loc_2006
000021E8 3202                       		move.w	d2,d1
000021EA 0241 000E                  		andi.w	#$E,d1
000021EE 0C41 000E                  		cmpi.w	#$E,d1
000021F2 6700                       		beq.s	loc_1FE2
000021F4 5458                       		addq.w	#2,(a0)+	; increase red value
000021F6 4E75                       		rts	
000021F8                            ; ===========================================================================
000021F8                            
000021F8                            loc_1FE2:				; XREF: Pal_AddColor2
000021F8 3202                       		move.w	d2,d1
000021FA 0241 00E0                  		andi.w	#$E0,d1
000021FE 0C41 00E0                  		cmpi.w	#$E0,d1
00002202 6700                       		beq.s	loc_1FF4
00002204 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00002208 4E75                       		rts	
0000220A                            ; ===========================================================================
0000220A                            
0000220A                            loc_1FF4:				; XREF: loc_1FE2
0000220A 3202                       		move.w	d2,d1
0000220C 0241 0E00                  		andi.w	#$E00,d1
00002210 0C41 0E00                  		cmpi.w	#$E00,d1
00002214 6700                       		beq.s	loc_2006
00002216 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
0000221A 4E75                       		rts	
0000221C                            ; ===========================================================================
0000221C                            
0000221C                            loc_2006:				; XREF: Pal_AddColor2
0000221C 5448                       		addq.w	#2,a0
0000221E 4E75                       		rts	
00002220                            ; End of function Pal_AddColor2
00002220                            
00002220                            ; ---------------------------------------------------------------------------
00002220                            ; Pallet cycling routine - Sega	logo
00002220                            ; ---------------------------------------------------------------------------
00002220                            
00002220                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002220                            
00002220                            
00002220                            PalCycle_Sega:				; XREF: SegaScreen
00002220 4A38 F635                  		tst.b	($FFFFF635).w
00002224 6600                       		bne.s	loc_206A
00002226 43F8 FB20                  		lea	($FFFFFB20).w,a1
0000222A 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00002230 7205                       		moveq	#5,d1
00002232 3038 F632                  		move.w	($FFFFF632).w,d0
00002236                            
00002236                            loc_2020:
00002236 6A00                       		bpl.s	loc_202A
00002238 5448                       		addq.w	#2,a0
0000223A 5341                       		subq.w	#1,d1
0000223C 5440                       		addq.w	#2,d0
0000223E 60F6                       		bra.s	loc_2020
00002240                            ; ===========================================================================
00002240                            
00002240                            loc_202A:				; XREF: PalCycle_Sega
00002240 3400                       		move.w	d0,d2
00002242 0242 001E                  		andi.w	#$1E,d2
00002246 6600                       		bne.s	loc_2034
00002248 5440                       		addq.w	#2,d0
0000224A                            
0000224A                            loc_2034:
0000224A 0C40 0060                  		cmpi.w	#$60,d0
0000224E 6400                       		bcc.s	loc_203E
00002250 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002254                            
00002254                            loc_203E:
00002254 5440                       		addq.w	#2,d0
00002256 51C9 FFE8                  		dbf	d1,loc_202A
0000225A 3038 F632                  		move.w	($FFFFF632).w,d0
0000225E 5440                       		addq.w	#2,d0
00002260 3400                       		move.w	d0,d2
00002262 0242 001E                  		andi.w	#$1E,d2
00002266 6600                       		bne.s	loc_2054
00002268 5440                       		addq.w	#2,d0
0000226A                            
0000226A                            loc_2054:
0000226A 0C40 0064                  		cmpi.w	#$64,d0
0000226E 6D00                       		blt.s	loc_2062
00002270 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00002276 70F4                       		moveq	#-$C,d0
00002278                            
00002278                            loc_2062:
00002278 31C0 F632                  		move.w	d0,($FFFFF632).w
0000227C 7001                       		moveq	#1,d0
0000227E 4E75                       		rts	
00002280                            ; ===========================================================================
00002280                            
00002280                            loc_206A:				; XREF: loc_202A
00002280 5338 F634                  		subq.b	#1,($FFFFF634).w
00002284 6A00                       		bpl.s	loc_20BC
00002286 11FC 0004 F634             		move.b	#4,($FFFFF634).w
0000228C 3038 F632                  		move.w	($FFFFF632).w,d0
00002290 0640 000C                  		addi.w	#$C,d0
00002294 0C40 0030                  		cmpi.w	#$30,d0
00002298 6500                       		bcs.s	loc_2088
0000229A 7000                       		moveq	#0,d0
0000229C 4E75                       		rts	
0000229E                            ; ===========================================================================
0000229E                            
0000229E                            loc_2088:				; XREF: loc_206A
0000229E 31C0 F632                  		move.w	d0,($FFFFF632).w
000022A2 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
000022A8 41F0 0000                  		lea	(a0,d0.w),a0
000022AC 43F8 FB04                  		lea	($FFFFFB04).w,a1
000022B0 22D8                       		move.l	(a0)+,(a1)+
000022B2 22D8                       		move.l	(a0)+,(a1)+
000022B4 3298                       		move.w	(a0)+,(a1)
000022B6 43F8 FB20                  		lea	($FFFFFB20).w,a1
000022BA 7000                       		moveq	#0,d0
000022BC 722C                       		moveq	#$2C,d1
000022BE                            
000022BE                            loc_20A8:
000022BE 3400                       		move.w	d0,d2
000022C0 0242 001E                  		andi.w	#$1E,d2
000022C4 6600                       		bne.s	loc_20B2
000022C6 5440                       		addq.w	#2,d0
000022C8                            
000022C8                            loc_20B2:
000022C8 3390 0000                  		move.w	(a0),(a1,d0.w)
000022CC 5440                       		addq.w	#2,d0
000022CE 51C9 FFEE                  		dbf	d1,loc_20A8
000022D2                            
000022D2                            loc_20BC:
000022D2 7001                       		moveq	#1,d0
000022D4 4E75                       		rts	
000022D6                            ; End of function PalCycle_Sega
000022D6                            
000022D6                            ; ===========================================================================
000022D6                            
000022D6                            Pal_Sega1:	incbin	pallet\sega1.bin
000022E2                            Pal_Sega2:	incbin	pallet\sega2.bin
00002312                            
00002312                            ; ---------------------------------------------------------------------------
00002312                            ; Subroutines to load pallets
00002312                            ; ---------------------------------------------------------------------------
00002312                            
00002312                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002312                            
00002312                            
00002312                            PalLoad1:
00002312 43F9 0000 0000             		lea	(PalPointers).l,a1
00002318 E748                       		lsl.w	#3,d0
0000231A D2C0                       		adda.w	d0,a1
0000231C 2459                       		movea.l	(a1)+,a2
0000231E 3659                       		movea.w	(a1)+,a3
00002320 D6FC 0080                  		adda.w	#$80,a3
00002324 3E19                       		move.w	(a1)+,d7
00002326                            
00002326                            loc_2110:
00002326 26DA                       		move.l	(a2)+,(a3)+
00002328 51CF FFFC                  		dbf	d7,loc_2110
0000232C 4E75                       		rts	
0000232E                            ; End of function PalLoad1
0000232E                            
0000232E                            
0000232E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000232E                            
0000232E                            
0000232E                            PalLoad2:
0000232E 43F9 0000 0000             		lea	(PalPointers).l,a1
00002334 E748                       		lsl.w	#3,d0
00002336 D2C0                       		adda.w	d0,a1
00002338 2459                       		movea.l	(a1)+,a2
0000233A 3659                       		movea.w	(a1)+,a3
0000233C 3E19                       		move.w	(a1)+,d7
0000233E                            
0000233E                            loc_2128:
0000233E 26DA                       		move.l	(a2)+,(a3)+
00002340 51CF FFFC                  		dbf	d7,loc_2128
00002344 4E75                       		rts	
00002346                            ; End of function PalLoad2
00002346                            
00002346                            ; ---------------------------------------------------------------------------
00002346                            ; Underwater pallet loading subroutine
00002346                            ; ---------------------------------------------------------------------------
00002346                            
00002346                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002346                            
00002346                            
00002346                            PalLoad3_Water:
00002346 43F9 0000 0000             		lea	(PalPointers).l,a1
0000234C E748                       		lsl.w	#3,d0
0000234E D2C0                       		adda.w	d0,a1
00002350 2459                       		movea.l	(a1)+,a2
00002352 3659                       		movea.w	(a1)+,a3
00002354 96FC 0080                  		suba.w	#$80,a3
00002358 3E19                       		move.w	(a1)+,d7
0000235A                            
0000235A                            loc_2144:
0000235A 26DA                       		move.l	(a2)+,(a3)+
0000235C 51CF FFFC                  		dbf	d7,loc_2144
00002360 4E75                       		rts	
00002362                            ; End of function PalLoad3_Water
00002362                            
00002362                            
00002362                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002362                            
00002362                            
00002362                            PalLoad4_Water:
00002362 43F9 0000 0000             		lea	(PalPointers).l,a1
00002368 E748                       		lsl.w	#3,d0
0000236A D2C0                       		adda.w	d0,a1
0000236C 2459                       		movea.l	(a1)+,a2
0000236E 3659                       		movea.w	(a1)+,a3
00002370 96FC 0100                  		suba.w	#$100,a3
00002374 3E19                       		move.w	(a1)+,d7
00002376                            
00002376                            loc_2160:
00002376 26DA                       		move.l	(a2)+,(a3)+
00002378 51CF FFFC                  		dbf	d7,loc_2160
0000237C 4E75                       		rts	
0000237E                            ; End of function PalLoad4_Water
0000237E                            
0000237E                            ; ===========================================================================
0000237E                            ; ---------------------------------------------------------------------------
0000237E                            ; Pallet pointers
0000237E                            ; ---------------------------------------------------------------------------
0000237E                            PalPointers:
0000237E                            	include "_inc\Pallet pointers.asm"
0000237E                            ; ---------------------------------------------------------------------------
0000237E                            ; Pallet pointers
0000237E                            ; ---------------------------------------------------------------------------
0000237E 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002382 FB00                       	dc.w $FB00		; RAM address
00002384 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002386 0000 0000                  	dc.l Pal_Title
0000238A FB00                       	dc.w $FB00
0000238C 001F                       	dc.w $1F
0000238E 0000 0000                  	dc.l Pal_LevelSel
00002392 FB00                       	dc.w $FB00
00002394 001F                       	dc.w $1F
00002396 0000 0000                  	dc.l Pal_Sonic
0000239A FB00                       	dc.w $FB00
0000239C 0007                       	dc.w 7
0000239E 0000 0000                  	dc.l Pal_GHZ
000023A2 FB20                       	dc.w $FB20
000023A4 0017                       	dc.w $17
000023A6 0000 0000                  	dc.l Pal_LZ
000023AA FB20                       	dc.w $FB20
000023AC 0017                       	dc.w $17
000023AE 0000 0000                  	dc.l Pal_MZ
000023B2 FB20                       	dc.w $FB20
000023B4 0017                       	dc.w $17
000023B6 0000 0000                  	dc.l Pal_SLZ
000023BA FB20                       	dc.w $FB20
000023BC 0017                       	dc.w $17
000023BE 0000 0000                  	dc.l Pal_SYZ
000023C2 FB20                       	dc.w $FB20
000023C4 0017                       	dc.w $17
000023C6 0000 0000                  	dc.l Pal_SBZ1
000023CA FB20                       	dc.w $FB20
000023CC 0017                       	dc.w $17
000023CE 0000 0000                  	dc.l Pal_Special
000023D2 FB00                       	dc.w $FB00
000023D4 001F                       	dc.w $1F
000023D6 0000 0000                  	dc.l Pal_LZWater
000023DA FB00                       	dc.w $FB00
000023DC 001F                       	dc.w $1F
000023DE 0000 0000                  	dc.l Pal_SBZ3
000023E2 FB20                       	dc.w $FB20
000023E4 0017                       	dc.w $17
000023E6 0000 0000                  	dc.l Pal_SBZ3Water
000023EA FB00                       	dc.w $FB00
000023EC 001F                       	dc.w $1F
000023EE 0000 0000                  	dc.l Pal_SBZ2
000023F2 FB20                       	dc.w $FB20
000023F4 0017                       	dc.w $17
000023F6 0000 0000                  	dc.l Pal_LZSonWater
000023FA FB00                       	dc.w $FB00
000023FC 0007                       	dc.w 7
000023FE 0000 0000                  	dc.l Pal_SBZ3SonWat
00002402 FB00                       	dc.w $FB00
00002404 0007                       	dc.w 7
00002406 0000 0000                  	dc.l Pal_SpeResult
0000240A FB00                       	dc.w $FB00
0000240C 001F                       	dc.w $1F
0000240E 0000 0000                  	dc.l Pal_SpeContinue
00002412 FB00                       	dc.w $FB00
00002414 000F                       	dc.w $F
00002416 0000 0000                  	dc.l Pal_Ending
0000241A FB00                       	dc.w $FB00
0000241C 001F                       	dc.w $1F
0000241E 0000 0000                  	dc.l Pal_Idiot
00002422 FB20                       	dc.w $FB20
00002424 0007                       	dc.w 7
00002426 0000 0000                  	dc.l Pal_BHZ
0000242A FB20                       	dc.w $FB20
0000242C 0017                       	dc.w $17
0000242E 0000 0000                  	dc.l Pal_Gronic
00002432 FB00                       	dc.w $FB00
00002434 0007                       	dc.w 7
00002436 0000 0000                  	dc.l Pal_LZGroWater
0000243A FB00                       	dc.w $FB00
0000243C 0007                       	dc.w 7
0000243E 0000 0000                  	dc.l Pal_SBZ3GroWat
00002442 FB00                       	dc.w $FB00
00002444 0007                       	dc.w 7
00002446 0000 0000                  	dc.l Pal_Anakama
0000244A FB00                       	dc.w $FB00
0000244C 0007                       	dc.w 7
0000244C 0007                       	dc.w 7
0000244E                            
0000244E                            ; ---------------------------------------------------------------------------
0000244E                            ; Pallet data
0000244E                            ; ---------------------------------------------------------------------------
0000244E                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
000024CE                            Pal_Title:	incbin	pallet\title.bin
0000254E                            Pal_LevelSel:	incbin	pallet\levelsel.bin
000025CE                            Pal_Sonic:	incbin	pallet\sonic.bin
000025EE                            Pal_GHZ:	incbin	pallet\ghz.bin
0000264E                            Pal_LZ:		incbin	pallet\lz.bin
000026AE                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
0000272E                            Pal_MZ:		incbin	pallet\mz.bin
0000278E                            Pal_SLZ:	incbin	pallet\slz.bin
000027EE                            Pal_SYZ:	incbin	pallet\syz.bin
0000284E                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
000028AE                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
0000290E                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
0000298E                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000029EE                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002A6E                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002A8E                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002AAE                            Pal_BHZ:	incbin	pallet\bhz.bin
00002B0E                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002B8E                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002BCE                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002C4E                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00002C6E                            Pal_Gronic:	incbin	pallet\gronic.bin	; gronic char
00002C8E                            Pal_LZGroWater:	incbin	pallet\groniclzuw.bin	; Gronic (underwater in SBZ act 3) pallet
00002CAE                            Pal_SBZ3GroWat:	incbin	pallet\gronicsbz3uw.bin	; Gronic (underwater in SBZ act 3) pallet
00002CCE                            Pal_Anakama:incbin	pallet\anakama.bin	; anakama char
00002D4E                            
00002D4E                            ; ---------------------------------------------------------------------------
00002D4E                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002D4E                            ; ---------------------------------------------------------------------------
00002D4E                            
00002D4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D4E                            
00002D4E                            
00002D4E                            DelayProgram:				; XREF: PauseGame
00002D4E 46FC 2300                  		move	#$2300,sr
00002D52                            
00002D52                            loc_29AC:
00002D52 4A38 F62A                  		tst.b	($FFFFF62A).w
00002D56 66FA                       		bne.s	loc_29AC
00002D58 4E75                       		rts	
00002D5A                            ; End of function DelayProgram
00002D5A                            
00002D5A                            ; ---------------------------------------------------------------------------
00002D5A                            ; Subroutine to	generate a pseudo-random number	in d0
00002D5A                            ; ---------------------------------------------------------------------------
00002D5A                            
00002D5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D5A                            
00002D5A                            
00002D5A                            RandomNumber:
00002D5A 2238 F636                  		move.l	($FFFFF636).w,d1
00002D5E 6600                       		bne.s	loc_29C0
00002D60 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002D66                            
00002D66                            loc_29C0:
00002D66 2001                       		move.l	d1,d0
00002D68 E581                       		asl.l	#2,d1
00002D6A D280                       		add.l	d0,d1
00002D6C E781                       		asl.l	#3,d1
00002D6E D280                       		add.l	d0,d1
00002D70 3001                       		move.w	d1,d0
00002D72 4841                       		swap	d1
00002D74 D041                       		add.w	d1,d0
00002D76 3200                       		move.w	d0,d1
00002D78 4841                       		swap	d1
00002D7A 21C1 F636                  		move.l	d1,($FFFFF636).w
00002D7E 4E75                       		rts	
00002D80                            ; End of function RandomNumber
00002D80                            
00002D80                            
00002D80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D80                            
00002D80                            
00002D80                            CalcSine:				; XREF: SS_BGAnimate; et al
00002D80 0240 00FF                  		andi.w	#$FF,d0
00002D84 D040                       		add.w	d0,d0
00002D86 0640 0080                  		addi.w	#$80,d0
00002D8A 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002D8E 0440 0080                  		subi.w	#$80,d0
00002D92 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002D96 4E75                       		rts	
00002D98                            ; End of function CalcSine
00002D98                            
00002D98                            ; ===========================================================================
00002D98                            
00002D98                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00003018                            
00003018                            ; ===========================================================================
00003018 48E7 6000                  		movem.l	d1-d2,-(sp)
0000301C 3200                       		move.w	d0,d1
0000301E 4841                       		swap	d1
00003020 7000                       		moveq	#0,d0
00003022 3200                       		move.w	d0,d1
00003024 7407                       		moveq	#7,d2
00003026                            
00003026                            loc_2C80:
00003026 E599                       		rol.l	#2,d1
00003028 D040                       		add.w	d0,d0
0000302A 5240                       		addq.w	#1,d0
0000302C 9240                       		sub.w	d0,d1
0000302E 6400                       		bcc.s	loc_2C9A
00003030 D240                       		add.w	d0,d1
00003032 5340                       		subq.w	#1,d0
00003034 51CA FFF0                  		dbf	d2,loc_2C80
00003038 E248                       		lsr.w	#1,d0
0000303A 4CDF 0006                  		movem.l	(sp)+,d1-d2
0000303E 4E75                       		rts	
00003040                            ; ===========================================================================
00003040                            
00003040                            loc_2C9A:
00003040 5240                       		addq.w	#1,d0
00003042 51CA FFE2                  		dbf	d2,loc_2C80
00003046 E248                       		lsr.w	#1,d0
00003048 4CDF 0006                  		movem.l	(sp)+,d1-d2
0000304C 4E75                       		rts	
0000304E                            
0000304E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000304E                            
0000304E                            
0000304E                            CalcAngle:
0000304E 48E7 1800                  		movem.l	d3-d4,-(sp)
00003052 7600                       		moveq	#0,d3
00003054 7800                       		moveq	#0,d4
00003056 3601                       		move.w	d1,d3
00003058 3802                       		move.w	d2,d4
0000305A 8843                       		or.w	d3,d4
0000305C 6700                       		beq.s	loc_2D04
0000305E 3802                       		move.w	d2,d4
00003060 4A43                       		tst.w	d3
00003062 6A00 0000                  		bpl.w	loc_2CC2
00003066 4443                       		neg.w	d3
00003068                            
00003068                            loc_2CC2:
00003068 4A44                       		tst.w	d4
0000306A 6A00 0000                  		bpl.w	loc_2CCA
0000306E 4444                       		neg.w	d4
00003070                            
00003070                            loc_2CCA:
00003070 B843                       		cmp.w	d3,d4
00003072 6400 0000                  		bcc.w	loc_2CDC
00003076 E18C                       		lsl.l	#8,d4
00003078 88C3                       		divu.w	d3,d4
0000307A 7000                       		moveq	#0,d0
0000307C 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00003080 6000                       		bra.s	loc_2CE6
00003082                            ; ===========================================================================
00003082                            
00003082                            loc_2CDC:				; XREF: CalcAngle
00003082 E18B                       		lsl.l	#8,d3
00003084 86C4                       		divu.w	d4,d3
00003086 7040                       		moveq	#$40,d0
00003088 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
0000308C                            
0000308C                            loc_2CE6:
0000308C 4A41                       		tst.w	d1
0000308E 6A00 0000                  		bpl.w	loc_2CF2
00003092 4440                       		neg.w	d0
00003094 0640 0080                  		addi.w	#$80,d0
00003098                            
00003098                            loc_2CF2:
00003098 4A42                       		tst.w	d2
0000309A 6A00 0000                  		bpl.w	loc_2CFE
0000309E 4440                       		neg.w	d0
000030A0 0640 0100                  		addi.w	#$100,d0
000030A4                            
000030A4                            loc_2CFE:
000030A4 4CDF 0018                  		movem.l	(sp)+,d3-d4
000030A8 4E75                       		rts	
000030AA                            ; ===========================================================================
000030AA                            
000030AA                            loc_2D04:				; XREF: CalcAngle
000030AA 303C 0040                  		move.w	#$40,d0
000030AE 4CDF 0018                  		movem.l	(sp)+,d3-d4
000030B2 4E75                       		rts	
000030B4                            ; End of function CalcAngle
000030B4                            
000030B4                            ; ===========================================================================
000030B4                            
000030B4                            Angle_Data:	incbin	misc\angles.bin
000031B6                            
000031B6                            ; ===========================================================================
000031B6                            
000031B6                            ; ---------------------------------------------------------------------------
000031B6                            ; Sega screen
000031B6                            ; ---------------------------------------------------------------------------
000031B6                            
000031B6                            SegaScreen:				; XREF: GameModeArray
000031B6 103C 00E4                  		move.b	#$E4,d0
000031BA 6100 E42A                  		bsr.w	PlaySound_Special ; stop music
000031BE 6100 E668                  		bsr.w	ClearPLC
000031C2 6100 EEA4                  		bsr.w	Pal_FadeFrom
000031C6 4DF9 00C0 0004             		lea	($C00004).l,a6
000031CC 3CBC 8004                  		move.w	#$8004,(a6)
000031D0 3CBC 8230                  		move.w	#$8230,(a6)
000031D4 3CBC 8407                  		move.w	#$8407,(a6)
000031D8 3CBC 8700                  		move.w	#$8700,(a6)
000031DC 3CBC 8B00                  		move.w	#$8B00,(a6)
000031E0 3CBC 8C81                  		move.w	#$8C81,(a6)
000031E4 4238 F64E                  		clr.b	($FFFFF64E).w
000031E8 46FC 2700                  		move	#$2700,sr
000031EC 3038 F60C                  		move.w	($FFFFF60C).w,d0
000031F0 0200 00BF                  		andi.b	#$BF,d0
000031F4 33C0 00C0 0004             		move.w	d0,($C00004).l
000031FA 6100 E312                  		bsr.w	ClearScreen
000031FE 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003208 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
0000320E 6100 E47A                  		bsr.w	NemDec
00003212 43F9 00FF 0000             		lea	($FF0000).l,a1
00003218 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
0000321E 303C 0000                  		move.w	#0,d0
00003222 6100 E744                  		bsr.w	EniDec
00003226 43F9 00FF 0000             		lea	($FF0000).l,a1
0000322C 203C 6510 0003             		move.l	#$65100003,d0
00003232 7217                       		moveq	#$17,d1
00003234 7407                       		moveq	#7,d2
00003236 6100 E432                  		bsr.w	ShowVDPGraphics
0000323A 43F9 00FF 0180             		lea	($FF0180).l,a1
00003240 203C 4000 0003             		move.l	#$40000003,d0
00003246 7227                       		moveq	#$27,d1
00003248 741B                       		moveq	#$1B,d2
0000324A 6100 E41E                  		bsr.w	ShowVDPGraphics
0000324E 7000                       		moveq	#0,d0
00003250 6100 F0DC                  		bsr.w	PalLoad2	; load Sega logo pallet
00003254 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
0000325A 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00003260 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00003266 31FC 0000 F660             		move.w	#0,($FFFFF660).w
0000326C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003270 0000 0040                  		ori.b	#$40,d0
00003274 33C0 00C0 0004             		move.w	d0,($C00004).l
0000327A                            
0000327A                            Sega_WaitPallet:
0000327A 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003280 6100 FACC                  		bsr.w	DelayProgram
00003284 6100 EF9A                  		bsr.w	PalCycle_Sega
00003288 66F0                       		bne.s	Sega_WaitPallet
0000328A                            
0000328A 103C 00E1                  		move.b	#$E1,d0
0000328E 6100 E356                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00003292 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00003298 6100 FAB4                  		bsr.w	DelayProgram
0000329C 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000032A2                            
000032A2                            Sega_WaitEnd:
000032A2 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000032A8 6100 FAA4                  		bsr.w	DelayProgram
000032AC 4A78 F614                  		tst.w	($FFFFF614).w
000032B0 6700                       		beq.s	Sega_GotoTitle
000032B2 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000032B8 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
000032BA                            
000032BA                            Sega_GotoTitle:
000032BA 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
000032C0 4E75                       		rts	
000032C2                            ; ===========================================================================
000032C2                            
000032C2                            ; ---------------------------------------------------------------------------
000032C2                            ; Title	screen
000032C2                            ; ---------------------------------------------------------------------------
000032C2                            
000032C2                            TitleScreen:				; XREF: GameModeArray
000032C2 103C 00E4                  		move.b	#$E4,d0
000032C6 6100 E31E                  		bsr.w	PlaySound_Special ; stop music
000032CA 6100 ED9C                  		bsr.w	Pal_FadeFrom
000032CE 6100 E558                  		bsr.w	ClearPLC
000032D2 46FC 2700                  		move	#$2700,sr
000032D6 6100 E2C4                  		bsr.w	SoundDriverLoad
000032DA 4DF9 00C0 0004             		lea	($C00004).l,a6
000032E0 3CBC 8004                  		move.w	#$8004,(a6)
000032E4 3CBC 8230                  		move.w	#$8230,(a6)
000032E8 3CBC 8407                  		move.w	#$8407,(a6)
000032EC 3CBC 9001                  		move.w	#$9001,(a6)
000032F0 3CBC 9200                  		move.w	#$9200,(a6)
000032F4 3CBC 8B03                  		move.w	#$8B03,(a6)
000032F8 3CBC 8720                  		move.w	#$8720,(a6)
000032FC 4238 F64E                  		clr.b	($FFFFF64E).w
00003300 6100 E20C                  		bsr.w	ClearScreen
00003304 43F8 D000                  		lea	($FFFFD000).w,a1
00003308 7000                       		moveq	#0,d0
0000330A 323C 07FF                  		move.w	#$7FF,d1
0000330E                            
0000330E                            Title_ClrObjRam:
0000330E 22C0                       		move.l	d0,(a1)+
00003310 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
00003314                            
00003314                            ; gomer
00003314 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000331E 41F9 0000 0000             		lea	(Nem_Gomer).l,a0 ; load Gomer patterns
00003324 6100 E364                  		bsr.w	NemDec
00003328 7003                       		moveq	#3,d0		; load Sonic's pallet
0000332A 6100 EFE6                  		bsr.w	PalLoad1
0000332E                            
0000332E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003334 41F9 0000 0000             		lea	(Eni_Gomer).l,a0 ; load mappings for	Gomer credits
0000333A 303C 0000                  		move.w	#0,d0
0000333E 6100 E628                  		bsr.w	EniDec
00003342                            ; help how the fuck can i do this IT SHOWS NOTHING
00003342 6100 EC7A                  		bsr.w	Pal_FadeTo
00003346 43F9 00FF 0000             		lea	($FF0000).l,a1
0000334C 203C 4000 0003             		move.l	#$40000003,d0
00003352 7227                       		moveq	#$27,d1
00003354 741B                       		moveq	#$1B,d2
00003356 6100 E312                  		bsr.w	ShowVDPGraphics
0000335A                            
0000335A                            
0000335A 43F9 00FF 0000             		lea	($FF0000).l,a1
00003360 203C 6000 0003             		move.l	#$60000003,d0
00003366 7227                       		moveq	#$27,d1
00003368 741B                       		moveq	#$1B,d2
0000336A                            
0000336A 6100 ECFC                  		bsr.w	Pal_FadeFrom
0000336E                            
0000336E                            
0000336E 6100 E19E                  		bsr.w	ClearScreen
00003372 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000337C 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00003382 6100 E306                  		bsr.w	NemDec
00003386 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00003390 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00003396 6100 E2F2                  		bsr.w	NemDec
0000339A 43F9 00FF 0000             		lea	($FF0000).l,a1
000033A0 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
000033A6 303C 0000                  		move.w	#0,d0
000033AA 6100 E5BC                  		bsr.w	EniDec
000033AE 43F9 00FF 0000             		lea	($FF0000).l,a1
000033B4 203C 4000 0003             		move.l	#$40000003,d0
000033BA 7227                       		moveq	#$27,d1
000033BC 741B                       		moveq	#$1B,d2
000033BE 6100 E2AA                  		bsr.w	ShowVDPGraphics
000033C2 6100 ECA4                  		bsr.w	Pal_FadeFrom
000033C6 43F8 FB80                  		lea	($FFFFFB80).w,a1
000033CA 7000                       		moveq	#0,d0
000033CC 323C 001F                  		move.w	#$1F,d1
000033D0                            
000033D0                            
000033D0                            Title_ClrPallet:
000033D0 22C0                       		move.l	d0,(a1)+
000033D2 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
000033D6                            
000033D6 7003                       		moveq	#3,d0		; load Sonic's pallet
000033D8 6100 EF38                  		bsr.w	PalLoad1
000033DC 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
000033E2 4EB9 0000 0000             		jsr	ObjectsLoad
000033E8 4EB9 0000 0000             		jsr	BuildSprites
000033EE 6100 EBCE                  		bsr.w	Pal_FadeTo
000033F2 46FC 2700                  		move	#$2700,sr
000033F6 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
00003400 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00003406 6100 E282                  		bsr.w	NemDec
0000340A 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00003414 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
0000341A 6100 E26E                  		bsr.w	NemDec
0000341E 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00003428 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
0000342E 6100 E25A                  		bsr.w	NemDec
00003432 4DF9 00C0 0000             		lea	($C00000).l,a6
00003438 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
00003440 4BF9 0000 0608             		lea	(Art_Text).l,a5
00003446 323C 0BC5                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
0000344A                            
0000344A                            Title_LoadText:
0000344A 2C9D                       		move.l	(a5)+,(a6)
0000344C 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00003450                            
00003450 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00003456 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
0000345C 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00003462 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
00003468 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
0000346E 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00003474 6100 0000                  		bsr.w	LevelSizeLoad
00003478 6100 0000                  		bsr.w	DeformBgLayer
0000347C                            
0000347C 43F8 B000                  		lea	($FFFFB000).w,a1
00003480 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
00003486 303C 0000                  		move.w	#0,d0
0000348A 6100 E4DC                  		bsr.w	EniDec
0000348E 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
00003494 43F9 00FF 0000             		lea	($FF0000).l,a1
0000349A 6100 E64A                  		bsr.w	KosDec
0000349E 6100 0000                  		bsr.w	LevelLayoutLoad
000034A2                            
000034A2 46FC 2700                  		move	#$2700,sr
000034A6 6100 E066                  		bsr.w	ClearScreen
000034AA 4BF9 00C0 0004             		lea	($C00004).l,a5
000034B0 4DF9 00C0 0000             		lea	($C00000).l,a6
000034B6 47F8 F708                  		lea	($FFFFF708).w,a3
000034BA 49F8 A440                  		lea	($FFFFA440).w,a4
000034BE 343C 6000                  		move.w	#$6000,d2
000034C2 6100 0000                  		bsr.w	LoadTilesFromStart2
000034C6 43F9 00FF 0000             		lea	($FF0000).l,a1
000034CC 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
000034D2 303C 0000                  		move.w	#0,d0
000034D6 6100 E490                  		bsr.w	EniDec
000034DA 43F9 00FF 0000             		lea	($FF0000).l,a1
000034E0 203C 4206 0003             		move.l	#$42060003,d0
000034E6 7221                       		moveq	#$21,d1
000034E8 7415                       		moveq	#$15,d2
000034EA 6100 E17E                  		bsr.w	ShowVDPGraphics
000034EE 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000034F8 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
000034FE 6100 E18A                  		bsr.w	NemDec
00003502 7001                       		moveq	#1,d0		; load title screen pallet
00003504 6100 EE0C                  		bsr.w	PalLoad1
00003508 103C 008A                  		move.b	#$8A,d0		; play title screen music
0000350C 6100 E0D8                  		bsr.w	PlaySound_Special
00003510 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00003516 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
0000351C 43F8 D080                  		lea	($FFFFD080).w,a1
00003520 7000                       		moveq	#0,d0
00003522 323C 000F                  		move.w	#$F,d1
00003526                            
00003526                            Title_ClrObjRam2:
00003526 22C0                       		move.l	d0,(a1)+
00003528 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
0000352C                            
0000352C 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
00003532 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00003538 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
0000353E 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00003544 11FC 000F D100             		move.b	#$F,($FFFFD100).w
0000354A 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003550 4EB9 0000 0000             		jsr	ObjectsLoad
00003556 6100 0000                  		bsr.w	DeformBgLayer
0000355A 4EB9 0000 0000             		jsr	BuildSprites
00003560 7000                       		moveq	#0,d0
00003562 6100 E298                  		bsr.w	LoadPLC2
00003566 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
0000356C 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
00003572 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003576 0000 0040                  		ori.b	#$40,d0
0000357A 33C0 00C0 0004             		move.w	d0,($C00004).l
00003580 6100 EA3C                  		bsr.w	Pal_FadeTo
00003584                            
00003584                            loc_317C:
00003584 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000358A 6100 F7C2                  		bsr.w	DelayProgram
0000358E 4EB9 0000 0000             		jsr	ObjectsLoad
00003594 6100 0000                  		bsr.w	DeformBgLayer
00003598 4EB9 0000 0000             		jsr	BuildSprites
0000359E 6100 E608                  		bsr.w	PalCycle_Title
000035A2 6100 E292                  		bsr.w	RunPLC_RAM
000035A6 3038 D008                  		move.w	($FFFFD008).w,d0
000035AA 5440                       		addq.w	#2,d0
000035AC 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
000035B0 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
000035B4 6500                       		bcs.s	Title_ChkRegion	; if not, branch
000035B6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000035BC 4E75                       		rts	
000035BE                            ; ===========================================================================
000035BE                            
000035BE                            Title_ChkRegion:
000035BE 0838 0004 FFF8             		btst	#4,($FFFFFFF8).w		; check	if the machine is US or	Japanese
000035C4 6700                       		beq.s	Title_RegionJ			; if Japanese, branch
000035C6 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0	; load US code
000035CC 6000                       		bra.s	Title_EnterCheat
000035CE                            ; ===========================================================================
000035CE                            
000035CE                            Title_RegionJ:				; XREF: Title_ChkRegion
000035CE 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
000035D4                            
000035D4                            Title_EnterCheat:			; XREF: Title_ChkRegion
000035D4 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
000035D8 D0C0                       		adda.w	d0,a0
000035DA 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
000035DE 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
000035E2 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
000035E4 6600                       		bne.s	loc_3210	; if not, branch
000035E6 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
000035EA 4A00                       		tst.b	d0
000035EC 6600                       		bne.s	Title_CountC
000035EE 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
000035F2 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
000035F6 E249                       		lsr.w	#1,d1
000035F8 0241 0003                  		andi.w	#3,d1
000035FC 6700                       		beq.s	Title_PlayRing
000035FE 0838 0004 FFF8             		btst	#4,($FFFFFFF8).w
00003604 6700                       		beq.s	Title_PlayRing
00003606 7201                       		moveq	#1,d1
00003608 1181 1001                  		move.b	d1,1(a0,d1.w)
0000360C                            
0000360C                            Title_PlayRing:
0000360C 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00003612 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003616 6100 DFCE                  		bsr.w	PlaySound_Special
0000361A 6000                       		bra.s	Title_CountC
0000361C                            ; ===========================================================================
0000361C                            
0000361C                            loc_3210:				; XREF: Title_EnterCheat
0000361C 4A00                       		tst.b	d0
0000361E 6700                       		beq.s	Title_CountC
00003620 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
00003626 6700                       		beq.s	Title_CountC
00003628 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
0000362E                            
0000362E                            Title_CountC:
0000362E 1038 F605                  		move.b	($FFFFF605).w,d0
00003632 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
00003636 6700                       		beq.s	loc_3230	; if not, branch
00003638 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
0000363C                            
0000363C                            loc_3230:
0000363C 4A78 F614                  		tst.w	($FFFFF614).w
00003640 6700 0000                  		beq.w	Demo
00003644                            		; (temporary until we have an actual options screen)
00003644 0838 0005 F605             		btst	#5,	($FFFFF605).w ; check if c pressed
0000364A 6700                       		beq.s	@notc
0000364C                            
0000364C 5238 FFE8                  		add.b	#1,(v_character).w ; sonic/gronic 
00003650 0C38 0003 FFE8             		cmpi.b	#3,(v_character).w
00003656 6D00                       		blt.s	@notoverflow
00003658 11FC 0000 FFE8             		move.b	#0,(v_character).w
0000365E                            	@notoverflow:
0000365E 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003662 6100 DF82                  		bsr.w	PlaySound_Special
00003666                            	@notc:
00003666 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
0000366C 6700 FF16                  		beq.w	loc_317C	; if not, branch
00003670                            
00003670                            Title_ChkLevSel:
00003670 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00003676 6700 0000                  		beq.w	PlayLevel	; if not, play level
0000367A                            		
0000367A                            		
0000367A 7002                       		moveq	#2,d0
0000367C 6100 ECB0                  		bsr.w	PalLoad2	; load level select pallet
00003680 43F8 CC00                  		lea	($FFFFCC00).w,a1
00003684 7000                       		moveq	#0,d0
00003686 323C 00FF                  		move.w	#$FF,d1
0000368A                            
0000368A                            Title_ClrScroll:
0000368A 22C0                       		move.l	d0,(a1)+
0000368C 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
00003690                            
00003690 21C0 F616                  		move.l	d0,($FFFFF616).w
00003694 46FC 2700                  		move	#$2700,sr
00003698 4DF9 00C0 0000             		lea	($C00000).l,a6
0000369E 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
000036A8 323C 03FF                  		move.w	#$3FF,d1
000036AC                            
000036AC                            Title_ClrVram:
000036AC 2C80                       		move.l	d0,(a6)
000036AE 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
000036B2                            
000036B2 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
000036B6 6700 0000                  		beq.w	GotoOptions	; if not, play level
000036BA                            
000036BA 6100 0000                  		bsr.w	LevSelTextLoad
000036BE                            		
000036BE                            		; sound test fix
000036BE 3C38 FF82                  		move.w	($FFFFFF82).w,d6
000036C2 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
000036C8                            		
000036C8 363C C65F                  		move.w	#$C680-$21,d3 ; selected
000036CC 0C46 0014                  		cmpi.w	#$14,d6
000036D0 6700                       		beq.s	@issndtst
000036D2 363C E65F                  		move.w	#$E680-$21,d3 ; not selected
000036D6                            	@issndtst:
000036D6 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
000036DA 31C6 FF82                  		move.w	d6,($FFFFFF82).w
000036DE                            		
000036DE 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
000036E2 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
000036EA                            		
000036EA 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
000036F0 6700                       		beq.s	@issndtst2
000036F2                            		
000036F2 43F9 0000 0000             		lea	(Controls_Normal).l,a1 ; control help
000036F8 6100 0000                  		bsr.w	CStringSlop
000036FC 6000                       		bra.s	LevelSelect
000036FE                            	@issndtst2:
000036FE 43F9 0000 0000             		lea	(Controls_SND).l,a1
00003704 6100 0000                  		bsr.w	CStringSlop
00003708                            		
00003708                            ; ---------------------------------------------------------------------------
00003708                            ; Level	Select
00003708                            ; ---------------------------------------------------------------------------
00003708                            LevelSelect:
00003708 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000370E 6100 F63E                  		bsr.w	DelayProgram
00003712 6100 0000                  		bsr.w	LevSelControls
00003716 6100 E11E                  		bsr.w	RunPLC_RAM
0000371A 4AB8 F680                  		tst.l	($FFFFF680).w
0000371E 66E8                       		bne.s	LevelSelect
00003720 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00003726 67E0                       		beq.s	LevelSelect	; if not, branch
00003728 3038 FF82                  		move.w	($FFFFFF82).w,d0
0000372C 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
00003730 6600                       		bne.s	@dont	; if not, dont blow this place up
00003732                            			
00003732 11FC 00E5 F00B             		move.b	#$E5,($FFFFF00B).w ; YOU ARE AN IDIOT BOOM
00003738 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000373E 6100 F60E                  		bsr.w	DelayProgram
00003742                            	@dont:
00003742 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
00003746 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00003748                            		
00003748 0238 00A0 F605             		andi.b	#$A0,($FFFFF605).w ; is C or Start pressed?
0000374E 67B8                       		beq.s	LevelSelect	; if not, branch
00003750                            		
00003750 0838 0007 F605             		btst	#7,($FFFFF605).w ; was it start?
00003756 6600                       		bne.s	LevSel_SEGA ; then go to sega screen
00003758                            		
00003758 1038 FF84                  		move.b	($FFFFFF84).w,d0
0000375C 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
00003760                            		
00003760 4EB9 0000 0000             		jsr		ShowNow_Playing
00003766 60A0                       		bra.s	LevelSelect
00003768                            ; ===========================================================================
00003768                            
00003768                            LevSel_SEGA:				; XREF: LevelSelect
00003768 11FC 0000 F600             		move.b	#$0,($FFFFF600).w ; set screen	mode to	$0 SEGA
0000376E 4E75                       		rts	
00003770                            ; ===========================================================================
00003770                            
00003770                            LevSel_Ending:				; XREF: LevelSelect
00003770 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
00003776 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
0000377C 4E75                       		rts	
0000377E                            ; ===========================================================================
0000377E                            
0000377E                            LevSel_Credits:				; XREF: LevelSelect
0000377E 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00003784 103C 0091                  		move.b	#$91,d0
00003788 6100 DE5C                  		bsr.w	PlaySound_Special ; play credits music
0000378C 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00003792 4E75                       		rts	
00003794                            ; ===========================================================================
00003794                            
00003794                            LevSel_Level_SS:			; XREF: LevelSelect
00003794 D040                       		add.w	d0,d0
00003796 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
0000379A 6B00 FF6C                  		bmi.w	LevelSelect
0000379E 0C40 FFFF                  		cmpi.w	#$FFFF,d0	; check	if level is 0700 (Special Stage)
000037A2 6600                       		bne.s	LevSel_Level	; if not, branch
000037A4 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000037AA 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
000037AE 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000037B4 7000                       		moveq	#0,d0
000037B6 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000037BA 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000037BE 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000037C2 4E75                       		rts	
000037C4                            ; ===========================================================================
000037C4                            
000037C4                            LevSel_Level:				; XREF: LevSel_Level_SS
000037C4 0240 3FFF                  		andi.w	#$3FFF,d0
000037C8 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
000037CC                            
000037CC                            PlayLevel:				; XREF: ROM:00003246j ...
000037CC 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000037D2 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000037D8 7000                       		moveq	#0,d0
000037DA 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000037DE 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000037E2 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000037E6 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
000037EA 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
000037EE 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
000037F2 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
000037F6 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
000037FA 103C 00E0                  		move.b	#$E0,d0
000037FE 6100 DDE6                  		bsr.w	PlaySound_Special ; fade out music
00003802 4E75                       		rts	
00003804                            ; ===========================================================================
00003804                            ; ---------------------------------------------------------------------------
00003804                            ; Level	select - level pointers
00003804                            ; ---------------------------------------------------------------------------
00003804                            LSelectPointers:
00003804 0000                       		dc.w $0000 ; crz
00003806 0001                       		dc.w $0001
00003808 0002                       		dc.w $0002
0000380A 0100                       		dc.w $0100 ; ilfez
0000380C 0101                       		dc.w $0101
0000380E 0102                       		dc.w $0102
00003810 0200                       		dc.w $0200 ; mz
00003812 0201                       		dc.w $0201
00003814 0202                       		dc.w $0202
00003816 0300                       		dc.w $0300 ; dgrotz
00003818 0301                       		dc.w $0301 
0000381A 0302                       		dc.w $0302 
0000381C 0700                       		dc.w $0700 ; the other mz...
0000381E 0701                       		dc.w $0701 
00003820 0702                       		dc.w $0702 
00003822 0400                       		dc.w $0400 ; tpfbz
00003824 0401                       		dc.w $0401
00003826 0402                       		dc.w $0402
00003828 0500                       		dc.w $0500 ; zzzzz
0000382A 0501                       		dc.w $0501 
0000382C 0103                       		dc.w $0103 
0000382E 0502                       		dc.w $0502 ; fz
00003830 FFFF                       		dc.w $FFFF ; special
00003832 8000                       		dc.w $8000 ; sound test
00003834                            		even
00003834                            ; --------------------------------------
00003834                            ; ---------------------------------------------------------------------------
00003834                            ; Level	select codes
00003834                            ; ---------------------------------------------------------------------------
00003834                            LevelSelectCode_J:
00003834                            		incbin	misc\ls_jcode.bin
0000383A                            		even
0000383A                            
0000383A                            LevelSelectCode_US:
0000383A                            		incbin	misc\ls_ucode.bin
00003840                            		even
00003840                            ; ===========================================================================
00003840                            
00003840                            ; ---------------------------------------------------------------------------
00003840                            ; Demo mode
00003840                            ; ---------------------------------------------------------------------------
00003840                            
00003840                            Demo:					; XREF: TitleScreen
00003840 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003846                            
00003846                            loc_33B6:				; XREF: loc_33E4
00003846 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000384C 6100 F500                  		bsr.w	DelayProgram
00003850 6100 0000                  		bsr.w	DeformBgLayer
00003854 6100 E330                  		bsr.w	PalCycle_Load
00003858 6100 DFDC                  		bsr.w	RunPLC_RAM
0000385C 3038 D008                  		move.w	($FFFFD008).w,d0
00003860 5440                       		addq.w	#2,d0
00003862 31C0 D008                  		move.w	d0,($FFFFD008).w
00003866 0C40 1C00                  		cmpi.w	#$1C00,d0
0000386A 6500                       		bcs.s	loc_33E4
0000386C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00003872 4E75                       		rts	
00003874                            ; ===========================================================================
00003874                            
00003874                            loc_33E4:				; XREF: Demo
00003874 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
0000387A 6600 FDF4                  		bne.w	Title_ChkLevSel	; if yes, branch
0000387E 4A78 F614                  		tst.w	($FFFFF614).w
00003882 6600 FFC2                  		bne.w	loc_33B6
00003886 103C 00E0                  		move.b	#$E0,d0
0000388A 6100 DD5A                  		bsr.w	PlaySound_Special ; fade out music
0000388E 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00003892 0240 0007                  		andi.w	#7,d0
00003896 D040                       		add.w	d0,d0
00003898 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
0000389C 31C0 FE10                  		move.w	d0,($FFFFFE10).w
000038A0 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
000038A4 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
000038AA 6500                       		bcs.s	loc_3422	; if yes, branch
000038AC 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
000038B2                            
000038B2                            loc_3422:
000038B2 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
000038B8 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
000038BE 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
000038C2 6600                       		bne.s	Demo_Level	; if not, branch
000038C4 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000038CA 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
000038CE 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
000038D2                            
000038D2                            Demo_Level:
000038D2 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000038D8 7000                       		moveq	#0,d0
000038DA 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000038DE 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000038E2 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000038E6 4E75                       		rts	
000038E8                            ; ===========================================================================
000038E8                            ; ---------------------------------------------------------------------------
000038E8                            ; Levels used in demos
000038E8                            ; ---------------------------------------------------------------------------
000038E8                            Demo_Levels:	incbin	misc\dm_ord1.bin
000038F0                            		even
000038F0                            
000038F0                            ; ---------------------------------------------------------------------------
000038F0                            ; Subroutine to	change what you're selecting in the level select
000038F0                            ; ---------------------------------------------------------------------------
000038F0                            
000038F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000038F0                            
000038F0                            
000038F0                            LevSelControls:				; XREF: LevelSelect
000038F0 1238 F605                  		move.b	($FFFFF605).w,d1
000038F4 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
000038F8 6600                       		bne.s	LevSel_UpDown	; if yes, branch
000038FA 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
000038FE 6A00 0000                  		bpl.w	LevSel_SndTest	; if time remains, branch
00003902                            
00003902                            LevSel_UpDown:
00003902 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003908 1238 F604                  		move.b	($FFFFF604).w,d1
0000390C 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00003910 6700 0000                  		beq.w	LevSel_SndTest	; if not, branch
00003914 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003918 0801 0000                  		btst	#0,d1		; is up	pressed?
0000391C 6700                       		beq.s	LevSel_Down	; if not, branch
0000391E 5346                       		subq.w	#1,d6		; move up 1 selection
00003920 6400                       		bcc.s	LevSel_Down
00003922 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
00003924                            
00003924                            LevSel_Down:
00003924 0801 0001                  		btst	#1,d1		; is down pressed?
00003928 6700                       		beq.s	LevSel_Refresh	; if not, branch
0000392A 5246                       		addq.w	#1,d6		; move down 1 selection
0000392C 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003930 6500                       		bcs.s	LevSel_Refresh
00003932 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
00003934 6000                       		bra.s	LevSel_Refresh
00003936                            		
00003936                            LevSel_LR:
00003936 0801 0002                  		btst	#2,d1		; is left pressed?
0000393A 6700                       		beq.s	LevSel_Right	; if not, branch
0000393C 0446 0000                  		sub.w	#lsrow2size,d6
00003940 64E2                       		bcc.s	LevSel_Down
00003942 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
00003946                            LevSel_Right:
00003946 0801 0003                  		btst	#3,d1		; is right pressed?
0000394A 6700                       		beq.s	LevSel_Refresh	; if not, branch
0000394C 0646 0000                  		add.w	#lsrow1size,d6
00003950 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003954 6500                       		bcs.s	LevSel_Refresh
00003956 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
0000395A                            ; ===========================================================================
0000395A                            LevSel_Refresh:
0000395A                            		
0000395A 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
0000395E 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
00003962                            		
00003962 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003968 6600                       		bne.s	@exitsndtest
0000396A                            		
0000396A 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
0000396E 43F9 0000 0000             		lea	(Controls_Normal).l,a1
00003974 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
0000397C 6100 0000                  		bsr.w	CStringSlop
00003980                            	@exitsndtest:
00003980                            	
00003980 363C C65F                  		move.w	#$C680-$21,d3
00003984 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
00003988 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
0000398C                            		
0000398C 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w 
00003992 6600                       		bne.s	@entersndtest
00003994                            		
00003994 363C C65F                  		move.w	#$C680-$21,d3
00003998 43F9 0000 0000             		lea	(Controls_SND).l,a1
0000399E 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
000039A6 6100 0000                  		bsr.w	CStringSlop
000039AA                            	@entersndtest:
000039AA 4E75                       		rts	
000039AC                            		
000039AC                            LevSel_SndTest:				; XREF: LevSelControls
000039AC 1238 F605                  		move.b	($FFFFF605).w,d1
000039B0 0201 005C                  		andi.b	#$5C,d1		; is left/right/a/b	pressed?
000039B4 6700                       		beq.s	LevSel_NoMove	; if not, branch
000039B6 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is item $14 selected?
000039BC 6600 FF78                  		bne.w	LevSel_LR	; if not, branch
000039C0                            		
000039C0 1038 FF84                  		move.b	($FFFFFF84).w,d0
000039C4 0801 0002                  		btst	#2,d1		; is left pressed?
000039C8 6700                       		beq.s	SndTest_Right	; if not, branch
000039CA 5300                       		subq.b	#1,d0		; subtract 1 from sound	test
000039CC                            		; no need the fact it's a byte does the trick
000039CC                            
000039CC                            SndTest_Right:
000039CC 0801 0003                  		btst	#3,d1		; is right pressed?
000039D0 6700                       		beq.s	SndTest_A	; if not, branch
000039D2 5200                       		addq.b	#1,d0		; add 1	to sound test
000039D4                            		; same here
000039D4                            		
000039D4                            SndTest_A:
000039D4 0801 0006                  		btst	#6,d1		; is A pressed?
000039D8 6700                       		beq.s	SndTest_B	; if not, branch
000039DA 5100                       		subq.b	#8,d0		; subtract $10 to sound test
000039DC 5100                       		subq.b	#8,d0
000039DE                            		
000039DE                            SndTest_B:
000039DE 0801 0004                  		btst	#4,d1		; is B pressed?
000039E2 6700                       		beq.s	SndTest_Refresh	; if not, branch
000039E4 5000                       		addq.b	#8,d0		; add $10 to sound test
000039E6 5000                       		addq.b	#8,d0
000039E8                            
000039E8                            SndTest_Refresh:
000039E8 363C C65F                  		move.w	#$C680-$21,d3
000039EC 11C0 FF84                  		move.b	d0,($FFFFFF84).w ; set sound test number
000039F0 6000 0000                  		bra.w	LevSelSndTest	; refresh text
000039F4                            
000039F4                            LevSel_NoMove:
000039F4 4E75                       		rts	
000039F6                            ; End of function LevSelControls
000039F6                            
000039F6                            ; ---------------------------------------------------------------------------
000039F6                            ; Subroutine to load level select text
000039F6                            ; ---------------------------------------------------------------------------
000039F6                            
000039F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000039F6                            
000039F6                            LevSelTextLoad_loop:
000039F6 2D44 0004                  		move.l	d4,4(a6)
000039FA 6100 0000                  		bsr.w	LevSel_ChgLine
000039FE 0684 0080 0000             		addi.l	#$800000,d4
00003A04 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
00003A08 4E75                       		rts
00003A0A                            LevSelTextLoad:				; XREF: TitleScreen
00003A0A 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003A10 4DF9 00C0 0000             		lea	($C00000).l,a6
00003A16 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003A1A 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
00003A20                            		
00003A20 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
00003A24 61D0                       		bsr.s	LevSelTextLoad_loop
00003A26                            		
00003A26                            		
00003A26 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
00003A2C 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
00003A30 61C4                       		bsr.s	LevSelTextLoad_loop
00003A32 363C C65F                  		move.w	#$C680-$21,d3
00003A36                            		
00003A36                            LevSelHighlightCode:
00003A36 4DF9 00C0 0000             		lea	($C00000).l,a6
00003A3C 7000                       		moveq	#0,d0
00003A3E 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003A42 3200                       		move.w	d0,d1
00003A44 283C 6086 0003             		move.l	#lsscrpos,d4
00003A4A                            		
00003A4A 0C40 0000                  		cmpi.w	#lsrow1size,d0
00003A4E 6D00                       		blt.s	@notsecond
00003A50                            		
00003A50 0440 0000                  		sub.w	#lsrow1size,d0
00003A54 0684 0024 0000             		addi.l	#lsoff,d4
00003A5A                            	@notsecond:
00003A5A EF48                       		lsl.w	#7,d0
00003A5C 4840                       		swap	d0
00003A5E D880                       		add.l	d0,d4
00003A60 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003A66 E749                       		lsl.w	#3,d1
00003A68 D241                       		add.w	d1,d1
00003A6A D2C1                       		adda.w	d1,a1
00003A6C 2D44 0004                  		move.l	d4,4(a6)
00003A70 6100 0000                  		bsr.w	LevSel_ChgLine
00003A74 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003A7A 6700                       		beq.s	LevSelSndTest
00003A7C 4E75                       		rts
00003A7E                            
00003A7E                            LevSelSndTest:
00003A7E 0643 0030                  		add.w	#$30,d3
00003A82 23FC 64C2 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
00003A8C 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003A90 1400                       		move.b	d0,d2
00003A92 E808                       		lsr.b	#4,d0
00003A94 6100 0000                  		bsr.w	LevSel_ChgSnd
00003A98 1002                       		move.b	d2,d0
00003A9A 6100 0000                  		bsr.w	LevSel_ChgSnd
00003A9E 4E75                       		rts	
00003AA0                            ; End of function LevSelTextLoad
00003AA0                            
00003AA0                            
00003AA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003AA0                            
00003AA0                            
00003AA0                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00003AA0 0240 000F                  		andi.w	#$F,d0
00003AA4 0C00 000A                  		cmpi.b	#$A,d0
00003AA8 6500                       		bcs.s	loc_3580
00003AAA 5E00                       		addi.b	#7,d0
00003AAC                            
00003AAC                            loc_3580:
00003AAC D043                       		add.w	d3,d0
00003AAE 3C80                       		move.w	d0,(a6)
00003AB0 4E75                       		rts	
00003AB2                            ; End of function LevSel_ChgSnd
00003AB2                            
00003AB2                            
00003AB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003AB2                            
00003AB2                            
00003AB2                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003AB2 740F                       		moveq	#$10-1,d2		; number of characters per line
00003AB4                            
00003AB4                            @loop:
00003AB4 7000                       		moveq	#0,d0
00003AB6 1019                       		move.b	(a1)+,d0
00003AB8 0C00 0020                  		cmpi.b	#$20,d0
00003ABC 6E00                       		bgt.s	@draw
00003ABE 3CBC 0000                  		move.w	#0,(a6)
00003AC2 51CA FFF0                  		dbf	d2,@loop
00003AC6 4E75                       		rts	
00003AC8                            ; ===========================================================================
00003AC8                            
00003AC8                            @draw:				; XREF: LevSel_ChgLine
00003AC8 D043                       		add.w	d3,d0
00003ACA 3C80                       		move.w	d0,(a6)
00003ACC 51CA FFE6                  		dbf	d2,@loop
00003AD0 4E75                       		rts	
00003AD2                            ; End of function LevSel_ChgLine
00003AD2                            		
00003AD2                            CStringSlop_draw:
00003AD2 D043                       		add.w	d3,d0
00003AD4 3C80                       		move.w	d0,(a6)
00003AD6                            CStringSlop:				; XREF: LevSelTextLoad
00003AD6 7000                       		moveq	#0,d0
00003AD8 1019                       		move.b	(a1)+,d0
00003ADA 0C00 0020                  		cmpi.b	#$20,d0
00003ADE 6EF2                       		bgt.s	CStringSlop_draw
00003AE0                            		
00003AE0 0C00 0001                  		cmpi.b	#1,d0
00003AE4 6700                       		beq.s	@InsertSpaces
00003AE6 6500                       		blo.s	@end
00003AE8                            		
00003AE8 3CBC 0000                  		move.w	#0,(a6)
00003AEC 60E8                       		bra.s	CStringSlop
00003AEE                            	@end:
00003AEE 4E75                       		rts
00003AF0                            	@InsertSpaces:
00003AF0 7000                       		moveq	#0,d0
00003AF2 1019                       		move.b	(a1)+,d0
00003AF4                            		
00003AF4                            	@insert:
00003AF4 3CBC 0000                  		move.w	#0,(a6)
00003AF8 51C8 FFFA                  		dbf.w	d0,@insert
00003AFC 60D8                       		bra.s	CStringSlop
00003AFE                            ; End of function LevSel_ChgLine
00003AFE                            
00003AFE                            ; ===========================================================================
00003AFE                            ; ---------------------------------------------------------------------------
00003AFE                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
00003AFE                            ; ---------------------------------------------------------------------------
00003AFE                            LevelMenuText:	
00003AFE 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
00003B0E 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B1E 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B2E 4920 4C49 4B45 2046 494C+          dc.b    "I LIKE FILE    1"
00003B3E 2045 5850 4C4F 5245 5220+          dc.b    " EXPLORER      2"
00003B4E 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B5E 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
00003B6E 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B7E 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B8E 444F 4E54 4745 5452 4944+          dc.b    "DONTGETRIDOTHIS1"
00003B9E 2020 2020 2020 2020 2020+          dc.b    "               2"
00003BAE 2020 2020 2020 2020 2020+          dc.b    "               3"
00003BBE 4D41 4B4F 544F 2020 2020+          dc.b    "MAKOTO         1"
00003BCE 2020 2020 2020 2020 2020+          dc.b    "               2"
00003BDE 2020 2020 2020 2020 2020+          dc.b    "               3"
00003BEE                            LMTSecondRow:
00003BEE 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
00003BFE 2042 4152 4E59 4152 4420+          dc.b    " BARNYARD      2"
00003C0E 2020 2020 2020 2020 2020+          dc.b    "               3"
00003C1E 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
00003C2E 2020 2020 2020 2020 2020+          dc.b    "               2"
00003C3E 2020 2020 2020 2020 2020+          dc.b    "               3"
00003C4E 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
00003C5E 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
00003C6E 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST $    "
00003C7E 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
00003C8E 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
00003C9E                            LMTSelectableEnd:
00003C9E 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00003CAE                            LMTEnd:
00003CAE                            
00003CAE                            Now_Playing:
00003CAE 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
00003CBE                            		even
00003CBE                            NP_Track:
00003CBE 5452 4143 4B20 2400        		dc.b	"TRACK $",0
00003CC6                            		even
00003CC6                            NP_SFX:
00003CC6 534F 554E 4420 2400        		dc.b	"SOUND $",0
00003CCE                            		even
00003CCE                            
00003CCE                            ShowNow_Playing:
00003CCE 1C00                       		move.b	d0,d6
00003CD0 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003CD4 43FA FFD8                  		lea	Now_Playing(pc),a1
00003CD8 4DF9 00C0 0000             		lea		($C00000).l,a6
00003CDE 2D7C 6C82 0003 0004        		move.l	#lsnppos,4(a6)
00003CE6 6100 FDEE                  		bsr.w	CStringSlop
00003CEA                            		
00003CEA 43FA FFD2                  		lea	NP_Track(pc),a1
00003CEE 0C06 00A0                  		cmpi.b	#$A0,d6
00003CF2 6D00                       		blt.s	@track
00003CF4                            		
00003CF4 43FA FFD0                  		lea	NP_SFX(pc),a1
00003CF8                            	@track:
00003CF8 6100 FDDC                  		bsr.w	CStringSlop
00003CFC                            		
00003CFC 0643 0030                  		add.w	#$30,d3
00003D00 1006                       		move.b	d6,d0
00003D02 1400                       		move.b	d0,d2
00003D04 E808                       		lsr.b	#4,d0
00003D06 6100 FD98                  		bsr.w	LevSel_ChgSnd
00003D0A 1002                       		move.b	d2,d0
00003D0C 6100 FD92                  		bsr.w	LevSel_ChgSnd
00003D10 4E75                       		rts	
00003D12                            
00003D12                            ; 1 is insert spaces btw
00003D12                            Controls_Normal:
00003D12 414E 593A 2050 4C41 5901+  		dc.b	"ANY: PLAY",1,27,0
00003D1E                            		even		
00003D1E                            Controls_SND:
00003D1E 413A 202D 3130 2020 423A+  		dc.b	"A: -10  B: +10  C: PLAY  START: QUIT",0
00003D44 00                         		even
00003D44                            		
00003D44                            OptionMenuText:	
00003D44 504C 4159 2054 4845 2047+  		dc.b    "PLAY THE GAME!!!"
00003D54 4348 4152 4143 5445 5220+          dc.b    "CHARACTER       "
00003D64                            OMTEnd:
00003D64                            		
00003D64                            ; ---------------------------------------------------------------------------
00003D64                            ; Level	Select
00003D64                            ; ---------------------------------------------------------------------------
00003D64                            GotoOptions:
00003D64 43F9 0000 3D44             		lea	(OptionMenuText).l,a1
00003D6A 4DF9 00C0 0000             		lea	($C00000).l,a6
00003D70 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003D74 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
00003D7A                            		
00003D7A 323C 0000                  		move.w	#optamm-1,d1		; number of lines of text (first row)
00003D7E 6100 FC76                  		bsr.w	LevSelTextLoad_loop
00003D82                            
00003D82                            OptionsMenu:
00003D82 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003D88 6100 EFC4                  		bsr.w	DelayProgram
00003D8C 6100 0000                  		bsr.w	OptControls
00003D90 6100 DAA4                  		bsr.w	RunPLC_RAM
00003D94 4AB8 F680                  		tst.l	($FFFFF680).w
00003D98 66E8                       		bne.s	OptionsMenu
00003D9A 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00003DA0 67E0                       		beq.s	OptionsMenu	; if not, branch
00003DA2 4E71                       		nop
00003DA4 60DC                       		bra.s	OptionsMenu
00003DA6                            		
00003DA6                            OptReturn:
00003DA6 4E75                       		rts
00003DA8                            OptControls:				; XREF: LevelSelect
00003DA8 1238 F605                  		move.b	($FFFFF605).w,d1
00003DAC 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003DB0 6600                       		bne.s	Opt_UpDown	; if yes, branch
00003DB2 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003DB6 6AEE                       		bpl.s	OptReturn	; if time remains, branch
00003DB8                            Opt_UpDown:
00003DB8 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003DBE 1238 F604                  		move.b	($FFFFF604).w,d1
00003DC2 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003DC6 0801 0000                  		btst	#0,d1		; is up	pressed?
00003DCA 6700                       		beq.s	Opt_Down	; if not, branch
00003DCC 5346                       		subq.w	#1,d6		; move up 1 selection
00003DCE 6400                       		bcc.s	Opt_Down
00003DD0 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
00003DD2                            
00003DD2                            Opt_Down:
00003DD2 0801 0001                  		btst	#1,d1		; is down pressed?
00003DD6 6700                       		beq.s	Opt_Refresh	; if not, branch
00003DD8 5246                       		addq.w	#1,d6		; move down 1 selection
00003DDA 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003DDE 6500                       		bcs.s	Opt_Refresh
00003DE0 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
00003DE2                            Opt_Refresh:
00003DE2                            		
00003DE2                            ; ---------------------------------------------------------------------------
00003DE2                            ; Music	playlist
00003DE2                            ; ---------------------------------------------------------------------------
00003DE2                            MusicList1:	incbin	misc\muslist1.bin
00003DEA                            		even
00003DEA                            MusicList2:	incbin	misc\muslist2.bin
00003DF2                            		even
00003DF2                            MusicList3:	incbin	misc\muslist3.bin
00003DFA                            		even
00003DFA                            MusicList4:	incbin	misc\muslist4.bin
00003E02                            		even
00003E02                            ; ===========================================================================
00003E02                            
00003E02                            ; ---------------------------------------------------------------------------
00003E02                            ; Level
00003E02                            ; ---------------------------------------------------------------------------
00003E02                            
00003E02                            Level:					; XREF: GameModeArray
00003E02 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003E08 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003E0C 6B00                       		bmi.s	loc_37B6
00003E0E 103C 00E0                  		move.b	#$E0,d0
00003E12 6100 D7D2                  		bsr.w	PlaySound_Special ; fade out music
00003E16                            
00003E16                            loc_37B6:
00003E16 6100 DA10                  		bsr.w	ClearPLC
00003E1A 6100 E24C                  		bsr.w	Pal_FadeFrom
00003E1E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003E22 6B00                       		bmi.s	Level_ClrRam
00003E24 46FC 2700                  		move	#$2700,sr
00003E28 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003E32 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00003E38 6100 D850                  		bsr.w	NemDec
00003E3C 46FC 2300                  		move	#$2300,sr
00003E40 7000                       		moveq	#0,d0
00003E42 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003E46 E948                       		lsl.w	#4,d0
00003E48 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003E4E 45F2 0000                  		lea	(a2,d0.w),a2
00003E52 7000                       		moveq	#0,d0
00003E54 1012                       		move.b	(a2),d0
00003E56 6700                       		beq.s	loc_37FC
00003E58 6100 D970                  		bsr.w	LoadPLC		; load level patterns
00003E5C                            
00003E5C                            loc_37FC:
00003E5C 7001                       		moveq	#1,d0
00003E5E 6100 D96A                  		bsr.w	LoadPLC		; load standard	patterns
00003E62                            
00003E62                            Level_ClrRam:
00003E62 43F8 D000                  		lea	($FFFFD000).w,a1
00003E66 7000                       		moveq	#0,d0
00003E68 323C 07FF                  		move.w	#$7FF,d1
00003E6C                            
00003E6C                            Level_ClrObjRam:
00003E6C 22C0                       		move.l	d0,(a1)+
00003E6E 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003E72                            
00003E72 43F8 F628                  		lea	($FFFFF628).w,a1
00003E76 7000                       		moveq	#0,d0
00003E78 323C 0015                  		move.w	#$15,d1
00003E7C                            
00003E7C                            Level_ClrVars:
00003E7C 22C0                       		move.l	d0,(a1)+
00003E7E 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003E82                            
00003E82 43F8 F700                  		lea	($FFFFF700).w,a1
00003E86 7000                       		moveq	#0,d0
00003E88 323C 003F                  		move.w	#$3F,d1
00003E8C                            
00003E8C                            Level_ClrVars2:
00003E8C 22C0                       		move.l	d0,(a1)+
00003E8E 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003E92                            
00003E92 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003E96 7000                       		moveq	#0,d0
00003E98 323C 0047                  		move.w	#$47,d1
00003E9C                            
00003E9C                            Level_ClrVars3:
00003E9C 22C0                       		move.l	d0,(a1)+
00003E9E 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003EA2                            
00003EA2 46FC 2700                  		move	#$2700,sr
00003EA6 6100 D666                  		bsr.w	ClearScreen
00003EAA 4DF9 00C0 0004             		lea	($C00004).l,a6
00003EB0 3CBC 8B03                  		move.w	#$8B03,(a6)
00003EB4 3CBC 8230                  		move.w	#$8230,(a6)
00003EB8 3CBC 8407                  		move.w	#$8407,(a6)
00003EBC 3CBC 857C                  		move.w	#$857C,(a6)
00003EC0 3CBC 9001                  		move.w	#$9001,(a6)
00003EC4 3CBC 8004                  		move.w	#$8004,(a6)
00003EC8 3CBC 8720                  		move.w	#$8720,(a6)
00003ECC 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003ED2 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003ED6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003EDC 6600                       		bne.s	Level_LoadPal	; if not, branch
00003EDE 3CBC 8014                  		move.w	#$8014,(a6)
00003EE2 7000                       		moveq	#0,d0
00003EE4 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003EE8 D040                       		add.w	d0,d0
00003EEA 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003EF0 3031 0000                  		move.w	(a1,d0.w),d0
00003EF4 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003EF8 31C0 F648                  		move.w	d0,($FFFFF648).w
00003EFC 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003F00 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003F04 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003F08 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003F0E 6000 0000                  		bra.w	Level_LoadPal
00003F12                            Player_Palette:
00003F12                            		; normal, lz, sbz, blank
00003F12 0003 000F 0010 0000        		dc.w	3,$F,$10,0 ; Sonic 
00003F1A                            		
00003F1A 0016 0017 0018 0000        		dc.w	22,23,24,0 ; Pal_Gronic 
00003F22 0019 0017 0018 0000        		dc.w	25,23,24,0 ; Pal_Anakama 
00003F2A 0003 000F 0010 0000                dc.w	3,$F,$10,0 ; LimitedSonic 
00003F32                            
00003F32                            		; add more player palettes
00003F32                            Level_LoadPal:
00003F32 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003F38 46FC 2300                  		move	#$2300,sr
00003F3C                            
00003F3C 7200                       		moveq	#0,d1
00003F3E 1238 FFE8                  		move.b	(v_character),d1
00003F42 D241                       		add.w	d1,d1
00003F44 D241                       		add.w	d1,d1
00003F46 D241                       		add.w	d1,d1
00003F48 303B 10C8                  		move.w	Player_Palette(pc,d1.w),d0	; load palette
00003F4C                            		
00003F4C 6100 E3E0                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003F50 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003F56 6600                       		bne.s	Level_GetBgm	; if not, branch
00003F58 303B 10BA                  		move.w	Player_Palette+2(pc,d1.w),d0	; load palette
00003F5C 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003F62 6600                       		bne.s	Level_WaterPal	; if not, branch
00003F64 303B 10B0                  		move.w	Player_Palette+4(pc,d1.w),d0	; load palette
00003F68                            
00003F68                            Level_WaterPal:
00003F68 6100 E3DC                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003F6C 4A38 FE30                  		tst.b	($FFFFFE30).w
00003F70 6700                       		beq.s	Level_GetBgm
00003F72 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003F78                            
00003F78                            ; NineKode begins here - How to play different songs on different acts
00003F78                             
00003F78                            Level_GetBgm:
00003F78 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003F7C 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00003F80 7000                       		moveq	#0,d0
00003F82 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003F86                             
00003F86 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003F8C 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003F8E 43F9 0000 3DE2             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00003F94 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003F96                             
00003F96                            Level_GetBgm2:
00003F96 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003F9C 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003F9E 43F9 0000 3DEA             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00003FA4 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003FA6                             
00003FA6                            Level_GetBgm3:
00003FA6 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003FAC 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003FAE 43F9 0000 3DF2             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00003FB4 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003FB6                             
00003FB6                            Level_GetBgm4:
00003FB6 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003FBC 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003FBE 43F9 0000 3DFA             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00003FC4                             
00003FC4                            Level_PlayBgm:
00003FC4 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003FC8 6100 D616                  		bsr.w	PlaySound	; play music
00003FCC 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003FD2                             
00003FD2                            ; NineKode ends here
00003FD2                            
00003FD2                            Level_TtlCard:
00003FD2 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003FD8 6100 ED74                  		bsr.w	DelayProgram
00003FDC 4EB9 0000 0000             		jsr	ObjectsLoad
00003FE2 4EB9 0000 0000             		jsr	BuildSprites
00003FE8 6100 D84C                  		bsr.w	RunPLC_RAM
00003FEC 3038 D108                  		move.w	($FFFFD108).w,d0
00003FF0 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003FF4 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003FF6 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003FFA 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003FFC 4EB9 0000 0000             		jsr	Hud_Base
00004002                            
00004002                            loc_3946:
00004002 7003                       		moveq	#3,d0
00004004 6100 E30C                  		bsr.w	PalLoad1	; load Sonic's pallet line
00004008 6100 0000                  		bsr.w	LevelSizeLoad
0000400C 6100 0000                  		bsr.w	DeformBgLayer
00004010 08F8 0002 F754             		bset	#2,($FFFFF754).w
00004016 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
0000401A 6100 0000                  		bsr.w	LoadTilesFromStart
0000401E 4EB9 0000 0000             		jsr	FloorLog_Unk
00004024 6100 0000                  		bsr.w	ColIndexLoad
00004028 6100 0000                  		bsr.w	LZWaterEffects
0000402C 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00004032 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004036 6B00                       		bmi.s	Level_ChkDebug
00004038 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
0000403E                            
0000403E                            Level_ChkDebug:
0000403E 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004042 6700                       		beq.s	Level_ChkWater	; if not, branch
00004044 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
0000404A 6700                       		beq.s	Level_ChkWater	; if not, branch
0000404C 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004052                            
00004052                            Level_ChkWater:
00004052 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00004058 31FC 0000 F604             		move.w	#0,($FFFFF604).w
0000405E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00004064 6600                       		bne.s	Level_LoadObj	; if not, branch
00004066 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
0000406C 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00004072 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00004078 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
0000407E                            
0000407E                            Level_LoadObj:
0000407E 4EB9 0000 0000             		jsr	ObjPosLoad
00004084 4EB9 0000 0000             		jsr	ObjectsLoad
0000408A 4EB9 0000 0000             		jsr	BuildSprites
00004090 7000                       		moveq	#0,d0
00004092 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00004096 6600                       		bne.s	loc_39E8	; if yes, branch
00004098 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000409C 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000040A0 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
000040A4                            
000040A4                            loc_39E8:
000040A4 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
000040A8 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
000040AC 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
000040B0 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
000040B4                            		; move.b	d0,($FFFFFE2F).w
000040B4 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
000040BA 31C0 FE08                  		move.w	d0,($FFFFFE08).w
000040BE 31C0 FE02                  		move.w	d0,($FFFFFE02).w
000040C2 31C0 FE04                  		move.w	d0,($FFFFFE04).w
000040C6 6100 0000                  		bsr.w	OscillateNumInit
000040CA 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
000040D0 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
000040D6 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
000040DC 31FC 0000 F790             		move.w	#0,($FFFFF790).w
000040E2 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
000040E8 7000                       		moveq	#0,d0
000040EA 1038 FE10                  		move.b	($FFFFFE10).w,d0
000040EE E548                       		lsl.w	#2,d0
000040F0 2271 0000                  		movea.l	(a1,d0.w),a1
000040F4 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000040F8 6A00                       		bpl.s	Level_Demo	; if yes, branch
000040FA 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00004100 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00004104 5340                       		subq.w	#1,d0
00004106 E548                       		lsl.w	#2,d0
00004108 2271 0000                  		movea.l	(a1,d0.w),a1
0000410C                            
0000410C                            Level_Demo:
0000410C 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00004112 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00004116 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
0000411C 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004120 6A00                       		bpl.s	Level_ChkWaterPal
00004122 31FC 021C F614             		move.w	#540,($FFFFF614).w
00004128 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
0000412E 6600                       		bne.s	Level_ChkWaterPal
00004130 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00004136                            
00004136                            Level_ChkWaterPal:
00004136 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
0000413C 6600                       		bne.s	Level_Delay	; if not, branch
0000413E 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00004140 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00004146 6600                       		bne.s	Level_WaterPal2	; if not, branch
00004148 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
0000414A                            
0000414A                            Level_WaterPal2:
0000414A 6100 E216                  		bsr.w	PalLoad4_Water
0000414E                            
0000414E                            Level_Delay:
0000414E 323C 0003                  		move.w	#3,d1
00004152                            
00004152                            Level_DelayLoop:
00004152 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004158 6100 EBF4                  		bsr.w	DelayProgram
0000415C 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00004160                            
00004160 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00004166 6100 DE5C                  		bsr.w	Pal_FadeTo2
0000416A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000416E 6B00                       		bmi.s	Level_ClrCardArt
00004170 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00004174 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00004178 5838 D124                  		addq.b	#4,($FFFFD124).w
0000417C 5838 D164                  		addq.b	#4,($FFFFD164).w
00004180 6000                       		bra.s	Level_StartGame
00004182                            ; ===========================================================================
00004182                            
00004182                            Level_ClrCardArt:
00004182 7002                       		moveq	#2,d0
00004184 4EB9 0000 17CA             		jsr	(LoadPLC).l	; load explosion patterns
0000418A 7000                       		moveq	#0,d0
0000418C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004190 0640 0015                  		addi.w	#$15,d0
00004194 4EB9 0000 17CA             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
0000419A                            
0000419A                            Level_StartGame:
0000419A 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
000041A0                            
000041A0                            ; ---------------------------------------------------------------------------
000041A0                            ; Main level loop (when	all title card and loading sequences are finished)
000041A0                            ; ---------------------------------------------------------------------------
000041A0                            
000041A0                            Level_MainLoop:
000041A0 6100 D450                  		bsr.w	PauseGame
000041A4 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
000041AA 6100 EBA2                  		bsr.w	DelayProgram
000041AE 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
000041B2 6100 0000                  		bsr.w	MoveSonicInDemo
000041B6 6100 0000                  		bsr.w	LZWaterEffects
000041BA 4EB9 0000 0000             		jsr	ObjectsLoad
000041C0 4A78 FE08                  		tst.w	($FFFFFE08).w
000041C4 6600                       		bne.s	loc_3B10
000041C6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000041CC 6400                       		bcc.s	loc_3B14
000041CE                            
000041CE                            loc_3B10:
000041CE 6100 0000                  		bsr.w	DeformBgLayer
000041D2                            
000041D2                            loc_3B14:
000041D2 4EB9 0000 0000             		jsr	BuildSprites
000041D8 4EB9 0000 0000             		jsr	ObjPosLoad
000041DE 6100 D9A6                  		bsr.w	PalCycle_Load
000041E2 6100 D652                  		bsr.w	RunPLC_RAM
000041E6 6100 0000                  		bsr.w	OscillateNumDo
000041EA 6100 0000                  		bsr.w	ChangeRingFrame
000041EE 6100 0000                  		bsr.w	SignpostArtLoad
000041F2 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000041F8 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
000041FA 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
000041FE 6600 FC02                  		bne.w	Level		; if yes, branch
00004202 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00004208 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
0000420C 4E75                       		rts	
0000420E                            ; ===========================================================================
0000420E                            
0000420E                            Level_ChkDemo:				; XREF: Level_MainLoop
0000420E 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00004212 6600                       		bne.s	Level_EndDemo	; if yes, branch
00004214 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004218 6700                       		beq.s	Level_EndDemo	; if not, branch
0000421A 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00004220 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00004224 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000422A 4E75                       		rts	
0000422C                            ; ===========================================================================
0000422C                            
0000422C                            Level_EndDemo:				; XREF: Level_ChkDemo
0000422C 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00004232 6600                       		bne.s	loc_3B88	; if not, branch
00004234 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000423A 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000423E 6A00                       		bpl.s	loc_3B88	; if yes, branch
00004240 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00004246                            
00004246                            loc_3B88:
00004246 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
0000424C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004252 4278 F794                  		clr.w	($FFFFF794).w
00004256                            
00004256                            loc_3B98:
00004256 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000425C 6100 EAF0                  		bsr.w	DelayProgram
00004260 6100 0000                  		bsr.w	MoveSonicInDemo
00004264 4EB9 0000 0000             		jsr	ObjectsLoad
0000426A 4EB9 0000 0000             		jsr	BuildSprites
00004270 4EB9 0000 0000             		jsr	ObjPosLoad
00004276 5378 F794                  		subq.w	#1,($FFFFF794).w
0000427A 6A00                       		bpl.s	loc_3BC8
0000427C 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004282 6100 DE04                  		bsr.w	Pal_FadeOut
00004286                            
00004286                            loc_3BC8:
00004286 4A78 F614                  		tst.w	($FFFFF614).w
0000428A 66CA                       		bne.s	loc_3B98
0000428C 4E75                       		rts	
0000428E                            ; ===========================================================================
0000428E                            ; ---------------------------------------------------------------------------
0000428E                            ; Subroutine to	do special water effects in Labyrinth Zone
0000428E                            ; ---------------------------------------------------------------------------
0000428E                            
0000428E                            LZWaterEffects:				; XREF: Level
0000428E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00004294 6600                       		bne.s	locret_3C28	; if not, branch
00004296 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000429C 6400                       		bcc.s	LZMoveWater
0000429E 6100 0000                  		bsr.w	LZWindTunnels
000042A2 6100 0000                  		bsr.w	LZWaterSlides
000042A6 6100 0000                  		bsr.w	LZDynamicWater
000042AA                            
000042AA                            LZMoveWater:
000042AA 4238 F64E                  		clr.b	($FFFFF64E).w
000042AE 7000                       		moveq	#0,d0
000042B0 1038 FE60                  		move.b	($FFFFFE60).w,d0
000042B4 E248                       		lsr.w	#1,d0
000042B6 D078 F648                  		add.w	($FFFFF648).w,d0
000042BA 31C0 F646                  		move.w	d0,($FFFFF646).w
000042BE 3038 F646                  		move.w	($FFFFF646).w,d0
000042C2 9078 F704                  		sub.w	($FFFFF704).w,d0
000042C6 6400                       		bcc.s	loc_3C1A
000042C8 4A40                       		tst.w	d0
000042CA 6A00                       		bpl.s	loc_3C1A
000042CC 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
000042D2 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
000042D8                            
000042D8                            loc_3C1A:
000042D8 0C40 00DF                  		cmpi.w	#$DF,d0
000042DC 6500                       		bcs.s	loc_3C24
000042DE 303C 00DF                  		move.w	#$DF,d0
000042E2                            
000042E2                            loc_3C24:
000042E2 11C0 F625                  		move.b	d0,($FFFFF625).w
000042E6                            
000042E6                            locret_3C28:
000042E6 4E75                       		rts	
000042E8                            ; ===========================================================================
000042E8                            ; ---------------------------------------------------------------------------
000042E8                            ; Labyrinth default water heights
000042E8                            ; ---------------------------------------------------------------------------
000042E8                            WaterHeight:	incbin	misc\lz_heigh.bin
000042F0                            		even
000042F0                            ; ===========================================================================
000042F0                            
000042F0                            ; ---------------------------------------------------------------------------
000042F0                            ; Labyrinth dynamic water routines
000042F0                            ; ---------------------------------------------------------------------------
000042F0                            
000042F0                            LZDynamicWater:				; XREF: LZWaterEffects
000042F0 7000                       		moveq	#0,d0
000042F2 1038 FE11                  		move.b	($FFFFFE11).w,d0
000042F6 D040                       		add.w	d0,d0
000042F8 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
000042FC 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00004300 7200                       		moveq	#0,d1
00004302 1238 F64C                  		move.b	($FFFFF64C).w,d1
00004306 3038 F64A                  		move.w	($FFFFF64A).w,d0
0000430A 9078 F648                  		sub.w	($FFFFF648).w,d0
0000430E 6700                       		beq.s	locret_3C5A
00004310 6400                       		bcc.s	loc_3C56
00004312 4441                       		neg.w	d1
00004314                            
00004314                            loc_3C56:
00004314 D378 F648                  		add.w	d1,($FFFFF648).w
00004318                            
00004318                            locret_3C5A:
00004318 4E75                       		rts	
0000431A                            ; ===========================================================================
0000431A 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
0000431C 0000                       		dc.w DynWater_LZ2-DynWater_Index
0000431E 0000                       		dc.w DynWater_LZ3-DynWater_Index
00004320 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00004322                            ; ===========================================================================
00004322                            
00004322                            DynWater_LZ1:				; XREF: DynWater_Index
00004322 3038 F700                  		move.w	($FFFFF700).w,d0
00004326 1438 F64D                  		move.b	($FFFFF64D).w,d2
0000432A 6600                       		bne.s	loc_3CD0
0000432C 323C 00B8                  		move.w	#$B8,d1
00004330 0C40 0600                  		cmpi.w	#$600,d0
00004334 6500                       		bcs.s	loc_3CB4
00004336 323C 0108                  		move.w	#$108,d1
0000433A 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00004340 6500                       		bcs.s	loc_3CBA
00004342 0C40 0C00                  		cmpi.w	#$C00,d0
00004346 6500                       		bcs.s	loc_3CB4
00004348 323C 0318                  		move.w	#$318,d1
0000434C 0C40 1080                  		cmpi.w	#$1080,d0
00004350 6500                       		bcs.s	loc_3CB4
00004352 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00004358 323C 05C8                  		move.w	#$5C8,d1
0000435C 0C40 1380                  		cmpi.w	#$1380,d0
00004360 6500                       		bcs.s	loc_3CB4
00004362 323C 03A8                  		move.w	#$3A8,d1
00004366 B278 F648                  		cmp.w	($FFFFF648).w,d1
0000436A 6600                       		bne.s	loc_3CB4
0000436C 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004372                            
00004372                            loc_3CB4:
00004372 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004376 4E75                       		rts	
00004378                            ; ===========================================================================
00004378                            
00004378                            loc_3CBA:				; XREF: DynWater_LZ1
00004378 0C40 0C80                  		cmpi.w	#$C80,d0
0000437C 65F4                       		bcs.s	loc_3CB4
0000437E 323C 00E8                  		move.w	#$E8,d1
00004382 0C40 1500                  		cmpi.w	#$1500,d0
00004386 65EA                       		bcs.s	loc_3CB4
00004388 323C 0108                  		move.w	#$108,d1
0000438C 60E4                       		bra.s	loc_3CB4
0000438E                            ; ===========================================================================
0000438E                            
0000438E                            loc_3CD0:				; XREF: DynWater_LZ1
0000438E 5302                       		subq.b	#1,d2
00004390 6600                       		bne.s	locret_3CF4
00004392 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00004398 6400                       		bcc.s	locret_3CF4
0000439A 323C 03A8                  		move.w	#$3A8,d1
0000439E 0C40 1300                  		cmpi.w	#$1300,d0
000043A2 6500                       		bcs.s	loc_3CF0
000043A4 323C 0108                  		move.w	#$108,d1
000043A8 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
000043AE                            
000043AE                            loc_3CF0:
000043AE 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000043B2                            
000043B2                            locret_3CF4:
000043B2 4E75                       		rts	
000043B4                            ; ===========================================================================
000043B4                            
000043B4                            DynWater_LZ2:				; XREF: DynWater_Index
000043B4 3038 F700                  		move.w	($FFFFF700).w,d0
000043B8 323C 0328                  		move.w	#$328,d1
000043BC 0C40 0500                  		cmpi.w	#$500,d0
000043C0 6500                       		bcs.s	loc_3D12
000043C2 323C 03C8                  		move.w	#$3C8,d1
000043C6 0C40 0B00                  		cmpi.w	#$B00,d0
000043CA 6500                       		bcs.s	loc_3D12
000043CC 323C 0428                  		move.w	#$428,d1
000043D0                            
000043D0                            loc_3D12:
000043D0 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000043D4 4E75                       		rts	
000043D6                            ; ===========================================================================
000043D6                            
000043D6                            DynWater_LZ3:				; XREF: DynWater_Index
000043D6 3038 F700                  		move.w	($FFFFF700).w,d0
000043DA 1438 F64D                  		move.b	($FFFFF64D).w,d2
000043DE 6600                       		bne.s	loc_3D5E
000043E0 323C 0500                  		move.w	#$500,d1
000043E4 0C40 0600                  		cmpi.w	#$600,d0
000043E8 6500                       		bcs.s	loc_3D54
000043EA 0C40 1B00                  		cmpi.w	#$1B00,d0
000043EE 6500                       		bcs.s	loc_3D54
000043F0 323C 0850                  		move.w	#$850,d1
000043F4                            
000043F4                            loc_3D54:
000043F4 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000043F8 31C1 F648                  		move.w	d1,($FFFFF648).w
000043FC 4E75                       		rts	
000043FE                            ; ===========================================================================
000043FE                            
000043FE                            loc_3D5E:				; XREF: DynWater_LZ3
000043FE 5302                       		subq.b	#1,d2
00004400 6600                       		bne.s	loc_3DA8
00004402 323C 04C8                  		move.w	#$4C8,d1
00004406 0C40 0770                  		cmpi.w	#$770,d0
0000440A 6500                       		bcs.s	loc_3DA2
0000440C 323C 0308                  		move.w	#$308,d1
00004410 0C40 1400                  		cmpi.w	#$1400,d0
00004414 6500                       		bcs.s	loc_3DA2
00004416 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
0000441C 6700                       		beq.s	loc_3D8E
0000441E 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00004424 6400                       		bcc.s	loc_3D8E
00004426 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
0000442C 6400                       		bcc.s	loc_3DA2
0000442E                            
0000442E                            loc_3D8E:
0000442E 323C 0508                  		move.w	#$508,d1
00004432 31C1 F648                  		move.w	d1,($FFFFF648).w
00004436 0C40 1770                  		cmpi.w	#$1770,d0
0000443A 6500                       		bcs.s	loc_3DA2
0000443C 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004442                            
00004442                            loc_3DA2:
00004442 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004446 4E75                       		rts	
00004448                            ; ===========================================================================
00004448                            
00004448                            loc_3DA8:
00004448 5302                       		subq.b	#1,d2
0000444A 6600                       		bne.s	loc_3DD2
0000444C 323C 0508                  		move.w	#$508,d1
00004450 0C40 1860                  		cmpi.w	#$1860,d0
00004454 6500                       		bcs.s	loc_3DCC
00004456 323C 0188                  		move.w	#$188,d1
0000445A 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000445E 6400                       		bcc.s	loc_3DC6
00004460 B278 F648                  		cmp.w	($FFFFF648).w,d1
00004464 6600                       		bne.s	loc_3DCC
00004466                            
00004466                            loc_3DC6:
00004466 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
0000446C                            
0000446C                            loc_3DCC:
0000446C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004470 4E75                       		rts	
00004472                            ; ===========================================================================
00004472                            
00004472                            loc_3DD2:
00004472 5302                       		subq.b	#1,d2
00004474 6600                       		bne.s	loc_3E0E
00004476 323C 0188                  		move.w	#$188,d1
0000447A 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000447E 6500                       		bcs.s	loc_3E04
00004480 323C 0900                  		move.w	#$900,d1
00004484 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004488 6500                       		bcs.s	loc_3E04
0000448A 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00004490 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00004496 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
0000449C 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
000044A2 4E75                       		rts	
000044A4                            ; ===========================================================================
000044A4                            
000044A4                            loc_3E04:
000044A4 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000044A8 31C1 F648                  		move.w	d1,($FFFFF648).w
000044AC 4E75                       		rts	
000044AE                            ; ===========================================================================
000044AE                            
000044AE                            loc_3E0E:
000044AE 0C40 1E00                  		cmpi.w	#$1E00,d0
000044B2 6500                       		bcs.s	locret_3E1A
000044B4 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
000044BA                            
000044BA                            locret_3E1A:
000044BA 4E75                       		rts	
000044BC                            ; ===========================================================================
000044BC                            
000044BC                            DynWater_SBZ3:				; XREF: DynWater_Index
000044BC 323C 0228                  		move.w	#$228,d1
000044C0 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
000044C6 6500                       		bcs.s	loc_3E2C
000044C8 323C 04C8                  		move.w	#$4C8,d1
000044CC                            
000044CC                            loc_3E2C:
000044CC 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000044D0 4E75                       		rts
000044D2                            
000044D2                            ; ---------------------------------------------------------------------------
000044D2                            ; Labyrinth Zone "wind tunnels"	subroutine
000044D2                            ; ---------------------------------------------------------------------------
000044D2                            
000044D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000044D2                            
000044D2                            
000044D2                            LZWindTunnels:				; XREF: LZWaterEffects
000044D2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000044D6 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
000044DA 45F9 0000 0000             		lea	(LZWind_Data).l,a2
000044E0 7000                       		moveq	#0,d0
000044E2 1038 FE11                  		move.b	($FFFFFE11).w,d0
000044E6 E748                       		lsl.w	#3,d0
000044E8 D4C0                       		adda.w	d0,a2
000044EA 7200                       		moveq	#0,d1
000044EC 4A38 FE11                  		tst.b	($FFFFFE11).w
000044F0 6600                       		bne.s	loc_3E56
000044F2 7201                       		moveq	#1,d1
000044F4 514A                       		subq.w	#8,a2
000044F6                            
000044F6                            loc_3E56:
000044F6 43F8 D000                  		lea	($FFFFD000).w,a1
000044FA                            
000044FA                            LZWind_Loop:
000044FA 3029 0008                  		move.w	8(a1),d0
000044FE B052                       		cmp.w	(a2),d0
00004500 6500 0000                  		bcs.w	loc_3EF4
00004504 B06A 0004                  		cmp.w	4(a2),d0
00004508 6400 0000                  		bcc.w	loc_3EF4
0000450C 3429 000C                  		move.w	$C(a1),d2
00004510 B46A 0002                  		cmp.w	2(a2),d2
00004514 6500                       		bcs.s	loc_3EF4
00004516 B46A 0006                  		cmp.w	6(a2),d2
0000451A 6400                       		bcc.s	loc_3EF4
0000451C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004520 0200 003F                  		andi.b	#$3F,d0
00004524 6600                       		bne.s	loc_3E90
00004526 303C 00D0                  		move.w	#$D0,d0
0000452A 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play rushing water sound
00004530                            
00004530                            loc_3E90:
00004530 4A38 F7C9                  		tst.b	($FFFFF7C9).w
00004534 6600 0000                  		bne.w	locret_3F0A
00004538 0C29 0004 0024             		cmpi.b	#4,$24(a1)
0000453E 6400                       		bcc.s	loc_3F06
00004540 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
00004546 0440 0080                  		subi.w	#$80,d0
0000454A B052                       		cmp.w	(a2),d0
0000454C 6400                       		bcc.s	LZWind_Move
0000454E 7002                       		moveq	#2,d0
00004550 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00004556 6600                       		bne.s	loc_3EBA
00004558 4440                       		neg.w	d0
0000455A                            
0000455A                            loc_3EBA:
0000455A D169 000C                  		add.w	d0,$C(a1)
0000455E                            
0000455E                            LZWind_Move:
0000455E 5869 0008                  		addq.w	#4,8(a1)
00004562 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00004568 337C 0000 0012             		move.w	#0,$12(a1)
0000456E 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00004574 08E9 0001 0022             		bset	#1,$22(a1)
0000457A 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00004580 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00004582 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00004586                            
00004586                            LZWind_MoveDown:
00004586 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
0000458C 6700                       		beq.s	locret_3EF2	; if not, branch
0000458E 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00004592                            
00004592                            locret_3EF2:
00004592 4E75                       		rts	
00004594                            ; ===========================================================================
00004594                            
00004594                            loc_3EF4:				; XREF: LZWindTunnels
00004594 504A                       		addq.w	#8,a2
00004596 51C9 FF62                  		dbf	d1,LZWind_Loop
0000459A 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0000459E 6700                       		beq.s	locret_3F0A
000045A0 137C 0000 001C             		move.b	#0,$1C(a1)
000045A6                            
000045A6                            loc_3F06:
000045A6 4238 F7C7                  		clr.b	($FFFFF7C7).w
000045AA                            
000045AA                            locret_3F0A:
000045AA 4E75                       		rts	
000045AC                            ; End of function LZWindTunnels
000045AC                            
000045AC                            ; ===========================================================================
000045AC 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
000045B4 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
000045C6 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
000045D4                            					; XREF: LZWindTunnels
000045D4                            		even
000045D4                            
000045D4                            ; ---------------------------------------------------------------------------
000045D4                            ; Labyrinth Zone water slide subroutine
000045D4                            ; ---------------------------------------------------------------------------
000045D4                            
000045D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045D4                            
000045D4                            
000045D4                            LZWaterSlides:				; XREF: LZWaterEffects
000045D4 43F8 D000                  		lea	($FFFFD000).w,a1
000045D8 0829 0001 0022             		btst	#1,$22(a1)
000045DE 6600                       		bne.s	loc_3F6A
000045E0 3029 000C                  		move.w	$C(a1),d0
000045E4 E248                       		lsr.w	#1,d0
000045E6 0240 0380                  		andi.w	#$380,d0
000045EA 1229 0008                  		move.b	8(a1),d1
000045EE 0241 007F                  		andi.w	#$7F,d1
000045F2 D041                       		add.w	d1,d0
000045F4 45F8 A400                  		lea	($FFFFA400).w,a2
000045F8 1032 0000                  		move.b	(a2,d0.w),d0
000045FC 45FA 0000                  		lea	byte_3FCF(pc),a2
00004600 7206                       		moveq	#6,d1
00004602                            
00004602                            loc_3F62:
00004602 B022                       		cmp.b	-(a2),d0
00004604 57C9 FFFC                  		dbeq	d1,loc_3F62
00004608 6700                       		beq.s	LZSlide_Move
0000460A                            
0000460A                            loc_3F6A:
0000460A 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0000460E 6700                       		beq.s	locret_3F7A
00004610 337C 0005 003E             		move.w	#5,$3E(a1)
00004616 4238 F7CA                  		clr.b	($FFFFF7CA).w
0000461A                            
0000461A                            locret_3F7A:
0000461A 4E75                       		rts	
0000461C                            ; ===========================================================================
0000461C                            
0000461C                            LZSlide_Move:				; XREF: LZWaterSlides
0000461C 0C41 0003                  		cmpi.w	#3,d1
00004620 6400                       		bcc.s	loc_3F84
00004622 4E71                       		nop	
00004624                            
00004624                            loc_3F84:
00004624 08A9 0000 0022             		bclr	#0,$22(a1)
0000462A 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
0000462E 1340 0014                  		move.b	d0,$14(a1)
00004632 6A00                       		bpl.s	loc_3F9A
00004634 08E9 0000 0022             		bset	#0,$22(a1)
0000463A                            
0000463A                            loc_3F9A:
0000463A 4229 0015                  		clr.b	$15(a1)
0000463E 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
00004644 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
0000464A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000464E 0200 001F                  		andi.b	#$1F,d0
00004652 6600                       		bne.s	locret_3FBE
00004654 303C 00D0                  		move.w	#$D0,d0
00004658 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play water sound
0000465E                            
0000465E                            locret_3FBE:
0000465E 4E75                       		rts	
00004660                            ; End of function LZWaterSlides
00004660                            
00004660                            ; ===========================================================================
00004660 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
0000466F 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00004670                            		even
00004670                            
00004670                            ; ---------------------------------------------------------------------------
00004670                            ; Subroutine to	move Sonic in demo mode
00004670                            ; ---------------------------------------------------------------------------
00004670                            
00004670                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004670                            
00004670                            
00004670                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00004670 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004674 6600                       		bne.s	MoveDemo_On	; if yes, branch
00004676 4E75                       		rts	
00004678                            ; ===========================================================================
00004678                            
00004678                            ; This is an unused subroutine for recording a demo
00004678                            
00004678                            MoveDemo_Record:
00004678 43F9 0008 0000             		lea	($80000).l,a1
0000467E 3038 F790                  		move.w	($FFFFF790).w,d0
00004682 D2C0                       		adda.w	d0,a1
00004684 1038 F604                  		move.b	($FFFFF604).w,d0
00004688 B011                       		cmp.b	(a1),d0
0000468A 6600                       		bne.s	loc_3FFA
0000468C 5229 0001                  		addq.b	#1,1(a1)
00004690 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004696 6700                       		beq.s	loc_3FFA
00004698 4E75                       		rts	
0000469A                            ; ===========================================================================
0000469A                            
0000469A                            loc_3FFA:				; XREF: MoveDemo_Record
0000469A 1340 0002                  		move.b	d0,2(a1)
0000469E 137C 0000 0003             		move.b	#0,3(a1)
000046A4 5478 F790                  		addq.w	#2,($FFFFF790).w
000046A8 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
000046AE 4E75                       		rts	
000046B0                            ; ===========================================================================
000046B0                            
000046B0                            MoveDemo_On:				; XREF: MoveSonicInDemo
000046B0 4A38 F604                  		tst.b	($FFFFF604).w
000046B4 6A00                       		bpl.s	loc_4022
000046B6 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000046BA 6B00                       		bmi.s	loc_4022
000046BC 11FC 0004 F600             		move.b	#4,($FFFFF600).w
000046C2                            
000046C2                            loc_4022:
000046C2 43F9 0000 0000             		lea	(Demo_Index).l,a1
000046C8 7000                       		moveq	#0,d0
000046CA 1038 FE10                  		move.b	($FFFFFE10).w,d0
000046CE 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
000046D4 6600                       		bne.s	loc_4038
000046D6 7006                       		moveq	#6,d0
000046D8                            
000046D8                            loc_4038:
000046D8 E548                       		lsl.w	#2,d0
000046DA 2271 0000                  		movea.l	(a1,d0.w),a1
000046DE 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000046E2 6A00                       		bpl.s	loc_4056
000046E4 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
000046EA 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000046EE 5340                       		subq.w	#1,d0
000046F0 E548                       		lsl.w	#2,d0
000046F2 2271 0000                  		movea.l	(a1,d0.w),a1
000046F6                            
000046F6                            loc_4056:
000046F6 3038 F790                  		move.w	($FFFFF790).w,d0
000046FA D2C0                       		adda.w	d0,a1
000046FC 1011                       		move.b	(a1),d0
000046FE 41F8 F604                  		lea	($FFFFF604).w,a0
00004702 1200                       		move.b	d0,d1
00004704 1410                       		move.b	(a0),d2
00004706 B500                       		eor.b	d2,d0
00004708 10C1                       		move.b	d1,(a0)+
0000470A C001                       		and.b	d1,d0
0000470C 10C0                       		move.b	d0,(a0)+
0000470E 5338 F792                  		subq.b	#1,($FFFFF792).w
00004712 6400                       		bcc.s	locret_407E
00004714 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
0000471A 5478 F790                  		addq.w	#2,($FFFFF790).w
0000471E                            
0000471E                            locret_407E:
0000471E 4E75                       		rts	
00004720                            ; End of function MoveSonicInDemo
00004720                            
00004720                            ; ===========================================================================
00004720                            ; ---------------------------------------------------------------------------
00004720                            ; Demo sequence	pointers
00004720                            ; ---------------------------------------------------------------------------
00004720                            Demo_Index:
00004720                            	include "_inc\Demo pointers for intro.asm"
00004720                            ; ---------------------------------------------------------------------------
00004720                            ; Demo sequence	pointers
00004720                            ; ---------------------------------------------------------------------------
00004720 0000 0000                  	dc.l Demo_GHZ
00004724 0000 0000                  	dc.l Demo_GHZ
00004728 0000 0000                  	dc.l Demo_MZ
0000472C 0000 0000                  	dc.l Demo_MZ
00004730 0000 0000                  	dc.l Demo_SYZ
00004734 0000 0000                  	dc.l Demo_SYZ
00004738 0000 0000                  	dc.l Demo_SS
0000473C 0000 0000                  	dc.l Demo_SS
0000473C 0000 0000                  	dc.l Demo_SS
00004740                            
00004740                            Demo_EndIndex:
00004740                            	include "_inc\Demo pointers for ending.asm"
00004740                            ; ---------------------------------------------------------------------------
00004740                            ; Demo (ending) sequence pointers
00004740                            ; ---------------------------------------------------------------------------
00004740 0000 0000                  	dc.l Demo_EndGHZ1
00004744 0000 0000                  	dc.l Demo_EndMZ
00004748 0000 0000                  	dc.l Demo_EndSYZ
0000474C 0000 0000                  	dc.l Demo_EndLZ
00004750 0000 0000                  	dc.l Demo_EndSLZ
00004754 0000 0000                  	dc.l Demo_EndSBZ1
00004758 0000 0000                  	dc.l Demo_EndSBZ2
0000475C 0000 0000                  	dc.l Demo_EndGHZ2
0000475C 0000 0000                  	dc.l Demo_EndGHZ2
00004760                            
00004760 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00004770 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00004780 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004790                            		even
00004790                            
00004790                            ; ---------------------------------------------------------------------------
00004790                            ; Collision index loading subroutine
00004790                            ; ---------------------------------------------------------------------------
00004790                            
00004790                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004790                            
00004790                            
00004790                            ColIndexLoad:				; XREF: Level
00004790 7000                       		moveq	#0,d0
00004792 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004796 E548                       		lsl.w	#2,d0
00004798 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
0000479E 4E75                       		rts	
000047A0                            ; End of function ColIndexLoad
000047A0                            
000047A0                            ; ===========================================================================
000047A0                            ; ---------------------------------------------------------------------------
000047A0                            ; Collision index pointers
000047A0                            ; ---------------------------------------------------------------------------
000047A0                            ColPointers:
000047A0                            	include "_inc\Collision index pointers.asm"
000047A0                            ; ---------------------------------------------------------------------------
000047A0                            ; Collision index pointers
000047A0                            ; ---------------------------------------------------------------------------
000047A0 0000 0000                  	dc.l Col_GHZ
000047A4 0000 0000                  	dc.l Col_LZ
000047A8 0000 0000                  	dc.l Col_MZ
000047AC 0000 0000                  	dc.l Col_SLZ
000047B0 0000 0000                  	dc.l Col_SYZ
000047B4 0000 0000                  	dc.l Col_SBZ
000047B8 0000 0000                  	dc.l Col_GHZ ; this is the ending just so it does not fuck up
000047BC 0000 0000                  	dc.l Col_BHZ
000047BC 0000 0000                  	dc.l Col_BHZ
000047C0                            
000047C0                            ; ---------------------------------------------------------------------------
000047C0                            ; Oscillating number subroutine
000047C0                            ; ---------------------------------------------------------------------------
000047C0                            
000047C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000047C0                            
000047C0                            
000047C0                            OscillateNumInit:			; XREF: Level
000047C0 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000047C4 45F9 0000 0000             		lea	(Osc_Data).l,a2
000047CA 7220                       		moveq	#$20,d1
000047CC                            
000047CC                            Osc_Loop:
000047CC 32DA                       		move.w	(a2)+,(a1)+
000047CE 51C9 FFFC                  		dbf	d1,Osc_Loop
000047D2 4E75                       		rts	
000047D4                            ; End of function OscillateNumInit
000047D4                            
000047D4                            ; ===========================================================================
000047D4 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
000047D8 0000 0080                  		dc.w 0,	$80
000047DC 0000 0080                  		dc.w 0,	$80
000047E0 0000 0080                  		dc.w 0,	$80
000047E4 0000 0080                  		dc.w 0,	$80
000047E8 0000 0080                  		dc.w 0,	$80
000047EC 0000 0080                  		dc.w 0,	$80
000047F0 0000 0080                  		dc.w 0,	$80
000047F4 0000 0080                  		dc.w 0,	$80
000047F8 0000 50F0                  		dc.w 0,	$50F0
000047FC 011E 2080                  		dc.w $11E, $2080
00004800 00B4 3080                  		dc.w $B4, $3080
00004804 010E 5080                  		dc.w $10E, $5080
00004808 01C2 7080                  		dc.w $1C2, $7080
0000480C 0276 0080                  		dc.w $276, $80
00004810 0000 0080                  		dc.w 0,	$80
00004814 0000                       		dc.w 0
00004816                            		even
00004816                            
00004816                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004816                            
00004816                            
00004816                            OscillateNumDo:				; XREF: Level
00004816 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000481C 6400                       		bcc.s	locret_41C4
0000481E 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004822 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00004828 3619                       		move.w	(a1)+,d3
0000482A 720F                       		moveq	#$F,d1
0000482C                            
0000482C                            loc_4184:
0000482C 341A                       		move.w	(a2)+,d2
0000482E 381A                       		move.w	(a2)+,d4
00004830 0303                       		btst	d1,d3
00004832 6600                       		bne.s	loc_41A4
00004834 3029 0002                  		move.w	2(a1),d0
00004838 D042                       		add.w	d2,d0
0000483A 3340 0002                  		move.w	d0,2(a1)
0000483E D151                       		add.w	d0,0(a1)
00004840 B811                       		cmp.b	0(a1),d4
00004842 6200                       		bhi.s	loc_41BA
00004844 03C3                       		bset	d1,d3
00004846 6000                       		bra.s	loc_41BA
00004848                            ; ===========================================================================
00004848                            
00004848                            loc_41A4:				; XREF: OscillateNumDo
00004848 3029 0002                  		move.w	2(a1),d0
0000484C 9042                       		sub.w	d2,d0
0000484E 3340 0002                  		move.w	d0,2(a1)
00004852 D151                       		add.w	d0,0(a1)
00004854 B811                       		cmp.b	0(a1),d4
00004856 6300                       		bls.s	loc_41BA
00004858 0383                       		bclr	d1,d3
0000485A                            
0000485A                            loc_41BA:
0000485A 5849                       		addq.w	#4,a1
0000485C 51C9 FFCE                  		dbf	d1,loc_4184
00004860 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00004864                            
00004864                            locret_41C4:
00004864 4E75                       		rts	
00004866                            ; End of function OscillateNumDo
00004866                            
00004866                            ; ===========================================================================
00004866 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
0000486A 0002 0018                  		dc.w 2,	$18
0000486E 0002 0020                  		dc.w 2,	$20
00004872 0002 0030                  		dc.w 2,	$30
00004876 0004 0020                  		dc.w 4,	$20
0000487A 0008 0008                  		dc.w 8,	8
0000487E 0008 0040                  		dc.w 8,	$40
00004882 0004 0040                  		dc.w 4,	$40
00004886 0002 0050                  		dc.w 2,	$50
0000488A 0002 0050                  		dc.w 2,	$50
0000488E 0002 0020                  		dc.w 2,	$20
00004892 0003 0030                  		dc.w 3,	$30
00004896 0005 0050                  		dc.w 5,	$50
0000489A 0007 0070                  		dc.w 7,	$70
0000489E 0002 0010                  		dc.w 2,	$10
000048A2 0002 0010                  		dc.w 2,	$10
000048A6                            		even
000048A6                            
000048A6                            ; ---------------------------------------------------------------------------
000048A6                            ; Subroutine to	change object animation	variables (rings, giant	rings)
000048A6                            ; ---------------------------------------------------------------------------
000048A6                            
000048A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000048A6                            
000048A6                            
000048A6                            ChangeRingFrame:			; XREF: Level
000048A6 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
000048AA 6A00                       		bpl.s	loc_421C
000048AC 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
000048B2 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
000048B6 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
000048BC                            
000048BC                            loc_421C:
000048BC 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
000048C0 6A00                       		bpl.s	loc_4232
000048C2 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
000048C8 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
000048CC 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
000048D2                            
000048D2                            loc_4232:
000048D2 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
000048D6 6A00                       		bpl.s	loc_4250
000048D8 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
000048DE 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
000048E2 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
000048E8 6500                       		bcs.s	loc_4250
000048EA 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
000048F0                            
000048F0                            loc_4250:
000048F0 4A38 FEC6                  		tst.b	($FFFFFEC6).w
000048F4 6700                       		beq.s	locret_4272
000048F6 7000                       		moveq	#0,d0
000048F8 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
000048FC D078 FEC8                  		add.w	($FFFFFEC8).w,d0
00004900 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
00004904 EF58                       		rol.w	#7,d0
00004906 0240 0003                  		andi.w	#3,d0
0000490A 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
0000490E 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
00004912                            
00004912                            locret_4272:
00004912 4E75                       		rts	
00004914                            ; End of function ChangeRingFrame
00004914                            
00004914                            ; ---------------------------------------------------------------------------
00004914                            ; End-of-act signpost pattern loading subroutine
00004914                            ; ---------------------------------------------------------------------------
00004914                            
00004914                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004914                            
00004914                            
00004914                            SignpostArtLoad:			; XREF: Level
00004914 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004918 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
0000491C 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
00004922 6700                       		beq.s	Signpost_Exit	; if yes, branch
00004924 3038 F700                  		move.w	($FFFFF700).w,d0
00004928 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000492C 0441 0100                  		subi.w	#$100,d1
00004930 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00004932 6D00                       		blt.s	Signpost_Exit	; if not, branch
00004934 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00004938 6700                       		beq.s	Signpost_Exit
0000493A B278 F728                  		cmp.w	($FFFFF728).w,d1
0000493E 6700                       		beq.s	Signpost_Exit
00004940 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
00004944 7012                       		moveq	#$12,d0
00004946 6000 CEB4                  		bra.w	LoadPLC2	; load signpost	patterns
0000494A                            ; ===========================================================================
0000494A                            
0000494A                            Signpost_Exit:
0000494A 4E75                       		rts	
0000494C                            ; End of function SignpostArtLoad
0000494C                            
0000494C                            ; ===========================================================================
0000494C                            Demo_GHZ:	incbin	demodata\i_ghz.bin
000049CC                            Demo_MZ:	incbin	demodata\i_mz.bin
00004AFC                            Demo_SYZ:	incbin	demodata\i_syz.bin
00004B7C                            Demo_SS:	incbin	demodata\i_ss.bin
00004C7C                            ; ===========================================================================
00004C7C                            
00004C7C                            ; ---------------------------------------------------------------------------
00004C7C                            ; Special Stage
00004C7C                            ; ---------------------------------------------------------------------------
00004C7C                            
00004C7C                            SpecialStage:				; XREF: GameModeArray
00004C7C 303C 00CA                  		move.w	#$CA,d0
00004C80 6100 C964                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004C84 6100 D50C                  		bsr.w	Pal_MakeFlash
00004C88 46FC 2700                  		move	#$2700,sr
00004C8C 4DF9 00C0 0004             		lea	($C00004).l,a6
00004C92 3CBC 8B03                  		move.w	#$8B03,(a6)
00004C96 3CBC 8004                  		move.w	#$8004,(a6)
00004C9A 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004CA0 3CBC 9011                  		move.w	#$9011,(a6)
00004CA4 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004CA8 0200 00BF                  		andi.b	#$BF,d0
00004CAC 33C0 00C0 0004             		move.w	d0,($C00004).l
00004CB2 6100 C85A                  		bsr.w	ClearScreen
00004CB6 46FC 2300                  		move	#$2300,sr
00004CBA 4BF9 00C0 0004             		lea	($C00004).l,a5
00004CC0 3ABC 8F01                  		move.w	#$8F01,(a5)
00004CC4 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00004CCA 3ABC 9780                  		move.w	#$9780,(a5)
00004CCE 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004CD4 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004CDC                            
00004CDC                            loc_463C:
00004CDC 3215                       		move.w	(a5),d1
00004CDE 0801 0001                  		btst	#1,d1
00004CE2 66F8                       		bne.s	loc_463C
00004CE4 3ABC 8F02                  		move.w	#$8F02,(a5)
00004CE8 6100 0000                  		bsr.w	SS_BGLoad
00004CEC 7014                       		moveq	#$14,d0
00004CEE 6100 CC46                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004CF2 43F8 D000                  		lea	($FFFFD000).w,a1
00004CF6 7000                       		moveq	#0,d0
00004CF8 323C 07FF                  		move.w	#$7FF,d1
00004CFC                            
00004CFC                            SS_ClrObjRam:
00004CFC 22C0                       		move.l	d0,(a1)+
00004CFE 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004D02                            
00004D02 43F8 F700                  		lea	($FFFFF700).w,a1
00004D06 7000                       		moveq	#0,d0
00004D08 323C 003F                  		move.w	#$3F,d1
00004D0C                            
00004D0C                            SS_ClrRam:
00004D0C 22C0                       		move.l	d0,(a1)+
00004D0E 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00004D12                            
00004D12 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004D16 7000                       		moveq	#0,d0
00004D18 323C 0027                  		move.w	#$27,d1
00004D1C                            
00004D1C                            SS_ClrRam2:
00004D1C 22C0                       		move.l	d0,(a1)+
00004D1E 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004D22                            
00004D22 43F8 AA00                  		lea	($FFFFAA00).w,a1
00004D26 7000                       		moveq	#0,d0
00004D28 323C 007F                  		move.w	#$7F,d1
00004D2C                            
00004D2C                            SS_ClrNemRam:
00004D2C 22C0                       		move.l	d0,(a1)+
00004D2E 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004D32                            
00004D32 4238 F64E                  		clr.b	($FFFFF64E).w
00004D36 4278 FE02                  		clr.w	($FFFFFE02).w
00004D3A 700A                       		moveq	#$A,d0
00004D3C 6100 D5D4                  		bsr.w	PalLoad1	; load special stage pallet
00004D40 4EB9 0000 0000             		jsr	SS_Load
00004D46 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00004D4E 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00004D56 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00004D5C 6100 0000                  		bsr.w	PalCycle_SS
00004D60 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004D64 4278 F784                  		clr.w	($FFFFF784).w	; set stage angle to "upright"
00004D68 31FC 0002 F786             		move.w	#2,($FFFFF786).w ; set stage rotation speed
00004D6E 303C 0089                  		move.w	#$89,d0
00004D72 6100 C86C                  		bsr.w	PlaySound	; play special stage BG	music
00004D76 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004D7C 43F9 0000 4720             		lea	(Demo_Index).l,a1
00004D82 7006                       		moveq	#6,d0
00004D84 E548                       		lsl.w	#2,d0
00004D86 2271 0000                  		movea.l	(a1,d0.w),a1
00004D8A 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004D90 5338 F792                  		subq.b	#1,($FFFFF792).w
00004D94 4278 FE20                  		clr.w	($FFFFFE20).w
00004D98 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004D9C 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004DA2 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004DA8                            ;		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004DA8                            ;		beq.s	SS_NoDebug	; if not, branch
00004DA8                            ;		btst	#6,($FFFFF604).w ; is A	button pressed?
00004DA8                            ;		beq.s	SS_NoDebug	; if not, branch
00004DA8                            ;		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004DA8                            
00004DA8                            SS_NoDebug:
00004DA8 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004DAC 0000 0040                  		ori.b	#$40,d0
00004DB0 33C0 00C0 0004             		move.w	d0,($C00004).l
00004DB6 6100 D32E                  		bsr.w	Pal_MakeWhite
00004DBA                            
00004DBA                            ; ---------------------------------------------------------------------------
00004DBA                            ; Main Special Stage loop
00004DBA                            ; ---------------------------------------------------------------------------
00004DBA                            
00004DBA                            SS_MainLoop:
00004DBA 6100 C836                  		bsr.w	PauseGame
00004DBE 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004DC4 6100 DF88                  		bsr.w	DelayProgram
00004DC8 4A78 F784                          tst.w   ($FFFFF784).w
00004DCC 6700                               beq.s   SS_NotReversed
00004DCE 5378 F784                          subi.w  #1,($FFFFF784).w
00004DD2                            
00004DD2                            SS_NotReversed:
00004DD2 6100 F89C                  		bsr.w	MoveSonicInDemo
00004DD6 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004DDC 4EB9 0000 0000             		jsr	ObjectsLoad
00004DE2 4EB9 0000 0000             		jsr	BuildSprites
00004DE8 4EB9 0000 0000             		jsr	SS_ShowLayout
00004DEE 6100 0000                  		bsr.w	SS_BGAnimate
00004DF2 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004DF6 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004DF8 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004DFC 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004E00                            
00004E00                            SS_ChkEnd:
00004E00 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004E06 6700 FFB2                  		beq.w	SS_MainLoop	; if yes, branch
00004E0A                            
00004E0A 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004E0E 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004E12 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004E18 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004E1E 6500                       		bcs.s	SS_End		; if not, branch
00004E20 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004E24                            
00004E24                            SS_End:
00004E24 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004E2A 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004E30 4278 F794                  		clr.w	($FFFFF794).w
00004E34                            
00004E34                            SS_EndLoop:
00004E34 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004E3A 6100 DF12                  		bsr.w	DelayProgram
00004E3E 6100 F830                  		bsr.w	MoveSonicInDemo
00004E42 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004E48 4EB9 0000 0000             		jsr	ObjectsLoad
00004E4E 4EB9 0000 0000             		jsr	BuildSprites
00004E54 4EB9 0000 0000             		jsr	SS_ShowLayout
00004E5A 6100 0000                  		bsr.w	SS_BGAnimate
00004E5E 5378 F794                  		subq.w	#1,($FFFFF794).w
00004E62 6A00                       		bpl.s	loc_47D4
00004E64 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004E6A 6100 D346                  		bsr.w	Pal_ToWhite
00004E6E                            
00004E6E                            loc_47D4:
00004E6E 4A78 F614                  		tst.w	($FFFFF614).w
00004E72 66C0                       		bne.s	SS_EndLoop
00004E74                            
00004E74 46FC 2700                  		move	#$2700,sr
00004E78 4DF9 00C0 0004             		lea	($C00004).l,a6
00004E7E 3CBC 8230                  		move.w	#$8230,(a6)
00004E82 3CBC 8407                  		move.w	#$8407,(a6)
00004E86 3CBC 9001                  		move.w	#$9001,(a6)
00004E8A 6100 C682                  		bsr.w	ClearScreen
00004E8E 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004E98 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004E9E 6100 C7EA                  		bsr.w	NemDec
00004EA2 4EB9 0000 0000             		jsr	Hud_Base
00004EA8 46FC 2300                  		move	#$2300,sr
00004EAC 7011                       		moveq	#$11,d0
00004EAE 6100 D47E                  		bsr.w	PalLoad2	; load results screen pallet
00004EB2 7000                       		moveq	#0,d0
00004EB4 6100 C946                  		bsr.w	LoadPLC2
00004EB8 701B                       		moveq	#$1B,d0
00004EBA 6100 C90E                  		bsr.w	LoadPLC		; load results screen patterns
00004EBE 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004EC4 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004ECA 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004ECE C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004ED2 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004ED6 303C 008E                  		move.w	#$8E,d0
00004EDA 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004EE0 43F8 D000                  		lea	($FFFFD000).w,a1
00004EE4 7000                       		moveq	#0,d0
00004EE6 323C 07FF                  		move.w	#$7FF,d1
00004EEA                            
00004EEA                            SS_EndClrObjRam:
00004EEA 22C0                       		move.l	d0,(a1)+
00004EEC 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004EF0                            
00004EF0 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004EF6                            
00004EF6                            SS_NormalExit:
00004EF6 6100 C6FA                  		bsr.w	PauseGame
00004EFA 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004F00 6100 DE4C                  		bsr.w	DelayProgram
00004F04 4EB9 0000 0000             		jsr	ObjectsLoad
00004F0A 4EB9 0000 0000             		jsr	BuildSprites
00004F10 6100 C924                  		bsr.w	RunPLC_RAM
00004F14 4A78 FE02                  		tst.w	($FFFFFE02).w
00004F18 67DC                       		beq.s	SS_NormalExit
00004F1A 4AB8 F680                  		tst.l	($FFFFF680).w
00004F1E 66D6                       		bne.s	SS_NormalExit
00004F20 303C 00CA                  		move.w	#$CA,d0
00004F24 6100 C6C0                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004F28 6100 D268                  		bsr.w	Pal_MakeFlash
00004F2C 4E75                       		rts	
00004F2E                            ; ===========================================================================
00004F2E                            
00004F2E                            SS_ToSegaScreen:
00004F2E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004F34 4E75                       		rts
00004F36                            
00004F36                            ; ---------------------------------------------------------------------------
00004F36                            ; Special stage	background loading subroutine
00004F36                            ; ---------------------------------------------------------------------------
00004F36                            
00004F36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004F36                            
00004F36                            
00004F36                            SS_BGLoad:				; XREF: SpecialStage
00004F36 43F9 00FF 0000             		lea	($FF0000).l,a1
00004F3C 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004F42 303C 4051                  		move.w	#$4051,d0
00004F46 6100 CA20                  		bsr.w	EniDec
00004F4A 263C 5000 0001             		move.l	#$50000001,d3
00004F50 45F9 00FF 0080             		lea	($FF0080).l,a2
00004F56 7E06                       		moveq	#6,d7
00004F58                            
00004F58                            loc_48BE:
00004F58 2003                       		move.l	d3,d0
00004F5A 7C03                       		moveq	#3,d6
00004F5C 7800                       		moveq	#0,d4
00004F5E 0C47 0003                  		cmpi.w	#3,d7
00004F62 6400                       		bcc.s	loc_48CC
00004F64 7801                       		moveq	#1,d4
00004F66                            
00004F66                            loc_48CC:
00004F66 7A07                       		moveq	#7,d5
00004F68                            
00004F68                            loc_48CE:
00004F68 224A                       		movea.l	a2,a1
00004F6A 0A04 0001                  		eori.b	#1,d4
00004F6E 6600                       		bne.s	loc_48E2
00004F70 0C47 0006                  		cmpi.w	#6,d7
00004F74 6600                       		bne.s	loc_48F2
00004F76 43F9 00FF 0000             		lea	($FF0000).l,a1
00004F7C                            
00004F7C                            loc_48E2:
00004F7C 48E7 F800                  		movem.l	d0-d4,-(sp)
00004F80 7207                       		moveq	#7,d1
00004F82 7407                       		moveq	#7,d2
00004F84 6100 C6E4                  		bsr.w	ShowVDPGraphics
00004F88 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004F8C                            
00004F8C                            loc_48F2:
00004F8C 0680 0010 0000             		addi.l	#$100000,d0
00004F92 51CD FFD4                  		dbf	d5,loc_48CE
00004F96 0680 0380 0000             		addi.l	#$3800000,d0
00004F9C 0A04 0001                  		eori.b	#1,d4
00004FA0 51CE FFC4                  		dbf	d6,loc_48CC
00004FA4 0683 1000 0000             		addi.l	#$10000000,d3
00004FAA 6A00                       		bpl.s	loc_491C
00004FAC 4843                       		swap	d3
00004FAE 0683 0000 C000             		addi.l	#$C000,d3
00004FB4 4843                       		swap	d3
00004FB6                            
00004FB6                            loc_491C:
00004FB6 D4FC 0080                  		adda.w	#$80,a2
00004FBA 51CF FF9C                  		dbf	d7,loc_48BE
00004FBE 43F9 00FF 0000             		lea	($FF0000).l,a1
00004FC4 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004FCA 303C 4000                  		move.w	#$4000,d0
00004FCE 6100 C998                  		bsr.w	EniDec
00004FD2 43F9 00FF 0000             		lea	($FF0000).l,a1
00004FD8 203C 4000 0003             		move.l	#$40000003,d0
00004FDE 723F                       		moveq	#$3F,d1
00004FE0 741F                       		moveq	#$1F,d2
00004FE2 6100 C686                  		bsr.w	ShowVDPGraphics
00004FE6 43F9 00FF 0000             		lea	($FF0000).l,a1
00004FEC 203C 5000 0003             		move.l	#$50000003,d0
00004FF2 723F                       		moveq	#$3F,d1
00004FF4 743F                       		moveq	#$3F,d2
00004FF6 6100 C672                  		bsr.w	ShowVDPGraphics
00004FFA 4E75                       		rts	
00004FFC                            ; End of function SS_BGLoad
00004FFC                            
00004FFC                            ; ---------------------------------------------------------------------------
00004FFC                            ; Pallet cycling routine - special stage
00004FFC                            ; ---------------------------------------------------------------------------
00004FFC                            
00004FFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004FFC                            
00004FFC                            
00004FFC                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004FFC 4A78 F63A                  		tst.w	($FFFFF63A).w
00005000 6600                       		bne.s	locret_49E6
00005002 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00005006 6A00                       		bpl.s	locret_49E6
00005008 4DF9 00C0 0004             		lea	($C00004).l,a6
0000500E 3038 F79A                  		move.w	($FFFFF79A).w,d0
00005012 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00005016 0240 001F                  		andi.w	#$1F,d0
0000501A E548                       		lsl.w	#2,d0
0000501C 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00005022 D0C0                       		adda.w	d0,a0
00005024 1018                       		move.b	(a0)+,d0
00005026 6A00                       		bpl.s	loc_4992
00005028 303C 01FF                  		move.w	#$1FF,d0
0000502C                            
0000502C                            loc_4992:
0000502C 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00005030 7000                       		moveq	#0,d0
00005032 1018                       		move.b	(a0)+,d0
00005034 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00005038 43F9 0000 0000             		lea	(byte_4ABC).l,a1
0000503E 43F1 0000                  		lea	(a1,d0.w),a1
00005042 303C 8200                  		move.w	#-$7E00,d0
00005046 1019                       		move.b	(a1)+,d0
00005048 3C80                       		move.w	d0,(a6)
0000504A 11D1 F616                  		move.b	(a1),($FFFFF616).w
0000504E 303C 8400                  		move.w	#-$7C00,d0
00005052 1018                       		move.b	(a0)+,d0
00005054 3C80                       		move.w	d0,(a6)
00005056 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00005060 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00005068 7000                       		moveq	#0,d0
0000506A 1018                       		move.b	(a0)+,d0
0000506C 6B00                       		bmi.s	loc_49E8
0000506E 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00005074 D2C0                       		adda.w	d0,a1
00005076 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
0000507A 24D9                       		move.l	(a1)+,(a2)+
0000507C 24D9                       		move.l	(a1)+,(a2)+
0000507E 24D9                       		move.l	(a1)+,(a2)+
00005080                            
00005080                            locret_49E6:
00005080 4E75                       		rts	
00005082                            ; ===========================================================================
00005082                            
00005082                            loc_49E8:				; XREF: PalCycle_SS
00005082 3238 F79E                  		move.w	($FFFFF79E).w,d1
00005086 0C40 008A                  		cmpi.w	#$8A,d0
0000508A 6500                       		bcs.s	loc_49F4
0000508C 5241                       		addq.w	#1,d1
0000508E                            
0000508E                            loc_49F4:
0000508E C2FC 002A                  		mulu.w	#$2A,d1
00005092 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00005098 D2C1                       		adda.w	d1,a1
0000509A 0240 007F                  		andi.w	#$7F,d0
0000509E 0880 0000                  		bclr	#0,d0
000050A2 6700                       		beq.s	loc_4A18
000050A4 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
000050A8 24D1                       		move.l	(a1),(a2)+
000050AA 24E9 0004                  		move.l	4(a1),(a2)+
000050AE 24E9 0008                  		move.l	8(a1),(a2)+
000050B2                            
000050B2                            loc_4A18:
000050B2 D2FC 000C                  		adda.w	#$C,a1
000050B6 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
000050BA 0C40 000A                  		cmpi.w	#$A,d0
000050BE 6500                       		bcs.s	loc_4A2E
000050C0 0440 000A                  		subi.w	#$A,d0
000050C4 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
000050C8                            
000050C8                            loc_4A2E:
000050C8 3200                       		move.w	d0,d1
000050CA D040                       		add.w	d0,d0
000050CC D041                       		add.w	d1,d0
000050CE D2C0                       		adda.w	d0,a1
000050D0 24D9                       		move.l	(a1)+,(a2)+
000050D2 34D9                       		move.w	(a1)+,(a2)+
000050D4 4E75                       		rts	
000050D6                            ; End of function PalCycle_SS
000050D6                            
000050D6                            ; ===========================================================================
000050D6 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
000050E6                            					; XREF: PalCycle_SS
000050E6 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
000050F6 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00005106 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00005116 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00005126 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00005136 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00005146 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00005156                            		even
00005156 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00005164                            					; XREF: PalCycle_SS
00005164                            		even
00005164                            
00005164                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
000051AC                            		even
000051AC                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
0000527E                            		even
0000527E                            
0000527E                            ; ---------------------------------------------------------------------------
0000527E                            ; Subroutine to	make the special stage background animated
0000527E                            ; ---------------------------------------------------------------------------
0000527E                            
0000527E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000527E                            
0000527E                            
0000527E                            SS_BGAnimate:				; XREF: SpecialStage
0000527E 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005282 6600                       		bne.s	loc_4BF6
00005284 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
0000528A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00005290                            
00005290                            loc_4BF6:
00005290 0C40 0008                  		cmpi.w	#8,d0
00005294 6400                       		bcc.s	loc_4C4E
00005296 0C40 0006                  		cmpi.w	#6,d0
0000529A 6600                       		bne.s	loc_4C10
0000529C 5278 F718                  		addq.w	#1,($FFFFF718).w
000052A0 5278 F70C                  		addq.w	#1,($FFFFF70C).w
000052A4 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000052AA                            
000052AA                            loc_4C10:
000052AA 7000                       		moveq	#0,d0
000052AC 3038 F708                  		move.w	($FFFFF708).w,d0
000052B0 4440                       		neg.w	d0
000052B2 4840                       		swap	d0
000052B4 43F9 0000 0000             		lea	(byte_4CCC).l,a1
000052BA 47F8 AA00                  		lea	($FFFFAA00).w,a3
000052BE 7609                       		moveq	#9,d3
000052C0                            
000052C0                            loc_4C26:
000052C0 302B 0002                  		move.w	2(a3),d0
000052C4 6100 DABA                  		bsr.w	CalcSine
000052C8 7400                       		moveq	#0,d2
000052CA 1419                       		move.b	(a1)+,d2
000052CC C1C2                       		muls.w	d2,d0
000052CE E080                       		asr.l	#8,d0
000052D0 36C0                       		move.w	d0,(a3)+
000052D2 1419                       		move.b	(a1)+,d2
000052D4 4882                       		ext.w	d2
000052D6 D55B                       		add.w	d2,(a3)+
000052D8 51CB FFE6                  		dbf	d3,loc_4C26
000052DC 47F8 AA00                  		lea	($FFFFAA00).w,a3
000052E0 45F9 0000 0000             		lea	(byte_4CB8).l,a2
000052E6 6000                       		bra.s	loc_4C7E
000052E8                            ; ===========================================================================
000052E8                            
000052E8                            loc_4C4E:				; XREF: SS_BGAnimate
000052E8 0C40 000C                  		cmpi.w	#$C,d0
000052EC 6600                       		bne.s	loc_4C74
000052EE 5378 F718                  		subq.w	#1,($FFFFF718).w
000052F2 47F8 AB00                  		lea	($FFFFAB00).w,a3
000052F6 243C 0001 8000             		move.l	#$18000,d2
000052FC 7206                       		moveq	#6,d1
000052FE                            
000052FE                            loc_4C64:
000052FE 2013                       		move.l	(a3),d0
00005300 9082                       		sub.l	d2,d0
00005302 26C0                       		move.l	d0,(a3)+
00005304 0482 0000 2000             		subi.l	#$2000,d2
0000530A 51C9 FFF2                  		dbf	d1,loc_4C64
0000530E                            
0000530E                            loc_4C74:
0000530E 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005312 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00005318                            
00005318                            loc_4C7E:
00005318 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000531C 3038 F718                  		move.w	($FFFFF718).w,d0
00005320 4440                       		neg.w	d0
00005322 4840                       		swap	d0
00005324 7600                       		moveq	#0,d3
00005326 161A                       		move.b	(a2)+,d3
00005328 3438 F70C                  		move.w	($FFFFF70C).w,d2
0000532C 4442                       		neg.w	d2
0000532E 0242 00FF                  		andi.w	#$FF,d2
00005332 E54A                       		lsl.w	#2,d2
00005334                            
00005334                            loc_4C9A:
00005334 301B                       		move.w	(a3)+,d0
00005336 544B                       		addq.w	#2,a3
00005338 7200                       		moveq	#0,d1
0000533A 121A                       		move.b	(a2)+,d1
0000533C 5341                       		subq.w	#1,d1
0000533E                            
0000533E                            loc_4CA4:
0000533E 2380 2000                  		move.l	d0,(a1,d2.w)
00005342 5842                       		addq.w	#4,d2
00005344 0242 03FC                  		andi.w	#$3FC,d2
00005348 51C9 FFF4                  		dbf	d1,loc_4CA4
0000534C 51CB FFE6                  		dbf	d3,loc_4C9A
00005350 4E75                       		rts	
00005352                            ; End of function SS_BGAnimate
00005352                            
00005352                            ; ===========================================================================
00005352 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
0000535E                            		even
0000535E 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005366                            		even
00005366 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
0000537A                            		even
0000537A                            					; XREF: SS_BGAnimate
0000537A                            ; ===========================================================================
0000537A                            
0000537A                            ; ---------------------------------------------------------------------------
0000537A                            ; Continue screen
0000537A                            ; ---------------------------------------------------------------------------
0000537A                            
0000537A                            ContinueScreen:				; XREF: GameModeArray
0000537A 6100 CCEC                  		bsr.w	Pal_FadeFrom
0000537E 46FC 2700                  		move	#$2700,sr
00005382 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005386 0200 00BF                  		andi.b	#$BF,d0
0000538A 33C0 00C0 0004             		move.w	d0,($C00004).l
00005390 4DF9 00C0 0004             		lea	($C00004).l,a6
00005396 3CBC 8004                  		move.w	#$8004,(a6)
0000539A 3CBC 8700                  		move.w	#$8700,(a6)
0000539E 6100 C16E                  		bsr.w	ClearScreen
000053A2 43F8 D000                  		lea	($FFFFD000).w,a1
000053A6 7000                       		moveq	#0,d0
000053A8 323C 07FF                  		move.w	#$7FF,d1
000053AC                            
000053AC                            Cont_ClrObjRam:
000053AC 22C0                       		move.l	d0,(a1)+
000053AE 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
000053B2                            
000053B2 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000053BC 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000053C2 6100 C2C6                  		bsr.w	NemDec
000053C6 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
000053D0 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
000053D6 6100 C2B2                  		bsr.w	NemDec
000053DA 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
000053E4 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
000053EA 6100 C29E                  		bsr.w	NemDec
000053EE 720A                       		moveq	#10,d1
000053F0 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
000053F6 7012                       		moveq	#$12,d0
000053F8 6100 CF18                  		bsr.w	PalLoad1	; load continue	screen pallet
000053FC 103C 0090                  		move.b	#$90,d0
00005400 6100 C1DE                  		bsr.w	PlaySound	; play continue	music
00005404 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
0000540A 42B8 F700                  		clr.l	($FFFFF700).w
0000540E 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
00005416 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
0000541C 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00005422 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
00005428 11FC 0003 D098             		move.b	#3,($FFFFD098).w
0000542E 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
00005434 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
0000543A 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
00005440 4EB9 0000 0000             		jsr	ObjectsLoad
00005446 4EB9 0000 0000             		jsr	BuildSprites
0000544C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005450 0000 0040                  		ori.b	#$40,d0
00005454 33C0 00C0 0004             		move.w	d0,($C00004).l
0000545A 6100 CB62                  		bsr.w	Pal_FadeTo
0000545E                            
0000545E                            ; ---------------------------------------------------------------------------
0000545E                            ; Continue screen main loop
0000545E                            ; ---------------------------------------------------------------------------
0000545E                            
0000545E                            Cont_MainLoop:
0000545E 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00005464 6100 D8E8                  		bsr.w	DelayProgram
00005468 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000546E 6400                       		bcc.s	loc_4DF2
00005470 46FC 2700                  		move	#$2700,sr
00005474 3238 F614                  		move.w	($FFFFF614).w,d1
00005478 82FC 003C                  		divu.w	#$3C,d1
0000547C 0281 0000 000F             		andi.l	#$F,d1
00005482 4EB9 0000 0000             		jsr	ContScrCounter
00005488 46FC 2300                  		move	#$2300,sr
0000548C                            
0000548C                            loc_4DF2:
0000548C 4EB9 0000 0000             		jsr	ObjectsLoad
00005492 4EB9 0000 0000             		jsr	BuildSprites
00005498 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
0000549E 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
000054A0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000054A6 64B6                       		bcc.s	Cont_MainLoop
000054A8 4A78 F614                  		tst.w	($FFFFF614).w
000054AC 6600 FFB0                  		bne.w	Cont_MainLoop
000054B0 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000054B6 4E75                       		rts	
000054B8                            ; ===========================================================================
000054B8                            
000054B8                            Cont_GotoLevel:				; XREF: Cont_MainLoop
000054B8 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000054BE 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000054C4 7000                       		moveq	#0,d0
000054C6 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000054CA 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000054CE 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000054D2 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
000054D6 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
000054DA 4E75                       		rts	
000054DC                            ; ===========================================================================
000054DC                            
000054DC                            ; ---------------------------------------------------------------------------
000054DC                            ; Object 80 - Continue screen elements
000054DC                            ; ---------------------------------------------------------------------------
000054DC                            
000054DC                            Obj80:					; XREF: Obj_Index
000054DC 7000                       		moveq	#0,d0
000054DE 1028 0024                  		move.b	$24(a0),d0
000054E2 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
000054E6 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
000054EA                            ; ===========================================================================
000054EA 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
000054EC 0000                       		dc.w Obj80_Display-Obj80_Index
000054EE 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
000054F0 0000                       		dc.w Obj80_ChkType-Obj80_Index
000054F2                            ; ===========================================================================
000054F2                            
000054F2                            Obj80_Main:				; XREF: Obj80_Index
000054F2 5428 0024                  		addq.b	#2,$24(a0)
000054F6 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000054FE 317C 8500 0002             		move.w	#$8500,2(a0)
00005504 117C 0000 0001             		move.b	#0,1(a0)
0000550A 117C 003C 0019             		move.b	#$3C,$19(a0)
00005510 317C 0120 0008             		move.w	#$120,8(a0)
00005516 317C 00C0 000A             		move.w	#$C0,$A(a0)
0000551C 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
00005522                            
00005522                            Obj80_Display:				; XREF: Obj80_Index
00005522 4EF9 0000 0000             		jmp	DisplaySprite
00005528                            ; ===========================================================================
00005528                            Obj80_MiniSonicPos:
00005528 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
0000553A 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00005546                            ; ===========================================================================
00005546                            
00005546                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
00005546 2248                       		movea.l	a0,a1
00005548 45F9 0000 5528             		lea	(Obj80_MiniSonicPos).l,a2
0000554E 7200                       		moveq	#0,d1
00005550 1238 FE18                  		move.b	($FFFFFE18).w,d1
00005554 5501                       		subq.b	#2,d1
00005556 6400                       		bcc.s	loc_4EC4
00005558 4EF9 0000 0000             		jmp	DeleteObject
0000555E                            ; ===========================================================================
0000555E                            
0000555E                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
0000555E 7601                       		moveq	#1,d3
00005560 0C01 000E                  		cmpi.b	#$E,d1
00005564 6500                       		bcs.s	loc_4ED0
00005566 7600                       		moveq	#0,d3
00005568 720E                       		moveq	#$E,d1
0000556A                            
0000556A                            loc_4ED0:
0000556A 1401                       		move.b	d1,d2
0000556C 0202 0001                  		andi.b	#1,d2
00005570                            
00005570                            Obj80_MiniSonLoop:
00005570 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
00005574 335A 0008                  		move.w	(a2)+,8(a1)
00005578 4A02                       		tst.b	d2
0000557A 6700                       		beq.s	loc_4EEA
0000557C 0469 000A 0008             		subi.w	#$A,8(a1)
00005582                            
00005582                            loc_4EEA:
00005582 337C 00D0 000A             		move.w	#$D0,$A(a1)
00005588 137C 0006 001A             		move.b	#6,$1A(a1)
0000558E 137C 0006 0024             		move.b	#6,$24(a1)
00005594 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
0000559C 337C 8551 0002             		move.w	#$8551,2(a1)
000055A2 137C 0000 0001             		move.b	#0,1(a1)
000055A8 43E9 0040                  		lea	$40(a1),a1
000055AC 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
000055B0 43E9 FFC0                  		lea	-$40(a1),a1
000055B4 1343 0028                  		move.b	d3,$28(a1)
000055B8                            
000055B8                            Obj80_ChkType:				; XREF: Obj80_Index
000055B8 4A28 0028                  		tst.b	$28(a0)
000055BC 6700                       		beq.s	loc_4F40
000055BE 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000055C4 6500                       		bcs.s	loc_4F40
000055C6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000055CA 0200 0001                  		andi.b	#1,d0
000055CE 6600                       		bne.s	loc_4F40
000055D0 4A78 D010                  		tst.w	($FFFFD010).w
000055D4 6600                       		bne.s	Obj80_Delete
000055D6 4E75                       		rts	
000055D8                            ; ===========================================================================
000055D8                            
000055D8                            loc_4F40:				; XREF: Obj80_ChkType
000055D8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000055DC 0200 000F                  		andi.b	#$F,d0
000055E0 6600                       		bne.s	Obj80_Display2
000055E2 0868 0000 001A             		bchg	#0,$1A(a0)
000055E8                            
000055E8                            Obj80_Display2:
000055E8 4EF9 0000 0000             		jmp	DisplaySprite
000055EE                            ; ===========================================================================
000055EE                            
000055EE                            Obj80_Delete:				; XREF: Obj80_ChkType
000055EE 4EF9 0000 0000             		jmp	DeleteObject
000055F4                            ; ===========================================================================
000055F4                            
000055F4                            ; ---------------------------------------------------------------------------
000055F4                            ; Object 81 - Sonic on the continue screen
000055F4                            ; ---------------------------------------------------------------------------
000055F4                            
000055F4                            Obj81:					; XREF: Obj_Index
000055F4 7000                       		moveq	#0,d0
000055F6 1028 0024                  		move.b	$24(a0),d0
000055FA 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
000055FE 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00005602 4EF9 0000 0000             		jmp	DisplaySprite
00005608                            ; ===========================================================================
00005608 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
0000560A 0000                       		dc.w Obj81_ChkLand-Obj81_Index
0000560C 0000                       		dc.w Obj81_Animate-Obj81_Index
0000560E 0000                       		dc.w Obj81_Run-Obj81_Index
00005610                            ; ===========================================================================
00005610                            
00005610                            Obj81_Main:				; XREF: Obj81_Index
00005610 5428 0024                  		addq.b	#2,$24(a0)
00005614 317C 00A0 0008             		move.w	#$A0,8(a0)
0000561A 317C 00C0 000C             		move.w	#$C0,$C(a0)
00005620 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005628 317C 0780 0002             		move.w	#$780,2(a0)
0000562E 117C 0004 0001             		move.b	#4,1(a0)
00005634 117C 0002 0018             		move.b	#2,$18(a0)
0000563A 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
00005640 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
00005646                            
00005646                            Obj81_ChkLand:				; XREF: Obj81_Index
00005646 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
0000564C 6600                       		bne.s	Obj81_ShowFall	; if not, branch
0000564E 5428 0024                  		addq.b	#2,$24(a0)
00005652 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00005656 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
0000565E 317C 8500 0002             		move.w	#$8500,2(a0)
00005664 117C 0000 001C             		move.b	#0,$1C(a0)
0000566A 6000                       		bra.s	Obj81_Animate
0000566C                            ; ===========================================================================
0000566C                            
0000566C                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
0000566C 4EB9 0000 0000             		jsr	SpeedToPos
00005672 4EB9 0000 0000             		jsr	Sonic_Animate
00005678 4EF9 0000 0000             		jmp	LoadSonicDynPLC
0000567E                            ; ===========================================================================
0000567E                            
0000567E                            Obj81_Animate:				; XREF: Obj81_Index
0000567E 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
00005682 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
00005684 43F9 0000 0000             		lea	(Ani_obj81).l,a1
0000568A 4EF9 0000 0000             		jmp	AnimateSprite
00005690                            ; ===========================================================================
00005690                            
00005690                            Obj81_GetUp:				; XREF: Obj81_Animate
00005690 5428 0024                  		addq.b	#2,$24(a0)
00005694 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0000569C 317C 0780 0002             		move.w	#$780,2(a0)
000056A2 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
000056A8 4268 0014                  		clr.w	$14(a0)
000056AC 5168 000C                  		subq.w	#8,$C(a0)
000056B0 103C 00E0                  		move.b	#$E0,d0
000056B4 6100 BF30                  		bsr.w	PlaySound_Special ; fade out music
000056B8                            
000056B8                            Obj81_Run:				; XREF: Obj81_Index
000056B8 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
000056BE 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
000056C0 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
000056C6 6000                       		bra.s	Obj81_ShowRun
000056C8                            ; ===========================================================================
000056C8                            
000056C8                            Obj81_AddSpeed:				; XREF: Obj81_Run
000056C8 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
000056CE                            
000056CE                            Obj81_ShowRun:				; XREF: Obj81_Run
000056CE 4EB9 0000 0000             		jsr	SpeedToPos
000056D4 4EB9 0000 0000             		jsr	Sonic_Animate
000056DA 4EF9 0000 0000             		jmp	LoadSonicDynPLC
000056E0                            ; ===========================================================================
000056E0                            Ani_obj81:
000056E0                            	include "_anim\obj81.asm"
000056E0                            ; ---------------------------------------------------------------------------
000056E0                            ; Animation script - Sonic on the continue screen
000056E0                            ; ---------------------------------------------------------------------------
000056E0 0000                       		dc.w byte_504A-Ani_obj81
000056E2 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
000056EE 00                         		even
000056EE 00                         		even
000056EE                            
000056EE                            ; ---------------------------------------------------------------------------
000056EE                            ; Sprite mappings - Continue screen
000056EE                            ; ---------------------------------------------------------------------------
000056EE                            Map_obj80:
000056EE                            	include "_maps\obj80.asm"
000056EE                            ; ---------------------------------------------------------------------------
000056EE                            ; Sprite mappings - Continue screen
000056EE                            ; ---------------------------------------------------------------------------
000056EE 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
000056F2 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
000056F6 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
000056FA 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
000056FE 0B                         byte_5066:	dc.b $B
000056FF F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00005704 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00005709 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
0000570E F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00005713 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00005718 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
0000571D F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
00005722 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00005727 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
0000572C 3805 2021 08               		dc.b $38, 5, $20, $21, 8
00005731 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00005736 03                         byte_509E:	dc.b 3
00005737 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
0000573C F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005741 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005746 03                         byte_50AE:	dc.b 3
00005747 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
0000574C F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005751 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005756 03                         byte_50BE:	dc.b 3
00005757 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
0000575C F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005761 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005766 02                         byte_50CE:	dc.b 2
00005767 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
0000576C 6009 2800 00               		dc.b $60, 9, $28, 0, 0
00005771 01                         byte_50D9:	dc.b 1
00005772 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00005777 01                         byte_50DF:	dc.b 1
00005778 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
0000577E 00                         		even
0000577E 00                         		even
0000577E                            
0000577E                            ; ===========================================================================
0000577E                            ; ---------------------------------------------------------------------------
0000577E                            ; Ending sequence in Green Hill	Zone
0000577E                            ; ---------------------------------------------------------------------------
0000577E                            
0000577E                            EndingSequence:				; XREF: GameModeArray
0000577E 103C 00E4                  		move.b	#$E4,d0
00005782 6100 BE62                  		bsr.w	PlaySound_Special ; stop music
00005786 6100 C8E0                  		bsr.w	Pal_FadeFrom
0000578A 43F8 D000                  		lea	($FFFFD000).w,a1
0000578E 7000                       		moveq	#0,d0
00005790 323C 07FF                  		move.w	#$7FF,d1
00005794                            
00005794                            End_ClrObjRam:
00005794 22C0                       		move.l	d0,(a1)+
00005796 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
0000579A                            
0000579A 43F8 F628                  		lea	($FFFFF628).w,a1
0000579E 7000                       		moveq	#0,d0
000057A0 323C 0015                  		move.w	#$15,d1
000057A4                            
000057A4                            End_ClrRam:
000057A4 22C0                       		move.l	d0,(a1)+
000057A6 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
000057AA                            
000057AA 43F8 F700                  		lea	($FFFFF700).w,a1
000057AE 7000                       		moveq	#0,d0
000057B0 323C 003F                  		move.w	#$3F,d1
000057B4                            
000057B4                            End_ClrRam2:
000057B4 22C0                       		move.l	d0,(a1)+
000057B6 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
000057BA                            
000057BA 43F8 FE60                  		lea	($FFFFFE60).w,a1
000057BE 7000                       		moveq	#0,d0
000057C0 323C 0047                  		move.w	#$47,d1
000057C4                            
000057C4                            End_ClrRam3:
000057C4 22C0                       		move.l	d0,(a1)+
000057C6 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
000057CA                            
000057CA 46FC 2700                  		move	#$2700,sr
000057CE 3038 F60C                  		move.w	($FFFFF60C).w,d0
000057D2 0200 00BF                  		andi.b	#$BF,d0
000057D6 33C0 00C0 0004             		move.w	d0,($C00004).l
000057DC 6100 BD30                  		bsr.w	ClearScreen
000057E0 4DF9 00C0 0004             		lea	($C00004).l,a6
000057E6 3CBC 8B03                  		move.w	#$8B03,(a6)
000057EA 3CBC 8230                  		move.w	#$8230,(a6)
000057EE 3CBC 8407                  		move.w	#$8407,(a6)
000057F2 3CBC 857C                  		move.w	#$857C,(a6)
000057F6 3CBC 9001                  		move.w	#$9001,(a6)
000057FA 3CBC 8004                  		move.w	#$8004,(a6)
000057FE 3CBC 8720                  		move.w	#$8720,(a6)
00005802 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00005808 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
0000580C 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00005812 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00005818 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
0000581E 6700                       		beq.s	End_LoadData	; if yes, branch
00005820 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
00005826                            
00005826                            End_LoadData:
00005826 701C                       		moveq	#$1C,d0
00005828 6100 C10C                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
0000582C 4EB9 0000 0000             		jsr	Hud_Base
00005832 6100 0000                  		bsr.w	LevelSizeLoad
00005836 6100 0000                  		bsr.w	DeformBgLayer
0000583A 08F8 0002 F754             		bset	#2,($FFFFF754).w
00005840 6100 0000                  		bsr.w	MainLoadBlockLoad
00005844 6100 0000                  		bsr.w	LoadTilesFromStart
00005848 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
00005850 46FC 2300                  		move	#$2300,sr
00005854 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
0000585A 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
0000585E 6100 C286                  		bsr.w	KosDec
00005862 7003                       		moveq	#3,d0
00005864 6100 CAAC                  		bsr.w	PalLoad1	; load Sonic's pallet
00005868 303C 008B                  		move.w	#$8B,d0
0000586C 6100 BD72                  		bsr.w	PlaySound	; play ending sequence music
00005870 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
00005876 6700                       		beq.s	End_LoadSonic	; if not, branch
00005878 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
0000587E                            
0000587E                            End_LoadSonic:
0000587E 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00005884 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
0000588A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00005890 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00005896 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
0000589C 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
000058A2 4EB9 0000 0000             		jsr	ObjPosLoad
000058A8 4EB9 0000 0000             		jsr	ObjectsLoad
000058AE 4EB9 0000 0000             		jsr	BuildSprites
000058B4 7000                       		moveq	#0,d0
000058B6 31C0 FE20                  		move.w	d0,($FFFFFE20).w
000058BA 21C0 FE22                  		move.l	d0,($FFFFFE22).w
000058BE 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
000058C2 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
000058C6 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
000058CA 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
000058CE 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
000058D2 31C0 FE08                  		move.w	d0,($FFFFFE08).w
000058D6 31C0 FE02                  		move.w	d0,($FFFFFE02).w
000058DA 31C0 FE04                  		move.w	d0,($FFFFFE04).w
000058DE 6100 EEE0                  		bsr.w	OscillateNumInit
000058E2 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
000058E8 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
000058EE 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
000058F4 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000058FA 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005900 6100 D44C                  		bsr.w	DelayProgram
00005904 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005908 0000 0040                  		ori.b	#$40,d0
0000590C 33C0 00C0 0004             		move.w	d0,($C00004).l
00005912 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005918 6100 C6A4                  		bsr.w	Pal_FadeTo
0000591C                            
0000591C                            ; ---------------------------------------------------------------------------
0000591C                            ; Main ending sequence loop
0000591C                            ; ---------------------------------------------------------------------------
0000591C                            
0000591C                            End_MainLoop:
0000591C 6100 BCD4                  		bsr.w	PauseGame
00005920 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005926 6100 D426                  		bsr.w	DelayProgram
0000592A 5278 FE04                  		addq.w	#1,($FFFFFE04).w
0000592E 6100 0000                  		bsr.w	End_MoveSonic
00005932 4EB9 0000 0000             		jsr	ObjectsLoad
00005938 6100 0000                  		bsr.w	DeformBgLayer
0000593C 4EB9 0000 0000             		jsr	BuildSprites
00005942 4EB9 0000 0000             		jsr	ObjPosLoad
00005948 6100 C23C                  		bsr.w	PalCycle_Load
0000594C 6100 EEC8                  		bsr.w	OscillateNumDo
00005950 6100 EF54                  		bsr.w	ChangeRingFrame
00005954 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
0000595A 6700                       		beq.s	loc_52DA	; if yes, branch
0000595C 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
00005962 103C 0091                  		move.b	#$91,d0
00005966 6100 BC7E                  		bsr.w	PlaySound_Special ; play credits music
0000596A 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
00005970 4E75                       		rts	
00005972                            ; ===========================================================================
00005972                            
00005972                            loc_52DA:
00005972 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00005976 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
0000597A                            
0000597A 4278 FE02                  		clr.w	($FFFFFE02).w
0000597E 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005984 4278 F794                  		clr.w	($FFFFF794).w
00005988                            
00005988                            End_AllEmlds:				; XREF: loc_5334
00005988 6100 BC68                  		bsr.w	PauseGame
0000598C 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005992 6100 D3BA                  		bsr.w	DelayProgram
00005996 5278 FE04                  		addq.w	#1,($FFFFFE04).w
0000599A 6100 0000                  		bsr.w	End_MoveSonic
0000599E 4EB9 0000 0000             		jsr	ObjectsLoad
000059A4 6100 0000                  		bsr.w	DeformBgLayer
000059A8 4EB9 0000 0000             		jsr	BuildSprites
000059AE 4EB9 0000 0000             		jsr	ObjPosLoad
000059B4 6100 EE60                  		bsr.w	OscillateNumDo
000059B8 6100 EEEC                  		bsr.w	ChangeRingFrame
000059BC 5378 F794                  		subq.w	#1,($FFFFF794).w
000059C0 6A00                       		bpl.s	loc_5334
000059C2 31FC 0002 F794             		move.w	#2,($FFFFF794).w
000059C8 6100 C7E8                  		bsr.w	Pal_ToWhite
000059CC                            
000059CC                            loc_5334:
000059CC 4A78 FE02                  		tst.w	($FFFFFE02).w
000059D0 6700 FFB6                  		beq.w	End_AllEmlds
000059D4 4278 FE02                  		clr.w	($FFFFFE02).w
000059D8 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
000059DE 4BF9 00C0 0004             		lea	($C00004).l,a5
000059E4 4DF9 00C0 0000             		lea	($C00000).l,a6
000059EA 47F8 F700                  		lea	($FFFFF700).w,a3
000059EE 49F8 A400                  		lea	($FFFFA400).w,a4
000059F2 343C 4000                  		move.w	#$4000,d2
000059F6 6100 0000                  		bsr.w	LoadTilesFromStart2
000059FA 7013                       		moveq	#$13,d0
000059FC 6100 C914                  		bsr.w	PalLoad1	; load ending pallet
00005A00 6100 C6E4                  		bsr.w	Pal_MakeWhite
00005A04 6000 FF16                  		bra.w	End_MainLoop
00005A08                            
00005A08                            ; ---------------------------------------------------------------------------
00005A08                            ; Subroutine controlling Sonic on the ending sequence
00005A08                            ; ---------------------------------------------------------------------------
00005A08                            
00005A08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005A08                            
00005A08                            
00005A08                            End_MoveSonic:				; XREF: End_MainLoop
00005A08 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
00005A0C 6600                       		bne.s	End_MoveSonic2
00005A0E 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
00005A14 6400                       		bcc.s	End_MoveSonExit	; if not, branch
00005A16 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005A1A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
00005A20 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
00005A26 4E75                       		rts	
00005A28                            ; ===========================================================================
00005A28                            
00005A28                            End_MoveSonic2:				; XREF: End_MoveSonic
00005A28 5500                       		subq.b	#2,d0
00005A2A 6600                       		bne.s	End_MoveSonic3
00005A2C 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
00005A32 6500                       		bcs.s	End_MoveSonExit	; if not, branch
00005A34 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005A38 7000                       		moveq	#0,d0
00005A3A 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
00005A3E 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
00005A42 31C0 D014                  		move.w	d0,($FFFFD014).w
00005A46 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
00005A4C 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
00005A52 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00005A58 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00005A5E 4E75                       		rts	
00005A60                            ; ===========================================================================
00005A60                            
00005A60                            End_MoveSonic3:				; XREF: End_MoveSonic
00005A60 5500                       		subq.b	#2,d0
00005A62 6600                       		bne.s	End_MoveSonExit
00005A64 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005A68 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00005A6E 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
00005A74 4278 D024                  		clr.w	($FFFFD024).w
00005A78                            
00005A78                            End_MoveSonExit:
00005A78 4E75                       		rts	
00005A7A                            ; End of function End_MoveSonic
00005A7A                            
00005A7A                            ; ===========================================================================
00005A7A                            ; ---------------------------------------------------------------------------
00005A7A                            ; Object 87 - Sonic on ending sequence
00005A7A                            ; ---------------------------------------------------------------------------
00005A7A                            
00005A7A                            Obj87:					; XREF: Obj_Index
00005A7A 7000                       		moveq	#0,d0
00005A7C 1028 0025                  		move.b	$25(a0),d0
00005A80 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00005A84 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00005A88 4EF9 0000 0000             		jmp	DisplaySprite
00005A8E                            ; ===========================================================================
00005A8E 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00005A92 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00005A96 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00005A9A 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00005A9E 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00005AA2                            ; ===========================================================================
00005AA2                            
00005AA2                            Obj87_Main:				; XREF: Obj87_Index
00005AA2 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005AA8 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005AAA 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00005AB0 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005AB6 4E75                       		rts	
00005AB8                            ; ===========================================================================
00005AB8                            
00005AB8                            Obj87_Main2:				; XREF: Obj87_Main
00005AB8 5428 0025                  		addq.b	#2,$25(a0)
00005ABC 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005AC4 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005ACA 117C 0004 0001             		move.b	#4,1(a0)
00005AD0 4228 0022                  		clr.b	$22(a0)
00005AD4 117C 0002 0018             		move.b	#2,$18(a0)
00005ADA 117C 0000 001A             		move.b	#0,$1A(a0)
00005AE0 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005AE6                            
00005AE6                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005AE6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005AEA 6600                       		bne.s	Obj87_Wait
00005AEC 5428 0025                  		addq.b	#2,$25(a0)
00005AF0 317C 0001 001C             		move.w	#1,$1C(a0)
00005AF6 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00005AFC                            
00005AFC                            Obj87_Wait:
00005AFC 4E75                       		rts	
00005AFE                            ; ===========================================================================
00005AFE                            
00005AFE                            Obj87_LookUp:				; XREF: Obj87_Index
00005AFE 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005B06 6600                       		bne.s	locret_5480
00005B08 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00005B0E 317C 005A 0030             		move.w	#$5A,$30(a0)
00005B14 5428 0025                  		addq.b	#2,$25(a0)
00005B18                            
00005B18                            locret_5480:
00005B18 4E75                       		rts	
00005B1A                            ; ===========================================================================
00005B1A                            
00005B1A                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00005B1A 5368 0030                  		subq.w	#1,$30(a0)
00005B1E 6600                       		bne.s	Obj87_Wait2
00005B20 43F8 D400                  		lea	($FFFFD400).w,a1
00005B24 323C 00FF                  		move.w	#$FF,d1
00005B28                            
00005B28                            Obj87_ClrLoop:
00005B28 4299                       		clr.l	(a1)+
00005B2A 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00005B2E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00005B34 5428 0025                  		addq.b	#2,$25(a0)
00005B38 117C 0001 001C             		move.b	#1,$1C(a0)
00005B3E 317C 003C 0030             		move.w	#$3C,$30(a0)
00005B44                            
00005B44                            Obj87_Wait2:
00005B44 4E75                       		rts	
00005B46                            ; ===========================================================================
00005B46                            
00005B46                            Obj87_MakeLogo:				; XREF: Obj87_Index
00005B46 5368 0030                  		subq.w	#1,$30(a0)
00005B4A 6600                       		bne.s	Obj87_Wait3
00005B4C 5428 0025                  		addq.b	#2,$25(a0)
00005B50 317C 00B4 0030             		move.w	#$B4,$30(a0)
00005B56 117C 0002 001C             		move.b	#2,$1C(a0)
00005B5C 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005B62                            
00005B62                            Obj87_Wait3:
00005B62 4E75                       		rts	
00005B64                            ; ===========================================================================
00005B64                            
00005B64                            Obj87_Animate:				; XREF: Obj87_Index
00005B64 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00005B6A 4EF9 0000 0000             		jmp	AnimateSprite
00005B70                            ; ===========================================================================
00005B70                            
00005B70                            Obj87_Leap:				; XREF: Obj87_Index
00005B70 5368 0030                  		subq.w	#1,$30(a0)
00005B74 6600                       		bne.s	Obj87_Wait4
00005B76 5428 0025                  		addq.b	#2,$25(a0)
00005B7A 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005B82 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005B88 117C 0004 0001             		move.b	#4,1(a0)
00005B8E 4228 0022                  		clr.b	$22(a0)
00005B92 117C 0002 0018             		move.b	#2,$18(a0)
00005B98 117C 0005 001A             		move.b	#5,$1A(a0)
00005B9E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00005BA4 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005BAA 60B8                       		bra.s	Obj87_Animate
00005BAC                            ; ===========================================================================
00005BAC                            
00005BAC                            Obj87_Wait4:				; XREF: Obj87_Leap
00005BAC 4E75                       		rts	
00005BAE                            ; ===========================================================================
00005BAE                            Ani_obj87:
00005BAE                            	include "_anim\obj87.asm"
00005BAE                            ; ---------------------------------------------------------------------------
00005BAE                            ; Animation script - Sonic on the ending sequence
00005BAE                            ; ---------------------------------------------------------------------------
00005BAE 0000                       		dc.w byte_551C-Ani_obj87
00005BB0 0000                       		dc.w byte_552A-Ani_obj87
00005BB2 0000                       		dc.w byte_5534-Ani_obj87
00005BB4 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00005BC2 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005BCC 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005BD4                            		even
00005BD4                            		even
00005BD4                            
00005BD4                            ; ===========================================================================
00005BD4                            ; ---------------------------------------------------------------------------
00005BD4                            ; Object 88 - chaos emeralds on	the ending sequence
00005BD4                            ; ---------------------------------------------------------------------------
00005BD4                            
00005BD4                            Obj88:					; XREF: Obj_Index
00005BD4 7000                       		moveq	#0,d0
00005BD6 1028 0024                  		move.b	$24(a0),d0
00005BDA 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005BDE 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005BE2 4EF9 0000 0000             		jmp	DisplaySprite
00005BE8                            ; ===========================================================================
00005BE8 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005BEA 0000                       		dc.w Obj88_Move-Obj88_Index
00005BEC                            ; ===========================================================================
00005BEC                            
00005BEC                            Obj88_Main:				; XREF: Obj88_Index
00005BEC 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005BF2 6700                       		beq.s	Obj88_Main2
00005BF4 588F                       		addq.l	#4,sp
00005BF6 4E75                       		rts	
00005BF8                            ; ===========================================================================
00005BF8                            
00005BF8                            Obj88_Main2:				; XREF: Obj88_Main
00005BF8 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00005BFE 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005C04 2248                       		movea.l	a0,a1
00005C06 7600                       		moveq	#0,d3
00005C08 7401                       		moveq	#1,d2
00005C0A 7205                       		moveq	#5,d1
00005C0C                            
00005C0C                            Obj88_MainLoop:
00005C0C 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00005C10 5429 0024                  		addq.b	#2,$24(a1)
00005C14 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00005C1C 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005C22 137C 0004 0001             		move.b	#4,1(a1)
00005C28 137C 0001 0018             		move.b	#1,$18(a1)
00005C2E 3368 0008 0038             		move.w	8(a0),$38(a1)
00005C34 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00005C3A 1342 001C                  		move.b	d2,$1C(a1)
00005C3E 1342 001A                  		move.b	d2,$1A(a1)
00005C42 5202                       		addq.b	#1,d2
00005C44 1343 0026                  		move.b	d3,$26(a1)
00005C48 0603 002A                  		addi.b	#$2A,d3
00005C4C 43E9 0040                  		lea	$40(a1),a1
00005C50 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00005C54                            
00005C54                            Obj88_Move:				; XREF: Obj88_Index
00005C54 3028 003E                  		move.w	$3E(a0),d0
00005C58 D168 0026                  		add.w	d0,$26(a0)
00005C5C 1028 0026                  		move.b	$26(a0),d0
00005C60 4EB9 0000 2D80             		jsr	(CalcSine).l
00005C66 7800                       		moveq	#0,d4
00005C68 1828 003C                  		move.b	$3C(a0),d4
00005C6C C3C4                       		muls.w	d4,d1
00005C6E E081                       		asr.l	#8,d1
00005C70 C1C4                       		muls.w	d4,d0
00005C72 E080                       		asr.l	#8,d0
00005C74 D268 0038                  		add.w	$38(a0),d1
00005C78 D068 003A                  		add.w	$3A(a0),d0
00005C7C 3141 0008                  		move.w	d1,8(a0)
00005C80 3140 000C                  		move.w	d0,$C(a0)
00005C84 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005C8A 6700                       		beq.s	loc_55FA
00005C8C 0668 0020 003C             		addi.w	#$20,$3C(a0)
00005C92                            
00005C92                            loc_55FA:
00005C92 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005C98 6700                       		beq.s	loc_5608
00005C9A 0668 0020 003E             		addi.w	#$20,$3E(a0)
00005CA0                            
00005CA0                            loc_5608:
00005CA0 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005CA6 6700                       		beq.s	locret_5614
00005CA8 5368 003A                  		subq.w	#1,$3A(a0)
00005CAC                            
00005CAC                            locret_5614:
00005CAC 4E75                       		rts	
00005CAE                            ; ===========================================================================
00005CAE                            ; ---------------------------------------------------------------------------
00005CAE                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005CAE                            ; ---------------------------------------------------------------------------
00005CAE                            
00005CAE                            Obj89:					; XREF: Obj_Index
00005CAE 7000                       		moveq	#0,d0
00005CB0 1028 0024                  		move.b	$24(a0),d0
00005CB4 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005CB8 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005CBC                            ; ===========================================================================
00005CBC 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00005CBE 0000                       		dc.w Obj89_Move-Obj89_Index
00005CC0 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00005CC2                            ; ===========================================================================
00005CC2                            
00005CC2                            Obj89_Main:				; XREF: Obj89_Index
00005CC2 5428 0024                  		addq.b	#2,$24(a0)
00005CC6 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005CCC 317C 00D8 000A             		move.w	#$D8,$A(a0)
00005CD2 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005CDA 317C 05C5 0002             		move.w	#$5C5,2(a0)
00005CE0 117C 0000 0001             		move.b	#0,1(a0)
00005CE6 117C 0000 0018             		move.b	#0,$18(a0)
00005CEC                            
00005CEC                            Obj89_Move:				; XREF: Obj89_Index
00005CEC 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005CF2 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005CF4 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005CFA 4EB9 0000 0000             		jsr	DisplaySprite
00005D00                            ; ===========================================================================
00005D00                            
00005D00                            Obj89_Delay:				; XREF: Obj89_Move
00005D00 5428 0024                  		addq.b	#2,$24(a0)
00005D04 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005D0A                            
00005D0A                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005D0A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005D0E 6A00                       		bpl.s	Obj89_Display
00005D10 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005D16                            
00005D16                            Obj89_Display:
00005D16 4EB9 0000 0000             		jsr	DisplaySprite
00005D1C                            ; ===========================================================================
00005D1C                            ; ---------------------------------------------------------------------------
00005D1C                            ; Sprite mappings - Sonic on the ending	sequence
00005D1C                            ; ---------------------------------------------------------------------------
00005D1C                            Map_obj87:
00005D1C                            	include "_maps\obj87.asm"
00005D1C                            ; ---------------------------------------------------------------------------
00005D1C                            ; Sprite mappings - Sonic on the ending	sequence
00005D1C                            ; ---------------------------------------------------------------------------
00005D1C 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00005D20 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005D24 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00005D28 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00005D2C 02                         byte_5690:	dc.b 2
00005D2D EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005D32 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005D37 03                         byte_569B:	dc.b 3
00005D38 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00005D3D EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00005D42 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005D47 02                         byte_56AB:	dc.b 2
00005D48 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00005D4D FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00005D52 02                         byte_56B6:	dc.b 2
00005D53 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00005D58 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005D5D 02                         byte_56C1:	dc.b 2
00005D5E EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005D63 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00005D68 03                         byte_56CC:	dc.b 3
00005D69 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005D6E EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00005D73 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005D78 07                         byte_56DC:	dc.b 7
00005D79 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005D7E BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005D83 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005D88 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005D8D DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005D92 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005D97 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005D9C 18                         byte_5700:	dc.b $18
00005D9D 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005DA2 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005DA7 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005DAC 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005DB1 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005DB6 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005DBB 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005DC0 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005DC5 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005DCA B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005DCF A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005DD4 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005DD9 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005DDE B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005DE3 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005DE8 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005DED D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005DF2 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005DF7 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005DFC E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005E01 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005E06 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005E0B F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005E10 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005E16 00                         		even
00005E16 00                         		even
00005E16                            
00005E16                            ; ---------------------------------------------------------------------------
00005E16                            ; Sprite mappings - chaos emeralds on the ending sequence
00005E16                            ; ---------------------------------------------------------------------------
00005E16                            Map_obj88:
00005E16                            	include "_maps\obj88.asm"
00005E16                            ; ---------------------------------------------------------------------------
00005E16                            ; Sprite mappings - chaos emeralds on the ending sequence
00005E16                            ; ---------------------------------------------------------------------------
00005E16 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005E1A 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005E1E 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005E22 0000                       		dc.w byte_57AC-Map_obj88
00005E24 01                         byte_5788:	dc.b 1
00005E25 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005E2A 01                         byte_578E:	dc.b 1
00005E2B F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005E30 01                         byte_5794:	dc.b 1
00005E31 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005E36 01                         byte_579A:	dc.b 1
00005E37 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005E3C 01                         byte_57A0:	dc.b 1
00005E3D F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005E42 01                         byte_57A6:	dc.b 1
00005E43 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00005E48 01                         byte_57AC:	dc.b 1
00005E49 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005E4E                            		even
00005E4E                            		even
00005E4E                            
00005E4E                            ; ---------------------------------------------------------------------------
00005E4E                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005E4E                            ; ---------------------------------------------------------------------------
00005E4E                            Map_obj89:
00005E4E                            	include "_maps\obj89.asm"
00005E4E                            ; ---------------------------------------------------------------------------
00005E4E                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005E4E                            ; ---------------------------------------------------------------------------
00005E4E 0000                       		dc.w byte_57B4-Map_obj89
00005E50 03                         byte_57B4:	dc.b 3
00005E51 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005E56 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005E5B F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005E60                            		even
00005E60                            		even
00005E60                            
00005E60                            ; ===========================================================================
00005E60                            ; ---------------------------------------------------------------------------
00005E60                            ; Credits ending sequence
00005E60                            ; ---------------------------------------------------------------------------
00005E60                            
00005E60                            Credits:				; XREF: GameModeArray
00005E60 6100 B9C6                  		bsr.w	ClearPLC
00005E64 6100 C202                  		bsr.w	Pal_FadeFrom
00005E68 4DF9 00C0 0004             		lea	($C00004).l,a6
00005E6E 3CBC 8004                  		move.w	#$8004,(a6)
00005E72 3CBC 8230                  		move.w	#$8230,(a6)
00005E76 3CBC 8407                  		move.w	#$8407,(a6)
00005E7A 3CBC 9001                  		move.w	#$9001,(a6)
00005E7E 3CBC 9200                  		move.w	#$9200,(a6)
00005E82 3CBC 8B03                  		move.w	#$8B03,(a6)
00005E86 3CBC 8720                  		move.w	#$8720,(a6)
00005E8A 4238 F64E                  		clr.b	($FFFFF64E).w
00005E8E 6100 B67E                  		bsr.w	ClearScreen
00005E92 43F8 D000                  		lea	($FFFFD000).w,a1
00005E96 7000                       		moveq	#0,d0
00005E98 323C 07FF                  		move.w	#$7FF,d1
00005E9C                            
00005E9C                            Cred_ClrObjRam:
00005E9C 22C0                       		move.l	d0,(a1)+
00005E9E 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005EA2                            
00005EA2 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005EAC 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005EB2 6100 B7D6                  		bsr.w	NemDec
00005EB6 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005EBA 7000                       		moveq	#0,d0
00005EBC 323C 001F                  		move.w	#$1F,d1
00005EC0                            
00005EC0                            Cred_ClrPallet:
00005EC0 22C0                       		move.l	d0,(a1)+
00005EC2 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005EC6                            
00005EC6 7003                       		moveq	#3,d0
00005EC8 6100 C448                  		bsr.w	PalLoad1	; load Sonic's pallet
00005ECC 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005ED2 4EB9 0000 0000             		jsr	ObjectsLoad
00005ED8 4EB9 0000 0000             		jsr	BuildSprites
00005EDE 6100 0000                  		bsr.w	EndingDemoLoad
00005EE2 7000                       		moveq	#0,d0
00005EE4 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005EE8 E948                       		lsl.w	#4,d0
00005EEA 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005EF0 45F2 0000                  		lea	(a2,d0.w),a2
00005EF4 7000                       		moveq	#0,d0
00005EF6 1012                       		move.b	(a2),d0
00005EF8 6700                       		beq.s	loc_5862
00005EFA 6100 B8CE                  		bsr.w	LoadPLC		; load level patterns
00005EFE                            
00005EFE                            loc_5862:
00005EFE 7001                       		moveq	#1,d0
00005F00 6100 B8C8                  		bsr.w	LoadPLC		; load standard	level patterns
00005F04 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005F0A 6100 C0B2                  		bsr.w	Pal_FadeTo
00005F0E                            
00005F0E                            Cred_WaitLoop:
00005F0E 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005F14 6100 CE38                  		bsr.w	DelayProgram
00005F18 6100 B91C                  		bsr.w	RunPLC_RAM
00005F1C 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005F20 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005F22 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005F26 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005F28 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005F2E 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005F32 4E75                       		rts	
00005F34                            
00005F34                            ; ---------------------------------------------------------------------------
00005F34                            ; Ending sequence demo loading subroutine
00005F34                            ; ---------------------------------------------------------------------------
00005F34                            
00005F34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005F34                            
00005F34                            
00005F34                            EndingDemoLoad:				; XREF: Credits
00005F34 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005F38 0240 000F                  		andi.w	#$F,d0
00005F3C D040                       		add.w	d0,d0
00005F3E 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005F42 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005F46 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005F4A 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005F50 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005F52 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005F58 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005F5E 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005F64 7000                       		moveq	#0,d0
00005F66 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005F6A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005F6E 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005F72 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005F76 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005F7C 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005F7E 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005F84 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005F88 303C 0008                  		move.w	#8,d0
00005F8C                            
00005F8C                            EndDemo_LampLoad:
00005F8C 24D9                       		move.l	(a1)+,(a2)+
00005F8E 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005F92                            
00005F92                            EndDemo_Exit:
00005F92 4E75                       		rts	
00005F94                            ; End of function EndingDemoLoad
00005F94                            
00005F94                            ; ===========================================================================
00005F94                            ; ---------------------------------------------------------------------------
00005F94                            ; Levels used in the end sequence demos
00005F94                            ; ---------------------------------------------------------------------------
00005F94                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005FA4                            
00005FA4                            ; ---------------------------------------------------------------------------
00005FA4                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005FA4                            ; ---------------------------------------------------------------------------
00005FA4                            EndDemo_LampVar:
00005FA4 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005FA6 0A00 062C 000D             		dc.w $A00, $62C, $D
00005FAC 0000 0000                  		dc.l 0
00005FB0 0000                       		dc.b 0,	0
00005FB2 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005FC6 0101                       		dc.b 1,	1
00005FC8                            ; ===========================================================================
00005FC8                            ; ---------------------------------------------------------------------------
00005FC8                            ; "TRY AGAIN" and "END"	screens
00005FC8                            ; ---------------------------------------------------------------------------
00005FC8                            
00005FC8                            TryAgainEnd:				; XREF: Credits
00005FC8 6100 B85E                  		bsr.w	ClearPLC
00005FCC 6100 C09A                  		bsr.w	Pal_FadeFrom
00005FD0 4DF9 00C0 0004             		lea	($C00004).l,a6
00005FD6 3CBC 8004                  		move.w	#$8004,(a6)
00005FDA 3CBC 8230                  		move.w	#$8230,(a6)
00005FDE 3CBC 8407                  		move.w	#$8407,(a6)
00005FE2 3CBC 9001                  		move.w	#$9001,(a6)
00005FE6 3CBC 9200                  		move.w	#$9200,(a6)
00005FEA 3CBC 8B03                  		move.w	#$8B03,(a6)
00005FEE 3CBC 8720                  		move.w	#$8720,(a6)
00005FF2 4238 F64E                  		clr.b	($FFFFF64E).w
00005FF6 6100 B516                  		bsr.w	ClearScreen
00005FFA 43F8 D000                  		lea	($FFFFD000).w,a1
00005FFE 7000                       		moveq	#0,d0
00006000 323C 07FF                  		move.w	#$7FF,d1
00006004                            
00006004                            TryAg_ClrObjRam:
00006004 22C0                       		move.l	d0,(a1)+
00006006 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
0000600A                            
0000600A 701D                       		moveq	#$1D,d0
0000600C 6100 B928                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00006010 43F8 FB80                  		lea	($FFFFFB80).w,a1
00006014 7000                       		moveq	#0,d0
00006016 323C 001F                  		move.w	#$1F,d1
0000601A                            
0000601A                            TryAg_ClrPallet:
0000601A 22C0                       		move.l	d0,(a1)+
0000601C 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00006020                            
00006020 7013                       		moveq	#$13,d0
00006022 6100 C2EE                  		bsr.w	PalLoad1	; load ending pallet
00006026 4278 FBC0                  		clr.w	($FFFFFBC0).w
0000602A 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00006030 4EB9 0000 0000             		jsr	ObjectsLoad
00006036 4EB9 0000 0000             		jsr	BuildSprites
0000603C 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00006042 6100 BF7A                  		bsr.w	Pal_FadeTo
00006046                            
00006046                            ; ---------------------------------------------------------------------------
00006046                            ; "TRY AGAIN" and "END"	screen main loop
00006046                            ; ---------------------------------------------------------------------------
00006046                            TryAg_MainLoop:
00006046 6100 B5AA                  		bsr.w	PauseGame
0000604A 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00006050 6100 CCFC                  		bsr.w	DelayProgram
00006054 4EB9 0000 0000             		jsr	ObjectsLoad
0000605A 4EB9 0000 0000             		jsr	BuildSprites
00006060 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00006066 6600                       		bne.s	TryAg_Exit	; if yes, branch
00006068 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
0000606C 6700                       		beq.s	TryAg_Exit	; if yes, branch
0000606E 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00006074 67D0                       		beq.s	TryAg_MainLoop
00006076                            
00006076                            TryAg_Exit:
00006076 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000607C 4E75                       		rts	
0000607E                            
0000607E                            ; ===========================================================================
0000607E                            ; ---------------------------------------------------------------------------
0000607E                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
0000607E                            ; ---------------------------------------------------------------------------
0000607E                            
0000607E                            Obj8B:					; XREF: Obj_Index
0000607E 7000                       		moveq	#0,d0
00006080 1028 0024                  		move.b	$24(a0),d0
00006084 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00006088 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
0000608C 4EF9 0000 0000             		jmp	DisplaySprite
00006092                            ; ===========================================================================
00006092 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00006094 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00006096 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00006098 0000                       		dc.w loc_5A8E-Obj8B_Index
0000609A                            ; ===========================================================================
0000609A                            
0000609A                            Obj8B_Main:				; XREF: Obj8B_Index
0000609A 5428 0024                  		addq.b	#2,$24(a0)
0000609E 317C 0120 0008             		move.w	#$120,8(a0)
000060A4 317C 00F4 000A             		move.w	#$F4,$A(a0)
000060AA 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
000060B2 317C 03E1 0002             		move.w	#$3E1,2(a0)
000060B8 117C 0000 0001             		move.b	#0,1(a0)
000060BE 117C 0002 0018             		move.b	#2,$18(a0)
000060C4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
000060CA 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000060D0 6700                       		beq.s	Obj8B_Animate	; if yes, branch
000060D2 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
000060D8 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
000060DE 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
000060E4 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
000060EA                            
000060EA                            Obj8B_Animate:				; XREF: Obj8B_Index
000060EA 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
000060F0 4EF9 0000 0000             		jmp	AnimateSprite
000060F6                            ; ===========================================================================
000060F6                            
000060F6                            Obj8B_Juggle:				; XREF: Obj8B_Index
000060F6 5428 0024                  		addq.b	#2,$24(a0)
000060FA 7002                       		moveq	#2,d0
000060FC 0828 0000 001C             		btst	#0,$1C(a0)
00006102 6700                       		beq.s	loc_5A6A
00006104 4440                       		neg.w	d0
00006106                            
00006106                            loc_5A6A:
00006106 43F8 D800                  		lea	($FFFFD800).w,a1
0000610A 7205                       		moveq	#5,d1
0000610C                            
0000610C                            loc_5A70:
0000610C 1340 003E                  		move.b	d0,$3E(a1)
00006110 3400                       		move.w	d0,d2
00006112 E742                       		asl.w	#3,d2
00006114 D529 0026                  		add.b	d2,$26(a1)
00006118 43E9 0040                  		lea	$40(a1),a1
0000611C 51C9 FFEE                  		dbf	d1,loc_5A70
00006120 5228 001A                  		addq.b	#1,$1A(a0)
00006124 317C 0070 0030             		move.w	#112,$30(a0)
0000612A                            
0000612A                            loc_5A8E:				; XREF: Obj8B_Index
0000612A 5368 0030                  		subq.w	#1,$30(a0)
0000612E 6A00                       		bpl.s	locret_5AA0
00006130 0868 0000 001C             		bchg	#0,$1C(a0)
00006136 117C 0002 0024             		move.b	#2,$24(a0)
0000613C                            
0000613C                            locret_5AA0:
0000613C 4E75                       		rts	
0000613E                            ; ===========================================================================
0000613E                            Ani_obj8B:
0000613E                            	include "_anim\obj8B.asm"
0000613E                            ; ---------------------------------------------------------------------------
0000613E                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
0000613E                            ; ---------------------------------------------------------------------------
0000613E 0000                       		dc.w byte_5AA8-Ani_obj8B
00006140 0000                       		dc.w byte_5AAC-Ani_obj8B
00006142 0000                       		dc.w byte_5AB0-Ani_obj8B
00006144 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00006148 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
0000614C 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
0000615E                            		even
0000615E                            		even
0000615E                            
0000615E                            ; ===========================================================================
0000615E                            ; ---------------------------------------------------------------------------
0000615E                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
0000615E                            ; ---------------------------------------------------------------------------
0000615E                            
0000615E                            Obj8C:					; XREF: Obj_Index
0000615E 7000                       		moveq	#0,d0
00006160 1028 0024                  		move.b	$24(a0),d0
00006164 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00006168 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
0000616C 4EF9 0000 0000             		jmp	DisplaySprite
00006172                            ; ===========================================================================
00006172 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00006174 0000                       		dc.w Obj8C_Move-Obj8C_Index
00006176                            ; ===========================================================================
00006176                            
00006176                            Obj8C_Main:				; XREF: Obj8C_Index
00006176 2248                       		movea.l	a0,a1
00006178 7400                       		moveq	#0,d2
0000617A 7600                       		moveq	#0,d3
0000617C 7205                       		moveq	#5,d1
0000617E 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00006182                            
00006182                            Obj8C_MakeEms:				; XREF: loc_5B42
00006182 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00006186 5429 0024                  		addq.b	#2,$24(a1)
0000618A 237C 0000 5E16 0004        		move.l	#Map_obj88,4(a1)
00006192 337C 03C5 0002             		move.w	#$3C5,2(a1)
00006198 137C 0000 0001             		move.b	#0,1(a1)
0000619E 137C 0001 0018             		move.b	#1,$18(a1)
000061A4 337C 0104 0008             		move.w	#$104,8(a1)
000061AA 337C 0120 0038             		move.w	#$120,$38(a1)
000061B0 337C 00EC 000A             		move.w	#$EC,$A(a1)
000061B6 3369 000A 003A             		move.w	$A(a1),$3A(a1)
000061BC 137C 001C 003C             		move.b	#$1C,$3C(a1)
000061C2 47F8 FE58                  		lea	($FFFFFE58).w,a3
000061C6                            
000061C6                            Obj8C_ChkEms:
000061C6 7000                       		moveq	#0,d0
000061C8 1038 FE57                  		move.b	($FFFFFE57).w,d0
000061CC 5340                       		subq.w	#1,d0
000061CE 6500                       		bcs.s	loc_5B42
000061D0                            
000061D0                            Obj8C_ChkEmLoop:
000061D0 B433 0000                  		cmp.b	(a3,d0.w),d2
000061D4 6600                       		bne.s	loc_5B3E
000061D6 5202                       		addq.b	#1,d2
000061D8 60EC                       		bra.s	Obj8C_ChkEms
000061DA                            ; ===========================================================================
000061DA                            
000061DA                            loc_5B3E:
000061DA 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
000061DE                            
000061DE                            loc_5B42:
000061DE 1342 001A                  		move.b	d2,$1A(a1)
000061E2 5229 001A                  		addq.b	#1,$1A(a1)
000061E6 5202                       		addq.b	#1,d2
000061E8 137C 0080 0026             		move.b	#$80,$26(a1)
000061EE 1343 001E                  		move.b	d3,$1E(a1)
000061F2 1343 001F                  		move.b	d3,$1F(a1)
000061F6 0643 000A                  		addi.w	#$A,d3
000061FA 43E9 0040                  		lea	$40(a1),a1
000061FE 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00006202                            
00006202                            Obj8C_Move:				; XREF: Obj8C_Index
00006202 4A68 003E                  		tst.w	$3E(a0)
00006206 6700                       		beq.s	locret_5BBA
00006208 4A28 001E                  		tst.b	$1E(a0)
0000620C 6700                       		beq.s	loc_5B78
0000620E 5328 001E                  		subq.b	#1,$1E(a0)
00006212 6600                       		bne.s	loc_5B80
00006214                            
00006214                            loc_5B78:
00006214 3028 003E                  		move.w	$3E(a0),d0
00006218 D168 0026                  		add.w	d0,$26(a0)
0000621C                            
0000621C                            loc_5B80:
0000621C 1028 0026                  		move.b	$26(a0),d0
00006220 6700                       		beq.s	loc_5B8C
00006222 0C00 0080                  		cmpi.b	#$80,d0
00006226 6600                       		bne.s	loc_5B96
00006228                            
00006228                            loc_5B8C:
00006228 4268 003E                  		clr.w	$3E(a0)
0000622C 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00006232                            
00006232                            loc_5B96:
00006232 4EB9 0000 2D80             		jsr	(CalcSine).l
00006238 7800                       		moveq	#0,d4
0000623A 1828 003C                  		move.b	$3C(a0),d4
0000623E C3C4                       		muls.w	d4,d1
00006240 E081                       		asr.l	#8,d1
00006242 C1C4                       		muls.w	d4,d0
00006244 E080                       		asr.l	#8,d0
00006246 D268 0038                  		add.w	$38(a0),d1
0000624A D068 003A                  		add.w	$3A(a0),d0
0000624E 3141 0008                  		move.w	d1,8(a0)
00006252 3140 000A                  		move.w	d0,$A(a0)
00006256                            
00006256                            locret_5BBA:
00006256 4E75                       		rts	
00006258                            ; ===========================================================================
00006258                            ; ---------------------------------------------------------------------------
00006258                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00006258                            ; ---------------------------------------------------------------------------
00006258                            Map_obj8B:
00006258                            	include "_maps\obj8B.asm"
00006258                            ; ---------------------------------------------------------------------------
00006258                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00006258                            ; ---------------------------------------------------------------------------
00006258 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
0000625C 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00006260 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00006264 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00006268 08                         byte_5BCC:	dc.b 8
00006269 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
0000626E F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006273 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00006278 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
0000627D 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006282 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006287 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000628C 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006291 08                         byte_5BF5:	dc.b 8
00006292 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006297 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
0000629C E805 0800 00               		dc.b $E8, 5, 8,	0, 0
000062A1 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
000062A6 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
000062AB 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
000062B0 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000062B5 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000062BA 08                         byte_5C1E:	dc.b 8
000062BB E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
000062C0 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
000062C5 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
000062CA F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
000062CF 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
000062D4 0106 0823 00               		dc.b 1,	6, 8, $23, 0
000062D9 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000062DE 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000062E3 08                         byte_5C47:	dc.b 8
000062E4 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
000062E9 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
000062EE E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
000062F3 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
000062F8 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
000062FD 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006302 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006307 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000630C 0C                         byte_5C70:	dc.b $C
0000630D ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00006312 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00006317 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
0000631C 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00006321 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00006326 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
0000632B 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00006330 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00006335 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
0000633A 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
0000633F 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006344 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006349 0A                         byte_5CAD:	dc.b $A
0000634A D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
0000634F DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006354 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006359 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
0000635E DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006363 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006368 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
0000636D 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006372 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006377 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
0000637C 0A                         byte_5CE0:	dc.b $A
0000637D C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006382 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006387 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
0000638C C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006391 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006396 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
0000639B 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
000063A0 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
000063A5 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
000063AA 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
000063AF 0C                         byte_5D13:	dc.b $C
000063B0 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
000063B5 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
000063BA 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
000063BF 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
000063C4 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
000063C9 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
000063CE 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
000063D3 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
000063D8 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
000063DD 180C 0087 00               		dc.b $18, $C, 0, $87, 0
000063E2 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000063E7 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000063EC                            		even
000063EC                            		even
000063EC                            
000063EC                            ; ---------------------------------------------------------------------------
000063EC                            ; Ending sequence demos
000063EC                            ; ---------------------------------------------------------------------------
000063EC                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
0000641A                            		even
0000641A                            Demo_EndMZ:	incbin	demodata\e_mz.bin
0000645A                            		even
0000645A                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
0000648A                            		even
0000648A                            Demo_EndLZ:	incbin	demodata\e_lz.bin
000064BA                            		even
000064BA                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
000064DA                            		even
000064DA                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
000064FA                            		even
000064FA                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
0000652A                            		even
0000652A                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
0000655A                            		even
0000655A                            
0000655A                            ; ---------------------------------------------------------------------------
0000655A                            ; Subroutine to	load level boundaries and start	locations
0000655A                            ; ---------------------------------------------------------------------------
0000655A                            
0000655A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000655A                            
0000655A                            
0000655A                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
0000655A 7000                       		moveq	#0,d0
0000655C 11C0 F740                  		move.b	d0,($FFFFF740).w
00006560 11C0 F741                  		move.b	d0,($FFFFF741).w
00006564 11C0 F746                  		move.b	d0,($FFFFF746).w
00006568 11C0 F748                  		move.b	d0,($FFFFF748).w
0000656C 11C0 F742                  		move.b	d0,($FFFFF742).w
00006570 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006574 ED08                       		lsl.b	#6,d0
00006576 E848                       		lsr.w	#4,d0
00006578 3200                       		move.w	d0,d1
0000657A D040                       		add.w	d0,d0
0000657C D041                       		add.w	d1,d0
0000657E 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006582 3018                       		move.w	(a0)+,d0
00006584 31C0 F730                  		move.w	d0,($FFFFF730).w
00006588 2018                       		move.l	(a0)+,d0
0000658A 21C0 F728                  		move.l	d0,($FFFFF728).w
0000658E 21C0 F720                  		move.l	d0,($FFFFF720).w
00006592 2018                       		move.l	(a0)+,d0
00006594 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00006598 21C0 F724                  		move.l	d0,($FFFFF724).w
0000659C 3038 F728                  		move.w	($FFFFF728).w,d0
000065A0 0640 0240                  		addi.w	#$240,d0
000065A4 31C0 F732                  		move.w	d0,($FFFFF732).w
000065A8 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
000065AE 3018                       		move.w	(a0)+,d0
000065B0 31C0 F73E                  		move.w	d0,($FFFFF73E).w
000065B4 6000 0000                  		bra.w	LevSz_ChkLamp
000065B8                            ; ===========================================================================
000065B8                            ; ---------------------------------------------------------------------------
000065B8                            ; Level size array and ending start location array
000065B8                            ; ---------------------------------------------------------------------------
000065B8                            LevelSizeArray:        ; GHZ
000065B8 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
000065C4 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
000065D0 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
000065DC 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
000065E8                                    ; LZ
000065E8 0004 0000 19BF 0000 0530+          dc.w $0004, $0000, $19BF, $0000, $0530, $0060 ; Act 1
000065F4 0004 0000 10AF 0000 0720+          dc.w $0004, $0000, $10AF, $0000, $0720, $0060 ; Act 2
00006600 0004 0000 1D00 FF00 0800+          dc.w $0004, $0000, $1D00, $FF00, $0800, $0060 ; Act 3
0000660C 0004 0000 20BF 0000 0720+          dc.w $0004, $0000, $20BF, $0000, $0720, $0060 ; Act 4 (Scrap Brain Act 3)
00006618                                    ; MZ
00006618 0004 0000 17BF 0000 01D0+          dc.w $0004, $0000, $17BF, $0000, $01D0, $0060 ; Act 1
00006624 0004 0000 17BF 0000 0520+          dc.w $0004, $0000, $17BF, $0000, $0520, $0060 ; Act 2
00006630 0004 0000 1800 0000 0720+          dc.w $0004, $0000, $1800, $0000, $0720, $0060 ; Act 3
0000663C 0004 0000 16BF 0000 0720+          dc.w $0004, $0000, $16BF, $0000, $0720, $0060 ; Act 4 (Unused)
00006648                                    ; SLZ
00006648 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 1
00006654 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 2
00006660 0004 0000 2000 0000 06C0+          dc.w $0004, $0000, $2000, $0000, $06C0, $0060 ; Act 3
0000666C 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
00006678                                    ; SYZ
00006678 0004 0000 22C0 0000 0420+          dc.w $0004, $0000, $22C0, $0000, $0420, $0060 ; Act 1
00006684 0004 0000 28C0 0000 0520+          dc.w $0004, $0000, $28C0, $0000, $0520, $0060 ; Act 2
00006690 0004 0000 2C00 0000 0620+          dc.w $0004, $0000, $2C00, $0000, $0620, $0060 ; Act 3
0000669C 0004 0000 2EC0 0000 0620+          dc.w $0004, $0000, $2EC0, $0000, $0620, $0060 ; Act 4 (Unused)
000066A8                                    ; SBZ
000066A8 0004 0000 21C0 0000 0720+          dc.w $0004, $0000, $21C0, $0000, $0720, $0060 ; Act 1
000066B4 0004 0000 1E40 FF00 0800+          dc.w $0004, $0000, $1E40, $FF00, $0800, $0060 ; Act 2
000066C0 0004 2080 2460 0510 0510+          dc.w $0004, $2080, $2460, $0510, $0510, $0060 ; Act 3 (Final Zone)
000066CC 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
000066D8                                    ; Ending
000066D8 0004 0000 0500 0110 0110+          dc.w $0004, $0000, $0500, $0110, $0110, $0060 ; Act 1 (Good Ending)
000066E4 0004 0000 0DC0 0110 0110+          dc.w $0004, $0000, $0DC0, $0110, $0110, $0060 ; Act 2 (Bad Ending)
000066F0 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 3 (Unused)
000066FC 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 4 (Unused)
00006708                                    ; BHZ
00006708 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
00006714 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
00006720 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
0000672C 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
00006738                                    even
00006738                            
00006738                            ; ===========================================================================
00006738                            
00006738                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
00006738 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
0000673C 6700                       		beq.s	LevSz_StartLoc	; if not, branch
0000673E 4EB9 0000 0000             		jsr	Obj79_LoadInfo
00006744 3238 D008                  		move.w	($FFFFD008).w,d1
00006748 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000674C 6000 0000                  		bra.w	loc_60D0
00006750                            ; ===========================================================================
00006750                            
00006750                            
00006750                            LevSz_StartLoc:				; XREF: LevelSizeLoad
00006750 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006754 ED08                       		lsl.b	#6,d0
00006756 E848                       		lsr.w	#4,d0
00006758 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
0000675C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00006760 6A00 0000                  		bpl.w	LevSz_SonicPos	; if not, branch
00006764 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00006768 5340                       		subq.w	#1,d0
0000676A E548                       		lsl.w	#2,d0
0000676C 43FB 0000                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006770 6000 0000                  		bra.w	LevSz_SonicPos
00006774                            
00006774                            EndingStLocArray:
00006774                            		incbin	misc\sloc_end.bin
00006794                            		even
00006794                            		
00006794                            ; ===========================================================================
00006794                            ; ---------------------------------------------------------------------------
00006794                            ; Sonic	start location array
00006794                            ; ---------------------------------------------------------------------------
00006794                            StartLocArray:	incbin	misc\sloc_lev.bin
00006814                            		even
00006814                            
00006814                            LevSz_SonicPos:
00006814 7200                       		moveq	#0,d1
00006816 3219                       		move.w	(a1)+,d1
00006818 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
0000681C 7000                       		moveq	#0,d0
0000681E 3011                       		move.w	(a1),d0
00006820 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00006824                            
00006824                            loc_60D0:				; XREF: LevSz_ChkLamp
00006824 0441 00A0                  		subi.w	#$A0,d1
00006828 6400                       		bcc.s	loc_60D8
0000682A 7200                       		moveq	#0,d1
0000682C                            
0000682C                            loc_60D8:
0000682C 3438 F72A                  		move.w	($FFFFF72A).w,d2
00006830 B242                       		cmp.w	d2,d1
00006832 6500                       		bcs.s	loc_60E2
00006834 3202                       		move.w	d2,d1
00006836                            
00006836                            loc_60E2:
00006836 31C1 F700                  		move.w	d1,($FFFFF700).w
0000683A 0440 0060                  		subi.w	#$60,d0
0000683E 6400                       		bcc.s	loc_60EE
00006840 7000                       		moveq	#0,d0
00006842                            
00006842                            loc_60EE:
00006842 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006846 6D00                       		blt.s	loc_60F8
00006848 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000684C                            
0000684C                            loc_60F8:
0000684C 31C0 F704                  		move.w	d0,($FFFFF704).w
00006850 6100 0000                  		bsr.w	BgScrollSpeed
00006854 7000                       		moveq	#0,d0
00006856 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000685A E508                       		lsl.b	#2,d0
0000685C 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00006862 6000 0000                  		bra.w	LevSz_Unk
00006866                            
00006866                            ; ---------------------------------------------------------------------------
00006866                            ; Which	256x256	tiles contain loops or roll-tunnels
00006866                            ; ---------------------------------------------------------------------------
00006866                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00006866                            ; loop,	loop, tunnel, tunnel
00006866                            ; ---------------------------------------------------------------------------
00006866                            LoopTileNums:	incbin	misc\loopnums.bin
00006886                            		even
00006886                            ; this is from the cwa source code i will share kaito x gakupo mpreg if this does not work i swear t ogod if this does not
00006886                            ; ITS GONJE HELP
00006886                            ; ===========================================================================
00006886                            
00006886                            LevSz_Unk:				; XREF: LevelSizeLoad
00006886 7000                       		moveq	#0,d0
00006888 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000688C E748                       		lsl.w	#3,d0
0000688E 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
00006892 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
00006896 24D9                       		move.l	(a1)+,(a2)+
00006898 24D9                       		move.l	(a1)+,(a2)+
0000689A 4E75                       		rts	
0000689C                            ; End of function LevelSizeLoad
0000689C                            
0000689C                            ; ===========================================================================
0000689C 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
000068A4 0800 0100 0100 0000        		dc.l $8000100, $1000000
000068AC 0800 0100 0100 0000        		dc.l $8000100, $1000000
000068B4 0800 0100 0100 0000        		dc.l $8000100, $1000000
000068BC 0800 0100 0100 0000        		dc.l $8000100, $1000000
000068C4 0800 0100 0100 0000        		dc.l $8000100, $1000000
000068CC 0070 0100 0100 0100        		dc.l $700100, $1000100
000068D4                            
000068D4                            ; ---------------------------------------------------------------------------
000068D4                            ; Subroutine to	set scroll speed of some backgrounds
000068D4                            ; ---------------------------------------------------------------------------
000068D4                            
000068D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000068D4                            
000068D4                            
000068D4                            BgScrollSpeed:				; XREF: LevelSizeLoad
000068D4 4A38 FE30                  		tst.b	($FFFFFE30).w
000068D8 6600                       		bne.s	loc_6206
000068DA 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000068DE 31C0 F714                  		move.w	d0,($FFFFF714).w
000068E2 31C1 F708                  		move.w	d1,($FFFFF708).w
000068E6 31C1 F710                  		move.w	d1,($FFFFF710).w
000068EA 31C1 F718                  		move.w	d1,($FFFFF718).w
000068EE                            
000068EE                            loc_6206:
000068EE 7400                       		moveq	#0,d2
000068F0 1438 FE10                  		move.b	($FFFFFE10).w,d2
000068F4 D442                       		add.w	d2,d2
000068F6 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
000068FA 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
000068FE                            ; End of function BgScrollSpeed
000068FE                            
000068FE                            ; ===========================================================================
000068FE 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006902 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00006906 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
0000690A 0000 0000                  		dc.w BgScroll_End-BgScroll_Index, BgScroll_GHZ-BgScroll_Index
0000690E                            ; ===========================================================================
0000690E                            
0000690E                            BgScroll_GHZ:				; XREF: BgScroll_Index
0000690E 6000 0000                  		bra.w	Deform_GHZ
00006912                            ; ===========================================================================
00006912                            
00006912                            BgScroll_LZ:				; XREF: BgScroll_Index
00006912 E280                       		asr.l	#1,d0
00006914 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006918 4E75                       		rts	
0000691A                            ; ===========================================================================
0000691A                            
0000691A                            BgScroll_MZ:				; XREF: BgScroll_Index
0000691A 4E75                       		rts	
0000691C                            ; ===========================================================================
0000691C                            
0000691C                            BgScroll_SLZ:				; XREF: BgScroll_Index
0000691C E280                       		asr.l	#1,d0
0000691E 0640 00C0                  		addi.w	#$C0,d0
00006922 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006926 4E75                       		rts	
00006928                            ; ===========================================================================
00006928                            
00006928                            BgScroll_SYZ:				; XREF: BgScroll_Index
00006928 E980                       		asl.l	#4,d0
0000692A 2400                       		move.l	d0,d2
0000692C E380                       		asl.l	#1,d0
0000692E D082                       		add.l	d2,d0
00006930 E080                       		asr.l	#8,d0
00006932 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006936 31C0 F714                  		move.w	d0,($FFFFF714).w
0000693A 4E75                       		rts	
0000693C                            ; ===========================================================================
0000693C                            
0000693C                            BgScroll_SBZ:				; XREF: BgScroll_Index
0000693C E980                       		asl.l	#4,d0
0000693E E380                       		asl.l	#1,d0
00006940 E080                       		asr.l	#8,d0
00006942 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006946 4E75                       		rts	
00006948                            ; ===========================================================================
00006948                            
00006948                            BgScroll_End:				; XREF: BgScroll_Index
00006948 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
0000694E 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006954 4E75                       		rts	
00006956                            ; ===========================================================================
00006956 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
0000695C 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006962 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
00006968 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
0000696E 4E75                       		rts
00006970                            
00006970                            ; ---------------------------------------------------------------------------
00006970                            ; Background layer deformation subroutines
00006970                            ; ---------------------------------------------------------------------------
00006970                            
00006970                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006970                            
00006970                            
00006970                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00006970 4A38 F744                  		tst.b	($FFFFF744).w
00006974 6700                       		beq.s	loc_628E
00006976 4E75                       		rts	
00006978                            ; ===========================================================================
00006978                            
00006978                            loc_628E:
00006978 4278 F754                  		clr.w	($FFFFF754).w
0000697C 4278 F756                  		clr.w	($FFFFF756).w
00006980 4278 F758                  		clr.w	($FFFFF758).w
00006984 4278 F75A                  		clr.w	($FFFFF75A).w
00006988 6100 0000                  		bsr.w	ScrollHoriz
0000698C 6100 0000                  		bsr.w	ScrollVertical
00006990 6100 0000                  		bsr.w	DynScrResizeLoad
00006994 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
0000699A 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
000069A0 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
000069A6 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000069AC 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
000069B2 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
000069B8 4879 0000 0000             		pea	Deform_Ripple
000069BE 7000                       		moveq	#0,d0
000069C0 1038 FE10                  		move.b	($FFFFFE10).w,d0
000069C4 D040                       		add.w	d0,d0
000069C6 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
000069CA 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
000069CE                            ; End of function DeformBgLayer
000069CE                            
000069CE                            ; ===========================================================================
000069CE                            ; ---------------------------------------------------------------------------
000069CE                            ; Offset index for background layer deformation	code
000069CE                            ; ---------------------------------------------------------------------------
000069CE 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
000069D2 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
000069D6 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
000069DA 0000 0000                  		dc.w Deform_GHZ-Deform_Index, Deform_GHZ-Deform_Index
000069DE                            ; ---------------------------------------------------------------------------
000069DE                            ; Green	Hill Zone background layer deformation code
000069DE                            ; ---------------------------------------------------------------------------
000069DE                            
000069DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000069DE                            
000069DE                            
000069DE                            Deform_GHZ:				; XREF: Deform_Index
000069DE 3838 F73A                  		move.w	($FFFFF73A).w,d4
000069E2 48C4                       		ext.l	d4
000069E4 EB84                       		asl.l	#5,d4
000069E6 2204                       		move.l	d4,d1
000069E8 E384                       		asl.l	#1,d4
000069EA D881                       		add.l	d1,d4
000069EC 7A00                       		moveq	#0,d5
000069EE 6100 0000                  		bsr.w	ScrollBlock1
000069F2 6100 0000                  		bsr.w	ScrollBlock4
000069F6 43F8 CC00                  		lea	($FFFFCC00).w,a1
000069FA 3038 F704                  		move.w	($FFFFF704).w,d0
000069FE 0240 07FF                  		andi.w	#$7FF,d0
00006A02 EA48                       		lsr.w	#5,d0
00006A04 4440                       		neg.w	d0
00006A06 0640 0026                  		addi.w	#$26,d0
00006A0A 31C0 F714                  		move.w	d0,($FFFFF714).w
00006A0E 3800                       		move.w	d0,d4
00006A10 6100 0000                  		bsr.w	ScrollBlock3
00006A14 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006A1A 323C 006F                  		move.w	#$6F,d1
00006A1E 9244                       		sub.w	d4,d1
00006A20 3038 F700                  		move.w	($FFFFF700).w,d0
00006A24 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00006A2A 6600                       		bne.s	loc_633C
00006A2C 7000                       		moveq	#0,d0
00006A2E                            
00006A2E                            loc_633C:
00006A2E 4440                       		neg.w	d0
00006A30 4840                       		swap	d0
00006A32 3038 F708                  		move.w	($FFFFF708).w,d0
00006A36 4440                       		neg.w	d0
00006A38                            
00006A38                            loc_6346:
00006A38 22C0                       		move.l	d0,(a1)+
00006A3A 51C9 FFFC                  		dbf	d1,loc_6346
00006A3E 323C 0027                  		move.w	#$27,d1
00006A42 3038 F710                  		move.w	($FFFFF710).w,d0
00006A46 4440                       		neg.w	d0
00006A48                            
00006A48                            loc_6356:
00006A48 22C0                       		move.l	d0,(a1)+
00006A4A 51C9 FFFC                  		dbf	d1,loc_6356
00006A4E 3038 F710                  		move.w	($FFFFF710).w,d0
00006A52 0640 0000                  		addi.w	#0,d0
00006A56 3438 F700                  		move.w	($FFFFF700).w,d2
00006A5A 0642 FE00                  		addi.w	#-$200,d2
00006A5E 9440                       		sub.w	d0,d2
00006A60 48C2                       		ext.l	d2
00006A62 E182                       		asl.l	#8,d2
00006A64 85FC 0068                  		divs.w	#$68,d2
00006A68 48C2                       		ext.l	d2
00006A6A E182                       		asl.l	#8,d2
00006A6C 7600                       		moveq	#0,d3
00006A6E 3600                       		move.w	d0,d3
00006A70 323C 0047                  		move.w	#$47,d1
00006A74 D244                       		add.w	d4,d1
00006A76                            
00006A76                            loc_6384:
00006A76 3003                       		move.w	d3,d0
00006A78 4440                       		neg.w	d0
00006A7A 22C0                       		move.l	d0,(a1)+
00006A7C 4843                       		swap	d3
00006A7E D682                       		add.l	d2,d3
00006A80 4843                       		swap	d3
00006A82 51C9 FFF2                  		dbf	d1,loc_6384
00006A86 4E75                       		rts	
00006A88                            ; End of function Deform_GHZ
00006A88                            
00006A88                            ; ---------------------------------------------------------------------------
00006A88                            ; Labyrinth Zone background layer deformation code
00006A88                            ; ---------------------------------------------------------------------------
00006A88                            
00006A88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A88                            
00006A88                            
00006A88                            Deform_LZ:				; XREF: Deform_Index
00006A88 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006A8C 48C4                       		ext.l	d4
00006A8E EF84                       		asl.l	#7,d4
00006A90 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006A94 48C5                       		ext.l	d5
00006A96 EF85                       		asl.l	#7,d5
00006A98 6100 0000                  		bsr.w	ScrollBlock1
00006A9C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006AA2 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006AA6 323C 00DF                  		move.w	#224-1,d1
00006AAA 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00006AAE 6A00                       		bpl.s	@60hz
00006AB0 323C 00EF                  		move.w	#240-1,d1
00006AB4                            @60hz:
00006AB4 3038 F700                  		move.w	($FFFFF700).w,d0
00006AB8 4440                       		neg.w	d0
00006ABA 4840                       		swap	d0
00006ABC 3038 F708                  		move.w	($FFFFF708).w,d0
00006AC0 4440                       		neg.w	d0
00006AC2                            
00006AC2                            loc_63C6:
00006AC2 22C0                       		move.l	d0,(a1)+
00006AC4 51C9 FFFC                  		dbf	d1,loc_63C6
00006AC8 3038 F646                  		move.w	($FFFFF646).w,d0
00006ACC 9078 F704                  		sub.w	($FFFFF704).w,d0
00006AD0 4E75                       		rts	
00006AD2                            ; End of function Deform_LZ
00006AD2                            
00006AD2                            ; ---------------------------------------------------------------------------
00006AD2                            ; Marble Zone background layer deformation code
00006AD2                            ; ---------------------------------------------------------------------------
00006AD2                            
00006AD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006AD2                            
00006AD2                            
00006AD2                            Deform_MZ:				; XREF: Deform_Index
00006AD2 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006AD6 48C4                       		ext.l	d4
00006AD8 ED84                       		asl.l	#6,d4
00006ADA 2204                       		move.l	d4,d1
00006ADC E384                       		asl.l	#1,d4
00006ADE D881                       		add.l	d1,d4
00006AE0 7A00                       		moveq	#0,d5
00006AE2 6100 0000                  		bsr.w	ScrollBlock1
00006AE6 303C 0200                  		move.w	#$200,d0
00006AEA 3238 F704                  		move.w	($FFFFF704).w,d1
00006AEE 0441 01C8                  		subi.w	#$1C8,d1
00006AF2 6500                       		bcs.s	loc_6402
00006AF4 3401                       		move.w	d1,d2
00006AF6 D241                       		add.w	d1,d1
00006AF8 D242                       		add.w	d2,d1
00006AFA E441                       		asr.w	#2,d1
00006AFC D041                       		add.w	d1,d0
00006AFE                            
00006AFE                            loc_6402:
00006AFE 31C0 F714                  		move.w	d0,($FFFFF714).w
00006B02 6100 0000                  		bsr.w	ScrollBlock3
00006B06 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006B0C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006B10 323C 00DF                  		move.w	#224-1,d1
00006B14 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00006B18 6A00                       		bpl.s	@60hz
00006B1A 323C 00EF                  		move.w	#240-1,d1
00006B1E                            @60hz:
00006B1E 3038 F700                  		move.w	($FFFFF700).w,d0
00006B22 4440                       		neg.w	d0
00006B24 4840                       		swap	d0
00006B26 3038 F708                  		move.w	($FFFFF708).w,d0
00006B2A 4440                       		neg.w	d0
00006B2C                            
00006B2C                            loc_6426:
00006B2C 22C0                       		move.l	d0,(a1)+
00006B2E 51C9 FFFC                  		dbf	d1,loc_6426
00006B32 4E75                       		rts	
00006B34                            ; End of function Deform_MZ
00006B34                            
00006B34                            ; ---------------------------------------------------------------------------
00006B34                            ; Star Light Zone background layer deformation code
00006B34                            ; ---------------------------------------------------------------------------
00006B34                            
00006B34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B34                            
00006B34                            
00006B34                            Deform_SLZ:				; XREF: Deform_Index
00006B34 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006B38 48C4                       		ext.l	d4
00006B3A EB84                       		asl.l	#5,d4
00006B3C 2204                       		move.l	d4,d1
00006B3E E384                       		asl.l	#1,d4
00006B40 D881                       		add.l	d1,d4
00006B42 7A00                       		moveq	#0,d5
00006B44 6100 0000                  		bsr.w	ScrollBlock1
00006B48 6100 0000                  		bsr.w	ScrollBlock3
00006B4C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006B50                            	;	move.w	($FFFFF704).w,d0
00006B50                            	;	andi.w	#$7FF,d0
00006B50 EA48                       		lsr.w	#5,d0
00006B52 4440                       		neg.w	d0
00006B54 0640 0026                  		addi.w	#$26,d0
00006B58 31C0 F714                  		move.w	d0,($FFFFF714).w
00006B5C 3800                       		move.w	d0,d4
00006B5E                            	;	bsr.w	ScrollBlock3
00006B5E 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
00006B64 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
00006B68                            
00006B68 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B6C 4440                       		neg.w	d0			; negate (positive to negative)
00006B6E 4840                       		swap	d0			; send to the left side of d0
00006B70 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B74 45F8 A800                  		lea	($FFFFA800).w,a2
00006B78 069A 0000 5000             		addi.l	#$5000,(a2)+
00006B7E 069A 0000 C000             		addi.l	#$C000,(a2)+
00006B84 3038 A800                  		move.w	($FFFFA800).w,d0
00006B88 4440                       		neg.w	d0			; negate (positive to negative)
00006B8A E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006B8C 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B90                            slz_DeformLoop_1:
00006B90 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B92 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
00006B96                            
00006B96 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B9A 4440                       		neg.w	d0			; negate (positive to negative)
00006B9C 4840                       		swap	d0			; send to the left side of d0
00006B9E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006BA2 45F8 A800                  		lea	($FFFFA800).w,a2
00006BA6 069A 0000 5000             		addi.l	#$5000,(a2)+
00006BAC 069A 0000 C000             		addi.l	#$C000,(a2)+
00006BB2 3038 A800                  		move.w	($FFFFA800).w,d0
00006BB6 4440                       		neg.w	d0			; negate (positive to negative)
00006BB8 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006BBA 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006BBE                            slz_DeformLoop_2:
00006BBE 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006BC0 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
00006BC4                            
00006BC4 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006BC8 4440                       		neg.w	d0			; negate (positive to negative)
00006BCA 4840                       		swap	d0			; send to the left side of d0
00006BCC 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006BD0 45F8 A800                  		lea	($FFFFA800).w,a2
00006BD4 069A 0000 5000             		addi.l	#$5000,(a2)+
00006BDA 069A 0000 C000             		addi.l	#$C000,(a2)+
00006BE0 3038 A800                  		move.w	($FFFFA800).w,d0
00006BE4 4440                       		neg.w	d0			; negate (positive to negative)
00006BE6 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006BE8 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006BEC                            slz_DeformLoop_3:
00006BEC 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006BEE 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
00006BF2                            
00006BF2 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006BF6 4440                       		neg.w	d0			; negate (positive to negative)
00006BF8 4840                       		swap	d0			; send to the left side of d0
00006BFA 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006BFE 45F8 A800                  		lea	($FFFFA800).w,a2
00006C02 069A 0000 5000             		addi.l	#$5000,(a2)+
00006C08 069A 0000 C000             		addi.l	#$C000,(a2)+
00006C0E 3038 A800                  		move.w	($FFFFA800).w,d0
00006C12 4440                       		neg.w	d0			; negate (positive to negative)
00006C14 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006C16 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C1A                            slz_DeformLoop_4:
00006C1A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C1C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
00006C20                            
00006C20 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C24 4440                       		neg.w	d0			; negate (positive to negative)
00006C26 4840                       		swap	d0			; send to the left side of d0
00006C28 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C2C 45F8 A800                  		lea	($FFFFA800).w,a2
00006C30 069A 0000 5000             		addi.l	#$5000,(a2)+
00006C36 069A 0000 C000             		addi.l	#$C000,(a2)+
00006C3C 3038 A800                  		move.w	($FFFFA800).w,d0
00006C40 4440                       		neg.w	d0			; negate (positive to negative)
00006C42 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006C44 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C48                            slz_DeformLoop_5:
00006C48 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C4A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
00006C4E                            
00006C4E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C52 4440                       		neg.w	d0			; negate (positive to negative)
00006C54 4840                       		swap	d0			; send to the left side of d0
00006C56 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C5A 4440                       		neg.w	d0			; negate (positive to negative)
00006C5C EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006C5E 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C62                            slz_DeformLoop_6:
00006C62 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C64 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
00006C68                            
00006C68 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C6C 4440                       		neg.w	d0			; negate (positive to negative)
00006C6E 4840                       		swap	d0			; send to the left side of d0
00006C70 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C74 4440                       		neg.w	d0			; negate (positive to negative)
00006C76 EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
00006C78 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C7C                            slz_DeformLoop_7:
00006C7C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C7E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
00006C82                            
00006C82 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C86 4440                       		neg.w	d0			; negate (positive to negative)
00006C88 4840                       		swap	d0			; send to the left side of d0
00006C8A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C8E 4440                       		neg.w	d0			; negate (positive to negative)
00006C90 EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
00006C92 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C96                            slz_DeformLoop_8:
00006C96 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C98 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
00006C9C                            
00006C9C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006CA0 4440                       		neg.w	d0			; negate (positive to negative)
00006CA2 4840                       		swap	d0			; send to the left side of d0
00006CA4 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006CA8 4440                       		neg.w	d0			; negate (positive to negative)
00006CAA EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006CAC 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006CB0                            slz_DeformLoop_9:
00006CB0 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006CB2 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
00006CB6                            
00006CB6 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006CBA 4440                       		neg.w	d0			; negate (positive to negative)
00006CBC 4840                       		swap	d0			; send to the left side of d0
00006CBE 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006CC2 4440                       		neg.w	d0			; negate (positive to negative)
00006CC4 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006CC6 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006CCA                            slz_DeformLoop_10:
00006CCA 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006CCC 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
00006CD0                            
00006CD0 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006CD4 4440                       		neg.w	d0			; negate (positive to negative)
00006CD6 4840                       		swap	d0			; send to the left side of d0
00006CD8 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006CDC 4440                       		neg.w	d0			; negate (positive to negative)
00006CDE E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006CE0 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006CE4                            slz_DeformLoop_11:
00006CE4 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006CE6 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
00006CEA                            
00006CEA 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006CEE 4440                       		neg.w	d0			; negate (positive to negative)
00006CF0 4840                       		swap	d0			; send to the left side of d0
00006CF2 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006CF6 4440                       		neg.w	d0			; negate (positive to negative)
00006CF8 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006CFA 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006CFE                            slz_DeformLoop_12:
00006CFE 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006D00 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
00006D04                            
00006D04 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006D08 4440                       		neg.w	d0			; negate (positive to negative)
00006D0A 4840                       		swap	d0			; send to the left side of d0
00006D0C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006D10 4440                       		neg.w	d0			; negate (positive to negative)
00006D12 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006D14 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006D18                            slz_DeformLoop_13:
00006D18 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006D1A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
00006D1E 4E75                       		rts	
00006D20                            ; End of function Deform_SLZ
00006D20 4E75                       		rts	
00006D22                            ; End of function Deform_SLZ_2
00006D22                            
00006D22                            ; ---------------------------------------------------------------------------
00006D22                            ; Spring Yard Zone background layer deformation	code
00006D22                            ; ---------------------------------------------------------------------------
00006D22                            
00006D22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D22                            
00006D22                            
00006D22                            Deform_SYZ:				; XREF: Deform_Index
00006D22 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006D26 48C4                       		ext.l	d4
00006D28 ED84                       		asl.l	#6,d4
00006D2A 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006D2E 48C5                       		ext.l	d5
00006D30 E985                       		asl.l	#4,d5
00006D32 2205                       		move.l	d5,d1
00006D34 E385                       		asl.l	#1,d5
00006D36 DA81                       		add.l	d1,d5
00006D38 6100 0000                  		bsr.w	ScrollBlock1
00006D3C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006D42 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006D46 323C 00DF                  		move.w	#224-1,d1
00006D4A 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00006D4E 6A00                       		bpl.s	@60hz
00006D50 323C 00EF                  		move.w	#240-1,d1
00006D54                            @60hz:
00006D54 3038 F700                  		move.w	($FFFFF700).w,d0
00006D58 4440                       		neg.w	d0
00006D5A 4840                       		swap	d0
00006D5C 3038 F708                  		move.w	($FFFFF708).w,d0
00006D60 4440                       		neg.w	d0
00006D62                            
00006D62                            loc_653C:
00006D62 22C0                       		move.l	d0,(a1)+
00006D64 51C9 FFFC                  		dbf	d1,loc_653C
00006D68 4E75                       		rts	
00006D6A                            ; End of function Deform_SYZ
00006D6A                            
00006D6A                            ; ---------------------------------------------------------------------------
00006D6A                            ; Scrap	Brain Zone background layer deformation	code
00006D6A                            ; ---------------------------------------------------------------------------
00006D6A                            
00006D6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D6A                            
00006D6A                            
00006D6A                            Deform_SBZ:				; XREF: Deform_Index
00006D6A 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006D6E 48C4                       		ext.l	d4
00006D70 ED84                       		asl.l	#6,d4
00006D72 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006D76 48C5                       		ext.l	d5
00006D78 E985                       		asl.l	#4,d5
00006D7A E385                       		asl.l	#1,d5
00006D7C 6100 0000                  		bsr.w	ScrollBlock1
00006D80 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006D86 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006D8A 323C 00DF                  		move.w	#224-1,d1
00006D8E 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00006D92 6A00                       		bpl.s	@60hz
00006D94 323C 00EF                  		move.w	#240-1,d1
00006D98                            @60hz:
00006D98 3038 F700                  		move.w	($FFFFF700).w,d0
00006D9C 4440                       		neg.w	d0
00006D9E 4840                       		swap	d0
00006DA0 3038 F708                  		move.w	($FFFFF708).w,d0
00006DA4 4440                       		neg.w	d0
00006DA6                            
00006DA6                            loc_6576:
00006DA6 22C0                       		move.l	d0,(a1)+
00006DA8 51C9 FFFC                  		dbf	d1,loc_6576
00006DAC 4E75                       		rts	
00006DAE                            ; End of function Deform_SBZ
00006DAE                            ; ---------------------------------------------------------------------------
00006DAE                            ; guys, ripple effects are cheap AF they just coded it badly
00006DAE                            Deform_Ripple:
00006DAE 41F8 CC00                  		lea	($FFFFCC00).w,a0	; hscroll line buffer
00006DB2 323C 00DF                  		move.w	#224-1,d1
00006DB6 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00006DBA 6A00                       		bpl.s	@60hz
00006DBC 323C 00EF                  		move.w	#240-1,d1
00006DC0                            @60hz:
00006DC0 4240                       		clr.w	d0
00006DC2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0	; vblank timer
00006DC6                            ;		addq.b	#1,($FFFF8000).w
00006DC6 43FB 0000                  		lea	@ripple(pc,d0.w),a1
00006DCA                            @loop:
00006DCA 1019                       		move.b	(a1)+,d0
00006DCC 4880                       		ext.w	d0
00006DCE D158                       		add.w	d0,(a0)+
00006DD0 5448                       		addq.w	#2,a0
00006DD2 51C9 FFF6                  		dbf	d1,@loop
00006DD6 4E75                       		rts
00006DD8                            @ripple:
00006DD8                            	rept 2
00006DD8                            	dc.b  0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
00006DD8                            	dc.b  2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
00006DD8                            	dc.b  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
00006DD8                            	dc.b  2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
00006DD8                            	dc.b  0,-1,-1,-1,-1,-1,-2,-2,-2,-2,-2,-3,-3,-3,-3,-3
00006DD8                            	dc.b -3,-3,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4
00006DD8                            	dc.b -4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-3
00006DD8                            	dc.b -3,-3,-3,-3,-3,-3,-2,-2,-2,-2,-2,-1,-1,-1,-1,-1
00006DD8                            	dc.b  0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
00006DD8                            	dc.b  2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
00006DD8                            	dc.b  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
00006DD8                            	dc.b  2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
00006DD8                            	dc.b  0,-1,-1,-1,-1,-1,-2,-2,-2,-2,-2,-3,-3,-3,-3,-3
00006DD8                            	dc.b -3,-3,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4
00006DD8                            	dc.b -4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-3
00006DD8                            	dc.b -3,-3,-3,-3,-3,-3,-2,-2,-2,-2,-2,-1,-1,-1,-1,-1
00006DD8 0000 0000 0000 0101 0101+  	endr
00006FD8                            ; ---------------------------------------------------------------------------
00006FD8                            ; Subroutine to	scroll the level horizontally as Sonic moves
00006FD8                            ; ---------------------------------------------------------------------------
00006FD8                            
00006FD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FD8                            
00006FD8                            
00006FD8                            ScrollHoriz:				; XREF: DeformBgLayer
00006FD8 3838 F700                  		move.w	($FFFFF700).w,d4
00006FDC 6100                       		bsr.s	ScrollHoriz2
00006FDE 3038 F700                  		move.w	($FFFFF700).w,d0
00006FE2 0240 0010                  		andi.w	#$10,d0
00006FE6 1238 F74A                  		move.b	($FFFFF74A).w,d1
00006FEA B300                       		eor.b	d1,d0
00006FEC 6600                       		bne.s	locret_65B0
00006FEE 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00006FF4 3038 F700                  		move.w	($FFFFF700).w,d0
00006FF8 9044                       		sub.w	d4,d0
00006FFA 6A00                       		bpl.s	loc_65AA
00006FFC 08F8 0002 F754             		bset	#2,($FFFFF754).w
00007002 4E75                       		rts	
00007004                            ; ===========================================================================
00007004                            
00007004                            loc_65AA:
00007004 08F8 0003 F754             		bset	#3,($FFFFF754).w
0000700A                            
0000700A                            locret_65B0:
0000700A 4E75                       		rts	
0000700C                            ; End of function ScrollHoriz
0000700C                            
0000700C                            
0000700C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000700C                            
0000700C                            
0000700C                            ScrollHoriz2:				; XREF: ScrollHoriz
0000700C 3038 D008                  		move.w	($FFFFD008).w,d0
00007010 9078 F700                  		sub.w	($FFFFF700).w,d0
00007014 0440 0090                  		subi.w	#$90,d0
00007018 6500                       		bcs.s	loc_65F6
0000701A 0440 0010                  		subi.w	#$10,d0
0000701E 6400                       		bcc.s	loc_65CC
00007020 4278 F73A                  		clr.w	($FFFFF73A).w
00007024 4E75                       		rts	
00007026                            ; ===========================================================================
00007026                            
00007026                            loc_65CC:
00007026 0C40 0010                  		cmpi.w	#$10,d0
0000702A 6500                       		bcs.s	loc_65D6
0000702C 303C 0010                  		move.w	#$10,d0
00007030                            
00007030                            loc_65D6:
00007030 D078 F700                  		add.w	($FFFFF700).w,d0
00007034 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00007038 6D00                       		blt.s	loc_65E4
0000703A 3038 F72A                  		move.w	($FFFFF72A).w,d0
0000703E                            
0000703E                            loc_65E4:
0000703E 3200                       		move.w	d0,d1
00007040 9278 F700                  		sub.w	($FFFFF700).w,d1
00007044 E141                       		asl.w	#8,d1
00007046 31C0 F700                  		move.w	d0,($FFFFF700).w
0000704A 31C1 F73A                  		move.w	d1,($FFFFF73A).w
0000704E 4E75                       		rts	
00007050                            ; ===========================================================================
00007050                            
00007050                            loc_65F6:				; XREF: ScrollHoriz2
00007050 D078 F700                  		add.w	($FFFFF700).w,d0
00007054 B078 F728                  		cmp.w	($FFFFF728).w,d0
00007058 6EE4                       		bgt.s	loc_65E4
0000705A 3038 F728                  		move.w	($FFFFF728).w,d0
0000705E 60DE                       		bra.s	loc_65E4
00007060                            ; End of function ScrollHoriz2
00007060                            
00007060                            ; ===========================================================================
00007060 4A40                       		tst.w	d0
00007062 6A00                       		bpl.s	loc_6610
00007064 303C FFFE                  		move.w	#-2,d0
00007068 60E6                       		bra.s	loc_65F6
0000706A                            ; ===========================================================================
0000706A                            
0000706A                            loc_6610:
0000706A 303C 0002                  		move.w	#2,d0
0000706E 60B6                       		bra.s	loc_65CC
00007070                            
00007070                            ; ---------------------------------------------------------------------------
00007070                            ; Subroutine to	scroll the level vertically as Sonic moves
00007070                            ; ---------------------------------------------------------------------------
00007070                            
00007070                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007070                            
00007070                            
00007070                            ScrollVertical:				; XREF: DeformBgLayer
00007070 7200                       		moveq	#0,d1
00007072 3038 D00C                  		move.w	($FFFFD00C).w,d0
00007076 9078 F704                  		sub.w	($FFFFF704).w,d0
0000707A 0838 0002 D022             		btst	#2,($FFFFD022).w
00007080 6700                       		beq.s	loc_662A
00007082 5B40                       		subq.w	#5,d0
00007084                            
00007084                            loc_662A:
00007084 0838 0001 D022             		btst	#1,($FFFFD022).w
0000708A 6700                       		beq.s	loc_664A
0000708C 0640 0020                  		addi.w	#$20,d0
00007090 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00007094 6500                       		bcs.s	loc_6696
00007096 0440 0040                  		subi.w	#$40,d0
0000709A 6400                       		bcc.s	loc_6696
0000709C 4A38 F75C                  		tst.b	($FFFFF75C).w
000070A0 6600                       		bne.s	loc_66A8
000070A2 6000                       		bra.s	loc_6656
000070A4                            ; ===========================================================================
000070A4                            
000070A4                            loc_664A:
000070A4 9078 F73E                  		sub.w	($FFFFF73E).w,d0
000070A8 6600                       		bne.s	loc_665C
000070AA 4A38 F75C                  		tst.b	($FFFFF75C).w
000070AE 6600                       		bne.s	loc_66A8
000070B0                            
000070B0                            loc_6656:
000070B0 4278 F73C                  		clr.w	($FFFFF73C).w
000070B4 4E75                       		rts	
000070B6                            ; ===========================================================================
000070B6                            
000070B6                            loc_665C:
000070B6 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
000070BC 6600                       		bne.s	loc_6684
000070BE 3238 D014                  		move.w	($FFFFD014).w,d1
000070C2 6A00                       		bpl.s	loc_666C
000070C4 4441                       		neg.w	d1
000070C6                            
000070C6                            loc_666C:
000070C6 0C41 0800                  		cmpi.w	#$800,d1
000070CA 6400                       		bcc.s	loc_6696
000070CC 323C 0600                  		move.w	#$600,d1
000070D0 0C40 0006                  		cmpi.w	#6,d0
000070D4 6E00                       		bgt.s	loc_66F6
000070D6 0C40 FFFA                  		cmpi.w	#-6,d0
000070DA 6D00                       		blt.s	loc_66C0
000070DC 6000                       		bra.s	loc_66AE
000070DE                            ; ===========================================================================
000070DE                            
000070DE                            loc_6684:
000070DE 323C 0200                  		move.w	#$200,d1
000070E2 0C40 0002                  		cmpi.w	#2,d0
000070E6 6E00                       		bgt.s	loc_66F6
000070E8 0C40 FFFE                  		cmpi.w	#-2,d0
000070EC 6D00                       		blt.s	loc_66C0
000070EE 6000                       		bra.s	loc_66AE
000070F0                            ; ===========================================================================
000070F0                            
000070F0                            loc_6696:
000070F0 323C 1000                  		move.w	#$1000,d1
000070F4 0C40 0010                  		cmpi.w	#$10,d0
000070F8 6E00                       		bgt.s	loc_66F6
000070FA 0C40 FFF0                  		cmpi.w	#-$10,d0
000070FE 6D00                       		blt.s	loc_66C0
00007100 6000                       		bra.s	loc_66AE
00007102                            ; ===========================================================================
00007102                            
00007102                            loc_66A8:
00007102 7000                       		moveq	#0,d0
00007104 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00007108                            
00007108                            loc_66AE:
00007108 7200                       		moveq	#0,d1
0000710A 3200                       		move.w	d0,d1
0000710C D278 F704                  		add.w	($FFFFF704).w,d1
00007110 4A40                       		tst.w	d0
00007112 6A00 0000                  		bpl.w	loc_6700
00007116 6000 0000                  		bra.w	loc_66CC
0000711A                            ; ===========================================================================
0000711A                            
0000711A                            loc_66C0:
0000711A 4441                       		neg.w	d1
0000711C 48C1                       		ext.l	d1
0000711E E181                       		asl.l	#8,d1
00007120 D2B8 F704                  		add.l	($FFFFF704).w,d1
00007124 4841                       		swap	d1
00007126                            
00007126                            loc_66CC:
00007126 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
0000712A 6E00                       		bgt.s	loc_6724
0000712C 0C41 FF00                  		cmpi.w	#-$100,d1
00007130 6E00                       		bgt.s	loc_66F0
00007132 0241 07FF                  		andi.w	#$7FF,d1
00007136 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0000713C 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00007142 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00007148 6000                       		bra.s	loc_6724
0000714A                            ; ===========================================================================
0000714A                            
0000714A                            loc_66F0:
0000714A 3238 F72C                  		move.w	($FFFFF72C).w,d1
0000714E 6000                       		bra.s	loc_6724
00007150                            ; ===========================================================================
00007150                            
00007150                            loc_66F6:
00007150 48C1                       		ext.l	d1
00007152 E181                       		asl.l	#8,d1
00007154 D2B8 F704                  		add.l	($FFFFF704).w,d1
00007158 4841                       		swap	d1
0000715A                            
0000715A                            loc_6700:
0000715A B278 F72E                  		cmp.w	($FFFFF72E).w,d1
0000715E 6D00                       		blt.s	loc_6724
00007160 0441 0800                  		subi.w	#$800,d1
00007164 6500                       		bcs.s	loc_6720
00007166 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0000716C 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00007172 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00007178 6000                       		bra.s	loc_6724
0000717A                            ; ===========================================================================
0000717A                            
0000717A                            loc_6720:
0000717A 3238 F72E                  		move.w	($FFFFF72E).w,d1
0000717E                            
0000717E                            loc_6724:
0000717E 3838 F704                  		move.w	($FFFFF704).w,d4
00007182 4841                       		swap	d1
00007184 2601                       		move.l	d1,d3
00007186 96B8 F704                  		sub.l	($FFFFF704).w,d3
0000718A E09B                       		ror.l	#8,d3
0000718C 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00007190 21C1 F704                  		move.l	d1,($FFFFF704).w
00007194 3038 F704                  		move.w	($FFFFF704).w,d0
00007198 0240 0010                  		andi.w	#$10,d0
0000719C 1238 F74B                  		move.b	($FFFFF74B).w,d1
000071A0 B300                       		eor.b	d1,d0
000071A2 6600                       		bne.s	locret_6766
000071A4 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
000071AA 3038 F704                  		move.w	($FFFFF704).w,d0
000071AE 9044                       		sub.w	d4,d0
000071B0 6A00                       		bpl.s	loc_6760
000071B2 08F8 0000 F754             		bset	#0,($FFFFF754).w
000071B8 4E75                       		rts	
000071BA                            ; ===========================================================================
000071BA                            
000071BA                            loc_6760:
000071BA 08F8 0001 F754             		bset	#1,($FFFFF754).w
000071C0                            
000071C0                            locret_6766:
000071C0 4E75                       		rts	
000071C2                            ; End of function ScrollVertical
000071C2                            
000071C2                            
000071C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071C2                            
000071C2                            
000071C2                            ScrollBlock1:				; XREF: Deform_GHZ; et al
000071C2 2438 F708                  		move.l	($FFFFF708).w,d2
000071C6 2002                       		move.l	d2,d0
000071C8 D084                       		add.l	d4,d0
000071CA 21C0 F708                  		move.l	d0,($FFFFF708).w
000071CE 2200                       		move.l	d0,d1
000071D0 4841                       		swap	d1
000071D2 0241 0010                  		andi.w	#$10,d1
000071D6 1638 F74C                  		move.b	($FFFFF74C).w,d3
000071DA B701                       		eor.b	d3,d1
000071DC 6600                       		bne.s	loc_679C
000071DE 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
000071E4 9082                       		sub.l	d2,d0
000071E6 6A00                       		bpl.s	loc_6796
000071E8 08F8 0002 F756             		bset	#2,($FFFFF756).w
000071EE 6000                       		bra.s	loc_679C
000071F0                            ; ===========================================================================
000071F0                            
000071F0                            loc_6796:
000071F0 08F8 0003 F756             		bset	#3,($FFFFF756).w
000071F6                            
000071F6                            loc_679C:
000071F6 2638 F70C                  		move.l	($FFFFF70C).w,d3
000071FA 2003                       		move.l	d3,d0
000071FC D085                       		add.l	d5,d0
000071FE 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00007202 2200                       		move.l	d0,d1
00007204 4841                       		swap	d1
00007206 0241 0010                  		andi.w	#$10,d1
0000720A 1438 F74D                  		move.b	($FFFFF74D).w,d2
0000720E B501                       		eor.b	d2,d1
00007210 6600                       		bne.s	locret_67D0
00007212 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00007218 9083                       		sub.l	d3,d0
0000721A 6A00                       		bpl.s	loc_67CA
0000721C 08F8 0000 F756             		bset	#0,($FFFFF756).w
00007222 4E75                       		rts	
00007224                            ; ===========================================================================
00007224                            
00007224                            loc_67CA:
00007224 08F8 0001 F756             		bset	#1,($FFFFF756).w
0000722A                            
0000722A                            locret_67D0:
0000722A 4E75                       		rts	
0000722C                            ; End of function ScrollBlock1
0000722C                            
0000722C                            
0000722C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000722C                            
0000722C                            
0000722C                            ScrollBlock2:				; XREF: Deform_SLZ
0000722C 2438 F708                  		move.l	($FFFFF708).w,d2
00007230 2002                       		move.l	d2,d0
00007232 D084                       		add.l	d4,d0
00007234 21C0 F708                  		move.l	d0,($FFFFF708).w
00007238 2638 F70C                  		move.l	($FFFFF70C).w,d3
0000723C 2003                       		move.l	d3,d0
0000723E D085                       		add.l	d5,d0
00007240 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00007244 2200                       		move.l	d0,d1
00007246 4841                       		swap	d1
00007248 0241 0010                  		andi.w	#$10,d1
0000724C 1438 F74D                  		move.b	($FFFFF74D).w,d2
00007250 B501                       		eor.b	d2,d1
00007252 6600                       		bne.s	locret_6812
00007254 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
0000725A 9083                       		sub.l	d3,d0
0000725C 6A00                       		bpl.s	loc_680C
0000725E 08F8 0000 F756             		bset	#0,($FFFFF756).w
00007264 4E75                       		rts	
00007266                            ; ===========================================================================
00007266                            
00007266                            loc_680C:
00007266 08F8 0001 F756             		bset	#1,($FFFFF756).w
0000726C                            
0000726C                            locret_6812:
0000726C 4E75                       		rts	
0000726E                            ; End of function ScrollBlock2
0000726E                            
0000726E                            
0000726E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000726E                            
0000726E                            
0000726E                            ScrollBlock3:				; XREF: Deform_GHZ; et al
0000726E 3638 F70C                  		move.w	($FFFFF70C).w,d3
00007272 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007276 3200                       		move.w	d0,d1
00007278 0241 0010                  		andi.w	#$10,d1
0000727C 1438 F74D                  		move.b	($FFFFF74D).w,d2
00007280 B501                       		eor.b	d2,d1
00007282 6600                       		bne.s	locret_6842
00007284 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
0000728A 9043                       		sub.w	d3,d0
0000728C 6A00                       		bpl.s	loc_683C
0000728E 08F8 0000 F756             		bset	#0,($FFFFF756).w
00007294 4E75                       		rts	
00007296                            ; ===========================================================================
00007296                            
00007296                            loc_683C:
00007296 08F8 0001 F756             		bset	#1,($FFFFF756).w
0000729C                            
0000729C                            locret_6842:
0000729C 4E75                       		rts	
0000729E                            ; End of function ScrollBlock3
0000729E                            
0000729E                            
0000729E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000729E                            
0000729E                            
0000729E                            ScrollBlock4:				; XREF: Deform_GHZ
0000729E 3438 F710                  		move.w	($FFFFF710).w,d2
000072A2 3638 F714                  		move.w	($FFFFF714).w,d3
000072A6 3038 F73A                  		move.w	($FFFFF73A).w,d0
000072AA 48C0                       		ext.l	d0
000072AC EF80                       		asl.l	#7,d0
000072AE D1B8 F710                  		add.l	d0,($FFFFF710).w
000072B2 3038 F710                  		move.w	($FFFFF710).w,d0
000072B6 0240 0010                  		andi.w	#$10,d0
000072BA 1238 F74E                  		move.b	($FFFFF74E).w,d1
000072BE B300                       		eor.b	d1,d0
000072C0 6600                       		bne.s	locret_6884
000072C2 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
000072C8 3038 F710                  		move.w	($FFFFF710).w,d0
000072CC 9042                       		sub.w	d2,d0
000072CE 6A00                       		bpl.s	loc_687E
000072D0 08F8 0002 F758             		bset	#2,($FFFFF758).w
000072D6 6000                       		bra.s	locret_6884
000072D8                            ; ===========================================================================
000072D8                            
000072D8                            loc_687E:
000072D8 08F8 0003 F758             		bset	#3,($FFFFF758).w
000072DE                            
000072DE                            locret_6884:
000072DE 4E75                       		rts	
000072E0                            ; End of function ScrollBlock4
000072E0                            
000072E0                            
000072E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072E0                            
000072E0                            
000072E0                            sub_6886:				; XREF: loc_C44
000072E0 4BF9 00C0 0004             		lea	($C00004).l,a5
000072E6 4DF9 00C0 0000             		lea	($C00000).l,a6
000072EC 45F8 F756                  		lea	($FFFFF756).w,a2
000072F0 47F8 F708                  		lea	($FFFFF708).w,a3
000072F4 49F8 A440                  		lea	($FFFFA440).w,a4
000072F8 343C 6000                  		move.w	#$6000,d2
000072FC 6100 0000                  		bsr.w	sub_6954
00007300 45F8 F758                  		lea	($FFFFF758).w,a2
00007304 47F8 F710                  		lea	($FFFFF710).w,a3
00007308 6000 0000                  		bra.w	sub_69F4
0000730C                            ; End of function sub_6886
0000730C                            
0000730C                            ; ---------------------------------------------------------------------------
0000730C                            ; Subroutine to	display	correct	tiles as you move
0000730C                            ; ---------------------------------------------------------------------------
0000730C                            
0000730C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000730C                            
0000730C                            
0000730C                            LoadTilesAsYouMove:			; XREF: Demo_Time
0000730C 4BF9 00C0 0004             		lea	($C00004).l,a5
00007312 4DF9 00C0 0000             		lea	($C00000).l,a6
00007318 45F8 FF32                  		lea	($FFFFFF32).w,a2
0000731C 47F8 FF18                  		lea	($FFFFFF18).w,a3
00007320 49F8 A440                  		lea	($FFFFA440).w,a4
00007324 343C 6000                  		move.w	#$6000,d2
00007328 6100 0000                  		bsr.w	sub_6954
0000732C 45F8 FF34                  		lea	($FFFFFF34).w,a2
00007330 47F8 FF20                  		lea	($FFFFFF20).w,a3
00007334 6100 0000                  		bsr.w	sub_69F4
00007338 45F8 FF30                  		lea	($FFFFFF30).w,a2
0000733C 47F8 FF10                  		lea	($FFFFFF10).w,a3
00007340 49F8 A400                  		lea	($FFFFA400).w,a4
00007344 343C 4000                  		move.w	#$4000,d2
00007348 4A12                       		tst.b	(a2)
0000734A 6700                       		beq.s	locret_6952
0000734C 0892 0000                  		bclr	#0,(a2)
00007350 6700                       		beq.s	loc_6908
00007352 78F0                       		moveq	#-$10,d4
00007354 7AF0                       		moveq	#-$10,d5
00007356 6100 0000                  		bsr.w	sub_6C20
0000735A 78F0                       		moveq	#-$10,d4
0000735C 7AF0                       		moveq	#-$10,d5
0000735E 6100 0000                  		bsr.w	sub_6AD8
00007362                            
00007362                            loc_6908:
00007362 0892 0001                  		bclr	#1,(a2)
00007366 6700                       		beq.s	loc_6922
00007368 383C 00E0                  		move.w	#$E0,d4
0000736C 7AF0                       		moveq	#-$10,d5
0000736E 6100 0000                  		bsr.w	sub_6C20
00007372 383C 00E0                  		move.w	#$E0,d4
00007376 7AF0                       		moveq	#-$10,d5
00007378 6100 0000                  		bsr.w	sub_6AD8
0000737C                            
0000737C                            loc_6922:
0000737C 0892 0002                  		bclr	#2,(a2)
00007380 6700                       		beq.s	loc_6938
00007382 78F0                       		moveq	#-$10,d4
00007384 7AF0                       		moveq	#-$10,d5
00007386 6100 0000                  		bsr.w	sub_6C20
0000738A 78F0                       		moveq	#-$10,d4
0000738C 7AF0                       		moveq	#-$10,d5
0000738E 6100 0000                  		bsr.w	sub_6B04
00007392                            
00007392                            loc_6938:
00007392 0892 0003                  		bclr	#3,(a2)
00007396 6700                       		beq.s	locret_6952
00007398 78F0                       		moveq	#-$10,d4
0000739A 3A3C 0140                  		move.w	#$140,d5
0000739E 6100 0000                  		bsr.w	sub_6C20
000073A2 78F0                       		moveq	#-$10,d4
000073A4 3A3C 0140                  		move.w	#$140,d5
000073A8 6100 0000                  		bsr.w	sub_6B04
000073AC                            
000073AC                            locret_6952:
000073AC 4E75                       		rts	
000073AE                            ; End of function LoadTilesAsYouMove
000073AE                            
000073AE                            
000073AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000073AE                            
000073AE                            
000073AE                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
000073AE 4A12                       		tst.b	(a2)
000073B0 6700 0000                  		beq.w	locret_69F2
000073B4 0892 0000                  		bclr	#0,(a2)
000073B8 6700                       		beq.s	loc_6972
000073BA 78F0                       		moveq	#-$10,d4
000073BC 7AF0                       		moveq	#-$10,d5
000073BE 6100 0000                  		bsr.w	sub_6C20
000073C2 78F0                       		moveq	#-$10,d4
000073C4 7AF0                       		moveq	#-$10,d5
000073C6 7C1F                       		moveq	#$1F,d6
000073C8 6100 0000                  		bsr.w	sub_6ADA
000073CC                            
000073CC                            loc_6972:
000073CC 0892 0001                  		bclr	#1,(a2)
000073D0 6700                       		beq.s	loc_698E
000073D2 383C 00E0                  		move.w	#$E0,d4
000073D6 7AF0                       		moveq	#-$10,d5
000073D8 6100 0000                  		bsr.w	sub_6C20
000073DC 383C 00E0                  		move.w	#$E0,d4
000073E0 7AF0                       		moveq	#-$10,d5
000073E2 7C1F                       		moveq	#$1F,d6
000073E4 6100 0000                  		bsr.w	sub_6ADA
000073E8                            
000073E8                            loc_698E:
000073E8 0892 0002                  		bclr	#2,(a2)
000073EC 6700                       		beq.s	loc_69BE
000073EE 78F0                       		moveq	#-$10,d4
000073F0 7AF0                       		moveq	#-$10,d5
000073F2 6100 0000                  		bsr.w	sub_6C20
000073F6 78F0                       		moveq	#-$10,d4
000073F8 7AF0                       		moveq	#-$10,d5
000073FA 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000073FE 322B 0004                  		move.w	4(a3),d1
00007402 0241 FFF0                  		andi.w	#-$10,d1
00007406 9C41                       		sub.w	d1,d6
00007408 6D00                       		blt.s	loc_69BE
0000740A E84E                       		lsr.w	#4,d6
0000740C 0C46 000F                  		cmpi.w	#$F,d6
00007410 6500                       		bcs.s	loc_69BA
00007412 7C0F                       		moveq	#$F,d6
00007414                            
00007414                            loc_69BA:
00007414 6100 0000                  		bsr.w	sub_6B06
00007418                            
00007418                            loc_69BE:
00007418 0892 0003                  		bclr	#3,(a2)
0000741C 6700                       		beq.s	locret_69F2
0000741E 78F0                       		moveq	#-$10,d4
00007420 3A3C 0140                  		move.w	#$140,d5
00007424 6100 0000                  		bsr.w	sub_6C20
00007428 78F0                       		moveq	#-$10,d4
0000742A 3A3C 0140                  		move.w	#$140,d5
0000742E 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007432 322B 0004                  		move.w	4(a3),d1
00007436 0241 FFF0                  		andi.w	#-$10,d1
0000743A 9C41                       		sub.w	d1,d6
0000743C 6D00                       		blt.s	locret_69F2
0000743E E84E                       		lsr.w	#4,d6
00007440 0C46 000F                  		cmpi.w	#$F,d6
00007444 6500                       		bcs.s	loc_69EE
00007446 7C0F                       		moveq	#$F,d6
00007448                            
00007448                            loc_69EE:
00007448 6100 0000                  		bsr.w	sub_6B06
0000744C                            
0000744C                            locret_69F2:
0000744C 4E75                       		rts	
0000744E                            ; End of function sub_6954
0000744E                            
0000744E                            
0000744E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000744E                            
0000744E                            
0000744E                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
0000744E 4A12                       		tst.b	(a2)
00007450 6700 0000                  		beq.w	locret_6A80
00007454 0892 0002                  		bclr	#2,(a2)
00007458 6700                       		beq.s	loc_6A3E
0000745A 0C53 0010                  		cmpi.w	#$10,(a3)
0000745E 6500                       		bcs.s	loc_6A3E
00007460 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00007464 322B 0004                  		move.w	4(a3),d1
00007468 0241 FFF0                  		andi.w	#-$10,d1
0000746C 9841                       		sub.w	d1,d4
0000746E 3F04                       		move.w	d4,-(sp)
00007470 7AF0                       		moveq	#-$10,d5
00007472 6100 0000                  		bsr.w	sub_6C20
00007476 381F                       		move.w	(sp)+,d4
00007478 7AF0                       		moveq	#-$10,d5
0000747A 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
0000747E 322B 0004                  		move.w	4(a3),d1
00007482 0241 FFF0                  		andi.w	#-$10,d1
00007486 9C41                       		sub.w	d1,d6
00007488 6D00                       		blt.s	loc_6A3E
0000748A E84E                       		lsr.w	#4,d6
0000748C 0446 000E                  		subi.w	#$E,d6
00007490 6400                       		bcc.s	loc_6A3E
00007492 4446                       		neg.w	d6
00007494 6100 0000                  		bsr.w	sub_6B06
00007498                            
00007498                            loc_6A3E:
00007498 0892 0003                  		bclr	#3,(a2)
0000749C 6700                       		beq.s	locret_6A80
0000749E 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
000074A2 322B 0004                  		move.w	4(a3),d1
000074A6 0241 FFF0                  		andi.w	#-$10,d1
000074AA 9841                       		sub.w	d1,d4
000074AC 3F04                       		move.w	d4,-(sp)
000074AE 3A3C 0140                  		move.w	#$140,d5
000074B2 6100 0000                  		bsr.w	sub_6C20
000074B6 381F                       		move.w	(sp)+,d4
000074B8 3A3C 0140                  		move.w	#$140,d5
000074BC 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000074C0 322B 0004                  		move.w	4(a3),d1
000074C4 0241 FFF0                  		andi.w	#-$10,d1
000074C8 9C41                       		sub.w	d1,d6
000074CA 6D00                       		blt.s	locret_6A80
000074CC E84E                       		lsr.w	#4,d6
000074CE 0446 000E                  		subi.w	#$E,d6
000074D2 6400                       		bcc.s	locret_6A80
000074D4 4446                       		neg.w	d6
000074D6 6100 0000                  		bsr.w	sub_6B06
000074DA                            
000074DA                            locret_6A80:
000074DA 4E75                       		rts	
000074DC                            ; End of function sub_69F4
000074DC                            
000074DC                            ; ===========================================================================
000074DC 4A12                       		tst.b	(a2)
000074DE 6700                       		beq.s	locret_6AD6
000074E0 0892 0002                  		bclr	#2,(a2)
000074E4 6700                       		beq.s	loc_6AAC
000074E6 383C 00D0                  		move.w	#$D0,d4
000074EA 322B 0004                  		move.w	4(a3),d1
000074EE 0241 FFF0                  		andi.w	#-$10,d1
000074F2 9841                       		sub.w	d1,d4
000074F4 3F04                       		move.w	d4,-(sp)
000074F6 7AF0                       		moveq	#-$10,d5
000074F8 6100 0000                  		bsr.w	sub_6C3C
000074FC 381F                       		move.w	(sp)+,d4
000074FE 7AF0                       		moveq	#-$10,d5
00007500 7C02                       		moveq	#2,d6
00007502 6100 0000                  		bsr.w	sub_6B06
00007506                            
00007506                            loc_6AAC:
00007506 0892 0003                  		bclr	#3,(a2)
0000750A 6700                       		beq.s	locret_6AD6
0000750C 383C 00D0                  		move.w	#$D0,d4
00007510 322B 0004                  		move.w	4(a3),d1
00007514 0241 FFF0                  		andi.w	#-$10,d1
00007518 9841                       		sub.w	d1,d4
0000751A 3F04                       		move.w	d4,-(sp)
0000751C 3A3C 0140                  		move.w	#$140,d5
00007520 6100 0000                  		bsr.w	sub_6C3C
00007524 381F                       		move.w	(sp)+,d4
00007526 3A3C 0140                  		move.w	#$140,d5
0000752A 7C02                       		moveq	#2,d6
0000752C 6100 0000                  		bsr.w	sub_6B06
00007530                            
00007530                            locret_6AD6:
00007530 4E75                       		rts	
00007532                            
00007532                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007532                            
00007532                            
00007532                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00007532 7C15                       		moveq	#$15,d6
00007534                            ; End of function sub_6AD8
00007534                            
00007534                            
00007534                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007534                            
00007534                            
00007534                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00007534 2E3C 0080 0000             		move.l	#$800000,d7
0000753A 2200                       		move.l	d0,d1
0000753C                            
0000753C                            loc_6AE2:
0000753C 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007540 6100 0000                  		bsr.w	sub_6BD6
00007544 2001                       		move.l	d1,d0
00007546 6100 0000                  		bsr.w	sub_6B32
0000754A 5801                       		addq.b	#4,d1
0000754C 0201 007F                  		andi.b	#$7F,d1
00007550 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007554 0645 0010                  		addi.w	#$10,d5
00007558 51CE FFE2                  		dbf	d6,loc_6AE2
0000755C 4E75                       		rts	
0000755E                            ; End of function sub_6ADA
0000755E                            
0000755E                            
0000755E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000755E                            
0000755E                            
0000755E                            sub_6B04:				; XREF: LoadTilesAsYouMove
0000755E 7C0F                       		moveq	#$F,d6
00007560                            ; End of function sub_6B04
00007560                            
00007560                            
00007560                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007560                            
00007560                            
00007560                            sub_6B06:				; XREF: sub_6954
00007560 2E3C 0080 0000             		move.l	#$800000,d7
00007566 2200                       		move.l	d0,d1
00007568                            
00007568                            loc_6B0E:
00007568 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000756C 6100 0000                  		bsr.w	sub_6BD6
00007570 2001                       		move.l	d1,d0
00007572 6100 0000                  		bsr.w	sub_6B32
00007576 0641 0100                  		addi.w	#$100,d1
0000757A 0241 0FFF                  		andi.w	#$FFF,d1
0000757E 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007582 0644 0010                  		addi.w	#$10,d4
00007586 51CE FFE0                  		dbf	d6,loc_6B0E
0000758A 4E75                       		rts	
0000758C                            ; End of function sub_6B06
0000758C                            
0000758C                            
0000758C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000758C                            
0000758C                            
0000758C                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
0000758C 8042                       		or.w	d2,d0
0000758E 4840                       		swap	d0
00007590 0810 0004                  		btst	#4,(a0)
00007594 6600                       		bne.s	loc_6B6E
00007596 0810 0003                  		btst	#3,(a0)
0000759A 6600                       		bne.s	loc_6B4E
0000759C 2A80                       		move.l	d0,(a5)
0000759E 2C99                       		move.l	(a1)+,(a6)
000075A0 D087                       		add.l	d7,d0
000075A2 2A80                       		move.l	d0,(a5)
000075A4 2C99                       		move.l	(a1)+,(a6)
000075A6 4E75                       		rts	
000075A8                            ; ===========================================================================
000075A8                            
000075A8                            loc_6B4E:
000075A8 2A80                       		move.l	d0,(a5)
000075AA 2819                       		move.l	(a1)+,d4
000075AC 0A84 0800 0800             		eori.l	#$8000800,d4
000075B2 4844                       		swap	d4
000075B4 2C84                       		move.l	d4,(a6)
000075B6 D087                       		add.l	d7,d0
000075B8 2A80                       		move.l	d0,(a5)
000075BA 2819                       		move.l	(a1)+,d4
000075BC 0A84 0800 0800             		eori.l	#$8000800,d4
000075C2 4844                       		swap	d4
000075C4 2C84                       		move.l	d4,(a6)
000075C6 4E75                       		rts	
000075C8                            ; ===========================================================================
000075C8                            
000075C8                            loc_6B6E:
000075C8 0810 0003                  		btst	#3,(a0)
000075CC 6600                       		bne.s	loc_6B90
000075CE 2A80                       		move.l	d0,(a5)
000075D0 2A19                       		move.l	(a1)+,d5
000075D2 2819                       		move.l	(a1)+,d4
000075D4 0A84 1000 1000             		eori.l	#$10001000,d4
000075DA 2C84                       		move.l	d4,(a6)
000075DC D087                       		add.l	d7,d0
000075DE 2A80                       		move.l	d0,(a5)
000075E0 0A85 1000 1000             		eori.l	#$10001000,d5
000075E6 2C85                       		move.l	d5,(a6)
000075E8 4E75                       		rts	
000075EA                            ; ===========================================================================
000075EA                            
000075EA                            loc_6B90:
000075EA 2A80                       		move.l	d0,(a5)
000075EC 2A19                       		move.l	(a1)+,d5
000075EE 2819                       		move.l	(a1)+,d4
000075F0 0A84 1800 1800             		eori.l	#$18001800,d4
000075F6 4844                       		swap	d4
000075F8 2C84                       		move.l	d4,(a6)
000075FA D087                       		add.l	d7,d0
000075FC 2A80                       		move.l	d0,(a5)
000075FE 0A85 1800 1800             		eori.l	#$18001800,d5
00007604 4845                       		swap	d5
00007606 2C85                       		move.l	d5,(a6)
00007608 4E75                       		rts	
0000760A                            ; End of function sub_6B32
0000760A                            
0000760A                            ; ===========================================================================
0000760A 4E75                       		rts	
0000760C                            ; ===========================================================================
0000760C 2A80                       		move.l	d0,(a5)
0000760E 3A3C 2000                  		move.w	#$2000,d5
00007612 3819                       		move.w	(a1)+,d4
00007614 D845                       		add.w	d5,d4
00007616 3C84                       		move.w	d4,(a6)
00007618 3819                       		move.w	(a1)+,d4
0000761A D845                       		add.w	d5,d4
0000761C 3C84                       		move.w	d4,(a6)
0000761E D087                       		add.l	d7,d0
00007620 2A80                       		move.l	d0,(a5)
00007622 3819                       		move.w	(a1)+,d4
00007624 D845                       		add.w	d5,d4
00007626 3C84                       		move.w	d4,(a6)
00007628 3819                       		move.w	(a1)+,d4
0000762A D845                       		add.w	d5,d4
0000762C 3C84                       		move.w	d4,(a6)
0000762E 4E75                       		rts	
00007630                            
00007630                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007630                            
00007630                            
00007630                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00007630 43F8 B000                  		lea	($FFFFB000).w,a1
00007634 D86B 0004                  		add.w	4(a3),d4
00007638 DA53                       		add.w	(a3),d5
0000763A 3604                       		move.w	d4,d3
0000763C E24B                       		lsr.w	#1,d3
0000763E 0243 0380                  		andi.w	#$380,d3
00007642 E64D                       		lsr.w	#3,d5
00007644 3005                       		move.w	d5,d0
00007646 EA48                       		lsr.w	#5,d0
00007648 0240 007F                  		andi.w	#$7F,d0
0000764C D043                       		add.w	d3,d0
0000764E 76FF                       		moveq	#-1,d3
00007650 1634 0000                  		move.b	(a4,d0.w),d3
00007654 6700                       		beq.s	locret_6C1E
00007656 5303                       		subq.b	#1,d3
00007658 0243 007F                  		andi.w	#$7F,d3
0000765C EE5B                       		ror.w	#7,d3
0000765E D844                       		add.w	d4,d4
00007660 0244 01E0                  		andi.w	#$1E0,d4
00007664 0245 001E                  		andi.w	#$1E,d5
00007668 D644                       		add.w	d4,d3
0000766A D645                       		add.w	d5,d3
0000766C 2043                       		movea.l	d3,a0
0000766E 3610                       		move.w	(a0),d3
00007670 0243 03FF                  		andi.w	#$3FF,d3
00007674 E74B                       		lsl.w	#3,d3
00007676 D2C3                       		adda.w	d3,a1
00007678                            
00007678                            locret_6C1E:
00007678 4E75                       		rts	
0000767A                            ; End of function sub_6BD6
0000767A                            
0000767A                            
0000767A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000767A                            
0000767A                            
0000767A                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
0000767A D86B 0004                  		add.w	4(a3),d4
0000767E DA53                       		add.w	(a3),d5
00007680 0244 00F0                  		andi.w	#$F0,d4
00007684 0245 01F0                  		andi.w	#$1F0,d5
00007688 E94C                       		lsl.w	#4,d4
0000768A E44D                       		lsr.w	#2,d5
0000768C D845                       		add.w	d5,d4
0000768E 7003                       		moveq	#3,d0
00007690 4840                       		swap	d0
00007692 3004                       		move.w	d4,d0
00007694 4E75                       		rts	
00007696                            ; End of function sub_6C20
00007696                            
00007696                            
00007696                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007696                            ; not used
00007696                            
00007696                            
00007696                            sub_6C3C:
00007696 D86B 0004                  		add.w	4(a3),d4
0000769A DA53                       		add.w	(a3),d5
0000769C 0244 00F0                  		andi.w	#$F0,d4
000076A0 0245 01F0                  		andi.w	#$1F0,d5
000076A4 E94C                       		lsl.w	#4,d4
000076A6 E44D                       		lsr.w	#2,d5
000076A8 D845                       		add.w	d5,d4
000076AA 7002                       		moveq	#2,d0
000076AC 4840                       		swap	d0
000076AE 3004                       		move.w	d4,d0
000076B0 4E75                       		rts	
000076B2                            ; End of function sub_6C3C
000076B2                            
000076B2                            ; ---------------------------------------------------------------------------
000076B2                            ; Subroutine to	load tiles as soon as the level	appears
000076B2                            ; ---------------------------------------------------------------------------
000076B2                            
000076B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076B2                            
000076B2                            
000076B2                            LoadTilesFromStart:			; XREF: Level; EndingSequence
000076B2 4BF9 00C0 0004             		lea	($C00004).l,a5
000076B8 4DF9 00C0 0000             		lea	($C00000).l,a6
000076BE 47F8 F700                  		lea	($FFFFF700).w,a3
000076C2 49F8 A400                  		lea	($FFFFA400).w,a4
000076C6 343C 4000                  		move.w	#$4000,d2
000076CA 6100                       		bsr.s	LoadTilesFromStart2
000076CC 47F8 F708                  		lea	($FFFFF708).w,a3
000076D0 49F8 A440                  		lea	($FFFFA440).w,a4
000076D4 343C 6000                  		move.w	#$6000,d2
000076D8                            ; End of function LoadTilesFromStart
000076D8                            
000076D8                            
000076D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076D8                            
000076D8                            
000076D8                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
000076D8 78F0                       		moveq	#-$10,d4
000076DA 7C0F                       		moveq	#$F,d6
000076DC                            
000076DC                            loc_6C82:
000076DC 48E7 0E00                  		movem.l	d4-d6,-(sp)
000076E0 7A00                       		moveq	#0,d5
000076E2 3204                       		move.w	d4,d1
000076E4 6100 FF94                  		bsr.w	sub_6C20
000076E8 3801                       		move.w	d1,d4
000076EA 7A00                       		moveq	#0,d5
000076EC 7C1F                       		moveq	#$1F,d6
000076EE 6100 FE44                  		bsr.w	sub_6ADA
000076F2 4CDF 0070                  		movem.l	(sp)+,d4-d6
000076F6 0644 0010                  		addi.w	#$10,d4
000076FA 51CE FFE0                  		dbf	d6,loc_6C82
000076FE 4E75                       		rts	
00007700                            ; End of function LoadTilesFromStart2
00007700                            
00007700                            ; ---------------------------------------------------------------------------
00007700                            ; Main Load Block loading subroutine
00007700                            ; ---------------------------------------------------------------------------
00007700                            
00007700                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007700                            
00007700                            
00007700                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00007700 7000                       		moveq	#0,d0
00007702 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007706 E948                       		lsl.w	#4,d0
00007708 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
0000770E 45F2 0000                  		lea	(a2,d0.w),a2
00007712 2F0A                       		move.l	a2,-(sp)
00007714 588A                       		addq.l	#4,a2
00007716 205A                       		movea.l	(a2)+,a0
00007718 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
0000771C 303C 0000                  		move.w	#0,d0
00007720 6100 A246                  		bsr.w	EniDec
00007724 205A                       		movea.l	(a2)+,a0
00007726 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
0000772C 6100 A3B8                  		bsr.w	KosDec
00007730 6100 0000                  		bsr.w	LevelLayoutLoad
00007734 301A                       		move.w	(a2)+,d0
00007736 3012                       		move.w	(a2),d0
00007738 0240 00FF                  		andi.w	#$FF,d0
0000773C 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00007742 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00007744 700C                       		moveq	#$C,d0		; use SB3 pallet
00007746                            
00007746                            MLB_ChkSBZPal:
00007746 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
0000774C 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
0000774E 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00007754 6600                       		bne.s	MLB_NormalPal	; if not, branch
00007756                            
00007756                            MLB_UsePal0E:
00007756 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
00007758                            
00007758                            MLB_NormalPal:
00007758 6100 ABB8                  		bsr.w	PalLoad1	; load pallet (based on	d0)
0000775C 245F                       		movea.l	(sp)+,a2
0000775E 584A                       		addq.w	#4,a2
00007760 7000                       		moveq	#0,d0
00007762 1012                       		move.b	(a2),d0
00007764 6700                       		beq.s	locret_6D10
00007766 6100 A062                  		bsr.w	LoadPLC		; load pattern load cues
0000776A                            
0000776A                            locret_6D10:
0000776A 4E75                       		rts	
0000776C                            ; End of function MainLoadBlockLoad
0000776C                            
0000776C                            ; ---------------------------------------------------------------------------
0000776C                            ; Level	layout loading subroutine
0000776C                            ; ---------------------------------------------------------------------------
0000776C                            
0000776C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000776C                            
0000776C                            
0000776C                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
0000776C 47F8 A400                  		lea	($FFFFA400).w,a3
00007770 323C 01FF                  		move.w	#$1FF,d1
00007774 7000                       		moveq	#0,d0
00007776                            
00007776                            LevLoad_ClrRam:
00007776 26C0                       		move.l	d0,(a3)+
00007778 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
0000777C                            
0000777C 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00007780 7200                       		moveq	#0,d1
00007782 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00007786 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
0000778A 7202                       		moveq	#2,d1
0000778C                            ; End of function LevelLayoutLoad
0000778C                            
0000778C                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
0000778C                            
0000778C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000778C                            
0000778C                            
0000778C                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
0000778C 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007790 ED08                       		lsl.b	#6,d0
00007792 EA48                       		lsr.w	#5,d0
00007794 3400                       		move.w	d0,d2
00007796 D040                       		add.w	d0,d0
00007798 D042                       		add.w	d2,d0
0000779A D041                       		add.w	d1,d0
0000779C 43F9 0000 0000             		lea	(Level_Index).l,a1
000077A2 3031 0000                  		move.w	(a1,d0.w),d0
000077A6 43F1 0000                  		lea	(a1,d0.w),a1
000077AA 7200                       		moveq	#0,d1
000077AC 3401                       		move.w	d1,d2
000077AE 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
000077B0 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
000077B2                            
000077B2                            LevLoad_NumRows:
000077B2 3001                       		move.w	d1,d0
000077B4 204B                       		movea.l	a3,a0
000077B6                            
000077B6                            LevLoad_Row:
000077B6 10D9                       		move.b	(a1)+,(a0)+
000077B8 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
000077BC 47EB 0080                  		lea	$80(a3),a3	; do next row
000077C0 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
000077C4 4E75                       		rts	
000077C6                            ; End of function LevelLayoutLoad2
000077C6                            
000077C6                            ; ---------------------------------------------------------------------------
000077C6                            ; Dynamic screen resize	loading	subroutine
000077C6                            ; ---------------------------------------------------------------------------
000077C6                            
000077C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000077C6                            
000077C6                            
000077C6                            DynScrResizeLoad:			; XREF: DeformBgLayer
000077C6 7000                       		moveq	#0,d0
000077C8 1038 FE10                  		move.b	($FFFFFE10).w,d0
000077CC D040                       		add.w	d0,d0
000077CE 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
000077D2 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
000077D6 7202                       		moveq	#2,d1
000077D8 3038 F726                  		move.w	($FFFFF726).w,d0
000077DC 9078 F72E                  		sub.w	($FFFFF72E).w,d0
000077E0 6700                       		beq.s	locret_6DAA
000077E2 6400                       		bcc.s	loc_6DAC
000077E4 4441                       		neg.w	d1
000077E6 3038 F704                  		move.w	($FFFFF704).w,d0
000077EA B078 F726                  		cmp.w	($FFFFF726).w,d0
000077EE 6300                       		bls.s	loc_6DA0
000077F0 31C0 F72E                  		move.w	d0,($FFFFF72E).w
000077F4 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
000077FA                            
000077FA                            loc_6DA0:
000077FA D378 F72E                  		add.w	d1,($FFFFF72E).w
000077FE 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007804                            
00007804                            locret_6DAA:
00007804 4E75                       		rts	
00007806                            ; ===========================================================================
00007806                            
00007806                            loc_6DAC:				; XREF: DynScrResizeLoad
00007806 3038 F704                  		move.w	($FFFFF704).w,d0
0000780A 5040                       		addq.w	#8,d0
0000780C B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007810 6500                       		bcs.s	loc_6DC4
00007812 0838 0001 D022             		btst	#1,($FFFFD022).w
00007818 6700                       		beq.s	loc_6DC4
0000781A D241                       		add.w	d1,d1
0000781C D241                       		add.w	d1,d1
0000781E                            
0000781E                            loc_6DC4:
0000781E D378 F72E                  		add.w	d1,($FFFFF72E).w
00007822 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007828 4E75                       		rts	
0000782A                            ; End of function DynScrResizeLoad
0000782A                            
0000782A                            ; ===========================================================================
0000782A                            ; ---------------------------------------------------------------------------
0000782A                            ; Offset index for dynamic screen resizing
0000782A                            ; ---------------------------------------------------------------------------
0000782A 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
0000782E 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00007832 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00007836 0000 0000                  		dc.w Resize_Ending-Resize_Index, Resize_GHZ-Resize_Index
0000783A                            ; ===========================================================================
0000783A                            ; ---------------------------------------------------------------------------
0000783A                            ; Green	Hill Zone dynamic screen resizing
0000783A                            ; ---------------------------------------------------------------------------
0000783A                            
0000783A                            Resize_GHZ:				; XREF: Resize_Index
0000783A 7000                       		moveq	#0,d0
0000783C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007840 D040                       		add.w	d0,d0
00007842 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00007846 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
0000784A                            ; ===========================================================================
0000784A 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
0000784C 0000                       		dc.w Resize_GHZ2-Resize_GHZx
0000784E 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00007850                            ; ===========================================================================
00007850                            
00007850                            Resize_GHZ1:
00007850 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00007856 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
0000785C 6500                       		bcs.s	locret_6E08	; if not, branch
0000785E 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00007864                            
00007864                            locret_6E08:
00007864 4E75                       		rts	
00007866                            ; ===========================================================================
00007866                            
00007866                            Resize_GHZ2:
00007866 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000786C 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00007872 6500                       		bcs.s	locret_6E3A
00007874 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
0000787A 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00007880 6500                       		bcs.s	locret_6E3A
00007882 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007888 0C78 1C00 F700             		cmpi.w	#$1C00,($FFFFF700).w
0000788E 6500                       		bcs.s	locret_6E3A
00007890 31FC 0100 F726             		move.w	#$100,($FFFFF726).w
00007896 0C78 1D00 F700             		cmpi.w	#$1D00,($FFFFF700).w
0000789C 6500                       		bcs.s	locret_6E3A
0000789E 31FC 0020 F726             		move.w	#$20,($FFFFF726).w
000078A4                            		
000078A4                            locret_6E3A:
000078A4 4E75                       		rts	
000078A6                            ; ===========================================================================
000078A6                            
000078A6                            Resize_GHZ3:
000078A6 7000                       		moveq	#0,d0
000078A8 1038 F742                  		move.b	($FFFFF742).w,d0
000078AC 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
000078B0 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
000078B4                            ; ===========================================================================
000078B4 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
000078B6 0000                       		dc.w Resize_GHZ3boss-off_6E4A
000078B8 0000                       		dc.w Resize_GHZ3end-off_6E4A
000078BA                            ; ===========================================================================
000078BA                            
000078BA                            Resize_GHZ3main:
000078BA 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000078C0 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
000078C6 6500                       		bcs.s	locret_6E96
000078C8 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
000078CE 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000078D4 6500                       		bcs.s	locret_6E96
000078D6 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
000078DC 6500                       		bcs.s	loc_6E98
000078DE 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
000078E4 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
000078EA 6400                       		bcc.s	loc_6E8E
000078EC 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
000078F2 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
000078F8                            
000078F8                            loc_6E8E:
000078F8 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000078FE 6400                       		bcc.s	loc_6E98
00007900                            
00007900                            locret_6E96:
00007900 4E75                       		rts	
00007902                            ; ===========================================================================
00007902                            
00007902                            loc_6E98:
00007902 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007908 5438 F742                  		addq.b	#2,($FFFFF742).w
0000790C 4E75                       		rts	
0000790E                            ; ===========================================================================
0000790E                            
0000790E                            Resize_GHZ3boss:
0000790E 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007914 6400                       		bcc.s	loc_6EB0
00007916 5538 F742                  		subq.b	#2,($FFFFF742).w
0000791A                            
0000791A                            loc_6EB0:
0000791A 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00007920 6500                       		bcs.s	locret_6EE8
00007922 6100 0000                  		bsr.w	SingleObjLoad
00007926 6600                       		bne.s	loc_6ED0
00007928 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
0000792C 337C 2A60 0008             		move.w	#$2A60,8(a1)
00007932 337C 0280 000C             		move.w	#$280,$C(a1)
00007938                            
00007938                            loc_6ED0:
00007938 303C 008C                  		move.w	#$8C,d0
0000793C 6100 9CA2                  		bsr.w	PlaySound	; play boss music
00007940 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007946 5438 F742                  		addq.b	#2,($FFFFF742).w
0000794A 7011                       		moveq	#$11,d0
0000794C 6000 9E7C                  		bra.w	LoadPLC		; load boss patterns
00007950                            ; ===========================================================================
00007950                            
00007950                            locret_6EE8:
00007950 4E75                       		rts	
00007952                            ; ===========================================================================
00007952                            
00007952                            Resize_GHZ3end:
00007952 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007958 4E75                       		rts	
0000795A                            ; ===========================================================================
0000795A                            ; ---------------------------------------------------------------------------
0000795A                            ; Labyrinth Zone dynamic screen	resizing
0000795A                            ; ---------------------------------------------------------------------------
0000795A                            
0000795A                            Resize_LZ:				; XREF: Resize_Index
0000795A 7000                       		moveq	#0,d0
0000795C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007960 D040                       		add.w	d0,d0
00007962 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
00007966 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
0000796A                            ; ===========================================================================
0000796A 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
0000796C 0000                       		dc.w Resize_LZ12-Resize_LZx
0000796E 0000                       		dc.w Resize_LZ3-Resize_LZx
00007970 0000                       		dc.w Resize_SBZ3-Resize_LZx
00007972                            ; ===========================================================================
00007972                            
00007972                            Resize_LZ12:
00007972 4E75                       		rts	
00007974                            ; ===========================================================================
00007974                            
00007974                            Resize_LZ3:
00007974 7000                       		moveq	#0,d0
00007976 1038 F742                  		move.b	($FFFFF742).w,d0
0000797A 303B 0000                  		move.w	off_6E4A2(pc,d0.w),d0
0000797E 4EFB 0000                  		jmp	off_6E4A2(pc,d0.w)
00007982                            ; ===========================================================================
00007982                            off_6E4A2:	
00007982 0000                       		dc.w Resize_LZ3boss-off_6E4A2
00007984 0000                       		dc.w Resize_LZ3end-off_6E4A2
00007986                            ; ===========================================================================
00007986                            Resize_LZ3boss:
00007986 4A38 F742                  		tst.b	($FFFFF742).w
0000798A 6600                       		bne.s	locret_6F62
0000798C 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
00007992 6500                       		bcs.s	locret_6F62
00007994 31FC 0640 F726             		move.w	#$640,($FFFFF726).w ; set lower	y-boundary
0000799A 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
000079A0                            
000079A0 6100 0000                  		bsr.w	SingleObjLoad
000079A4 6600                       		bne.s	loc_6F4A
000079A6 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
000079AA 337C 1EA0 0008             		move.w	#$1EA0,8(a1)
000079B0 337C 06E0 000C             		move.w	#$6E0,$C(a1)
000079B6                            loc_6F4A:
000079B6 303C 008C                  		move.w	#$8C,d0
000079BA 6100 9C24                  		bsr.w	PlaySound	; play boss music
000079BE 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000079C4 5438 F742                  		addq.b	#2,($FFFFF742).w
000079C8 7022                       		moveq	#$22,d0
000079CA 6000 9DFE                  		bra.w	LoadPLC		; load boss patterns
000079CE                            ; ===========================================================================
000079CE                            
000079CE                            locret_6F62:
000079CE 4E75                       		rts	
000079D0                            ; ===========================================================================
000079D0                            
000079D0                            Resize_LZ3end:
000079D0 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000079D6 4E75                       		rts	
000079D8                            ; ===========================================================================
000079D8                            
000079D8                            Resize_SBZ3:
000079D8 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000079DE 6500                       		bcs.s	locret_6F8C
000079E0 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
000079E6 6400                       		bcc.s	locret_6F8C	; if not, branch
000079E8 4238 FE30                  		clr.b	($FFFFFE30).w
000079EC 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
000079F2 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
000079F8 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
000079FE                            
000079FE                            locret_6F8C:
000079FE 4E75                       		rts	
00007A00                            ; ===========================================================================
00007A00                            ; ---------------------------------------------------------------------------
00007A00                            ; Marble Zone dynamic screen resizing
00007A00                            ; ---------------------------------------------------------------------------
00007A00                            
00007A00                            Resize_MZ:				; XREF: Resize_Index
00007A00 7000                       		moveq	#0,d0
00007A02 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007A06 D040                       		add.w	d0,d0
00007A08 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
00007A0C 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
00007A10                            ; ===========================================================================
00007A10 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
00007A12 0000                       		dc.w Resize_MZ2-Resize_MZx
00007A14 0000                       		dc.w Resize_MZ3-Resize_MZx
00007A16                            ; ===========================================================================
00007A16                            
00007A16                            Resize_MZ1:
00007A16 7000                       		moveq	#0,d0
00007A18 1038 F742                  		move.b	($FFFFF742).w,d0
00007A1C 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00007A20 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
00007A24                            ; ===========================================================================
00007A24 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
00007A26 0000                       		dc.w loc_6FEA-off_6FB2
00007A28 0000                       		dc.w loc_702E-off_6FB2
00007A2A 0000                       		dc.w loc_7050-off_6FB2
00007A2C                            ; ===========================================================================
00007A2C                            
00007A2C                            loc_6FBA:
00007A2C 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007A32 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
00007A38 6500                       		bcs.s	locret_6FE8
00007A3A 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00007A40 0C78 09A0 F700             		cmpi.w	#$9A0,($FFFFF700).w
00007A46 6500                       		bcs.s	locret_6FE8
00007A48 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007A4E 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007A54 6500                       		bcs.s	locret_6FE8
00007A56 5438 F742                  		addq.b	#2,($FFFFF742).w
00007A5A                            
00007A5A                            locret_6FE8:
00007A5A 4E75                       		rts	
00007A5C                            ; ===========================================================================
00007A5C                            
00007A5C                            loc_6FEA:
00007A5C 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007A62 6400                       		bcc.s	loc_6FF8
00007A64 5538 F742                  		subq.b	#2,($FFFFF742).w
00007A68 4E75                       		rts	
00007A6A                            ; ===========================================================================
00007A6A                            
00007A6A                            loc_6FF8:
00007A6A 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007A70 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00007A76 6400                       		bcc.s	locret_702C
00007A78 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00007A7E 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007A84 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00007A8A 6400                       		bcc.s	locret_702C
00007A8C 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007A92 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007A98 6500                       		bcs.s	locret_702C
00007A9A 5438 F742                  		addq.b	#2,($FFFFF742).w
00007A9E                            
00007A9E                            locret_702C:
00007A9E 4E75                       		rts	
00007AA0                            ; ===========================================================================
00007AA0                            
00007AA0                            loc_702E:
00007AA0 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007AA6 6400                       		bcc.s	loc_703C
00007AA8 5538 F742                  		subq.b	#2,($FFFFF742).w
00007AAC 4E75                       		rts	
00007AAE                            ; ===========================================================================
00007AAE                            
00007AAE                            loc_703C:
00007AAE 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00007AB4 6500                       		bcs.s	locret_704E
00007AB6 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00007ABC 5438 F742                  		addq.b	#2,($FFFFF742).w
00007AC0                            
00007AC0                            locret_704E:
00007AC0 4E75                       		rts	
00007AC2                            ; ===========================================================================
00007AC2                            
00007AC2                            loc_7050:
00007AC2 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00007AC8 6500                       		bcs.s	locret_7072
00007ACA 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007AD0 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007AD6 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00007ADC 6500                       		bcs.s	locret_7072
00007ADE 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007AE4                            
00007AE4                            locret_7072:
00007AE4 4E75                       		rts	
00007AE6                            ; ===========================================================================
00007AE6                            
00007AE6                            Resize_MZ2:
00007AE6 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007AEC 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007AF2 6500                       		bcs.s	locret_7088
00007AF4 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007AFA                            
00007AFA                            locret_7088:
00007AFA 4E75                       		rts	
00007AFC                            ; ===========================================================================
00007AFC                            
00007AFC                            Resize_MZ3:
00007AFC 7000                       		moveq	#0,d0
00007AFE 1038 F742                  		move.b	($FFFFF742).w,d0
00007B02 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00007B06 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00007B0A                            ; ===========================================================================
00007B0A 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
00007B0C 0000                       		dc.w Resize_MZ3end-off_7098
00007B0E                            ; ===========================================================================
00007B0E                            
00007B0E                            Resize_MZ3boss:
00007B0E 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007B14 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00007B1A 6500                       		bcs.s	locret_70E8
00007B1C 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007B22 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
00007B28 6500                       		bcs.s	locret_70E8
00007B2A 6100 0000                  		bsr.w	SingleObjLoad
00007B2E 6600                       		bne.s	loc_70D0
00007B30 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
00007B34 337C 19F0 0008             		move.w	#$19F0,8(a1)
00007B3A 337C 022C 000C             		move.w	#$22C,$C(a1)
00007B40                            
00007B40                            loc_70D0:
00007B40 303C 008C                  		move.w	#$8C,d0
00007B44 6100 9A9A                  		bsr.w	PlaySound	; play boss music
00007B48 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007B4E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007B52 7011                       		moveq	#$11,d0
00007B54 6000 9C74                  		bra.w	LoadPLC		; load boss patterns
00007B58                            ; ===========================================================================
00007B58                            
00007B58                            locret_70E8:
00007B58 4E75                       		rts	
00007B5A                            ; ===========================================================================
00007B5A                            
00007B5A                            Resize_MZ3end:
00007B5A 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007B60 4E75                       		rts	
00007B62                            ; ===========================================================================
00007B62                            ; ---------------------------------------------------------------------------
00007B62                            ; Star Light Zone dynamic screen resizing
00007B62                            ; ---------------------------------------------------------------------------
00007B62                            
00007B62                            Resize_SLZ:				; XREF: Resize_Index
00007B62 7000                       		moveq	#0,d0
00007B64 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007B68 D040                       		add.w	d0,d0
00007B6A 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00007B6E 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
00007B72                            ; ===========================================================================
00007B72 0000                       Resize_SLZx:	dc.w Resize_SLZ1-Resize_SLZx
00007B74 0000                       		dc.w Resize_SLZ2-Resize_SLZx
00007B76 0000                       		dc.w Resize_SLZ3-Resize_SLZx
00007B78                            ; ===========================================================================
00007B78                            
00007B78                            Resize_SLZ1:
00007B78 31FC 0100 F726             		move.w	#$100,($FFFFF726).w ; set lower	y-boundary
00007B7E 4E75                       		rts	
00007B80                            
00007B80                            Resize_SLZ2:
00007B80 4E75                       		rts	
00007B82                            ; ===========================================================================
00007B82                            
00007B82                            Resize_SLZ3:
00007B82 7000                       		moveq	#0,d0
00007B84 1038 F742                  		move.b	($FFFFF742).w,d0
00007B88 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00007B8C 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00007B90                            ; ===========================================================================
00007B90 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
00007B92 0000                       		dc.w Resize_SLZ3boss-off_7118
00007B94 0000                       		dc.w Resize_SLZ3end-off_7118
00007B96                            ; ===========================================================================
00007B96                            
00007B96                            Resize_SLZ3main:
00007B96 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
00007B9C 6500                       		bcs.s	locret_7130
00007B9E 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007BA4 5438 F742                  		addq.b	#2,($FFFFF742).w
00007BA8                            
00007BA8                            locret_7130:
00007BA8 4E75                       		rts	
00007BAA                            ; ===========================================================================
00007BAA                            
00007BAA                            Resize_SLZ3boss:
00007BAA 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007BB0 6500                       		bcs.s	locret_715C
00007BB2 6100 0000                  		bsr.w	SingleObjLoad
00007BB6 6600                       		bne.s	loc_7144
00007BB8 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00007BBC                            
00007BBC                            loc_7144:
00007BBC 303C 008C                  		move.w	#$8C,d0
00007BC0 6100 9A1E                  		bsr.w	PlaySound	; play boss music
00007BC4 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007BCA 5438 F742                  		addq.b	#2,($FFFFF742).w
00007BCE 7011                       		moveq	#$11,d0
00007BD0 6000 9BF8                  		bra.w	LoadPLC		; load boss patterns
00007BD4                            ; ===========================================================================
00007BD4                            
00007BD4                            locret_715C:
00007BD4 4E75                       		rts	
00007BD6                            ; ===========================================================================
00007BD6                            
00007BD6                            Resize_SLZ3end:
00007BD6 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007BDC 4E75                       		rts
00007BDE 4E75                       		rts
00007BE0                            ; ===========================================================================
00007BE0                            ; ---------------------------------------------------------------------------
00007BE0                            ; Spring Yard Zone dynamic screen resizing
00007BE0                            ; ---------------------------------------------------------------------------
00007BE0                            
00007BE0                            Resize_SYZ:				; XREF: Resize_Index
00007BE0 7000                       		moveq	#0,d0
00007BE2 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007BE6 D040                       		add.w	d0,d0
00007BE8 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00007BEC 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
00007BF0                            ; ===========================================================================
00007BF0 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
00007BF2 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00007BF4 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00007BF6                            ; ===========================================================================
00007BF6                            
00007BF6                            Resize_SYZ1:
00007BF6 4E75                       		rts	
00007BF8                            ; ===========================================================================
00007BF8                            
00007BF8                            Resize_SYZ2:
00007BF8 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007BFE 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
00007C04 6500                       		bcs.s	locret_71A2
00007C06 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
00007C0C 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
00007C12 6500                       		bcs.s	locret_71A2
00007C14 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007C1A                            
00007C1A                            locret_71A2:
00007C1A 4E75                       		rts	
00007C1C                            ; ===========================================================================
00007C1C                            
00007C1C                            Resize_SYZ3:
00007C1C 7000                       		moveq	#0,d0
00007C1E 1038 F742                  		move.b	($FFFFF742).w,d0
00007C22 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00007C26 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00007C2A                            ; ===========================================================================
00007C2A 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
00007C2C 0000                       		dc.w Resize_SYZ3boss-off_71B2
00007C2E 0000                       		dc.w Resize_SYZ3end-off_71B2
00007C30                            ; ===========================================================================
00007C30                            
00007C30                            Resize_SYZ3main:
00007C30 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
00007C36 6500                       		bcs.s	locret_71CE
00007C38 6100 0000                  		bsr.w	SingleObjLoad
00007C3C 6600                       		bne.s	locret_71CE
00007C3E 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
00007C42 5438 F742                  		addq.b	#2,($FFFFF742).w
00007C46                            
00007C46                            locret_71CE:
00007C46 4E75                       		rts	
00007C48                            ; ===========================================================================
00007C48                            
00007C48                            Resize_SYZ3boss:
00007C48 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
00007C4E 6500                       		bcs.s	locret_7200
00007C50 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00007C56 6100 0000                  		bsr.w	SingleObjLoad
00007C5A 6600                       		bne.s	loc_71EC
00007C5C 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
00007C60 5438 F742                  		addq.b	#2,($FFFFF742).w
00007C64                            
00007C64                            loc_71EC:
00007C64 303C 008C                  		move.w	#$8C,d0
00007C68 6100 9976                  		bsr.w	PlaySound	; play boss music
00007C6C 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007C72 7011                       		moveq	#$11,d0
00007C74 6000 9B54                  		bra.w	LoadPLC		; load boss patterns
00007C78                            ; ===========================================================================
00007C78                            
00007C78                            locret_7200:
00007C78 4E75                       		rts	
00007C7A                            ; ===========================================================================
00007C7A                            
00007C7A                            Resize_SYZ3end:
00007C7A 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007C80 4E75                       		rts	
00007C82                            ; ===========================================================================
00007C82                            ; ---------------------------------------------------------------------------
00007C82                            ; Scrap	Brain Zone dynamic screen resizing
00007C82                            ; ---------------------------------------------------------------------------
00007C82                            
00007C82                            Resize_SBZ:				; XREF: Resize_Index
00007C82 7000                       		moveq	#0,d0
00007C84 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007C88 D040                       		add.w	d0,d0
00007C8A 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
00007C8E 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00007C92                            ; ===========================================================================
00007C92 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00007C94 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00007C96 0000                       		dc.w Resize_FZ-Resize_SBZx
00007C98                            ; ===========================================================================
00007C98                            
00007C98                            Resize_SBZ1:
00007C98 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007C9E 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00007CA4 6500                       		bcs.s	locret_7242
00007CA6 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00007CAC 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007CB2 6500                       		bcs.s	locret_7242
00007CB4 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00007CBA                            
00007CBA                            locret_7242:
00007CBA 4E75                       		rts	
00007CBC                            ; ===========================================================================
00007CBC                            
00007CBC                            Resize_SBZ2:
00007CBC 7000                       		moveq	#0,d0
00007CBE 1038 F742                  		move.b	($FFFFF742).w,d0
00007CC2 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00007CC6 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00007CCA                            ; ===========================================================================
00007CCA 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00007CCC 0000                       		dc.w Resize_SBZ2boss-off_7252
00007CCE 0000                       		dc.w Resize_SBZ2boss2-off_7252
00007CD0 0000                       		dc.w Resize_SBZ2end-off_7252
00007CD2                            ; ===========================================================================
00007CD2                            
00007CD2                            Resize_SBZ2main:
00007CD2 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00007CD8 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00007CDE 6500                       		bcs.s	locret_727A
00007CE0 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00007CE6 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00007CEC 6500                       		bcs.s	locret_727A
00007CEE 5438 F742                  		addq.b	#2,($FFFFF742).w
00007CF2                            
00007CF2                            locret_727A:
00007CF2 4E75                       		rts	
00007CF4                            ; ===========================================================================
00007CF4                            
00007CF4                            Resize_SBZ2boss:
00007CF4 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
00007CFA 6500                       		bcs.s	locret_7298
00007CFC 6100 0000                  		bsr.w	SingleObjLoad
00007D00 6600                       		bne.s	locret_7298
00007D02 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00007D06 5438 F742                  		addq.b	#2,($FFFFF742).w
00007D0A 701E                       		moveq	#$1E,d0
00007D0C 6000 9ABC                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
00007D10                            ; ===========================================================================
00007D10                            
00007D10                            locret_7298:
00007D10 4E75                       		rts	
00007D12                            ; ===========================================================================
00007D12                            
00007D12                            Resize_SBZ2boss2:
00007D12 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
00007D18 6500                       		bcs.s	loc_72B6
00007D1A 6100 0000                  		bsr.w	SingleObjLoad
00007D1E 6600                       		bne.s	loc_72B0
00007D20 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00007D24 5438 F742                  		addq.b	#2,($FFFFF742).w
00007D28                            
00007D28                            loc_72B0:
00007D28 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007D2E                            
00007D2E                            loc_72B6:
00007D2E 6000                       		bra.s	loc_72C2
00007D30                            ; ===========================================================================
00007D30                            
00007D30                            Resize_SBZ2end:
00007D30 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00007D36 6500                       		bcs.s	loc_72C2
00007D38 4E75                       		rts	
00007D3A                            ; ===========================================================================
00007D3A                            
00007D3A                            loc_72C2:
00007D3A 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007D40 4E75                       		rts	
00007D42                            ; ===========================================================================
00007D42                            
00007D42                            Resize_FZ:
00007D42 7000                       		moveq	#0,d0
00007D44 1038 F742                  		move.b	($FFFFF742).w,d0
00007D48 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00007D4C 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00007D50                            ; ===========================================================================
00007D50 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00007D54 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00007D58 0000                       		dc.w Resize_FZend2-off_72D8
00007D5A                            ; ===========================================================================
00007D5A                            
00007D5A                            Resize_FZmain:
00007D5A 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
00007D60 6500                       		bcs.s	loc_72F4
00007D62 5438 F742                  		addq.b	#2,($FFFFF742).w
00007D66 701F                       		moveq	#$1F,d0
00007D68 6100 9A60                  		bsr.w	LoadPLC		; load FZ boss patterns
00007D6C 103C 00E0                  		move.b	#$E0,d0		; fade song
00007D70 4EB8 15E6                  		jsr	PlaySound_Special
00007D74                            loc_72F4:
00007D74 60C4                       		bra.s	loc_72C2
00007D76                            ; ===========================================================================
00007D76                            
00007D76                            Resize_FZboss:
00007D76 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00007D7C 6500                       		bcs.s	loc_7312
00007D7E 6100 0000                  		bsr.w	SingleObjLoad
00007D82 6600                       		bne.s	loc_7312
00007D84 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
00007D88 5438 F742                  		addq.b	#2,($FFFFF742).w
00007D8C 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007D92                            
00007D92                            loc_7312:
00007D92 60A6                       		bra.s	loc_72C2
00007D94                            ; ===========================================================================
00007D94                            
00007D94                            Resize_FZend:
00007D94 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00007D9A 6500                       		bcs.s	loc_7320
00007D9C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007DA0                            
00007DA0                            loc_7320:
00007DA0 6098                       		bra.s	loc_72C2
00007DA2                            ; ===========================================================================
00007DA2                            
00007DA2                            locret_7322:
00007DA2 4E75                       		rts	
00007DA4                            ; ===========================================================================
00007DA4                            
00007DA4                            Resize_FZend2:
00007DA4 6094                       		bra.s	loc_72C2
00007DA6                            ; ===========================================================================
00007DA6                            ; ---------------------------------------------------------------------------
00007DA6                            ; Ending sequence dynamic screen resizing (empty)
00007DA6                            ; ---------------------------------------------------------------------------
00007DA6                            
00007DA6                            Resize_Ending:				; XREF: Resize_Index
00007DA6 4E75                       		rts	
00007DA8                            ; ===========================================================================
00007DA8                            ; ---------------------------------------------------------------------------
00007DA8                            ; Object 11 - GHZ bridge
00007DA8                            ; ---------------------------------------------------------------------------
00007DA8                            
00007DA8                            Obj11:					; XREF: Obj_Index
00007DA8 7000                       		moveq	#0,d0
00007DAA 1028 0024                  		move.b	$24(a0),d0
00007DAE 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00007DB2 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00007DB6                            ; ===========================================================================
00007DB6 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00007DBA 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00007DBE 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00007DC2                            ; ===========================================================================
00007DC2                            
00007DC2                            Obj11_Main:				; XREF: Obj11_Index
00007DC2 5428 0024                  		addq.b	#2,$24(a0)
00007DC6 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00007DCE 317C 438E 0002             		move.w	#$438E,2(a0)
00007DD4 117C 0004 0001             		move.b	#4,1(a0)
00007DDA 117C 0003 0018             		move.b	#3,$18(a0)
00007DE0 117C 0080 0019             		move.b	#$80,$19(a0)
00007DE6 3428 000C                  		move.w	$C(a0),d2
00007DEA 3628 0008                  		move.w	8(a0),d3
00007DEE 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00007DF0 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00007DF4 7200                       		moveq	#0,d1
00007DF6 1212                       		move.b	(a2),d1		; copy a2 to d1
00007DF8 14FC 0000                  		move.b	#0,(a2)+
00007DFC 3001                       		move.w	d1,d0
00007DFE E248                       		lsr.w	#1,d0
00007E00 E948                       		lsl.w	#4,d0
00007E02 9640                       		sub.w	d0,d3
00007E04 5501                       		subq.b	#2,d1
00007E06 6500                       		bcs.s	Obj11_Action
00007E08                            
00007E08                            Obj11_MakeBdg:
00007E08 6100 0000                  		bsr.w	SingleObjLoad
00007E0C 6600                       		bne.s	Obj11_Action
00007E0E 5228 0028                  		addq.b	#1,$28(a0)
00007E12 B668 0008                  		cmp.w	8(a0),d3
00007E16 6600                       		bne.s	loc_73B8
00007E18 0643 0010                  		addi.w	#$10,d3
00007E1C 3142 000C                  		move.w	d2,$C(a0)
00007E20 3142 003C                  		move.w	d2,$3C(a0)
00007E24 3A08                       		move.w	a0,d5
00007E26 0445 D000                  		subi.w	#-$3000,d5
00007E2A EC4D                       		lsr.w	#6,d5
00007E2C 0245 007F                  		andi.w	#$7F,d5
00007E30 14C5                       		move.b	d5,(a2)+
00007E32 5228 0028                  		addq.b	#1,$28(a0)
00007E36                            
00007E36                            loc_73B8:				; XREF: ROM:00007398j
00007E36 3A09                       		move.w	a1,d5
00007E38 0445 D000                  		subi.w	#-$3000,d5
00007E3C EC4D                       		lsr.w	#6,d5
00007E3E 0245 007F                  		andi.w	#$7F,d5
00007E42 14C5                       		move.b	d5,(a2)+
00007E44 137C 000A 0024             		move.b	#$A,$24(a1)
00007E4A 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00007E4C 3342 000C                  		move.w	d2,$C(a1)
00007E50 3342 003C                  		move.w	d2,$3C(a1)
00007E54 3343 0008                  		move.w	d3,8(a1)
00007E58 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007E60 337C 438E 0002             		move.w	#$438E,2(a1)
00007E66 137C 0004 0001             		move.b	#4,1(a1)
00007E6C 137C 0003 0018             		move.b	#3,$18(a1)
00007E72 137C 0008 0019             		move.b	#8,$19(a1)
00007E78 0643 0010                  		addi.w	#$10,d3
00007E7C 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00007E80                            
00007E80                            Obj11_Action:				; XREF: Obj11_Index
00007E80 6100                       		bsr.s	Obj11_Solid
00007E82 4A28 003E                  		tst.b	$3E(a0)
00007E86 6700                       		beq.s	Obj11_Display
00007E88 5928 003E                  		subq.b	#4,$3E(a0)
00007E8C 6100 0000                  		bsr.w	Obj11_Bend
00007E90                            
00007E90                            Obj11_Display:
00007E90 6100 0000                  		bsr.w	DisplaySprite
00007E94 6000 0000                  		bra.w	Obj11_ChkDel
00007E98                            
00007E98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E98                            
00007E98                            
00007E98                            Obj11_Solid:				; XREF: Obj11_Action
00007E98 7200                       		moveq	#0,d1
00007E9A 1228 0028                  		move.b	$28(a0),d1
00007E9E E749                       		lsl.w	#3,d1
00007EA0 3401                       		move.w	d1,d2
00007EA2 5041                       		addq.w	#8,d1
00007EA4 D442                       		add.w	d2,d2
00007EA6 43F8 D000                  		lea	($FFFFD000).w,a1
00007EAA 4A69 0012                  		tst.w	$12(a1)
00007EAE 6B00 0000                  		bmi.w	locret_751E
00007EB2 3029 0008                  		move.w	8(a1),d0
00007EB6 9068 0008                  		sub.w	8(a0),d0
00007EBA D041                       		add.w	d1,d0
00007EBC 6B00 0000                  		bmi.w	locret_751E
00007EC0 B042                       		cmp.w	d2,d0
00007EC2 6400 0000                  		bcc.w	locret_751E
00007EC6 6000                       		bra.s	Platform2
00007EC8                            ; End of function Obj11_Solid
00007EC8                            
00007EC8                            ; ---------------------------------------------------------------------------
00007EC8                            ; Platform subroutine
00007EC8                            ; ---------------------------------------------------------------------------
00007EC8                            
00007EC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007EC8                            
00007EC8                            
00007EC8                            PlatformObject:
00007EC8 43F8 D000                  		lea	($FFFFD000).w,a1
00007ECC 4A69 0012                  		tst.w	$12(a1)
00007ED0 6B00 0000                  		bmi.w	locret_751E
00007ED4 3029 0008                  		move.w	8(a1),d0
00007ED8 9068 0008                  		sub.w	8(a0),d0
00007EDC D041                       		add.w	d1,d0
00007EDE 6B00 0000                  		bmi.w	locret_751E
00007EE2 D241                       		add.w	d1,d1
00007EE4 B041                       		cmp.w	d1,d0
00007EE6 6400 0000                  		bcc.w	locret_751E
00007EEA                            
00007EEA                            Platform2:
00007EEA 3028 000C                  		move.w	$C(a0),d0
00007EEE 5140                       		subq.w	#8,d0
00007EF0                            
00007EF0                            Platform3:
00007EF0 3429 000C                  		move.w	$C(a1),d2
00007EF4 1229 0016                  		move.b	$16(a1),d1
00007EF8 4881                       		ext.w	d1
00007EFA D242                       		add.w	d2,d1
00007EFC 5841                       		addq.w	#4,d1
00007EFE 9041                       		sub.w	d1,d0
00007F00 6200 0000                  		bhi.w	locret_751E
00007F04 0C40 FFF0                  		cmpi.w	#-$10,d0
00007F08 6500 0000                  		bcs.w	locret_751E
00007F0C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007F10 6B00 0000                  		bmi.w	locret_751E
00007F14 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00007F1A 6400 0000                  		bcc.w	locret_751E
00007F1E D440                       		add.w	d0,d2
00007F20 5642                       		addq.w	#3,d2
00007F22 3342 000C                  		move.w	d2,$C(a1)
00007F26 5428 0024                  		addq.b	#2,$24(a0)
00007F2A                            
00007F2A                            loc_74AE:
00007F2A 0829 0003 0022             		btst	#3,$22(a1)
00007F30 6700                       		beq.s	loc_74DC
00007F32 7000                       		moveq	#0,d0
00007F34 1029 003D                  		move.b	$3D(a1),d0
00007F38 ED48                       		lsl.w	#6,d0
00007F3A 0680 00FF D000             		addi.l	#$FFD000,d0
00007F40 2440                       		movea.l	d0,a2
00007F42 08AA 0003 0022             		bclr	#3,$22(a2)
00007F48 422A 0025                  		clr.b	$25(a2)
00007F4C 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007F52 6600                       		bne.s	loc_74DC
00007F54 552A 0024                  		subq.b	#2,$24(a2)
00007F58                            
00007F58                            loc_74DC:
00007F58 3008                       		move.w	a0,d0
00007F5A 0440 D000                  		subi.w	#-$3000,d0
00007F5E EC48                       		lsr.w	#6,d0
00007F60 0240 007F                  		andi.w	#$7F,d0
00007F64 1340 003D                  		move.b	d0,$3D(a1)
00007F68 137C 0000 0026             		move.b	#0,$26(a1)
00007F6E 337C 0000 0012             		move.w	#0,$12(a1)
00007F74 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007F7A 0829 0001 0022             		btst	#1,$22(a1)
00007F80 6700                       		beq.s	loc_7512
00007F82 2F08                       		move.l	a0,-(sp)
00007F84 2049                       		movea.l	a1,a0
00007F86 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007F8C 205F                       		movea.l	(sp)+,a0
00007F8E                            
00007F8E                            loc_7512:
00007F8E 08E9 0003 0022             		bset	#3,$22(a1)
00007F94 08E8 0003 0022             		bset	#3,$22(a0)
00007F9A                            
00007F9A                            locret_751E:
00007F9A 4E75                       		rts	
00007F9C                            ; End of function PlatformObject
00007F9C                            
00007F9C                            ; ---------------------------------------------------------------------------
00007F9C                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007F9C                            ; ---------------------------------------------------------------------------
00007F9C                            
00007F9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F9C                            
00007F9C                            
00007F9C                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007F9C 43F8 D000                  		lea	($FFFFD000).w,a1
00007FA0 4A69 0012                  		tst.w	$12(a1)
00007FA4 6B00 FFF4                  		bmi.w	locret_751E
00007FA8 3029 0008                  		move.w	8(a1),d0
00007FAC 9068 0008                  		sub.w	8(a0),d0
00007FB0 D041                       		add.w	d1,d0
00007FB2 6BE6                       		bmi.s	locret_751E
00007FB4 D241                       		add.w	d1,d1
00007FB6 B041                       		cmp.w	d1,d0
00007FB8 64E0                       		bcc.s	locret_751E
00007FBA 0828 0000 0001             		btst	#0,1(a0)
00007FC0 6700                       		beq.s	loc_754A
00007FC2 4640                       		not.w	d0
00007FC4 D041                       		add.w	d1,d0
00007FC6                            
00007FC6                            loc_754A:
00007FC6 E248                       		lsr.w	#1,d0
00007FC8 7600                       		moveq	#0,d3
00007FCA 1632 0000                  		move.b	(a2,d0.w),d3
00007FCE 3028 000C                  		move.w	$C(a0),d0
00007FD2 9043                       		sub.w	d3,d0
00007FD4 6000 FF1A                  		bra.w	Platform3
00007FD8                            ; End of function SlopeObject
00007FD8                            
00007FD8                            
00007FD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FD8                            
00007FD8                            
00007FD8                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007FD8 43F8 D000                  		lea	($FFFFD000).w,a1
00007FDC 4A69 0012                  		tst.w	$12(a1)
00007FE0 6B00 FFB8                  		bmi.w	locret_751E
00007FE4 3029 0008                  		move.w	8(a1),d0
00007FE8 9068 0008                  		sub.w	8(a0),d0
00007FEC D041                       		add.w	d1,d0
00007FEE 6B00 FFAA                  		bmi.w	locret_751E
00007FF2 D241                       		add.w	d1,d1
00007FF4 B041                       		cmp.w	d1,d0
00007FF6 6400 FFA2                  		bcc.w	locret_751E
00007FFA 3028 000C                  		move.w	$C(a0),d0
00007FFE 9043                       		sub.w	d3,d0
00008000 6000 FEEE                  		bra.w	Platform3
00008004                            ; End of function Obj15_Solid
00008004                            
00008004                            ; ===========================================================================
00008004                            
00008004                            Obj11_Action2:				; XREF: Obj11_Index
00008004 6100                       		bsr.s	Obj11_WalkOff
00008006 6100 0000                  		bsr.w	DisplaySprite
0000800A 6000 0000                  		bra.w	Obj11_ChkDel
0000800E                            
0000800E                            ; ---------------------------------------------------------------------------
0000800E                            ; Subroutine allowing Sonic to walk off a bridge
0000800E                            ; ---------------------------------------------------------------------------
0000800E                            
0000800E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000800E                            
0000800E                            
0000800E                            Obj11_WalkOff:				; XREF: Obj11_Action2
0000800E 7200                       		moveq	#0,d1
00008010 1228 0028                  		move.b	$28(a0),d1
00008014 E749                       		lsl.w	#3,d1
00008016 3401                       		move.w	d1,d2
00008018 5041                       		addq.w	#8,d1
0000801A 6100                       		bsr.s	ExitPlatform2
0000801C 6400                       		bcc.s	locret_75BE
0000801E E848                       		lsr.w	#4,d0
00008020 1140 003F                  		move.b	d0,$3F(a0)
00008024 1028 003E                  		move.b	$3E(a0),d0
00008028 0C00 0040                  		cmpi.b	#$40,d0
0000802C 6700                       		beq.s	loc_75B6
0000802E 5828 003E                  		addq.b	#4,$3E(a0)
00008032                            
00008032                            loc_75B6:
00008032 6100 0000                  		bsr.w	Obj11_Bend
00008036 6100 0000                  		bsr.w	Obj11_MoveSonic
0000803A                            
0000803A                            locret_75BE:
0000803A 4E75                       		rts	
0000803C                            ; End of function Obj11_WalkOff
0000803C                            
0000803C                            ; ---------------------------------------------------------------------------
0000803C                            ; Subroutine allowing Sonic to walk or jump off	a platform
0000803C                            ; ---------------------------------------------------------------------------
0000803C                            
0000803C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000803C                            
0000803C                            
0000803C                            ExitPlatform:
0000803C 3401                       		move.w	d1,d2
0000803E                            
0000803E                            ExitPlatform2:
0000803E D442                       		add.w	d2,d2
00008040 43F8 D000                  		lea	($FFFFD000).w,a1
00008044 0829 0001 0022             		btst	#1,$22(a1)
0000804A 6600                       		bne.s	loc_75E0
0000804C 3029 0008                  		move.w	8(a1),d0
00008050 9068 0008                  		sub.w	8(a0),d0
00008054 D041                       		add.w	d1,d0
00008056 6B00                       		bmi.s	loc_75E0
00008058 B042                       		cmp.w	d2,d0
0000805A 6500                       		bcs.s	locret_75F2
0000805C                            
0000805C                            loc_75E0:
0000805C 08A9 0003 0022             		bclr	#3,$22(a1)
00008062 117C 0002 0024             		move.b	#2,$24(a0)
00008068 08A8 0003 0022             		bclr	#3,$22(a0)
0000806E                            
0000806E                            locret_75F2:
0000806E 4E75                       		rts	
00008070                            ; End of function ExitPlatform
00008070                            
00008070                            
00008070                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008070                            
00008070                            
00008070                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00008070 7000                       		moveq	#0,d0
00008072 1028 003F                  		move.b	$3F(a0),d0
00008076 1030 0029                  		move.b	$29(a0,d0.w),d0
0000807A ED48                       		lsl.w	#6,d0
0000807C 0680 00FF D000             		addi.l	#$FFD000,d0
00008082 2440                       		movea.l	d0,a2
00008084 43F8 D000                  		lea	($FFFFD000).w,a1
00008088 302A 000C                  		move.w	$C(a2),d0
0000808C 5140                       		subq.w	#8,d0
0000808E 7200                       		moveq	#0,d1
00008090 1229 0016                  		move.b	$16(a1),d1
00008094 9041                       		sub.w	d1,d0
00008096 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
0000809A 4E75                       		rts	
0000809C                            ; End of function Obj11_MoveSonic
0000809C                            
0000809C                            
0000809C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000809C                            
0000809C                            
0000809C                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
0000809C 1028 003E                  		move.b	$3E(a0),d0
000080A0 6100 ACDE                  		bsr.w	CalcSine
000080A4 3800                       		move.w	d0,d4
000080A6 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
000080AC 7000                       		moveq	#0,d0
000080AE 1028 0028                  		move.b	$28(a0),d0
000080B2 E948                       		lsl.w	#4,d0
000080B4 7600                       		moveq	#0,d3
000080B6 1628 003F                  		move.b	$3F(a0),d3
000080BA 3403                       		move.w	d3,d2
000080BC D640                       		add.w	d0,d3
000080BE 7A00                       		moveq	#0,d5
000080C0 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
000080C6 1A35 3000                  		move.b	(a5,d3.w),d5
000080CA 0243 000F                  		andi.w	#$F,d3
000080CE E94B                       		lsl.w	#4,d3
000080D0 47F4 3000                  		lea	(a4,d3.w),a3
000080D4 45E8 0029                  		lea	$29(a0),a2
000080D8                            
000080D8                            loc_765C:
000080D8 7000                       		moveq	#0,d0
000080DA 101A                       		move.b	(a2)+,d0
000080DC ED48                       		lsl.w	#6,d0
000080DE 0680 00FF D000             		addi.l	#$FFD000,d0
000080E4 2240                       		movea.l	d0,a1
000080E6 7000                       		moveq	#0,d0
000080E8 101B                       		move.b	(a3)+,d0
000080EA 5240                       		addq.w	#1,d0
000080EC C0C5                       		mulu.w	d5,d0
000080EE C0C4                       		mulu.w	d4,d0
000080F0 4840                       		swap	d0
000080F2 D069 003C                  		add.w	$3C(a1),d0
000080F6 3340 000C                  		move.w	d0,$C(a1)
000080FA 51CA FFDC                  		dbf	d2,loc_765C
000080FE 7000                       		moveq	#0,d0
00008100 1028 0028                  		move.b	$28(a0),d0
00008104 7600                       		moveq	#0,d3
00008106 1628 003F                  		move.b	$3F(a0),d3
0000810A 5203                       		addq.b	#1,d3
0000810C 9600                       		sub.b	d0,d3
0000810E 4403                       		neg.b	d3
00008110 6B00                       		bmi.s	locret_76CA
00008112 3403                       		move.w	d3,d2
00008114 E94B                       		lsl.w	#4,d3
00008116 47F4 3000                  		lea	(a4,d3.w),a3
0000811A D6C2                       		adda.w	d2,a3
0000811C 5342                       		subq.w	#1,d2
0000811E 6500                       		bcs.s	locret_76CA
00008120                            
00008120                            loc_76A4:
00008120 7000                       		moveq	#0,d0
00008122 101A                       		move.b	(a2)+,d0
00008124 ED48                       		lsl.w	#6,d0
00008126 0680 00FF D000             		addi.l	#$FFD000,d0
0000812C 2240                       		movea.l	d0,a1
0000812E 7000                       		moveq	#0,d0
00008130 1023                       		move.b	-(a3),d0
00008132 5240                       		addq.w	#1,d0
00008134 C0C5                       		mulu.w	d5,d0
00008136 C0C4                       		mulu.w	d4,d0
00008138 4840                       		swap	d0
0000813A D069 003C                  		add.w	$3C(a1),d0
0000813E 3340 000C                  		move.w	d0,$C(a1)
00008142 51CA FFDC                  		dbf	d2,loc_76A4
00008146                            
00008146                            locret_76CA:
00008146 4E75                       		rts	
00008148                            ; End of function Obj11_Bend
00008148                            
00008148                            ; ===========================================================================
00008148                            ; ---------------------------------------------------------------------------
00008148                            ; GHZ bridge-bending data
00008148                            ; (Defines how the bridge bends	when Sonic walks across	it)
00008148                            ; ---------------------------------------------------------------------------
00008148                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00008258                            		even
00008258                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00008358                            		even
00008358                            
00008358                            ; ===========================================================================
00008358                            
00008358                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00008358 3028 0008                  		move.w	8(a0),d0
0000835C 0240 FF80                  		andi.w	#$FF80,d0
00008360 3238 F700                  		move.w	($FFFFF700).w,d1
00008364 0441 0080                  		subi.w	#$80,d1
00008368 0241 FF80                  		andi.w	#$FF80,d1
0000836C 9041                       		sub.w	d1,d0
0000836E 0C40 0280                  		cmpi.w	#$280,d0
00008372 6200 0000                  		bhi.w	Obj11_DelAll
00008376 4E75                       		rts	
00008378                            ; ===========================================================================
00008378                            
00008378                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00008378 7400                       		moveq	#0,d2
0000837A 45E8 0028                  		lea	$28(a0),a2	; load bridge length
0000837E 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00008380 5302                       		subq.b	#1,d2		; subtract 1
00008382 6500                       		bcs.s	Obj11_Delete
00008384                            
00008384                            Obj11_DelLoop:
00008384 7000                       		moveq	#0,d0
00008386 101A                       		move.b	(a2)+,d0
00008388 ED48                       		lsl.w	#6,d0
0000838A 0680 00FF D000             		addi.l	#$FFD000,d0
00008390 2240                       		movea.l	d0,a1
00008392 B048                       		cmp.w	a0,d0
00008394 6700                       		beq.s	loc_791E
00008396 6100 0000                  		bsr.w	DeleteObject2
0000839A                            
0000839A                            loc_791E:
0000839A 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
0000839E                            
0000839E                            Obj11_Delete:
0000839E 6100 0000                  		bsr.w	DeleteObject
000083A2 4E75                       		rts	
000083A4                            ; ===========================================================================
000083A4                            
000083A4                            Obj11_Delete2:				; XREF: Obj11_Index
000083A4 6100 0000                  		bsr.w	DeleteObject
000083A8 4E75                       		rts	
000083AA                            ; ===========================================================================
000083AA                            
000083AA                            Obj11_Display2:				; XREF: Obj11_Index
000083AA 6100 0000                  		bsr.w	DisplaySprite
000083AE 4E75                       		rts	
000083B0                            ; ===========================================================================
000083B0                            ; ---------------------------------------------------------------------------
000083B0                            ; Sprite mappings - GHZ	bridge
000083B0                            ; ---------------------------------------------------------------------------
000083B0                            Map_obj11:
000083B0                            	include "_maps\obj11.asm"
000083B0                            ; ---------------------------------------------------------------------------
000083B0                            ; Sprite mappings - GHZ	bridge
000083B0                            ; ---------------------------------------------------------------------------
000083B0 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
000083B4 0000                       		dc.w byte_794B-Map_obj11
000083B6 01                         byte_793A:	dc.b 1
000083B7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000083BC 02                         byte_7940:	dc.b 2
000083BD F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
000083C2 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
000083C7 01                         byte_794B:	dc.b 1
000083C8 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
000083CE 00                         		even
000083CE 00                         		even
000083CE                            
000083CE                            ; ===========================================================================
000083CE                            ; ---------------------------------------------------------------------------
000083CE                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
000083CE                            ;	    - spiked ball on a chain (SBZ)
000083CE                            ; ---------------------------------------------------------------------------
000083CE                            
000083CE                            Obj15:					; XREF: Obj_Index
000083CE 7000                       		moveq	#0,d0
000083D0 1028 0024                  		move.b	$24(a0),d0
000083D4 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
000083D8 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
000083DC                            ; ===========================================================================
000083DC 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
000083E0 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
000083E4 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
000083E8 0000                       		dc.w Obj15_Action-Obj15_Index
000083EA                            ; ===========================================================================
000083EA                            
000083EA                            Obj15_Main:				; XREF: Obj15_Index
000083EA 5428 0024                  		addq.b	#2,$24(a0)
000083EE 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
000083F6 317C 4380 0002             		move.w	#$4380,2(a0)
000083FC 117C 0004 0001             		move.b	#4,1(a0)
00008402 117C 0003 0018             		move.b	#3,$18(a0)
00008408 117C 0018 0019             		move.b	#$18,$19(a0)
0000840E 117C 0008 0016             		move.b	#8,$16(a0)
00008414 3168 000C 0038             		move.w	$C(a0),$38(a0)
0000841A 3168 0008 003A             		move.w	8(a0),$3A(a0)
00008420 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008426 6600                       		bne.s	Obj15_NotSLZ
00008428 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00008430 317C 43DC 0002             		move.w	#$43DC,2(a0)
00008436 117C 0020 0019             		move.b	#$20,$19(a0)
0000843C 117C 0010 0016             		move.b	#$10,$16(a0)
00008442 117C 0099 0020             		move.b	#$99,$20(a0)
00008448                            
00008448                            Obj15_NotSLZ:
00008448 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000844E 6600                       		bne.s	Obj15_SetLength
00008450 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00008458 317C 0391 0002             		move.w	#$391,2(a0)
0000845E 117C 0018 0019             		move.b	#$18,$19(a0)
00008464 117C 0018 0016             		move.b	#$18,$16(a0)
0000846A 117C 0086 0020             		move.b	#$86,$20(a0)
00008470 117C 000C 0024             		move.b	#$C,$24(a0)
00008476                            
00008476                            Obj15_SetLength:
00008476 1810                       		move.b	0(a0),d4
00008478 7200                       		moveq	#0,d1
0000847A 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
0000847E 1212                       		move.b	(a2),d1		; move a2 to d1
00008480 3F01                       		move.w	d1,-(sp)
00008482 0241 000F                  		andi.w	#$F,d1
00008486 14FC 0000                  		move.b	#0,(a2)+
0000848A 3601                       		move.w	d1,d3
0000848C E94B                       		lsl.w	#4,d3
0000848E 5003                       		addq.b	#8,d3
00008490 1143 003C                  		move.b	d3,$3C(a0)
00008494 5103                       		subq.b	#8,d3
00008496 4A28 001A                  		tst.b	$1A(a0)
0000849A 6700                       		beq.s	Obj15_MakeChain
0000849C 5003                       		addq.b	#8,d3
0000849E 5341                       		subq.w	#1,d1
000084A0                            
000084A0                            Obj15_MakeChain:
000084A0 6100 0000                  		bsr.w	SingleObjLoad
000084A4 6600                       		bne.s	loc_7A92
000084A6 5228 0028                  		addq.b	#1,$28(a0)
000084AA 3A09                       		move.w	a1,d5
000084AC 0445 D000                  		subi.w	#-$3000,d5
000084B0 EC4D                       		lsr.w	#6,d5
000084B2 0245 007F                  		andi.w	#$7F,d5
000084B6 14C5                       		move.b	d5,(a2)+
000084B8 137C 000A 0024             		move.b	#$A,$24(a1)
000084BE 1284                       		move.b	d4,0(a1)	; load swinging	object
000084C0 2368 0004 0004             		move.l	4(a0),4(a1)
000084C6 3368 0002 0002             		move.w	2(a0),2(a1)
000084CC 08A9 0006 0002             		bclr	#6,2(a1)
000084D2 137C 0004 0001             		move.b	#4,1(a1)
000084D8 137C 0004 0018             		move.b	#4,$18(a1)
000084DE 137C 0008 0019             		move.b	#8,$19(a1)
000084E4 137C 0001 001A             		move.b	#1,$1A(a1)
000084EA 1343 003C                  		move.b	d3,$3C(a1)
000084EE 0403 0010                  		subi.b	#$10,d3
000084F2 6400                       		bcc.s	loc_7A8E
000084F4 137C 0002 001A             		move.b	#2,$1A(a1)
000084FA 137C 0003 0018             		move.b	#3,$18(a1)
00008500 08E9 0006 0002             		bset	#6,2(a1)
00008506                            
00008506                            loc_7A8E:
00008506 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
0000850A                            
0000850A                            loc_7A92:
0000850A 3A08                       		move.w	a0,d5
0000850C 0445 D000                  		subi.w	#-$3000,d5
00008510 EC4D                       		lsr.w	#6,d5
00008512 0245 007F                  		andi.w	#$7F,d5
00008516 14C5                       		move.b	d5,(a2)+
00008518 317C 4080 0026             		move.w	#$4080,$26(a0)
0000851E 317C FE00 003E             		move.w	#-$200,$3E(a0)
00008524 321F                       		move.w	(sp)+,d1
00008526 0801 0004                  		btst	#4,d1		; is object type $8X ?
0000852A 6700                       		beq.s	loc_7AD4	; if not, branch
0000852C 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00008534 317C 43AA 0002             		move.w	#$43AA,2(a0)
0000853A 117C 0001 001A             		move.b	#1,$1A(a0)
00008540 117C 0002 0018             		move.b	#2,$18(a0)
00008546 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
0000854C                            
0000854C                            loc_7AD4:
0000854C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00008552 6700                       		beq.s	Obj15_Action	; if yes, branch
00008554                            
00008554                            Obj15_SetSolid:				; XREF: Obj15_Index
00008554 7200                       		moveq	#0,d1
00008556 1228 0019                  		move.b	$19(a0),d1
0000855A 7600                       		moveq	#0,d3
0000855C 1628 0016                  		move.b	$16(a0),d3
00008560 6100 FA76                  		bsr.w	Obj15_Solid
00008564                            
00008564                            Obj15_Action:				; XREF: Obj15_Index
00008564 6100 0000                  		bsr.w	Obj15_Move
00008568 6100 0000                  		bsr.w	DisplaySprite
0000856C 6000 0000                  		bra.w	Obj15_ChkDel
00008570                            ; ===========================================================================
00008570                            
00008570                            Obj15_Action2:				; XREF: Obj15_Index
00008570 7200                       		moveq	#0,d1
00008572 1228 0019                  		move.b	$19(a0),d1
00008576 6100 FAC4                  		bsr.w	ExitPlatform
0000857A 3F28 0008                  		move.w	8(a0),-(sp)
0000857E 6100 0000                  		bsr.w	Obj15_Move
00008582 341F                       		move.w	(sp)+,d2
00008584 7600                       		moveq	#0,d3
00008586 1628 0016                  		move.b	$16(a0),d3
0000858A 5203                       		addq.b	#1,d3
0000858C 6100 0000                  		bsr.w	MvSonicOnPtfm
00008590 6100 0000                  		bsr.w	DisplaySprite
00008594 6000 0000                  		bra.w	Obj15_ChkDel
00008598                            
00008598 4E75                       		rts
0000859A                            
0000859A                            ; ---------------------------------------------------------------------------
0000859A                            ; Subroutine to	change Sonic's position with a platform
0000859A                            ; ---------------------------------------------------------------------------
0000859A                            
0000859A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000859A                            
0000859A                            
0000859A                            MvSonicOnPtfm:
0000859A 43F8 D000                  		lea	($FFFFD000).w,a1
0000859E 3028 000C                  		move.w	$C(a0),d0
000085A2 9043                       		sub.w	d3,d0
000085A4 6000                       		bra.s	MvSonic2
000085A6                            ; End of function MvSonicOnPtfm
000085A6                            
000085A6                            ; ---------------------------------------------------------------------------
000085A6                            ; Subroutine to	change Sonic's position with a platform
000085A6                            ; ---------------------------------------------------------------------------
000085A6                            
000085A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085A6                            
000085A6                            
000085A6                            MvSonicOnPtfm2:
000085A6 43F8 D000                  		lea	($FFFFD000).w,a1
000085AA 3028 000C                  		move.w	$C(a0),d0
000085AE 0440 0009                  		subi.w	#9,d0
000085B2                            
000085B2                            MvSonic2:
000085B2 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000085B6 6B00                       		bmi.s	locret_7B62
000085B8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000085BE 6400                       		bcc.s	locret_7B62
000085C0 4A78 FE08                  		tst.w	($FFFFFE08).w
000085C4 6600                       		bne.s	locret_7B62
000085C6 7200                       		moveq	#0,d1
000085C8 1229 0016                  		move.b	$16(a1),d1
000085CC 9041                       		sub.w	d1,d0
000085CE 3340 000C                  		move.w	d0,$C(a1)
000085D2 9468 0008                  		sub.w	8(a0),d2
000085D6 9569 0008                  		sub.w	d2,8(a1)
000085DA                            
000085DA                            locret_7B62:
000085DA 4E75                       		rts	
000085DC                            ; End of function MvSonicOnPtfm2
000085DC                            
000085DC                            
000085DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085DC                            
000085DC                            
000085DC                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
000085DC 1038 FE78                  		move.b	($FFFFFE78).w,d0
000085E0 323C 0080                  		move.w	#$80,d1
000085E4 0828 0000 0022             		btst	#0,$22(a0)
000085EA 6700                       		beq.s	loc_7B78
000085EC 4440                       		neg.w	d0
000085EE D041                       		add.w	d1,d0
000085F0                            
000085F0                            loc_7B78:
000085F0 6000                       		bra.s	Obj15_Move2
000085F2                            ; End of function Obj15_Move
000085F2                            
000085F2                            
000085F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085F2                            
000085F2                            
000085F2                            Obj48_Move:				; XREF: Obj48_Display2
000085F2 4A28 003D                  		tst.b	$3D(a0)
000085F6 6600                       		bne.s	loc_7B9C
000085F8 3028 003E                  		move.w	$3E(a0),d0
000085FC 5040                       		addq.w	#8,d0
000085FE 3140 003E                  		move.w	d0,$3E(a0)
00008602 D168 0026                  		add.w	d0,$26(a0)
00008606 0C40 0200                  		cmpi.w	#$200,d0
0000860A 6600                       		bne.s	loc_7BB6
0000860C 117C 0001 003D             		move.b	#1,$3D(a0)
00008612 6000                       		bra.s	loc_7BB6
00008614                            ; ===========================================================================
00008614                            
00008614                            loc_7B9C:
00008614 3028 003E                  		move.w	$3E(a0),d0
00008618 5140                       		subq.w	#8,d0
0000861A 3140 003E                  		move.w	d0,$3E(a0)
0000861E D168 0026                  		add.w	d0,$26(a0)
00008622 0C40 FE00                  		cmpi.w	#-$200,d0
00008626 6600                       		bne.s	loc_7BB6
00008628 117C 0000 003D             		move.b	#0,$3D(a0)
0000862E                            
0000862E                            loc_7BB6:
0000862E 1028 0026                  		move.b	$26(a0),d0
00008632                            ; End of function Obj48_Move
00008632                            
00008632                            
00008632                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008632                            
00008632                            
00008632                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00008632 6100 A74C                  		bsr.w	CalcSine
00008636 3428 0038                  		move.w	$38(a0),d2
0000863A 3628 003A                  		move.w	$3A(a0),d3
0000863E 45E8 0028                  		lea	$28(a0),a2
00008642 7C00                       		moveq	#0,d6
00008644 1C1A                       		move.b	(a2)+,d6
00008646                            
00008646                            loc_7BCE:
00008646 7800                       		moveq	#0,d4
00008648 181A                       		move.b	(a2)+,d4
0000864A ED4C                       		lsl.w	#6,d4
0000864C 0684 00FF D000             		addi.l	#$FFD000,d4
00008652 2244                       		movea.l	d4,a1
00008654 7800                       		moveq	#0,d4
00008656 1829 003C                  		move.b	$3C(a1),d4
0000865A 2A04                       		move.l	d4,d5
0000865C C9C0                       		muls.w	d0,d4
0000865E E084                       		asr.l	#8,d4
00008660 CBC1                       		muls.w	d1,d5
00008662 E085                       		asr.l	#8,d5
00008664 D842                       		add.w	d2,d4
00008666 DA43                       		add.w	d3,d5
00008668 3344 000C                  		move.w	d4,$C(a1)
0000866C 3345 0008                  		move.w	d5,8(a1)
00008670 51CE FFD4                  		dbf	d6,loc_7BCE
00008674 4E75                       		rts	
00008676                            ; End of function Obj15_Move2
00008676                            
00008676                            ; ===========================================================================
00008676                            
00008676                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
00008676 3028 003A                  		move.w	$3A(a0),d0
0000867A 0240 FF80                  		andi.w	#$FF80,d0
0000867E 3238 F700                  		move.w	($FFFFF700).w,d1
00008682 0441 0080                  		subi.w	#$80,d1
00008686 0241 FF80                  		andi.w	#$FF80,d1
0000868A 9041                       		sub.w	d1,d0
0000868C 0C40 0280                  		cmpi.w	#$280,d0
00008690 6200 0000                  		bhi.w	Obj15_DelAll
00008694 4E75                       		rts	
00008696                            ; ===========================================================================
00008696                            
00008696                            Obj15_DelAll:				; XREF: Obj15_ChkDel
00008696 7400                       		moveq	#0,d2
00008698 45E8 0028                  		lea	$28(a0),a2
0000869C 141A                       		move.b	(a2)+,d2
0000869E                            
0000869E                            Obj15_DelLoop:
0000869E 7000                       		moveq	#0,d0
000086A0 101A                       		move.b	(a2)+,d0
000086A2 ED48                       		lsl.w	#6,d0
000086A4 0680 00FF D000             		addi.l	#$FFD000,d0
000086AA 2240                       		movea.l	d0,a1
000086AC 6100 0000                  		bsr.w	DeleteObject2
000086B0 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
000086B4 4E75                       		rts	
000086B6                            ; ===========================================================================
000086B6                            
000086B6                            Obj15_Delete:				; XREF: Obj15_Index
000086B6 6100 0000                  		bsr.w	DeleteObject
000086BA 4E75                       		rts	
000086BC                            ; ===========================================================================
000086BC                            
000086BC                            Obj15_Display:				; XREF: Obj15_Index
000086BC 6000 0000                  		bra.w	DisplaySprite
000086C0                            ; ===========================================================================
000086C0                            ; ---------------------------------------------------------------------------
000086C0                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000086C0                            ; ---------------------------------------------------------------------------
000086C0                            Map_obj15:
000086C0                            	include "_maps\obj15ghz.asm"
000086C0                            ; ---------------------------------------------------------------------------
000086C0                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000086C0                            ; ---------------------------------------------------------------------------
000086C0 0000                       		dc.w byte_7C4E-Map_obj15
000086C2 0000                       		dc.w byte_7C59-Map_obj15
000086C4 0000                       		dc.w byte_7C5F-Map_obj15
000086C6 02                         byte_7C4E:	dc.b 2
000086C7 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
000086CC F809 0004 00               		dc.b $F8, 9, 0,	4, 0
000086D1 01                         byte_7C59:	dc.b 1
000086D2 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000086D7 01                         byte_7C5F:	dc.b 1
000086D8 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
000086DE 00                         		even
000086DE 00                         		even
000086DE                            
000086DE                            ; ---------------------------------------------------------------------------
000086DE                            ; Sprite mappings - SLZ	swinging platforms
000086DE                            ; ---------------------------------------------------------------------------
000086DE                            Map_obj15a:
000086DE                            	include "_maps\obj15slz.asm"
000086DE                            ; ---------------------------------------------------------------------------
000086DE                            ; Sprite mappings - SLZ	swinging platforms
000086DE                            ; ---------------------------------------------------------------------------
000086DE 0000                       		dc.w byte_7C6C-Map_obj15a
000086E0 0000                       		dc.w byte_7C95-Map_obj15a
000086E2 0000                       		dc.w byte_7C9B-Map_obj15a
000086E4 08                         byte_7C6C:	dc.b 8
000086E5 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
000086EA F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
000086EF F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
000086F4 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
000086F9 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
000086FE 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00008703 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00008708 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
0000870D 01                         byte_7C95:	dc.b 1
0000870E F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00008713 01                         byte_7C9B:	dc.b 1
00008714 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
0000871A 00                         		even
0000871A 00                         		even
0000871A                            
0000871A                            ; ===========================================================================
0000871A                            ; ---------------------------------------------------------------------------
0000871A                            ; Object 17 - helix of spikes on a pole	(GHZ)
0000871A                            ; ---------------------------------------------------------------------------
0000871A                            
0000871A                            Obj17:					; XREF: Obj_Index
0000871A 7000                       		moveq	#0,d0
0000871C 1028 0024                  		move.b	$24(a0),d0
00008720 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00008724 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00008728                            ; ===========================================================================
00008728 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
0000872A 0000                       		dc.w Obj17_Action-Obj17_Index
0000872C 0000                       		dc.w Obj17_Action-Obj17_Index
0000872E 0000                       		dc.w Obj17_Delete-Obj17_Index
00008730 0000                       		dc.w Obj17_Display-Obj17_Index
00008732                            ; ===========================================================================
00008732                            
00008732                            Obj17_Main:				; XREF: Obj17_Index
00008732 5428 0024                  		addq.b	#2,$24(a0)
00008736 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
0000873E 317C 4398 0002             		move.w	#$4398,2(a0)
00008744 117C 0007 0022             		move.b	#7,$22(a0)
0000874A 117C 0004 0001             		move.b	#4,1(a0)
00008750 117C 0003 0018             		move.b	#3,$18(a0)
00008756 117C 0008 0019             		move.b	#8,$19(a0)
0000875C 3428 000C                  		move.w	$C(a0),d2
00008760 3628 0008                  		move.w	8(a0),d3
00008764 1810                       		move.b	0(a0),d4
00008766 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
0000876A 7200                       		moveq	#0,d1
0000876C 1212                       		move.b	(a2),d1		; move a2 to d1
0000876E 14FC 0000                  		move.b	#0,(a2)+
00008772 3001                       		move.w	d1,d0
00008774 E248                       		lsr.w	#1,d0
00008776 E948                       		lsl.w	#4,d0
00008778 9640                       		sub.w	d0,d3
0000877A 5501                       		subq.b	#2,d1
0000877C 6500                       		bcs.s	Obj17_Action
0000877E 7C00                       		moveq	#0,d6
00008780                            
00008780                            Obj17_MakeHelix:
00008780 6100 0000                  		bsr.w	SingleObjLoad
00008784 6600                       		bne.s	Obj17_Action
00008786 5228 0028                  		addq.b	#1,$28(a0)
0000878A 3A09                       		move.w	a1,d5
0000878C 0445 D000                  		subi.w	#$D000,d5
00008790 EC4D                       		lsr.w	#6,d5
00008792 0245 007F                  		andi.w	#$7F,d5
00008796 14C5                       		move.b	d5,(a2)+
00008798 137C 0008 0024             		move.b	#8,$24(a1)
0000879E 1284                       		move.b	d4,0(a1)
000087A0 3342 000C                  		move.w	d2,$C(a1)
000087A4 3343 0008                  		move.w	d3,8(a1)
000087A8 2368 0004 0004             		move.l	4(a0),4(a1)
000087AE 337C 4398 0002             		move.w	#$4398,2(a1)
000087B4 137C 0004 0001             		move.b	#4,1(a1)
000087BA 137C 0003 0018             		move.b	#3,$18(a1)
000087C0 137C 0008 0019             		move.b	#8,$19(a1)
000087C6 1346 003E                  		move.b	d6,$3E(a1)
000087CA 5206                       		addq.b	#1,d6
000087CC 0206 0007                  		andi.b	#7,d6
000087D0 0643 0010                  		addi.w	#$10,d3
000087D4 B668 0008                  		cmp.w	8(a0),d3
000087D8 6600                       		bne.s	loc_7D78
000087DA 1146 003E                  		move.b	d6,$3E(a0)
000087DE 5206                       		addq.b	#1,d6
000087E0 0206 0007                  		andi.b	#7,d6
000087E4 0643 0010                  		addi.w	#$10,d3
000087E8 5228 0028                  		addq.b	#1,$28(a0)
000087EC                            
000087EC                            loc_7D78:
000087EC 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
000087F0                            
000087F0                            Obj17_Action:				; XREF: Obj17_Index
000087F0 6100 0000                  		bsr.w	Obj17_RotateSpikes
000087F4 6100 0000                  		bsr.w	DisplaySprite
000087F8 6000 0000                  		bra.w	Obj17_ChkDel
000087FC                            
000087FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000087FC                            
000087FC                            
000087FC                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
000087FC 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00008800 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00008806 D028 003E                  		add.b	$3E(a0),d0
0000880A 0200 0007                  		andi.b	#7,d0
0000880E 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00008812 6600                       		bne.s	locret_7DA6
00008814 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
0000881A                            
0000881A                            locret_7DA6:
0000881A 4E75                       		rts	
0000881C                            ; End of function Obj17_RotateSpikes
0000881C                            
0000881C                            ; ===========================================================================
0000881C                            
0000881C                            Obj17_ChkDel:				; XREF: Obj17_Action
0000881C 3028 0008                  		move.w	8(a0),d0
00008820 0240 FF80                  		andi.w	#$FF80,d0
00008824 3238 F700                  		move.w	($FFFFF700).w,d1
00008828 0441 0080                  		subi.w	#$80,d1
0000882C 0241 FF80                  		andi.w	#$FF80,d1
00008830 9041                       		sub.w	d1,d0
00008832 0C40 0280                  		cmpi.w	#$280,d0
00008836 6200 0000                  		bhi.w	Obj17_DelAll
0000883A 4E75                       		rts	
0000883C                            ; ===========================================================================
0000883C                            
0000883C                            Obj17_DelAll:				; XREF: Obj17_ChkDel
0000883C 7400                       		moveq	#0,d2
0000883E 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008842 141A                       		move.b	(a2)+,d2	; move a2 to d2
00008844 5502                       		subq.b	#2,d2
00008846 6500                       		bcs.s	Obj17_Delete
00008848                            
00008848                            Obj17_DelLoop:
00008848 7000                       		moveq	#0,d0
0000884A 101A                       		move.b	(a2)+,d0
0000884C ED48                       		lsl.w	#6,d0
0000884E 0680 00FF D000             		addi.l	#$FFD000,d0
00008854 2240                       		movea.l	d0,a1
00008856 6100 0000                  		bsr.w	DeleteObject2	; delete object
0000885A 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
0000885E                            
0000885E                            Obj17_Delete:				; XREF: Obj17_Index
0000885E 6100 0000                  		bsr.w	DeleteObject
00008862 4E75                       		rts	
00008864                            ; ===========================================================================
00008864                            
00008864                            Obj17_Display:				; XREF: Obj17_Index
00008864 6100 FF96                  		bsr.w	Obj17_RotateSpikes
00008868 6000 0000                  		bra.w	DisplaySprite
0000886C                            ; ===========================================================================
0000886C                            ; ---------------------------------------------------------------------------
0000886C                            ; Sprite mappings - helix of spikes on a pole (GHZ)
0000886C                            ; ---------------------------------------------------------------------------
0000886C                            Map_obj17:
0000886C                            	include "_maps\obj17.asm"
0000886C                            ; ---------------------------------------------------------------------------
0000886C                            ; Sprite mappings - helix of spikes on a pole (GHZ)
0000886C                            ; ---------------------------------------------------------------------------
0000886C 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00008870 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
00008874 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
00008878 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
0000887C 01                         byte_7E08:	dc.b 1
0000887D F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00008882 01                         byte_7E0E:	dc.b 1
00008883 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
00008888 01                         byte_7E14:	dc.b 1
00008889 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
0000888E 01                         byte_7E1A:	dc.b 1
0000888F FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
00008894 01                         byte_7E20:	dc.b 1
00008895 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
0000889A 01                         byte_7E26:	dc.b 1
0000889B 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
000088A0 01                         byte_7E2C:	dc.b 1
000088A1 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
000088A6                            		even
000088A6                            		even
000088A6                            
000088A6                            ; ===========================================================================
000088A6                            ; ---------------------------------------------------------------------------
000088A6                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
000088A6                            ; ---------------------------------------------------------------------------
000088A6                            
000088A6                            Obj18:					; XREF: Obj_Index
000088A6 7000                       		moveq	#0,d0
000088A8 1028 0024                  		move.b	$24(a0),d0
000088AC 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
000088B0 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
000088B4                            ; ===========================================================================
000088B4 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
000088B6 0000                       		dc.w Obj18_Solid-Obj18_Index
000088B8 0000                       		dc.w Obj18_Action2-Obj18_Index
000088BA 0000                       		dc.w Obj18_Delete-Obj18_Index
000088BC 0000                       		dc.w Obj18_Action-Obj18_Index
000088BE                            ; ===========================================================================
000088BE                            
000088BE                            Obj18_Main:				; XREF: Obj18_Index
000088BE 5428 0024                  		addq.b	#2,$24(a0)
000088C2 317C 4000 0002             		move.w	#$4000,2(a0)
000088C8 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
000088D0 117C 0020 0019             		move.b	#$20,$19(a0)
000088D6 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
000088DC 6600                       		bne.s	Obj18_NotSYZ
000088DE 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
000088E6 117C 0020 0019             		move.b	#$20,$19(a0)
000088EC                            
000088EC                            Obj18_NotSYZ:
000088EC 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000088F2 6600                       		bne.s	Obj18_NotSLZ
000088F4 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
000088FC 117C 0020 0019             		move.b	#$20,$19(a0)
00008902 317C 4000 0002             		move.w	#$4000,2(a0)
00008908 117C 0003 0028             		move.b	#3,$28(a0)
0000890E                            
0000890E                            Obj18_NotSLZ:
0000890E 117C 0004 0001             		move.b	#4,1(a0)
00008914 117C 0004 0018             		move.b	#4,$18(a0)
0000891A 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00008920 3168 000C 0034             		move.w	$C(a0),$34(a0)
00008926 3168 0008 0032             		move.w	8(a0),$32(a0)
0000892C 317C 0080 0026             		move.w	#$80,$26(a0)
00008932 7200                       		moveq	#0,d1
00008934 1028 0028                  		move.b	$28(a0),d0
00008938 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
0000893C 6600                       		bne.s	Obj18_SetFrame	; if not, branch
0000893E 5201                       		addq.b	#1,d1		; use frame #1
00008940 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00008946                            
00008946                            Obj18_SetFrame:
00008946 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
0000894A                            
0000894A                            Obj18_Solid:				; XREF: Obj18_Index
0000894A 4A28 0038                  		tst.b	$38(a0)
0000894E 6700                       		beq.s	loc_7EE0
00008950 5928 0038                  		subq.b	#4,$38(a0)
00008954                            
00008954                            loc_7EE0:
00008954 7200                       		moveq	#0,d1
00008956 1228 0019                  		move.b	$19(a0),d1
0000895A 6100 F56C                  		bsr.w	PlatformObject
0000895E                            
0000895E                            Obj18_Action:				; XREF: Obj18_Index
0000895E 6100 0000                  		bsr.w	Obj18_Move
00008962 6100 0000                  		bsr.w	Obj18_Nudge
00008966 6100 0000                  		bsr.w	DisplaySprite
0000896A 6000 0000                  		bra.w	Obj18_ChkDel
0000896E                            ; ===========================================================================
0000896E                            
0000896E                            Obj18_Action2:				; XREF: Obj18_Index
0000896E 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00008974 6700                       		beq.s	loc_7F06
00008976 5828 0038                  		addq.b	#4,$38(a0)
0000897A                            
0000897A                            loc_7F06:
0000897A 7200                       		moveq	#0,d1
0000897C 1228 0019                  		move.b	$19(a0),d1
00008980 6100 F6BA                  		bsr.w	ExitPlatform
00008984 3F28 0008                  		move.w	8(a0),-(sp)
00008988 6100 0000                  		bsr.w	Obj18_Move
0000898C 6100 0000                  		bsr.w	Obj18_Nudge
00008990 341F                       		move.w	(sp)+,d2
00008992 6100 FC12                  		bsr.w	MvSonicOnPtfm2
00008996 6100 0000                  		bsr.w	DisplaySprite
0000899A 6000 0000                  		bra.w	Obj18_ChkDel
0000899E                            
0000899E 4E75                       		rts
000089A0                            
000089A0                            ; ---------------------------------------------------------------------------
000089A0                            ; Subroutine to	move platform slightly when you	stand on it
000089A0                            ; ---------------------------------------------------------------------------
000089A0                            
000089A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000089A0                            
000089A0                            
000089A0                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
000089A0 1028 0038                  		move.b	$38(a0),d0
000089A4 6100 A3DA                  		bsr.w	CalcSine
000089A8 323C 0400                  		move.w	#$400,d1
000089AC C1C1                       		muls.w	d1,d0
000089AE 4840                       		swap	d0
000089B0 D068 002C                  		add.w	$2C(a0),d0
000089B4 3140 000C                  		move.w	d0,$C(a0)
000089B8 4E75                       		rts	
000089BA                            ; End of function Obj18_Nudge
000089BA                            
000089BA                            ; ---------------------------------------------------------------------------
000089BA                            ; Subroutine to	move platforms
000089BA                            ; ---------------------------------------------------------------------------
000089BA                            
000089BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000089BA                            
000089BA                            
000089BA                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
000089BA 7000                       		moveq	#0,d0
000089BC 1028 0028                  		move.b	$28(a0),d0
000089C0 0240 000F                  		andi.w	#$F,d0
000089C4 D040                       		add.w	d0,d0
000089C6 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
000089CA 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
000089CE                            ; End of function Obj18_Move
000089CE                            
000089CE                            ; ===========================================================================
000089CE 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
000089D2 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
000089D6 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
000089DA 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
000089DE 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
000089E2 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
000089E6 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
000089E8                            ; ===========================================================================
000089E8                            
000089E8                            Obj18_Type00:
000089E8 4E75                       		rts			; platform 00 doesn't move
000089EA                            ; ===========================================================================
000089EA                            
000089EA                            Obj18_Type05:
000089EA 3028 0032                  		move.w	$32(a0),d0
000089EE 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000089F2 4401                       		neg.b	d1		; reverse platform-motion
000089F4 0601 0040                  		addi.b	#$40,d1
000089F8 6000                       		bra.s	Obj18_01_Move
000089FA                            ; ===========================================================================
000089FA                            
000089FA                            Obj18_Type01:
000089FA 3028 0032                  		move.w	$32(a0),d0
000089FE 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008A02 0401 0040                  		subi.b	#$40,d1
00008A06                            
00008A06                            Obj18_01_Move:
00008A06 4881                       		ext.w	d1
00008A08 D041                       		add.w	d1,d0
00008A0A 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
00008A0E 6000 0000                  		bra.w	Obj18_ChgMotion
00008A12                            ; ===========================================================================
00008A12                            
00008A12                            Obj18_Type0C:
00008A12 3028 0034                  		move.w	$34(a0),d0
00008A16 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008A1A 4401                       		neg.b	d1		; reverse platform-motion
00008A1C 0601 0030                  		addi.b	#$30,d1
00008A20 6000                       		bra.s	Obj18_02_Move
00008A22                            ; ===========================================================================
00008A22                            
00008A22                            Obj18_Type0B:
00008A22 3028 0034                  		move.w	$34(a0),d0
00008A26 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008A2A 0401 0030                  		subi.b	#$30,d1
00008A2E 6000                       		bra.s	Obj18_02_Move
00008A30                            ; ===========================================================================
00008A30                            
00008A30                            Obj18_Type06:
00008A30 3028 0034                  		move.w	$34(a0),d0
00008A34 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008A38 4401                       		neg.b	d1		; reverse platform-motion
00008A3A 0601 0040                  		addi.b	#$40,d1
00008A3E 6000                       		bra.s	Obj18_02_Move
00008A40                            ; ===========================================================================
00008A40                            
00008A40                            Obj18_Type02:
00008A40 3028 0034                  		move.w	$34(a0),d0
00008A44 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008A48 0401 0040                  		subi.b	#$40,d1
00008A4C                            
00008A4C                            Obj18_02_Move:
00008A4C 4881                       		ext.w	d1
00008A4E D041                       		add.w	d1,d0
00008A50 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008A54 6000 0000                  		bra.w	Obj18_ChgMotion
00008A58                            ; ===========================================================================
00008A58                            
00008A58                            Obj18_Type03:
00008A58 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008A5C 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00008A5E 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
00008A64 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
00008A66 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00008A6C                            
00008A6C                            Obj18_03_NoMove:
00008A6C 4E75                       		rts	
00008A6E                            ; ===========================================================================
00008A6E                            
00008A6E                            Obj18_03_Wait:
00008A6E 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00008A72 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
00008A74 317C 0020 003A             		move.w	#32,$3A(a0)
00008A7A 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00008A7E 4E75                       		rts	
00008A80                            ; ===========================================================================
00008A80                            
00008A80                            Obj18_Type04:
00008A80 4A68 003A                  		tst.w	$3A(a0)
00008A84 6700                       		beq.s	loc_8048
00008A86 5368 003A                  		subq.w	#1,$3A(a0)
00008A8A 6600                       		bne.s	loc_8048
00008A8C 0828 0003 0022             		btst	#3,$22(a0)
00008A92 6700                       		beq.s	loc_8042
00008A94 08E9 0001 0022             		bset	#1,$22(a1)
00008A9A 08A9 0003 0022             		bclr	#3,$22(a1)
00008AA0 137C 0002 0024             		move.b	#2,$24(a1)
00008AA6 08A8 0003 0022             		bclr	#3,$22(a0)
00008AAC 4228 0025                  		clr.b	$25(a0)
00008AB0 3368 0012 0012             		move.w	$12(a0),$12(a1)
00008AB6                            
00008AB6                            loc_8042:
00008AB6 117C 0008 0024             		move.b	#8,$24(a0)
00008ABC                            
00008ABC                            loc_8048:
00008ABC 2628 002C                  		move.l	$2C(a0),d3
00008AC0 3028 0012                  		move.w	$12(a0),d0
00008AC4 48C0                       		ext.l	d0
00008AC6 E180                       		asl.l	#8,d0
00008AC8 D680                       		add.l	d0,d3
00008ACA 2143 002C                  		move.l	d3,$2C(a0)
00008ACE 0668 0038 0012             		addi.w	#$38,$12(a0)
00008AD4 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008AD8 0640 00E0                  		addi.w	#$E0,d0
00008ADC B068 002C                  		cmp.w	$2C(a0),d0
00008AE0 6400                       		bcc.s	locret_8074
00008AE2 117C 0006 0024             		move.b	#6,$24(a0)
00008AE8                            
00008AE8                            locret_8074:
00008AE8 4E75                       		rts	
00008AEA                            ; ===========================================================================
00008AEA                            
00008AEA                            Obj18_Type07:
00008AEA 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008AEE 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
00008AF0 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00008AF4 7000                       		moveq	#0,d0
00008AF6 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
00008AFA E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00008AFC 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00008B00 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
00008B02 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00008B08                            
00008B08                            Obj18_07_NoMove:
00008B08 4E75                       		rts	
00008B0A                            ; ===========================================================================
00008B0A                            
00008B0A                            Obj18_07_Wait:
00008B0A 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00008B0E 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
00008B10 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
00008B14 4E75                       		rts	
00008B16                            ; ===========================================================================
00008B16                            
00008B16                            Obj18_Type08:
00008B16 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00008B1A 3028 0034                  		move.w	$34(a0),d0
00008B1E 0440 0200                  		subi.w	#$200,d0
00008B22 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00008B26 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
00008B28 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00008B2C                            
00008B2C                            Obj18_08_NoStop:
00008B2C 4E75                       		rts	
00008B2E                            ; ===========================================================================
00008B2E                            
00008B2E                            Obj18_Type0A:
00008B2E 3028 0034                  		move.w	$34(a0),d0
00008B32 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008B36 0401 0040                  		subi.b	#$40,d1
00008B3A 4881                       		ext.w	d1
00008B3C E241                       		asr.w	#1,d1
00008B3E D041                       		add.w	d1,d0
00008B40 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008B44                            
00008B44                            Obj18_ChgMotion:
00008B44 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00008B4A 4E75                       		rts	
00008B4C                            ; ===========================================================================
00008B4C                            
00008B4C                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00008B4C 3028 0032                  		move.w	$32(a0),d0
00008B50 0240 FF80                  		andi.w	#$FF80,d0
00008B54 3238 F700                  		move.w	($FFFFF700).w,d1
00008B58 0441 0080                  		subi.w	#$80,d1
00008B5C 0241 FF80                  		andi.w	#$FF80,d1
00008B60 9041                       		sub.w	d1,d0
00008B62 0C40 0280                  		cmpi.w	#$280,d0
00008B66 6200                       		bhi.s	Obj18_Delete
00008B68 4E75                       		rts	
00008B6A                            ; ===========================================================================
00008B6A                            
00008B6A                            Obj18_Delete:				; XREF: Obj18_Index
00008B6A 6000 0000                  		bra.w	DeleteObject
00008B6E                            ; ===========================================================================
00008B6E                            ; ---------------------------------------------------------------------------
00008B6E                            ; Sprite mappings - unused
00008B6E                            ; ---------------------------------------------------------------------------
00008B6E                            Map_obj18x:
00008B6E                            	include "_maps\obj18x.asm"
00008B6E                            ; ---------------------------------------------------------------------------
00008B6E                            ; Sprite mappings - unused
00008B6E                            ; ---------------------------------------------------------------------------
00008B6E 0000                       		dc.w byte_80FE-Map_obj18x
00008B70 0000                       		dc.w byte_8109-Map_obj18x
00008B72 02                         byte_80FE:	dc.b 2
00008B73 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00008B78 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00008B7D 0A                         byte_8109:	dc.b $A
00008B7E F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00008B83 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00008B88 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00008B8D 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00008B92 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00008B97 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00008B9C 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00008BA1 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00008BA6 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00008BAB 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00008BB0                            		even
00008BB0                            		even
00008BB0                            
00008BB0                            ; ---------------------------------------------------------------------------
00008BB0                            ; Sprite mappings - GHZ	platforms
00008BB0                            ; ---------------------------------------------------------------------------
00008BB0                            Map_obj18:
00008BB0                            	include "_maps\obj18ghz.asm"
00008BB0                            ; ---------------------------------------------------------------------------
00008BB0                            ; Sprite mappings - GHZ	platforms
00008BB0                            ; ---------------------------------------------------------------------------
00008BB0 0000                       		dc.w byte_8140-Map_obj18
00008BB2 0000                       		dc.w byte_8155-Map_obj18
00008BB4 04                         byte_8140:	dc.b 4
00008BB5 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00008BBA F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00008BBF F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00008BC4 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00008BC9 0A                         byte_8155:	dc.b $A
00008BCA F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00008BCF 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00008BD4 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00008BD9 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00008BDE 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00008BE3 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00008BE8 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00008BED 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00008BF2 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00008BF7 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00008BFC                            		even
00008BFC                            		even
00008BFC                            
00008BFC                            ; ---------------------------------------------------------------------------
00008BFC                            ; Sprite mappings - SYZ	platforms
00008BFC                            ; ---------------------------------------------------------------------------
00008BFC                            Map_obj18a:
00008BFC                            	include "_maps\obj18syz.asm"
00008BFC                            ; ---------------------------------------------------------------------------
00008BFC                            ; Sprite mappings - SYZ	platforms
00008BFC                            ; ---------------------------------------------------------------------------
00008BFC 0000                       		dc.w byte_818A-Map_obj18a
00008BFE 03                         byte_818A:	dc.b 3
00008BFF F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00008C04 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00008C09 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00008C0E                            		even
00008C0E                            		even
00008C0E                            
00008C0E                            ; ---------------------------------------------------------------------------
00008C0E                            ; Sprite mappings - SLZ	platforms
00008C0E                            ; ---------------------------------------------------------------------------
00008C0E                            Map_obj18b:
00008C0E                            	include "_maps\obj18slz.asm"
00008C0E                            ; ---------------------------------------------------------------------------
00008C0E                            ; Sprite mappings - SLZ	platforms
00008C0E                            ; ---------------------------------------------------------------------------
00008C0E 0000                       		dc.w byte_819C-Map_obj18b
00008C10 02                         byte_819C:	dc.b 2
00008C11 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00008C16 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00008C1C 00                         		even
00008C1C 00                         		even
00008C1C                            
00008C1C                            ; ===========================================================================
00008C1C                            ; ---------------------------------------------------------------------------
00008C1C                            ; Object 19 - Pearto bombs
00008C1C                            ; ---------------------------------------------------------------------------
00008C1C                            Obj19:					; XREF: Obj_Index
00008C1C 7000                       		moveq	#0,d0
00008C1E 1028 0024                  		move.b	$24(a0),d0
00008C22 323B 0000                  		move.w	off_7070(pc,d0.w),d1
00008C26 4EFB 1000                  		jmp	off_7070(pc,d1.w)
00008C2A                            ; ---------------------------------------------------------------------------
00008C2A                            
00008C2A 0000 0000 0000             off_7070:	dc.w loc_7076-off_7070, loc_70A6-off_7070, loc_70EE-off_7070
00008C30                            ; ---------------------------------------------------------------------------
00008C30                            
00008C30                            loc_7076:
00008C30 5428 0024                  		addq.b	#2,$24(a0)
00008C34 217C 0000 0000 0004        		move.l	#Map_obj19,4(a0)
00008C3C 317C 0480 0002             		move.w	#($9000/$20),2(a0)
00008C42 117C 0004 0001             		move.b	#4,1(a0)
00008C48 117C 0003 0019             		move.b	#3,$19(a0)
00008C4E 117C 0087 0020             		move.b	#$87,$20(a0)
00008C54 117C 0008 0018             		move.b	#8,$18(a0)
00008C5A 317C 0018 0030             		move.w	#$18,$30(a0)
00008C60                            
00008C60                            loc_70A6:
00008C60 0828 0007 0022             		btst	#7,$22(a0)
00008C66 6600                       		bne.s	loc_70C2
00008C68 4A68 0030                  		tst.w	$30(a0)
00008C6C 6600                       		bne.s	loc_70D2
00008C6E 4EB9 0000 0000             		jsr	ObjHitFloor
00008C74 4A41                       		tst.w	d1
00008C76 6A00                       		bpl.s	loc_70D6
00008C78 D368 000C                  		add.w	d1,$C(a0)
00008C7C                            
00008C7C                            loc_70C2:
00008C7C 10BC 0027                  		move.b	#$27,0(a0); change object to explosion (why was this even here with the 3F branch)
00008C80 117C 0000 0024             		move.b	#0,$24(a0)
00008C86                            ; ---------------------------------------------------------------------------
00008C86                            
00008C86                            loc_70D2:
00008C86 5368 0030                  		subq.w	#1,$30(a0)
00008C8A                            
00008C8A                            loc_70D6:
00008C8A 6100 0000                  		bsr.w	ObjectFall
00008C8E 6100 0000                  		bsr.w	DisplaySprite
00008C92 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008C96 0640 00E0                  		addi.w	#$E0,d0
00008C9A B068 000C                  		cmp.w	$C(a0),d0
00008C9E 6500                       		bcs.s	loc_70EE
00008CA0 4E75                       		rts
00008CA2                            ; ---------------------------------------------------------------------------
00008CA2                            
00008CA2                            loc_70EE:
00008CA2 6100 0000                  		bsr.w	DeleteObject
00008CA6 4E75                       		rts
00008CA8                            		
00008CA8                            Map_obj19:
00008CA8                            	include "_maps\obj19.asm"
00008CA8                            Map_02b4:
00008CA8 0000                       Map_02b4_0: 	dc.w Map_02b4_2-Map_02b4
00008CAA 01                         Map_02b4_2: 	dc.b $1
00008CAB F706 2000 F8               	dc.b $F7, $6, $20, $0, $F8
00008CB0                            	even
00008CB0                            	even
00008CB0                            ; ===========================================================================
00008CB0                            ; ---------------------------------------------------------------------------
00008CB0                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008CB0                            ; ---------------------------------------------------------------------------
00008CB0                            Map_obj48:
00008CB0                            	include "_maps\obj48.asm"
00008CB0                            ; ---------------------------------------------------------------------------
00008CB0                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008CB0                            ; ---------------------------------------------------------------------------
00008CB0 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
00008CB4 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
00008CB8 06                         byte_81B2:	dc.b 6
00008CB9 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00008CBE F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00008CC3 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00008CC8 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00008CCD 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00008CD2 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00008CD7 04                         byte_81D1:	dc.b 4
00008CD8 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00008CDD E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00008CE2 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00008CE7 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00008CEC 04                         byte_81E6:	dc.b 4
00008CED E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00008CF2 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00008CF7 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00008CFC 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00008D01 04                         byte_81FB:	dc.b 4
00008D02 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00008D07 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00008D0C 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00008D11 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00008D16                            		even
00008D16                            		even
00008D16                            
00008D16                            ; ===========================================================================
00008D16                            ; ---------------------------------------------------------------------------
00008D16                            ; Object 1A - GHZ collapsing ledge
00008D16                            ; ---------------------------------------------------------------------------
00008D16                            
00008D16                            Obj1A:					; XREF: Obj_Index
00008D16 7000                       		moveq	#0,d0
00008D18 1028 0024                  		move.b	$24(a0),d0
00008D1C 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00008D20 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00008D24                            ; ===========================================================================
00008D24 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
00008D28 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00008D2C 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00008D30                            ; ===========================================================================
00008D30                            
00008D30                            Obj1A_Main:				; XREF: Obj1A_Index
00008D30 5428 0024                  		addq.b	#2,$24(a0)
00008D34 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008D3C 317C 4000 0002             		move.w	#$4000,2(a0)
00008D42 0028 0004 0001             		ori.b	#4,1(a0)
00008D48 117C 0004 0018             		move.b	#4,$18(a0)
00008D4E 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00008D54 117C 0064 0019             		move.b	#$64,$19(a0)
00008D5A 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00008D60 117C 0038 0016             		move.b	#$38,$16(a0)
00008D66 08E8 0004 0001             		bset	#4,1(a0)
00008D6C                            
00008D6C                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00008D6C 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00008D70 6700                       		beq.s	Obj1A_Slope	; if not, branch
00008D72 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
00008D76 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00008D7A 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008D7E                            
00008D7E                            Obj1A_Slope:
00008D7E 323C 0030                  		move.w	#$30,d1
00008D82 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008D88 6100 F212                  		bsr.w	SlopeObject
00008D8C 6000 0000                  		bra.w	MarkObjGone
00008D90                            ; ===========================================================================
00008D90                            
00008D90                            Obj1A_Touch:				; XREF: Obj1A_Index
00008D90 4A28 0038                  		tst.b	$38(a0)
00008D94 6700 0000                  		beq.w	loc_847A
00008D98 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008D9E 5328 0038                  		subq.b	#1,$38(a0)
00008DA2                            
00008DA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008DA2                            
00008DA2                            
00008DA2                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00008DA2 323C 0030                  		move.w	#$30,d1
00008DA6 6100 F294                  		bsr.w	ExitPlatform
00008DAA 323C 0030                  		move.w	#$30,d1
00008DAE 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008DB4 3428 0008                  		move.w	8(a0),d2
00008DB8 6100 0000                  		bsr.w	SlopeObject2
00008DBC 6000 0000                  		bra.w	MarkObjGone
00008DC0                            ; End of function Obj1A_WalkOff
00008DC0                            
00008DC0                            ; ===========================================================================
00008DC0                            
00008DC0                            Obj1A_Display:				; XREF: Obj1A_Index
00008DC0 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008DC4 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
00008DC6 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008DCA 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00008DCE 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008DD2 6000 0000                  		bra.w	DisplaySprite
00008DD6                            ; ===========================================================================
00008DD6                            
00008DD6                            loc_82D0:				; XREF: Obj1A_Display
00008DD6 5328 0038                  		subq.b	#1,$38(a0)
00008DDA 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00008DDE 43F8 D000                  		lea	($FFFFD000).w,a1
00008DE2 0829 0003 0022             		btst	#3,$22(a1)
00008DE8 6700                       		beq.s	loc_82FC
00008DEA 4A28 0038                  		tst.b	$38(a0)
00008DEE 6600                       		bne.s	locret_8308
00008DF0 08A9 0003 0022             		bclr	#3,$22(a1)
00008DF6 08A9 0005 0022             		bclr	#5,$22(a1)
00008DFC 137C 0001 001D             		move.b	#1,$1D(a1)
00008E02                            
00008E02                            loc_82FC:
00008E02 117C 0000 003A             		move.b	#0,$3A(a0)
00008E08 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00008E0E                            
00008E0E                            locret_8308:
00008E0E 4E75                       		rts	
00008E10                            ; ===========================================================================
00008E10                            
00008E10                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00008E10 6100 0000                  		bsr.w	ObjectFall
00008E14 6100 0000                  		bsr.w	DisplaySprite
00008E18 4A28 0001                  		tst.b	1(a0)
00008E1C 6A00                       		bpl.s	Obj1A_Delete
00008E1E 4E75                       		rts	
00008E20                            ; ===========================================================================
00008E20                            
00008E20                            Obj1A_Delete:				; XREF: Obj1A_Index
00008E20 6100 0000                  		bsr.w	DeleteObject
00008E24 4E75                       		rts	
00008E26                            ; ===========================================================================
00008E26                            ; ---------------------------------------------------------------------------
00008E26                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00008E26                            ; ---------------------------------------------------------------------------
00008E26                            
00008E26                            Obj53:					; XREF: Obj_Index
00008E26 7000                       		moveq	#0,d0
00008E28 1028 0024                  		move.b	$24(a0),d0
00008E2C 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00008E30 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00008E34                            ; ===========================================================================
00008E34 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00008E38 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008E3C 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008E40                            ; ===========================================================================
00008E40                            
00008E40                            Obj53_Main:				; XREF: Obj53_Index
00008E40 5428 0024                  		addq.b	#2,$24(a0)
00008E44 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008E4C 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008E52 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008E58 6600                       		bne.s	Obj53_NotSLZ
00008E5A 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008E60 5428 001A                  		addq.b	#2,$1A(a0)
00008E64                            
00008E64                            Obj53_NotSLZ:
00008E64 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008E6A 6600                       		bne.s	Obj53_NotSBZ
00008E6C 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00008E72                            
00008E72                            Obj53_NotSBZ:
00008E72 0028 0004 0001             		ori.b	#4,1(a0)
00008E78 117C 0004 0018             		move.b	#4,$18(a0)
00008E7E 117C 0007 0038             		move.b	#7,$38(a0)
00008E84 117C 0044 0019             		move.b	#$44,$19(a0)
00008E8A                            
00008E8A                            Obj53_ChkTouch:				; XREF: Obj53_Index
00008E8A 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008E8E 6700                       		beq.s	Obj53_Solid	; if not, branch
00008E90 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008E94 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00008E98 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008E9C                            
00008E9C                            Obj53_Solid:
00008E9C 323C 0020                  		move.w	#$20,d1
00008EA0 6100 F026                  		bsr.w	PlatformObject
00008EA4 4A28 0028                  		tst.b	$28(a0)
00008EA8 6A00                       		bpl.s	Obj53_MarkAsGone
00008EAA 0829 0003 0022             		btst	#3,$22(a1)
00008EB0 6700                       		beq.s	Obj53_MarkAsGone
00008EB2 08A8 0000 0001             		bclr	#0,1(a0)
00008EB8 3029 0008                  		move.w	8(a1),d0
00008EBC 9068 0008                  		sub.w	8(a0),d0
00008EC0 6400                       		bcc.s	Obj53_MarkAsGone
00008EC2 08E8 0000 0001             		bset	#0,1(a0)
00008EC8                            
00008EC8                            Obj53_MarkAsGone:
00008EC8 6000 0000                  		bra.w	MarkObjGone
00008ECC                            ; ===========================================================================
00008ECC                            
00008ECC                            Obj53_Touch:				; XREF: Obj53_Index
00008ECC 4A28 0038                  		tst.b	$38(a0)
00008ED0 6700 0000                  		beq.w	loc_8458
00008ED4 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008EDA 5328 0038                  		subq.b	#1,$38(a0)
00008EDE                            
00008EDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008EDE                            
00008EDE                            
00008EDE                            Obj53_WalkOff:				; XREF: Obj53_Index
00008EDE 323C 0020                  		move.w	#$20,d1
00008EE2 6100 F158                  		bsr.w	ExitPlatform
00008EE6 3428 0008                  		move.w	8(a0),d2
00008EEA 6100 F6BA                  		bsr.w	MvSonicOnPtfm2
00008EEE 6000 0000                  		bra.w	MarkObjGone
00008EF2                            ; End of function Obj53_WalkOff
00008EF2                            
00008EF2                            ; ===========================================================================
00008EF2                            
00008EF2                            Obj53_Display:				; XREF: Obj53_Index
00008EF2 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008EF6 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00008EF8 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008EFC 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008F00 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008F04 6000 0000                  		bra.w	DisplaySprite
00008F08                            ; ===========================================================================
00008F08                            
00008F08                            loc_8402:
00008F08 5328 0038                  		subq.b	#1,$38(a0)
00008F0C 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008F10 43F8 D000                  		lea	($FFFFD000).w,a1
00008F14 0829 0003 0022             		btst	#3,$22(a1)
00008F1A 6700                       		beq.s	loc_842E
00008F1C 4A28 0038                  		tst.b	$38(a0)
00008F20 6600                       		bne.s	locret_843A
00008F22 08A9 0003 0022             		bclr	#3,$22(a1)
00008F28 08A9 0005 0022             		bclr	#5,$22(a1)
00008F2E 137C 0001 001D             		move.b	#1,$1D(a1)
00008F34                            
00008F34                            loc_842E:
00008F34 117C 0000 003A             		move.b	#0,$3A(a0)
00008F3A 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008F40                            
00008F40                            locret_843A:
00008F40 4E75                       		rts	
00008F42                            ; ===========================================================================
00008F42                            
00008F42                            Obj53_TimeZero:				; XREF: Obj53_Display
00008F42 6100 0000                  		bsr.w	ObjectFall
00008F46 6100 0000                  		bsr.w	DisplaySprite
00008F4A 4A28 0001                  		tst.b	1(a0)
00008F4E 6A00                       		bpl.s	Obj53_Delete
00008F50 4E75                       		rts	
00008F52                            ; ===========================================================================
00008F52                            
00008F52                            Obj53_Delete:				; XREF: Obj53_Index
00008F52 6100 0000                  		bsr.w	DeleteObject
00008F56 4E75                       		rts	
00008F58                            ; ===========================================================================
00008F58                            
00008F58                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008F58 117C 0000 003A             		move.b	#0,$3A(a0)
00008F5E                            
00008F5E                            loc_8458:				; XREF: Obj53_Touch
00008F5E 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00008F64 0828 0000 0028             		btst	#0,$28(a0)
00008F6A 6700                       		beq.s	loc_846C
00008F6C 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00008F72                            
00008F72                            loc_846C:
00008F72 7207                       		moveq	#7,d1
00008F74 5228 001A                  		addq.b	#1,$1A(a0)
00008F78 6000                       		bra.s	loc_8486
00008F7A                            ; ===========================================================================
00008F7A                            
00008F7A                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008F7A 117C 0000 003A             		move.b	#0,$3A(a0)
00008F80                            
00008F80                            loc_847A:				; XREF: Obj1A_Touch
00008F80 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00008F86 7218                       		moveq	#$18,d1
00008F88 5428 001A                  		addq.b	#2,$1A(a0)
00008F8C                            
00008F8C                            loc_8486:				; XREF: Obj53_Collapse
00008F8C 7000                       		moveq	#0,d0
00008F8E 1028 001A                  		move.b	$1A(a0),d0
00008F92 D040                       		add.w	d0,d0
00008F94 2668 0004                  		movea.l	4(a0),a3
00008F98 D6F3 0000                  		adda.w	(a3,d0.w),a3
00008F9C 524B                       		addq.w	#1,a3
00008F9E 08E8 0005 0001             		bset	#5,1(a0)
00008FA4 1810                       		move.b	0(a0),d4
00008FA6 1A28 0001                  		move.b	1(a0),d5
00008FAA 2248                       		movea.l	a0,a1
00008FAC 6000                       		bra.s	loc_84B2
00008FAE                            ; ===========================================================================
00008FAE                            
00008FAE                            loc_84AA:
00008FAE 6100 0000                  		bsr.w	SingleObjLoad
00008FB2 6600                       		bne.s	loc_84F2
00008FB4 5A4B                       		addq.w	#5,a3
00008FB6                            
00008FB6                            loc_84B2:
00008FB6 137C 0006 0024             		move.b	#6,$24(a1)
00008FBC 1284                       		move.b	d4,0(a1)
00008FBE 234B 0004                  		move.l	a3,4(a1)
00008FC2 1345 0001                  		move.b	d5,1(a1)
00008FC6 3368 0008 0008             		move.w	8(a0),8(a1)
00008FCC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008FD2 3368 0002 0002             		move.w	2(a0),2(a1)
00008FD8 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008FDE 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008FE4 135C 0038                  		move.b	(a4)+,$38(a1)
00008FE8 B3C8                       		cmpa.l	a0,a1
00008FEA 6400                       		bcc.s	loc_84EE
00008FEC 6100 0000                  		bsr.w	DisplaySprite2
00008FF0                            
00008FF0                            loc_84EE:
00008FF0 51C9 FFBC                  		dbf	d1,loc_84AA
00008FF4                            
00008FF4                            loc_84F2:
00008FF4 6100 0000                  		bsr.w	DisplaySprite
00008FF8 303C 00B9                  		move.w	#$B9,d0
00008FFC 4EF9 0000 15E6             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00009002                            ; ===========================================================================
00009002                            ; ---------------------------------------------------------------------------
00009002                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00009002                            ; ---------------------------------------------------------------------------
00009002 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00009012 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
0000901C 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00009024 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
0000902C                            
0000902C                            ; ---------------------------------------------------------------------------
0000902C                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
0000902C                            ; ---------------------------------------------------------------------------
0000902C                            
0000902C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000902C                            
0000902C                            
0000902C                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
0000902C 43F8 D000                  		lea	($FFFFD000).w,a1
00009030 0829 0003 0022             		btst	#3,$22(a1)
00009036 6700                       		beq.s	locret_856E
00009038 3029 0008                  		move.w	8(a1),d0
0000903C 9068 0008                  		sub.w	8(a0),d0
00009040 D041                       		add.w	d1,d0
00009042 E248                       		lsr.w	#1,d0
00009044 0828 0000 0001             		btst	#0,1(a0)
0000904A 6700                       		beq.s	loc_854E
0000904C 4640                       		not.w	d0
0000904E D041                       		add.w	d1,d0
00009050                            
00009050                            loc_854E:
00009050 7200                       		moveq	#0,d1
00009052 1232 0000                  		move.b	(a2,d0.w),d1
00009056 3028 000C                  		move.w	$C(a0),d0
0000905A 9041                       		sub.w	d1,d0
0000905C 7200                       		moveq	#0,d1
0000905E 1229 0016                  		move.b	$16(a1),d1
00009062 9041                       		sub.w	d1,d0
00009064 3340 000C                  		move.w	d0,$C(a1)
00009068 9468 0008                  		sub.w	8(a0),d2
0000906C 9569 0008                  		sub.w	d2,8(a1)
00009070                            
00009070                            locret_856E:
00009070 4E75                       		rts	
00009072                            ; End of function SlopeObject2
00009072                            
00009072                            ; ===========================================================================
00009072                            ; ---------------------------------------------------------------------------
00009072                            ; Collision data for GHZ collapsing ledge
00009072                            ; ---------------------------------------------------------------------------
00009072                            Obj1A_SlopeData:
00009072                            		incbin	misc\ghzledge.bin
000090A2                            		even
000090A2                            
000090A2                            ; ---------------------------------------------------------------------------
000090A2                            ; Sprite mappings - GHZ	collapsing ledge
000090A2                            ; ---------------------------------------------------------------------------
000090A2                            Map_obj1A:
000090A2                            	include "_maps\obj1A.asm"
000090A2                            ; ---------------------------------------------------------------------------
000090A2                            ; Sprite mappings - GHZ	collapsing ledge
000090A2                            ; ---------------------------------------------------------------------------
000090A2 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
000090A6 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
000090AA 10                         byte_85A8:	dc.b $10
000090AB C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
000090B0 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
000090B5 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
000090BA E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
000090BF D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000090C4 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
000090C9 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
000090CE F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
000090D3 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000090D8 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
000090DD 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
000090E2 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000090E7 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
000090EC 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
000090F1 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
000090F6 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000090FB 10                         byte_85F9:	dc.b $10
000090FC C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00009101 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009106 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000910B E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009110 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009115 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000911A F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000911F F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009124 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009129 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000912E 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009133 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009138 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000913D 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00009142 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009147 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000914C 19                         byte_864A:	dc.b $19
0000914D C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00009152 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00009157 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000915C D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00009161 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009166 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000916B E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00009170 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00009175 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000917A D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000917F F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00009184 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00009189 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000918E F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00009193 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009198 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000919D 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
000091A2 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
000091A7 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000091AC 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
000091B1 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
000091B6 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
000091BB 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
000091C0 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
000091C5 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000091CA 19                         byte_86C8:	dc.b $19
000091CB C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
000091D0 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
000091D5 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
000091DA D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
000091DF E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
000091E4 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
000091E9 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
000091EE E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
000091F3 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000091F8 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
000091FD F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00009202 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00009207 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000920C F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00009211 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009216 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000921B 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00009220 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00009225 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000922A 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000922F 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00009234 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00009239 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000923E 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00009243 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009248                            		even
00009248                            		even
00009248                            
00009248                            ; ---------------------------------------------------------------------------
00009248                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00009248                            ; ---------------------------------------------------------------------------
00009248                            Map_obj53:
00009248                            	include "_maps\obj53.asm"
00009248                            ; ---------------------------------------------------------------------------
00009248                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00009248                            ; ---------------------------------------------------------------------------
00009248 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
0000924C 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00009250 04                         byte_874E:	dc.b 4
00009251 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00009256 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
0000925B F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00009260 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00009265 08                         byte_8763:	dc.b 8
00009266 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000926B F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00009270 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00009275 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
0000927A 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
0000927F 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00009284 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00009289 0805 0000 10               		dc.b 8,	5, 0, 0, $10
0000928E 04                         byte_878C:	dc.b 4
0000928F F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00009294 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00009299 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000929E 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
000092A3 08                         byte_87A1:	dc.b 8
000092A4 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
000092A9 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
000092AE F805 0000 00               		dc.b $F8, 5, 0,	0, 0
000092B3 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
000092B8 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
000092BD 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
000092C2 0805 0008 00               		dc.b 8,	5, 0, 8, 0
000092C7 0805 000C 10               		dc.b 8,	5, 0, $C, $10
000092CC                            		even
000092CC                            		even
000092CC                            
000092CC                            ; ===========================================================================
000092CC                            ; ---------------------------------------------------------------------------
000092CC                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
000092CC                            ; ---------------------------------------------------------------------------
000092CC                            
000092CC                            Obj1C:					; XREF: Obj_Index
000092CC 7000                       		moveq	#0,d0
000092CE 1028 0024                  		move.b	$24(a0),d0
000092D2 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
000092D6 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
000092DA                            ; ===========================================================================
000092DA 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
000092DC 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
000092DE                            ; ===========================================================================
000092DE                            
000092DE                            Obj1C_Main:				; XREF: Obj1C_Index
000092DE 5428 0024                  		addq.b	#2,$24(a0)
000092E2 7000                       		moveq	#0,d0
000092E4 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
000092E8 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
000092EC 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
000092F0 2159 0004                  		move.l	(a1)+,4(a0)
000092F4 3159 0002                  		move.w	(a1)+,2(a0)
000092F8 0028 0004 0001             		ori.b	#4,1(a0)
000092FE 1159 001A                  		move.b	(a1)+,$1A(a0)
00009302 1159 0019                  		move.b	(a1)+,$19(a0)
00009306 1159 0018                  		move.b	(a1)+,$18(a0)
0000930A 1159 0020                  		move.b	(a1)+,$20(a0)
0000930E                            
0000930E                            Obj1C_ChkDel:				; XREF: Obj1C_Index
0000930E 3028 0008                  		move.w	8(a0),d0
00009312 0240 FF80                  		andi.w	#$FF80,d0
00009316 3238 F700                  		move.w	($FFFFF700).w,d1
0000931A 0441 0080                  		subi.w	#$80,d1
0000931E 0241 FF80                  		andi.w	#$FF80,d1
00009322 9041                       		sub.w	d1,d0
00009324 0C40 0280                  		cmpi.w	#$280,d0
00009328 6200 0000                  		bhi.w	DeleteObject
0000932C 6000 0000                  		bra.w	DisplaySprite
00009330                            ; ===========================================================================
00009330                            ; ---------------------------------------------------------------------------
00009330                            ; Variables for	object $1C are stored in an array
00009330                            ; ---------------------------------------------------------------------------
00009330 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00009334 44D8                       		dc.w $44D8		; VRAM setting
00009336 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
0000933A 0000 0000                  		dc.l Map_obj1C
0000933E 44D8                       		dc.w $44D8
00009340 0008 0200                  		dc.b 0,	8, 2, 0
00009344 0000 0000                  		dc.l Map_obj1C
00009348 44D8                       		dc.w $44D8
0000934A 0008 0200                  		dc.b 0,	8, 2, 0
0000934E 0000 83B0                  		dc.l Map_obj11
00009352 438E                       		dc.w $438E
00009354 0110 0100                  		dc.b 1,	$10, 1,	0
00009358                            ; ---------------------------------------------------------------------------
00009358                            ; Sprite mappings - SLZ	lava thrower
00009358                            ; ---------------------------------------------------------------------------
00009358                            Map_obj1C:
00009358                            	include "_maps\obj1C.asm"
00009358                            ; ---------------------------------------------------------------------------
00009358                            ; Sprite mappings - SLZ	lava thrower
00009358                            ; ---------------------------------------------------------------------------
00009358 0000                       		dc.w byte_8858-Map_obj1C
0000935A 01                         byte_8858:	dc.b 1
0000935B F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00009360                            		even
00009360                            		even
00009360                            
00009360                            ; ===========================================================================
00009360                            ; ---------------------------------------------------------------------------
00009360                            ; Object 1D - switch that activates when Sonic touches it
00009360                            ; (this	is not used anywhere in	the game)
00009360                            ; ---------------------------------------------------------------------------
00009360                            
00009360                            Obj1D:					; XREF: Obj_Index
00009360 7000                       		moveq	#0,d0
00009362 1028 0024                  		move.b	$24(a0),d0
00009366 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
0000936A 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
0000936E                            ; ===========================================================================
0000936E 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00009370 0000                       		dc.w Obj1D_Action-Obj1D_Index
00009372 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00009374                            ; ===========================================================================
00009374                            
00009374                            Obj1D_Main:				; XREF: Obj1D_Index
00009374 5428 0024                  		addq.b	#2,$24(a0)
00009378 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00009380 317C 4000 0002             		move.w	#$4000,2(a0)
00009386 117C 0004 0001             		move.b	#4,1(a0)
0000938C 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00009392 117C 0010 0019             		move.b	#$10,$19(a0)
00009398 117C 0005 0018             		move.b	#5,$18(a0)
0000939E                            
0000939E                            Obj1D_Action:				; XREF: Obj1D_Index
0000939E 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
000093A4 323C 0010                  		move.w	#$10,d1
000093A8 6100 0000                  		bsr.w	Obj1D_ChkTouch
000093AC 6700                       		beq.s	Obj1D_ChkDel
000093AE 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
000093B2 7001                       		moveq	#1,d0
000093B4 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
000093B8                            
000093B8                            Obj1D_ChkDel:
000093B8 6100 0000                  		bsr.w	DisplaySprite
000093BC 3028 0008                  		move.w	8(a0),d0
000093C0 0240 FF80                  		andi.w	#$FF80,d0
000093C4 3238 F700                  		move.w	($FFFFF700).w,d1
000093C8 0441 0080                  		subi.w	#$80,d1
000093CC 0241 FF80                  		andi.w	#$FF80,d1
000093D0 9041                       		sub.w	d1,d0
000093D2 0C40 0280                  		cmpi.w	#$280,d0
000093D6 6200 0000                  		bhi.w	Obj1D_Delete
000093DA 4E75                       		rts	
000093DC                            ; ===========================================================================
000093DC                            
000093DC                            Obj1D_Delete:				; XREF: Obj1D_Index
000093DC 6100 0000                  		bsr.w	DeleteObject
000093E0 4E75                       		rts	
000093E2                            ; ---------------------------------------------------------------------------
000093E2                            ; Subroutine to	check if Sonic touches the object
000093E2                            ; ---------------------------------------------------------------------------
000093E2                            
000093E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000093E2                            
000093E2                            
000093E2                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
000093E2 43F8 D000                  		lea	($FFFFD000).w,a1
000093E6 3029 0008                  		move.w	8(a1),d0
000093EA 9068 0008                  		sub.w	8(a0),d0
000093EE D041                       		add.w	d1,d0
000093F0 6B00                       		bmi.s	loc_8918
000093F2 D241                       		add.w	d1,d1
000093F4 B041                       		cmp.w	d1,d0
000093F6 6400                       		bcc.s	loc_8918
000093F8 3429 000C                  		move.w	$C(a1),d2
000093FC 1229 0016                  		move.b	$16(a1),d1
00009400 4881                       		ext.w	d1
00009402 D242                       		add.w	d2,d1
00009404 3028 000C                  		move.w	$C(a0),d0
00009408 0440 0010                  		subi.w	#$10,d0
0000940C 9041                       		sub.w	d1,d0
0000940E 6200                       		bhi.s	loc_8918
00009410 0C40 FFF0                  		cmpi.w	#-$10,d0
00009414 6500                       		bcs.s	loc_8918
00009416 70FF                       		moveq	#-1,d0
00009418 4E75                       		rts	
0000941A                            ; ===========================================================================
0000941A                            
0000941A                            loc_8918:
0000941A 7000                       		moveq	#0,d0
0000941C 4E75                       		rts	
0000941E                            ; End of function Obj1D_ChkTouch
0000941E                            
0000941E                            ; ===========================================================================
0000941E                            ; ---------------------------------------------------------------------------
0000941E                            ; Sprite mappings - object 1D
0000941E                            ; ---------------------------------------------------------------------------
0000941E                            Map_obj1D:
0000941E                            	include "_maps\obj1D.asm"
0000941E                            ; ---------------------------------------------------------------------------
0000941E                            ; Sprite mappings - object 1D
0000941E                            ; ---------------------------------------------------------------------------
0000941E 0000                       		dc.w byte_891E-Map_obj1D
00009420 04                         byte_891E:	dc.b 4
00009421 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00009426 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
0000942B E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00009430 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00009436 00                         		even
00009436 00                         		even
00009436                            
00009436                            ; ===========================================================================
00009436                            ; ---------------------------------------------------------------------------
00009436                            ; Object 2A - doors (SBZ)
00009436                            ; ---------------------------------------------------------------------------
00009436                            
00009436                            Obj2A:					; XREF: Obj_Index
00009436 7000                       		moveq	#0,d0
00009438 1028 0024                  		move.b	$24(a0),d0
0000943C 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00009440 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00009444                            ; ===========================================================================
00009444 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00009446 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00009448                            ; ===========================================================================
00009448                            
00009448                            Obj2A_Main:				; XREF: Obj2A_Index
00009448 5428 0024                  		addq.b	#2,$24(a0)
0000944C 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00009454 317C 42E8 0002             		move.w	#$42E8,2(a0)
0000945A 0028 0004 0001             		ori.b	#4,1(a0)
00009460 117C 0008 0019             		move.b	#8,$19(a0)
00009466 117C 0004 0018             		move.b	#4,$18(a0)
0000946C                            
0000946C                            Obj2A_OpenShut:				; XREF: Obj2A_Index
0000946C 323C 0040                  		move.w	#$40,d1
00009470 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00009474 3038 D008                  		move.w	($FFFFD008).w,d0
00009478 D041                       		add.w	d1,d0
0000947A B068 0008                  		cmp.w	8(a0),d0
0000947E 6500                       		bcs.s	Obj2A_Animate
00009480 9041                       		sub.w	d1,d0
00009482 9041                       		sub.w	d1,d0
00009484 B068 0008                  		cmp.w	8(a0),d0
00009488 6400                       		bcc.s	Obj2A_Animate
0000948A D041                       		add.w	d1,d0
0000948C B068 0008                  		cmp.w	8(a0),d0
00009490 6400                       		bcc.s	loc_899A
00009492 0828 0000 0022             		btst	#0,$22(a0)
00009498 6600                       		bne.s	Obj2A_Animate
0000949A 6000                       		bra.s	Obj2A_Open
0000949C                            ; ===========================================================================
0000949C                            
0000949C                            loc_899A:				; XREF: Obj2A_OpenShut
0000949C 0828 0000 0022             		btst	#0,$22(a0)
000094A2 6700                       		beq.s	Obj2A_Animate
000094A4                            
000094A4                            Obj2A_Open:				; XREF: Obj2A_OpenShut
000094A4 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
000094AA                            
000094AA                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
000094AA 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
000094B0 6100 0000                  		bsr.w	AnimateSprite
000094B4 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
000094B8 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
000094BA 323C 0011                  		move.w	#$11,d1
000094BE 343C 0020                  		move.w	#$20,d2
000094C2 3602                       		move.w	d2,d3
000094C4 5243                       		addq.w	#1,d3
000094C6 3828 0008                  		move.w	8(a0),d4
000094CA 6100 0000                  		bsr.w	SolidObject
000094CE                            
000094CE                            Obj2A_MarkAsUsed:
000094CE 6000 0000                  		bra.w	MarkObjGone
000094D2                            ; ===========================================================================
000094D2                            Ani_obj2A:
000094D2                            	include "_anim\obj2A.asm"
000094D2                            ; ---------------------------------------------------------------------------
000094D2                            ; Animation script - doors (SBZ)
000094D2                            ; ---------------------------------------------------------------------------
000094D2 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
000094D4 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
000094D6 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
000094E2 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
000094EE                            		even
000094EE                            		even
000094EE                            
000094EE                            ; ---------------------------------------------------------------------------
000094EE                            ; Sprite mappings - doors (SBZ)
000094EE                            ; ---------------------------------------------------------------------------
000094EE                            Map_obj2A:
000094EE                            	include "_maps\obj2A.asm"
000094EE                            ; ---------------------------------------------------------------------------
000094EE                            ; Sprite mappings - doors (SBZ)
000094EE                            ; ---------------------------------------------------------------------------
000094EE 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
000094F2 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
000094F6 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
000094FA 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
000094FE 0000                       		dc.w byte_8A56-Map_obj2A
00009500 02                         byte_89FE:	dc.b 2
00009501 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00009506 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
0000950B 02                         byte_8A09:	dc.b 2
0000950C DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00009511 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00009516 02                         byte_8A14:	dc.b 2
00009517 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
0000951C 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00009521 02                         byte_8A1F:	dc.b 2
00009522 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00009527 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
0000952C 02                         byte_8A2A:	dc.b 2
0000952D D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00009532 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00009537 02                         byte_8A35:	dc.b 2
00009538 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
0000953D 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00009542 02                         byte_8A40:	dc.b 2
00009543 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00009548 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
0000954D 02                         byte_8A4B:	dc.b 2
0000954E C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00009553 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00009558 02                         byte_8A56:	dc.b 2
00009559 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
0000955E 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00009564 00                         		even
00009564 00                         		even
00009564                            
00009564                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009564                            
00009564                            
00009564                            Obj44_SolidWall:			; XREF: Obj44_Solid
00009564 6100 0000                  		bsr.w	Obj44_SolidWall2
00009568 6700                       		beq.s	loc_8AA8
0000956A 6B00 0000                  		bmi.w	loc_8AC4
0000956E 4A40                       		tst.w	d0
00009570 6700 0000                  		beq.w	loc_8A92
00009574 6B00                       		bmi.s	loc_8A7C
00009576 4A69 0010                  		tst.w	$10(a1)
0000957A 6B00                       		bmi.s	loc_8A92
0000957C 6000                       		bra.s	loc_8A82
0000957E                            ; ===========================================================================
0000957E                            
0000957E                            loc_8A7C:
0000957E 4A69 0010                  		tst.w	$10(a1)
00009582 6A00                       		bpl.s	loc_8A92
00009584                            
00009584                            loc_8A82:
00009584 9169 0008                  		sub.w	d0,8(a1)
00009588 337C 0000 0014             		move.w	#0,$14(a1)
0000958E 337C 0000 0010             		move.w	#0,$10(a1)
00009594                            
00009594                            loc_8A92:
00009594 0829 0001 0022             		btst	#1,$22(a1)
0000959A 6600                       		bne.s	loc_8AB6
0000959C 08E9 0005 0022             		bset	#5,$22(a1)
000095A2 08E8 0005 0022             		bset	#5,$22(a0)
000095A8 4E75                       		rts	
000095AA                            ; ===========================================================================
000095AA                            
000095AA                            loc_8AA8:
000095AA 0828 0005 0022             		btst	#5,$22(a0)
000095B0 6700                       		beq.s	locret_8AC2
000095B2 337C 0001 001C             		move.w	#1,$1C(a1)
000095B8                            
000095B8                            loc_8AB6:
000095B8 08A8 0005 0022             		bclr	#5,$22(a0)
000095BE 08A9 0005 0022             		bclr	#5,$22(a1)
000095C4                            
000095C4                            locret_8AC2:
000095C4 4E75                       		rts	
000095C6                            ; ===========================================================================
000095C6                            
000095C6                            loc_8AC4:
000095C6 4A69 0012                  		tst.w	$12(a1)
000095CA 6A00                       		bpl.s	locret_8AD8
000095CC 4A43                       		tst.w	d3
000095CE 6A00                       		bpl.s	locret_8AD8
000095D0 9769 000C                  		sub.w	d3,$C(a1)
000095D4 337C 0000 0012             		move.w	#0,$12(a1)
000095DA                            
000095DA                            locret_8AD8:
000095DA 4E75                       		rts	
000095DC                            ; End of function Obj44_SolidWall
000095DC                            
000095DC                            
000095DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000095DC                            
000095DC                            
000095DC                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
000095DC 43F8 D000                  		lea	($FFFFD000).w,a1
000095E0 3029 0008                  		move.w	8(a1),d0
000095E4 9068 0008                  		sub.w	8(a0),d0
000095E8 D041                       		add.w	d1,d0
000095EA 6B00                       		bmi.s	loc_8B48
000095EC 3601                       		move.w	d1,d3
000095EE D643                       		add.w	d3,d3
000095F0 B043                       		cmp.w	d3,d0
000095F2 6200                       		bhi.s	loc_8B48
000095F4 1629 0016                  		move.b	$16(a1),d3
000095F8 4883                       		ext.w	d3
000095FA D443                       		add.w	d3,d2
000095FC 3629 000C                  		move.w	$C(a1),d3
00009600 9668 000C                  		sub.w	$C(a0),d3
00009604 D642                       		add.w	d2,d3
00009606 6B00                       		bmi.s	loc_8B48
00009608 3802                       		move.w	d2,d4
0000960A D844                       		add.w	d4,d4
0000960C B644                       		cmp.w	d4,d3
0000960E 6400                       		bcc.s	loc_8B48
00009610 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00009614 6B00                       		bmi.s	loc_8B48
00009616 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000961C 6400                       		bcc.s	loc_8B48
0000961E 4A78 FE08                  		tst.w	($FFFFFE08).w
00009622 6600                       		bne.s	loc_8B48
00009624 3A00                       		move.w	d0,d5
00009626 B240                       		cmp.w	d0,d1
00009628 6400                       		bcc.s	loc_8B30
0000962A D241                       		add.w	d1,d1
0000962C 9041                       		sub.w	d1,d0
0000962E 3A00                       		move.w	d0,d5
00009630 4445                       		neg.w	d5
00009632                            
00009632                            loc_8B30:
00009632 3203                       		move.w	d3,d1
00009634 B443                       		cmp.w	d3,d2
00009636 6400                       		bcc.s	loc_8B3C
00009638 9644                       		sub.w	d4,d3
0000963A 3203                       		move.w	d3,d1
0000963C 4441                       		neg.w	d1
0000963E                            
0000963E                            loc_8B3C:
0000963E BA41                       		cmp.w	d1,d5
00009640 6200                       		bhi.s	loc_8B44
00009642 7801                       		moveq	#1,d4
00009644 4E75                       		rts	
00009646                            ; ===========================================================================
00009646                            
00009646                            loc_8B44:
00009646 78FF                       		moveq	#-1,d4
00009648 4E75                       		rts	
0000964A                            ; ===========================================================================
0000964A                            
0000964A                            loc_8B48:
0000964A 7800                       		moveq	#0,d4
0000964C 4E75                       		rts	
0000964E                            ; End of function Obj44_SolidWall2
0000964E                            
0000964E                            ; ===========================================================================
0000964E                            ; ---------------------------------------------------------------------------
0000964E                            ; Object 1E - Ball Hog enemy (SBZ)
0000964E                            ; ---------------------------------------------------------------------------
0000964E                            
0000964E                            Obj1E:					; XREF: Obj_Index
0000964E 7000                       		moveq	#0,d0
00009650 1028 0024                  		move.b	$24(a0),d0
00009654 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00009658 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
0000965C                            ; ===========================================================================
0000965C 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
0000965E 0000                       		dc.w Obj1E_Action-Obj1E_Index
00009660                            ; ===========================================================================
00009660                            
00009660                            Obj1E_Main:				; XREF: Obj1E_Index
00009660 117C 0013 0016             		move.b	#$13,$16(a0)
00009666 117C 0008 0017             		move.b	#8,$17(a0)
0000966C 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009674 317C 2302 0002             		move.w	#$2302,2(a0)
0000967A 117C 0004 0001             		move.b	#4,1(a0)
00009680 117C 0004 0018             		move.b	#4,$18(a0)
00009686 117C 0005 0020             		move.b	#5,$20(a0)
0000968C 117C 000C 0019             		move.b	#$C,$19(a0)
00009692 6100 0000                  		bsr.w	ObjectFall
00009696 4EB9 0000 0000             		jsr	ObjHitFloor
0000969C 4A41                       		tst.w	d1
0000969E 6A00                       		bpl.s	locret_8BAC
000096A0 D368 000C                  		add.w	d1,$C(a0)
000096A4 317C 0000 0012             		move.w	#0,$12(a0)
000096AA 5428 0024                  		addq.b	#2,$24(a0)
000096AE                            
000096AE                            locret_8BAC:
000096AE 4E75                       		rts	
000096B0                            ; ===========================================================================
000096B0                            
000096B0                            Obj1E_Action:				; XREF: Obj1E_Index
000096B0 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
000096B6 6100 0000                  		bsr.w	AnimateSprite
000096BA 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
000096C0 6600                       		bne.s	Obj1E_SetBall	; if not, branch
000096C2 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
000096C6 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
000096C8 6000                       		bra.s	Obj1E_MarkAsGone
000096CA                            ; ===========================================================================
000096CA                            
000096CA                            Obj1E_SetBall:				; XREF: Obj1E_Action
000096CA 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
000096CE                            
000096CE                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
000096CE 6000 0000                  		bra.w	MarkObjGone
000096D2                            ; ===========================================================================
000096D2                            
000096D2                            Obj1E_MakeBall:				; XREF: Obj1E_Action
000096D2 117C 0001 0032             		move.b	#1,$32(a0)
000096D8 6100 0000                  		bsr.w	SingleObjLoad
000096DC 6600                       		bne.s	loc_8C1A
000096DE 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
000096E2 3368 0008 0008             		move.w	8(a0),8(a1)
000096E8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000096EE 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
000096F4 337C 0000 0012             		move.w	#0,$12(a1)
000096FA 70FC                       		moveq	#-4,d0
000096FC 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00009702 6700                       		beq.s	loc_8C0A	; if not, branch
00009704 4440                       		neg.w	d0
00009706 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
0000970A                            
0000970A                            loc_8C0A:
0000970A D169 0008                  		add.w	d0,8(a1)
0000970E 0669 000C 000C             		addi.w	#$C,$C(a1)
00009714 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
0000971A                            
0000971A                            loc_8C1A:
0000971A 60B2                       		bra.s	Obj1E_MarkAsGone
0000971C                            ; ===========================================================================
0000971C                            ; ---------------------------------------------------------------------------
0000971C                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0000971C                            ; ---------------------------------------------------------------------------
0000971C                            
0000971C                            Obj20:					; XREF: Obj_Index
0000971C 7000                       		moveq	#0,d0
0000971E 1028 0024                  		move.b	$24(a0),d0
00009722 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
00009726 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
0000972A                            ; ===========================================================================
0000972A 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
0000972C 0000                       		dc.w Obj20_Bounce-Obj20_Index
0000972E                            ; ===========================================================================
0000972E                            
0000972E                            Obj20_Main:				; XREF: Obj20_Index
0000972E 5428 0024                  		addq.b	#2,$24(a0)
00009732 117C 0007 0016             		move.b	#7,$16(a0)
00009738 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009740 317C 2302 0002             		move.w	#$2302,2(a0)
00009746 117C 0004 0001             		move.b	#4,1(a0)
0000974C 117C 0003 0018             		move.b	#3,$18(a0)
00009752 117C 0087 0020             		move.b	#$87,$20(a0)
00009758 117C 0008 0019             		move.b	#8,$19(a0)
0000975E 7000                       		moveq	#0,d0
00009760 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009764 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
00009768 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
0000976C 117C 0004 001A             		move.b	#4,$1A(a0)
00009772                            
00009772                            Obj20_Bounce:				; XREF: Obj20_Index
00009772 4EB9 0000 0000             		jsr	ObjectFall
00009778 4A68 0012                  		tst.w	$12(a0)
0000977C 6B00                       		bmi.s	Obj20_ChkExplode
0000977E 4EB9 0000 0000             		jsr	ObjHitFloor
00009784 4A41                       		tst.w	d1
00009786 6A00                       		bpl.s	Obj20_ChkExplode
00009788 D368 000C                  		add.w	d1,$C(a0)
0000978C 317C FD00 0012             		move.w	#-$300,$12(a0)
00009792 4A03                       		tst.b	d3
00009794 6700                       		beq.s	Obj20_ChkExplode
00009796 6B00                       		bmi.s	loc_8CA4
00009798 4A68 0010                  		tst.w	$10(a0)
0000979C 6A00                       		bpl.s	Obj20_ChkExplode
0000979E 4468 0010                  		neg.w	$10(a0)
000097A2 6000                       		bra.s	Obj20_ChkExplode
000097A4                            ; ===========================================================================
000097A4                            
000097A4                            loc_8CA4:				; XREF: Obj20_Bounce
000097A4 4A68 0010                  		tst.w	$10(a0)
000097A8 6B00                       		bmi.s	Obj20_ChkExplode
000097AA 4468 0010                  		neg.w	$10(a0)
000097AE                            
000097AE                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
000097AE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
000097B2 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
000097B4 10BC 0024                  		move.b	#$24,0(a0)
000097B8 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
000097BC 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
000097C2 6000 0000                  		bra.w	Obj3F		; jump to explosion code
000097C6                            ; ===========================================================================
000097C6                            
000097C6                            Obj20_Animate:				; XREF: Obj20_ChkExplode
000097C6 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000097CA 6A00                       		bpl.s	Obj20_Display
000097CC 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
000097D2 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
000097D8                            
000097D8                            Obj20_Display:
000097D8 6100 0000                  		bsr.w	DisplaySprite
000097DC 3038 F72E                  		move.w	($FFFFF72E).w,d0
000097E0 0640 00E0                  		addi.w	#$E0,d0
000097E4 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
000097E8 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
000097EC 4E75                       		rts	
000097EE                            ; ===========================================================================
000097EE                            ; ---------------------------------------------------------------------------
000097EE                            ; Object 24 - explosion	from a destroyed monitor
000097EE                            ; ---------------------------------------------------------------------------
000097EE                            
000097EE                            Obj24:					; XREF: Obj_Index
000097EE 7000                       		moveq	#0,d0
000097F0 1028 0024                  		move.b	$24(a0),d0
000097F4 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
000097F8 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
000097FC                            ; ===========================================================================
000097FC 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
000097FE 0000                       		dc.w Obj24_Animate-Obj24_Index
00009800                            ; ===========================================================================
00009800                            
00009800                            Obj24_Main:				; XREF: Obj24_Index
00009800 5428 0024                  		addq.b	#2,$24(a0)
00009804 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
0000980C 317C 041C 0002             		move.w	#$41C,2(a0)
00009812 117C 0004 0001             		move.b	#4,1(a0)
00009818 117C 0001 0018             		move.b	#1,$18(a0)
0000981E 117C 0000 0020             		move.b	#0,$20(a0)
00009824 117C 000C 0019             		move.b	#$C,$19(a0)
0000982A 117C 0009 001E             		move.b	#9,$1E(a0)
00009830 117C 0000 001A             		move.b	#0,$1A(a0)
00009836 303C 00A5                  		move.w	#$A5,d0
0000983A 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play explosion sound
00009840                            
00009840                            Obj24_Animate:				; XREF: Obj24_Index
00009840 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009844 6A00                       		bpl.s	Obj24_Display
00009846 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
0000984C 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009850 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
00009856 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000985A                            
0000985A                            Obj24_Display:
0000985A 6000 0000                  		bra.w	DisplaySprite
0000985E                            ; ===========================================================================
0000985E                            ; ---------------------------------------------------------------------------
0000985E                            ; Object 27 - explosion	from a destroyed enemy
0000985E                            ; ---------------------------------------------------------------------------
0000985E                            
0000985E                            Obj27:					; XREF: Obj_Index
0000985E 7000                       		moveq	#0,d0
00009860 1028 0024                  		move.b	$24(a0),d0
00009864 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
00009868 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
0000986C                            ; ===========================================================================
0000986C 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
0000986E 0000                       		dc.w Obj27_Main-Obj27_Index
00009870 0000                       		dc.w Obj27_Animate-Obj27_Index
00009872                            ; ===========================================================================
00009872                            
00009872                            Obj27_LoadAnimal:			; XREF: Obj27_Index
00009872 5428 0024                  		addq.b	#2,$24(a0)
00009876 6100 0000                  		bsr.w	SingleObjLoad
0000987A 6600                       		bne.s	Obj27_Main
0000987C 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00009880 3368 0008 0008             		move.w	8(a0),8(a1)
00009886 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000988C 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
00009892                            
00009892                            Obj27_Main:				; XREF: Obj27_Index
00009892 5428 0024                  		addq.b	#2,$24(a0)
00009896 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
0000989E 317C 05A0 0002             		move.w	#$5A0,2(a0)
000098A4 117C 0004 0001             		move.b	#4,1(a0)
000098AA 117C 0001 0018             		move.b	#1,$18(a0)
000098B0 117C 0000 0020             		move.b	#0,$20(a0)
000098B6 117C 000C 0019             		move.b	#$C,$19(a0)
000098BC                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
000098BC 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
000098C2 117C 0000 001A             		move.b	#0,$1A(a0)
000098C8 303C 00C1                  		move.w	#$C1,d0
000098CC 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
000098D2                            
000098D2 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
000098D8 1028 0028                  		move.b	$28(a0),d0
000098DC 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
000098E2 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
000098E8                            
000098E8                            Obj27_Animate:				; XREF: Obj27_Index
000098E8 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000098EC 6A00                       		bpl.s	Obj27_Display
000098EE                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
000098EE 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
000098F4 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
000098F8 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
000098FE 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009902                            
00009902                            Obj27_Display:
00009902 4EB9 0000 0000             		jsr	ObjectFall
00009908 6000 0000                  		bra.w	DisplaySprite
0000990C                            ; ===========================================================================
0000990C                            ; ---------------------------------------------------------------------------
0000990C                            Obj27_ExplosionXYSpd:
0000990C                            		; dc.w	-$350, -$300	; Left
0000990C                            		; dc.w	-$200, -$450	; Near middle (left)
0000990C                            		; dc.w	0, -$500	; Middle
0000990C                            		; dc.w	$200, -$450	; Near middle (right)
0000990C                            		; dc.w	$350, -$300	; Right
0000990C                            
0000990C FEB0 FC00                  		dc.w	-$150, -$400	; Left
00009910 FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
00009914 0000 FA00                  		dc.w	0, -$600	; Middle
00009918 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
0000991C 0150 FC00                  		dc.w	$150, -$400	; Right
00009920                            
00009920 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
0000993A                            ; ---------------------------------------------------------------------------
0000993A                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000993A                            ; ---------------------------------------------------------------------------
0000993A                            
0000993A                            Obj3F:					; XREF: Obj_Index
0000993A 7000                       		moveq	#0,d0
0000993C 1028 0024                  		move.b	$24(a0),d0
00009940 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
00009944 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00009948                            ; ===========================================================================
00009948 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
0000994A FFA0                       		dc.w Obj27_Animate-Obj3F_Index
0000994C                            ; ===========================================================================
0000994C                            
0000994C                            Obj3F_Main:				; XREF: Obj3F_Index
0000994C 5428 0024                  		addq.b	#2,$24(a0)
00009950 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
00009958 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000995E 117C 0004 0001             		move.b	#4,1(a0)
00009964 117C 0001 0018             		move.b	#1,$18(a0)
0000996A 117C 0000 0020             		move.b	#0,$20(a0)
00009970 117C 000C 0019             		move.b	#$C,$19(a0)
00009976 117C 0007 001E             		move.b	#7,$1E(a0)
0000997C 117C 0000 001A             		move.b	#0,$1A(a0)
00009982 303C 00C4                  		move.w	#$C4,d0
00009986 4EF9 0000 15E6             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
0000998C                            ; ===========================================================================
0000998C                            Ani_obj1E:
0000998C                            	include "_anim\obj1E.asm"
0000998C                            ; ---------------------------------------------------------------------------
0000998C                            ; Animation script - doors (SBZ)
0000998C                            ; ---------------------------------------------------------------------------
0000998C 0000                       		dc.w byte_8E4A-Ani_obj1E
0000998E 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
000099A6 00                         		even
000099A6 00                         		even
000099A6                            
000099A6                            ; ---------------------------------------------------------------------------
000099A6                            ; Sprite mappings - Ball Hog enemy (SBZ)
000099A6                            ; ---------------------------------------------------------------------------
000099A6                            Map_obj1E:
000099A6                            	include "_maps\obj1E.asm"
000099A6                            Map_a7ad:
000099A6 0000                       Map_a7ad_0: 	dc.w Map_a7ad_C-Map_a7ad
000099A8 0000                       Map_a7ad_2: 	dc.w Map_a7ad_17-Map_a7ad
000099AA 0000                       Map_a7ad_4: 	dc.w Map_a7ad_22-Map_a7ad
000099AC 0000                       Map_a7ad_6: 	dc.w Map_a7ad_2D-Map_a7ad
000099AE 0000                       Map_a7ad_8: 	dc.w Map_a7ad_38-Map_a7ad
000099B0 0000                       Map_a7ad_A: 	dc.w Map_a7ad_43-Map_a7ad
000099B2 02                         Map_a7ad_C: 	dc.b $2
000099B3 EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
000099B8 FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
000099BD 02                         Map_a7ad_17: 	dc.b $2
000099BE EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
000099C3 FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
000099C8 02                         Map_a7ad_22: 	dc.b $2
000099C9 F409 0000 F4               	dc.b $F4, $9, $0, $0, $F4
000099CE 0409 0018 F4               	dc.b $4, $9, $0, $18, $F4
000099D3 02                         Map_a7ad_2D: 	dc.b $2
000099D4 E409 0000 F4               	dc.b $E4, $9, $0, $0, $F4
000099D9 F40A 001E F4               	dc.b $F4, $A, $0, $1E, $F4
000099DE 02                         Map_a7ad_38: 	dc.b $2
000099DF F805 0027 F8               	dc.b $F8, $5, $0, $27, $F8
000099E4 E805 000F F8               	dc.b $E8, $5, $0, $F, $F8
000099E9 02                         Map_a7ad_43: 	dc.b $2
000099EA F805 002B F8               	dc.b $F8, $5, $0, $2B, $F8
000099EF E805 0013 F8               	dc.b $E8, $5, $0, $13, $F8
000099F4                            	even
000099F4                            	even
000099F4                            
000099F4                            ; ---------------------------------------------------------------------------
000099F4                            ; Sprite mappings - explosion
000099F4                            ; ---------------------------------------------------------------------------
000099F4                            Map_obj24:
000099F4                            	include "_maps\obj24.asm"
000099F4                            ; ---------------------------------------------------------------------------
000099F4                            ; Sprite mappings - explosion
000099F4                            ; ---------------------------------------------------------------------------
000099F4 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
000099F8 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
000099FC 01                         byte_8EAE:	dc.b 1
000099FD F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00009A02 01                         byte_8EB4:	dc.b 1
00009A03 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00009A08 01                         byte_8EBA:	dc.b 1
00009A09 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00009A0E 01                         byte_8EC0:	dc.b 1
00009A0F F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
00009A14                            		even
00009A14                            		even
00009A14                            
00009A14                            ; ---------------------------------------------------------------------------
00009A14                            ; Sprite mappings - explosion
00009A14                            ; ---------------------------------------------------------------------------
00009A14 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
00009A18 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
00009A1C 0000                       		dc.w byte_8EF7-Map_obj27
00009A1E 01                         byte_8ED0:	dc.b 1
00009A1F F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
00009A24 01                         byte_8ED6:	dc.b 1
00009A25 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
00009A2A 01                         byte_8EDC:	dc.b 1
00009A2B F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
00009A30 04                         byte_8EE2:	dc.b 4
00009A31 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00009A36 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
00009A3B 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00009A40 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00009A45 04                         byte_8EF7:	dc.b 4
00009A46 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
00009A4B EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00009A50 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
00009A55 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
00009A5A                            		even
00009A5A                            ; ---------------------------------------------------------------------------
00009A5A                            ; Sprite mappings - explosion from when	a boss is destroyed
00009A5A                            ; ---------------------------------------------------------------------------
00009A5A FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
00009A5C 0000                       		dc.w byte_8F16-Map_obj3F
00009A5E 0000                       		dc.w byte_8F1C-Map_obj3F
00009A60 FFD6                       		dc.w byte_8EE2-Map_obj3F
00009A62 FFEB                       		dc.w byte_8EF7-Map_obj3F
00009A64 01                         byte_8F16:	dc.b 1
00009A65 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
00009A6A 01                         byte_8F1C:	dc.b 1
00009A6B F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
00009A70                            		even
00009A70                            ; ===========================================================================
00009A70                            ; ---------------------------------------------------------------------------
00009A70                            ; Object 28 - animals
00009A70                            ; ---------------------------------------------------------------------------
00009A70                            
00009A70                            Obj28:					; XREF: Obj_Index
00009A70 7000                       		moveq	#0,d0
00009A72 1028 0024                  		move.b	$24(a0),d0
00009A76 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
00009A7A 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
00009A7E                            ; ===========================================================================
00009A7E 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
00009A82 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009A86 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
00009A8A 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009A8E 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
00009A92 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
00009A96 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
00009A9A 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009A9E 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009AA2 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
00009AA6 0000                       		dc.w loc_92D6-Obj28_Index
00009AA8                            
00009AA8 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1, 0,	5, 0,	5
00009AB8                            
00009AB8 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
00009ABC 0000 0000                  		dc.l Map_obj28
00009AC0 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00009AC4 0000 0000                  		dc.l Map_obj28a		; mappings address
00009AC8 FE80 FD00                  		dc.w $FE80, $FD00
00009ACC 0000 0000                  		dc.l Map_obj28
00009AD0 FEC0 FE80                  		dc.w $FEC0, $FE80
00009AD4 0000 0000                  		dc.l Map_obj28a
00009AD8 FE40 FD00                  		dc.w $FE40, $FD00
00009ADC 0000 0000                  		dc.l Map_obj28b
00009AE0 FD00 FC00                  		dc.w $FD00, $FC00
00009AE4 0000 0000                  		dc.l Map_obj28a
00009AE8 FD80 FC80                  		dc.w $FD80, $FC80
00009AEC 0000 0000                  		dc.l Map_obj28b
00009AF0                            
00009AF0 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
00009B00 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
00009B10 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
00009B1C                            
00009B1C 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
00009B30 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00009B44 0000 0000                  		dc.l Map_obj28b
00009B48                            
00009B48 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
00009B5A 0565 05B3                  		dc.w $565, $5B3
00009B5E                            ; ===========================================================================
00009B5E                            
00009B5E                            Obj28_Ending:				; XREF: Obj28_Index
00009B5E 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
00009B62 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
00009B66 7000                       		moveq	#0,d0
00009B68 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009B6C D040                       		add.w	d0,d0		; multiply d0 by 2
00009B6E 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
00009B72 0440 0014                  		subi.w	#$14,d0
00009B76 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
00009B7C D040                       		add.w	d0,d0
00009B7E 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
00009B84 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
00009B88 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
00009B8E 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
00009B94 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
00009B9A 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
00009BA0 117C 000C 0016             		move.b	#$C,$16(a0)
00009BA6 117C 0004 0001             		move.b	#4,1(a0)
00009BAC 08E8 0000 0001             		bset	#0,1(a0)
00009BB2 117C 0006 0018             		move.b	#6,$18(a0)
00009BB8 117C 0008 0019             		move.b	#8,$19(a0)
00009BBE 117C 0007 001E             		move.b	#7,$1E(a0)
00009BC4 6000 0000                  		bra.w	DisplaySprite
00009BC8                            ; ===========================================================================
00009BC8                            
00009BC8                            Obj28_FromEnemy:			; XREF: Obj28_Ending
00009BC8 5428 0024                  		addq.b	#2,$24(a0)
00009BCC 6100 918C                  		bsr.w	RandomNumber
00009BD0 0240 0001                  		andi.w	#1,d0
00009BD4 7200                       		moveq	#0,d1
00009BD6 1238 FE10                  		move.b	($FFFFFE10).w,d1
00009BDA D241                       		add.w	d1,d1
00009BDC D240                       		add.w	d0,d1
00009BDE 43FA FEC8                  		lea	Obj28_VarIndex(pc),a1
00009BE2 1031 1000                  		move.b	(a1,d1.w),d0
00009BE6 1140 0030                  		move.b	d0,$30(a0)
00009BEA E748                       		lsl.w	#3,d0
00009BEC 43FA FECA                  		lea	Obj28_Variables(pc),a1
00009BF0 D2C0                       		adda.w	d0,a1
00009BF2 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
00009BF6 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
00009BFA 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
00009BFE 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
00009C04 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
00009C0A 6700                       		beq.s	loc_90C0	; if yes, branch
00009C0C 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
00009C12                            
00009C12                            loc_90C0:
00009C12 117C 000C 0016             		move.b	#$C,$16(a0)
00009C18 117C 0004 0001             		move.b	#4,1(a0)
00009C1E 08E8 0000 0001             		bset	#0,1(a0)
00009C24 117C 0006 0018             		move.b	#6,$18(a0)
00009C2A 117C 0008 0019             		move.b	#8,$19(a0)
00009C30 117C 0007 001E             		move.b	#7,$1E(a0)
00009C36 117C 0002 001A             		move.b	#2,$1A(a0)
00009C3C 317C FC00 0012             		move.w	#-$400,$12(a0)
00009C42 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009C46 6600                       		bne.s	loc_911C
00009C48 6100 0000                  		bsr.w	SingleObjLoad
00009C4C 6600                       		bne.s	Obj28_Display
00009C4E 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00009C52 3368 0008 0008             		move.w	8(a0),8(a1)
00009C58 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009C5E 3028 003E                  		move.w	$3E(a0),d0
00009C62 E248                       		lsr.w	#1,d0
00009C64 1340 001A                  		move.b	d0,$1A(a1)
00009C68                            
00009C68                            Obj28_Display:
00009C68 6000 0000                  		bra.w	DisplaySprite
00009C6C                            ; ===========================================================================
00009C6C                            
00009C6C                            loc_911C:
00009C6C 117C 0012 0024             		move.b	#$12,$24(a0)
00009C72 4268 0010                  		clr.w	$10(a0)
00009C76 6000 0000                  		bra.w	DisplaySprite
00009C7A                            ; ===========================================================================
00009C7A                            
00009C7A                            loc_912A:				; XREF: Obj28_Index
00009C7A 4A28 0001                  		tst.b	1(a0)
00009C7E 6A00 0000                  		bpl.w	DeleteObject
00009C82 6100 0000                  		bsr.w	ObjectFall
00009C86 4A68 0012                  		tst.w	$12(a0)
00009C8A 6B00                       		bmi.s	loc_9180
00009C8C 4EB9 0000 0000             		jsr	ObjHitFloor
00009C92 4A41                       		tst.w	d1
00009C94 6A00                       		bpl.s	loc_9180
00009C96 D368 000C                  		add.w	d1,$C(a0)
00009C9A 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009CA0 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009CA6 117C 0001 001A             		move.b	#1,$1A(a0)
00009CAC 1028 0030                  		move.b	$30(a0),d0
00009CB0 D000                       		add.b	d0,d0
00009CB2 5800                       		addq.b	#4,d0
00009CB4 1140 0024                  		move.b	d0,$24(a0)
00009CB8 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009CBC 6700                       		beq.s	loc_9180
00009CBE 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009CC4 6700                       		beq.s	loc_9180
00009CC6 4468 0010                  		neg.w	$10(a0)
00009CCA 0868 0000 0001             		bchg	#0,1(a0)
00009CD0                            
00009CD0                            loc_9180:
00009CD0 6000 0000                  		bra.w	DisplaySprite
00009CD4                            ; ===========================================================================
00009CD4                            
00009CD4                            loc_9184:				; XREF: Obj28_Index
00009CD4 6100 0000                  		bsr.w	ObjectFall
00009CD8 117C 0001 001A             		move.b	#1,$1A(a0)
00009CDE 4A68 0012                  		tst.w	$12(a0)
00009CE2 6B00                       		bmi.s	loc_91AE
00009CE4 117C 0000 001A             		move.b	#0,$1A(a0)
00009CEA 4EB9 0000 0000             		jsr	ObjHitFloor
00009CF0 4A41                       		tst.w	d1
00009CF2 6A00                       		bpl.s	loc_91AE
00009CF4 D368 000C                  		add.w	d1,$C(a0)
00009CF8 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009CFE                            
00009CFE                            loc_91AE:
00009CFE 4A28 0028                  		tst.b	$28(a0)
00009D02 6600                       		bne.s	loc_9224
00009D04 4A28 0001                  		tst.b	1(a0)
00009D08 6A00 0000                  		bpl.w	DeleteObject
00009D0C 6000 0000                  		bra.w	DisplaySprite
00009D10                            ; ===========================================================================
00009D10                            
00009D10                            loc_91C0:				; XREF: Obj28_Index
00009D10 7218                       		moveq	#$18,d1
00009D12 4EB9 0000 0000             		jsr	ObjectFallCustom
00009D18 4A68 0012                  		tst.w	$12(a0)
00009D1C 6B00                       		bmi.s	loc_91FC
00009D1E 4EB9 0000 0000             		jsr	ObjHitFloor
00009D24 4A41                       		tst.w	d1
00009D26 6A00                       		bpl.s	loc_91FC
00009D28 D368 000C                  		add.w	d1,$C(a0)
00009D2C 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009D32 4A28 0028                  		tst.b	$28(a0)
00009D36 6700                       		beq.s	loc_91FC
00009D38 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
00009D3E 6700                       		beq.s	loc_91FC
00009D40 4468 0010                  		neg.w	$10(a0)
00009D44 0868 0000 0001             		bchg	#0,1(a0)
00009D4A                            
00009D4A                            loc_91FC:
00009D4A 5328 001E                  		subq.b	#1,$1E(a0)
00009D4E 6A00                       		bpl.s	loc_9212
00009D50 117C 0001 001E             		move.b	#1,$1E(a0)
00009D56 5228 001A                  		addq.b	#1,$1A(a0)
00009D5A 0228 0001 001A             		andi.b	#1,$1A(a0)
00009D60                            
00009D60                            loc_9212:
00009D60 4A28 0028                  		tst.b	$28(a0)
00009D64 6600                       		bne.s	loc_9224
00009D66 4A28 0001                  		tst.b	1(a0)
00009D6A 6A00 0000                  		bpl.w	DeleteObject
00009D6E 6000 0000                  		bra.w	DisplaySprite
00009D72                            ; ===========================================================================
00009D72                            
00009D72                            loc_9224:				; XREF: Obj28_Index
00009D72 3028 0008                  		move.w	8(a0),d0
00009D76 9078 D008                  		sub.w	($FFFFD008).w,d0
00009D7A 6500                       		bcs.s	loc_923C
00009D7C 0440 0180                  		subi.w	#$180,d0
00009D80 6A00                       		bpl.s	loc_923C
00009D82 4A28 0001                  		tst.b	1(a0)
00009D86 6A00 0000                  		bpl.w	DeleteObject
00009D8A                            
00009D8A                            loc_923C:
00009D8A 6000 0000                  		bra.w	DisplaySprite
00009D8E                            ; ===========================================================================
00009D8E                            
00009D8E                            loc_9240:				; XREF: Obj28_Index
00009D8E 4A28 0001                  		tst.b	1(a0)
00009D92 6A00 0000                  		bpl.w	DeleteObject
00009D96 5368 0036                  		subq.w	#1,$36(a0)
00009D9A 6600 0000                  		bne.w	loc_925C
00009D9E 117C 0002 0024             		move.b	#2,$24(a0)
00009DA4 117C 0003 0018             		move.b	#3,$18(a0)
00009DAA                            
00009DAA                            loc_925C:
00009DAA 6000 0000                  		bra.w	DisplaySprite
00009DAE                            ; ===========================================================================
00009DAE                            
00009DAE                            loc_9260:				; XREF: Obj28_Index
00009DAE 6100 0000                  		bsr.w	sub_9404
00009DB2 6400                       		bcc.s	loc_927C
00009DB4 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009DBA 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009DC0 117C 000E 0024             		move.b	#$E,$24(a0)
00009DC6 6000 FF48                  		bra.w	loc_91C0
00009DCA                            ; ===========================================================================
00009DCA                            
00009DCA                            loc_927C:
00009DCA 6000 FFA6                  		bra.w	loc_9224
00009DCE                            ; ===========================================================================
00009DCE                            
00009DCE                            loc_9280:				; XREF: Obj28_Index
00009DCE 6100 0000                  		bsr.w	sub_9404
00009DD2 6A00                       		bpl.s	loc_92B6
00009DD4 4268 0010                  		clr.w	$10(a0)
00009DD8 4268 0032                  		clr.w	$32(a0)
00009DDC 7218                       		moveq	#$18,d1
00009DDE 4EB9 0000 0000             		jsr	ObjectFallCustom
00009DE4 6100 0000                  		bsr.w	loc_93C4
00009DE8 6100 0000                  		bsr.w	loc_93EC
00009DEC 5328 001E                  		subq.b	#1,$1E(a0)
00009DF0 6A00                       		bpl.s	loc_92B6
00009DF2 117C 0001 001E             		move.b	#1,$1E(a0)
00009DF8 5228 001A                  		addq.b	#1,$1A(a0)
00009DFC 0228 0001 001A             		andi.b	#1,$1A(a0)
00009E02                            
00009E02                            loc_92B6:
00009E02 6000 FF6E                  		bra.w	loc_9224
00009E06                            ; ===========================================================================
00009E06                            
00009E06                            loc_92BA:				; XREF: Obj28_Index
00009E06 6100 0000                  		bsr.w	sub_9404
00009E0A 6A00                       		bpl.s	loc_9310
00009E0C 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009E12 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009E18 117C 0004 0024             		move.b	#4,$24(a0)
00009E1E 6000 FEB4                  		bra.w	loc_9184
00009E22                            ; ===========================================================================
00009E22                            
00009E22                            loc_92D6:				; XREF: Obj28_Index
00009E22 6100 0000                  		bsr.w	ObjectFall
00009E26 117C 0001 001A             		move.b	#1,$1A(a0)
00009E2C 4A68 0012                  		tst.w	$12(a0)
00009E30 6B00                       		bmi.s	loc_9310
00009E32 117C 0000 001A             		move.b	#0,$1A(a0)
00009E38 4EB9 0000 0000             		jsr	ObjHitFloor
00009E3E 4A41                       		tst.w	d1
00009E40 6A00                       		bpl.s	loc_9310
00009E42 4628 0029                  		not.b	$29(a0)
00009E46 6600                       		bne.s	loc_9306
00009E48 4468 0010                  		neg.w	$10(a0)
00009E4C 0868 0000 0001             		bchg	#0,1(a0)
00009E52                            
00009E52                            loc_9306:
00009E52 D368 000C                  		add.w	d1,$C(a0)
00009E56 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009E5C                            
00009E5C                            loc_9310:
00009E5C 6000 FF14                  		bra.w	loc_9224
00009E60                            ; ===========================================================================
00009E60                            
00009E60                            loc_9314:				; XREF: Obj28_Index
00009E60 6100 0000                  		bsr.w	sub_9404
00009E64 6A00                       		bpl.s	loc_932E
00009E66 4268 0010                  		clr.w	$10(a0)
00009E6A 4268 0032                  		clr.w	$32(a0)
00009E6E 6100 0000                  		bsr.w	ObjectFall
00009E72 6100 0000                  		bsr.w	loc_93C4
00009E76 6100 0000                  		bsr.w	loc_93EC
00009E7A                            
00009E7A                            loc_932E:
00009E7A 6000 FEF6                  		bra.w	loc_9224
00009E7E                            ; ===========================================================================
00009E7E                            
00009E7E                            loc_9332:				; XREF: Obj28_Index
00009E7E 6100 0000                  		bsr.w	sub_9404
00009E82 6A00                       		bpl.s	loc_936C
00009E84 6100 0000                  		bsr.w	ObjectFall
00009E88 117C 0001 001A             		move.b	#1,$1A(a0)
00009E8E 4A68 0012                  		tst.w	$12(a0)
00009E92 6B00                       		bmi.s	loc_936C
00009E94 117C 0000 001A             		move.b	#0,$1A(a0)
00009E9A 4EB9 0000 0000             		jsr	ObjHitFloor
00009EA0 4A41                       		tst.w	d1
00009EA2 6A00                       		bpl.s	loc_936C
00009EA4 4468 0010                  		neg.w	$10(a0)
00009EA8 0868 0000 0001             		bchg	#0,1(a0)
00009EAE D368 000C                  		add.w	d1,$C(a0)
00009EB2 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009EB8                            
00009EB8                            loc_936C:
00009EB8 6000 FEB8                  		bra.w	loc_9224
00009EBC                            ; ===========================================================================
00009EBC                            
00009EBC                            loc_9370:				; XREF: Obj28_Index
00009EBC 6100 0000                  		bsr.w	sub_9404
00009EC0 6A00                       		bpl.s	loc_93C0
00009EC2 7218                       		moveq	#$18,d1
00009EC4 4EB9 0000 0000             		jsr	ObjectFallCustom
00009ECA 4A68 0012                  		tst.w	$12(a0)
00009ECE 6B00                       		bmi.s	loc_93AA
00009ED0 4EB9 0000 0000             		jsr	ObjHitFloor
00009ED6 4A41                       		tst.w	d1
00009ED8 6A00                       		bpl.s	loc_93AA
00009EDA 4628 0029                  		not.b	$29(a0)
00009EDE 6600                       		bne.s	loc_93A0
00009EE0 4468 0010                  		neg.w	$10(a0)
00009EE4 0868 0000 0001             		bchg	#0,1(a0)
00009EEA                            
00009EEA                            loc_93A0:
00009EEA D368 000C                  		add.w	d1,$C(a0)
00009EEE 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009EF4                            
00009EF4                            loc_93AA:
00009EF4 5328 001E                  		subq.b	#1,$1E(a0)
00009EF8 6A00                       		bpl.s	loc_93C0
00009EFA 117C 0001 001E             		move.b	#1,$1E(a0)
00009F00 5228 001A                  		addq.b	#1,$1A(a0)
00009F04 0228 0001 001A             		andi.b	#1,$1A(a0)
00009F0A                            
00009F0A                            loc_93C0:
00009F0A 6000 FE66                  		bra.w	loc_9224
00009F0E                            ; ===========================================================================
00009F0E                            
00009F0E                            loc_93C4:
00009F0E 117C 0001 001A             		move.b	#1,$1A(a0)
00009F14 4A68 0012                  		tst.w	$12(a0)
00009F18 6B00                       		bmi.s	locret_93EA
00009F1A 117C 0000 001A             		move.b	#0,$1A(a0)
00009F20 4EB9 0000 0000             		jsr	ObjHitFloor
00009F26 4A41                       		tst.w	d1
00009F28 6A00                       		bpl.s	locret_93EA
00009F2A D368 000C                  		add.w	d1,$C(a0)
00009F2E 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009F34                            
00009F34                            locret_93EA:
00009F34 4E75                       		rts	
00009F36                            ; ===========================================================================
00009F36                            
00009F36                            loc_93EC:
00009F36 08E8 0000 0001             		bset	#0,1(a0)
00009F3C 3028 0008                  		move.w	8(a0),d0
00009F40 9078 D008                  		sub.w	($FFFFD008).w,d0
00009F44 6400                       		bcc.s	locret_9402
00009F46 08A8 0000 0001             		bclr	#0,1(a0)
00009F4C                            
00009F4C                            locret_9402:
00009F4C 4E75                       		rts	
00009F4E                            
00009F4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009F4E                            
00009F4E                            
00009F4E                            sub_9404:
00009F4E 3038 D008                  		move.w	($FFFFD008).w,d0
00009F52 9068 0008                  		sub.w	8(a0),d0
00009F56 0440 00B8                  		subi.w	#$B8,d0
00009F5A 4E75                       		rts	
00009F5C                            ; End of function sub_9404
00009F5C                            
00009F5C                            ; ===========================================================================
00009F5C                            ; ---------------------------------------------------------------------------
00009F5C                            ; Object 29 - points that appear when you destroy something
00009F5C                            ; ---------------------------------------------------------------------------
00009F5C                            
00009F5C                            Obj29:					; XREF: Obj_Index
00009F5C 7000                       		moveq	#0,d0
00009F5E 1028 0024                  		move.b	$24(a0),d0
00009F62 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
00009F66 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009F6A 6000 0000                  		bra.w	DisplaySprite
00009F6E                            ; ===========================================================================
00009F6E 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009F70 0000                       		dc.w Obj29_Slower-Obj29_Index
00009F72                            ; ===========================================================================
00009F72                            
00009F72                            Obj29_Main:				; XREF: Obj29_Index
00009F72 5428 0024                  		addq.b	#2,$24(a0)
00009F76 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009F7E 317C 2797 0002             		move.w	#$2797,2(a0)
00009F84 117C 0004 0001             		move.b	#4,1(a0)
00009F8A 117C 0001 0018             		move.b	#1,$18(a0)
00009F90 117C 0008 0019             		move.b	#8,$19(a0)
00009F96 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009F9C                            
00009F9C                            Obj29_Slower:				; XREF: Obj29_Index
00009F9C 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009FA0 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00009FA4 7218                       		moveq	#$18,d1
00009FA6 4EF9 0000 0000             		jmp	ObjectFallCustom
00009FAC                            ; ===========================================================================
00009FAC                            ; ---------------------------------------------------------------------------
00009FAC                            ; Sprite mappings - animals
00009FAC                            ; ---------------------------------------------------------------------------
00009FAC                            Map_obj28:
00009FAC                            	include "_maps\obj28.asm"
00009FAC                            ; ---------------------------------------------------------------------------
00009FAC                            ; Sprite mappings - animals
00009FAC                            ; ---------------------------------------------------------------------------
00009FAC 0000                       		dc.w byte_9472-Map_obj28
00009FAE 0000                       		dc.w byte_9478-Map_obj28
00009FB0 0000                       		dc.w byte_946C-Map_obj28
00009FB2 01                         byte_946C:	dc.b 1
00009FB3 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009FB8 01                         byte_9472:	dc.b 1
00009FB9 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009FBE 01                         byte_9478:	dc.b 1
00009FBF F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009FC4                            		even
00009FC4                            		even
00009FC4                            
00009FC4                            Map_obj28a:
00009FC4                            	include "_maps\obj28a.asm"
00009FC4                            ; ---------------------------------------------------------------------------
00009FC4                            ; Sprite mappings - animals
00009FC4                            ; ---------------------------------------------------------------------------
00009FC4 0000                       		dc.w byte_948A-Map_obj28a
00009FC6 0000                       		dc.w byte_9490-Map_obj28a
00009FC8 0000                       		dc.w byte_9484-Map_obj28a
00009FCA 01                         byte_9484:	dc.b 1
00009FCB F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009FD0 01                         byte_948A:	dc.b 1
00009FD1 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009FD6 01                         byte_9490:	dc.b 1
00009FD7 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009FDC                            		even
00009FDC                            		even
00009FDC                            
00009FDC                            Map_obj28b:
00009FDC                            	include "_maps\obj28b.asm"
00009FDC                            ; ---------------------------------------------------------------------------
00009FDC                            ; Sprite mappings - animals
00009FDC                            ; ---------------------------------------------------------------------------
00009FDC 0000                       		dc.w byte_94A2-Map_obj28b
00009FDE 0000                       		dc.w byte_94A8-Map_obj28b
00009FE0 0000                       		dc.w byte_949C-Map_obj28b
00009FE2 01                         byte_949C:	dc.b 1
00009FE3 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009FE8 01                         byte_94A2:	dc.b 1
00009FE9 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009FEE 01                         byte_94A8:	dc.b 1
00009FEF FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00009FF4                            		even
00009FF4                            		even
00009FF4                            
00009FF4                            ; ---------------------------------------------------------------------------
00009FF4                            ; Sprite mappings - points that	appear when you	destroy	something
00009FF4                            ; ---------------------------------------------------------------------------
00009FF4                            Map_obj29:
00009FF4                            	include "_maps\obj29.asm"
00009FF4                            ; ---------------------------------------------------------------------------
00009FF4                            ; Sprite mappings - points that	appear when you	destroy	something
00009FF4                            ; ---------------------------------------------------------------------------
00009FF4 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
00009FF8 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009FFC 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
0000A000 0000                       		dc.w byte_94E5-Map_obj29
0000A002 01                         byte_94BC:	dc.b 1
0000A003 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
0000A008 01                         byte_94C2:	dc.b 1
0000A009 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
0000A00E 01                         byte_94C8:	dc.b 1
0000A00F FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
0000A014 01                         byte_94CE:	dc.b 1
0000A015 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
0000A01A 01                         byte_94D4:	dc.b 1
0000A01B FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
0000A020 02                         byte_94DA:	dc.b 2
0000A021 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
0000A026 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
0000A02B 02                         byte_94E5:	dc.b 2
0000A02C FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
0000A031 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
0000A036                            		even
0000A036                            		even
0000A036                            
0000A036                            ; ===========================================================================
0000A036                            ; ---------------------------------------------------------------------------
0000A036                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000A036                            ; ---------------------------------------------------------------------------
0000A036                            
0000A036                            Obj1F:					; XREF: Obj_Index
0000A036 7000                       		moveq	#0,d0
0000A038 1028 0024                  		move.b	$24(a0),d0
0000A03C 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
0000A040 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
0000A044                            ; ===========================================================================
0000A044 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
0000A046 0000                       		dc.w Obj1F_Action-Obj1F_Index
0000A048 0000                       		dc.w Obj1F_Delete-Obj1F_Index
0000A04A 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
0000A04C 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
0000A04E                            ; ===========================================================================
0000A04E                            
0000A04E                            Obj1F_Main:				; XREF: Obj1F_Index
0000A04E 117C 0010 0016             		move.b	#$10,$16(a0)
0000A054 117C 0008 0017             		move.b	#8,$17(a0)
0000A05A 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000A062 317C 0400 0002             		move.w	#$400,2(a0)
0000A068 117C 0004 0001             		move.b	#4,1(a0)
0000A06E 117C 0003 0018             		move.b	#3,$18(a0)
0000A074 117C 0006 0020             		move.b	#6,$20(a0)
0000A07A 117C 0015 0019             		move.b	#$15,$19(a0)
0000A080 6100 0000                  		bsr.w	ObjectFall
0000A084 4EB9 0000 0000             		jsr	ObjHitFloor
0000A08A 4A41                       		tst.w	d1
0000A08C 6A00                       		bpl.s	locret_955A
0000A08E D368 000C                  		add.w	d1,$C(a0)
0000A092 1143 0026                  		move.b	d3,$26(a0)
0000A096 317C 0000 0012             		move.w	#0,$12(a0)
0000A09C 5428 0024                  		addq.b	#2,$24(a0)
0000A0A0                            
0000A0A0                            locret_955A:
0000A0A0 4E75                       		rts	
0000A0A2                            ; ===========================================================================
0000A0A2                            
0000A0A2                            Obj1F_Action:				; XREF: Obj1F_Index
0000A0A2 7000                       		moveq	#0,d0
0000A0A4 1028 0025                  		move.b	$25(a0),d0
0000A0A8 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
0000A0AC 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
0000A0B0 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000A0B6 6100 0000                  		bsr.w	AnimateSprite
0000A0BA 6000 0000                  		bra.w	MarkObjGone
0000A0BE                            ; ===========================================================================
0000A0BE 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
0000A0C0 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
0000A0C2                            ; ===========================================================================
0000A0C2                            
0000A0C2                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
0000A0C2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0000A0C6 6A00                       		bpl.s	locret_95B6
0000A0C8 4A28 0001                  		tst.b	1(a0)
0000A0CC 6A00                       		bpl.s	Obj1F_Move
0000A0CE 0868 0001 0032             		bchg	#1,$32(a0)
0000A0D4 6600                       		bne.s	Obj1F_MakeFire
0000A0D6                            
0000A0D6                            Obj1F_Move:
0000A0D6 5428 0025                  		addq.b	#2,$25(a0)
0000A0DA 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
0000A0E0 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
0000A0E6 6100 0000                  		bsr.w	Obj1F_SetAni
0000A0EA 5600                       		addq.b	#3,d0
0000A0EC 1140 001C                  		move.b	d0,$1C(a0)
0000A0F0 0868 0000 0022             		bchg	#0,$22(a0)
0000A0F6 6600                       		bne.s	locret_95B6
0000A0F8 4468 0010                  		neg.w	$10(a0)		; change direction
0000A0FC                            
0000A0FC                            locret_95B6:
0000A0FC 4E75                       		rts	
0000A0FE                            ; ===========================================================================
0000A0FE                            
0000A0FE                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
0000A0FE 317C 003B 0030             		move.w	#$3B,$30(a0)
0000A104 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
0000A10A 6100 0000                  		bsr.w	SingleObjLoad
0000A10E 6600                       		bne.s	Obj1F_MakeFire2
0000A110 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
0000A114 137C 0006 0024             		move.b	#6,$24(a1)
0000A11A 3368 0008 0008             		move.w	8(a0),8(a1)
0000A120 0469 0010 0008             		subi.w	#$10,8(a1)
0000A126 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A12C 337C FF00 0010             		move.w	#-$100,$10(a1)
0000A132                            
0000A132                            Obj1F_MakeFire2:
0000A132 6100 0000                  		bsr.w	SingleObjLoad
0000A136 6600                       		bne.s	locret_9618
0000A138 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
0000A13C 137C 0006 0024             		move.b	#6,$24(a1)
0000A142 3368 0008 0008             		move.w	8(a0),8(a1)
0000A148 0669 0010 0008             		addi.w	#$10,8(a1)
0000A14E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A154 337C 0100 0010             		move.w	#$100,$10(a1)
0000A15A                            
0000A15A                            locret_9618:
0000A15A 4E75                       		rts	
0000A15C                            ; ===========================================================================
0000A15C                            
0000A15C                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
0000A15C 5368 0030                  		subq.w	#1,$30(a0)
0000A160 6B00                       		bmi.s	loc_966E
0000A162 6100 0000                  		bsr.w	SpeedToPos
0000A166 0868 0000 0032             		bchg	#0,$32(a0)
0000A16C 6600                       		bne.s	loc_9654
0000A16E 3628 0008                  		move.w	8(a0),d3
0000A172 0643 0010                  		addi.w	#$10,d3
0000A176 0828 0000 0022             		btst	#0,$22(a0)
0000A17C 6700                       		beq.s	loc_9640
0000A17E 0443 0020                  		subi.w	#$20,d3
0000A182                            
0000A182                            loc_9640:
0000A182 4EB9 0000 0000             		jsr	ObjHitFloor2
0000A188 0C41 FFF8                  		cmpi.w	#-8,d1
0000A18C 6D00                       		blt.s	loc_966E
0000A18E 0C41 000C                  		cmpi.w	#$C,d1
0000A192 6C00                       		bge.s	loc_966E
0000A194 4E75                       		rts	
0000A196                            ; ===========================================================================
0000A196                            
0000A196                            loc_9654:				; XREF: Obj1F_WalkOnFloor
0000A196 4EB9 0000 0000             		jsr	ObjHitFloor
0000A19C D368 000C                  		add.w	d1,$C(a0)
0000A1A0 1143 0026                  		move.b	d3,$26(a0)
0000A1A4 6100 0000                  		bsr.w	Obj1F_SetAni
0000A1A8 5600                       		addq.b	#3,d0
0000A1AA 1140 001C                  		move.b	d0,$1C(a0)
0000A1AE 4E75                       		rts	
0000A1B0                            ; ===========================================================================
0000A1B0                            
0000A1B0                            loc_966E:				; XREF: Obj1F_WalkOnFloor
0000A1B0 5528 0025                  		subq.b	#2,$25(a0)
0000A1B4 317C 003B 0030             		move.w	#59,$30(a0)
0000A1BA 317C 0000 0010             		move.w	#0,$10(a0)
0000A1C0 6100 0000                  		bsr.w	Obj1F_SetAni
0000A1C4 1140 001C                  		move.b	d0,$1C(a0)
0000A1C8 4E75                       		rts	
0000A1CA                            ; ---------------------------------------------------------------------------
0000A1CA                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000A1CA                            ; ---------------------------------------------------------------------------
0000A1CA                            
0000A1CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A1CA                            
0000A1CA                            
0000A1CA                            Obj1F_SetAni:				; XREF: loc_966E
0000A1CA 7000                       		moveq	#0,d0
0000A1CC 1628 0026                  		move.b	$26(a0),d3
0000A1D0 6B00                       		bmi.s	loc_96A4
0000A1D2 0C03 0006                  		cmpi.b	#6,d3
0000A1D6 6500                       		bcs.s	locret_96A2
0000A1D8 7001                       		moveq	#1,d0
0000A1DA 0828 0000 0022             		btst	#0,$22(a0)
0000A1E0 6600                       		bne.s	locret_96A2
0000A1E2 7002                       		moveq	#2,d0
0000A1E4                            
0000A1E4                            locret_96A2:
0000A1E4 4E75                       		rts	
0000A1E6                            ; ===========================================================================
0000A1E6                            
0000A1E6                            loc_96A4:				; XREF: Obj1F_SetAni
0000A1E6 0C03 00FA                  		cmpi.b	#-6,d3
0000A1EA 6200                       		bhi.s	locret_96B6
0000A1EC 7002                       		moveq	#2,d0
0000A1EE 0828 0000 0022             		btst	#0,$22(a0)
0000A1F4 6600                       		bne.s	locret_96B6
0000A1F6 7001                       		moveq	#1,d0
0000A1F8                            
0000A1F8                            locret_96B6:
0000A1F8 4E75                       		rts	
0000A1FA                            ; End of function Obj1F_SetAni
0000A1FA                            
0000A1FA                            ; ===========================================================================
0000A1FA                            
0000A1FA                            Obj1F_Delete:				; XREF: Obj1F_Index
0000A1FA 6100 0000                  		bsr.w	DeleteObject
0000A1FE 4E75                       		rts	
0000A200                            ; ===========================================================================
0000A200                            ; ---------------------------------------------------------------------------
0000A200                            ; Sub-object - missile that the	Crabmeat throws
0000A200                            ; ---------------------------------------------------------------------------
0000A200                            
0000A200                            Obj1F_BallMain:				; XREF: Obj1F_Index
0000A200 5428 0024                  		addq.b	#2,$24(a0)
0000A204 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000A20C 317C 0400 0002             		move.w	#$400,2(a0)
0000A212 117C 0004 0001             		move.b	#4,1(a0)
0000A218 117C 0003 0018             		move.b	#3,$18(a0)
0000A21E 117C 0087 0020             		move.b	#$87,$20(a0)
0000A224 117C 0008 0019             		move.b	#8,$19(a0)
0000A22A 317C FC00 0012             		move.w	#-$400,$12(a0)
0000A230 117C 0007 001C             		move.b	#7,$1C(a0)
0000A236                            
0000A236                            Obj1F_BallMove:				; XREF: Obj1F_Index
0000A236 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000A23C 6100 0000                  		bsr.w	AnimateSprite
0000A240 6100 0000                  		bsr.w	ObjectFall
0000A244 6100 0000                  		bsr.w	DisplaySprite
0000A248 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A24C 0640 00E0                  		addi.w	#$E0,d0
0000A250 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A254 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
0000A256 4E75                       		rts	
0000A258                            ; ===========================================================================
0000A258                            
0000A258                            Obj1F_Delete2:
0000A258 6000 0000                  		bra.w	DeleteObject
0000A25C                            ; ===========================================================================
0000A25C                            Ani_obj1F:
0000A25C                            	include "_anim\obj1F.asm"
0000A25C                            ; ---------------------------------------------------------------------------
0000A25C                            ; Animation script - Crabmeat enemy
0000A25C                            ; ---------------------------------------------------------------------------
0000A25C 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
0000A262 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
0000A268 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
0000A26C 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
0000A270 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
0000A274 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
0000A278 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
0000A27E 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
0000A284 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
0000A28A 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
0000A28E 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
0000A292                            		even
0000A292                            		even
0000A292                            
0000A292                            ; ---------------------------------------------------------------------------
0000A292                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000A292                            ; ---------------------------------------------------------------------------
0000A292                            Map_obj1F:
0000A292                            	include "_maps\obj1F.asm"
0000A292                            Map_1514:
0000A292 0000                       Map_1514_0: 	dc.w Map_1514_E-Map_1514
0000A294 0000                       Map_1514_2: 	dc.w Map_1514_1E-Map_1514
0000A296 0000                       Map_1514_4: 	dc.w Map_1514_2E-Map_1514
0000A298 0000                       Map_1514_6: 	dc.w Map_1514_3E-Map_1514
0000A29A 0000                       Map_1514_8: 	dc.w Map_1514_4E-Map_1514
0000A29C 0000                       Map_1514_A: 	dc.w Map_1514_5E-Map_1514
0000A29E 0000                       Map_1514_C: 	dc.w Map_1514_64-Map_1514
0000A2A0 03                         Map_1514_E: 	dc.b $3
0000A2A1 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A2A6 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A2AB F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A2B0 03                         Map_1514_1E: 	dc.b $3
0000A2B1 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A2B6 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A2BB F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A2C0 03                         Map_1514_2E: 	dc.b $3
0000A2C1 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A2C6 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A2CB F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A2D0 03                         Map_1514_3E: 	dc.b $3
0000A2D1 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A2D6 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A2DB F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A2E0 03                         Map_1514_4E: 	dc.b $3
0000A2E1 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A2E6 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A2EB F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A2F0 01                         Map_1514_5E: 	dc.b $1
0000A2F1 F805 0017 F8               	dc.b $F8, $5, $0, $17, $F8
0000A2F6 01                         Map_1514_64: 	dc.b $1
0000A2F7 F805 2017 F8               	dc.b $F8, $5, $20, $17, $F8
0000A2FC                            	even
0000A2FC                            	even
0000A2FC                            
0000A2FC                            ; ===========================================================================
0000A2FC                            ; ---------------------------------------------------------------------------
0000A2FC                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000A2FC                            ; ---------------------------------------------------------------------------
0000A2FC                            
0000A2FC                            Obj22:					; XREF: Obj_Index
0000A2FC 7000                       		moveq	#0,d0
0000A2FE 1028 0024                  		move.b	$24(a0),d0
0000A302 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0000A306 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
0000A30A                            ; ===========================================================================
0000A30A 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
0000A30C 0000                       		dc.w Obj22_Action-Obj22_Index
0000A30E 0000                       		dc.w Obj22_Delete-Obj22_Index
0000A310                            ; ===========================================================================
0000A310                            
0000A310                            Obj22_Main:				; XREF: Obj22_Index
0000A310 5428 0024                  		addq.b	#2,$24(a0)
0000A314 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
0000A31C 317C 0444 0002             		move.w	#$444,2(a0)
0000A322 117C 0004 0001             		move.b	#4,1(a0)
0000A328 117C 0003 0018             		move.b	#3,$18(a0)
0000A32E 117C 0008 0020             		move.b	#8,$20(a0)
0000A334 117C 0018 0019             		move.b	#$18,$19(a0)
0000A33A                            
0000A33A                            Obj22_Action:				; XREF: Obj22_Index
0000A33A 7000                       		moveq	#0,d0
0000A33C 1028 0025                  		move.b	$25(a0),d0
0000A340 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000A344 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0000A348 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000A34E 6100 0000                  		bsr.w	AnimateSprite
0000A352 6000 0000                  		bra.w	MarkObjGone
0000A356                            ; ===========================================================================
0000A356 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000A358 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
0000A35A                            ; ===========================================================================
0000A35A                            
0000A35A                            Obj22_Move:				; XREF: Obj22_Index2
0000A35A 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A35E 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000A360 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000A366 6600                       		bne.s	Obj22_Fire	; if yes, branch
0000A368 5428 0025                  		addq.b	#2,$25(a0)
0000A36C 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000A372 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000A378 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000A37E 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A384 6600                       		bne.s	locret_986C	; if not, branch
0000A386 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000A38A                            
0000A38A                            locret_986C:
0000A38A 4E75                       		rts	
0000A38C                            ; ===========================================================================
0000A38C                            
0000A38C                            Obj22_Fire:				; XREF: Obj22_Move
0000A38C 6100 0000                  		bsr.w	SingleObjLoad
0000A390 6600                       		bne.s	locret_98D0
0000A392 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000A396 3368 0008 0008             		move.w	8(a0),8(a1)
0000A39C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A3A2 0669 001C 000C             		addi.w	#$1C,$C(a1)
0000A3A8 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000A3AE 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
0000A3B4 303C 0018                  		move.w	#$18,d0
0000A3B8 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A3BE 6600                       		bne.s	loc_98AA	; if not, branch
0000A3C0 4440                       		neg.w	d0
0000A3C2 4469 0010                  		neg.w	$10(a1)		; move missile to the left
0000A3C6                            
0000A3C6                            loc_98AA:
0000A3C6 D169 0008                  		add.w	d0,8(a1)
0000A3CA 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000A3D0 337C 000E 0032             		move.w	#$E,$32(a1)
0000A3D6 2348 003C                  		move.l	a0,$3C(a1)
0000A3DA 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000A3E0 317C 003B 0032             		move.w	#$3B,$32(a0)
0000A3E6 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000A3EC                            
0000A3EC                            locret_98D0:
0000A3EC 4E75                       		rts	
0000A3EE                            ; ===========================================================================
0000A3EE                            
0000A3EE                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000A3EE 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A3F2 6B00                       		bmi.s	Obj22_ChgDir
0000A3F4 6100 0000                  		bsr.w	SpeedToPos
0000A3F8 4A28 0034                  		tst.b	$34(a0)
0000A3FC 6600                       		bne.s	locret_992A
0000A3FE 3038 D008                  		move.w	($FFFFD008).w,d0
0000A402 9068 0008                  		sub.w	8(a0),d0
0000A406 6A00                       		bpl.s	Obj22_SetNrSonic
0000A408 4440                       		neg.w	d0
0000A40A                            
0000A40A                            Obj22_SetNrSonic:
0000A40A 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000A40E 6400                       		bcc.s	locret_992A	; if not, branch
0000A410 4A28 0001                  		tst.b	1(a0)
0000A414 6A00                       		bpl.s	locret_992A
0000A416 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000A41C 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000A422 6000                       		bra.s	Obj22_Stop
0000A424                            ; ===========================================================================
0000A424                            
0000A424                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000A424 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000A42A 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000A430 317C 003B 0032             		move.w	#59,$32(a0)
0000A436                            
0000A436                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000A436 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000A43A 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000A440 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000A446                            
0000A446                            locret_992A:
0000A446 4E75                       		rts	
0000A448                            ; ===========================================================================
0000A448                            
0000A448                            Obj22_Delete:				; XREF: Obj22_Index
0000A448 6100 0000                  		bsr.w	DeleteObject
0000A44C 4E75                       		rts	
0000A44E                            ; ===========================================================================
0000A44E                            ; ---------------------------------------------------------------------------
0000A44E                            ; Object 23 - missile that Buzz	Bomber throws
0000A44E                            ; ---------------------------------------------------------------------------
0000A44E                            
0000A44E                            Obj23:					; XREF: Obj_Index
0000A44E 7000                       		moveq	#0,d0
0000A450 1028 0024                  		move.b	$24(a0),d0
0000A454 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000A458 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000A45C                            ; ===========================================================================
0000A45C 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000A45E 0000                       		dc.w Obj23_Animate-Obj23_Index
0000A460 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000A462 0000                       		dc.w Obj23_Delete-Obj23_Index
0000A464 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000A466                            ; ===========================================================================
0000A466                            
0000A466                            Obj23_Main:				; XREF: Obj23_Index
0000A466 5368 0032                  		subq.w	#1,$32(a0)
0000A46A 6A00                       		bpl.s	Obj23_ChkCancel
0000A46C 5428 0024                  		addq.b	#2,$24(a0)
0000A470 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000A478 317C 2444 0002             		move.w	#$2444,2(a0)
0000A47E 117C 0004 0001             		move.b	#4,1(a0)
0000A484 117C 0003 0018             		move.b	#3,$18(a0)
0000A48A 117C 0008 0019             		move.b	#8,$19(a0)
0000A490 0228 0003 0022             		andi.b	#3,$22(a0)
0000A496 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000A49A 6700                       		beq.s	Obj23_Animate	; if not, branch
0000A49C 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000A4A2 117C 0087 0020             		move.b	#$87,$20(a0)
0000A4A8 117C 0001 001C             		move.b	#1,$1C(a0)
0000A4AE 6000                       		bra.s	Obj23_Animate2
0000A4B0                            ; ===========================================================================
0000A4B0                            
0000A4B0                            Obj23_Animate:				; XREF: Obj23_Index
0000A4B0 6100                       		bsr.s	Obj23_ChkCancel
0000A4B2 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A4B8 6100 0000                  		bsr.w	AnimateSprite
0000A4BC 6000 0000                  		bra.w	DisplaySprite
0000A4C0                            ; ---------------------------------------------------------------------------
0000A4C0                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000A4C0                            ; destroyed, and if it has, then cancel	the missile
0000A4C0                            ; ---------------------------------------------------------------------------
0000A4C0                            
0000A4C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A4C0                            
0000A4C0                            
0000A4C0                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000A4C0 2268 003C                  		movea.l	$3C(a0),a1
0000A4C4 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000A4C8 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000A4CA 4E75                       		rts	
0000A4CC                            ; End of function Obj23_ChkCancel
0000A4CC                            
0000A4CC                            ; ===========================================================================
0000A4CC                            
0000A4CC                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000A4CC 0828 0007 0022             		btst	#7,$22(a0)
0000A4D2 6600                       		bne.s	Obj23_Explode
0000A4D4 117C 0087 0020             		move.b	#$87,$20(a0)
0000A4DA 117C 0001 001C             		move.b	#1,$1C(a0)
0000A4E0 6100 0000                  		bsr.w	SpeedToPos
0000A4E4 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A4EA 6100 0000                  		bsr.w	AnimateSprite
0000A4EE 6100 0000                  		bsr.w	DisplaySprite
0000A4F2 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A4F6 0640 00E0                  		addi.w	#$E0,d0
0000A4FA B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A4FE 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000A500 4E75                       		rts	
0000A502                            ; ===========================================================================
0000A502                            
0000A502                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000A502 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000A506 117C 0000 0024             		move.b	#0,$24(a0)
0000A50C 6000 F2E0                  		bra.w	Obj24
0000A510                            ; ===========================================================================
0000A510                            
0000A510                            Obj23_Delete:				; XREF: Obj23_Index
0000A510 6100 0000                  		bsr.w	DeleteObject
0000A514 4E75                       		rts	
0000A516                            ; ===========================================================================
0000A516                            
0000A516                            Obj23_FromNewt:				; XREF: Obj23_Index
0000A516 4A28 0001                  		tst.b	1(a0)
0000A51A 6AF4                       		bpl.s	Obj23_Delete
0000A51C 6100 0000                  		bsr.w	SpeedToPos
0000A520                            
0000A520                            Obj23_Animate2:				; XREF: Obj23_Main
0000A520 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A526 6100 0000                  		bsr.w	AnimateSprite
0000A52A 6100 0000                  		bsr.w	DisplaySprite
0000A52E 4E75                       		rts	
0000A530                            ; ===========================================================================
0000A530                            Ani_obj22:
0000A530                            	include "_anim\obj22.asm"
0000A530                            ; ---------------------------------------------------------------------------
0000A530                            ; Animation script - Buzz Bomber enemy
0000A530                            ; ---------------------------------------------------------------------------
0000A530 0000                       		dc.w byte_9A1E-Ani_obj22
0000A532 0000                       		dc.w byte_9A22-Ani_obj22
0000A534 0000                       		dc.w byte_9A26-Ani_obj22
0000A536 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000A53A 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000A53E 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000A542                            		even
0000A542                            		even
0000A542                            
0000A542                            Ani_obj23:
0000A542                            	include "_anim\obj23.asm"
0000A542                            ; ---------------------------------------------------------------------------
0000A542                            ; Animation script - missile that Buzz Bomber throws
0000A542                            ; ---------------------------------------------------------------------------
0000A542 0000                       		dc.w byte_9A2E-Ani_obj23
0000A544 0000                       		dc.w byte_9A32-Ani_obj23
0000A546 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000A54A 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000A54E                            		even
0000A54E                            		even
0000A54E                            
0000A54E                            ; ---------------------------------------------------------------------------
0000A54E                            ; Sprite mappings - Buzz Bomber	enemy
0000A54E                            ; ---------------------------------------------------------------------------
0000A54E                            Map_obj22:
0000A54E                            	include "_maps\obj22.asm"
0000A54E                            Map_e97a:
0000A54E 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
0000A550 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
0000A552 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
0000A554 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
0000A556 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
0000A558 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
0000A55A 06                         Map_e97a_C: 	dc.b $6
0000A55B F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A560 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A565 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A56A 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A56F F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A574 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A579 06                         Map_e97a_2B: 	dc.b $6
0000A57A F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A57F F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A584 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A589 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A58E F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A593 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A598 07                         Map_e97a_4A: 	dc.b $7
0000A599 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
0000A59E F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A5A3 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A5A8 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A5AD 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A5B2 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A5B7 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A5BC 07                         Map_e97a_6E: 	dc.b $7
0000A5BD 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
0000A5C2 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A5C7 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A5CC 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A5D1 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A5D6 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A5DB F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A5E0 06                         Map_e97a_92: 	dc.b $6
0000A5E1 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A5E6 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A5EB 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A5F0 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A5F5 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A5FA F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A5FF 04                         Map_e97a_B1: 	dc.b $4
0000A600 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A605 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A60A 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A60F 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A614                            	even
0000A614                            	even
0000A614                            
0000A614                            ; ---------------------------------------------------------------------------
0000A614                            ; Sprite mappings - missile that Buzz Bomber throws
0000A614                            ; ---------------------------------------------------------------------------
0000A614                            Map_obj23:
0000A614                            	include "_maps\obj23.asm"
0000A614                            ; ---------------------------------------------------------------------------
0000A614                            ; Sprite mappings - missile that Buzz Bomber throws
0000A614                            ; ---------------------------------------------------------------------------
0000A614 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000A618 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000A61C 01                         byte_9B0E:	dc.b 1
0000A61D F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000A622 01                         byte_9B14:	dc.b 1
0000A623 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000A628 01                         byte_9B1A:	dc.b 1
0000A629 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000A62E 01                         byte_9B20:	dc.b 1
0000A62F F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000A634                            		even
0000A634                            		even
0000A634                            
0000A634                            ; ===========================================================================
0000A634                            ; ---------------------------------------------------------------------------
0000A634                            ; Object 25 - rings
0000A634                            ; ---------------------------------------------------------------------------
0000A634                            
0000A634                            Obj25:					; XREF: Obj_Index
0000A634 7000                       		moveq	#0,d0
0000A636 1028 0024                  		move.b	$24(a0),d0
0000A63A 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000A63E 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000A642                            ; ===========================================================================
0000A642 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000A644 0000                       		dc.w Obj25_Animate-Obj25_Index
0000A646 0000                       		dc.w Obj25_Collect-Obj25_Index
0000A648 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000A64A 0000                       		dc.w Obj25_Delete-Obj25_Index
0000A64C                            ; ---------------------------------------------------------------------------
0000A64C                            ; Distances between rings (format: horizontal, vertical)
0000A64C                            ; ---------------------------------------------------------------------------
0000A64C 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000A64E 1800                       		dc.b $18, 0		; horizontal normal
0000A650 2000                       		dc.b $20, 0		; horizontal wide
0000A652 0010                       		dc.b 0,	$10		; vertical tight
0000A654 0018                       		dc.b 0,	$18		; vertical normal
0000A656 0020                       		dc.b 0,	$20		; vertical wide
0000A658 1010                       		dc.b $10, $10		; diagonal
0000A65A 1818                       		dc.b $18, $18
0000A65C 2020                       		dc.b $20, $20
0000A65E F010                       		dc.b $F0, $10
0000A660 E818                       		dc.b $E8, $18
0000A662 E020                       		dc.b $E0, $20
0000A664 1008                       		dc.b $10, 8
0000A666 1810                       		dc.b $18, $10
0000A668 F008                       		dc.b $F0, 8
0000A66A E810                       		dc.b $E8, $10
0000A66C                            ; ===========================================================================
0000A66C                            
0000A66C                            Obj25_Main:				; XREF: Obj25_Index
0000A66C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A670 7000                       		moveq	#0,d0
0000A672 1028 0023                  		move.b	$23(a0),d0
0000A676 45F2 0002                  		lea	2(a2,d0.w),a2
0000A67A 1812                       		move.b	(a2),d4
0000A67C 1228 0028                  		move.b	$28(a0),d1
0000A680 1001                       		move.b	d1,d0
0000A682 0241 0007                  		andi.w	#7,d1
0000A686 0C41 0007                  		cmpi.w	#7,d1
0000A68A 6600                       		bne.s	loc_9B80
0000A68C 7206                       		moveq	#6,d1
0000A68E                            
0000A68E                            loc_9B80:
0000A68E 4841                       		swap	d1
0000A690 323C 0000                  		move.w	#0,d1
0000A694 E808                       		lsr.b	#4,d0
0000A696 D040                       		add.w	d0,d0
0000A698 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000A69C 4885                       		ext.w	d5
0000A69E 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000A6A2 4886                       		ext.w	d6
0000A6A4 2248                       		movea.l	a0,a1
0000A6A6 3428 0008                  		move.w	8(a0),d2
0000A6AA 3628 000C                  		move.w	$C(a0),d3
0000A6AE E20C                       		lsr.b	#1,d4
0000A6B0 6500                       		bcs.s	loc_9C02
0000A6B2 0892 0007                  		bclr	#7,(a2)
0000A6B6 6000                       		bra.s	loc_9BBA
0000A6B8                            ; ===========================================================================
0000A6B8                            
0000A6B8                            Obj25_MakeRings:
0000A6B8 4841                       		swap	d1
0000A6BA E20C                       		lsr.b	#1,d4
0000A6BC 6500                       		bcs.s	loc_9C02
0000A6BE 0892 0007                  		bclr	#7,(a2)
0000A6C2 6100 0000                  		bsr.w	SingleObjLoad
0000A6C6 6600                       		bne.s	loc_9C0E
0000A6C8                            
0000A6C8                            loc_9BBA:				; XREF: Obj25_Main
0000A6C8 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A6CC 5429 0024                  		addq.b	#2,$24(a1)
0000A6D0 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A6D4 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A6DA 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A6DE 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A6E6 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A6EC 137C 0004 0001             		move.b	#4,1(a1)
0000A6F2 137C 0002 0018             		move.b	#2,$18(a1)
0000A6F8 137C 0047 0020             		move.b	#$47,$20(a1)
0000A6FE 137C 0008 0019             		move.b	#8,$19(a1)
0000A704 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A70A 1341 0034                  		move.b	d1,$34(a1)
0000A70E                            
0000A70E                            loc_9C02:
0000A70E 5241                       		addq.w	#1,d1
0000A710 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A712 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A714 4841                       		swap	d1
0000A716 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A71A                            
0000A71A                            loc_9C0E:
0000A71A 0812 0000                  		btst	#0,(a2)
0000A71E 6600 0000                  		bne.w	DeleteObject
0000A722                            
0000A722                            Obj25_Animate:				; XREF: Obj25_Index
0000A722 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A728 6100 0000                  		bsr.w	DisplaySprite
0000A72C 3028 0032                  		move.w	$32(a0),d0
0000A730 0240 FF80                  		andi.w	#$FF80,d0
0000A734 3238 F700                  		move.w	($FFFFF700).w,d1
0000A738 0441 0080                  		subi.w	#$80,d1
0000A73C 0241 FF80                  		andi.w	#$FF80,d1
0000A740 9041                       		sub.w	d1,d0
0000A742 0C40 0280                  		cmpi.w	#$280,d0
0000A746 6200                       		bhi.s	Obj25_Delete
0000A748 4E75                       		rts	
0000A74A                            ; ===========================================================================
0000A74A                            
0000A74A                            Obj25_Collect:				; XREF: Obj25_Index
0000A74A 5428 0024                  		addq.b	#2,$24(a0)
0000A74E 117C 0000 0020             		move.b	#0,$20(a0)
0000A754 117C 0001 0018             		move.b	#1,$18(a0)
0000A75A 6100 0000                  		bsr.w	CollectRing
0000A75E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A762 7000                       		moveq	#0,d0
0000A764 1028 0023                  		move.b	$23(a0),d0
0000A768 1228 0034                  		move.b	$34(a0),d1
0000A76C 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A770                            
0000A770                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A770 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A776 6100 0000                  		bsr.w	AnimateSprite
0000A77A 6000 0000                  		bra.w	DisplaySprite
0000A77E                            ; ===========================================================================
0000A77E                            
0000A77E                            Obj25_Delete:				; XREF: Obj25_Index
0000A77E 6000 0000                  		bra.w	DeleteObject
0000A782                            
0000A782                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A782                            
0000A782                            
0000A782                            CollectRing:				; XREF: Obj25_Collect
0000A782 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A786 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A78C 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A790 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A796 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A798 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A79E 6700                       		beq.s	loc_9CA4
0000A7A0 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A7A6 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A7A8 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A7AE 6600                       		bne.s	Obj25_PlaySnd
0000A7B0                            
0000A7B0                            loc_9CA4:
0000A7B0 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A7B4 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A7B8 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A7BC                            
0000A7BC                            Obj25_PlaySnd:
0000A7BC 4EF9 0000 15E6             		jmp	(PlaySound_Special).l
0000A7C2                            ; End of function CollectRing
0000A7C2                            
0000A7C2                            ; ===========================================================================
0000A7C2                            ; ---------------------------------------------------------------------------
0000A7C2                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A7C2                            ; ---------------------------------------------------------------------------
0000A7C2                            
0000A7C2                            Obj37:					; XREF: Obj_Index
0000A7C2 7000                       		moveq	#0,d0
0000A7C4 1028 0024                  		move.b	$24(a0),d0
0000A7C8 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A7CC 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A7D0                            ; ===========================================================================
0000A7D0 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A7D2 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A7D4 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A7D6 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A7D8 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A7DA                            ; ===========================================================================
0000A7DA                            
0000A7DA                            Obj37_CountRings:			; XREF: Obj37_Index
0000A7DA 2248                       		movea.l	a0,a1
0000A7DC 7A00                       		moveq	#0,d5
0000A7DE 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A7E2 7020                       		moveq	#32,d0
0000A7E4 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A7E6 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A7E8 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A7EA                            
0000A7EA                            loc_9CDE:
0000A7EA 5345                       		subq.w	#1,d5
0000A7EC 383C 0288                  		move.w	#$288,d4
0000A7F0 6000                       		bra.s	Obj37_MakeRings
0000A7F2                            ; ===========================================================================
0000A7F2                            
0000A7F2                            Obj37_Loop:
0000A7F2 6100 0000                  		bsr.w	SingleObjLoad
0000A7F6 6600 0000                  		bne.w	Obj37_ResetCounter
0000A7FA                            
0000A7FA                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A7FA 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A7FE 5429 0024                  		addq.b	#2,$24(a1)
0000A802 137C 0008 0016             		move.b	#8,$16(a1)
0000A808 137C 0008 0017             		move.b	#8,$17(a1)
0000A80E 3368 0008 0008             		move.w	8(a0),8(a1)
0000A814 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A81A 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A822 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A828 137C 0004 0001             		move.b	#4,1(a1)
0000A82E 137C 0003 0018             		move.b	#3,$18(a1)
0000A834 137C 0047 0020             		move.b	#$47,$20(a1)
0000A83A 137C 0008 0019             		move.b	#8,$19(a1)
0000A840 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A846 4A44                       		tst.w	d4
0000A848 6B00                       		bmi.s	loc_9D62
0000A84A 3004                       		move.w	d4,d0
0000A84C 6100 8532                  		bsr.w	CalcSine
0000A850 3404                       		move.w	d4,d2
0000A852 E04A                       		lsr.w	#8,d2
0000A854 E560                       		asl.w	d2,d0
0000A856 E561                       		asl.w	d2,d1
0000A858 3400                       		move.w	d0,d2
0000A85A 3601                       		move.w	d1,d3
0000A85C 0604 0010                  		addi.b	#$10,d4
0000A860 6400                       		bcc.s	loc_9D62
0000A862 0444 0080                  		subi.w	#$80,d4
0000A866 6400                       		bcc.s	loc_9D62
0000A868 383C 0288                  		move.w	#$288,d4
0000A86C                            
0000A86C                            loc_9D62:
0000A86C 3342 0010                  		move.w	d2,$10(a1)
0000A870 3343 0012                  		move.w	d3,$12(a1)
0000A874 4442                       		neg.w	d2
0000A876 4444                       		neg.w	d4
0000A878 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A87C                            
0000A87C                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A87C 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A882 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A888 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A88E 303C 00C6                  		move.w	#$C6,d0
0000A892 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A898                            
0000A898                            Obj37_Bounce:				; XREF: Obj37_Index
0000A898 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A89E 7218                       		moveq	#$18,d1
0000A8A0 4EB9 0000 0000             		jsr	ObjectFallCustom
0000A8A6 4A68 0012                  		tst.w	$12(a0)
0000A8AA 6B00                       		bmi.s	Obj37_ChkDel
0000A8AC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A8B0 D007                       		add.b	d7,d0
0000A8B2 0200 0003                  		andi.b	#3,d0
0000A8B6 6600                       		bne.s	Obj37_ChkDel
0000A8B8 4EB9 0000 0000             		jsr	ObjHitFloor
0000A8BE 4A41                       		tst.w	d1
0000A8C0 6A00                       		bpl.s	Obj37_ChkDel
0000A8C2 D368 000C                  		add.w	d1,$C(a0)
0000A8C6 3028 0012                  		move.w	$12(a0),d0
0000A8CA E440                       		asr.w	#2,d0
0000A8CC 9168 0012                  		sub.w	d0,$12(a0)
0000A8D0 4468 0012                  		neg.w	$12(a0)
0000A8D4                            
0000A8D4                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A8D4 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A8D8 6700                       		beq.s	Obj37_Delete
0000A8DA 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A8DE 0640 00E0                  		addi.w	#$E0,d0
0000A8E2 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A8E6 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A8E8 6000 0000                  		bra.w	DisplaySprite
0000A8EC                            ; ===========================================================================
0000A8EC                            
0000A8EC                            Obj37_Collect:				; XREF: Obj37_Index
0000A8EC 5428 0024                  		addq.b	#2,$24(a0)
0000A8F0 117C 0000 0020             		move.b	#0,$20(a0)
0000A8F6 117C 0001 0018             		move.b	#1,$18(a0)
0000A8FC 6100 FE84                  		bsr.w	CollectRing
0000A900                            
0000A900                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A900 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A906 6100 0000                  		bsr.w	AnimateSprite
0000A90A 6000 0000                  		bra.w	DisplaySprite
0000A90E                            ; ===========================================================================
0000A90E                            
0000A90E                            Obj37_Delete:				; XREF: Obj37_Index
0000A90E 6000 0000                  		bra.w	DeleteObject
0000A912                            ; ===========================================================================
0000A912                            ; ---------------------------------------------------------------------------
0000A912                            ; Object 4B - giant ring for entry to special stage
0000A912                            ; ---------------------------------------------------------------------------
0000A912                            
0000A912                            Obj4B:					; XREF: Obj_Index
0000A912 7000                       		moveq	#0,d0
0000A914 1028 0024                  		move.b	$24(a0),d0
0000A918 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A91C 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A920                            ; ===========================================================================
0000A920 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A922 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A924 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A926 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A928                            ; ===========================================================================
0000A928                            
0000A928                            Obj4B_Main:				; XREF: Obj4B_Index
0000A928 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A930 317C 2400 0002             		move.w	#$2400,2(a0)
0000A936 0028 0004 0001             		ori.b	#4,1(a0)
0000A93C 117C 0040 0019             		move.b	#$40,$19(a0)
0000A942 4A28 0001                  		tst.b	1(a0)
0000A946 6A00                       		bpl.s	Obj4B_Animate
0000A948 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A94E 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A952 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A958 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A95A 4E75                       		rts	
0000A95C                            ; ===========================================================================
0000A95C                            
0000A95C                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A95C 5428 0024                  		addq.b	#2,$24(a0)
0000A960 117C 0002 0018             		move.b	#2,$18(a0)
0000A966 117C 0052 0020             		move.b	#$52,$20(a0)
0000A96C 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A972                            
0000A972                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A972 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A978 3028 0008                  		move.w	8(a0),d0
0000A97C 0240 FF80                  		andi.w	#$FF80,d0
0000A980 3238 F700                  		move.w	($FFFFF700).w,d1
0000A984 0441 0080                  		subi.w	#$80,d1
0000A988 0241 FF80                  		andi.w	#$FF80,d1
0000A98C 9041                       		sub.w	d1,d0
0000A98E 0C40 0280                  		cmpi.w	#$280,d0
0000A992 6200 0000                  		bhi.w	DeleteObject
0000A996 6000 0000                  		bra.w	DisplaySprite
0000A99A                            ; ===========================================================================
0000A99A                            
0000A99A                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A99A 5528 0024                  		subq.b	#2,$24(a0)
0000A99E 117C 0000 0020             		move.b	#0,$20(a0)
0000A9A4 6100 0000                  		bsr.w	SingleObjLoad
0000A9A8 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A9AC 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A9B0 3368 0008 0008             		move.w	8(a0),8(a1)
0000A9B6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A9BC 2348 003C                  		move.l	a0,$3C(a1)
0000A9C0 3038 D008                  		move.w	($FFFFD008).w,d0
0000A9C4 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A9C8 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A9CA 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A9D0                            
0000A9D0                            Obj4B_PlaySnd:
0000A9D0 303C 00C3                  		move.w	#$C3,d0
0000A9D4 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A9DA 6096                       		bra.s	Obj4B_Animate
0000A9DC                            ; ===========================================================================
0000A9DC                            
0000A9DC                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A9DC 6000 0000                  		bra.w	DeleteObject
0000A9E0                            ; ===========================================================================
0000A9E0                            ; ---------------------------------------------------------------------------
0000A9E0                            ; Object 7C - flash effect when	you collect the	giant ring
0000A9E0                            ; ---------------------------------------------------------------------------
0000A9E0                            
0000A9E0                            Obj7C:					; XREF: Obj_Index
0000A9E0 7000                       		moveq	#0,d0
0000A9E2 1028 0024                  		move.b	$24(a0),d0
0000A9E6 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A9EA 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A9EE                            ; ===========================================================================
0000A9EE 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A9F0 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A9F2 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A9F4                            ; ===========================================================================
0000A9F4                            
0000A9F4                            Obj7C_Main:				; XREF: Obj7C_Index
0000A9F4 5428 0024                  		addq.b	#2,$24(a0)
0000A9F8 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000AA00 317C 2462 0002             		move.w	#$2462,2(a0)
0000AA06 0028 0004 0001             		ori.b	#4,1(a0)
0000AA0C 117C 0000 0018             		move.b	#0,$18(a0)
0000AA12 117C 0020 0019             		move.b	#$20,$19(a0)
0000AA18 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000AA1E                            
0000AA1E                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000AA1E 6100                       		bsr.s	Obj7C_Collect
0000AA20 3028 0008                  		move.w	8(a0),d0
0000AA24 0240 FF80                  		andi.w	#$FF80,d0
0000AA28 3238 F700                  		move.w	($FFFFF700).w,d1
0000AA2C 0441 0080                  		subi.w	#$80,d1
0000AA30 0241 FF80                  		andi.w	#$FF80,d1
0000AA34 9041                       		sub.w	d1,d0
0000AA36 0C40 0280                  		cmpi.w	#$280,d0
0000AA3A 6200 0000                  		bhi.w	DeleteObject
0000AA3E 6000 0000                  		bra.w	DisplaySprite
0000AA42                            
0000AA42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AA42                            
0000AA42                            
0000AA42                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000AA42 5328 001E                  		subq.b	#1,$1E(a0)
0000AA46 6A00                       		bpl.s	locret_9F76
0000AA48 117C 0001 001E             		move.b	#1,$1E(a0)
0000AA4E 5228 001A                  		addq.b	#1,$1A(a0)
0000AA52 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000AA58 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000AA5A 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000AA60 6600                       		bne.s	locret_9F76	; if not, branch
0000AA62 2268 003C                  		movea.l	$3C(a0),a1
0000AA66 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000AA6C 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000AA72 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000AA78 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000AA7C 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000AA80                            
0000AA80                            locret_9F76:
0000AA80 4E75                       		rts	
0000AA82                            ; ===========================================================================
0000AA82                            
0000AA82                            Obj7C_End:				; XREF: Obj7C_Collect
0000AA82 5428 0024                  		addq.b	#2,$24(a0)
0000AA86 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000AA8C 588F                       		addq.l	#4,sp
0000AA8E 4E75                       		rts	
0000AA90                            ; End of function Obj7C_Collect
0000AA90                            
0000AA90                            ; ===========================================================================
0000AA90                            
0000AA90                            Obj7C_Delete:				; XREF: Obj7C_Index
0000AA90 6000 0000                  		bra.w	DeleteObject
0000AA94                            ; ===========================================================================
0000AA94                            Ani_obj25:
0000AA94                            	include "_anim\obj25.asm"
0000AA94                            ; ---------------------------------------------------------------------------
0000AA94                            ; Animation script - ring
0000AA94                            ; ---------------------------------------------------------------------------
0000AA94 0000                       		dc.w byte_9F8C-Ani_obj25
0000AA96 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000AA9C                            		even
0000AA9C                            		even
0000AA9C                            
0000AA9C                            ; ---------------------------------------------------------------------------
0000AA9C                            ; Sprite mappings - rings
0000AA9C                            ; ---------------------------------------------------------------------------
0000AA9C                            Map_obj25:
0000AA9C                            	include "_maps\obj25.asm"
0000AA9C                            ; ---------------------------------------------------------------------------
0000AA9C                            ; Sprite mappings - rings
0000AA9C                            ; ---------------------------------------------------------------------------
0000AA9C 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000AAA0 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000AAA4 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000AAA8 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000AAAC 01                         byte_9FA2:	dc.b 1
0000AAAD F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000AAB2 01                         byte_9FA8:	dc.b 1
0000AAB3 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000AAB8 01                         byte_9FAE:	dc.b 1
0000AAB9 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000AABE 01                         byte_9FB4:	dc.b 1
0000AABF F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000AAC4 01                         byte_9FBA:	dc.b 1
0000AAC5 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000AACA 01                         byte_9FC0:	dc.b 1
0000AACB F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000AAD0 01                         byte_9FC6:	dc.b 1
0000AAD1 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000AAD6 01                         byte_9FCC:	dc.b 1
0000AAD7 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000AADC                            		even
0000AADC                            		even
0000AADC                            
0000AADC                            ; ---------------------------------------------------------------------------
0000AADC                            ; Sprite mappings - giant ring
0000AADC                            ; ---------------------------------------------------------------------------
0000AADC                            Map_obj4B:
0000AADC                            	include "_maps\obj4B.asm"
0000AADC                            ; ---------------------------------------------------------------------------
0000AADC                            ; Sprite mappings - giant ring
0000AADC                            ; ---------------------------------------------------------------------------
0000AADC 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000AAE0 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000AAE4 0A                         byte_9FDA:	dc.b $A
0000AAE5 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000AAEA E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000AAEF E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000AAF4 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000AAF9 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000AAFE F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000AB03 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000AB08 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000AB0D 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000AB12 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000AB17 08                         byte_A00D:	dc.b 8
0000AB18 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000AB1D E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000AB22 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000AB27 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000AB2C F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000AB31 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000AB36 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000AB3B 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000AB40 04                         byte_A036:	dc.b 4
0000AB41 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000AB46 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000AB4B 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000AB50 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000AB55 08                         byte_A04B:	dc.b 8
0000AB56 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000AB5B E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000AB60 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000AB65 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000AB6A F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000AB6F 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000AB74 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000AB79 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000AB7E                            		even
0000AB7E                            		even
0000AB7E                            
0000AB7E                            ; ---------------------------------------------------------------------------
0000AB7E                            ; Sprite mappings - flash effect when you collect the giant ring
0000AB7E                            ; ---------------------------------------------------------------------------
0000AB7E                            Map_obj7C:
0000AB7E                            	include "_maps\obj7C.asm"
0000AB7E                            ; ---------------------------------------------------------------------------
0000AB7E                            ; Sprite mappings - flash effect when you collect the giant ring
0000AB7E                            ; ---------------------------------------------------------------------------
0000AB7E 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000AB82 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000AB86 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000AB8A 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000AB8E 02                         byte_A084:	dc.b 2
0000AB8F E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000AB94 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000AB99 04                         byte_A08F:	dc.b 4
0000AB9A E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000AB9F E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000ABA4 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000ABA9 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000ABAE 04                         byte_A0A4:	dc.b 4
0000ABAF E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000ABB4 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000ABB9 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000ABBE 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000ABC3 04                         byte_A0B9:	dc.b 4
0000ABC4 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000ABC9 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000ABCE 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000ABD3 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000ABD8 04                         byte_A0CE:	dc.b 4
0000ABD9 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000ABDE E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000ABE3 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000ABE8 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000ABED 04                         byte_A0E3:	dc.b 4
0000ABEE E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000ABF3 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000ABF8 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000ABFD 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000AC02 02                         byte_A0F8:	dc.b 2
0000AC03 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000AC08 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000AC0D 04                         byte_A103:	dc.b 4
0000AC0E E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000AC13 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000AC18 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000AC1D 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000AC22                            		even
0000AC22                            		even
0000AC22                            
0000AC22                            ; ===========================================================================
0000AC22                            ; ---------------------------------------------------------------------------
0000AC22                            ; Object 26 - monitors
0000AC22                            ; ---------------------------------------------------------------------------
0000AC22                            
0000AC22                            Obj26:					; XREF: Obj_Index
0000AC22 7000                       		moveq	#0,d0
0000AC24 1028 0024                  		move.b	$24(a0),d0
0000AC28 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000AC2C 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000AC30                            ; ===========================================================================
0000AC30 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000AC32 0000                       		dc.w Obj26_Solid-Obj26_Index
0000AC34 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000AC36 0000                       		dc.w Obj26_Animate-Obj26_Index
0000AC38 0000                       		dc.w Obj26_Display-Obj26_Index
0000AC3A                            ; ===========================================================================
0000AC3A                            
0000AC3A                            Obj26_Main:				; XREF: Obj26_Index
0000AC3A 5428 0024                  		addq.b	#2,$24(a0)
0000AC3E 117C 000E 0016             		move.b	#$E,$16(a0)
0000AC44 117C 000E 0017             		move.b	#$E,$17(a0)
0000AC4A 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000AC52 317C 0680 0002             		move.w	#$680,2(a0)
0000AC58 117C 0004 0001             		move.b	#4,1(a0)
0000AC5E 117C 0003 0018             		move.b	#3,$18(a0)
0000AC64 117C 000F 0019             		move.b	#$F,$19(a0)
0000AC6A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000AC6E 7000                       		moveq	#0,d0
0000AC70 1028 0023                  		move.b	$23(a0),d0
0000AC74 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000AC7A 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000AC80 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000AC82 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000AC88 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000AC8E 4E75                       		rts	
0000AC90                            ; ===========================================================================
0000AC90                            
0000AC90                            Obj26_NotBroken:			; XREF: Obj26_Main
0000AC90 117C 0046 0020             		move.b	#$46,$20(a0)
0000AC96 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000AC9C                            
0000AC9C                            Obj26_Solid:				; XREF: Obj26_Index
0000AC9C 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000ACA0 6700                       		beq.s	loc_A1EC	; if not, branch
0000ACA2 5500                       		subq.b	#2,d0
0000ACA4 6600                       		bne.s	Obj26_Fall
0000ACA6 7200                       		moveq	#0,d1
0000ACA8 1228 0019                  		move.b	$19(a0),d1
0000ACAC 0641 000B                  		addi.w	#$B,d1
0000ACB0 6100 D38A                  		bsr.w	ExitPlatform
0000ACB4 0829 0003 0022             		btst	#3,$22(a1)
0000ACBA 6600 0000                  		bne.w	loc_A1BC
0000ACBE 4228 0025                  		clr.b	$25(a0)
0000ACC2 6000 0000                  		bra.w	Obj26_Animate
0000ACC6                            ; ===========================================================================
0000ACC6                            
0000ACC6                            loc_A1BC:				; XREF: Obj26_Solid
0000ACC6 363C 0010                  		move.w	#$10,d3
0000ACCA 3428 0008                  		move.w	8(a0),d2
0000ACCE 6100 D8CA                  		bsr.w	MvSonicOnPtfm
0000ACD2 6000 0000                  		bra.w	Obj26_Animate
0000ACD6                            ; ===========================================================================
0000ACD6                            
0000ACD6                            Obj26_Fall:				; XREF: Obj26_Solid
0000ACD6 6100 0000                  		bsr.w	ObjectFall
0000ACDA 4EB9 0000 0000             		jsr	ObjHitFloor
0000ACE0 4A41                       		tst.w	d1
0000ACE2 6A00 0000                  		bpl.w	Obj26_Animate
0000ACE6 D368 000C                  		add.w	d1,$C(a0)
0000ACEA 4268 0012                  		clr.w	$12(a0)
0000ACEE 4228 0025                  		clr.b	$25(a0)
0000ACF2 6000 0000                  		bra.w	Obj26_Animate
0000ACF6                            ; ===========================================================================
0000ACF6                            
0000ACF6                            loc_A1EC:				; XREF: Obj26_Solid
0000ACF6 323C 001A                  		move.w	#$1A,d1
0000ACFA 343C 000F                  		move.w	#$F,d2
0000ACFE 6100 0000                  		bsr.w	Obj26_SolidSides
0000AD02 6700 0000                  		beq.w	loc_A25C
0000AD06 4A69 0012                  		tst.w	$12(a1)
0000AD0A 6B00                       		bmi.s	loc_A20A
0000AD0C 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000AD12 6700                       		beq.s	loc_A25C	; if yes, branch
0000AD14                            
0000AD14                            loc_A20A:
0000AD14 4A41                       		tst.w	d1
0000AD16 6A00                       		bpl.s	loc_A220
0000AD18 9769 000C                  		sub.w	d3,$C(a1)
0000AD1C 6100 D20C                  		bsr.w	loc_74AE
0000AD20 117C 0002 0025             		move.b	#2,$25(a0)
0000AD26 6000 0000                  		bra.w	Obj26_Animate
0000AD2A                            ; ===========================================================================
0000AD2A                            
0000AD2A                            loc_A220:
0000AD2A 4A40                       		tst.w	d0
0000AD2C 6700 0000                  		beq.w	loc_A246
0000AD30 6B00                       		bmi.s	loc_A230
0000AD32 4A69 0010                  		tst.w	$10(a1)
0000AD36 6B00                       		bmi.s	loc_A246
0000AD38 6000                       		bra.s	loc_A236
0000AD3A                            ; ===========================================================================
0000AD3A                            
0000AD3A                            loc_A230:
0000AD3A 4A69 0010                  		tst.w	$10(a1)
0000AD3E 6A00                       		bpl.s	loc_A246
0000AD40                            
0000AD40                            loc_A236:
0000AD40 9169 0008                  		sub.w	d0,8(a1)
0000AD44 337C 0000 0014             		move.w	#0,$14(a1)
0000AD4A 337C 0000 0010             		move.w	#0,$10(a1)
0000AD50                            
0000AD50                            loc_A246:
0000AD50 0829 0001 0022             		btst	#1,$22(a1)
0000AD56 6600                       		bne.s	loc_A26A
0000AD58 08E9 0005 0022             		bset	#5,$22(a1)
0000AD5E 08E8 0005 0022             		bset	#5,$22(a0)
0000AD64 6000                       		bra.s	Obj26_Animate
0000AD66                            ; ===========================================================================
0000AD66                            
0000AD66                            loc_A25C:
0000AD66 0828 0005 0022             		btst	#5,$22(a0)
0000AD6C 6700                       		beq.s	Obj26_Animate
0000AD6E 337C 0001 001C             		move.w	#1,$1C(a1)
0000AD74                            
0000AD74                            loc_A26A:
0000AD74 08A8 0005 0022             		bclr	#5,$22(a0)
0000AD7A 08A9 0005 0022             		bclr	#5,$22(a1)
0000AD80                            
0000AD80                            Obj26_Animate:				; XREF: Obj26_Index
0000AD80 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000AD86 6100 0000                  		bsr.w	AnimateSprite
0000AD8A                            
0000AD8A                            Obj26_Display:				; XREF: Obj26_Index
0000AD8A 6100 0000                  		bsr.w	DisplaySprite
0000AD8E 3028 0008                  		move.w	8(a0),d0
0000AD92 0240 FF80                  		andi.w	#$FF80,d0
0000AD96 3238 F700                  		move.w	($FFFFF700).w,d1
0000AD9A 0441 0080                  		subi.w	#$80,d1
0000AD9E 0241 FF80                  		andi.w	#$FF80,d1
0000ADA2 9041                       		sub.w	d1,d0
0000ADA4 0C40 0280                  		cmpi.w	#$280,d0
0000ADA8 6200 0000                  		bhi.w	DeleteObject
0000ADAC 4E75                       		rts	
0000ADAE                            ; ===========================================================================
0000ADAE                            
0000ADAE                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000ADAE 5428 0024                  		addq.b	#2,$24(a0)
0000ADB2 117C 0000 0020             		move.b	#0,$20(a0)
0000ADB8 6100 0000                  		bsr.w	SingleObjLoad
0000ADBC 6600                       		bne.s	Obj26_Explode
0000ADBE 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000ADC2 3368 0008 0008             		move.w	8(a0),8(a1)
0000ADC8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000ADCE 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000ADD4 7400                       		moveq	#0,d2	; GMZ
0000ADD6 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000ADD8                            
0000ADD8                            Obj26_Explode:
0000ADD8 6100 0000                  		bsr.w	SingleObjLoad
0000ADDC 6600                       		bne.s	Obj26_SetBroken
0000ADDE 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000ADE2 5429 0024                  		addq.b	#2,$24(a1)
0000ADE6 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000ADEA 3368 0008 0008             		move.w	8(a0),8(a1)
0000ADF0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000ADF6                            
0000ADF6                            Obj26_NextExplosion:
0000ADF6 5802                       		addq.b	#4,d2
0000ADF8 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000ADFC                            
0000ADFC                            Obj26_SetBroken:
0000ADFC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000AE00 7000                       		moveq	#0,d0
0000AE02 1028 0023                  		move.b	$23(a0),d0
0000AE06 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000AE0C 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000AE12 6000 0000                  		bra.w	DisplaySprite
0000AE16                            ; ===========================================================================
0000AE16                            ; ---------------------------------------------------------------------------
0000AE16                            ; Object 2E - contents of monitors
0000AE16                            ; ---------------------------------------------------------------------------
0000AE16                            
0000AE16                            Obj2E:					; XREF: Obj_Index
0000AE16 7000                       		moveq	#0,d0
0000AE18 1028 0024                  		move.b	$24(a0),d0
0000AE1C 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000AE20 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000AE24 6000 0000                  		bra.w	DisplaySprite
0000AE28                            ; ===========================================================================
0000AE28 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000AE2A 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000AE2C 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000AE2E                            ; ===========================================================================
0000AE2E                            
0000AE2E                            Obj2E_Main:				; XREF: Obj2E_Index
0000AE2E 5428 0024                  		addq.b	#2,$24(a0)
0000AE32 317C 0680 0002             		move.w	#$680,2(a0)
0000AE38 117C 0024 0001             		move.b	#$24,1(a0)
0000AE3E 117C 0003 0018             		move.b	#3,$18(a0)
0000AE44 117C 0008 0019             		move.b	#8,$19(a0)
0000AE4A 317C FD00 0012             		move.w	#-$300,$12(a0)
0000AE50 7000                       		moveq	#0,d0
0000AE52 1028 001C                  		move.b	$1C(a0),d0
0000AE56 5400                       		addq.b	#2,d0
0000AE58 1140 001A                  		move.b	d0,$1A(a0)
0000AE5C 227C 0000 0000             		movea.l	#Map_obj26,a1
0000AE62 D000                       		add.b	d0,d0
0000AE64 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000AE68 5249                       		addq.w	#1,a1
0000AE6A 2149 0004                  		move.l	a1,4(a0)
0000AE6E                            
0000AE6E                            Obj2E_Move:				; XREF: Obj2E_Index
0000AE6E 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000AE72 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000AE76 7218                       		moveq	#$18,d1
0000AE78 4EF9 0000 0000             		jmp	ObjectFallCustom
0000AE7E                            ; ===========================================================================
0000AE7E                            
0000AE7E                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000AE7E 5428 0024                  		addq.b	#2,$24(a0)
0000AE82 317C 001D 001E             		move.w	#29,$1E(a0)
0000AE88 1028 001C                  		move.b	$1C(a0),d0
0000AE8C 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000AE90 6600                       		bne.s	Obj2E_ChkSonic
0000AE92 4E75                       		rts			; Eggman monitor does nothing
0000AE94                            ; ===========================================================================
0000AE94                            
0000AE94                            Obj2E_ChkSonic:
0000AE94 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000AE98 6600                       		bne.s	Obj2E_ChkShoes
0000AE9A                            
0000AE9A                            ExtraLife:
0000AE9A 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000AE9E 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000AEA2 303C 0088                  		move.w	#$88,d0
0000AEA6 4EF9 0000 15E0             		jmp	(PlaySound).l	; play extra life music
0000AEAC                            ; ===========================================================================
0000AEAC                            
0000AEAC                            Obj2E_ChkShoes:
0000AEAC 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000AEB0 6600                       		bne.s	Obj2E_ChkShield
0000AEB2 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000AEB8 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000AEBE 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000AEC4 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000AECA 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000AED0 303C 00E2                  		move.w	#$E2,d0
0000AED4 4EF9 0000 15E0             		jmp	(PlaySound).l	; Speed	up the music
0000AEDA                            ; ===========================================================================
0000AEDA                            
0000AEDA                            Obj2E_ChkShield:
0000AEDA 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000AEDE 6600                       		bne.s	Obj2E_ChkInvinc
0000AEE0 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000AEE6 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000AEEC 303C 00AF                  		move.w	#$AF,d0
0000AEF0 4EF9 0000 15E0             		jmp	(PlaySound).l	; play shield sound
0000AEF6                            ; ===========================================================================
0000AEF6                            
0000AEF6                            Obj2E_ChkInvinc:
0000AEF6 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000AEFA 6600                       		bne.s	Obj2E_ChkRings
0000AEFC 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000AF02 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000AF08 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000AF0E 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000AF14 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000AF1A 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000AF20 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000AF26 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000AF2C 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000AF32 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000AF38 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000AF3C 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000AF3E 303C 0087                  		move.w	#$87,d0
0000AF42 4EF9 0000 15E0             		jmp	(PlaySound).l	; play invincibility music
0000AF48                            ; ===========================================================================
0000AF48                            
0000AF48                            Obj2E_NoMusic:
0000AF48 4E75                       		rts	
0000AF4A                            ; ===========================================================================
0000AF4A                            
0000AF4A                            Obj2E_ChkRings:
0000AF4A 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000AF4E 6600                       		bne.s	Obj2E_ChkS
0000AF50 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000AF56 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000AF5C 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000AF62 6500                       		bcs.s	Obj2E_RingSound
0000AF64 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000AF6A 6700 FF2E                  		beq.w	ExtraLife
0000AF6E 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000AF74 6500                       		bcs.s	Obj2E_RingSound
0000AF76 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000AF7C 6700 FF1C                  		beq.w	ExtraLife
0000AF80                            
0000AF80                            Obj2E_RingSound:
0000AF80 303C 00B5                  		move.w	#$B5,d0
0000AF84 4EF9 0000 15E0             		jmp	(PlaySound).l	; play ring sound
0000AF8A                            ; ===========================================================================
0000AF8A                            
0000AF8A                            Obj2E_ChkS:
0000AF8A 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000AF8E 6600                       		bne.s	Obj2E_ChkEnd
0000AF90                            		; nop	
0000AF90 7201                       		moveq	#1,d1
0000AF92 B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000AF96                            
0000AF96                            Obj2E_ChkEnd:
0000AF96 4E75                       		rts			; 'S' and goggles monitors do nothing
0000AF98                            ; ===========================================================================
0000AF98                            
0000AF98                            Obj2E_Delete:				; XREF: Obj2E_Index
0000AF98 5368 001E                  		subq.w	#1,$1E(a0)
0000AF9C 6B00 0000                  		bmi.w	DeleteObject
0000AFA0 4E75                       		rts	
0000AFA2                            ; ---------------------------------------------------------------------------
0000AFA2                            ; Subroutine to	make the sides of a monitor solid
0000AFA2                            ; ---------------------------------------------------------------------------
0000AFA2                            
0000AFA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AFA2                            
0000AFA2                            
0000AFA2                            Obj26_SolidSides:			; XREF: loc_A1EC
0000AFA2 43F8 D000                  		lea	($FFFFD000).w,a1
0000AFA6 3029 0008                  		move.w	8(a1),d0
0000AFAA 9068 0008                  		sub.w	8(a0),d0
0000AFAE D041                       		add.w	d1,d0
0000AFB0 6B00                       		bmi.s	loc_A4E6
0000AFB2 3601                       		move.w	d1,d3
0000AFB4 D643                       		add.w	d3,d3
0000AFB6 B043                       		cmp.w	d3,d0
0000AFB8 6200                       		bhi.s	loc_A4E6
0000AFBA 1629 0016                  		move.b	$16(a1),d3
0000AFBE 4883                       		ext.w	d3
0000AFC0 D443                       		add.w	d3,d2
0000AFC2 3629 000C                  		move.w	$C(a1),d3
0000AFC6 9668 000C                  		sub.w	$C(a0),d3
0000AFCA D642                       		add.w	d2,d3
0000AFCC 6B00                       		bmi.s	loc_A4E6
0000AFCE D442                       		add.w	d2,d2
0000AFD0 B642                       		cmp.w	d2,d3
0000AFD2 6400                       		bcc.s	loc_A4E6
0000AFD4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000AFD8 6B00                       		bmi.s	loc_A4E6
0000AFDA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000AFE0 6400                       		bcc.s	loc_A4E6
0000AFE2 4A78 FE08                  		tst.w	($FFFFFE08).w
0000AFE6 6600                       		bne.s	loc_A4E6
0000AFE8 B240                       		cmp.w	d0,d1
0000AFEA 6400                       		bcc.s	loc_A4DC
0000AFEC D241                       		add.w	d1,d1
0000AFEE 9041                       		sub.w	d1,d0
0000AFF0                            
0000AFF0                            loc_A4DC:
0000AFF0 0C43 0010                  		cmpi.w	#$10,d3
0000AFF4 6500                       		bcs.s	loc_A4EA
0000AFF6                            
0000AFF6                            loc_A4E2:
0000AFF6 7201                       		moveq	#1,d1
0000AFF8 4E75                       		rts	
0000AFFA                            ; ===========================================================================
0000AFFA                            
0000AFFA                            loc_A4E6:
0000AFFA 7200                       		moveq	#0,d1
0000AFFC 4E75                       		rts	
0000AFFE                            ; ===========================================================================
0000AFFE                            
0000AFFE                            loc_A4EA:
0000AFFE 7200                       		moveq	#0,d1
0000B000 1228 0019                  		move.b	$19(a0),d1
0000B004 5841                       		addq.w	#4,d1
0000B006 3401                       		move.w	d1,d2
0000B008 D442                       		add.w	d2,d2
0000B00A D269 0008                  		add.w	8(a1),d1
0000B00E 9268 0008                  		sub.w	8(a0),d1
0000B012 6BE2                       		bmi.s	loc_A4E2
0000B014 B242                       		cmp.w	d2,d1
0000B016 64DE                       		bcc.s	loc_A4E2
0000B018 72FF                       		moveq	#-1,d1
0000B01A 4E75                       		rts	
0000B01C                            ; End of function Obj26_SolidSides
0000B01C                            
0000B01C                            ; ===========================================================================
0000B01C                            Ani_obj26:
0000B01C                            	include "_anim\obj26.asm"
0000B01C                            ; ---------------------------------------------------------------------------
0000B01C                            ; Animation script - monitors
0000B01C                            ; ---------------------------------------------------------------------------
0000B01C 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000B022 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000B028 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000B02E 0000                       		dc.w byte_A582-Ani_obj26
0000B030 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000B036 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000B042 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000B04E 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000B05A 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000B066 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000B072 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000B07E 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000B08A 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000B096 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000B09E                            		even
0000B09E                            		even
0000B09E                            
0000B09E                            ; ---------------------------------------------------------------------------
0000B09E                            ; Sprite mappings - monitors
0000B09E                            ; ---------------------------------------------------------------------------
0000B09E                            Map_obj26:
0000B09E                            	include "_maps\obj26.asm"
0000B09E                            ; ================================================================================
0000B09E                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000B09E                            ; ================================================================================
0000B09E                            
0000B09E                            DATAY1U343IF3L:
0000B09E 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000B0A2 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000B0A6 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000B0AA 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000B0AE 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000B0B2 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000B0B6 05                         DATAY1U343IF3L_0: dc.b $5
0000B0B7 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B0BC 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B0C1 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B0C6 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B0CB 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B0D0 06                         DATAY1U343IF3L_1: dc.b $6
0000B0D1 F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000B0D6 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B0DB 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B0E0 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B0E5 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B0EA 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B0EF 05                         DATAY1U343IF3L_2: dc.b $5
0000B0F0 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B0F5 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B0FA E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B0FF 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B104 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B109 05                         DATAY1U343IF3L_3: dc.b $5
0000B10A E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B10F 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B114 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B119 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B11E 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B123 06                         DATAY1U343IF3L_4: dc.b $6
0000B124 F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000B129 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B12E 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B133 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B138 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B13D 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B142 06                         DATAY1U343IF3L_5: dc.b $6
0000B143 F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000B148 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B14D 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B152 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B157 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B15C 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B161 06                         DATAY1U343IF3L_6: dc.b $6
0000B162 F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000B167 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B16C 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B171 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B176 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B17B 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B180 06                         DATAY1U343IF3L_7: dc.b $6
0000B181 F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000B186 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B18B 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B190 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B195 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B19A 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B19F 06                         DATAY1U343IF3L_8: dc.b $6
0000B1A0 F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000B1A5 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B1AA 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B1AF E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B1B4 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B1B9 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B1BE 06                         DATAY1U343IF3L_9: dc.b $6
0000B1BF F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000B1C4 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B1C9 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B1CE E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B1D3 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B1D8 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B1DD 05                         DATAY1U343IF3L_A: dc.b $5
0000B1DE E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B1E3 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B1E8 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B1ED 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B1F2 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B1F7 01                         DATAY1U343IF3L_B: dc.b $1
0000B1F8 FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000B1FE 00                         	even
0000B1FE 00                         	even
0000B1FE                            
0000B1FE                            ; ===========================================================================
0000B1FE                            ; ---------------------------------------------------------------------------
0000B1FE                            ; Object 0E - Sonic on the title screen
0000B1FE                            ; ---------------------------------------------------------------------------
0000B1FE                            
0000B1FE                            Obj0E:					; XREF: Obj_Index
0000B1FE 7000                       		moveq	#0,d0
0000B200 1028 0024                  		move.b	$24(a0),d0
0000B204 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000B208 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000B20C                            ; ===========================================================================
0000B20C 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000B20E 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000B210 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000B212 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000B214                            ; ===========================================================================
0000B214                            
0000B214                            Obj0E_Main:				; XREF: Obj0E_Index
0000B214 5428 0024                  		addq.b	#2,$24(a0)
0000B218 317C 00F0 0008             		move.w	#$F0,8(a0)
0000B21E 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000B224 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000B22C 317C 2300 0002             		move.w	#$2300,2(a0)
0000B232 117C 0001 0018             		move.b	#1,$18(a0)
0000B238 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000B23E 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B244 6100 0000                  		bsr.w	AnimateSprite
0000B248                            
0000B248                            Obj0E_Delay:				; XREF: Obj0E_Index
0000B248 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000B24C 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000B24E 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000B252 6000 0000                  		bra.w	DisplaySprite
0000B256                            ; ===========================================================================
0000B256                            
0000B256                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000B256 4E75                       		rts	
0000B258                            ; ===========================================================================
0000B258                            
0000B258                            Obj0E_Move:				; XREF: Obj0E_Index
0000B258 5168 000A                  		subq.w	#8,$A(a0)
0000B25C 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000B262 6600                       		bne.s	Obj0E_Display
0000B264 5428 0024                  		addq.b	#2,$24(a0)
0000B268                            
0000B268                            Obj0E_Display:
0000B268 6000 0000                  		bra.w	DisplaySprite
0000B26C                            ; ===========================================================================
0000B26C 4E75                       		rts	
0000B26E                            ; ===========================================================================
0000B26E                            
0000B26E                            Obj0E_Animate:				; XREF: Obj0E_Index
0000B26E 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B274 6100 0000                  		bsr.w	AnimateSprite
0000B278 6000 0000                  		bra.w	DisplaySprite
0000B27C                            ; ===========================================================================
0000B27C 4E75                       		rts	
0000B27E                            ; ===========================================================================
0000B27E                            ; ---------------------------------------------------------------------------
0000B27E                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000B27E                            ; ---------------------------------------------------------------------------
0000B27E                            
0000B27E                            Obj0F:					; XREF: Obj_Index
0000B27E 7000                       		moveq	#0,d0
0000B280 1028 0024                  		move.b	$24(a0),d0
0000B284 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000B288 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000B28C 6000 0000                  		bra.w	DisplaySprite
0000B290                            ; ===========================================================================
0000B290 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000B292 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000B294 0000                       		dc.w locret_A6F8-Obj0F_Index
0000B296                            ; ===========================================================================
0000B296                            
0000B296                            Obj0F_Main:				; XREF: Obj0F_Index
0000B296 5428 0024                  		addq.b	#2,$24(a0)
0000B29A 317C 00D0 0008             		move.w	#$D0,8(a0)
0000B2A0 317C 0130 000A             		move.w	#$130,$A(a0)
0000B2A6 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000B2AE 317C 0200 0002             		move.w	#$200,2(a0)
0000B2B4 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000B2BA 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000B2BC 5428 0024                  		addq.b	#2,$24(a0)
0000B2C0 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000B2C6 6600                       		bne.s	locret_A6F8	; if not, branch
0000B2C8 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000B2CE 317C 0170 0008             		move.w	#$170,8(a0)
0000B2D4 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000B2DA                            
0000B2DA                            locret_A6F8:				; XREF: Obj0F_Index
0000B2DA 4E75                       		rts	
0000B2DC                            ; ===========================================================================
0000B2DC                            
0000B2DC                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000B2DC 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000B2E2 6000 0000                  		bra.w	AnimateSprite
0000B2E6                            ; ===========================================================================
0000B2E6                            Ani_obj0E:
0000B2E6                            	include "_anim\obj0E.asm"
0000B2E6                            ; ---------------------------------------------------------------------------
0000B2E6                            ; Animation script - Sonic on the title screen
0000B2E6                            ; ---------------------------------------------------------------------------
0000B2E6 0000                       		dc.w byte_A706-Ani_obj0E
0000B2E8 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000B2F4                            		even
0000B2F4                            		even
0000B2F4                            
0000B2F4                            Ani_obj0F:
0000B2F4                            	include "_anim\obj0F.asm"
0000B2F4                            ; ---------------------------------------------------------------------------
0000B2F4                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000B2F4                            ; ---------------------------------------------------------------------------
0000B2F4 0000                       		dc.w byte_A714-Ani_obj0F
0000B2F6 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000B2FA                            		even
0000B2FA                            		even
0000B2FA                            
0000B2FA                            ; ---------------------------------------------------------------------------
0000B2FA                            ; Subroutine to	animate	a sprite using an animation script
0000B2FA                            ; ---------------------------------------------------------------------------
0000B2FA                            
0000B2FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B2FA                            
0000B2FA                            
0000B2FA                            AnimateSprite:
0000B2FA 7000                       		moveq	#0,d0
0000B2FC 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000B300 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000B304 6700                       		beq.s	Anim_Run	; if not, branch
0000B306 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000B30A 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B310 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000B316                            
0000B316                            Anim_Run:
0000B316 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000B31A 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000B31C D040                       		add.w	d0,d0
0000B31E D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000B322 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000B326 7200                       		moveq	#0,d1
0000B328 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000B32C 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000B330 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000B332                            
0000B332                            Anim_Next:
0000B332 1200                       		move.b	d0,d1
0000B334 0200 001F                  		andi.b	#$1F,d0
0000B338 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000B33C 1028 0022                  		move.b	$22(a0),d0
0000B340 E719                       		rol.b	#3,d1
0000B342 B101                       		eor.b	d0,d1
0000B344 0201 0003                  		andi.b	#3,d1
0000B348 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000B34E 8328 0001                  		or.b	d1,1(a0)
0000B352 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000B356                            
0000B356                            Anim_Wait:
0000B356 4E75                       		rts	
0000B358                            ; ===========================================================================
0000B358                            
0000B358                            Anim_End_FF:
0000B358 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000B35A 6600                       		bne.s	Anim_End_FE	; if not, branch
0000B35C 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000B362 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000B366 60CA                       		bra.s	Anim_Next
0000B368                            ; ===========================================================================
0000B368                            
0000B368                            Anim_End_FE:
0000B368 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000B36A 6600                       		bne.s	Anim_End_FD	; if not, branch
0000B36C 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000B370 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000B374 9200                       		sub.b	d0,d1
0000B376 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000B37A 60B6                       		bra.s	Anim_Next
0000B37C                            ; ===========================================================================
0000B37C                            
0000B37C                            Anim_End_FD:
0000B37C 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000B37E 6600                       		bne.s	Anim_End_FC	; if not, branch
0000B380 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000B386                            
0000B386                            Anim_End_FC:
0000B386 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000B388 6600                       		bne.s	Anim_End_FB	; if not, branch
0000B38A 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000B38E                            
0000B38E                            Anim_End_FB:
0000B38E 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000B390 6600                       		bne.s	Anim_End_FA	; if not, branch
0000B392 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B398 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000B39C                            
0000B39C                            Anim_End_FA:
0000B39C 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000B39E 6600                       		bne.s	Anim_End	; if not, branch
0000B3A0 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000B3A4                            
0000B3A4                            Anim_End:
0000B3A4 4E75                       		rts	
0000B3A6                            ; End of function AnimateSprite
0000B3A6                            
0000B3A6                            ; ===========================================================================
0000B3A6                            ; ---------------------------------------------------------------------------
0000B3A6                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B3A6                            ; ---------------------------------------------------------------------------
0000B3A6                            Map_obj0F:
0000B3A6                            	include "_maps\obj0F.asm"
0000B3A6                            ; ---------------------------------------------------------------------------
0000B3A6                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B3A6                            ; ---------------------------------------------------------------------------
0000B3A6 0000                       		dc.w byte_A7CD-Map_obj0F
0000B3A8 0000                       		dc.w byte_A7CC-Map_obj0F
0000B3AA 0000                       		dc.w byte_A7EB-Map_obj0F
0000B3AC 0000                       		dc.w byte_A882-Map_obj0F
0000B3AE 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000B3AF 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000B3B4 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000B3B9 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000B3BE 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000B3C3 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000B3C8 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000B3CD 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000B3CE B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B3D3 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B3D8 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B3DD B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B3E2 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B3E7 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B3EC B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B3F1 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B3F6 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B3FB B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B400 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B405 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B40A D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B40F D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B414 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B419 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B41E D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B423 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B428 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B42D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B432 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B437 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B43C F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B441 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B446 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B44B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B450 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B455 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B45A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B45F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B464 01                         byte_A882:	dc.b 1			; "TM"
0000B465 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000B46A                            		even
0000B46A                            		even
0000B46A                            
0000B46A                            ; ---------------------------------------------------------------------------
0000B46A                            ; Sprite mappings - Sonic on the title screen
0000B46A                            ; ---------------------------------------------------------------------------
0000B46A                            Map_obj0E:
0000B46A                            	include "_maps\obj0E.asm"
0000B46A                            ; ================================================================================
0000B46A                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 15:32:50 GMT-0500 (Central Daylight Time)
0000B46A                            ; ================================================================================
0000B46A                            
0000B46A                            DATAGKI0HYDQBXP:
0000B46A 0000 0000                  	dc.w DATAGKI0HYDQBXP_0-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_1-DATAGKI0HYDQBXP
0000B46E 0000 0000                  	dc.w DATAGKI0HYDQBXP_2-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_3-DATAGKI0HYDQBXP
0000B472 0000 0000                  	dc.w DATAGKI0HYDQBXP_4-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_5-DATAGKI0HYDQBXP
0000B476 0000 0000                  	dc.w DATAGKI0HYDQBXP_6-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_7-DATAGKI0HYDQBXP
0000B47A 08                         DATAGKI0HYDQBXP_0: dc.b $8
0000B47B 0C0F 0126 08               	dc.b $C, $F, $1, $26, $8
0000B480 2C0F 0136 08               	dc.b $2C, $F, $1, $36, $8
0000B485 4C0D 0146 08               	dc.b $4C, $D, $1, $46, $8
0000B48A 0408 014E 20               	dc.b $4, $8, $1, $4E, $20
0000B48F 0C0B 0151 28               	dc.b $C, $B, $1, $51, $28
0000B494 2C0B 015D 28               	dc.b $2C, $B, $1, $5D, $28
0000B499 4C05 0169 28               	dc.b $4C, $5, $1, $69, $28
0000B49E 1407 016D 40               	dc.b $14, $7, $1, $6D, $40
0000B4A3 0B                         DATAGKI0HYDQBXP_1: dc.b $B
0000B4A4 060F 0175 01               	dc.b $6, $F, $1, $75, $1
0000B4A9 060F 0185 21               	dc.b $6, $F, $1, $85, $21
0000B4AE 0607 0195 41               	dc.b $6, $7, $1, $95, $41
0000B4B3 260F 019D 01               	dc.b $26, $F, $1, $9D, $1
0000B4B8 260F 01AD 21               	dc.b $26, $F, $1, $AD, $21
0000B4BD 2607 01BD 41               	dc.b $26, $7, $1, $BD, $41
0000B4C2 460C 01C5 01               	dc.b $46, $C, $1, $C5, $1
0000B4C7 460E 01C9 21               	dc.b $46, $E, $1, $C9, $21
0000B4CC 4606 01D5 41               	dc.b $46, $6, $1, $D5, $41
0000B4D1 4E08 01DB 09               	dc.b $4E, $8, $1, $DB, $9
0000B4D6 5604 01DE 11               	dc.b $56, $4, $1, $DE, $11
0000B4DB 0B                         DATAGKI0HYDQBXP_2: dc.b $B
0000B4DC F20F 0175 01               	dc.b $F2, $F, $1, $75, $1
0000B4E1 F20F 0185 21               	dc.b $F2, $F, $1, $85, $21
0000B4E6 F207 0195 41               	dc.b $F2, $7, $1, $95, $41
0000B4EB 120F 019D 01               	dc.b $12, $F, $1, $9D, $1
0000B4F0 120F 01AD 21               	dc.b $12, $F, $1, $AD, $21
0000B4F5 1207 01BD 41               	dc.b $12, $7, $1, $BD, $41
0000B4FA 320C 01C5 01               	dc.b $32, $C, $1, $C5, $1
0000B4FF 320E 01C9 21               	dc.b $32, $E, $1, $C9, $21
0000B504 3206 01D5 41               	dc.b $32, $6, $1, $D5, $41
0000B509 3A08 01DB 09               	dc.b $3A, $8, $1, $DB, $9
0000B50E 4204 01DE 11               	dc.b $42, $4, $1, $DE, $11
0000B513 0A                         DATAGKI0HYDQBXP_3: dc.b $A
0000B514 FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000B519 F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000B51E FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000B523 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000B528 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000B52D 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000B532 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000B537 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000B53C 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000B541 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000B546 10                         DATAGKI0HYDQBXP_4: dc.b $10
0000B547 F80F 01E0 09               	dc.b $F8, $F, $1, $E0, $9
0000B54C F807 01F0 29               	dc.b $F8, $7, $1, $F0, $29
0000B551 0003 01F8 01               	dc.b $0, $3, $1, $F8, $1
0000B556 0003 01FC 39               	dc.b $0, $3, $1, $FC, $39
0000B55B 1001 0200 F9               	dc.b $10, $1, $2, $0, $F9
0000B560 180D 0202 09               	dc.b $18, $D, $2, $2, $9
0000B565 1807 020A 29               	dc.b $18, $7, $2, $A, $29
0000B56A 1803 0212 41               	dc.b $18, $3, $2, $12, $41
0000B56F 2001 0216 01               	dc.b $20, $1, $2, $16, $1
0000B574 2003 0218 39               	dc.b $20, $3, $2, $18, $39
0000B579 2808 021C 11               	dc.b $28, $8, $2, $1C, $11
0000B57E 3007 021F 19               	dc.b $30, $7, $2, $1F, $19
0000B583 3801 0227 11               	dc.b $38, $1, $2, $27, $11
0000B588 3806 0229 29               	dc.b $38, $6, $2, $29, $29
0000B58D 3801 022F 41               	dc.b $38, $1, $2, $2F, $41
0000B592 4001 0231 39               	dc.b $40, $1, $2, $31, $39
0000B597 0B                         DATAGKI0HYDQBXP_5: dc.b $B
0000B598 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B59D EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B5A2 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B5A7 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B5AC EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B5B1 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B5B6 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B5BB EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B5C0 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B5C5 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B5CA 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B5CF 0F                         DATAGKI0HYDQBXP_6: dc.b $F
0000B5D0 EC0F 004E E2               	dc.b $EC, $F, $0, $4E, $E2
0000B5D5 0C0F 005E E2               	dc.b $C, $F, $0, $5E, $E2
0000B5DA 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B5DF EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B5E4 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B5E9 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B5EE EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B5F3 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B5F8 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B5FD EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B602 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B607 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B60C EC07 010E 62               	dc.b $EC, $7, $1, $E, $62
0000B611 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B616 2C07 011E 62               	dc.b $2C, $7, $1, $1E, $62
0000B61B 0F                         DATAGKI0HYDQBXP_7: dc.b $F
0000B61C EC0F 0233 E2               	dc.b $EC, $F, $2, $33, $E2
0000B621 0C0F 0243 E2               	dc.b $C, $F, $2, $43, $E2
0000B626 2C0F 0253 E2               	dc.b $2C, $F, $2, $53, $E2
0000B62B EC0F 0263 02               	dc.b $EC, $F, $2, $63, $2
0000B630 0C0F 0273 02               	dc.b $C, $F, $2, $73, $2
0000B635 2C0F 0283 02               	dc.b $2C, $F, $2, $83, $2
0000B63A EC0F 0293 22               	dc.b $EC, $F, $2, $93, $22
0000B63F 0C0F 02A3 22               	dc.b $C, $F, $2, $A3, $22
0000B644 2C0F 02B3 22               	dc.b $2C, $F, $2, $B3, $22
0000B649 EC0F 02C3 42               	dc.b $EC, $F, $2, $C3, $42
0000B64E 0C0F 02D3 42               	dc.b $C, $F, $2, $D3, $42
0000B653 2C0F 02E3 42               	dc.b $2C, $F, $2, $E3, $42
0000B658 EC07 02F3 62               	dc.b $EC, $7, $2, $F3, $62
0000B65D 0C07 02FB 62               	dc.b $C, $7, $2, $FB, $62
0000B662 2C07 0303 62               	dc.b $2C, $7, $3, $3, $62
0000B668 00                         	even
0000B668 00                         	even
0000B668                            
0000B668                            ; ===========================================================================
0000B668                            ; ---------------------------------------------------------------------------
0000B668                            ; Object 2B - Chopper enemy (GHZ)
0000B668                            ; ---------------------------------------------------------------------------
0000B668                            
0000B668                            Obj2B:					; XREF: Obj_Index
0000B668 7000                       		moveq	#0,d0
0000B66A 1028 0024                  		move.b	$24(a0),d0
0000B66E 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000B672 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000B676 6000 0000                  		bra.w	MarkObjGone
0000B67A                            ; ===========================================================================
0000B67A 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000B67C 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000B67E                            ; ===========================================================================
0000B67E                            
0000B67E                            Obj2B_Main:				; XREF: Obj2B_Index
0000B67E 5428 0024                  		addq.b	#2,$24(a0)
0000B682 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B68A 317C 047B 0002             		move.w	#$47B,2(a0)
0000B690 117C 0004 0001             		move.b	#4,1(a0)
0000B696 117C 0004 0018             		move.b	#4,$18(a0)
0000B69C 117C 0009 0020             		move.b	#9,$20(a0)
0000B6A2 117C 0010 0019             		move.b	#$10,$19(a0)
0000B6A8 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B6AE 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B6B4                            
0000B6B4                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B6B4 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B6BA 6100 FC3E                  		bsr.w	AnimateSprite
0000B6BE 7218                       		moveq	#$18,d1
0000B6C0 4EB9 0000 0000             		jsr	ObjectFallCustom
0000B6C6 3028 0030                  		move.w	$30(a0),d0
0000B6CA B068 000C                  		cmp.w	$C(a0),d0
0000B6CE 6400                       		bcc.s	Obj2B_ChgAni
0000B6D0 3140 000C                  		move.w	d0,$C(a0)
0000B6D4 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B6DA                            
0000B6DA                            Obj2B_ChgAni:
0000B6DA 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B6E0 0440 00C0                  		subi.w	#$C0,d0
0000B6E4 B068 000C                  		cmp.w	$C(a0),d0
0000B6E8 6400                       		bcc.s	locret_ABB6
0000B6EA 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B6F0 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B6F4 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B6F6 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B6FC                            
0000B6FC                            locret_ABB6:
0000B6FC 4E75                       		rts	
0000B6FE                            ; ===========================================================================
0000B6FE                            Ani_obj2B:
0000B6FE                            	include "_anim\obj2B.asm"
0000B6FE                            ; ---------------------------------------------------------------------------
0000B6FE                            ; Animation script - Chopper enemy
0000B6FE                            ; ---------------------------------------------------------------------------
0000B6FE 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B700 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B702 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B704 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B708 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B70C 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B710 00                         		even
0000B710 00                         		even
0000B710                            
0000B710                            ; ---------------------------------------------------------------------------
0000B710                            ; Sprite mappings - Chopper enemy (GHZ)
0000B710                            ; ---------------------------------------------------------------------------
0000B710                            Map_obj2B:
0000B710                            	include "_maps\obj2B.asm"
0000B710                            Map_1ff1:
0000B710 0000                       Map_1ff1_0: 	dc.w Map_1ff1_4-Map_1ff1
0000B712 0000                       Map_1ff1_2: 	dc.w Map_1ff1_F-Map_1ff1
0000B714 02                         Map_1ff1_4: 	dc.b $2
0000B715 E80B 0000 F4               	dc.b $E8, $B, $0, $0, $F4
0000B71A 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B71F 02                         Map_1ff1_F: 	dc.b $2
0000B720 E80B 0012 F4               	dc.b $E8, $B, $0, $12, $F4
0000B725 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B72A                            	even
0000B72A                            	even
0000B72A                            
0000B72A                            ; ===========================================================================
0000B72A                            ; ---------------------------------------------------------------------------
0000B72A                            ; Object 2C - Jaws enemy (LZ)
0000B72A                            ; ---------------------------------------------------------------------------
0000B72A                            
0000B72A                            Obj2C:					; XREF: Obj_Index
0000B72A 7000                       		moveq	#0,d0
0000B72C 1028 0024                  		move.b	$24(a0),d0
0000B730 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B734 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B738                            ; ===========================================================================
0000B738 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B73A 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B73C                            ; ===========================================================================
0000B73C                            
0000B73C                            Obj2C_Main:				; XREF: Obj2C_Index
0000B73C 5428 0024                  		addq.b	#2,$24(a0)
0000B740 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B748 317C 2486 0002             		move.w	#$2486,2(a0)
0000B74E 0028 0004 0001             		ori.b	#4,1(a0)
0000B754 117C 000A 0020             		move.b	#$A,$20(a0)
0000B75A 117C 0004 0018             		move.b	#4,$18(a0)
0000B760 117C 0010 0019             		move.b	#$10,$19(a0)
0000B766 7000                       		moveq	#0,d0
0000B768 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B76C ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B76E 5340                       		subq.w	#1,d0
0000B770 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B774 3140 0032                  		move.w	d0,$32(a0)
0000B778 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B77E 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B784 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B786 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B78A                            
0000B78A                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B78A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B78E 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B790 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B796 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B79A 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B7A0 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B7A6                            
0000B7A6                            Obj2C_Animate:
0000B7A6 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B7AC 6100 FB4C                  		bsr.w	AnimateSprite
0000B7B0 6100 0000                  		bsr.w	SpeedToPos
0000B7B4 6000 0000                  		bra.w	MarkObjGone
0000B7B8                            ; ===========================================================================
0000B7B8                            Ani_obj2C:
0000B7B8                            	include "_anim\obj2C.asm"
0000B7B8                            ; ---------------------------------------------------------------------------
0000B7B8                            ; Animation script - Jaws enemy
0000B7B8                            ; ---------------------------------------------------------------------------
0000B7B8 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B7BA 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B7C0                            		even
0000B7C0                            		even
0000B7C0                            
0000B7C0                            ; ---------------------------------------------------------------------------
0000B7C0                            ; Sprite mappings - Jaws enemy (LZ)
0000B7C0                            ; ---------------------------------------------------------------------------
0000B7C0                            Map_obj2C:
0000B7C0                            	include "_maps\obj2C.asm"
0000B7C0                            ; ---------------------------------------------------------------------------
0000B7C0                            ; Sprite mappings - Jaws enemy (LZ)
0000B7C0                            ; ---------------------------------------------------------------------------
0000B7C0 0000                       		dc.w byte_AC78-Map_obj2C
0000B7C2 0000                       		dc.w byte_AC83-Map_obj2C
0000B7C4 0000                       		dc.w byte_AC8E-Map_obj2C
0000B7C6 0000                       		dc.w byte_AC99-Map_obj2C
0000B7C8 02                         byte_AC78:	dc.b 2
0000B7C9 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B7CE F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B7D3 02                         byte_AC83:	dc.b 2
0000B7D4 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B7D9 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B7DE 02                         byte_AC8E:	dc.b 2
0000B7DF F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B7E4 F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B7E9 02                         byte_AC99:	dc.b 2
0000B7EA F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B7EF F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B7F4                            		even
0000B7F4                            		even
0000B7F4                            
0000B7F4                            ; ===========================================================================
0000B7F4                            ; ---------------------------------------------------------------------------
0000B7F4                            ; Object 2D - Burrobot enemy (LZ)
0000B7F4                            ; ---------------------------------------------------------------------------
0000B7F4                            
0000B7F4                            Obj2D:					; XREF: Obj_Index
0000B7F4 7000                       		moveq	#0,d0
0000B7F6 1028 0024                  		move.b	$24(a0),d0
0000B7FA 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B7FE 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B802                            ; ===========================================================================
0000B802 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B804 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B806                            ; ===========================================================================
0000B806                            
0000B806                            Obj2D_Main:				; XREF: Obj2D_Index
0000B806 5428 0024                  		addq.b	#2,$24(a0)
0000B80A 117C 0013 0016             		move.b	#$13,$16(a0)
0000B810 117C 0008 0017             		move.b	#8,$17(a0)
0000B816 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B81E 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B824 0028 0004 0001             		ori.b	#4,1(a0)
0000B82A 117C 0004 0018             		move.b	#4,$18(a0)
0000B830 117C 0005 0020             		move.b	#5,$20(a0)
0000B836 117C 000C 0019             		move.b	#$C,$19(a0)
0000B83C 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B840 117C 0002 001C             		move.b	#2,$1C(a0)
0000B846                            
0000B846                            Obj2D_Action:				; XREF: Obj2D_Index
0000B846 7000                       		moveq	#0,d0
0000B848 1028 0025                  		move.b	$25(a0),d0
0000B84C 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B850 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B854 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B85A 6100 FA9E                  		bsr.w	AnimateSprite
0000B85E 6000 0000                  		bra.w	MarkObjGone
0000B862                            ; ===========================================================================
0000B862 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B864 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B866 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B868 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B86A                            ; ===========================================================================
0000B86A                            
0000B86A                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B86A 5368 0030                  		subq.w	#1,$30(a0)
0000B86E 6A00                       		bpl.s	locret_AD42
0000B870 5428 0025                  		addq.b	#2,$25(a0)
0000B874 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B87A 317C 0080 0010             		move.w	#$80,$10(a0)
0000B880 117C 0001 001C             		move.b	#1,$1C(a0)
0000B886 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B88C 6700                       		beq.s	locret_AD42
0000B88E 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B892                            
0000B892                            locret_AD42:
0000B892 4E75                       		rts	
0000B894                            ; ===========================================================================
0000B894                            
0000B894                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B894 5368 0030                  		subq.w	#1,$30(a0)
0000B898 6B00                       		bmi.s	loc_AD84
0000B89A 6100 0000                  		bsr.w	SpeedToPos
0000B89E 0868 0000 0032             		bchg	#0,$32(a0)
0000B8A4 6600                       		bne.s	loc_AD78
0000B8A6 3628 0008                  		move.w	8(a0),d3
0000B8AA 0643 000C                  		addi.w	#$C,d3
0000B8AE 0828 0000 0022             		btst	#0,$22(a0)
0000B8B4 6600                       		bne.s	loc_AD6A
0000B8B6 0443 0018                  		subi.w	#$18,d3
0000B8BA                            
0000B8BA                            loc_AD6A:
0000B8BA 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B8C0 0C41 000C                  		cmpi.w	#$C,d1
0000B8C4 6C00                       		bge.s	loc_AD84
0000B8C6 4E75                       		rts	
0000B8C8                            ; ===========================================================================
0000B8C8                            
0000B8C8                            loc_AD78:				; XREF: Obj2D_Move
0000B8C8 4EB9 0000 0000             		jsr	ObjHitFloor
0000B8CE D368 000C                  		add.w	d1,$C(a0)
0000B8D2 4E75                       		rts	
0000B8D4                            ; ===========================================================================
0000B8D4                            
0000B8D4                            loc_AD84:				; XREF: Obj2D_Move
0000B8D4 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B8DA 6700                       		beq.s	loc_ADA4
0000B8DC 5528 0025                  		subq.b	#2,$25(a0)
0000B8E0 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B8E6 317C 0000 0010             		move.w	#0,$10(a0)
0000B8EC 117C 0000 001C             		move.b	#0,$1C(a0)
0000B8F2 4E75                       		rts	
0000B8F4                            ; ===========================================================================
0000B8F4                            
0000B8F4                            loc_ADA4:
0000B8F4 5428 0025                  		addq.b	#2,$25(a0)
0000B8F8 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B8FE 117C 0002 001C             		move.b	#2,$1C(a0)
0000B904 4E75                       		rts	
0000B906                            ; ===========================================================================
0000B906                            
0000B906                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B906 7218                       		moveq	#$18,d1
0000B908 4EB9 0000 0000             		jsr	ObjectFallCustom
0000B90E 4A68 0012                  		tst.w	$12(a0)
0000B912 6B00                       		bmi.s	locret_ADF0
0000B914 117C 0003 001C             		move.b	#3,$1C(a0)
0000B91A 4EB9 0000 0000             		jsr	ObjHitFloor
0000B920 4A41                       		tst.w	d1
0000B922 6A00                       		bpl.s	locret_ADF0
0000B924 D368 000C                  		add.w	d1,$C(a0)
0000B928 317C 0000 0012             		move.w	#0,$12(a0)
0000B92E 117C 0001 001C             		move.b	#1,$1C(a0)
0000B934 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B93A 5528 0025                  		subq.b	#2,$25(a0)
0000B93E 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B942                            
0000B942                            locret_ADF0:
0000B942 4E75                       		rts	
0000B944                            ; ===========================================================================
0000B944                            
0000B944                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B944 343C 0060                  		move.w	#$60,d2
0000B948 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B94C 6400                       		bcc.s	locret_AE20
0000B94E 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B952 9068 000C                  		sub.w	$C(a0),d0
0000B956 6400                       		bcc.s	locret_AE20
0000B958 0C40 FF80                  		cmpi.w	#-$80,d0
0000B95C 6500                       		bcs.s	locret_AE20
0000B95E 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B962 6600                       		bne.s	locret_AE20
0000B964 5528 0025                  		subq.b	#2,$25(a0)
0000B968 3141 0010                  		move.w	d1,$10(a0)
0000B96C 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B972                            
0000B972                            locret_AE20:
0000B972 4E75                       		rts	
0000B974                            
0000B974                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B974                            
0000B974                            
0000B974                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B974 323C 0080                  		move.w	#$80,d1
0000B978 08E8 0000 0022             		bset	#0,$22(a0)
0000B97E 3038 D008                  		move.w	($FFFFD008).w,d0
0000B982 9068 0008                  		sub.w	8(a0),d0
0000B986 6400                       		bcc.s	loc_AE40
0000B988 4440                       		neg.w	d0
0000B98A 4441                       		neg.w	d1
0000B98C 08A8 0000 0022             		bclr	#0,$22(a0)
0000B992                            
0000B992                            loc_AE40:
0000B992 B042                       		cmp.w	d2,d0
0000B994 4E75                       		rts	
0000B996                            ; End of function Obj2D_ChkSonic2
0000B996                            
0000B996                            ; ===========================================================================
0000B996                            Ani_obj2D:
0000B996                            	include "_anim\obj2D.asm"
0000B996                            ; ---------------------------------------------------------------------------
0000B996                            ; Animation script - Burrobot enemy but craig
0000B996                            ; ---------------------------------------------------------------------------
0000B996 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B998 0000                       		dc.w byte_AE50-Ani_obj2D
0000B99A 0000                       		dc.w byte_AE54-Ani_obj2D
0000B99C 0000                       		dc.w byte_AE58-Ani_obj2D
0000B99E 0300 FF                    byte_AE4C:	dc.b 3,	0, $FF ; wait
0000B9A1 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF ; waddle
0000B9A5 0100 0102 0304 0506 0708+  byte_AE54:	dc.b 1,	0, 1, 2, 3, 4, 5, 6, 7, 8, 3, 9, $A, $FF ; speen
0000B9B3 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B9B6                            		even
0000B9B6                            		even
0000B9B6                            
0000B9B6                            ; ---------------------------------------------------------------------------
0000B9B6                            ; Sprite mappings - Burrobot enemy (LZ)
0000B9B6                            ; ---------------------------------------------------------------------------
0000B9B6                            Map_obj2D:
0000B9B6                            	include "_maps\obj2D.asm"
0000B9B6                            Map_e3a3:
0000B9B6 0000                       Map_e3a3_0: 	dc.w Map_e3a3_16-Map_e3a3
0000B9B8 0000                       Map_e3a3_2: 	dc.w Map_e3a3_21-Map_e3a3
0000B9BA 0000                       Map_e3a3_4: 	dc.w Map_e3a3_2C-Map_e3a3
0000B9BC 0000                       Map_e3a3_6: 	dc.w Map_e3a3_37-Map_e3a3
0000B9BE 0000                       Map_e3a3_8: 	dc.w Map_e3a3_42-Map_e3a3
0000B9C0 0000                       Map_e3a3_A: 	dc.w Map_e3a3_4D-Map_e3a3
0000B9C2 0000                       Map_e3a3_C: 	dc.w Map_e3a3_58-Map_e3a3
0000B9C4 0000                       Map_e3a3_E: 	dc.w Map_e3a3_63-Map_e3a3
0000B9C6 0000                       Map_e3a3_10: 	dc.w Map_e3a3_6E-Map_e3a3
0000B9C8 0000                       Map_e3a3_12: 	dc.w Map_e3a3_79-Map_e3a3
0000B9CA 0000                       Map_e3a3_14: 	dc.w Map_e3a3_84-Map_e3a3
0000B9CC 02                         Map_e3a3_16: 	dc.b $2
0000B9CD EC0B 0800 F4               	dc.b $EC, $B, $8, $0, $F4
0000B9D2 0C08 080C F4               	dc.b $C, $8, $8, $C, $F4
0000B9D7 02                         Map_e3a3_21: 	dc.b $2
0000B9D8 EC07 080F F8               	dc.b $EC, $7, $8, $F, $F8
0000B9DD 0C04 0817 F8               	dc.b $C, $4, $8, $17, $F8
0000B9E2 02                         Map_e3a3_2C: 	dc.b $2
0000B9E3 EC07 0819 F8               	dc.b $EC, $7, $8, $19, $F8
0000B9E8 0C04 0821 F8               	dc.b $C, $4, $8, $21, $F8
0000B9ED 02                         Map_e3a3_37: 	dc.b $2
0000B9EE EC02 0823 FC               	dc.b $EC, $2, $8, $23, $FC
0000B9F3 FC02 1823 FC               	dc.b $FC, $2, $18, $23, $FC
0000B9F8 02                         Map_e3a3_42: 	dc.b $2
0000B9F9 EC06 0826 F8               	dc.b $EC, $6, $8, $26, $F8
0000B9FE FC06 1826 F8               	dc.b $FC, $6, $18, $26, $F8
0000BA03 02                         Map_e3a3_4D: 	dc.b $2
0000BA04 EC06 082C F8               	dc.b $EC, $6, $8, $2C, $F8
0000BA09 FC06 182C F8               	dc.b $FC, $6, $18, $2C, $F8
0000BA0E 02                         Map_e3a3_58: 	dc.b $2
0000BA0F EC0A 0832 F4               	dc.b $EC, $A, $8, $32, $F4
0000BA14 FC0A 1832 F4               	dc.b $FC, $A, $18, $32, $F4
0000BA19 02                         Map_e3a3_63: 	dc.b $2
0000BA1A EC06 002C F8               	dc.b $EC, $6, $0, $2C, $F8
0000BA1F FC06 102C F8               	dc.b $FC, $6, $10, $2C, $F8
0000BA24 02                         Map_e3a3_6E: 	dc.b $2
0000BA25 EC06 0026 F8               	dc.b $EC, $6, $0, $26, $F8
0000BA2A FC06 1026 F8               	dc.b $FC, $6, $10, $26, $F8
0000BA2F 02                         Map_e3a3_79: 	dc.b $2
0000BA30 EC07 0019 F8               	dc.b $EC, $7, $0, $19, $F8
0000BA35 0C04 0021 F8               	dc.b $C, $4, $0, $21, $F8
0000BA3A 02                         Map_e3a3_84: 	dc.b $2
0000BA3B EC07 000F F8               	dc.b $EC, $7, $0, $F, $F8
0000BA40 0C04 0017 F8               	dc.b $C, $4, $0, $17, $F8
0000BA46 00                         	even
0000BA46 00                         	even
0000BA46                            
0000BA46                            ; ===========================================================================
0000BA46                            ; ---------------------------------------------------------------------------
0000BA46                            ; Object 2F - large moving platforms (MZ)
0000BA46                            ; ---------------------------------------------------------------------------
0000BA46                            
0000BA46                            Obj2F:					; XREF: Obj_Index
0000BA46 7000                       		moveq	#0,d0
0000BA48 1028 0024                  		move.b	$24(a0),d0
0000BA4C 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000BA50 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000BA54                            ; ===========================================================================
0000BA54 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000BA56 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000BA58                            
0000BA58 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000BA5A 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000BA5C 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000BA5E 0140                       		dc.b 1,	$40
0000BA60 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000BA62 0220                       		dc.b 2,	$20
0000BA64                            ; ===========================================================================
0000BA64                            
0000BA64                            Obj2F_Main:				; XREF: Obj2F_Index
0000BA64 5428 0024                  		addq.b	#2,$24(a0)
0000BA68 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000BA70 317C C000 0002             		move.w	#$C000,2(a0)
0000BA76 117C 0004 0001             		move.b	#4,1(a0)
0000BA7C 117C 0005 0018             		move.b	#5,$18(a0)
0000BA82 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000BA88 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000BA8E 7000                       		moveq	#0,d0
0000BA90 1028 0028                  		move.b	$28(a0),d0
0000BA94 E448                       		lsr.w	#2,d0
0000BA96 0240 001C                  		andi.w	#$1C,d0
0000BA9A 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000BA9E 3019                       		move.w	(a1)+,d0
0000BAA0 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000BAA4 214A 0030                  		move.l	a2,$30(a0)
0000BAA8 1159 001A                  		move.b	(a1)+,$1A(a0)
0000BAAC 1151 0019                  		move.b	(a1),$19(a0)
0000BAB0 0228 000F 0028             		andi.b	#$F,$28(a0)
0000BAB6 117C 0040 0016             		move.b	#$40,$16(a0)
0000BABC 08E8 0004 0001             		bset	#4,1(a0)
0000BAC2                            
0000BAC2                            Obj2F_Action:				; XREF: Obj2F_Index
0000BAC2 6100 0000                  		bsr.w	Obj2F_Types
0000BAC6 4A28 0025                  		tst.b	$25(a0)
0000BACA 6700                       		beq.s	Obj2F_Solid
0000BACC 7200                       		moveq	#0,d1
0000BACE 1228 0019                  		move.b	$19(a0),d1
0000BAD2 0641 000B                  		addi.w	#$B,d1
0000BAD6 6100 C564                  		bsr.w	ExitPlatform
0000BADA 0829 0003 0022             		btst	#3,$22(a1)
0000BAE0 6600 0000                  		bne.w	Obj2F_Slope
0000BAE4 4228 0025                  		clr.b	$25(a0)
0000BAE8 6000                       		bra.s	Obj2F_Display
0000BAEA                            ; ===========================================================================
0000BAEA                            
0000BAEA                            Obj2F_Slope:				; XREF: Obj2F_Action
0000BAEA 7200                       		moveq	#0,d1
0000BAEC 1228 0019                  		move.b	$19(a0),d1
0000BAF0 0641 000B                  		addi.w	#$B,d1
0000BAF4 2468 0030                  		movea.l	$30(a0),a2
0000BAF8 3428 0008                  		move.w	8(a0),d2
0000BAFC 6100 D52E                  		bsr.w	SlopeObject2
0000BB00 6000                       		bra.s	Obj2F_Display
0000BB02                            ; ===========================================================================
0000BB02                            
0000BB02                            Obj2F_Solid:				; XREF: Obj2F_Action
0000BB02 7200                       		moveq	#0,d1
0000BB04 1228 0019                  		move.b	$19(a0),d1
0000BB08 0641 000B                  		addi.w	#$B,d1
0000BB0C 343C 0020                  		move.w	#$20,d2
0000BB10 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000BB16 6600                       		bne.s	loc_AF8E
0000BB18 343C 0030                  		move.w	#$30,d2
0000BB1C                            
0000BB1C                            loc_AF8E:
0000BB1C 2468 0030                  		movea.l	$30(a0),a2
0000BB20 6100 0000                  		bsr.w	SolidObject2F
0000BB24                            
0000BB24                            Obj2F_Display:				; XREF: Obj2F_Action
0000BB24 6100 0000                  		bsr.w	DisplaySprite
0000BB28 6000 0000                  		bra.w	Obj2F_ChkDel
0000BB2C                            
0000BB2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BB2C                            
0000BB2C                            
0000BB2C                            Obj2F_Types:				; XREF: Obj2F_Action
0000BB2C 7000                       		moveq	#0,d0
0000BB2E 1028 0028                  		move.b	$28(a0),d0
0000BB32 0240 0007                  		andi.w	#7,d0
0000BB36 D040                       		add.w	d0,d0
0000BB38 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000BB3C 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000BB40                            ; End of function Obj2F_Types
0000BB40                            
0000BB40                            ; ===========================================================================
0000BB40 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000BB42 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000BB44 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000BB46 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000BB48 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000BB4A 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000BB4C                            ; ===========================================================================
0000BB4C                            
0000BB4C                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000BB4C 4E75                       		rts			; type 00 platform doesn't move
0000BB4E                            ; ===========================================================================
0000BB4E                            
0000BB4E                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000BB4E 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000BB52 323C 0020                  		move.w	#$20,d1
0000BB56 6000                       		bra.s	Obj2F_Move
0000BB58                            ; ===========================================================================
0000BB58                            
0000BB58                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000BB58 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000BB5C 323C 0030                  		move.w	#$30,d1
0000BB60 6000                       		bra.s	Obj2F_Move
0000BB62                            ; ===========================================================================
0000BB62                            
0000BB62                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000BB62 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000BB66 323C 0040                  		move.w	#$40,d1
0000BB6A 6000                       		bra.s	Obj2F_Move
0000BB6C                            ; ===========================================================================
0000BB6C                            
0000BB6C                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000BB6C 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000BB70 323C 0060                  		move.w	#$60,d1
0000BB74                            
0000BB74                            Obj2F_Move:
0000BB74 0828 0003 0028             		btst	#3,$28(a0)
0000BB7A 6700                       		beq.s	loc_AFF2
0000BB7C 4440                       		neg.w	d0
0000BB7E D041                       		add.w	d1,d0
0000BB80                            
0000BB80                            loc_AFF2:
0000BB80 3228 002C                  		move.w	$2C(a0),d1
0000BB84 9240                       		sub.w	d0,d1
0000BB86 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000BB8A 4E75                       		rts	
0000BB8C                            ; ===========================================================================
0000BB8C                            
0000BB8C                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000BB8C 1028 0034                  		move.b	$34(a0),d0
0000BB90 4A28 0025                  		tst.b	$25(a0)
0000BB94 6600                       		bne.s	loc_B010
0000BB96 5500                       		subq.b	#2,d0
0000BB98 6400                       		bcc.s	loc_B01C
0000BB9A 7000                       		moveq	#0,d0
0000BB9C 6000                       		bra.s	loc_B01C
0000BB9E                            ; ===========================================================================
0000BB9E                            
0000BB9E                            loc_B010:
0000BB9E 5800                       		addq.b	#4,d0
0000BBA0 0C00 0040                  		cmpi.b	#$40,d0
0000BBA4 6500                       		bcs.s	loc_B01C
0000BBA6 103C 0040                  		move.b	#$40,d0
0000BBAA                            
0000BBAA                            loc_B01C:
0000BBAA 1140 0034                  		move.b	d0,$34(a0)
0000BBAE 4EB9 0000 2D80             		jsr	(CalcSine).l
0000BBB4 E848                       		lsr.w	#4,d0
0000BBB6 3200                       		move.w	d0,d1
0000BBB8 D068 002C                  		add.w	$2C(a0),d0
0000BBBC 3140 000C                  		move.w	d0,$C(a0)
0000BBC0 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000BBC6 6600                       		bne.s	loc_B07A
0000BBC8 4A28 0035                  		tst.b	$35(a0)
0000BBCC 6600                       		bne.s	loc_B07A
0000BBCE 117C 0001 0035             		move.b	#1,$35(a0)
0000BBD4 6100 0000                  		bsr.w	SingleObjLoad2
0000BBD8 6600                       		bne.s	loc_B07A
0000BBDA 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000BBDE 3368 0008 0008             		move.w	8(a0),8(a1)
0000BBE4 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000BBEA 5069 002C                  		addq.w	#8,$2C(a1)
0000BBEE 5769 002C                  		subq.w	#3,$2C(a1)
0000BBF2 0469 0040 0008             		subi.w	#$40,8(a1)
0000BBF8 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000BBFE 2348 0038                  		move.l	a0,$38(a1)
0000BC02 2448                       		movea.l	a0,a2
0000BC04 6100                       		bsr.s	sub_B09C
0000BC06                            
0000BC06                            loc_B07A:
0000BC06 7400                       		moveq	#0,d2
0000BC08 45E8 0036                  		lea	$36(a0),a2
0000BC0C 141A                       		move.b	(a2)+,d2
0000BC0E 5302                       		subq.b	#1,d2
0000BC10 6500                       		bcs.s	locret_B09A
0000BC12                            
0000BC12                            loc_B086:
0000BC12 7000                       		moveq	#0,d0
0000BC14 101A                       		move.b	(a2)+,d0
0000BC16 ED48                       		lsl.w	#6,d0
0000BC18 0640 D000                  		addi.w	#-$3000,d0
0000BC1C 3240                       		movea.w	d0,a1
0000BC1E 3341 003C                  		move.w	d1,$3C(a1)
0000BC22 51CA FFEE                  		dbf	d2,loc_B086
0000BC26                            
0000BC26                            locret_B09A:
0000BC26 4E75                       		rts	
0000BC28                            
0000BC28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BC28                            
0000BC28                            
0000BC28                            sub_B09C:
0000BC28 45EA 0036                  		lea	$36(a2),a2
0000BC2C 7000                       		moveq	#0,d0
0000BC2E 1012                       		move.b	(a2),d0
0000BC30 5212                       		addq.b	#1,(a2)
0000BC32 45F2 0001                  		lea	1(a2,d0.w),a2
0000BC36 3009                       		move.w	a1,d0
0000BC38 0440 D000                  		subi.w	#-$3000,d0
0000BC3C EC48                       		lsr.w	#6,d0
0000BC3E 0240 007F                  		andi.w	#$7F,d0
0000BC42 1480                       		move.b	d0,(a2)
0000BC44 4E75                       		rts	
0000BC46                            ; End of function sub_B09C
0000BC46                            
0000BC46                            ; ===========================================================================
0000BC46                            
0000BC46                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000BC46 4A28 0035                  		tst.b	$35(a0)
0000BC4A 6700                       		beq.s	loc_B0C6
0000BC4C 4A28 0001                  		tst.b	1(a0)
0000BC50 6A00                       		bpl.s	Obj2F_DelFlames
0000BC52                            
0000BC52                            loc_B0C6:
0000BC52 3028 002A                  		move.w	$2A(a0),d0
0000BC56 0240 FF80                  		andi.w	#$FF80,d0
0000BC5A 3238 F700                  		move.w	($FFFFF700).w,d1
0000BC5E 0441 0080                  		subi.w	#$80,d1
0000BC62 0241 FF80                  		andi.w	#$FF80,d1
0000BC66 9041                       		sub.w	d1,d0
0000BC68 0C40 0280                  		cmpi.w	#$280,d0
0000BC6C 6200 0000                  		bhi.w	DeleteObject
0000BC70 4E75                       		rts	
0000BC72                            ; ===========================================================================
0000BC72                            
0000BC72                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000BC72 7400                       		moveq	#0,d2
0000BC74                            
0000BC74                            loc_B0E8:
0000BC74 45E8 0036                  		lea	$36(a0),a2
0000BC78 1412                       		move.b	(a2),d2
0000BC7A 421A                       		clr.b	(a2)+
0000BC7C 5302                       		subq.b	#1,d2
0000BC7E 6500                       		bcs.s	locret_B116
0000BC80                            
0000BC80                            loc_B0F4:
0000BC80 7000                       		moveq	#0,d0
0000BC82 1012                       		move.b	(a2),d0
0000BC84 421A                       		clr.b	(a2)+
0000BC86 ED48                       		lsl.w	#6,d0
0000BC88 0640 D000                  		addi.w	#-$3000,d0
0000BC8C 3240                       		movea.w	d0,a1
0000BC8E 6100 0000                  		bsr.w	DeleteObject2
0000BC92 51CA FFEC                  		dbf	d2,loc_B0F4
0000BC96 117C 0000 0035             		move.b	#0,$35(a0)
0000BC9C 117C 0000 0034             		move.b	#0,$34(a0)
0000BCA2                            
0000BCA2                            locret_B116:
0000BCA2 4E75                       		rts	
0000BCA4                            ; ===========================================================================
0000BCA4                            ; ---------------------------------------------------------------------------
0000BCA4                            ; Collision data for large moving platforms (MZ)
0000BCA4                            ; ---------------------------------------------------------------------------
0000BCA4                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000BCF0                            		even
0000BCF0                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000BD1C                            		even
0000BD1C                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000BD68                            		even
0000BD68                            ; ===========================================================================
0000BD68                            ; ---------------------------------------------------------------------------
0000BD68                            ; Object 35 - fireball that sits on the	floor (MZ)
0000BD68                            ; (appears when	you walk on sinking platforms)
0000BD68                            ; ---------------------------------------------------------------------------
0000BD68                            
0000BD68                            Obj35:					; XREF: Obj_Index
0000BD68 7000                       		moveq	#0,d0
0000BD6A 1028 0024                  		move.b	$24(a0),d0
0000BD6E 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000BD72 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000BD76                            ; ===========================================================================
0000BD76 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000BD78 0000                       		dc.w loc_B238-Obj35_Index
0000BD7A 0000                       		dc.w Obj35_Move-Obj35_Index
0000BD7C                            ; ===========================================================================
0000BD7C                            
0000BD7C                            Obj35_Main:				; XREF: Obj35_Index
0000BD7C 5428 0024                  		addq.b	#2,$24(a0)
0000BD80 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000BD88 317C 0345 0002             		move.w	#$345,2(a0)
0000BD8E 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000BD94 117C 0004 0001             		move.b	#4,1(a0)
0000BD9A 117C 0001 0018             		move.b	#1,$18(a0)
0000BDA0 117C 008B 0020             		move.b	#$8B,$20(a0)
0000BDA6 117C 0008 0019             		move.b	#8,$19(a0)
0000BDAC 303C 00C8                  		move.w	#$C8,d0
0000BDB0 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play flame sound
0000BDB6 4A28 0028                  		tst.b	$28(a0)
0000BDBA 6700                       		beq.s	loc_B238
0000BDBC 5428 0024                  		addq.b	#2,$24(a0)
0000BDC0 6000 0000                  		bra.w	Obj35_Move
0000BDC4                            ; ===========================================================================
0000BDC4                            
0000BDC4                            loc_B238:				; XREF: Obj35_Index
0000BDC4 2268 0030                  		movea.l	$30(a0),a1
0000BDC8 3228 0008                  		move.w	8(a0),d1
0000BDCC 9268 002A                  		sub.w	$2A(a0),d1
0000BDD0 0641 000C                  		addi.w	#$C,d1
0000BDD4 3001                       		move.w	d1,d0
0000BDD6 E248                       		lsr.w	#1,d0
0000BDD8 1031 0000                  		move.b	(a1,d0.w),d0
0000BDDC 4440                       		neg.w	d0
0000BDDE D068 002C                  		add.w	$2C(a0),d0
0000BDE2 3400                       		move.w	d0,d2
0000BDE4 D068 003C                  		add.w	$3C(a0),d0
0000BDE8 3140 000C                  		move.w	d0,$C(a0)
0000BDEC 0C41 0084                  		cmpi.w	#$84,d1
0000BDF0 6400                       		bcc.s	loc_B2B0
0000BDF2 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000BDFA 0C41 0080                  		cmpi.w	#$80,d1
0000BDFE 6400                       		bcc.s	loc_B2B0
0000BE00 2028 0008                  		move.l	8(a0),d0
0000BE04 0680 0008 0000             		addi.l	#$80000,d0
0000BE0A 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000BE10 6600                       		bne.s	loc_B2B0
0000BE12 6100 0000                  		bsr.w	SingleObjLoad2
0000BE16 6600                       		bne.s	loc_B2B0
0000BE18 12BC 0035                  		move.b	#$35,0(a1)
0000BE1C 3368 0008 0008             		move.w	8(a0),8(a1)
0000BE22 3342 002C                  		move.w	d2,$2C(a1)
0000BE26 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000BE2C 137C 0001 0028             		move.b	#1,$28(a1)
0000BE32 2468 0038                  		movea.l	$38(a0),a2
0000BE36 6100 FDF0                  		bsr.w	sub_B09C
0000BE3A                            
0000BE3A                            loc_B2B0:
0000BE3A 6000                       		bra.s	Obj35_Animate
0000BE3C                            ; ===========================================================================
0000BE3C                            
0000BE3C                            Obj35_Move:				; XREF: Obj35_Index
0000BE3C 3028 002C                  		move.w	$2C(a0),d0
0000BE40 D068 003C                  		add.w	$3C(a0),d0
0000BE44 3140 000C                  		move.w	d0,$C(a0)
0000BE48                            
0000BE48                            Obj35_Animate:				; XREF: loc_B238
0000BE48 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000BE4E 6100 F4AA                  		bsr.w	AnimateSprite
0000BE52 6000 0000                  		bra.w	DisplaySprite
0000BE56                            ; ===========================================================================
0000BE56                            Ani_obj35:
0000BE56                            	include "_anim\obj35.asm"
0000BE56                            ; ---------------------------------------------------------------------------
0000BE56                            ; Animation script - fireball that sits on the	floor (MZ)
0000BE56                            ; ---------------------------------------------------------------------------
0000BE56 0000                       		dc.w byte_B2CE-Ani_obj35
0000BE58 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000BE5E                            		even
0000BE5E                            		even
0000BE5E                            
0000BE5E                            ; ---------------------------------------------------------------------------
0000BE5E                            ; Sprite mappings - large moving platforms (MZ)
0000BE5E                            ; ---------------------------------------------------------------------------
0000BE5E                            Map_obj2F:
0000BE5E                            	include "_maps\obj2F.asm"
0000BE5E                            ; ---------------------------------------------------------------------------
0000BE5E                            ; Sprite mappings - large moving platforms (MZ)
0000BE5E                            ; ---------------------------------------------------------------------------
0000BE5E 0000                       		dc.w byte_B2DA-Map_obj2F
0000BE60 0000                       		dc.w byte_B31C-Map_obj2F
0000BE62 0000                       		dc.w byte_B34F-Map_obj2F
0000BE64 0D                         byte_B2DA:	dc.b $D
0000BE65 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000BE6A F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000BE6F 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BE74 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000BE79 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000BE7E F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BE83 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000BE88 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000BE8D F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000BE92 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BE97 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000BE9C D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000BEA1 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000BEA6 0A                         byte_B31C:	dc.b $A
0000BEA7 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000BEAC F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000BEB1 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BEB6 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000BEBB E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000BEC0 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BEC5 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000BECA E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000BECF C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000BED4 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000BED9 06                         byte_B34F:	dc.b 6
0000BEDA D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000BEDF F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BEE4 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000BEE9 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000BEEE F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BEF3 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000BEF8                            		even
0000BEF8                            		even
0000BEF8                            
0000BEF8                            ; ---------------------------------------------------------------------------
0000BEF8                            ; Sprite mappings - lava balls (MZ, SLZ)
0000BEF8                            ; ---------------------------------------------------------------------------
0000BEF8                            Map_obj14:
0000BEF8                            	include "_maps\obj14.asm"
0000BEF8                            ; --------------------------------------------------------------------------------
0000BEF8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BEF8                            ; --------------------------------------------------------------------------------
0000BEF8                            
0000BEF8                            SME_C6wT7:	
0000BEF8 0000 0000                  		dc.w SME_C6wT7_C-SME_C6wT7, SME_C6wT7_12-SME_C6wT7	
0000BEFC 0000 0000                  		dc.w SME_C6wT7_18-SME_C6wT7, SME_C6wT7_23-SME_C6wT7	
0000BF00 0000 0000                  		dc.w SME_C6wT7_29-SME_C6wT7, SME_C6wT7_2F-SME_C6wT7	
0000BF04 01                         SME_C6wT7_C:	dc.b 1	
0000BF05 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BF0A 01                         SME_C6wT7_12:	dc.b 1	
0000BF0B E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BF10 02                         SME_C6wT7_18:	dc.b 2	
0000BF11 EF06 0010 F8               		dc.b $EF, 6, 0, $10, $F8	
0000BF16 E707 0016 08               		dc.b $E7, 7, 0, $16, 8	
0000BF1B 01                         SME_C6wT7_23:	dc.b 1	
0000BF1C F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BF21 01                         SME_C6wT7_29:	dc.b 1	
0000BF22 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BF27 01                         SME_C6wT7_2F:	dc.b 1	
0000BF28 F00B 001E E8               		dc.b $F0, $B, 0, $1E, $E8	
0000BF2E 00                         		even
0000BF2E 00                         		even
0000BF2E                            
0000BF2E                            ; ===========================================================================
0000BF2E                            ; ---------------------------------------------------------------------------
0000BF2E                            ; Object 30 - large green glassy blocks	(MZ)
0000BF2E                            ; ---------------------------------------------------------------------------
0000BF2E                            
0000BF2E                            Obj30:					; XREF: Obj_Index
0000BF2E 7000                       		moveq	#0,d0
0000BF30 1028 0024                  		move.b	$24(a0),d0
0000BF34 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000BF38 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000BF3C 3028 0008                  		move.w	8(a0),d0
0000BF40 0240 FF80                  		andi.w	#$FF80,d0
0000BF44 3238 F700                  		move.w	($FFFFF700).w,d1
0000BF48 0441 0080                  		subi.w	#$80,d1
0000BF4C 0241 FF80                  		andi.w	#$FF80,d1
0000BF50 9041                       		sub.w	d1,d0
0000BF52 0C40 0280                  		cmpi.w	#$280,d0
0000BF56 6200 0000                  		bhi.w	Obj30_Delete
0000BF5A 6000 0000                  		bra.w	DisplaySprite
0000BF5E                            ; ===========================================================================
0000BF5E                            
0000BF5E                            Obj30_Delete:
0000BF5E 6000 0000                  		bra.w	DeleteObject
0000BF62                            ; ===========================================================================
0000BF62 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000BF64 0000                       		dc.w Obj30_Block012-Obj30_Index
0000BF66 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000BF68 0000                       		dc.w Obj30_Block34-Obj30_Index
0000BF6A 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000BF6C                            
0000BF6C 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000BF6F 0400 01                    		dc.b 4,	0, 1
0000BF72 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000BF75 0800 01                    		dc.b 8,	0, 1
0000BF78                            ; ===========================================================================
0000BF78                            
0000BF78                            Obj30_Main:				; XREF: Obj30_Index
0000BF78 45F9 0000 BF6C             		lea	(Obj30_Vars1).l,a2
0000BF7E 7201                       		moveq	#1,d1
0000BF80 117C 0048 0016             		move.b	#$48,$16(a0)
0000BF86 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000BF8C 6500                       		bcs.s	loc_B40C	; if yes, branch
0000BF8E 45F9 0000 BF72             		lea	(Obj30_Vars2).l,a2
0000BF94 7201                       		moveq	#1,d1
0000BF96 117C 0038 0016             		move.b	#$38,$16(a0)
0000BF9C                            
0000BF9C                            loc_B40C:
0000BF9C 2248                       		movea.l	a0,a1
0000BF9E 6000                       		bra.s	Obj30_Load	; load main object
0000BFA0                            ; ===========================================================================
0000BFA0                            
0000BFA0                            Obj30_Loop:
0000BFA0 6100 0000                  		bsr.w	SingleObjLoad2
0000BFA4 6600                       		bne.s	loc_B480
0000BFA6                            
0000BFA6                            Obj30_Load:				; XREF: Obj30_Main
0000BFA6 135A 0024                  		move.b	(a2)+,$24(a1)
0000BFAA 12BC 0030                  		move.b	#$30,0(a1)
0000BFAE 3368 0008 0008             		move.w	8(a0),8(a1)
0000BFB4 101A                       		move.b	(a2)+,d0
0000BFB6 4880                       		ext.w	d0
0000BFB8 D068 000C                  		add.w	$C(a0),d0
0000BFBC 3340 000C                  		move.w	d0,$C(a1)
0000BFC0 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000BFC8 337C C38E 0002             		move.w	#$C38E,2(a1)
0000BFCE 137C 0004 0001             		move.b	#4,1(a1)
0000BFD4 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BFDA 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BFE0 137C 0020 0019             		move.b	#$20,$19(a1)
0000BFE6 137C 0004 0018             		move.b	#4,$18(a1)
0000BFEC 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BFF0 2348 003C                  		move.l	a0,$3C(a1)
0000BFF4 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000BFF8                            
0000BFF8 137C 0010 0019             		move.b	#$10,$19(a1)
0000BFFE 137C 0003 0018             		move.b	#3,$18(a1)
0000C004 5029 0028                  		addq.b	#8,$28(a1)
0000C008 0229 000F 0028             		andi.b	#$F,$28(a1)
0000C00E                            
0000C00E                            loc_B480:
0000C00E 317C 0090 0032             		move.w	#$90,$32(a0)
0000C014 08E8 0004 0001             		bset	#4,1(a0)
0000C01A                            
0000C01A                            Obj30_Block012:				; XREF: Obj30_Index
0000C01A 6100 0000                  		bsr.w	Obj30_Types
0000C01E 323C 002B                  		move.w	#$2B,d1
0000C022 343C 0048                  		move.w	#$48,d2
0000C026 363C 0049                  		move.w	#$49,d3
0000C02A 3828 0008                  		move.w	8(a0),d4
0000C02E 6000 0000                  		bra.w	SolidObject
0000C032                            ; ===========================================================================
0000C032                            
0000C032                            Obj30_Reflect012:			; XREF: Obj30_Index
0000C032 2268 003C                  		movea.l	$3C(a0),a1
0000C036 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000C03C 6000 0000                  		bra.w	Obj30_Types
0000C040                            ; ===========================================================================
0000C040                            
0000C040                            Obj30_Block34:				; XREF: Obj30_Index
0000C040 6100 0000                  		bsr.w	Obj30_Types
0000C044 323C 002B                  		move.w	#$2B,d1
0000C048 343C 0038                  		move.w	#$38,d2
0000C04C 363C 0039                  		move.w	#$39,d3
0000C050 3828 0008                  		move.w	8(a0),d4
0000C054 6000 0000                  		bra.w	SolidObject
0000C058                            ; ===========================================================================
0000C058                            
0000C058                            Obj30_Reflect34:			; XREF: Obj30_Index
0000C058 2268 003C                  		movea.l	$3C(a0),a1
0000C05C 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000C062 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000C068 6000 0002                  		bra.w	*+4
0000C06C                            
0000C06C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C06C                            
0000C06C                            
0000C06C                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000C06C 7000                       		moveq	#0,d0
0000C06E 1028 0028                  		move.b	$28(a0),d0
0000C072 0240 0007                  		andi.w	#7,d0
0000C076 D040                       		add.w	d0,d0
0000C078 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000C07C 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000C080                            ; End of function Obj30_Types
0000C080                            
0000C080                            ; ===========================================================================
0000C080 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000C082 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000C084 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000C086 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000C088 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000C08A                            ; ===========================================================================
0000C08A                            
0000C08A                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000C08A 4E75                       		rts	
0000C08C                            ; ===========================================================================
0000C08C                            
0000C08C                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000C08C 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C090 323C 0040                  		move.w	#$40,d1
0000C094 6000                       		bra.s	loc_B514
0000C096                            ; ===========================================================================
0000C096                            
0000C096                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000C096 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C09A 323C 0040                  		move.w	#$40,d1
0000C09E 4440                       		neg.w	d0
0000C0A0 D041                       		add.w	d1,d0
0000C0A2                            
0000C0A2                            loc_B514:				; XREF: Obj30_Type01
0000C0A2 0828 0003 0028             		btst	#3,$28(a0)
0000C0A8 6700                       		beq.s	loc_B526
0000C0AA 4440                       		neg.w	d0
0000C0AC D041                       		add.w	d1,d0
0000C0AE E208                       		lsr.b	#1,d0
0000C0B0 0640 0020                  		addi.w	#$20,d0
0000C0B4                            
0000C0B4                            loc_B526:
0000C0B4 6000 0000                  		bra.w	loc_B5EE
0000C0B8                            ; ===========================================================================
0000C0B8                            
0000C0B8                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000C0B8 0828 0003 0028             		btst	#3,$28(a0)
0000C0BE 6700                       		beq.s	loc_B53E
0000C0C0 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C0C4 0440 0010                  		subi.w	#$10,d0
0000C0C8 6000 0000                  		bra.w	loc_B5EE
0000C0CC                            ; ===========================================================================
0000C0CC                            
0000C0CC                            loc_B53E:
0000C0CC 0828 0003 0022             		btst	#3,$22(a0)
0000C0D2 6600                       		bne.s	loc_B54E
0000C0D4 08A8 0000 0034             		bclr	#0,$34(a0)
0000C0DA 6000                       		bra.s	loc_B582
0000C0DC                            ; ===========================================================================
0000C0DC                            
0000C0DC                            loc_B54E:
0000C0DC 4A28 0034                  		tst.b	$34(a0)
0000C0E0 6600                       		bne.s	loc_B582
0000C0E2 117C 0001 0034             		move.b	#1,$34(a0)
0000C0E8 08E8 0000 0035             		bset	#0,$35(a0)
0000C0EE 6700                       		beq.s	loc_B582
0000C0F0 08E8 0007 0034             		bset	#7,$34(a0)
0000C0F6 317C 0010 0036             		move.w	#$10,$36(a0)
0000C0FC 117C 000A 0038             		move.b	#$A,$38(a0)
0000C102 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000C108 6600                       		bne.s	loc_B582
0000C10A 317C 0040 0036             		move.w	#$40,$36(a0)
0000C110                            
0000C110                            loc_B582:
0000C110 4A28 0034                  		tst.b	$34(a0)
0000C114 6A00                       		bpl.s	loc_B5AA
0000C116 4A28 0038                  		tst.b	$38(a0)
0000C11A 6700                       		beq.s	loc_B594
0000C11C 5328 0038                  		subq.b	#1,$38(a0)
0000C120 6600                       		bne.s	loc_B5AA
0000C122                            
0000C122                            loc_B594:
0000C122 4A68 0032                  		tst.w	$32(a0)
0000C126 6700                       		beq.s	loc_B5A4
0000C128 5368 0032                  		subq.w	#1,$32(a0)
0000C12C 5368 0036                  		subq.w	#1,$36(a0)
0000C130 6600                       		bne.s	loc_B5AA
0000C132                            
0000C132                            loc_B5A4:
0000C132 08A8 0007 0034             		bclr	#7,$34(a0)
0000C138                            
0000C138                            loc_B5AA:
0000C138 3028 0032                  		move.w	$32(a0),d0
0000C13C 6000                       		bra.s	loc_B5EE
0000C13E                            ; ===========================================================================
0000C13E                            
0000C13E                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000C13E 0828 0003 0028             		btst	#3,$28(a0)
0000C144 6700                       		beq.s	Obj30_ChkSwitch
0000C146 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C14A 0440 0010                  		subi.w	#$10,d0
0000C14E 6000                       		bra.s	loc_B5EE
0000C150                            ; ===========================================================================
0000C150                            
0000C150                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000C150 4A28 0034                  		tst.b	$34(a0)
0000C154 6600                       		bne.s	loc_B5E0
0000C156 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000C15A 7000                       		moveq	#0,d0
0000C15C 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000C160 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000C162 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000C166 6700                       		beq.s	loc_B5EA	; if not, branch
0000C168 117C 0001 0034             		move.b	#1,$34(a0)
0000C16E                            
0000C16E                            loc_B5E0:
0000C16E 4A68 0032                  		tst.w	$32(a0)
0000C172 6700                       		beq.s	loc_B5EA
0000C174 5568 0032                  		subq.w	#2,$32(a0)
0000C178                            
0000C178                            loc_B5EA:
0000C178 3028 0032                  		move.w	$32(a0),d0
0000C17C                            
0000C17C                            loc_B5EE:
0000C17C 3228 0030                  		move.w	$30(a0),d1
0000C180 9240                       		sub.w	d0,d1
0000C182 3141 000C                  		move.w	d1,$C(a0)
0000C186 4E75                       		rts	
0000C188                            ; ===========================================================================
0000C188                            ; ---------------------------------------------------------------------------
0000C188                            ; Sprite mappings - large green	glassy blocks (MZ)
0000C188                            ; ---------------------------------------------------------------------------
0000C188                            Map_obj30:
0000C188                            	include "_maps\obj30.asm"
0000C188                            ; ---------------------------------------------------------------------------
0000C188                            ; Sprite mappings - large green	glassy blocks (MZ)
0000C188                            ; ---------------------------------------------------------------------------
0000C188 0000                       		dc.w byte_B600-Map_obj30
0000C18A 0000                       		dc.w byte_B63D-Map_obj30
0000C18C 0000                       		dc.w byte_B648-Map_obj30
0000C18E 0C                         byte_B600:	dc.b $C
0000C18F B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000C194 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000C199 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000C19E C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000C1A3 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000C1A8 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000C1AD 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000C1B2 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000C1B7 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000C1BC 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000C1C1 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000C1C6 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000C1CB 02                         byte_B63D:	dc.b 2
0000C1CC 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000C1D1 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000C1D6 0A                         byte_B648:	dc.b $A
0000C1D7 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000C1DC C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000C1E1 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000C1E6 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000C1EB F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000C1F0 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000C1F5 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000C1FA 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000C1FF 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000C204 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000C20A 00                         		even
0000C20A 00                         		even
0000C20A                            
0000C20A                            ; ===========================================================================
0000C20A                            ; ---------------------------------------------------------------------------
0000C20A                            ; Object 31 - stomping metal blocks on chains (MZ)
0000C20A                            ; ---------------------------------------------------------------------------
0000C20A                            
0000C20A                            Obj31:					; XREF: Obj_Index
0000C20A 7000                       		moveq	#0,d0
0000C20C 1028 0024                  		move.b	$24(a0),d0
0000C210 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000C214 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000C218                            ; ===========================================================================
0000C218 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000C21A 0000                       		dc.w loc_B798-Obj31_Index
0000C21C 0000                       		dc.w loc_B7FE-Obj31_Index
0000C21E 0000                       		dc.w Obj31_Display2-Obj31_Index
0000C220 0000                       		dc.w loc_B7E2-Obj31_Index
0000C222                            
0000C222 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000C224 0100                       		dc.b 1,	0
0000C226                            
0000C226 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000C229 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000C22C 08CC 03                    		dc.b 8,	$CC, 3
0000C22F 06F0 02                    		dc.b 6,	$F0, 2
0000C232                            
0000C232 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000C236 5000 7800                  		dc.w $5000, $7800
0000C23A 3800 5800                  		dc.w $3800, $5800
0000C23E B800                       		dc.w $B800
0000C240                            ; ===========================================================================
0000C240                            
0000C240                            Obj31_Main:				; XREF: Obj31_Index
0000C240 7000                       		moveq	#0,d0
0000C242 1028 0028                  		move.b	$28(a0),d0
0000C246 6A00                       		bpl.s	loc_B6CE
0000C248 0240 007F                  		andi.w	#$7F,d0
0000C24C D040                       		add.w	d0,d0
0000C24E 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000C252 115A 003A                  		move.b	(a2)+,$3A(a0)
0000C256 101A                       		move.b	(a2)+,d0
0000C258 1140 0028                  		move.b	d0,$28(a0)
0000C25C                            
0000C25C                            loc_B6CE:
0000C25C 0200 000F                  		andi.b	#$F,d0
0000C260 D040                       		add.w	d0,d0
0000C262 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000C266 4A40                       		tst.w	d0
0000C268 6600                       		bne.s	loc_B6E0
0000C26A 3142 0032                  		move.w	d2,$32(a0)
0000C26E                            
0000C26E                            loc_B6E0:
0000C26E 45F9 0000 C226             		lea	(Obj31_Var).l,a2
0000C274 2248                       		movea.l	a0,a1
0000C276 7203                       		moveq	#3,d1
0000C278 6000                       		bra.s	Obj31_MakeStomper
0000C27A                            ; ===========================================================================
0000C27A                            
0000C27A                            Obj31_Loop:
0000C27A 6100 0000                  		bsr.w	SingleObjLoad2
0000C27E 6600 0000                  		bne.w	Obj31_SetSize
0000C282                            
0000C282                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000C282 135A 0024                  		move.b	(a2)+,$24(a1)
0000C286 12BC 0031                  		move.b	#$31,0(a1)
0000C28A 3368 0008 0008             		move.w	8(a0),8(a1)
0000C290 101A                       		move.b	(a2)+,d0
0000C292 4880                       		ext.w	d0
0000C294 D068 000C                  		add.w	$C(a0),d0
0000C298 3340 000C                  		move.w	d0,$C(a1)
0000C29C 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000C2A4 337C 0300 0002             		move.w	#$300,2(a1)
0000C2AA 137C 0004 0001             		move.b	#4,1(a1)
0000C2B0 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000C2B6 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C2BC 137C 0010 0019             		move.b	#$10,$19(a1)
0000C2C2 3342 0034                  		move.w	d2,$34(a1)
0000C2C6 137C 0004 0018             		move.b	#4,$18(a1)
0000C2CC 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C2D0 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000C2D6 6600                       		bne.s	loc_B76A
0000C2D8 5341                       		subq.w	#1,d1
0000C2DA 1028 0028                  		move.b	$28(a0),d0
0000C2DE 0240 00F0                  		andi.w	#$F0,d0
0000C2E2 0C40 0020                  		cmpi.w	#$20,d0
0000C2E6 679A                       		beq.s	Obj31_MakeStomper
0000C2E8 137C 0038 0019             		move.b	#$38,$19(a1)
0000C2EE 137C 0090 0020             		move.b	#$90,$20(a1)
0000C2F4 5241                       		addq.w	#1,d1
0000C2F6                            
0000C2F6                            loc_B76A:
0000C2F6 2348 003C                  		move.l	a0,$3C(a1)
0000C2FA 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000C2FE                            
0000C2FE 137C 0003 0018             		move.b	#3,$18(a1)
0000C304                            
0000C304                            Obj31_SetSize:
0000C304 7000                       		moveq	#0,d0
0000C306 1028 0028                  		move.b	$28(a0),d0
0000C30A E648                       		lsr.w	#3,d0
0000C30C 0200 000E                  		andi.b	#$E,d0
0000C310 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000C314 115A 0019                  		move.b	(a2)+,$19(a0)
0000C318 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C31C 6000                       		bra.s	loc_B798
0000C31E                            ; ===========================================================================
0000C31E 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000C320 3009                       		dc.b $30, 9
0000C322 100A                       		dc.b $10, $A
0000C324                            ; ===========================================================================
0000C324                            
0000C324                            loc_B798:				; XREF: Obj31_Index
0000C324 6100 0000                  		bsr.w	Obj31_Types
0000C328 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000C32E 7200                       		moveq	#0,d1
0000C330 1228 0019                  		move.b	$19(a0),d1
0000C334 0641 000B                  		addi.w	#$B,d1
0000C338 343C 000C                  		move.w	#$C,d2
0000C33C 363C 000D                  		move.w	#$D,d3
0000C340 3828 0008                  		move.w	8(a0),d4
0000C344 6100 0000                  		bsr.w	SolidObject
0000C348 0828 0003 0022             		btst	#3,$22(a0)
0000C34E 6700                       		beq.s	Obj31_Display
0000C350 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C356 6400                       		bcc.s	Obj31_Display
0000C358 2448                       		movea.l	a0,a2
0000C35A 41F8 D000                  		lea	($FFFFD000).w,a0
0000C35E 4EB9 0000 0000             		jsr	KillSonic
0000C364 204A                       		movea.l	a2,a0
0000C366                            
0000C366                            Obj31_Display:
0000C366 6100 0000                  		bsr.w	DisplaySprite
0000C36A 6000 0000                  		bra.w	Obj31_ChkDel
0000C36E                            ; ===========================================================================
0000C36E                            
0000C36E                            loc_B7E2:				; XREF: Obj31_Index
0000C36E 117C 0080 0016             		move.b	#$80,$16(a0)
0000C374 08E8 0004 0001             		bset	#4,1(a0)
0000C37A 2268 003C                  		movea.l	$3C(a0),a1
0000C37E 1029 0032                  		move.b	$32(a1),d0
0000C382 EA08                       		lsr.b	#5,d0
0000C384 5600                       		addq.b	#3,d0
0000C386 1140 001A                  		move.b	d0,$1A(a0)
0000C38A                            
0000C38A                            loc_B7FE:				; XREF: Obj31_Index
0000C38A 2268 003C                  		movea.l	$3C(a0),a1
0000C38E 7000                       		moveq	#0,d0
0000C390 1029 0032                  		move.b	$32(a1),d0
0000C394 D068 0030                  		add.w	$30(a0),d0
0000C398 3140 000C                  		move.w	d0,$C(a0)
0000C39C                            
0000C39C                            Obj31_Display2:				; XREF: Obj31_Index
0000C39C 6100 0000                  		bsr.w	DisplaySprite
0000C3A0                            
0000C3A0                            Obj31_ChkDel:				; XREF: Obj31_Display
0000C3A0 3028 0008                  		move.w	8(a0),d0
0000C3A4 0240 FF80                  		andi.w	#$FF80,d0
0000C3A8 3238 F700                  		move.w	($FFFFF700).w,d1
0000C3AC 0441 0080                  		subi.w	#$80,d1
0000C3B0 0241 FF80                  		andi.w	#$FF80,d1
0000C3B4 9041                       		sub.w	d1,d0
0000C3B6 0C40 0280                  		cmpi.w	#$280,d0
0000C3BA 6200 0000                  		bhi.w	DeleteObject
0000C3BE 4E75                       		rts	
0000C3C0                            ; ===========================================================================
0000C3C0                            
0000C3C0                            Obj31_Types:				; XREF: loc_B798
0000C3C0 1028 0028                  		move.b	$28(a0),d0
0000C3C4 0240 000F                  		andi.w	#$F,d0
0000C3C8 D040                       		add.w	d0,d0
0000C3CA 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000C3CE 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000C3D2                            ; ===========================================================================
0000C3D2 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000C3D4 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C3D6 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C3D8 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C3DA 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C3DC 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C3DE 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C3E0                            ; ===========================================================================
0000C3E0                            
0000C3E0                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000C3E0 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000C3E4 7000                       		moveq	#0,d0
0000C3E6 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000C3EA 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000C3EE 6700                       		beq.s	loc_B8A8	; if not, branch
0000C3F0 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000C3F4 6A00                       		bpl.s	loc_B872
0000C3F6 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C3FC 6700                       		beq.s	loc_B8A0
0000C3FE                            
0000C3FE                            loc_B872:
0000C3FE 4A68 0032                  		tst.w	$32(a0)
0000C402 6700                       		beq.s	loc_B8A0
0000C404 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C408 0200 000F                  		andi.b	#$F,d0
0000C40C 6600                       		bne.s	loc_B892
0000C40E 4A28 0001                  		tst.b	1(a0)
0000C412 6A00                       		bpl.s	loc_B892
0000C414 303C 00C7                  		move.w	#$C7,d0
0000C418 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C41E                            
0000C41E                            loc_B892:
0000C41E 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C424 6400                       		bcc.s	Obj31_Restart
0000C426 317C 0000 0032             		move.w	#0,$32(a0)
0000C42C                            
0000C42C                            loc_B8A0:
0000C42C 317C 0000 0012             		move.w	#0,$12(a0)
0000C432 6000                       		bra.s	Obj31_Restart
0000C434                            ; ===========================================================================
0000C434                            
0000C434                            loc_B8A8:				; XREF: Obj31_Type00
0000C434 3228 0034                  		move.w	$34(a0),d1
0000C438 B268 0032                  		cmp.w	$32(a0),d1
0000C43C 6700                       		beq.s	Obj31_Restart
0000C43E 3028 0012                  		move.w	$12(a0),d0
0000C442 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C448 D168 0032                  		add.w	d0,$32(a0)
0000C44C B268 0032                  		cmp.w	$32(a0),d1
0000C450 6200                       		bhi.s	Obj31_Restart
0000C452 3141 0032                  		move.w	d1,$32(a0)
0000C456 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C45C 4A28 0001                  		tst.b	1(a0)
0000C460 6A00                       		bpl.s	Obj31_Restart
0000C462 303C 00BD                  		move.w	#$BD,d0
0000C466 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C46C                            
0000C46C                            Obj31_Restart:
0000C46C 7000                       		moveq	#0,d0
0000C46E 1028 0032                  		move.b	$32(a0),d0
0000C472 D068 0030                  		add.w	$30(a0),d0
0000C476 3140 000C                  		move.w	d0,$C(a0)
0000C47A 4E75                       		rts	
0000C47C                            ; ===========================================================================
0000C47C                            
0000C47C                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000C47C 4A68 0036                  		tst.w	$36(a0)
0000C480 6700                       		beq.s	loc_B938
0000C482 4A68 0038                  		tst.w	$38(a0)
0000C486 6700                       		beq.s	loc_B902
0000C488 5368 0038                  		subq.w	#1,$38(a0)
0000C48C 6000                       		bra.s	loc_B97C
0000C48E                            ; ===========================================================================
0000C48E                            
0000C48E                            loc_B902:
0000C48E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C492 0200 000F                  		andi.b	#$F,d0
0000C496 6600                       		bne.s	loc_B91C
0000C498 4A28 0001                  		tst.b	1(a0)
0000C49C 6A00                       		bpl.s	loc_B91C
0000C49E 303C 00C7                  		move.w	#$C7,d0
0000C4A2 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C4A8                            
0000C4A8                            loc_B91C:
0000C4A8 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C4AE 6400                       		bcc.s	loc_B97C
0000C4B0 317C 0000 0032             		move.w	#0,$32(a0)
0000C4B6 317C 0000 0012             		move.w	#0,$12(a0)
0000C4BC 317C 0000 0036             		move.w	#0,$36(a0)
0000C4C2 6000                       		bra.s	loc_B97C
0000C4C4                            ; ===========================================================================
0000C4C4                            
0000C4C4                            loc_B938:				; XREF: Obj31_Type01
0000C4C4 3228 0034                  		move.w	$34(a0),d1
0000C4C8 B268 0032                  		cmp.w	$32(a0),d1
0000C4CC 6700                       		beq.s	loc_B97C
0000C4CE 3028 0012                  		move.w	$12(a0),d0
0000C4D2 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C4D8 D168 0032                  		add.w	d0,$32(a0)
0000C4DC B268 0032                  		cmp.w	$32(a0),d1
0000C4E0 6200                       		bhi.s	loc_B97C
0000C4E2 3141 0032                  		move.w	d1,$32(a0)
0000C4E6 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C4EC 317C 0001 0036             		move.w	#1,$36(a0)
0000C4F2 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C4F8 4A28 0001                  		tst.b	1(a0)
0000C4FC 6A00                       		bpl.s	loc_B97C
0000C4FE 303C 00BD                  		move.w	#$BD,d0
0000C502 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C508                            
0000C508                            loc_B97C:
0000C508 6000 FF62                  		bra.w	Obj31_Restart
0000C50C                            ; ===========================================================================
0000C50C                            
0000C50C                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000C50C 3038 D008                  		move.w	($FFFFD008).w,d0
0000C510 9068 0008                  		sub.w	8(a0),d0
0000C514 6400                       		bcc.s	loc_B98C
0000C516 4440                       		neg.w	d0
0000C518                            
0000C518                            loc_B98C:
0000C518 0C40 0090                  		cmpi.w	#$90,d0
0000C51C 6400                       		bcc.s	loc_B996
0000C51E 5228 0028                  		addq.b	#1,$28(a0)
0000C522                            
0000C522                            loc_B996:
0000C522 6000 FF48                  		bra.w	Obj31_Restart
0000C526                            ; ===========================================================================
0000C526                            ; ---------------------------------------------------------------------------
0000C526                            ; Object 45 - spiked metal block from beta version (MZ)
0000C526                            ; ---------------------------------------------------------------------------
0000C526                            
0000C526                            Obj45:					; XREF: Obj_Index
0000C526 7000                       		moveq	#0,d0
0000C528 1028 0024                  		move.b	$24(a0),d0
0000C52C 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000C530 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000C534                            ; ===========================================================================
0000C534 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000C536 0000                       		dc.w Obj45_Solid-Obj45_Index
0000C538 0000                       		dc.w loc_BA8E-Obj45_Index
0000C53A 0000                       		dc.w Obj45_Display-Obj45_Index
0000C53C 0000                       		dc.w loc_BA7A-Obj45_Index
0000C53E                            
0000C53E 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000C541 04E4 01                    		dc.b	4, $E4,	  1
0000C544 0834 03                    		dc.b	8, $34,	  3
0000C547 0628 02                    		dc.b	6, $28,	  2
0000C54A                            
0000C54A 3800                       word_B9BE:	dc.w $3800
0000C54C A000                       		dc.w -$6000
0000C54E 5000                       		dc.w $5000
0000C550                            ; ===========================================================================
0000C550                            
0000C550                            Obj45_Main:				; XREF: Obj45_Index
0000C550 7000                       		moveq	#0,d0
0000C552 1028 0028                  		move.b	$28(a0),d0
0000C556 D040                       		add.w	d0,d0
0000C558 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000C55C 45F9 0000 C53E             		lea	(Obj45_Var).l,a2
0000C562 2248                       		movea.l	a0,a1
0000C564 7203                       		moveq	#3,d1
0000C566 6000                       		bra.s	Obj45_Load
0000C568                            ; ===========================================================================
0000C568                            
0000C568                            Obj45_Loop:
0000C568 6100 0000                  		bsr.w	SingleObjLoad2
0000C56C 6600                       		bne.s	loc_BA52
0000C56E                            
0000C56E                            Obj45_Load:				; XREF: Obj45_Main
0000C56E 135A 0024                  		move.b	(a2)+,$24(a1)
0000C572 12BC 0045                  		move.b	#$45,0(a1)
0000C576 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C57C 101A                       		move.b	(a2)+,d0
0000C57E 4880                       		ext.w	d0
0000C580 D068 0008                  		add.w	8(a0),d0
0000C584 3340 0008                  		move.w	d0,8(a1)
0000C588 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000C590 337C 0300 0002             		move.w	#$300,2(a1)
0000C596 137C 0004 0001             		move.b	#4,1(a1)
0000C59C 3369 0008 0030             		move.w	8(a1),$30(a1)
0000C5A2 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000C5A8 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C5AE 137C 0020 0019             		move.b	#$20,$19(a1)
0000C5B4 3342 0034                  		move.w	d2,$34(a1)
0000C5B8 137C 0004 0018             		move.b	#4,$18(a1)
0000C5BE 0C12 0001                  		cmpi.b	#1,(a2)
0000C5C2 6600                       		bne.s	loc_BA40
0000C5C4 137C 0091 0020             		move.b	#$91,$20(a1)
0000C5CA                            
0000C5CA                            loc_BA40:
0000C5CA 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C5CE 2348 003C                  		move.l	a0,$3C(a1)
0000C5D2 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000C5D6                            
0000C5D6 137C 0003 0018             		move.b	#3,$18(a1)
0000C5DC                            
0000C5DC                            loc_BA52:
0000C5DC 117C 0010 0019             		move.b	#$10,$19(a0)
0000C5E2                            
0000C5E2                            Obj45_Solid:				; XREF: Obj45_Index
0000C5E2 3F28 0008                  		move.w	8(a0),-(sp)
0000C5E6 6100 0000                  		bsr.w	Obj45_Move
0000C5EA 323C 0017                  		move.w	#$17,d1
0000C5EE 343C 0020                  		move.w	#$20,d2
0000C5F2 363C 0020                  		move.w	#$20,d3
0000C5F6 381F                       		move.w	(sp)+,d4
0000C5F8 6100 0000                  		bsr.w	SolidObject
0000C5FC 6100 0000                  		bsr.w	DisplaySprite
0000C600 6000 0000                  		bra.w	Obj45_ChkDel
0000C604                            ; ===========================================================================
0000C604                            
0000C604                            loc_BA7A:				; XREF: Obj45_Index
0000C604 2268 003C                  		movea.l	$3C(a0),a1
0000C608 1029 0032                  		move.b	$32(a1),d0
0000C60C 0600 0010                  		addi.b	#$10,d0
0000C610 EA08                       		lsr.b	#5,d0
0000C612 5600                       		addq.b	#3,d0
0000C614 1140 001A                  		move.b	d0,$1A(a0)
0000C618                            
0000C618                            loc_BA8E:				; XREF: Obj45_Index
0000C618 2268 003C                  		movea.l	$3C(a0),a1
0000C61C 7000                       		moveq	#0,d0
0000C61E 1029 0032                  		move.b	$32(a1),d0
0000C622 4440                       		neg.w	d0
0000C624 D068 0030                  		add.w	$30(a0),d0
0000C628 3140 0008                  		move.w	d0,8(a0)
0000C62C                            
0000C62C                            Obj45_Display:				; XREF: Obj45_Index
0000C62C 6100 0000                  		bsr.w	DisplaySprite
0000C630                            
0000C630                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000C630 3028 003A                  		move.w	$3A(a0),d0
0000C634 0240 FF80                  		andi.w	#$FF80,d0
0000C638 3238 F700                  		move.w	($FFFFF700).w,d1
0000C63C 0441 0080                  		subi.w	#$80,d1
0000C640 0241 FF80                  		andi.w	#$FF80,d1
0000C644 9041                       		sub.w	d1,d0
0000C646 0C40 0280                  		cmpi.w	#$280,d0
0000C64A 6200 0000                  		bhi.w	DeleteObject
0000C64E 4E75                       		rts	
0000C650                            
0000C650                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C650                            
0000C650                            
0000C650                            Obj45_Move:				; XREF: Obj45_Solid
0000C650 7000                       		moveq	#0,d0
0000C652 1028 0028                  		move.b	$28(a0),d0
0000C656 D040                       		add.w	d0,d0
0000C658 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000C65C 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000C660                            ; End of function Obj45_Move
0000C660                            
0000C660                            ; ===========================================================================
0000C660 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000C662 0000                       		dc.w loc_BADA-off_BAD6
0000C664                            ; ===========================================================================
0000C664                            
0000C664                            loc_BADA:				; XREF: off_BAD6
0000C664 4A68 0036                  		tst.w	$36(a0)
0000C668 6700                       		beq.s	loc_BB08
0000C66A 4A68 0038                  		tst.w	$38(a0)
0000C66E 6700                       		beq.s	loc_BAEC
0000C670 5368 0038                  		subq.w	#1,$38(a0)
0000C674 6000                       		bra.s	loc_BB3C
0000C676                            ; ===========================================================================
0000C676                            
0000C676                            loc_BAEC:
0000C676 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C67C 6400                       		bcc.s	loc_BB3C
0000C67E 317C 0000 0032             		move.w	#0,$32(a0)
0000C684 317C 0000 0010             		move.w	#0,$10(a0)
0000C68A 317C 0000 0036             		move.w	#0,$36(a0)
0000C690 6000                       		bra.s	loc_BB3C
0000C692                            ; ===========================================================================
0000C692                            
0000C692                            loc_BB08:				; XREF: loc_BADA
0000C692 3228 0034                  		move.w	$34(a0),d1
0000C696 B268 0032                  		cmp.w	$32(a0),d1
0000C69A 6700                       		beq.s	loc_BB3C
0000C69C 3028 0010                  		move.w	$10(a0),d0
0000C6A0 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C6A6 D168 0032                  		add.w	d0,$32(a0)
0000C6AA B268 0032                  		cmp.w	$32(a0),d1
0000C6AE 6200                       		bhi.s	loc_BB3C
0000C6B0 3141 0032                  		move.w	d1,$32(a0)
0000C6B4 317C 0000 0010             		move.w	#0,$10(a0)
0000C6BA 317C 0001 0036             		move.w	#1,$36(a0)
0000C6C0 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C6C6                            
0000C6C6                            loc_BB3C:
0000C6C6 7000                       		moveq	#0,d0
0000C6C8 1028 0032                  		move.b	$32(a0),d0
0000C6CC 4440                       		neg.w	d0
0000C6CE D068 0030                  		add.w	$30(a0),d0
0000C6D2 3140 0008                  		move.w	d0,8(a0)
0000C6D6 4E75                       		rts	
0000C6D8                            ; ===========================================================================
0000C6D8                            ; ---------------------------------------------------------------------------
0000C6D8                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C6D8                            ; ---------------------------------------------------------------------------
0000C6D8                            Map_obj31:
0000C6D8                            	include "_maps\obj31.asm"
0000C6D8                            ; ---------------------------------------------------------------------------
0000C6D8                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C6D8                            ; ---------------------------------------------------------------------------
0000C6D8 0000                       		dc.w byte_BB64-Map_obj31
0000C6DA 0000                       		dc.w byte_BB7E-Map_obj31
0000C6DC 0000                       		dc.w byte_BB98-Map_obj31
0000C6DE 0000                       		dc.w byte_BB9E-Map_obj31
0000C6E0 0000                       		dc.w byte_BBA9-Map_obj31
0000C6E2 0000                       		dc.w byte_BBBE-Map_obj31
0000C6E4 0000                       		dc.w byte_BBDD-Map_obj31
0000C6E6 0000                       		dc.w byte_BC06-Map_obj31
0000C6E8 0000                       		dc.w byte_BC06-Map_obj31
0000C6EA 0000                       		dc.w byte_BC39-Map_obj31
0000C6EC 0000                       		dc.w byte_BC53-Map_obj31
0000C6EE 05                         byte_BB64:	dc.b 5
0000C6EF F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C6F4 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C6F9 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C6FE F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C703 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C708 05                         byte_BB7E:	dc.b 5
0000C709 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C70E F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C713 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C718 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C71D F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C722 01                         byte_BB98:	dc.b 1
0000C723 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C728 02                         byte_BB9E:	dc.b 2
0000C729 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C72E 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C733 04                         byte_BBA9:	dc.b 4
0000C734 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C739 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C73E 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C743 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C748 06                         byte_BBBE:	dc.b 6
0000C749 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C74E D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C753 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C758 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C75D 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C762 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C767 08                         byte_BBDD:	dc.b 8
0000C768 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C76D B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C772 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C777 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C77C E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C781 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C786 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C78B 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C790 0A                         byte_BC06:	dc.b $A
0000C791 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C796 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C79B A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C7A0 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C7A5 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C7AA D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C7AF E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C7B4 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C7B9 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C7BE 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C7C3 05                         byte_BC39:	dc.b 5
0000C7C4 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C7C9 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C7CE F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C7D3 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C7D8 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C7DD 01                         byte_BC53:	dc.b 1
0000C7DE EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C7E4 00                         		even
0000C7E4 00                         		even
0000C7E4                            
0000C7E4                            ; ---------------------------------------------------------------------------
0000C7E4                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C7E4                            ; ---------------------------------------------------------------------------
0000C7E4                            Map_obj45:
0000C7E4                            	include "_maps\obj45.asm"
0000C7E4                            ; ---------------------------------------------------------------------------
0000C7E4                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C7E4                            ; ---------------------------------------------------------------------------
0000C7E4 0000                       		dc.w byte_BC6C-Map_obj45
0000C7E6 0000                       		dc.w byte_BC7C-Map_obj45
0000C7E8 0000                       		dc.w byte_BC8C-Map_obj45
0000C7EA 0000                       		dc.w byte_BC92-Map_obj45
0000C7EC 0000                       		dc.w byte_BC9D-Map_obj45
0000C7EE 0000                       		dc.w byte_BCB2-Map_obj45
0000C7F0 0000                       		dc.w byte_BCD1-Map_obj45
0000C7F2 0000                       		dc.w byte_BCFA-Map_obj45
0000C7F4 0000                       		dc.w byte_BCFA-Map_obj45
0000C7F6 03                         byte_BC6C:	dc.b 3
0000C7F7 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C7FC 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C801 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C806 03                         byte_BC7C:	dc.b 3
0000C807 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C80C FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C811 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C816 01                         byte_BC8C:	dc.b 1
0000C817 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C81C 02                         byte_BC92:	dc.b 2
0000C81D F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C822 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C827 04                         byte_BC9D:	dc.b 4
0000C828 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C82D F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C832 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C837 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C83C 06                         byte_BCB2:	dc.b 6
0000C83D F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C842 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C847 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C84C F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C851 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C856 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C85B 08                         byte_BCD1:	dc.b 8
0000C85C F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C861 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C866 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C86B F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C870 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C875 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C87A F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C87F F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C884 08                         byte_BCFA:	dc.b 8
0000C885 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C88A F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C88F F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C894 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C899 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C89E F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C8A3 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C8A8 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C8AD F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C8B2 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C8B8 00                         		even
0000C8B8 00                         		even
0000C8B8                            
0000C8B8                            ; ===========================================================================
0000C8B8                            ; ---------------------------------------------------------------------------
0000C8B8                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C8B8                            ; ---------------------------------------------------------------------------
0000C8B8                            
0000C8B8                            Obj32:					; XREF: Obj_Index
0000C8B8 7000                       		moveq	#0,d0
0000C8BA 1028 0024                  		move.b	$24(a0),d0
0000C8BE 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C8C2 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C8C6                            ; ===========================================================================
0000C8C6 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C8C8 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C8CA                            ; ===========================================================================
0000C8CA                            
0000C8CA                            Obj32_Main:				; XREF: Obj32_Index
0000C8CA 5428 0024                  		addq.b	#2,$24(a0)
0000C8CE 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C8D6 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C8DC 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C8E2 6700                       		beq.s	loc_BD60
0000C8E4 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C8EA                            
0000C8EA                            loc_BD60:
0000C8EA 117C 0004 0001             		move.b	#4,1(a0)
0000C8F0 117C 0010 0019             		move.b	#$10,$19(a0)
0000C8F6 117C 0004 0018             		move.b	#4,$18(a0)
0000C8FC 5668 000C                  		addq.w	#3,$C(a0)
0000C900                            
0000C900                            Obj32_Pressed:				; XREF: Obj32_Index
0000C900 4A28 0001                  		tst.b	1(a0)
0000C904 6A00                       		bpl.s	Obj32_Display
0000C906 323C 001B                  		move.w	#$1B,d1
0000C90A 343C 0005                  		move.w	#5,d2
0000C90E 363C 0005                  		move.w	#5,d3
0000C912 3828 0008                  		move.w	8(a0),d4
0000C916 6100 0000                  		bsr.w	SolidObject
0000C91A 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C920 1028 0028                  		move.b	$28(a0),d0
0000C924 0240 000F                  		andi.w	#$F,d0
0000C928 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C92C 47F3 0000                  		lea	(a3,d0.w),a3
0000C930 7600                       		moveq	#0,d3
0000C932 0828 0006 0028             		btst	#6,$28(a0)
0000C938 6700                       		beq.s	loc_BDB2
0000C93A 7607                       		moveq	#7,d3
0000C93C                            
0000C93C                            loc_BDB2:
0000C93C 4A28 0028                  		tst.b	$28(a0)
0000C940 6A00                       		bpl.s	loc_BDBE
0000C942 6100 0000                  		bsr.w	Obj32_MZBlock
0000C946 6600                       		bne.s	loc_BDC8
0000C948                            
0000C948                            loc_BDBE:
0000C948 4A28 0025                  		tst.b	$25(a0)
0000C94C 6600                       		bne.s	loc_BDC8
0000C94E 0793                       		bclr	d3,(a3)
0000C950 6000                       		bra.s	loc_BDDE
0000C952                            ; ===========================================================================
0000C952                            
0000C952                            loc_BDC8:
0000C952 4A13                       		tst.b	(a3)
0000C954 6600                       		bne.s	loc_BDD6
0000C956 303C 00CD                  		move.w	#$CD,d0
0000C95A 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play switch sound
0000C960                            
0000C960                            loc_BDD6:
0000C960 07D3                       		bset	d3,(a3)
0000C962 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C968                            
0000C968                            loc_BDDE:
0000C968 0828 0005 0028             		btst	#5,$28(a0)
0000C96E 6700                       		beq.s	Obj32_Display
0000C970 5328 001E                  		subq.b	#1,$1E(a0)
0000C974 6A00                       		bpl.s	Obj32_Display
0000C976 117C 0007 001E             		move.b	#7,$1E(a0)
0000C97C 0868 0001 001A             		bchg	#1,$1A(a0)
0000C982                            
0000C982                            Obj32_Display:
0000C982 6100 0000                  		bsr.w	DisplaySprite
0000C986 3028 0008                  		move.w	8(a0),d0
0000C98A 0240 FF80                  		andi.w	#$FF80,d0
0000C98E 3238 F700                  		move.w	($FFFFF700).w,d1
0000C992 0441 0080                  		subi.w	#$80,d1
0000C996 0241 FF80                  		andi.w	#$FF80,d1
0000C99A 9041                       		sub.w	d1,d0
0000C99C 0C40 0280                  		cmpi.w	#$280,d0
0000C9A0 6200 0000                  		bhi.w	Obj32_Delete
0000C9A4 4E75                       		rts	
0000C9A6                            ; ===========================================================================
0000C9A6                            
0000C9A6                            Obj32_Delete:
0000C9A6 6100 0000                  		bsr.w	DeleteObject
0000C9AA 4E75                       		rts	
0000C9AC                            
0000C9AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C9AC                            
0000C9AC                            
0000C9AC                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C9AC 3F03                       		move.w	d3,-(sp)
0000C9AE 3428 0008                  		move.w	8(a0),d2
0000C9B2 3628 000C                  		move.w	$C(a0),d3
0000C9B6 0442 0010                  		subi.w	#$10,d2
0000C9BA 5143                       		subq.w	#8,d3
0000C9BC 383C 0020                  		move.w	#$20,d4
0000C9C0 3A3C 0010                  		move.w	#$10,d5
0000C9C4 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C9C8 3C3C 005F                  		move.w	#$5F,d6
0000C9CC                            
0000C9CC                            Obj32_MZLoop:
0000C9CC 4A29 0001                  		tst.b	1(a1)
0000C9D0 6A00                       		bpl.s	loc_BE4E
0000C9D2 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C9D6 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C9D8                            
0000C9D8                            loc_BE4E:
0000C9D8 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C9DC 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C9E0                            
0000C9E0 361F                       		move.w	(sp)+,d3
0000C9E2 7000                       		moveq	#0,d0
0000C9E4                            
0000C9E4                            locret_BE5A:
0000C9E4 4E75                       		rts	
0000C9E6                            ; ===========================================================================
0000C9E6 1010                       Obj32_MZData:	dc.b $10, $10
0000C9E8                            ; ===========================================================================
0000C9E8                            
0000C9E8                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C9E8 7001                       		moveq	#1,d0
0000C9EA 0240 003F                  		andi.w	#$3F,d0
0000C9EE D040                       		add.w	d0,d0
0000C9F0 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C9F4 121A                       		move.b	(a2)+,d1
0000C9F6 4881                       		ext.w	d1
0000C9F8 3029 0008                  		move.w	8(a1),d0
0000C9FC 9041                       		sub.w	d1,d0
0000C9FE 9042                       		sub.w	d2,d0
0000CA00 6400                       		bcc.s	loc_BE80
0000CA02 D241                       		add.w	d1,d1
0000CA04 D041                       		add.w	d1,d0
0000CA06 6500                       		bcs.s	loc_BE84
0000CA08 60CE                       		bra.s	loc_BE4E
0000CA0A                            ; ===========================================================================
0000CA0A                            
0000CA0A                            loc_BE80:
0000CA0A B044                       		cmp.w	d4,d0
0000CA0C 62CA                       		bhi.s	loc_BE4E
0000CA0E                            
0000CA0E                            loc_BE84:
0000CA0E 121A                       		move.b	(a2)+,d1
0000CA10 4881                       		ext.w	d1
0000CA12 3029 000C                  		move.w	$C(a1),d0
0000CA16 9041                       		sub.w	d1,d0
0000CA18 9043                       		sub.w	d3,d0
0000CA1A 6400                       		bcc.s	loc_BE9A
0000CA1C D241                       		add.w	d1,d1
0000CA1E D041                       		add.w	d1,d0
0000CA20 6500                       		bcs.s	loc_BE9E
0000CA22 60B4                       		bra.s	loc_BE4E
0000CA24                            ; ===========================================================================
0000CA24                            
0000CA24                            loc_BE9A:
0000CA24 B045                       		cmp.w	d5,d0
0000CA26 62B0                       		bhi.s	loc_BE4E
0000CA28                            
0000CA28                            loc_BE9E:
0000CA28 361F                       		move.w	(sp)+,d3
0000CA2A 7001                       		moveq	#1,d0
0000CA2C 4E75                       		rts	
0000CA2E                            ; End of function Obj32_MZBlock
0000CA2E                            
0000CA2E                            ; ===========================================================================
0000CA2E                            ; ---------------------------------------------------------------------------
0000CA2E                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000CA2E                            ; ---------------------------------------------------------------------------
0000CA2E                            Map_obj32:
0000CA2E                            	include "_maps\obj32.asm"
0000CA2E                            ; ---------------------------------------------------------------------------
0000CA2E                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000CA2E                            ; ---------------------------------------------------------------------------
0000CA2E 0000                       		dc.w byte_BEAC-Map_obj32
0000CA30 0000                       		dc.w byte_BEB7-Map_obj32
0000CA32 0000                       		dc.w byte_BEC2-Map_obj32
0000CA34 0000                       		dc.w byte_BEB7-Map_obj32
0000CA36 02                         byte_BEAC:	dc.b 2
0000CA37 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000CA3C F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000CA41 02                         byte_BEB7:	dc.b 2
0000CA42 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000CA47 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000CA4C 02                         byte_BEC2:	dc.b 2
0000CA4D F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000CA52 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000CA57 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000CA5C                            		even
0000CA5C                            		even
0000CA5C                            
0000CA5C                            ; ===========================================================================
0000CA5C                            ; ---------------------------------------------------------------------------
0000CA5C                            ; Object 33 - pushable blocks (MZ, LZ)
0000CA5C                            ; ---------------------------------------------------------------------------
0000CA5C                            
0000CA5C                            Obj33:					; XREF: Obj_Index
0000CA5C 7000                       		moveq	#0,d0
0000CA5E 1028 0024                  		move.b	$24(a0),d0
0000CA62 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000CA66 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000CA6A                            ; ===========================================================================
0000CA6A 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000CA6C 0000                       		dc.w loc_BF6E-Obj33_Index
0000CA6E 0000                       		dc.w loc_C02C-Obj33_Index
0000CA70                            
0000CA70 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000CA72 4001                       		dc.b $40, 1
0000CA74                            ; ===========================================================================
0000CA74                            
0000CA74                            Obj33_Main:				; XREF: Obj33_Index
0000CA74 5428 0024                  		addq.b	#2,$24(a0)
0000CA78 117C 000F 0016             		move.b	#$F,$16(a0)
0000CA7E 117C 000F 0017             		move.b	#$F,$17(a0)
0000CA84 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000CA8C 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000CA92 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000CA98 6600                       		bne.s	loc_BF16
0000CA9A 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000CAA0                            
0000CAA0                            loc_BF16:
0000CAA0 117C 0004 0001             		move.b	#4,1(a0)
0000CAA6 117C 0003 0018             		move.b	#3,$18(a0)
0000CAAC 3168 0008 0034             		move.w	8(a0),$34(a0)
0000CAB2 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000CAB8 7000                       		moveq	#0,d0
0000CABA 1028 0028                  		move.b	$28(a0),d0
0000CABE D040                       		add.w	d0,d0
0000CAC0 0240 000E                  		andi.w	#$E,d0
0000CAC4 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000CAC8 115A 0019                  		move.b	(a2)+,$19(a0)
0000CACC 115A 001A                  		move.b	(a2)+,$1A(a0)
0000CAD0 4A28 0028                  		tst.b	$28(a0)
0000CAD4 6700                       		beq.s	Obj33_ChkGone
0000CAD6 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000CADC                            
0000CADC                            Obj33_ChkGone:
0000CADC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000CAE0 7000                       		moveq	#0,d0
0000CAE2 1028 0023                  		move.b	$23(a0),d0
0000CAE6 6700                       		beq.s	loc_BF6E
0000CAE8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000CAEE 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000CAF4 6600 0000                  		bne.w	DeleteObject
0000CAF8                            
0000CAF8                            loc_BF6E:				; XREF: Obj33_Index
0000CAF8 4A28 0032                  		tst.b	$32(a0)
0000CAFC 6600 0000                  		bne.w	loc_C046
0000CB00 7200                       		moveq	#0,d1
0000CB02 1228 0019                  		move.b	$19(a0),d1
0000CB06 0641 000B                  		addi.w	#$B,d1
0000CB0A 343C 0010                  		move.w	#$10,d2
0000CB0E 363C 0011                  		move.w	#$11,d3
0000CB12 3828 0008                  		move.w	8(a0),d4
0000CB16 6100 0000                  		bsr.w	loc_C186
0000CB1A 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000CB20 6600                       		bne.s	loc_BFC6	; if not, branch
0000CB22 08A8 0007 0028             		bclr	#7,$28(a0)
0000CB28 3028 0008                  		move.w	8(a0),d0
0000CB2C 0C40 0A20                  		cmpi.w	#$A20,d0
0000CB30 6500                       		bcs.s	loc_BFC6
0000CB32 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000CB36 6400                       		bcc.s	loc_BFC6
0000CB38 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000CB3C 0440 001C                  		subi.w	#$1C,d0
0000CB40 3140 000C                  		move.w	d0,$C(a0)
0000CB44 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000CB4A 08E8 0007 0028             		bset	#7,$28(a0)
0000CB50                            
0000CB50                            loc_BFC6:
0000CB50 3028 0008                  		move.w	8(a0),d0
0000CB54 0240 FF80                  		andi.w	#$FF80,d0
0000CB58 3238 F700                  		move.w	($FFFFF700).w,d1
0000CB5C 0441 0080                  		subi.w	#$80,d1
0000CB60 0241 FF80                  		andi.w	#$FF80,d1
0000CB64 9041                       		sub.w	d1,d0
0000CB66 0C40 0280                  		cmpi.w	#$280,d0
0000CB6A 6200                       		bhi.s	loc_BFE6
0000CB6C 6000 0000                  		bra.w	DisplaySprite
0000CB70                            ; ===========================================================================
0000CB70                            
0000CB70                            loc_BFE6:
0000CB70 3028 0034                  		move.w	$34(a0),d0
0000CB74 0240 FF80                  		andi.w	#$FF80,d0
0000CB78 3238 F700                  		move.w	($FFFFF700).w,d1
0000CB7C 0441 0080                  		subi.w	#$80,d1
0000CB80 0241 FF80                  		andi.w	#$FF80,d1
0000CB84 9041                       		sub.w	d1,d0
0000CB86 0C40 0280                  		cmpi.w	#$280,d0
0000CB8A 6200                       		bhi.s	loc_C016
0000CB8C 3168 0034 0008             		move.w	$34(a0),8(a0)
0000CB92 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000CB98 117C 0004 0024             		move.b	#4,$24(a0)
0000CB9E 6000                       		bra.s	loc_C02C
0000CBA0                            ; ===========================================================================
0000CBA0                            
0000CBA0                            loc_C016:
0000CBA0 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000CBA4 7000                       		moveq	#0,d0
0000CBA6 1028 0023                  		move.b	$23(a0),d0
0000CBAA 6700                       		beq.s	loc_C028
0000CBAC 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000CBB2                            
0000CBB2                            loc_C028:
0000CBB2 6000 0000                  		bra.w	DeleteObject
0000CBB6                            ; ===========================================================================
0000CBB6                            
0000CBB6                            loc_C02C:				; XREF: Obj33_Index
0000CBB6 6100 0000                  		bsr.w	ChkObjOnScreen2
0000CBBA 6700                       		beq.s	locret_C044
0000CBBC 117C 0002 0024             		move.b	#2,$24(a0)
0000CBC2 4228 0032                  		clr.b	$32(a0)
0000CBC6 4268 0010                  		clr.w	$10(a0)
0000CBCA 4268 0012                  		clr.w	$12(a0)
0000CBCE                            
0000CBCE                            locret_C044:
0000CBCE 4E75                       		rts	
0000CBD0                            ; ===========================================================================
0000CBD0                            
0000CBD0                            loc_C046:				; XREF: loc_BF6E
0000CBD0 3F28 0008                  		move.w	8(a0),-(sp)
0000CBD4 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000CBDA 6400                       		bcc.s	loc_C056
0000CBDC 6100 0000                  		bsr.w	SpeedToPos
0000CBE0                            
0000CBE0                            loc_C056:
0000CBE0 0828 0001 0022             		btst	#1,$22(a0)
0000CBE6 6700                       		beq.s	loc_C0A0
0000CBE8 0668 0018 0012             		addi.w	#$18,$12(a0)
0000CBEE 4EB9 0000 0000             		jsr	ObjHitFloor
0000CBF4 4A41                       		tst.w	d1
0000CBF6 6A00 0000                  		bpl.w	loc_C09E
0000CBFA D368 000C                  		add.w	d1,$C(a0)
0000CBFE 4268 0012                  		clr.w	$12(a0)
0000CC02 08A8 0001 0022             		bclr	#1,$22(a0)
0000CC08 3011                       		move.w	(a1),d0
0000CC0A 0240 03FF                  		andi.w	#$3FF,d0
0000CC0E 0C40 016A                  		cmpi.w	#$16A,d0
0000CC12 6500                       		bcs.s	loc_C09E
0000CC14 3028 0030                  		move.w	$30(a0),d0
0000CC18 E640                       		asr.w	#3,d0
0000CC1A 3140 0010                  		move.w	d0,$10(a0)
0000CC1E 117C 0001 0032             		move.b	#1,$32(a0)
0000CC24 4268 000E                  		clr.w	$E(a0)
0000CC28                            
0000CC28                            loc_C09E:
0000CC28 6000                       		bra.s	loc_C0E6
0000CC2A                            ; ===========================================================================
0000CC2A                            
0000CC2A                            loc_C0A0:
0000CC2A 4A68 0010                  		tst.w	$10(a0)
0000CC2E 6700 0000                  		beq.w	loc_C0D6
0000CC32 6B00                       		bmi.s	loc_C0BC
0000CC34 7600                       		moveq	#0,d3
0000CC36 1628 0019                  		move.b	$19(a0),d3
0000CC3A 4EB9 0000 0000             		jsr	ObjHitWallRight
0000CC40 4A41                       		tst.w	d1		; has block touched a wall?
0000CC42 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000CC44 6000                       		bra.s	loc_C0E6
0000CC46                            ; ===========================================================================
0000CC46                            
0000CC46                            loc_C0BC:
0000CC46 7600                       		moveq	#0,d3
0000CC48 1628 0019                  		move.b	$19(a0),d3
0000CC4C 4643                       		not.w	d3
0000CC4E 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000CC54 4A41                       		tst.w	d1		; has block touched a wall?
0000CC56 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000CC58 6000                       		bra.s	loc_C0E6
0000CC5A                            ; ===========================================================================
0000CC5A                            
0000CC5A                            Obj33_StopPush:
0000CC5A 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000CC5E 6000                       		bra.s	loc_C0E6
0000CC60                            ; ===========================================================================
0000CC60                            
0000CC60                            loc_C0D6:
0000CC60 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000CC68 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000CC6E 6400                       		bcc.s	loc_C104
0000CC70                            
0000CC70                            loc_C0E6:
0000CC70 7200                       		moveq	#0,d1
0000CC72 1228 0019                  		move.b	$19(a0),d1
0000CC76 0641 000B                  		addi.w	#$B,d1
0000CC7A 343C 0010                  		move.w	#$10,d2
0000CC7E 363C 0011                  		move.w	#$11,d3
0000CC82 381F                       		move.w	(sp)+,d4
0000CC84 6100 0000                  		bsr.w	loc_C186
0000CC88 6100                       		bsr.s	Obj33_ChkLava
0000CC8A 6000 FEC4                  		bra.w	loc_BFC6
0000CC8E                            ; ===========================================================================
0000CC8E                            
0000CC8E                            loc_C104:
0000CC8E 381F                       		move.w	(sp)+,d4
0000CC90 43F8 D000                  		lea	($FFFFD000).w,a1
0000CC94 08A9 0003 0022             		bclr	#3,$22(a1)
0000CC9A 08A8 0003 0022             		bclr	#3,$22(a0)
0000CCA0 6000 FECE                  		bra.w	loc_BFE6
0000CCA4                            ; ===========================================================================
0000CCA4                            
0000CCA4                            Obj33_ChkLava:
0000CCA4 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000CCAA 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000CCAC 343C FFE0                  		move.w	#-$20,d2
0000CCB0 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000CCB6 6700                       		beq.s	Obj33_LoadLava
0000CCB8 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000CCBE 6700                       		beq.s	Obj33_LoadLava
0000CCC0 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000CCC6 6700                       		beq.s	Obj33_LoadLava
0000CCC8 4E75                       		rts	
0000CCCA                            ; ===========================================================================
0000CCCA                            
0000CCCA                            Obj33_ChkLava2:
0000CCCA 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000CCD0 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000CCD2 343C 0020                  		move.w	#$20,d2
0000CCD6 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000CCDC 6700                       		beq.s	Obj33_LoadLava
0000CCDE 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000CCE4 6700                       		beq.s	Obj33_LoadLava
0000CCE6                            
0000CCE6                            Obj33_NoLava:
0000CCE6 4E75                       		rts	
0000CCE8                            ; ===========================================================================
0000CCE8                            
0000CCE8                            Obj33_LoadLava:
0000CCE8 6100 0000                  		bsr.w	SingleObjLoad
0000CCEC 6600                       		bne.s	locret_C184
0000CCEE 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000CCF2 3368 0008 0008             		move.w	8(a0),8(a1)
0000CCF8 D569 0008                  		add.w	d2,8(a1)
0000CCFC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000CD02 0669 0010 000C             		addi.w	#$10,$C(a1)
0000CD08 2348 003C                  		move.l	a0,$3C(a1)
0000CD0C                            
0000CD0C                            locret_C184:
0000CD0C 4E75                       		rts	
0000CD0E                            ; ===========================================================================
0000CD0E                            
0000CD0E                            loc_C186:				; XREF: loc_BF6E
0000CD0E 1028 0025                  		move.b	$25(a0),d0
0000CD12 6700 0000                  		beq.w	loc_C218
0000CD16 5500                       		subq.b	#2,d0
0000CD18 6600                       		bne.s	loc_C1AA
0000CD1A 6100 B320                  		bsr.w	ExitPlatform
0000CD1E 0829 0003 0022             		btst	#3,$22(a1)
0000CD24 6600                       		bne.s	loc_C1A4
0000CD26 4228 0025                  		clr.b	$25(a0)
0000CD2A 4E75                       		rts	
0000CD2C                            ; ===========================================================================
0000CD2C                            
0000CD2C                            loc_C1A4:
0000CD2C 3404                       		move.w	d4,d2
0000CD2E 6000 B86A                  		bra.w	MvSonicOnPtfm
0000CD32                            ; ===========================================================================
0000CD32                            
0000CD32                            loc_C1AA:
0000CD32 5500                       		subq.b	#2,d0
0000CD34 6600                       		bne.s	loc_C1F2
0000CD36 7218                       		moveq	#$18,d1
0000CD38 4EB9 0000 0000             		jsr	ObjectFallCustom
0000CD3E 4EB9 0000 0000             		jsr	ObjHitFloor
0000CD44 4A41                       		tst.w	d1
0000CD46 6A00 0000                  		bpl.w	locret_C1F0
0000CD4A D368 000C                  		add.w	d1,$C(a0)
0000CD4E 4268 0012                  		clr.w	$12(a0)
0000CD52 4228 0025                  		clr.b	$25(a0)
0000CD56 3011                       		move.w	(a1),d0
0000CD58 0240 03FF                  		andi.w	#$3FF,d0
0000CD5C 0C40 016A                  		cmpi.w	#$16A,d0
0000CD60 6500                       		bcs.s	locret_C1F0
0000CD62 3028 0030                  		move.w	$30(a0),d0
0000CD66 E640                       		asr.w	#3,d0
0000CD68 3140 0010                  		move.w	d0,$10(a0)
0000CD6C 117C 0001 0032             		move.b	#1,$32(a0)
0000CD72 4268 000E                  		clr.w	$E(a0)
0000CD76                            
0000CD76                            locret_C1F0:
0000CD76 4E75                       		rts	
0000CD78                            ; ===========================================================================
0000CD78                            
0000CD78                            loc_C1F2:
0000CD78 6100 0000                  		bsr.w	SpeedToPos
0000CD7C 3028 0008                  		move.w	8(a0),d0
0000CD80 0240 000C                  		andi.w	#$C,d0
0000CD84 6600 0000                  		bne.w	locret_C2E4
0000CD88 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000CD8E 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000CD94 4268 0010                  		clr.w	$10(a0)
0000CD98 5528 0025                  		subq.b	#2,$25(a0)
0000CD9C 4E75                       		rts	
0000CD9E                            ; ===========================================================================
0000CD9E                            
0000CD9E                            loc_C218:
0000CD9E 6100 0000                  		bsr.w	loc_FAC8
0000CDA2 4A44                       		tst.w	d4
0000CDA4 6700 0000                  		beq.w	locret_C2E4
0000CDA8 6B00 0000                  		bmi.w	locret_C2E4
0000CDAC 4A28 0032                  		tst.b	$32(a0)
0000CDB0 6700                       		beq.s	loc_C230
0000CDB2 6000 0000                  		bra.w	locret_C2E4
0000CDB6                            ; ===========================================================================
0000CDB6                            
0000CDB6                            loc_C230:
0000CDB6 4A40                       		tst.w	d0
0000CDB8 6700 0000                  		beq.w	locret_C2E4
0000CDBC 6B00                       		bmi.s	loc_C268
0000CDBE 0829 0000 0022             		btst	#0,$22(a1)
0000CDC4 6600 0000                  		bne.w	locret_C2E4
0000CDC8 3F00                       		move.w	d0,-(sp)
0000CDCA 7600                       		moveq	#0,d3
0000CDCC 1628 0019                  		move.b	$19(a0),d3
0000CDD0 4EB9 0000 0000             		jsr	ObjHitWallRight
0000CDD6 301F                       		move.w	(sp)+,d0
0000CDD8 4A41                       		tst.w	d1
0000CDDA 6B00 0000                  		bmi.w	locret_C2E4
0000CDDE 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000CDE6 7001                       		moveq	#1,d0
0000CDE8 323C 0040                  		move.w	#$40,d1
0000CDEC 6000                       		bra.s	loc_C294
0000CDEE                            ; ===========================================================================
0000CDEE                            
0000CDEE                            loc_C268:
0000CDEE 0829 0000 0022             		btst	#0,$22(a1)
0000CDF4 6700                       		beq.s	locret_C2E4
0000CDF6 3F00                       		move.w	d0,-(sp)
0000CDF8 7600                       		moveq	#0,d3
0000CDFA 1628 0019                  		move.b	$19(a0),d3
0000CDFE 4643                       		not.w	d3
0000CE00 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000CE06 301F                       		move.w	(sp)+,d0
0000CE08 4A41                       		tst.w	d1
0000CE0A 6B00                       		bmi.s	locret_C2E4
0000CE0C 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000CE14 70FF                       		moveq	#-1,d0
0000CE16 323C FFC0                  		move.w	#-$40,d1
0000CE1A                            
0000CE1A                            loc_C294:
0000CE1A 43F8 D000                  		lea	($FFFFD000).w,a1
0000CE1E D169 0008                  		add.w	d0,8(a1)
0000CE22 3341 0014                  		move.w	d1,$14(a1)
0000CE26 337C 0000 0010             		move.w	#0,$10(a1)
0000CE2C 3F00                       		move.w	d0,-(sp)
0000CE2E 303C 00A7                  		move.w	#$A7,d0
0000CE32 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play pushing sound
0000CE38 301F                       		move.w	(sp)+,d0
0000CE3A 4A28 0028                  		tst.b	$28(a0)
0000CE3E 6B00                       		bmi.s	locret_C2E4
0000CE40 3F00                       		move.w	d0,-(sp)
0000CE42 4EB9 0000 0000             		jsr	ObjHitFloor
0000CE48 301F                       		move.w	(sp)+,d0
0000CE4A 0C41 0004                  		cmpi.w	#4,d1
0000CE4E 6F00                       		ble.s	loc_C2E0
0000CE50 317C 0400 0010             		move.w	#$400,$10(a0)
0000CE56 4A40                       		tst.w	d0
0000CE58 6A00                       		bpl.s	loc_C2D8
0000CE5A 4468 0010                  		neg.w	$10(a0)
0000CE5E                            
0000CE5E                            loc_C2D8:
0000CE5E 117C 0006 0025             		move.b	#6,$25(a0)
0000CE64 6000                       		bra.s	locret_C2E4
0000CE66                            ; ===========================================================================
0000CE66                            
0000CE66                            loc_C2E0:
0000CE66 D368 000C                  		add.w	d1,$C(a0)
0000CE6A                            
0000CE6A                            locret_C2E4:
0000CE6A 4E75                       		rts	
0000CE6C                            ; ===========================================================================
0000CE6C                            ; ---------------------------------------------------------------------------
0000CE6C                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CE6C                            ; ---------------------------------------------------------------------------
0000CE6C                            Map_obj33:
0000CE6C                            	include "_maps\obj33.asm"
0000CE6C                            ; ---------------------------------------------------------------------------
0000CE6C                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CE6C                            ; ---------------------------------------------------------------------------
0000CE6C 0000                       		dc.w byte_C2EA-Map_obj33
0000CE6E 0000                       		dc.w byte_C2F0-Map_obj33
0000CE70 01                         byte_C2EA:	dc.b 1
0000CE71 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000CE76 04                         byte_C2F0:	dc.b 4
0000CE77 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000CE7C F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000CE81 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000CE86 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000CE8C 00                         		even
0000CE8C 00                         		even
0000CE8C                            
0000CE8C                            ; ===========================================================================
0000CE8C                            ; ---------------------------------------------------------------------------
0000CE8C                            ; Object 34 - zone title cards
0000CE8C                            ; ---------------------------------------------------------------------------
0000CE8C                            Obj34:					; XREF: Obj_Index
0000CE8C 7000                       		moveq	#0,d0
0000CE8E 1028 0024                  		move.b	$24(a0),d0
0000CE92 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000CE96 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000CE9A                            ; ===========================================================================
0000CE9A 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000CE9C 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000CE9E 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CEA0 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CEA2                            ; ===========================================================================
0000CEA2                            
0000CEA2                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000CEA2 2248                       		movea.l	a0,a1
0000CEA4 7000                       		moveq	#0,d0
0000CEA6 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CEAA 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000CEB0 6600                       		bne.s	Obj34_CheckFZ
0000CEB2 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000CEB4                            
0000CEB4                            Obj34_CheckFZ:
0000CEB4 3400                       		move.w	d0,d2
0000CEB6 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000CEBC 6600                       		bne.s	Obj34_LoadConfig
0000CEBE 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000CEC0 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000CEC2                            
0000CEC2                            Obj34_LoadConfig:
0000CEC2 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000CEC8 E948                       		lsl.w	#4,d0
0000CECA D6C0                       		adda.w	d0,a3
0000CECC 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000CED2 7203                       		moveq	#3,d1
0000CED4                            
0000CED4                            Obj34_Loop:
0000CED4 12BC 0034                  		move.b	#$34,0(a1)
0000CED8 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000CEDC 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000CEE0 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000CEE4 335A 000A                  		move.w	(a2)+,$A(a1)
0000CEE8 135A 0024                  		move.b	(a2)+,$24(a1)
0000CEEC 101A                       		move.b	(a2)+,d0
0000CEEE 6600                       		bne.s	Obj34_ActNumber
0000CEF0 1002                       		move.b	d2,d0
0000CEF2                            
0000CEF2                            Obj34_ActNumber:
0000CEF2 0C00 0007                  		cmpi.b	#7,d0
0000CEF6 6600                       		bne.s	Obj34_MakeSprite
0000CEF8 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000CEFC 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000CF02 6600                       		bne.s	Obj34_MakeSprite
0000CF04 5300                       		subq.b	#1,d0
0000CF06                            
0000CF06                            Obj34_MakeSprite:
0000CF06 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000CF0A 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000CF12 337C 8580 0002             		move.w	#$8580,2(a1)
0000CF18 137C 0078 0019             		move.b	#$78,$19(a1)
0000CF1E 137C 0000 0001             		move.b	#0,1(a1)
0000CF24 137C 0000 0018             		move.b	#0,$18(a1)
0000CF2A 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000CF30 43E9 0040                  		lea	$40(a1),a1	; next object
0000CF34 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000CF38                            
0000CF38                            Obj34_ChkPos:				; XREF: Obj34_Index
0000CF38 7210                       		moveq	#$10,d1		; set horizontal speed
0000CF3A 3028 0030                  		move.w	$30(a0),d0
0000CF3E B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000CF42 6700                       		beq.s	loc_C3C8	; if yes, branch
0000CF44 6C00                       		bge.s	Obj34_Move
0000CF46 4441                       		neg.w	d1
0000CF48                            
0000CF48                            Obj34_Move:
0000CF48 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CF4C                            
0000CF4C                            loc_C3C8:
0000CF4C 3028 0008                  		move.w	8(a0),d0
0000CF50 6B00                       		bmi.s	locret_C3D8
0000CF52 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CF56 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000CF58 6000 0000                  		bra.w	DisplaySprite
0000CF5C                            ; ===========================================================================
0000CF5C                            
0000CF5C                            locret_C3D8:
0000CF5C 4E75                       		rts	
0000CF5E                            ; ===========================================================================
0000CF5E                            
0000CF5E                            Obj34_Wait:				; XREF: Obj34_Index
0000CF5E 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000CF62 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000CF64 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000CF68 6000 0000                  		bra.w	DisplaySprite
0000CF6C                            ; ===========================================================================
0000CF6C                            
0000CF6C                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000CF6C 4A28 0001                  		tst.b	1(a0)
0000CF70 6A00                       		bpl.s	Obj34_ChangeArt
0000CF72 7220                       		moveq	#$20,d1
0000CF74 3028 0032                  		move.w	$32(a0),d0
0000CF78 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000CF7C 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000CF7E 6C00                       		bge.s	Obj34_Move2
0000CF80 4441                       		neg.w	d1
0000CF82                            
0000CF82                            Obj34_Move2:
0000CF82 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CF86 3028 0008                  		move.w	8(a0),d0
0000CF8A 6B00                       		bmi.s	locret_C412
0000CF8C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CF90 6400                       		bcc.s	locret_C412	; if yes, branch
0000CF92 6000 0000                  		bra.w	DisplaySprite
0000CF96                            ; ===========================================================================
0000CF96                            
0000CF96                            locret_C412:
0000CF96 4E75                       		rts	
0000CF98                            ; ===========================================================================
0000CF98                            
0000CF98                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000CF98 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000CF9E 6600                       		bne.s	Obj34_Delete
0000CFA0 7002                       		moveq	#2,d0
0000CFA2 4EB9 0000 17CA             		jsr	(LoadPLC).l	; load explosion patterns
0000CFA8 7000                       		moveq	#0,d0
0000CFAA 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CFAE 103B 0000                  		move.b	Obj34_AnimalPLC(pc,d0.w),d0
0000CFB2 4EB9 0000 17CA             		jsr	(LoadPLC).l	; load animal patterns
0000CFB8                            
0000CFB8                            Obj34_Delete:
0000CFB8 6000 0000                  		bra.w	DeleteObject
0000CFBC                            
0000CFBC                            ; ===========================================================================
0000CFBC                            Obj34_AnimalPLC:
0000CFBC 15                         		dc.b $15	; "GHZ"
0000CFBD 16                         		dc.b $16
0000CFBE 17                         		dc.b $17
0000CFBF 18                         		dc.b $18
0000CFC0 19                         		dc.b $19
0000CFC1 1A                         		dc.b $1A	; "SBZ"
0000CFC2 15                         		dc.b $15	; Ending (placeholder?
0000CFC3 1A                         		dc.b $1A	; MAKOTO
0000CFC4                            	even
0000CFC4 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000CFC6 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000CFC8 00E4                       		dc.w $E4
0000CFCA 0206                       		dc.b 2,	6
0000CFCC 00EA                       		dc.w $EA
0000CFCE 0207                       		dc.b 2,	7
0000CFD0 00E0                       		dc.w $E0
0000CFD2 020A                       		dc.b 2,	$A
0000CFD4                            ; ---------------------------------------------------------------------------
0000CFD4                            ; Title	card configuration data
0000CFD4                            ; Format:
0000CFD4                            ; 4 bytes per item (YYYY XXXX)
0000CFD4                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000CFD4                            ; ---------------------------------------------------------------------------
0000CFD4 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CFE4 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000CFF4 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000D004 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000D014 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000D024 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000D034 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000D044 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000D054 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000D064                            ; ===========================================================================
0000D064                            ; ---------------------------------------------------------------------------
0000D064                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000D064                            ; ---------------------------------------------------------------------------
0000D064                            
0000D064                            Obj39:					; XREF: Obj_Index
0000D064 7000                       		moveq	#0,d0
0000D066 1028 0024                  		move.b	$24(a0),d0
0000D06A 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000D06E 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000D072                            ; ===========================================================================
0000D072 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000D074 0000                       		dc.w loc_C50C-Obj39_Index
0000D076 0000                       		dc.w Obj39_Wait-Obj39_Index
0000D078                            ; ===========================================================================
0000D078                            
0000D078                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000D078 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D07C 6700                       		beq.s	Obj39_Main	; if yes, branch
0000D07E 4E75                       		rts	
0000D080                            ; ===========================================================================
0000D080                            
0000D080                            Obj39_Main:
0000D080 5428 0024                  		addq.b	#2,$24(a0)
0000D084 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000D08A 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000D090 6700                       		beq.s	loc_C4EC	; if not, branch
0000D092 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000D098                            
0000D098                            loc_C4EC:
0000D098 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000D09E 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000D0A6 317C 855E 0002             		move.w	#$855E,2(a0)
0000D0AC 117C 0000 0001             		move.b	#0,1(a0)
0000D0B2 117C 0000 0018             		move.b	#0,$18(a0)
0000D0B8                            
0000D0B8                            loc_C50C:				; XREF: Obj39_Index
0000D0B8 7210                       		moveq	#$10,d1		; set horizontal speed
0000D0BA 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000D0C0 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000D0C2 6500                       		bcs.s	Obj39_Move
0000D0C4 4441                       		neg.w	d1
0000D0C6                            
0000D0C6                            Obj39_Move:
0000D0C6 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D0CA 6000 0000                  		bra.w	DisplaySprite
0000D0CE                            ; ===========================================================================
0000D0CE                            
0000D0CE                            Obj39_SetWait:				; XREF: Obj39_Main
0000D0CE 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000D0D4 5428 0024                  		addq.b	#2,$24(a0)
0000D0D8 4E75                       		rts	
0000D0DA                            ; ===========================================================================
0000D0DA                            
0000D0DA                            Obj39_Wait:				; XREF: Obj39_Index
0000D0DA 1038 F605                  		move.b	($FFFFF605).w,d0
0000D0DE 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000D0E2 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000D0E4 0828 0000 001A             		btst	#0,$1A(a0)
0000D0EA 6600                       		bne.s	Obj39_Display
0000D0EC 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000D0F0 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000D0F2 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D0F6 6000 0000                  		bra.w	DisplaySprite
0000D0FA                            ; ===========================================================================
0000D0FA                            
0000D0FA                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000D0FA 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000D0FE 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000D100 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000D106 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000D10A 6600                       		bne.s	Obj39_Display	; if yes, branch
0000D10C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000D112 6000                       		bra.s	Obj39_Display
0000D114                            ; ===========================================================================
0000D114                            
0000D114                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000D114 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D11A                            
0000D11A                            Obj39_Display:				; XREF: Obj39_ChgMode
0000D11A 6000 0000                  		bra.w	DisplaySprite
0000D11E                            ; ===========================================================================
0000D11E                            ; ---------------------------------------------------------------------------
0000D11E                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000D11E                            ; ---------------------------------------------------------------------------
0000D11E                            
0000D11E                            Obj3A:					; XREF: Obj_Index
0000D11E 7000                       		moveq	#0,d0
0000D120 1028 0024                  		move.b	$24(a0),d0
0000D124 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000D128 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000D12C                            ; ===========================================================================
0000D12C 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000D12E 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000D130 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D132 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000D134 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D136 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000D138 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D13A 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000D13C 0000                       		dc.w loc_C766-Obj3A_Index
0000D13E                            ; ===========================================================================
0000D13E                            
0000D13E                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000D13E 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D142 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000D144 4E75                       		rts	
0000D146                            ; ===========================================================================
0000D146                            
0000D146                            Obj3A_Main:
0000D146 2248                       		movea.l	a0,a1
0000D148 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000D14E 7206                       		moveq	#6,d1
0000D150                            
0000D150                            Obj3A_Loop:
0000D150 12BC 003A                  		move.b	#$3A,0(a1)
0000D154 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000D158 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000D15C 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D160 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D164 135A 0024                  		move.b	(a2)+,$24(a1)
0000D168 101A                       		move.b	(a2)+,d0
0000D16A 0C00 0006                  		cmpi.b	#6,d0
0000D16E 6600                       		bne.s	loc_C5CA
0000D170 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000D174                            
0000D174                            loc_C5CA:
0000D174 1340 001A                  		move.b	d0,$1A(a1)
0000D178 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000D180 337C 8580 0002             		move.w	#$8580,2(a1)
0000D186 137C 0000 0001             		move.b	#0,1(a1)
0000D18C 43E9 0040                  		lea	$40(a1),a1
0000D190 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000D194                            
0000D194                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000D194 7210                       		moveq	#$10,d1		; set horizontal speed
0000D196 3028 0030                  		move.w	$30(a0),d0
0000D19A B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D19E 6700                       		beq.s	loc_C61A	; if yes, branch
0000D1A0 6C00                       		bge.s	Obj3A_Move
0000D1A2 4441                       		neg.w	d1
0000D1A4                            
0000D1A4                            Obj3A_Move:
0000D1A4 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D1A8                            
0000D1A8                            loc_C5FE:				; XREF: loc_C61A
0000D1A8 3028 0008                  		move.w	8(a0),d0
0000D1AC 6B00                       		bmi.s	locret_C60E
0000D1AE 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D1B2 6400                       		bcc.s	locret_C60E	; if yes, branch
0000D1B4 6000 0000                  		bra.w	DisplaySprite
0000D1B8                            ; ===========================================================================
0000D1B8                            
0000D1B8                            locret_C60E:
0000D1B8 4E75                       		rts	
0000D1BA                            ; ===========================================================================
0000D1BA                            
0000D1BA                            loc_C610:				; XREF: loc_C61A
0000D1BA 117C 000E 0024             		move.b	#$E,$24(a0)
0000D1C0 6000 0000                  		bra.w	Obj3A_ChkPos2
0000D1C4                            ; ===========================================================================
0000D1C4                            
0000D1C4                            loc_C61A:				; XREF: Obj3A_ChkPos
0000D1C4 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000D1CA 67EE                       		beq.s	loc_C610
0000D1CC 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D1D2 66D4                       		bne.s	loc_C5FE
0000D1D4 5428 0024                  		addq.b	#2,$24(a0)
0000D1D8 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D1DE                            
0000D1DE                            Obj3A_Wait:				; XREF: Obj3A_Index
0000D1DE 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D1E2 6600                       		bne.s	Obj3A_Display
0000D1E4 5428 0024                  		addq.b	#2,$24(a0)
0000D1E8                            
0000D1E8                            Obj3A_Display:
0000D1E8 6000 0000                  		bra.w	DisplaySprite
0000D1EC                            ; ===========================================================================
0000D1EC                            
0000D1EC                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000D1EC 6100 0000                  		bsr.w	DisplaySprite
0000D1F0 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000D1F6 7000                       		moveq	#0,d0
0000D1F8 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000D1FC 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000D1FE 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000D202 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000D208                            
0000D208                            Obj3A_RingBonus:
0000D208 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D20C 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000D20E 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000D212 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D218                            
0000D218                            Obj3A_ChkBonus:
0000D218 4A40                       		tst.w	d0		; is there any bonus?
0000D21A 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000D21C 303C 00C5                  		move.w	#$C5,d0
0000D220 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D226 5428 0024                  		addq.b	#2,$24(a0)
0000D22A 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000D230 6600                       		bne.s	Obj3A_SetDelay
0000D232 5828 0024                  		addq.b	#4,$24(a0)
0000D236                            
0000D236                            Obj3A_SetDelay:
0000D236 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D23C                            
0000D23C                            locret_C692:
0000D23C 4E75                       		rts	
0000D23E                            ; ===========================================================================
0000D23E                            
0000D23E                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000D23E 4EB9 0000 0000             		jsr	AddPoints
0000D244 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D248 0200 0003                  		andi.b	#3,d0
0000D24C 66EE                       		bne.s	locret_C692
0000D24E 303C 00CD                  		move.w	#$CD,d0
0000D252 4EF9 0000 15E6             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D258                            ; ===========================================================================
0000D258                            
0000D258                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000D258 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D25C 0240 0007                  		andi.w	#7,d0
0000D260 E748                       		lsl.w	#3,d0
0000D262 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000D266 0241 0003                  		andi.w	#3,d1
0000D26A D241                       		add.w	d1,d1
0000D26C D041                       		add.w	d1,d0
0000D26E 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000D272 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000D276 4A40                       		tst.w	d0
0000D278 6600                       		bne.s	Obj3A_ChkSS
0000D27A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000D280 6000                       		bra.s	Obj3A_Display2
0000D282                            ; ===========================================================================
0000D282                            
0000D282                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000D282 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000D286 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000D28A 6700                       		beq.s	loc_C6EA	; if not, branch
0000D28C 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000D292 6000                       		bra.s	Obj3A_Display2
0000D294                            ; ===========================================================================
0000D294                            
0000D294                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000D294 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D29A                            
0000D29A                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000D29A 6000 0000                  		bra.w	DisplaySprite
0000D29E                            ; ===========================================================================
0000D29E                            ; ---------------------------------------------------------------------------
0000D29E                            ; Level	order array
0000D29E                            ; ---------------------------------------------------------------------------
0000D29E                            LevelOrder:	incbin	misc\lvl_ord.bin
0000D2D6                            		even
0000D2D6                            ; ===========================================================================
0000D2D6                            
0000D2D6                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000D2D6 7220                       		moveq	#$20,d1		; set horizontal speed
0000D2D8 3028 0032                  		move.w	$32(a0),d0
0000D2DC B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000D2E0 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000D2E2 6C00                       		bge.s	Obj3A_Move2
0000D2E4 4441                       		neg.w	d1
0000D2E6                            
0000D2E6                            Obj3A_Move2:
0000D2E6 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D2EA 3028 0008                  		move.w	8(a0),d0
0000D2EE 6B00                       		bmi.s	locret_C748
0000D2F0 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D2F4 6400                       		bcc.s	locret_C748	; if yes, branch
0000D2F6 6000 0000                  		bra.w	DisplaySprite
0000D2FA                            ; ===========================================================================
0000D2FA                            
0000D2FA                            locret_C748:
0000D2FA 4E75                       		rts	
0000D2FC                            ; ===========================================================================
0000D2FC                            
0000D2FC                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000D2FC 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D302 6600 0000                  		bne.w	DeleteObject
0000D306 5428 0024                  		addq.b	#2,$24(a0)
0000D30A 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000D30E 303C 008D                  		move.w	#$8D,d0
0000D312 4EF9 0000 15E0             		jmp	(PlaySound).l	; play FZ music
0000D318                            ; ===========================================================================
0000D318                            
0000D318                            loc_C766:				; XREF: Obj3A_Index
0000D318 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000D31C 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000D322 6700 0000                  		beq.w	DeleteObject
0000D326 4E75                       		rts	
0000D328                            ; ===========================================================================
0000D328 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000D32E 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000D330 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000D336 0201                       		dc.b 2,	1
0000D338 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000D33E 0206                       		dc.b 2,	6
0000D340 0520 0120 00EC             		dc.w $520, $120, $EC
0000D346 0202                       		dc.b 2,	2
0000D348 0540 0120 00FC             		dc.w $540, $120, $FC
0000D34E 0203                       		dc.b 2,	3
0000D350 0560 0120 010C             		dc.w $560, $120, $10C
0000D356 0204                       		dc.b 2,	4
0000D358 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000D35E 0205                       		dc.b 2,	5
0000D360                            ; ===========================================================================
0000D360                            ; ---------------------------------------------------------------------------
0000D360                            ; Object 7E - special stage results screen
0000D360                            ; ---------------------------------------------------------------------------
0000D360                            
0000D360                            Obj7E:					; XREF: Obj_Index
0000D360 7000                       		moveq	#0,d0
0000D362 1028 0024                  		move.b	$24(a0),d0
0000D366 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000D36A 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000D36E                            ; ===========================================================================
0000D36E 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000D370 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000D372 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D374 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000D376 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D378 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D37A 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D37C 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000D37E 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D380 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D382 0000                       		dc.w loc_C91A-Obj7E_Index
0000D384                            ; ===========================================================================
0000D384                            
0000D384                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000D384 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D388 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000D38A 4E75                       		rts	
0000D38C                            ; ===========================================================================
0000D38C                            
0000D38C                            Obj7E_Main:
0000D38C 2248                       		movea.l	a0,a1
0000D38E 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000D394 7203                       		moveq	#3,d1
0000D396 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000D39C 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000D39E 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000D3A0                            
0000D3A0                            Obj7E_Loop:
0000D3A0 12BC 007E                  		move.b	#$7E,0(a1)
0000D3A4 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000D3A8 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D3AC 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D3B0 135A 0024                  		move.b	(a2)+,$24(a1)
0000D3B4 135A 001A                  		move.b	(a2)+,$1A(a1)
0000D3B8 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000D3C0 337C 8580 0002             		move.w	#$8580,2(a1)
0000D3C6 137C 0000 0001             		move.b	#0,1(a1)
0000D3CC 43E9 0040                  		lea	$40(a1),a1
0000D3D0 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000D3D4                            
0000D3D4 7007                       		moveq	#7,d0
0000D3D6 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000D3DA 6700                       		beq.s	loc_C842
0000D3DC 7000                       		moveq	#0,d0
0000D3DE 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000D3E2 6600                       		bne.s	loc_C842	; if not, branch
0000D3E4 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000D3E6 317C 0018 0008             		move.w	#$18,8(a0)
0000D3EC 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000D3F2                            
0000D3F2                            loc_C842:
0000D3F2 1140 001A                  		move.b	d0,$1A(a0)
0000D3F6                            
0000D3F6                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000D3F6 7210                       		moveq	#$10,d1		; set horizontal speed
0000D3F8 3028 0030                  		move.w	$30(a0),d0
0000D3FC B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D400 6700                       		beq.s	loc_C86C	; if yes, branch
0000D402 6C00                       		bge.s	Obj7E_Move
0000D404 4441                       		neg.w	d1
0000D406                            
0000D406                            Obj7E_Move:
0000D406 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D40A                            
0000D40A                            loc_C85A:				; XREF: loc_C86C
0000D40A 3028 0008                  		move.w	8(a0),d0
0000D40E 6B00                       		bmi.s	locret_C86A
0000D410 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D414 6400                       		bcc.s	locret_C86A	; if yes, branch
0000D416 6000 0000                  		bra.w	DisplaySprite
0000D41A                            ; ===========================================================================
0000D41A                            
0000D41A                            locret_C86A:
0000D41A 4E75                       		rts	
0000D41C                            ; ===========================================================================
0000D41C                            
0000D41C                            loc_C86C:				; XREF: Obj7E_ChkPos
0000D41C 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000D422 66E6                       		bne.s	loc_C85A
0000D424 5428 0024                  		addq.b	#2,$24(a0)
0000D428 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D42E 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000D434                            
0000D434                            Obj7E_Wait:				; XREF: Obj7E_Index
0000D434 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D438 6600                       		bne.s	Obj7E_Display
0000D43A 5428 0024                  		addq.b	#2,$24(a0)
0000D43E                            
0000D43E                            Obj7E_Display:
0000D43E 6000 0000                  		bra.w	DisplaySprite
0000D442                            ; ===========================================================================
0000D442                            
0000D442                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000D442 6100 0000                  		bsr.w	DisplaySprite
0000D446 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000D44C 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D450 6700                       		beq.s	loc_C8C4	; if yes, branch
0000D452 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D458 700A                       		moveq	#10,d0		; add 10 to score
0000D45A 4EB9 0000 0000             		jsr	AddPoints
0000D460 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D464 0200 0003                  		andi.b	#3,d0
0000D468 6600                       		bne.s	locret_C8EA
0000D46A 303C 00CD                  		move.w	#$CD,d0
0000D46E 4EF9 0000 15E6             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D474                            ; ===========================================================================
0000D474                            
0000D474                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000D474 303C 00C5                  		move.w	#$C5,d0
0000D478 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D47E 5428 0024                  		addq.b	#2,$24(a0)
0000D482 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D488 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000D48E 6500                       		bcs.s	locret_C8EA	; if not, branch
0000D490 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000D496 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000D49A                            
0000D49A                            locret_C8EA:
0000D49A 4E75                       		rts	
0000D49C                            ; ===========================================================================
0000D49C                            
0000D49C                            Obj7E_Exit:				; XREF: Obj7E_Index
0000D49C 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D4A2 6000 0000                  		bra.w	DisplaySprite
0000D4A6                            ; ===========================================================================
0000D4A6                            
0000D4A6                            Obj7E_Continue:				; XREF: Obj7E_Index
0000D4A6 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000D4AC 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000D4B2 303C 00BF                  		move.w	#$BF,d0
0000D4B6 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play continues music
0000D4BC 5428 0024                  		addq.b	#2,$24(a0)
0000D4C0 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000D4C6 6000 0000                  		bra.w	DisplaySprite
0000D4CA                            ; ===========================================================================
0000D4CA                            
0000D4CA                            loc_C91A:				; XREF: Obj7E_Index
0000D4CA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D4CE 0200 000F                  		andi.b	#$F,d0
0000D4D2 6600                       		bne.s	Obj7E_Display2
0000D4D4 0868 0000 001A             		bchg	#0,$1A(a0)
0000D4DA                            
0000D4DA                            Obj7E_Display2:
0000D4DA 6000 0000                  		bra.w	DisplaySprite
0000D4DE                            ; ===========================================================================
0000D4DE 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000D4E4 0200                       		dc.b 2,	0		; rountine number, frame number
0000D4E6 0320 0120 0118             		dc.w $320, $120, $118
0000D4EC 0201                       		dc.b 2,	1
0000D4EE 0360 0120 0128             		dc.w $360, $120, $128
0000D4F4 0202                       		dc.b 2,	2
0000D4F6 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000D4FC 0203                       		dc.b 2,	3
0000D4FE 03A0 0120 0138             		dc.w $3A0, $120, $138
0000D504 0206                       		dc.b 2,	6
0000D506                            ; ===========================================================================
0000D506                            ; ---------------------------------------------------------------------------
0000D506                            ; Object 7F - chaos emeralds from the special stage results screen
0000D506                            ; ---------------------------------------------------------------------------
0000D506                            
0000D506                            Obj7F:					; XREF: Obj_Index
0000D506 7000                       		moveq	#0,d0
0000D508 1028 0024                  		move.b	$24(a0),d0
0000D50C 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000D510 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000D514                            ; ===========================================================================
0000D514 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000D516 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000D518                            
0000D518                            ; ---------------------------------------------------------------------------
0000D518                            ; X-axis positions for chaos emeralds
0000D518                            ; ---------------------------------------------------------------------------
0000D518 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000D524                            ; ===========================================================================
0000D524                            
0000D524                            Obj7F_Main:				; XREF: Obj7F_Index
0000D524 2248                       		movea.l	a0,a1
0000D526 45F9 0000 D518             		lea	(Obj7F_PosData).l,a2
0000D52C 7400                       		moveq	#0,d2
0000D52E 7200                       		moveq	#0,d1
0000D530 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000D534 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000D536 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000D53A                            
0000D53A                            Obj7F_Loop:
0000D53A 12BC 007F                  		move.b	#$7F,0(a1)
0000D53E 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000D542 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000D548 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000D54C 1633 2000                  		move.b	(a3,d2.w),d3
0000D550 1343 001A                  		move.b	d3,$1A(a1)
0000D554 1343 001C                  		move.b	d3,$1C(a1)
0000D558 5202                       		addq.b	#1,d2
0000D55A 5429 0024                  		addq.b	#2,$24(a1)
0000D55E 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000D566 337C 8541 0002             		move.w	#$8541,2(a1)
0000D56C 137C 0000 0001             		move.b	#0,1(a1)
0000D572 43E9 0040                  		lea	$40(a1),a1	; next object
0000D576 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000D57A                            
0000D57A                            Obj7F_Flash:				; XREF: Obj7F_Index
0000D57A 1028 001A                  		move.b	$1A(a0),d0
0000D57E 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000D584 0C00 0006                  		cmpi.b	#6,d0
0000D588 6600                       		bne.s	Obj7F_Display
0000D58A 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000D590                            
0000D590                            Obj7F_Display:
0000D590 6000 0000                  		bra.w	DisplaySprite
0000D594                            ; ===========================================================================
0000D594                            ; ---------------------------------------------------------------------------
0000D594                            ; Sprite mappings - zone title cards
0000D594                            ; ---------------------------------------------------------------------------
0000D594                            Map_obj34:
0000D594                                    include "_maps\obj34.asm"
0000D594                            Map_c5df:
0000D594 0000                       Map_c5df_0: 	dc.w Map_c5df_18-Map_c5df
0000D596 0000                       Map_c5df_2: 	dc.w Map_c5df_55-Map_c5df
0000D598 0000                       Map_c5df_4: 	dc.w Map_c5df_C4-Map_c5df
0000D59A 0000                       Map_c5df_6: 	dc.w Map_c5df_DE-Map_c5df
0000D59C 0000                       Map_c5df_8: 	dc.w Map_c5df_134-Map_c5df
0000D59E 0000                       Map_c5df_A: 	dc.w Map_c5df_19E-Map_c5df
0000D5A0 0000                       Map_c5df_C: 	dc.w Map_c5df_1C2-Map_c5df
0000D5A2 0000                       Map_c5df_E: 	dc.w Map_c5df_1D7-Map_c5df
0000D5A4 0000                       Map_c5df_10: 	dc.w Map_c5df_1E2-Map_c5df
0000D5A6 0000                       Map_c5df_12: 	dc.w Map_c5df_1ED-Map_c5df
0000D5A8 0000                       Map_c5df_14: 	dc.w Map_c5df_1F8-Map_c5df
0000D5AA 0000                       Map_c5df_16: 	dc.w Map_c5df_23A-Map_c5df
0000D5AC 0C                         Map_c5df_18: 	dc.b $C
0000D5AD F805 0008 80               	dc.b $F8, $5, $0, $8, $80
0000D5B2 F805 003A 90               	dc.b $F8, $5, $0, $3A, $90
0000D5B7 F805 0046 A0               	dc.b $F8, $5, $0, $46, $A0
0000D5BC F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
0000D5C1 F805 0008 C0               	dc.b $F8, $5, $0, $8, $C0
0000D5C6 F805 001C D0               	dc.b $F8, $5, $0, $1C, $D0
0000D5CB F805 004A E0               	dc.b $F8, $5, $0, $4A, $E0
0000D5D0 F800 0056 F0               	dc.b $F8, $0, $0, $56, $F0
0000D5D5 F805 003A 00               	dc.b $F8, $5, $0, $3A, $0
0000D5DA F805 0032 10               	dc.b $F8, $5, $0, $32, $10
0000D5DF F805 0026 20               	dc.b $F8, $5, $0, $26, $20
0000D5E4 F805 0026 30               	dc.b $F8, $5, $0, $26, $30
0000D5E9 16                         Map_c5df_55: 	dc.b $16
0000D5EA F801 0020 80               	dc.b $F8, $1, $0, $20, $80
0000D5EF F800 0056 88               	dc.b $F8, $0, $0, $56, $88
0000D5F4 F805 0026 98               	dc.b $F8, $5, $0, $26, $98
0000D5F9 F801 0020 A8               	dc.b $F8, $1, $0, $20, $A8
0000D5FE F805 0022 B0               	dc.b $F8, $5, $0, $22, $B0
0000D603 F805 0010 C0               	dc.b $F8, $5, $0, $10, $C0
0000D608 F800 0056 D0               	dc.b $F8, $0, $0, $56, $D0
0000D60D F805 0014 E0               	dc.b $F8, $5, $0, $14, $E0
0000D612 F801 0020 F0               	dc.b $F8, $1, $0, $20, $F0
0000D617 F805 0026 F8               	dc.b $F8, $5, $0, $26, $F8
0000D61C F805 0010 08               	dc.b $F8, $5, $0, $10, $8
0000D621 F800 0056 18               	dc.b $F8, $0, $0, $56, $18
0000D626 F805 0010 28               	dc.b $F8, $5, $0, $10, $28
0000D62B F805 0018 38               	dc.b $F8, $5, $0, $18, $38
0000D630 F805 0018 48               	dc.b $F8, $5, $0, $18, $48
0000D635 F805 003E 58               	dc.b $F8, $5, $0, $3E, $58
0000D63A F805 0036 68               	dc.b $F8, $5, $0, $36, $68
0000D63F F805 0026 78               	dc.b $F8, $5, $0, $26, $78
0000D644 F805 0032 88               	dc.b $F8, $5, $0, $32, $88
0000D649 F805 003A 98               	dc.b $F8, $5, $0, $3A, $98
0000D64E F805 0010 A8               	dc.b $F8, $5, $0, $10, $A8
0000D653 F805 003A B8               	dc.b $F8, $5, $0, $3A, $B8
0000D658 05                         Map_c5df_C4: 	dc.b $5
0000D659 F805 002A 80               	dc.b $F8, $5, $0, $2A, $80
0000D65E F805 0000 90               	dc.b $F8, $5, $0, $0, $90
0000D663 F805 003A A0               	dc.b $F8, $5, $0, $3A, $A0
0000D668 F805 0004 B0               	dc.b $F8, $5, $0, $4, $B0
0000D66D F805 0026 C0               	dc.b $F8, $5, $0, $26, $C0
0000D672 11                         Map_c5df_DE: 	dc.b $11
0000D673 F805 000C 80               	dc.b $F8, $5, $0, $C, $80
0000D678 F805 0032 90               	dc.b $F8, $5, $0, $32, $90
0000D67D F805 002E A0               	dc.b $F8, $5, $0, $2E, $A0
0000D682 F805 0042 B0               	dc.b $F8, $5, $0, $42, $B0
0000D687 F800 0056 C0               	dc.b $F8, $0, $0, $56, $C0
0000D68C F805 0018 D0               	dc.b $F8, $5, $0, $18, $D0
0000D691 F805 0010 E0               	dc.b $F8, $5, $0, $10, $E0
0000D696 F805 0042 F0               	dc.b $F8, $5, $0, $42, $F0
0000D69B F800 0056 00               	dc.b $F8, $0, $0, $56, $0
0000D6A0 F805 003A 10               	dc.b $F8, $5, $0, $3A, $10
0000D6A5 F801 0020 20               	dc.b $F8, $1, $0, $20, $20
0000D6AA F805 000C 28               	dc.b $F8, $5, $0, $C, $28
0000D6AF F805 0032 38               	dc.b $F8, $5, $0, $32, $38
0000D6B4 F805 0042 48               	dc.b $F8, $5, $0, $42, $48
0000D6B9 F805 001C 58               	dc.b $F8, $5, $0, $1C, $58
0000D6BE F801 0020 68               	dc.b $F8, $1, $0, $20, $68
0000D6C3 F805 003E 70               	dc.b $F8, $5, $0, $3E, $70
0000D6C8 15                         Map_c5df_134: 	dc.b $15
0000D6C9 F805 0042 80               	dc.b $F8, $5, $0, $42, $80
0000D6CE F805 001C 90               	dc.b $F8, $5, $0, $1C, $90
0000D6D3 F805 0010 A0               	dc.b $F8, $5, $0, $10, $A0
0000D6D8 F800 0056 B0               	dc.b $F8, $0, $0, $56, $B0
0000D6DD F805 0036 C0               	dc.b $F8, $5, $0, $36, $C0
0000D6E2 F801 0020 D0               	dc.b $F8, $1, $0, $20, $D0
0000D6E7 F805 0018 D8               	dc.b $F8, $5, $0, $18, $D8
0000D6EC F800 0056 E8               	dc.b $F8, $0, $0, $56, $E8
0000D6F1 F805 0014 F8               	dc.b $F8, $5, $0, $14, $F8
0000D6F6 F805 003A 08               	dc.b $F8, $5, $0, $3A, $8
0000D6FB F805 0032 18               	dc.b $F8, $5, $0, $32, $18
0000D700 F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
0000D705 F800 0056 38               	dc.b $F8, $0, $0, $56, $38
0000D70A F805 0004 48               	dc.b $F8, $5, $0, $4, $48
0000D70F F805 0000 58               	dc.b $F8, $5, $0, $0, $58
0000D714 F805 003A 68               	dc.b $F8, $5, $0, $3A, $68
0000D719 F805 002E 78               	dc.b $F8, $5, $0, $2E, $78
0000D71E F805 004A 88               	dc.b $F8, $5, $0, $4A, $88
0000D723 F805 0000 98               	dc.b $F8, $5, $0, $0, $98
0000D728 F805 003A A8               	dc.b $F8, $5, $0, $3A, $A8
0000D72D F805 000C B8               	dc.b $F8, $5, $0, $C, $B8
0000D732 07                         Map_c5df_19E: 	dc.b $7
0000D733 F805 004E 80               	dc.b $F8, $5, $0, $4E, $80
0000D738 F800 0056 90               	dc.b $F8, $0, $0, $56, $90
0000D73D F805 004E A0               	dc.b $F8, $5, $0, $4E, $A0
0000D742 F800 0056 B0               	dc.b $F8, $0, $0, $56, $B0
0000D747 F805 004E C0               	dc.b $F8, $5, $0, $4E, $C0
0000D74C F800 0056 D0               	dc.b $F8, $0, $0, $56, $D0
0000D751 F805 004E E0               	dc.b $F8, $5, $0, $4E, $E0
0000D756 04                         Map_c5df_1C2: 	dc.b $4
0000D757 F805 004E E0               	dc.b $F8, $5, $0, $4E, $E0
0000D75C F805 0032 F0               	dc.b $F8, $5, $0, $32, $F0
0000D761 F805 002E 00               	dc.b $F8, $5, $0, $2E, $0
0000D766 F805 0010 10               	dc.b $F8, $5, $0, $10, $10
0000D76B 02                         Map_c5df_1D7: 	dc.b $2
0000D76C 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D771 F402 0057 0C               	dc.b $F4, $2, $0, $57, $C
0000D776 02                         Map_c5df_1E2: 	dc.b $2
0000D777 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D77C F406 005A 08               	dc.b $F4, $6, $0, $5A, $8
0000D781 02                         Map_c5df_1ED: 	dc.b $2
0000D782 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D787 F406 0060 08               	dc.b $F4, $6, $0, $60, $8
0000D78C 0D                         Map_c5df_1F8: 	dc.b $D
0000D78D E40C 0070 F4               	dc.b $E4, $C, $0, $70, $F4
0000D792 E402 0074 14               	dc.b $E4, $2, $0, $74, $14
0000D797 EC04 0077 EC               	dc.b $EC, $4, $0, $77, $EC
0000D79C F405 0079 E4               	dc.b $F4, $5, $0, $79, $E4
0000D7A1 140C 1870 EC               	dc.b $14, $C, $18, $70, $EC
0000D7A6 0402 1874 E4               	dc.b $4, $2, $18, $74, $E4
0000D7AB 0C04 1877 04               	dc.b $C, $4, $18, $77, $4
0000D7B0 FC05 1879 0C               	dc.b $FC, $5, $18, $79, $C
0000D7B5 EC08 007D FC               	dc.b $EC, $8, $0, $7D, $FC
0000D7BA F40C 007C F4               	dc.b $F4, $C, $0, $7C, $F4
0000D7BF FC08 007C F4               	dc.b $FC, $8, $0, $7C, $F4
0000D7C4 040C 007C EC               	dc.b $4, $C, $0, $7C, $EC
0000D7C9 0C08 007C EC               	dc.b $C, $8, $0, $7C, $EC
0000D7CE 05                         Map_c5df_23A: 	dc.b $5
0000D7CF F805 0014 DC               	dc.b $F8, $5, $0, $14, $DC
0000D7D4 F801 0020 EC               	dc.b $F8, $1, $0, $20, $EC
0000D7D9 F805 002E F4               	dc.b $F8, $5, $0, $2E, $F4
0000D7DE F805 0000 04               	dc.b $F8, $5, $0, $0, $4
0000D7E3 F805 0026 14               	dc.b $F8, $5, $0, $26, $14
0000D7E8                            	even
0000D7E8                            	even
0000D7E8                            ; ---------------------------------------------------------------------------
0000D7E8                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D7E8                            ; ---------------------------------------------------------------------------
0000D7E8                            Map_obj39:
0000D7E8                            	include "_maps\obj39.asm"
0000D7E8                            ; ---------------------------------------------------------------------------
0000D7E8                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D7E8                            ; ---------------------------------------------------------------------------
0000D7E8 0000                       		dc.w byte_CBAC-Map_obj39
0000D7EA 0000                       		dc.w byte_CBB7-Map_obj39
0000D7EC 0000                       		dc.w byte_CBC2-Map_obj39
0000D7EE 0000                       		dc.w byte_CBCD-Map_obj39
0000D7F0 02                         byte_CBAC:	dc.b 2
0000D7F1 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D7F6 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D7FB 02                         byte_CBB7:	dc.b 2
0000D7FC F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D801 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D806 02                         byte_CBC2:	dc.b 2
0000D807 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D80C F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D811 02                         byte_CBCD:	dc.b 2
0000D812 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D817 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D81C                            		even
0000D81C                            		even
0000D81C                            
0000D81C                            ; ---------------------------------------------------------------------------
0000D81C                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D81C                            ; ---------------------------------------------------------------------------
0000D81C 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D81E 0000                       		dc.w byte_CC13-Map_obj3A
0000D820 0000                       		dc.w byte_CC32-Map_obj3A
0000D822 0000                       		dc.w byte_CC51-Map_obj3A
0000D824 0000                       		dc.w byte_CC75-Map_obj3A
0000D826                            		;dc.w byte_CB47-Map_obj3A
0000D826                            		;dc.w byte_CB26-Map_obj3A
0000D826                            		;dc.w byte_CB31-Map_obj3A
0000D826                            		;dc.w byte_CB3C-Map_obj3A
0000D826 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000D827 F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000D82C F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000D831 F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000D836 F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000D83B F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000D840 F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000D845 F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000D84A F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000D84F F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000D854 F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000D859 F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000D85E F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000D863 F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000D868 F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000D86D F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000D872 06                         byte_CC13:	dc.b 6			; PASSED
0000D873 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D878 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D87D F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D882 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D887 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D88C F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D891 06                         byte_CC32:	dc.b 6			; SCORE
0000D892 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D897 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D89C F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D8A1 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D8A6 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D8AB FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D8B0 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D8B1 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D8B6 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D8BB F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D8C0 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D8C5 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D8CA F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D8CF F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D8D4 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D8D5 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D8DA F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D8DF F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D8E4 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D8E9 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D8EE F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D8F3 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D8F8                            		even
0000D8F8                            ; ---------------------------------------------------------------------------
0000D8F8                            ; Sprite mappings - special stage results screen
0000D8F8                            ; ---------------------------------------------------------------------------
0000D8F8 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D8FA 0000                       		dc.w byte_CCEE-Map_obj7E
0000D8FC 0000                       		dc.w byte_CD0D-Map_obj7E
0000D8FE                            		;dc.w byte_CB47-Map_obj7E
0000D8FE 0000                       		dc.w byte_CD31-Map_obj7E
0000D900 0000                       		dc.w byte_CD46-Map_obj7E
0000D902 0000                       		dc.w byte_CD5B-Map_obj7E
0000D904 0000                       		dc.w byte_CD6B-Map_obj7E
0000D906 0000                       		dc.w byte_CDA8-Map_obj7E
0000D908 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D909 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D90E F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D913 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D918 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D91D F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D922 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D927 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D92C F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D931 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D936 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D93B F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D940 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D945 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D94A 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D94B F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D950 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D955 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D95A F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D95F F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D964 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D969 07                         byte_CD0D:	dc.b 7
0000D96A F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D96F F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D974 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D979 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D97E FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D983 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D988 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D98D 04                         byte_CD31:	dc.b 4
0000D98E F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D993 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D998 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D99D F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D9A2 04                         byte_CD46:	dc.b 4
0000D9A3 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D9A8 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D9AD F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D9B2 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D9B7 03                         byte_CD5B:	dc.b 3
0000D9B8 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D9BD F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D9C2 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D9C7 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D9C8 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D9CD F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D9D2 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D9D7 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D9DC F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D9E1 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D9E6 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D9EB F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D9F0 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D9F5 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D9FA F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D9FF F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000DA04 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000DA05 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000DA0A F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000DA0F F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000DA14 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000DA19 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000DA1E F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000DA23 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000DA28 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000DA2D F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000DA32 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000DA37 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000DA3C F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000DA41 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000DA46 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000DA4B F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000DA50                            		even
0000DA50                            ; ---------------------------------------------------------------------------
0000DA50                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000DA50                            ; ---------------------------------------------------------------------------
0000DA50                            Map_obj7F:
0000DA50                            	include "_maps\obj7F.asm"
0000DA50                            ; ---------------------------------------------------------------------------
0000DA50                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000DA50                            ; ---------------------------------------------------------------------------
0000DA50 0000                       		dc.w byte_CE02-Map_obj7F
0000DA52 0000                       		dc.w byte_CE08-Map_obj7F
0000DA54 0000                       		dc.w byte_CE0E-Map_obj7F
0000DA56 0000                       		dc.w byte_CE14-Map_obj7F
0000DA58 0000                       		dc.w byte_CE1A-Map_obj7F
0000DA5A 0000                       		dc.w byte_CE20-Map_obj7F
0000DA5C 0000                       		dc.w byte_CE26-Map_obj7F
0000DA5E 01                         byte_CE02:	dc.b 1
0000DA5F F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000DA64 01                         byte_CE08:	dc.b 1
0000DA65 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000DA6A 01                         byte_CE0E:	dc.b 1
0000DA6B F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000DA70 01                         byte_CE14:	dc.b 1
0000DA71 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000DA76 01                         byte_CE1A:	dc.b 1
0000DA77 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000DA7C 01                         byte_CE20:	dc.b 1
0000DA7D F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000DA82 00                         byte_CE26:	dc.b 0			; Blank frame
0000DA84 00                         		even
0000DA84 00                         		even
0000DA84                            
0000DA84                            ; ===========================================================================
0000DA84                            ; ---------------------------------------------------------------------------
0000DA84                            ; Object 36 - spikes
0000DA84                            ; ---------------------------------------------------------------------------
0000DA84                            
0000DA84                            Obj36:					; XREF: Obj_Index
0000DA84 7000                       		moveq	#0,d0
0000DA86 1028 0024                  		move.b	$24(a0),d0
0000DA8A 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000DA8E 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000DA92                            ; ===========================================================================
0000DA92 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000DA94 0000                       		dc.w Obj36_Solid-Obj36_Index
0000DA96                            
0000DA96 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000DA98 0110                       		dc.b 1,	$10
0000DA9A 0204                       		dc.b 2,	4
0000DA9C 031C                       		dc.b 3,	$1C
0000DA9E 0440                       		dc.b 4,	$40
0000DAA0 0510                       		dc.b 5,	$10
0000DAA2                            ; ===========================================================================
0000DAA2                            
0000DAA2                            Obj36_Main:				; XREF: Obj36_Index
0000DAA2 5428 0024                  		addq.b	#2,$24(a0)
0000DAA6 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000DAAE 317C 051B 0002             		move.w	#$51B,2(a0)
0000DAB4 0028 0004 0001             		ori.b	#4,1(a0)
0000DABA 117C 0004 0018             		move.b	#4,$18(a0)
0000DAC0 1028 0028                  		move.b	$28(a0),d0
0000DAC4 0228 000F 0028             		andi.b	#$F,$28(a0)
0000DACA 0240 00F0                  		andi.w	#$F0,d0
0000DACE 43F9 0000 DA96             		lea	(Obj36_Var).l,a1
0000DAD4 E648                       		lsr.w	#3,d0
0000DAD6 D2C0                       		adda.w	d0,a1
0000DAD8 1159 001A                  		move.b	(a1)+,$1A(a0)
0000DADC 1159 0019                  		move.b	(a1)+,$19(a0)
0000DAE0 3168 0008 0030             		move.w	8(a0),$30(a0)
0000DAE6 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000DAEC                            
0000DAEC                            Obj36_Solid:				; XREF: Obj36_Index
0000DAEC 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000DAF0 343C 0004                  		move.w	#4,d2
0000DAF4 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000DAFA 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000DAFC 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000DB02 6600                       		bne.s	Obj36_Upright	; if not, branch
0000DB04 343C 0014                  		move.w	#$14,d2
0000DB08                            
0000DB08                            ; Spikes types $1x and $5x face	sideways
0000DB08                            
0000DB08                            Obj36_SideWays:				; XREF: Obj36_Solid
0000DB08 323C 001B                  		move.w	#$1B,d1
0000DB0C 3602                       		move.w	d2,d3
0000DB0E 5243                       		addq.w	#1,d3
0000DB10 3828 0008                  		move.w	8(a0),d4
0000DB14 6100 0000                  		bsr.w	SolidObject
0000DB18 0828 0003 0022             		btst	#3,$22(a0)
0000DB1E 6600                       		bne.s	Obj36_Display
0000DB20 0C44 0001                  		cmpi.w	#1,d4
0000DB24 6700                       		beq.s	Obj36_Hurt
0000DB26 6000                       		bra.s	Obj36_Display
0000DB28                            ; ===========================================================================
0000DB28                            
0000DB28                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000DB28                            
0000DB28                            Obj36_Upright:				; XREF: Obj36_Solid
0000DB28 7200                       		moveq	#0,d1
0000DB2A 1228 0019                  		move.b	$19(a0),d1
0000DB2E 0641 000B                  		addi.w	#$B,d1
0000DB32 343C 0010                  		move.w	#$10,d2
0000DB36 363C 0011                  		move.w	#$11,d3
0000DB3A 3828 0008                  		move.w	8(a0),d4
0000DB3E 6100 0000                  		bsr.w	SolidObject
0000DB42 0828 0003 0022             		btst	#3,$22(a0)
0000DB48 6600                       		bne.s	Obj36_Hurt
0000DB4A 4A44                       		tst.w	d4
0000DB4C 6A00                       		bpl.s	Obj36_Display
0000DB4E                            
0000DB4E                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000DB4E 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000DB52 6600                       		bne.s	Obj36_Display	; if yes, branch
0000DB54 2F08                       		move.l	a0,-(sp)
0000DB56 2448                       		movea.l	a0,a2
0000DB58 41F8 D000                  		lea	($FFFFD000).w,a0
0000DB5C 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000DB62 6400                       		bcc.s	loc_CF20
0000DB64 2628 000C                  		move.l	$C(a0),d3
0000DB68 3028 0012                  		move.w	$12(a0),d0
0000DB6C 48C0                       		ext.l	d0
0000DB6E E180                       		asl.l	#8,d0
0000DB70 9680                       		sub.l	d0,d3
0000DB72 2143 000C                  		move.l	d3,$C(a0)
0000DB76 4EB9 0000 0000             		jsr	HurtSonic
0000DB7C                            
0000DB7C                            loc_CF20:
0000DB7C 205F                       		movea.l	(sp)+,a0
0000DB7E                            
0000DB7E                            Obj36_Display:
0000DB7E 6100 0000                  		bsr.w	DisplaySprite
0000DB82 3028 0030                  		move.w	$30(a0),d0
0000DB86 0240 FF80                  		andi.w	#$FF80,d0
0000DB8A 3238 F700                  		move.w	($FFFFF700).w,d1
0000DB8E 0441 0080                  		subi.w	#$80,d1
0000DB92 0241 FF80                  		andi.w	#$FF80,d1
0000DB96 9041                       		sub.w	d1,d0
0000DB98 0C40 0280                  		cmpi.w	#$280,d0
0000DB9C 6200 0000                  		bhi.w	DeleteObject
0000DBA0 4E75                       		rts	
0000DBA2                            ; ===========================================================================
0000DBA2                            
0000DBA2                            Obj36_Type0x:				; XREF: Obj36_Solid
0000DBA2 7000                       		moveq	#0,d0
0000DBA4 1028 0028                  		move.b	$28(a0),d0
0000DBA8 D040                       		add.w	d0,d0
0000DBAA 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000DBAE 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000DBB2                            ; ===========================================================================
0000DBB2 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000DBB4 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000DBB6 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000DBB8                            ; ===========================================================================
0000DBB8                            
0000DBB8                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000DBB8 4E75                       		rts			; don't move the object
0000DBBA                            ; ===========================================================================
0000DBBA                            
0000DBBA                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000DBBA 6100 0000                  		bsr.w	Obj36_Wait
0000DBBE 7000                       		moveq	#0,d0
0000DBC0 1028 0034                  		move.b	$34(a0),d0
0000DBC4 D068 0032                  		add.w	$32(a0),d0
0000DBC8 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000DBCC 4E75                       		rts	
0000DBCE                            ; ===========================================================================
0000DBCE                            
0000DBCE                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000DBCE 6100 0000                  		bsr.w	Obj36_Wait
0000DBD2 7000                       		moveq	#0,d0
0000DBD4 1028 0034                  		move.b	$34(a0),d0
0000DBD8 D068 0030                  		add.w	$30(a0),d0
0000DBDC 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000DBE0 4E75                       		rts	
0000DBE2                            ; ===========================================================================
0000DBE2                            
0000DBE2                            Obj36_Wait:
0000DBE2 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000DBE6 6700                       		beq.s	loc_CFA4	; if yes, branch
0000DBE8 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000DBEC 6600                       		bne.s	locret_CFE6
0000DBEE 4A28 0001                  		tst.b	1(a0)
0000DBF2 6A00                       		bpl.s	locret_CFE6
0000DBF4 303C 00B6                  		move.w	#$B6,d0
0000DBF8 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000DBFE 6000                       		bra.s	locret_CFE6
0000DC00                            ; ===========================================================================
0000DC00                            
0000DC00                            loc_CFA4:
0000DC00 4A68 0036                  		tst.w	$36(a0)
0000DC04 6700                       		beq.s	loc_CFC6
0000DC06 0468 0800 0034             		subi.w	#$800,$34(a0)
0000DC0C 6400                       		bcc.s	locret_CFE6
0000DC0E 317C 0000 0034             		move.w	#0,$34(a0)
0000DC14 317C 0000 0036             		move.w	#0,$36(a0)
0000DC1A 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000DC20 6000                       		bra.s	locret_CFE6
0000DC22                            ; ===========================================================================
0000DC22                            
0000DC22                            loc_CFC6:
0000DC22 0668 0800 0034             		addi.w	#$800,$34(a0)
0000DC28 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000DC2E 6500                       		bcs.s	locret_CFE6
0000DC30 317C 2000 0034             		move.w	#$2000,$34(a0)
0000DC36 317C 0001 0036             		move.w	#1,$36(a0)
0000DC3C 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000DC42                            
0000DC42                            locret_CFE6:
0000DC42 4E75                       		rts	
0000DC44                            ; ===========================================================================
0000DC44                            ; ---------------------------------------------------------------------------
0000DC44                            ; Sprite mappings - spikes
0000DC44                            ; ---------------------------------------------------------------------------
0000DC44                            Map_obj36:
0000DC44                            	include "_maps\obj36.asm"
0000DC44                            Map_obj36_inner:
0000DC44 0000                       Map_obj36_inner_0: 	dc.w Map_obj36_inner_C-Map_obj36_inner
0000DC46 0000                       Map_obj36_inner_2: 	dc.w Map_obj36_inner_1C-Map_obj36_inner
0000DC48 0000                       Map_obj36_inner_4: 	dc.w Map_obj36_inner_2C-Map_obj36_inner
0000DC4A 0000                       Map_obj36_inner_6: 	dc.w Map_obj36_inner_32-Map_obj36_inner
0000DC4C 0000                       Map_obj36_inner_8: 	dc.w Map_obj36_inner_42-Map_obj36_inner
0000DC4E 0000                       Map_obj36_inner_A: 	dc.w Map_obj36_inner_61-Map_obj36_inner
0000DC50 03                         Map_obj36_inner_C: 	dc.b $3
0000DC51 F003 0004 EC               	dc.b $F0, $3, $0, $4, $EC
0000DC56 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000DC5B F003 0004 0C               	dc.b $F0, $3, $0, $4, $C
0000DC60 03                         Map_obj36_inner_1C: 	dc.b $3
0000DC61 EC0C 0000 F0               	dc.b $EC, $C, $0, $0, $F0
0000DC66 FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000DC6B 0C0C 0000 F0               	dc.b $C, $C, $0, $0, $F0
0000DC70 01                         Map_obj36_inner_2C: 	dc.b $1
0000DC71 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000DC76 03                         Map_obj36_inner_32: 	dc.b $3
0000DC77 F003 0004 E4               	dc.b $F0, $3, $0, $4, $E4
0000DC7C F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000DC81 F003 0004 14               	dc.b $F0, $3, $0, $4, $14
0000DC86 06                         Map_obj36_inner_42: 	dc.b $6
0000DC87 F003 0004 C0               	dc.b $F0, $3, $0, $4, $C0
0000DC8C F003 0004 D8               	dc.b $F0, $3, $0, $4, $D8
0000DC91 F003 0004 F0               	dc.b $F0, $3, $0, $4, $F0
0000DC96 F003 0004 08               	dc.b $F0, $3, $0, $4, $8
0000DC9B F003 0004 20               	dc.b $F0, $3, $0, $4, $20
0000DCA0 F003 0004 38               	dc.b $F0, $3, $0, $4, $38
0000DCA5 01                         Map_obj36_inner_61: 	dc.b $1
0000DCA6 FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000DCAC 00                         	even
0000DCAC 00                         	even
0000DCAC                            
0000DCAC                            ; ===========================================================================
0000DCAC                            ; ---------------------------------------------------------------------------
0000DCAC                            ; Object 3B - purple rock (GHZ)
0000DCAC                            ; ---------------------------------------------------------------------------
0000DCAC                            
0000DCAC                            Obj3B:					; XREF: Obj_Index
0000DCAC 7000                       		moveq	#0,d0
0000DCAE 1028 0024                  		move.b	$24(a0),d0
0000DCB2 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000DCB6 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000DCBA                            ; ===========================================================================
0000DCBA 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000DCBC 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000DCBE                            ; ===========================================================================
0000DCBE                            
0000DCBE                            Obj3B_Main:				; XREF: Obj3B_Index
0000DCBE 5428 0024                  		addq.b	#2,$24(a0)
0000DCC2 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000DCCA 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000DCD0 117C 0004 0001             		move.b	#4,1(a0)
0000DCD6 117C 0013 0019             		move.b	#$13,$19(a0)
0000DCDC 117C 0004 0018             		move.b	#4,$18(a0)
0000DCE2                            
0000DCE2                            Obj3B_Solid:				; XREF: Obj3B_Index
0000DCE2 323C 001B                  		move.w	#$1B,d1
0000DCE6 343C 0010                  		move.w	#$10,d2
0000DCEA 363C 0010                  		move.w	#$10,d3
0000DCEE 3828 0008                  		move.w	8(a0),d4
0000DCF2 6100 0000                  		bsr.w	SolidObject
0000DCF6 6100 0000                  		bsr.w	DisplaySprite
0000DCFA 3028 0008                  		move.w	8(a0),d0
0000DCFE 0240 FF80                  		andi.w	#$FF80,d0
0000DD02 3238 F700                  		move.w	($FFFFF700).w,d1
0000DD06 0441 0080                  		subi.w	#$80,d1
0000DD0A 0241 FF80                  		andi.w	#$FF80,d1
0000DD0E 9041                       		sub.w	d1,d0
0000DD10 0C40 0280                  		cmpi.w	#$280,d0
0000DD14 6200 0000                  		bhi.w	DeleteObject
0000DD18 4E75                       		rts	
0000DD1A                            ; ===========================================================================
0000DD1A                            ; ---------------------------------------------------------------------------
0000DD1A                            ; Object 49 - waterfall	sound effect (GHZ)
0000DD1A                            ; ---------------------------------------------------------------------------
0000DD1A                            
0000DD1A                            Obj49:					; XREF: Obj_Index
0000DD1A 7000                       		moveq	#0,d0
0000DD1C 1028 0024                  		move.b	$24(a0),d0
0000DD20 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000DD24 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000DD28                            ; ===========================================================================
0000DD28 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000DD2A 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000DD2C                            ; ===========================================================================
0000DD2C                            
0000DD2C                            Obj49_Main:				; XREF: Obj49_Index
0000DD2C 5428 0024                  		addq.b	#2,$24(a0)
0000DD30 117C 0004 0001             		move.b	#4,1(a0)
0000DD36                            
0000DD36                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000DD36 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000DD3A 0200 003F                  		andi.b	#$3F,d0
0000DD3E 6600                       		bne.s	Obj49_ChkDel
0000DD40 303C 00D0                  		move.w	#$D0,d0
0000DD44 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000DD4A                            
0000DD4A                            Obj49_ChkDel:
0000DD4A 3028 0008                  		move.w	8(a0),d0
0000DD4E 0240 FF80                  		andi.w	#$FF80,d0
0000DD52 3238 F700                  		move.w	($FFFFF700).w,d1
0000DD56 0441 0080                  		subi.w	#$80,d1
0000DD5A 0241 FF80                  		andi.w	#$FF80,d1
0000DD5E 9041                       		sub.w	d1,d0
0000DD60 0C40 0280                  		cmpi.w	#$280,d0
0000DD64 6200 0000                  		bhi.w	DeleteObject
0000DD68 4E75                       		rts	
0000DD6A                            ; ===========================================================================
0000DD6A                            ; ---------------------------------------------------------------------------
0000DD6A                            ; Sprite mappings - purple rock	(GHZ)
0000DD6A                            ; ---------------------------------------------------------------------------
0000DD6A                            Map_obj3B:
0000DD6A                            	include "_maps\obj3B.asm"
0000DD6A                            ; ---------------------------------------------------------------------------
0000DD6A                            ; Sprite mappings - purple rock	(GHZ)
0000DD6A                            ; ---------------------------------------------------------------------------
0000DD6A 0000                       		dc.w byte_D110-Map_obj3B
0000DD6C 02                         byte_D110:	dc.b 2
0000DD6D F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000DD72 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000DD78 00                         		even
0000DD78 00                         		even
0000DD78                            
0000DD78                            ; ===========================================================================
0000DD78                            ; ---------------------------------------------------------------------------
0000DD78                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000DD78                            ; ---------------------------------------------------------------------------
0000DD78                            
0000DD78                            Obj3C:					; XREF: Obj_Index
0000DD78 7000                       		moveq	#0,d0
0000DD7A 1028 0024                  		move.b	$24(a0),d0
0000DD7E 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000DD82 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000DD86 6000 0000                  		bra.w	MarkObjGone
0000DD8A                            ; ===========================================================================
0000DD8A 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000DD8C 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000DD8E 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000DD90                            ; ===========================================================================
0000DD90                            
0000DD90                            Obj3C_Main:				; XREF: Obj3C_Index
0000DD90 5428 0024                  		addq.b	#2,$24(a0)
0000DD94 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000DD9C 317C 450F 0002             		move.w	#$450F,2(a0)
0000DDA2 117C 0004 0001             		move.b	#4,1(a0)
0000DDA8 117C 0010 0019             		move.b	#$10,$19(a0)
0000DDAE 117C 0004 0018             		move.b	#4,$18(a0)
0000DDB4 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000DDBA                            
0000DDBA                            Obj3C_Solid:				; XREF: Obj3C_Index
0000DDBA 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000DDC0 323C 001B                  		move.w	#$1B,d1
0000DDC4 343C 0020                  		move.w	#$20,d2
0000DDC8 363C 0020                  		move.w	#$20,d3
0000DDCC 3828 0008                  		move.w	8(a0),d4
0000DDD0 6100 0000                  		bsr.w	SolidObject
0000DDD4 0828 0005 0022             		btst	#5,$22(a0)
0000DDDA 6600                       		bne.s	Obj3C_ChkRoll
0000DDDC                            
0000DDDC                            locret_D180:
0000DDDC 4E75                       		rts	
0000DDDE                            ; ===========================================================================
0000DDDE                            
0000DDDE                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000DDDE 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000DDE4 66F6                       		bne.s	locret_D180	; if not, branch
0000DDE6 3028 0030                  		move.w	$30(a0),d0
0000DDEA 6A00                       		bpl.s	Obj3C_ChkSpeed
0000DDEC 4440                       		neg.w	d0
0000DDEE                            
0000DDEE                            Obj3C_ChkSpeed:
0000DDEE 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000DDF2 65E8                       		bcs.s	locret_D180	; if not, branch
0000DDF4 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000DDFA 5869 0008                  		addq.w	#4,8(a1)
0000DDFE 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000DE04 3028 0008                  		move.w	8(a0),d0
0000DE08 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000DE0C 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000DE0E 5169 0008                  		subq.w	#8,8(a1)
0000DE12 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000DE18                            
0000DE18                            Obj3C_Smash:
0000DE18 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000DE1E 08A8 0005 0022             		bclr	#5,$22(a0)
0000DE24 08A9 0005 0022             		bclr	#5,$22(a1)
0000DE2A 7207                       		moveq	#7,d1		; load 8 fragments
0000DE2C 343C 0070                  		move.w	#$70,d2
0000DE30 6100                       		bsr.s	SmashObject
0000DE32                            
0000DE32                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000DE32 4A28 0001                  		tst.b	1(a0)
0000DE36 6A00 0000                  		bpl.w	DeleteObject
0000DE3A 7270                       		moveq	#$70,d1
0000DE3C 4EB9 0000 0000             		jsr	ObjectFallCustom
0000DE42 6000 0000                  		bra.w	DisplaySprite	
0000DE46                            
0000DE46                            ; ---------------------------------------------------------------------------
0000DE46                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000DE46                            ; ---------------------------------------------------------------------------
0000DE46                            
0000DE46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE46                            
0000DE46                            
0000DE46                            SmashObject:				; XREF: Obj3C_Smash
0000DE46 7000                       		moveq	#0,d0
0000DE48 1028 001A                  		move.b	$1A(a0),d0
0000DE4C D040                       		add.w	d0,d0
0000DE4E 2668 0004                  		movea.l	4(a0),a3
0000DE52 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000DE56 524B                       		addq.w	#1,a3
0000DE58 08E8 0005 0001             		bset	#5,1(a0)
0000DE5E 1810                       		move.b	0(a0),d4
0000DE60 1A28 0001                  		move.b	1(a0),d5
0000DE64 2248                       		movea.l	a0,a1
0000DE66 6000                       		bra.s	Smash_LoadFrag
0000DE68                            ; ===========================================================================
0000DE68                            
0000DE68                            Smash_Loop:
0000DE68 6100 0000                  		bsr.w	SingleObjLoad
0000DE6C 6600                       		bne.s	Smash_PlaySnd
0000DE6E 5A4B                       		addq.w	#5,a3
0000DE70                            
0000DE70                            Smash_LoadFrag:				; XREF: SmashObject
0000DE70 137C 0004 0024             		move.b	#4,$24(a1)
0000DE76 1284                       		move.b	d4,0(a1)
0000DE78 234B 0004                  		move.l	a3,4(a1)
0000DE7C 1345 0001                  		move.b	d5,1(a1)
0000DE80 3368 0008 0008             		move.w	8(a0),8(a1)
0000DE86 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DE8C 3368 0002 0002             		move.w	2(a0),2(a1)
0000DE92 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000DE98 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000DE9E 335C 0010                  		move.w	(a4)+,$10(a1)
0000DEA2 335C 0012                  		move.w	(a4)+,$12(a1)
0000DEA6 B3C8                       		cmpa.l	a0,a1
0000DEA8 6400                       		bcc.s	loc_D268
0000DEAA 2F08                       		move.l	a0,-(sp)
0000DEAC 2049                       		movea.l	a1,a0
0000DEAE 6100 0000                  		bsr.w	SpeedToPos
0000DEB2 D568 0012                  		add.w	d2,$12(a0)
0000DEB6 205F                       		movea.l	(sp)+,a0
0000DEB8 6100 0000                  		bsr.w	DisplaySprite2
0000DEBC                            
0000DEBC                            loc_D268:
0000DEBC 51C9 FFAA                  		dbf	d1,Smash_Loop
0000DEC0                            
0000DEC0                            Smash_PlaySnd:
0000DEC0 303C 00CB                  		move.w	#$CB,d0
0000DEC4 4EF9 0000 15E6             		jmp	(PlaySound_Special).l ;	play smashing sound
0000DECA                            ; End of function SmashObject
0000DECA                            
0000DECA                            ; ===========================================================================
0000DECA                            ; Smashed block	fragment speeds
0000DECA                            ;
0000DECA 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000DECE 0600 FF00                  		dc.w $600, $FF00
0000DED2 0600 0100                  		dc.w $600, $100
0000DED6 0400 0500                  		dc.w $400, $500
0000DEDA 0600 FA00                  		dc.w $600, $FA00
0000DEDE 0800 FE00                  		dc.w $800, $FE00
0000DEE2 0800 0200                  		dc.w $800, $200
0000DEE6 0600 0600                  		dc.w $600, $600
0000DEEA                            
0000DEEA FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000DEEE F800 FE00                  		dc.w $F800, $FE00
0000DEF2 F800 0200                  		dc.w $F800, $200
0000DEF6 FA00 0600                  		dc.w $FA00, $600
0000DEFA FC00 FB00                  		dc.w $FC00, $FB00
0000DEFE FA00 FF00                  		dc.w $FA00, $FF00
0000DF02 FA00 0100                  		dc.w $FA00, $100
0000DF06 FC00 0500                  		dc.w $FC00, $500
0000DF0A                            ; ---------------------------------------------------------------------------
0000DF0A                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DF0A                            ; ---------------------------------------------------------------------------
0000DF0A                            Map_obj3C:
0000DF0A                            	include "_maps\obj3C.asm"
0000DF0A                            ; ---------------------------------------------------------------------------
0000DF0A                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DF0A                            ; ---------------------------------------------------------------------------
0000DF0A 0000                       		dc.w byte_D2BC-Map_obj3C
0000DF0C 0000                       		dc.w byte_D2E5-Map_obj3C
0000DF0E 0000                       		dc.w byte_D30E-Map_obj3C
0000DF10 08                         byte_D2BC:	dc.b 8
0000DF11 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000DF16 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000DF1B 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000DF20 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000DF25 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DF2A F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DF2F 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DF34 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DF39 08                         byte_D2E5:	dc.b 8
0000DF3A E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DF3F F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DF44 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DF49 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DF4E E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DF53 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DF58 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DF5D 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DF62 08                         byte_D30E:	dc.b 8
0000DF63 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DF68 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DF6D 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DF72 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DF77 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000DF7C F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000DF81 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000DF86 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000DF8C 00                         		even
0000DF8C 00                         		even
0000DF8C                            
0000DF8C                            ; ---------------------------------------------------------------------------
0000DF8C                            ; Object code loading subroutine
0000DF8C                            ; ---------------------------------------------------------------------------
0000DF8C                            
0000DF8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DF8C                            
0000DF8C                            
0000DF8C                            ObjectsLoad:				; XREF: TitleScreen; et al
0000DF8C 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000DF90 7E7F                       		moveq	#$7F,d7
0000DF92 7000                       		moveq	#0,d0
0000DF94 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000DF9A 6400                       		bcc.s	loc_D362
0000DF9C                            
0000DF9C                            loc_D348:
0000DF9C 1010                       		move.b	(a0),d0		; load object number from RAM
0000DF9E 6700                       		beq.s	loc_D358
0000DFA0 D040                       		add.w	d0,d0
0000DFA2 D040                       		add.w	d0,d0
0000DFA4 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000DFA8 4E91                       		jsr	(a1)		; run the object's code
0000DFAA 7000                       		moveq	#0,d0
0000DFAC                            
0000DFAC                            loc_D358:
0000DFAC 41E8 0040                  		lea	$40(a0),a0	; next object
0000DFB0 51CF FFEA                  		dbf	d7,loc_D348
0000DFB4 4E75                       		rts	
0000DFB6                            ; ===========================================================================
0000DFB6                            
0000DFB6                            loc_D362:
0000DFB6 7E1F                       		moveq	#$1F,d7
0000DFB8 61E2                       		bsr.s	loc_D348
0000DFBA 7E5F                       		moveq	#$5F,d7
0000DFBC                            
0000DFBC                            loc_D368:
0000DFBC 7000                       		moveq	#0,d0
0000DFBE 1010                       		move.b	(a0),d0
0000DFC0 6700                       		beq.s	loc_D378
0000DFC2 4A28 0001                  		tst.b	1(a0)
0000DFC6 6A00                       		bpl.s	loc_D378
0000DFC8 6100 0000                  		bsr.w	DisplaySprite
0000DFCC                            
0000DFCC                            loc_D378:
0000DFCC 41E8 0040                  		lea	$40(a0),a0
0000DFD0                            
0000DFD0                            loc_D37C:
0000DFD0 51CF FFEA                  		dbf	d7,loc_D368
0000DFD4 4E75                       		rts	
0000DFD6                            ; End of function ObjectsLoad
0000DFD6                            
0000DFD6                            ; ===========================================================================
0000DFD6                            ; ---------------------------------------------------------------------------
0000DFD6                            ; Object pointers
0000DFD6                            ; ---------------------------------------------------------------------------
0000DFD6                            Obj_Index:
0000DFD6                            	include "_inc\Object pointers.asm"
0000DFD6                            ; ---------------------------------------------------------------------------
0000DFD6                            ; Object pointers
0000DFD6                            ; ---------------------------------------------------------------------------
0000DFD6 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000DFE6 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000DFF6 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000E006 0000 0000 0000 B1FE 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000E016 0000 7DA8 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000E026 0000 83CE 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000E036 0000 8C1C 0000 8D16 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000E046 0000 9360 0000 964E 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000E056 0000 0000 0000 A2FC 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000E066 0000 A634 0000 AC22 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000E076 0000 9F5C 0000 9436 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000E086 0000 B7F4 0000 AE16 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000E096 0000 C20A 0000 C8B8 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000E0A6 0000 BD68 0000 DA84 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000E0B6 0000 D064 0000 D11E 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000E0C6 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000E0D6 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000E0E6 0000 C526 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000E0F6 0000 DD1A 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000E106 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000E116 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000E126 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000E136 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000E146 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000E156 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000E166 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000E176 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000E186 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000E196 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000E1A6 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000E1B6 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000E1C6 0000 0000 0000 D360 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000E1D6 0000 55F4 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000E1E6 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000E1F6 0000 5CAE 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000E1F6 0000 5CAE 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000E206                            
0000E206                            ; ---------------------------------------------------------------------------
0000E206                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000E206                            ; ---------------------------------------------------------------------------
0000E206                            
0000E206                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E206                            
0000E206                            
0000E206                            ObjectFall:
0000E206 7238                       		moveq	#$38,d1
0000E208                            
0000E208                            ObjectFallCustom:
0000E208 6100                       		bsr.s	SpeedToPos
0000E20A D368 0012                  		add.w	d1,$12(a0)
0000E20E 4A38 FFF8                  		tst.b	($FFFFFFF8).w
0000E212 6A00                       		bpl.s	@62hz
0000E214 4A41                       		tst.w	d1
0000E216 6B00                       		bmi.s	@upward
0000E218 E449                       		lsr.w	#2,d1
0000E21A D368 0012                  		add.w	d1,$12(a0)
0000E21E                            @62hz:
0000E21E 4E75                       		rts
0000E220                            @upward:
0000E220 4441                       		neg.w	d1
0000E222 E449                       		lsr.w	#2,d1
0000E224 9368 0012                  		sub.w	d1,$12(a0)
0000E228 4E75                       		rts
0000E22A                            ; End of function ObjectFall
0000E22A                            
0000E22A                            ; ---------------------------------------------------------------------------
0000E22A                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000E22A                            ; ---------------------------------------------------------------------------
0000E22A                            
0000E22A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E22A                            
0000E22A                            
0000E22A                            ObjectFallNoJump:
0000E22A 4CA8 0005 0010             		movem.w	$10(a0),d0/d2	; load horizontal speed
0000E230 E180                       		asl.l	#8,d0		; multiply speed by $100
0000E232 E182                       		asl.l	#8,d2		; multiply speed by $100
0000E234 D1A8 0008                  		add.l	d0,8(a0)	; update x-axis	position
0000E238 D5A8 000C                  		add.l	d2,$C(a0)	; update y-axis	position
0000E23C 5868 000C                  		addq.w	#4,$C(a0)	; increase vertical speed
0000E240 4E75                       		rts	
0000E242                            
0000E242                            ; End of function ObjectFall
0000E242                            
0000E242                            JumpFallSonic:
0000E242 4CA8 0003 0010                     movem.w    $10(a0),d0-d1        ; Get speed
0000E248                                    
0000E248 E180                               asl.l    #8,d0                ; Apply X speed
0000E24A D1A8 0008                          add.l    d0,$8(a0)
0000E24E                                    
0000E24E 303C 0300                          move.w    #$300,d0            ; Y movement speed
0000E252 4A41                               tst.w    d1                ; Are we falling?
0000E254 6A00                               bpl.s    .SetYSpeed            ; If so, branch
0000E256 4440                               neg.w    d0                ; Make Y movement go up
0000E258                                    
0000E258                            .SetYSpeed:
0000E258 48C0                               ext.l    d0                ; Apply Y speed
0000E25A E180                               asl.l    #8,d0
0000E25C D1A8 000C                          add.l    d0,$C(a0)
0000E260 0668 0038 0012                     addi.w    #$38,$12(a0)            ; Apply gravity
0000E266 4E75                               rts
0000E268                            
0000E268                            ; ---------------------------------------------------------------------------
0000E268                            ; Subroutine translating object	speed to update	object position
0000E268                            ; ---------------------------------------------------------------------------
0000E268                            
0000E268                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E268                            
0000E268                            
0000E268                            SpeedToPos:
0000E268 4CA8 0005 0010             		movem.w	$10(a0),d0/d2	; load horizontal speed
0000E26E E180                       		asl.l	#8,d0		; multiply speed by $100
0000E270 E182                       		asl.l	#8,d2		; multiply speed by $100
0000E272                            
0000E272 4A38 FFF8                  		tst.b	($FFFFFFF8).w
0000E276 6A00                       		bpl.s	@60hz
0000E278 2600                       		move.l	d0,d3
0000E27A 6A00                       		bpl.s	@xflip
0000E27C 4483                       		neg.l	d3
0000E27E E48B                       		lsr.l	#2,d3
0000E280 9083                       		sub.l	d3,d0
0000E282 6000                       		bra.s	@xcont
0000E284                            @xflip:
0000E284 E48B                       		lsr.l	#2,d3
0000E286 D083                       		add.l	d3,d0
0000E288                            @xcont:
0000E288 2602                       		move.l	d2,d3
0000E28A 6A00                       		bpl.s	@yflip
0000E28C 4483                       		neg.l	d3
0000E28E E48B                       		lsr.l	#2,d3
0000E290 9483                       		sub.l	d3,d2
0000E292 6000                       		bra.s	@ycont
0000E294                            @yflip:
0000E294 E48B                       		lsr.l	#2,d3
0000E296 D483                       		add.l	d3,d2
0000E298                            @ycont:
0000E298                            @60hz:
0000E298 D1A8 0008                  		add.l	d0,8(a0)	; update x-axis	position
0000E29C D5A8 000C                  		add.l	d2,$C(a0)	; update y-axis	position
0000E2A0 4E75                       		rts	
0000E2A2                            ; End of function SpeedToPos
0000E2A2                            
0000E2A2                            ; ---------------------------------------------------------------------------
0000E2A2                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000E2A2                            ; ---------------------------------------------------------------------------
0000E2A2                            
0000E2A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E2A2                            
0000E2A2                            
0000E2A2                            DisplaySprite:
0000E2A2 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000E2A6 3028 0018                  		move.w	$18(a0),d0
0000E2AA E248                       		lsr.w	#1,d0
0000E2AC 0240 0380                  		andi.w	#$380,d0
0000E2B0 D2C0                       		adda.w	d0,a1
0000E2B2 0C51 007E                  		cmpi.w	#$7E,(a1)
0000E2B6 6400                       		bcc.s	locret_D620
0000E2B8 5451                       		addq.w	#2,(a1)
0000E2BA D2D1                       		adda.w	(a1),a1
0000E2BC 3288                       		move.w	a0,(a1)
0000E2BE                            
0000E2BE                            locret_D620:
0000E2BE 4E75                       		rts	
0000E2C0                            ; End of function DisplaySprite
0000E2C0                            
0000E2C0                            ; ---------------------------------------------------------------------------
0000E2C0                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000E2C0                            ; ---------------------------------------------------------------------------
0000E2C0                            
0000E2C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E2C0                            
0000E2C0                            
0000E2C0                            DisplaySprite2:
0000E2C0 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000E2C4 3029 0018                  		move.w	$18(a1),d0
0000E2C8 E248                       		lsr.w	#1,d0
0000E2CA 0240 0380                  		andi.w	#$380,d0
0000E2CE D4C0                       		adda.w	d0,a2
0000E2D0 0C52 007E                  		cmpi.w	#$7E,(a2)
0000E2D4 6400                       		bcc.s	locret_D63E
0000E2D6 5452                       		addq.w	#2,(a2)
0000E2D8 D4D2                       		adda.w	(a2),a2
0000E2DA 3489                       		move.w	a1,(a2)
0000E2DC                            
0000E2DC                            locret_D63E:
0000E2DC 4E75                       		rts	
0000E2DE                            ; End of function DisplaySprite2
0000E2DE                            
0000E2DE                            ; ---------------------------------------------------------------------------
0000E2DE                            ; Subroutine to	delete an object
0000E2DE                            ; ---------------------------------------------------------------------------
0000E2DE                            
0000E2DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E2DE                            
0000E2DE                            
0000E2DE                            DeleteObject:
0000E2DE 2248                       		movea.l	a0,a1
0000E2E0                            
0000E2E0                            DeleteObject2:
0000E2E0 7200                       		moveq	#0,d1
0000E2E2 700F                       		moveq	#$F,d0
0000E2E4                            
0000E2E4                            loc_D646:
0000E2E4 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000E2E6 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000E2EA 4E75                       		rts	
0000E2EC                            ; End of function DeleteObject
0000E2EC                            
0000E2EC                            ; ===========================================================================
0000E2EC 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000E2F0 00FF F700                  		dc.l $FFF700		; main screen x-position
0000E2F4 00FF F708                  		dc.l $FFF708		; background x-position	1
0000E2F8 00FF F718                  		dc.l $FFF718		; background x-position	2
0000E2FC                            ; ---------------------------------------------------------------------------
0000E2FC                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000E2FC                            ; ---------------------------------------------------------------------------
0000E2FC                            
0000E2FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E2FC                            
0000E2FC                            
0000E2FC                            BuildSprites:				; XREF: TitleScreen; et al
0000E2FC 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000E300 7A00                       		moveq	#0,d5
0000E302 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000E306 7E07                       		moveq	#7,d7
0000E308                            
0000E308                            loc_D66A:
0000E308 4A54                       		tst.w	(a4)
0000E30A 6700 0000                  		beq.w	loc_D72E
0000E30E 7C02                       		moveq	#2,d6
0000E310                            
0000E310                            loc_D672:
0000E310 3074 6000                  		movea.w	(a4,d6.w),a0
0000E314 4A10                       		tst.b	(a0)
0000E316 6700 0000                  		beq.w	loc_D726
0000E31A 08A8 0007 0001             		bclr	#7,1(a0)
0000E320 1028 0001                  		move.b	1(a0),d0
0000E324 1800                       		move.b	d0,d4
0000E326 0240 000C                  		andi.w	#$C,d0
0000E32A 6700                       		beq.s	loc_D6DE
0000E32C 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000E330 7000                       		moveq	#0,d0
0000E332 1028 0019                  		move.b	$19(a0),d0
0000E336 3628 0008                  		move.w	8(a0),d3
0000E33A 9651                       		sub.w	(a1),d3
0000E33C 3203                       		move.w	d3,d1
0000E33E D240                       		add.w	d0,d1
0000E340 6B00 0000                  		bmi.w	loc_D726
0000E344 3203                       		move.w	d3,d1
0000E346 9240                       		sub.w	d0,d1
0000E348 0C41 0140                  		cmpi.w	#$140,d1
0000E34C 6C00                       		bge.s	loc_D726
0000E34E 0643 0080                  		addi.w	#$80,d3
0000E352 0804 0004                  		btst	#4,d4
0000E356 6700                       		beq.s	loc_D6E8
0000E358 7000                       		moveq	#0,d0
0000E35A 1028 0016                  		move.b	$16(a0),d0
0000E35E 3428 000C                  		move.w	$C(a0),d2
0000E362 9469 0004                  		sub.w	4(a1),d2
0000E366 3202                       		move.w	d2,d1
0000E368 D240                       		add.w	d0,d1
0000E36A 6B00                       		bmi.s	loc_D726
0000E36C 3202                       		move.w	d2,d1
0000E36E 9240                       		sub.w	d0,d1
0000E370 0C41 00E0                  		cmpi.w	#$E0,d1
0000E374 6C00                       		bge.s	loc_D726
0000E376 0642 0080                  		addi.w	#$80,d2
0000E37A 6000                       		bra.s	loc_D700
0000E37C                            ; ===========================================================================
0000E37C                            
0000E37C                            loc_D6DE:
0000E37C 3428 000A                  		move.w	$A(a0),d2
0000E380 3628 0008                  		move.w	8(a0),d3
0000E384 6000                       		bra.s	loc_D700
0000E386                            ; ===========================================================================
0000E386                            
0000E386                            loc_D6E8:
0000E386 3428 000C                  		move.w	$C(a0),d2
0000E38A 9469 0004                  		sub.w	4(a1),d2
0000E38E 0642 0080                  		addi.w	#$80,d2
0000E392 0C42 0060                  		cmpi.w	#$60,d2
0000E396 6500                       		bcs.s	loc_D726
0000E398 0C42 0180                  		cmpi.w	#$180,d2
0000E39C 6400                       		bcc.s	loc_D726
0000E39E                            
0000E39E                            loc_D700:
0000E39E 2268 0004                  		movea.l	4(a0),a1
0000E3A2 7200                       		moveq	#0,d1
0000E3A4 0804 0005                  		btst	#5,d4
0000E3A8 6600                       		bne.s	loc_D71C
0000E3AA 1228 001A                  		move.b	$1A(a0),d1
0000E3AE D201                       		add.b	d1,d1
0000E3B0 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000E3B4 1219                       		move.b	(a1)+,d1
0000E3B6 5301                       		subq.b	#1,d1
0000E3B8 6B00                       		bmi.s	loc_D720
0000E3BA                            
0000E3BA                            loc_D71C:
0000E3BA 6100 0000                  		bsr.w	sub_D750
0000E3BE                            
0000E3BE                            loc_D720:
0000E3BE 08E8 0007 0001             		bset	#7,1(a0)
0000E3C4                            
0000E3C4                            loc_D726:
0000E3C4 5446                       		addq.w	#2,d6
0000E3C6 5554                       		subq.w	#2,(a4)
0000E3C8 6600 FF46                  		bne.w	loc_D672
0000E3CC                            
0000E3CC                            loc_D72E:
0000E3CC 49EC 0080                  		lea	$80(a4),a4
0000E3D0 51CF FF36                  		dbf	d7,loc_D66A
0000E3D4 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000E3D8 0C05 0050                  		cmpi.b	#$50,d5
0000E3DC 6700                       		beq.s	loc_D748
0000E3DE 24BC 0000 0000             		move.l	#0,(a2)
0000E3E4 4E75                       		rts	
0000E3E6                            ; ===========================================================================
0000E3E6                            
0000E3E6                            loc_D748:
0000E3E6 157C 0000 FFFB             		move.b	#0,-5(a2)
0000E3EC 4E75                       		rts	
0000E3EE                            ; End of function BuildSprites
0000E3EE                            
0000E3EE                            
0000E3EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E3EE                            
0000E3EE                            
0000E3EE                            sub_D750:				; XREF: BuildSprites
0000E3EE 3668 0002                  		movea.w	2(a0),a3
0000E3F2 0804 0000                  		btst	#0,d4
0000E3F6 6600                       		bne.s	loc_D796
0000E3F8 0804 0001                  		btst	#1,d4
0000E3FC 6600 0000                  		bne.w	loc_D7E4
0000E400                            ; End of function sub_D750
0000E400                            
0000E400                            
0000E400                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E400                            
0000E400                            
0000E400                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000E400 0C05 0050                  		cmpi.b	#$50,d5
0000E404 6700                       		beq.s	locret_D794
0000E406 1019                       		move.b	(a1)+,d0
0000E408 4880                       		ext.w	d0
0000E40A D042                       		add.w	d2,d0
0000E40C 34C0                       		move.w	d0,(a2)+
0000E40E 14D9                       		move.b	(a1)+,(a2)+
0000E410 5205                       		addq.b	#1,d5
0000E412 14C5                       		move.b	d5,(a2)+
0000E414 1019                       		move.b	(a1)+,d0
0000E416 E148                       		lsl.w	#8,d0
0000E418 1019                       		move.b	(a1)+,d0
0000E41A D04B                       		add.w	a3,d0
0000E41C 34C0                       		move.w	d0,(a2)+
0000E41E 1019                       		move.b	(a1)+,d0
0000E420 4880                       		ext.w	d0
0000E422 D043                       		add.w	d3,d0
0000E424 0240 01FF                  		andi.w	#$1FF,d0
0000E428 6600                       		bne.s	loc_D78E
0000E42A 5240                       		addq.w	#1,d0
0000E42C                            
0000E42C                            loc_D78E:
0000E42C 34C0                       		move.w	d0,(a2)+
0000E42E 51C9 FFD0                  		dbf	d1,sub_D762
0000E432                            
0000E432                            locret_D794:
0000E432 4E75                       		rts	
0000E434                            ; End of function sub_D762
0000E434                            
0000E434                            ; ===========================================================================
0000E434                            
0000E434                            loc_D796:
0000E434 0804 0001                  		btst	#1,d4
0000E438 6600 0000                  		bne.w	loc_D82A
0000E43C                            
0000E43C                            loc_D79E:
0000E43C 0C05 0050                  		cmpi.b	#$50,d5
0000E440 6700                       		beq.s	locret_D7E2
0000E442 1019                       		move.b	(a1)+,d0
0000E444 4880                       		ext.w	d0
0000E446 D042                       		add.w	d2,d0
0000E448 34C0                       		move.w	d0,(a2)+
0000E44A 1819                       		move.b	(a1)+,d4
0000E44C 14C4                       		move.b	d4,(a2)+
0000E44E 5205                       		addq.b	#1,d5
0000E450 14C5                       		move.b	d5,(a2)+
0000E452 1019                       		move.b	(a1)+,d0
0000E454 E148                       		lsl.w	#8,d0
0000E456 1019                       		move.b	(a1)+,d0
0000E458 D04B                       		add.w	a3,d0
0000E45A 0A40 0800                  		eori.w	#$800,d0
0000E45E 34C0                       		move.w	d0,(a2)+
0000E460 1019                       		move.b	(a1)+,d0
0000E462 4880                       		ext.w	d0
0000E464 4440                       		neg.w	d0
0000E466 D804                       		add.b	d4,d4
0000E468 0244 0018                  		andi.w	#$18,d4
0000E46C 5044                       		addq.w	#8,d4
0000E46E 9044                       		sub.w	d4,d0
0000E470 D043                       		add.w	d3,d0
0000E472 0240 01FF                  		andi.w	#$1FF,d0
0000E476 6600                       		bne.s	loc_D7DC
0000E478 5240                       		addq.w	#1,d0
0000E47A                            
0000E47A                            loc_D7DC:
0000E47A 34C0                       		move.w	d0,(a2)+
0000E47C 51C9 FFBE                  		dbf	d1,loc_D79E
0000E480                            
0000E480                            locret_D7E2:
0000E480 4E75                       		rts	
0000E482                            ; ===========================================================================
0000E482                            
0000E482                            loc_D7E4:				; XREF: sub_D750
0000E482 0C05 0050                  		cmpi.b	#$50,d5
0000E486 6700                       		beq.s	locret_D828
0000E488 1019                       		move.b	(a1)+,d0
0000E48A 1811                       		move.b	(a1),d4
0000E48C 4880                       		ext.w	d0
0000E48E 4440                       		neg.w	d0
0000E490 E70C                       		lsl.b	#3,d4
0000E492 0244 0018                  		andi.w	#$18,d4
0000E496 5044                       		addq.w	#8,d4
0000E498 9044                       		sub.w	d4,d0
0000E49A D042                       		add.w	d2,d0
0000E49C 34C0                       		move.w	d0,(a2)+
0000E49E 14D9                       		move.b	(a1)+,(a2)+
0000E4A0 5205                       		addq.b	#1,d5
0000E4A2 14C5                       		move.b	d5,(a2)+
0000E4A4 1019                       		move.b	(a1)+,d0
0000E4A6 E148                       		lsl.w	#8,d0
0000E4A8 1019                       		move.b	(a1)+,d0
0000E4AA D04B                       		add.w	a3,d0
0000E4AC 0A40 1000                  		eori.w	#$1000,d0
0000E4B0 34C0                       		move.w	d0,(a2)+
0000E4B2 1019                       		move.b	(a1)+,d0
0000E4B4 4880                       		ext.w	d0
0000E4B6 D043                       		add.w	d3,d0
0000E4B8 0240 01FF                  		andi.w	#$1FF,d0
0000E4BC 6600                       		bne.s	loc_D822
0000E4BE 5240                       		addq.w	#1,d0
0000E4C0                            
0000E4C0                            loc_D822:
0000E4C0 34C0                       		move.w	d0,(a2)+
0000E4C2 51C9 FFBE                  		dbf	d1,loc_D7E4
0000E4C6                            
0000E4C6                            locret_D828:
0000E4C6 4E75                       		rts	
0000E4C8                            ; ===========================================================================
0000E4C8                            
0000E4C8                            loc_D82A:
0000E4C8 0C05 0050                  		cmpi.b	#$50,d5
0000E4CC 6700                       		beq.s	locret_D87C
0000E4CE 1019                       		move.b	(a1)+,d0
0000E4D0 1811                       		move.b	(a1),d4
0000E4D2 4880                       		ext.w	d0
0000E4D4 4440                       		neg.w	d0
0000E4D6 E70C                       		lsl.b	#3,d4
0000E4D8 0244 0018                  		andi.w	#$18,d4
0000E4DC 5044                       		addq.w	#8,d4
0000E4DE 9044                       		sub.w	d4,d0
0000E4E0 D042                       		add.w	d2,d0
0000E4E2 34C0                       		move.w	d0,(a2)+
0000E4E4 1819                       		move.b	(a1)+,d4
0000E4E6 14C4                       		move.b	d4,(a2)+
0000E4E8 5205                       		addq.b	#1,d5
0000E4EA 14C5                       		move.b	d5,(a2)+
0000E4EC 1019                       		move.b	(a1)+,d0
0000E4EE E148                       		lsl.w	#8,d0
0000E4F0 1019                       		move.b	(a1)+,d0
0000E4F2 D04B                       		add.w	a3,d0
0000E4F4 0A40 1800                  		eori.w	#$1800,d0
0000E4F8 34C0                       		move.w	d0,(a2)+
0000E4FA 1019                       		move.b	(a1)+,d0
0000E4FC 4880                       		ext.w	d0
0000E4FE 4440                       		neg.w	d0
0000E500 D804                       		add.b	d4,d4
0000E502 0244 0018                  		andi.w	#$18,d4
0000E506 5044                       		addq.w	#8,d4
0000E508 9044                       		sub.w	d4,d0
0000E50A D043                       		add.w	d3,d0
0000E50C 0240 01FF                  		andi.w	#$1FF,d0
0000E510 6600                       		bne.s	loc_D876
0000E512 5240                       		addq.w	#1,d0
0000E514                            
0000E514                            loc_D876:
0000E514 34C0                       		move.w	d0,(a2)+
0000E516 51C9 FFB0                  		dbf	d1,loc_D82A
0000E51A                            
0000E51A                            locret_D87C:
0000E51A 4E75                       		rts	
0000E51C                            ; ---------------------------------------------------------------------------
0000E51C                            ; Subroutine to	check if an object is on the screen
0000E51C                            ; ---------------------------------------------------------------------------
0000E51C                            
0000E51C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E51C                            
0000E51C                            
0000E51C                            ChkObjOnScreen:
0000E51C 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000E520 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000E524 6B00                       		bmi.s	NotOnScreen
0000E526 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000E52A 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E52C                            
0000E52C 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000E530 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000E534 6B00                       		bmi.s	NotOnScreen
0000E536 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000E53A 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E53C                            
0000E53C 7000                       		moveq	#0,d0		; set flag to 0
0000E53E 4E75                       		rts	
0000E540                            ; ===========================================================================
0000E540                            
0000E540                            NotOnScreen:				; XREF: ChkObjOnScreen
0000E540 7001                       		moveq	#1,d0		; set flag to 1
0000E542 4E75                       		rts	
0000E544                            ; End of function ChkObjOnScreen
0000E544                            
0000E544                            
0000E544                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E544                            
0000E544                            
0000E544                            ChkObjOnScreen2:
0000E544 7200                       		moveq	#0,d1
0000E546 1228 0019                  		move.b	$19(a0),d1
0000E54A 3028 0008                  		move.w	8(a0),d0
0000E54E 9078 F700                  		sub.w	($FFFFF700).w,d0
0000E552 D041                       		add.w	d1,d0
0000E554 6B00                       		bmi.s	NotOnScreen2
0000E556 D241                       		add.w	d1,d1
0000E558 9041                       		sub.w	d1,d0
0000E55A 0C40 0140                  		cmpi.w	#320,d0
0000E55E 6C00                       		bge.s	NotOnScreen2
0000E560                            
0000E560 3228 000C                  		move.w	$C(a0),d1
0000E564 9278 F704                  		sub.w	($FFFFF704).w,d1
0000E568 6B00                       		bmi.s	NotOnScreen2
0000E56A 0C41 00E0                  		cmpi.w	#224,d1
0000E56E 6C00                       		bge.s	NotOnScreen2
0000E570                            
0000E570 7000                       		moveq	#0,d0
0000E572 4E75                       		rts	
0000E574                            ; ===========================================================================
0000E574                            
0000E574                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000E574 7001                       		moveq	#1,d0
0000E576 4E75                       		rts	
0000E578                            ; End of function ChkObjOnScreen2
0000E578                            
0000E578                            ; ---------------------------------------------------------------------------
0000E578                            ; Subroutine to	load a level's objects
0000E578                            ; ---------------------------------------------------------------------------
0000E578                            
0000E578                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E578                            
0000E578                            
0000E578                            ObjPosLoad:				; XREF: Level; et al
0000E578 7000                       		moveq	#0,d0
0000E57A 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000E57E 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000E582 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000E586                            ; End of function ObjPosLoad
0000E586                            
0000E586                            ; ===========================================================================
0000E586 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000E588 0000                       		dc.w OPL_Next-OPL_Index
0000E58A                            ; ===========================================================================
0000E58A                            
0000E58A                            OPL_Main:				; XREF: OPL_Index
0000E58A 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000E58E 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000E592 ED08                       		lsl.b	#6,d0
0000E594 E848                       		lsr.w	#4,d0
0000E596 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000E59C 2248                       		movea.l	a0,a1
0000E59E D0F0 0000                  		adda.w	(a0,d0.w),a0
0000E5A2 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E5A6 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E5AA D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000E5AE 21C9 F778                  		move.l	a1,($FFFFF778).w
0000E5B2 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000E5B6 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E5BA 34FC 0101                  		move.w	#$101,(a2)+
0000E5BE 303C 005E                  		move.w	#$5E,d0
0000E5C2                            
0000E5C2                            OPL_ClrList:
0000E5C2 429A                       		clr.l	(a2)+
0000E5C4 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000E5C8                            
0000E5C8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E5CC 7400                       		moveq	#0,d2
0000E5CE 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E5D2 0446 0080                  		subi.w	#$80,d6
0000E5D6 6400                       		bcc.s	loc_D93C
0000E5D8 7C00                       		moveq	#0,d6
0000E5DA                            
0000E5DA                            loc_D93C:
0000E5DA 0246 FF80                  		andi.w	#$FF80,d6
0000E5DE 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E5E2                            
0000E5E2                            loc_D944:
0000E5E2 BC50                       		cmp.w	(a0),d6
0000E5E4 6300                       		bls.s	loc_D956
0000E5E6 4A28 0004                  		tst.b	4(a0)
0000E5EA 6A00                       		bpl.s	loc_D952
0000E5EC 1412                       		move.b	(a2),d2
0000E5EE 5212                       		addq.b	#1,(a2)
0000E5F0                            
0000E5F0                            loc_D952:
0000E5F0 5C48                       		addq.w	#6,a0
0000E5F2 60EE                       		bra.s	loc_D944
0000E5F4                            ; ===========================================================================
0000E5F4                            
0000E5F4                            loc_D956:
0000E5F4 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E5F8 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E5FC 0446 0080                  		subi.w	#$80,d6
0000E600 6500                       		bcs.s	loc_D976
0000E602                            
0000E602                            loc_D964:
0000E602 BC50                       		cmp.w	(a0),d6
0000E604 6300                       		bls.s	loc_D976
0000E606 4A28 0004                  		tst.b	4(a0)
0000E60A 6A00                       		bpl.s	loc_D972
0000E60C 522A 0001                  		addq.b	#1,1(a2)
0000E610                            
0000E610                            loc_D972:
0000E610 5C48                       		addq.w	#6,a0
0000E612 60EE                       		bra.s	loc_D964
0000E614                            ; ===========================================================================
0000E614                            
0000E614                            loc_D976:
0000E614 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E618 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000E61E                            
0000E61E                            OPL_Next:				; XREF: OPL_Index
0000E61E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E622 7400                       		moveq	#0,d2
0000E624 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E628 0246 FF80                  		andi.w	#$FF80,d6
0000E62C BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000E630 6700 0000                  		beq.w	locret_DA3A
0000E634 6C00                       		bge.s	loc_D9F6
0000E636 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E63A 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E63E 0446 0080                  		subi.w	#$80,d6
0000E642 6500                       		bcs.s	loc_D9D2
0000E644                            
0000E644                            loc_D9A6:
0000E644 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E648 6C00                       		bge.s	loc_D9D2
0000E64A 5D48                       		subq.w	#6,a0
0000E64C 4A28 0004                  		tst.b	4(a0)
0000E650 6A00                       		bpl.s	loc_D9BC
0000E652 532A 0001                  		subq.b	#1,1(a2)
0000E656 142A 0001                  		move.b	1(a2),d2
0000E65A                            
0000E65A                            loc_D9BC:
0000E65A 6100 0000                  		bsr.w	loc_DA3C
0000E65E 6600                       		bne.s	loc_D9C6
0000E660 5D48                       		subq.w	#6,a0
0000E662 60E0                       		bra.s	loc_D9A6
0000E664                            ; ===========================================================================
0000E664                            
0000E664                            loc_D9C6:
0000E664 4A28 0004                  		tst.b	4(a0)
0000E668 6A00                       		bpl.s	loc_D9D0
0000E66A 522A 0001                  		addq.b	#1,1(a2)
0000E66E                            
0000E66E                            loc_D9D0:
0000E66E 5C48                       		addq.w	#6,a0
0000E670                            
0000E670                            loc_D9D2:
0000E670 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E674 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E678 0646 0300                  		addi.w	#$300,d6
0000E67C                            
0000E67C                            loc_D9DE:
0000E67C BC68 FFFA                  		cmp.w	-6(a0),d6
0000E680 6E00                       		bgt.s	loc_D9F0
0000E682 4A28 FFFE                  		tst.b	-2(a0)
0000E686 6A00                       		bpl.s	loc_D9EC
0000E688 5312                       		subq.b	#1,(a2)
0000E68A                            
0000E68A                            loc_D9EC:
0000E68A 5D48                       		subq.w	#6,a0
0000E68C 60EE                       		bra.s	loc_D9DE
0000E68E                            ; ===========================================================================
0000E68E                            
0000E68E                            loc_D9F0:
0000E68E 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E692 4E75                       		rts	
0000E694                            ; ===========================================================================
0000E694                            
0000E694                            loc_D9F6:
0000E694 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E698 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E69C 0646 0280                  		addi.w	#$280,d6
0000E6A0                            
0000E6A0                            loc_DA02:
0000E6A0 BC50                       		cmp.w	(a0),d6
0000E6A2 6300                       		bls.s	loc_DA16
0000E6A4 4A28 0004                  		tst.b	4(a0)
0000E6A8 6A00                       		bpl.s	loc_DA10
0000E6AA 1412                       		move.b	(a2),d2
0000E6AC 5212                       		addq.b	#1,(a2)
0000E6AE                            
0000E6AE                            loc_DA10:
0000E6AE 6100 0000                  		bsr.w	loc_DA3C
0000E6B2 67EC                       		beq.s	loc_DA02
0000E6B4                            
0000E6B4                            loc_DA16:
0000E6B4 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E6B8 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E6BC 0446 0300                  		subi.w	#$300,d6
0000E6C0 6500                       		bcs.s	loc_DA36
0000E6C2                            
0000E6C2                            loc_DA24:
0000E6C2 BC50                       		cmp.w	(a0),d6
0000E6C4 6300                       		bls.s	loc_DA36
0000E6C6 4A28 0004                  		tst.b	4(a0)
0000E6CA 6A00                       		bpl.s	loc_DA32
0000E6CC 522A 0001                  		addq.b	#1,1(a2)
0000E6D0                            
0000E6D0                            loc_DA32:
0000E6D0 5C48                       		addq.w	#6,a0
0000E6D2 60EE                       		bra.s	loc_DA24
0000E6D4                            ; ===========================================================================
0000E6D4                            
0000E6D4                            loc_DA36:
0000E6D4 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E6D8                            
0000E6D8                            locret_DA3A:
0000E6D8 4E75                       		rts	
0000E6DA                            ; ===========================================================================
0000E6DA                            
0000E6DA                            loc_DA3C:
0000E6DA 4A28 0004                  		tst.b	4(a0)
0000E6DE 6A00                       		bpl.s	OPL_MakeItem
0000E6E0 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000E6E6 6700                       		beq.s	OPL_MakeItem
0000E6E8 5C48                       		addq.w	#6,a0
0000E6EA 7000                       		moveq	#0,d0
0000E6EC 4E75                       		rts	
0000E6EE                            ; ===========================================================================
0000E6EE                            
0000E6EE                            OPL_MakeItem:
0000E6EE 6100 0000                  		bsr.w	SingleObjLoad
0000E6F2 6600                       		bne.s	locret_DA8A
0000E6F4 3358 0008                  		move.w	(a0)+,8(a1)
0000E6F8 3018                       		move.w	(a0)+,d0
0000E6FA 3200                       		move.w	d0,d1
0000E6FC 0240 0FFF                  		andi.w	#$FFF,d0
0000E700 3340 000C                  		move.w	d0,$C(a1)
0000E704 E559                       		rol.w	#2,d1
0000E706 0201 0003                  		andi.b	#3,d1
0000E70A 1341 0001                  		move.b	d1,1(a1)
0000E70E 1341 0022                  		move.b	d1,$22(a1)
0000E712 1018                       		move.b	(a0)+,d0
0000E714 6A00                       		bpl.s	loc_DA80
0000E716 0200 007F                  		andi.b	#$7F,d0
0000E71A 1342 0023                  		move.b	d2,$23(a1)
0000E71E                            
0000E71E                            loc_DA80:
0000E71E 1280                       		move.b	d0,0(a1)
0000E720 1358 0028                  		move.b	(a0)+,$28(a1)
0000E724 7000                       		moveq	#0,d0
0000E726                            
0000E726                            locret_DA8A:
0000E726 4E75                       		rts	
0000E728                            ; ---------------------------------------------------------------------------
0000E728                            ; Single object	loading	subroutine
0000E728                            ; ---------------------------------------------------------------------------
0000E728                            
0000E728                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E728                            
0000E728                            
0000E728                            SingleObjLoad:
0000E728 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E72C 303C 005F                  		move.w	#$5F,d0
0000E730                            
0000E730                            loc_DA94:
0000E730 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E732 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E734 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E738 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E73C                            
0000E73C                            locret_DAA0:
0000E73C 4E75                       		rts	
0000E73E                            ; End of function SingleObjLoad
0000E73E                            
0000E73E                            
0000E73E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E73E                            
0000E73E                            
0000E73E                            SingleObjLoad2:
0000E73E 2248                       		movea.l	a0,a1
0000E740 303C F000                  		move.w	#-$1000,d0
0000E744 9048                       		sub.w	a0,d0
0000E746 EC48                       		lsr.w	#6,d0
0000E748 5340                       		subq.w	#1,d0
0000E74A 6500                       		bcs.s	locret_DABC
0000E74C                            
0000E74C                            loc_DAB0:
0000E74C 4A11                       		tst.b	(a1)
0000E74E 6700                       		beq.s	locret_DABC
0000E750 43E9 0040                  		lea	$40(a1),a1
0000E754 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E758                            
0000E758                            locret_DABC:
0000E758 4E75                       		rts	
0000E75A                            ; End of function SingleObjLoad2
0000E75A                            
0000E75A                            ; ===========================================================================
0000E75A                            ; ---------------------------------------------------------------------------
0000E75A                            ; Object 41 - springs
0000E75A                            ; ---------------------------------------------------------------------------
0000E75A                            
0000E75A                            Obj41:					; XREF: Obj_Index
0000E75A 7000                       		moveq	#0,d0
0000E75C 1028 0024                  		move.b	$24(a0),d0
0000E760 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E764 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E768 6100 FB38                  		bsr.w	DisplaySprite
0000E76C 3028 0008                  		move.w	8(a0),d0
0000E770 0240 FF80                  		andi.w	#$FF80,d0
0000E774 3238 F700                  		move.w	($FFFFF700).w,d1
0000E778 0441 0080                  		subi.w	#$80,d1
0000E77C 0241 FF80                  		andi.w	#$FF80,d1
0000E780 9041                       		sub.w	d1,d0
0000E782 0C40 0280                  		cmpi.w	#$280,d0
0000E786 6200 FB56                  		bhi.w	DeleteObject
0000E78A 4E75                       		rts	
0000E78C                            ; ===========================================================================
0000E78C 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E78E 0000                       		dc.w Obj41_Up-Obj41_Index
0000E790 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E792 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E794 0000                       		dc.w Obj41_LR-Obj41_Index
0000E796 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E798 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E79A 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E79C 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E79E 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E7A0                            
0000E7A0 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E7A2 F600                       		dc.w -$A00		; power	of yellow spring
0000E7A4                            ; ===========================================================================
0000E7A4                            
0000E7A4                            Obj41_Main:				; XREF: Obj41_Index
0000E7A4 5428 0024                  		addq.b	#2,$24(a0)
0000E7A8 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E7B0 317C 0523 0002             		move.w	#$523,2(a0)
0000E7B6 0028 0004 0001             		ori.b	#4,1(a0)
0000E7BC 117C 0010 0019             		move.b	#$10,$19(a0)
0000E7C2 117C 0004 0018             		move.b	#4,$18(a0)
0000E7C8 1028 0028                  		move.b	$28(a0),d0
0000E7CC 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E7D0 6700                       		beq.s	loc_DB54	; if not, branch
0000E7D2 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E7D8 117C 0001 001C             		move.b	#1,$1C(a0)
0000E7DE 117C 0003 001A             		move.b	#3,$1A(a0)
0000E7E4 317C 0533 0002             		move.w	#$533,2(a0)
0000E7EA 117C 0008 0019             		move.b	#8,$19(a0)
0000E7F0                            
0000E7F0                            loc_DB54:
0000E7F0 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E7F4 6700                       		beq.s	loc_DB66	; if not, branch
0000E7F6 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E7FC 08E8 0001 0022             		bset	#1,$22(a0)
0000E802                            
0000E802                            loc_DB66:
0000E802 0800 0001                  		btst	#1,d0
0000E806 6700                       		beq.s	loc_DB72
0000E808 08E8 0005 0002             		bset	#5,2(a0)
0000E80E                            
0000E80E                            loc_DB72:
0000E80E 0240 000F                  		andi.w	#$F,d0
0000E812 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E818 4E75                       		rts	
0000E81A                            ; ===========================================================================
0000E81A                            
0000E81A                            Obj41_Up:				; XREF: Obj41_Index
0000E81A 323C 001B                  		move.w	#$1B,d1
0000E81E 343C 0008                  		move.w	#8,d2
0000E822 363C 0010                  		move.w	#$10,d3
0000E826 3828 0008                  		move.w	8(a0),d4
0000E82A 6100 0000                  		bsr.w	SolidObject
0000E82E 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E832 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E834 4E75                       		rts	
0000E836                            ; ===========================================================================
0000E836                            
0000E836                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E836 5428 0024                  		addq.b	#2,$24(a0)
0000E83A 5069 000C                  		addq.w	#8,$C(a1)
0000E83E 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E844 08E9 0001 0022             		bset	#1,$22(a1)
0000E84A 08A9 0003 0022             		bclr	#3,$22(a1)
0000E850 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E856 137C 0002 0024             		move.b	#2,$24(a1)
0000E85C 08A8 0003 0022             		bclr	#3,$22(a0)
0000E862 4228 0025                  		clr.b	$25(a0)
0000E866 303C 00CC                  		move.w	#$CC,d0
0000E86A 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play spring sound
0000E870                            
0000E870                            Obj41_AniUp:				; XREF: Obj41_Index
0000E870 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E876 6000 CA82                  		bra.w	AnimateSprite
0000E87A                            ; ===========================================================================
0000E87A                            
0000E87A                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E87A 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E880 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E884 4E75                       		rts	
0000E886                            ; ===========================================================================
0000E886                            
0000E886                            Obj41_LR:				; XREF: Obj41_Index
0000E886 323C 0013                  		move.w	#$13,d1
0000E88A 343C 000E                  		move.w	#$E,d2
0000E88E 363C 000F                  		move.w	#$F,d3
0000E892 3828 0008                  		move.w	8(a0),d4
0000E896 6100 0000                  		bsr.w	SolidObject
0000E89A 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E8A0 6600                       		bne.s	loc_DC0C
0000E8A2 117C 0008 0024             		move.b	#8,$24(a0)
0000E8A8                            
0000E8A8                            loc_DC0C:
0000E8A8 0828 0005 0022             		btst	#5,$22(a0)
0000E8AE 6600                       		bne.s	Obj41_BounceLR
0000E8B0 4E75                       		rts	
0000E8B2                            ; ===========================================================================
0000E8B2                            
0000E8B2                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E8B2 5428 0024                  		addq.b	#2,$24(a0)
0000E8B6 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E8BC 5069 0008                  		addq.w	#8,8(a1)
0000E8C0 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E8C6 6600                       		bne.s	loc_DC36	; if yes, branch
0000E8C8 0469 0010 0008             		subi.w	#$10,8(a1)
0000E8CE 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E8D2                            
0000E8D2                            loc_DC36:
0000E8D2 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E8D8 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E8DE 0869 0000 0022             		bchg	#0,$22(a1)
0000E8E4 0829 0002 0022             		btst	#2,$22(a1)
0000E8EA 6600                       		bne.s	loc_DC56
0000E8EC 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E8F2                            
0000E8F2                            loc_DC56:
0000E8F2 08A8 0005 0022             		bclr	#5,$22(a0)
0000E8F8 08A9 0005 0022             		bclr	#5,$22(a1)
0000E8FE 303C 00CC                  		move.w	#$CC,d0
0000E902 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play spring sound
0000E908                            
0000E908                            Obj41_AniLR:				; XREF: Obj41_Index
0000E908 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E90E 6000 C9EA                  		bra.w	AnimateSprite
0000E912                            ; ===========================================================================
0000E912                            
0000E912                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E912 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E918 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E91C 4E75                       		rts	
0000E91E                            ; ===========================================================================
0000E91E                            
0000E91E                            Obj41_Dwn:				; XREF: Obj41_Index
0000E91E 323C 001B                  		move.w	#$1B,d1
0000E922 343C 0008                  		move.w	#8,d2
0000E926 363C 0010                  		move.w	#$10,d3
0000E92A 3828 0008                  		move.w	8(a0),d4
0000E92E 6100 0000                  		bsr.w	SolidObject
0000E932 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E938 6600                       		bne.s	loc_DCA4
0000E93A 117C 000E 0024             		move.b	#$E,$24(a0)
0000E940                            
0000E940                            loc_DCA4:
0000E940 4A28 0025                  		tst.b	$25(a0)
0000E944 6600                       		bne.s	locret_DCAE
0000E946 4A44                       		tst.w	d4
0000E948 6B00                       		bmi.s	Obj41_BounceDwn
0000E94A                            
0000E94A                            locret_DCAE:
0000E94A 4E75                       		rts	
0000E94C                            ; ===========================================================================
0000E94C                            
0000E94C                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E94C 5428 0024                  		addq.b	#2,$24(a0)
0000E950 5169 000C                  		subq.w	#8,$C(a1)
0000E954 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E95A 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E95E 08E9 0001 0022             		bset	#1,$22(a1)
0000E964 08A9 0003 0022             		bclr	#3,$22(a1)
0000E96A 137C 0002 0024             		move.b	#2,$24(a1)
0000E970 08A8 0003 0022             		bclr	#3,$22(a0)
0000E976 4228 0025                  		clr.b	$25(a0)
0000E97A 303C 00CC                  		move.w	#$CC,d0
0000E97E 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play spring sound
0000E984                            
0000E984                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E984 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E98A 6000 C96E                  		bra.w	AnimateSprite
0000E98E                            ; ===========================================================================
0000E98E                            
0000E98E                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E98E 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E994 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E998 4E75                       		rts	
0000E99A                            ; ===========================================================================
0000E99A                            Ani_obj41:
0000E99A                            	include "_anim\obj41.asm"
0000E99A                            ; ---------------------------------------------------------------------------
0000E99A                            ; Animation script - springs
0000E99A                            ; ---------------------------------------------------------------------------
0000E99A 0000                       		dc.w byte_DD02-Ani_obj41
0000E99C 0000                       		dc.w byte_DD0E-Ani_obj41
0000E99E 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E9AA 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E9B6                            		even
0000E9B6                            		even
0000E9B6                            
0000E9B6                            ; ---------------------------------------------------------------------------
0000E9B6                            ; Sprite mappings - springs
0000E9B6                            ; ---------------------------------------------------------------------------
0000E9B6                            Map_obj41:
0000E9B6                            	include "_maps\obj41.asm"
0000E9B6                            ; ---------------------------------------------------------------------------
0000E9B6                            ; Sprite mappings - springs
0000E9B6                            ; ---------------------------------------------------------------------------
0000E9B6 0000                       		dc.w byte_DD26-Map_obj41
0000E9B8 0000                       		dc.w byte_DD31-Map_obj41
0000E9BA 0000                       		dc.w byte_DD37-Map_obj41
0000E9BC 0000                       		dc.w byte_DD47-Map_obj41
0000E9BE 0000                       		dc.w byte_DD4D-Map_obj41
0000E9C0 0000                       		dc.w byte_DD53-Map_obj41
0000E9C2 02                         byte_DD26:	dc.b 2
0000E9C3 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E9C8 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E9CD 01                         byte_DD31:	dc.b 1
0000E9CE 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E9D3 03                         byte_DD37:	dc.b 3
0000E9D4 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E9D9 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E9DE 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E9E3 01                         byte_DD47:	dc.b 1
0000E9E4 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E9E9 01                         byte_DD4D:	dc.b 1
0000E9EA F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E9EF 04                         byte_DD53:	dc.b 4
0000E9F0 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E9F5 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E9FA F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E9FF 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000EA04                            		even
0000EA04                            		even
0000EA04                            
0000EA04                            ; ===========================================================================
0000EA04                            ; ---------------------------------------------------------------------------
0000EA04                            ; Object 42 - Newtron enemy (GHZ)
0000EA04                            ; ---------------------------------------------------------------------------
0000EA04                            
0000EA04                            Obj42:					; XREF: Obj_Index
0000EA04 7000                       		moveq	#0,d0
0000EA06 1028 0024                  		move.b	$24(a0),d0
0000EA0A 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000EA0E 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000EA12                            ; ===========================================================================
0000EA12 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000EA14 0000                       		dc.w Obj42_Action-Obj42_Index
0000EA16 0000                       		dc.w Obj42_Delete-Obj42_Index
0000EA18                            ; ===========================================================================
0000EA18                            
0000EA18                            Obj42_Main:				; XREF: Obj42_Index
0000EA18 5428 0024                  		addq.b	#2,$24(a0)
0000EA1C 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000EA24 317C 049B 0002             		move.w	#$49B,2(a0)
0000EA2A 117C 0004 0001             		move.b	#4,1(a0)
0000EA30 117C 0004 0018             		move.b	#4,$18(a0)
0000EA36 117C 0014 0019             		move.b	#$14,$19(a0)
0000EA3C 117C 0010 0016             		move.b	#$10,$16(a0)
0000EA42 117C 0008 0017             		move.b	#8,$17(a0)
0000EA48                            
0000EA48                            Obj42_Action:				; XREF: Obj42_Index
0000EA48 7000                       		moveq	#0,d0
0000EA4A 1028 0025                  		move.b	$25(a0),d0
0000EA4E 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000EA52 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000EA56 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000EA5C 6100 C89C                  		bsr.w	AnimateSprite
0000EA60 6000 0000                  		bra.w	MarkObjGone
0000EA64                            ; ===========================================================================
0000EA64 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000EA66 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000EA68 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000EA6A 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000EA6C 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000EA6E                            ; ===========================================================================
0000EA6E                            
0000EA6E                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000EA6E 08E8 0000 0022             		bset	#0,$22(a0)
0000EA74 3038 D008                  		move.w	($FFFFD008).w,d0
0000EA78 9068 0008                  		sub.w	8(a0),d0
0000EA7C 6400                       		bcc.s	loc_DDEA
0000EA7E 4440                       		neg.w	d0
0000EA80 08A8 0000 0022             		bclr	#0,$22(a0)
0000EA86                            
0000EA86                            loc_DDEA:
0000EA86 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000EA8A 6400                       		bcc.s	locret_DE12	; if not, branch
0000EA8C 5428 0025                  		addq.b	#2,$25(a0)
0000EA90 117C 0001 001C             		move.b	#1,$1C(a0)
0000EA96 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000EA9A 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000EA9C 317C 249B 0002             		move.w	#$249B,2(a0)
0000EAA2 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000EAA8 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000EAAE                            
0000EAAE                            locret_DE12:
0000EAAE 4E75                       		rts	
0000EAB0                            ; ===========================================================================
0000EAB0                            
0000EAB0                            Obj42_Type00:				; XREF: Obj42_Index2
0000EAB0 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000EAB6 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000EAB8 08E8 0000 0022             		bset	#0,$22(a0)
0000EABE 3038 D008                  		move.w	($FFFFD008).w,d0
0000EAC2 9068 0008                  		sub.w	8(a0),d0
0000EAC6 6400                       		bcc.s	locret_DE32
0000EAC8 08A8 0000 0022             		bclr	#0,$22(a0)
0000EACE                            
0000EACE                            locret_DE32:
0000EACE 4E75                       		rts	
0000EAD0                            ; ===========================================================================
0000EAD0                            
0000EAD0                            Obj42_Fall:				; XREF: Obj42_Type00
0000EAD0 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000EAD6 6600                       		bne.s	loc_DE42
0000EAD8 117C 000C 0020             		move.b	#$C,$20(a0)
0000EADE                            
0000EADE                            loc_DE42:
0000EADE 6100 F726                  		bsr.w	ObjectFall
0000EAE2 6100 0000                  		bsr.w	ObjHitFloor
0000EAE6 4A41                       		tst.w	d1		; has newtron hit the floor?
0000EAE8 6A00                       		bpl.s	locret_DE86	; if not, branch
0000EAEA D368 000C                  		add.w	d1,$C(a0)
0000EAEE 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000EAF4 5428 0025                  		addq.b	#2,$25(a0)
0000EAF8 117C 0002 001C             		move.b	#2,$1C(a0)
0000EAFE 0828 0005 0002             		btst	#5,2(a0)
0000EB04 6700                       		beq.s	Obj42_Move
0000EB06 5228 001C                  		addq.b	#1,$1C(a0)
0000EB0A                            
0000EB0A                            Obj42_Move:
0000EB0A 117C 000D 0020             		move.b	#$D,$20(a0)
0000EB10 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000EB16 0828 0000 0022             		btst	#0,$22(a0)
0000EB1C 6600                       		bne.s	locret_DE86
0000EB1E 4468 0010                  		neg.w	$10(a0)
0000EB22                            
0000EB22                            locret_DE86:
0000EB22 4E75                       		rts	
0000EB24                            ; ===========================================================================
0000EB24                            
0000EB24                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000EB24 6100 F742                  		bsr.w	SpeedToPos
0000EB28 6100 0000                  		bsr.w	ObjHitFloor
0000EB2C 0C41 FFF8                  		cmpi.w	#-8,d1
0000EB30 6D00                       		blt.s	loc_DEA2
0000EB32 0C41 000C                  		cmpi.w	#$C,d1
0000EB36 6C00                       		bge.s	loc_DEA2
0000EB38 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000EB3C 4E75                       		rts	
0000EB3E                            ; ===========================================================================
0000EB3E                            
0000EB3E                            loc_DEA2:
0000EB3E 5428 0025                  		addq.b	#2,$25(a0)
0000EB42 4E75                       		rts	
0000EB44                            ; ===========================================================================
0000EB44                            
0000EB44                            Obj42_Speed:				; XREF: Obj42_Index2
0000EB44 6000 F722                  		bra.w	SpeedToPos
0000EB48                            ; ===========================================================================
0000EB48                            
0000EB48                            Obj42_Type01:				; XREF: Obj42_Index2
0000EB48 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000EB4E 6600                       		bne.s	Obj42_FireMissile
0000EB50 117C 000C 0020             		move.b	#$C,$20(a0)
0000EB56                            
0000EB56                            Obj42_FireMissile:
0000EB56 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000EB5C 6600                       		bne.s	locret_DF14
0000EB5E 4A28 0032                  		tst.b	$32(a0)
0000EB62 6600                       		bne.s	locret_DF14
0000EB64 117C 0001 0032             		move.b	#1,$32(a0)
0000EB6A 6100 FBBC                  		bsr.w	SingleObjLoad
0000EB6E 6600                       		bne.s	locret_DF14
0000EB70 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000EB74 3368 0008 0008             		move.w	8(a0),8(a1)
0000EB7A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EB80 5169 000C                  		subq.w	#8,$C(a1)
0000EB84 337C 0200 0010             		move.w	#$200,$10(a1)
0000EB8A 303C 0014                  		move.w	#$14,d0
0000EB8E 0828 0000 0022             		btst	#0,$22(a0)
0000EB94 6600                       		bne.s	loc_DF04
0000EB96 4440                       		neg.w	d0
0000EB98 4469 0010                  		neg.w	$10(a1)
0000EB9C                            
0000EB9C                            loc_DF04:
0000EB9C D169 0008                  		add.w	d0,8(a1)
0000EBA0 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000EBA6 137C 0001 0028             		move.b	#1,$28(a1)
0000EBAC                            
0000EBAC                            locret_DF14:
0000EBAC 4E75                       		rts	
0000EBAE                            ; ===========================================================================
0000EBAE                            
0000EBAE                            Obj42_Delete:				; XREF: Obj42_Index
0000EBAE 6000 F72E                  		bra.w	DeleteObject
0000EBB2                            ; ===========================================================================
0000EBB2                            Ani_obj42:
0000EBB2                            	include "_anim\obj42.asm"
0000EBB2                            ; ---------------------------------------------------------------------------
0000EBB2                            ; Animation script - Newtron enemy
0000EBB2                            ; ---------------------------------------------------------------------------
0000EBB2 0000                       		dc.w byte_DF24-Ani_obj42
0000EBB4 0000                       		dc.w byte_DF28-Ani_obj42
0000EBB6 0000                       		dc.w byte_DF30-Ani_obj42
0000EBB8 0000                       		dc.w byte_DF34-Ani_obj42
0000EBBA 0000                       		dc.w byte_DF38-Ani_obj42
0000EBBC 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000EBC0 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000EBC8 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000EBCC 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000EBD0 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000EBDA                            		even
0000EBDA                            		even
0000EBDA                            
0000EBDA                            ; ---------------------------------------------------------------------------
0000EBDA                            ; Sprite mappings - Newtron enemy (GHZ)
0000EBDA                            ; ---------------------------------------------------------------------------
0000EBDA                            Map_obj42:
0000EBDA                            	include "_maps\obj42.asm"
0000EBDA                            ; ---------------------------------------------------------------------------
0000EBDA                            ; Sprite mappings - Newtron enemy (GHZ)
0000EBDA                            ; ---------------------------------------------------------------------------
0000EBDA 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000EBDE 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000EBE2 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000EBE6 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000EBEA 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000EBEE 0000                       		dc.w byte_DFF8-Map_obj42
0000EBF0 03                         byte_DF58:	dc.b 3
0000EBF1 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000EBF6 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000EBFB FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000EC00 03                         byte_DF68:	dc.b 3
0000EC01 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000EC06 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000EC0B FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000EC10 03                         byte_DF78:	dc.b 3
0000EC11 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000EC16 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000EC1B FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000EC20 04                         byte_DF88:	dc.b 4
0000EC21 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000EC26 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000EC2B FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000EC30 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000EC35 03                         byte_DF9D:	dc.b 3
0000EC36 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000EC3B FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000EC40 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000EC45 02                         byte_DFAD:	dc.b 2
0000EC46 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EC4B F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EC50 03                         byte_DFB8:	dc.b 3
0000EC51 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EC56 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EC5B FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000EC60 03                         byte_DFC8:	dc.b 3
0000EC61 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EC66 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EC6B FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000EC70 03                         byte_DFD8:	dc.b 3
0000EC71 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EC76 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EC7B FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000EC80 03                         byte_DFE8:	dc.b 3
0000EC81 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EC86 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EC8B FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000EC90 00                         byte_DFF8:	dc.b 0
0000EC92 00                         		even
0000EC92 00                         		even
0000EC92                            
0000EC92                            ; ===========================================================================
0000EC92                            ; ---------------------------------------------------------------------------
0000EC92                            ; Object 43 - Roller enemy (SYZ)
0000EC92                            ; ---------------------------------------------------------------------------
0000EC92                            
0000EC92                            Obj43:					; XREF: Obj_Index
0000EC92 7000                       		moveq	#0,d0
0000EC94 1028 0024                  		move.b	$24(a0),d0
0000EC98 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000EC9C 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000ECA0                            ; ===========================================================================
0000ECA0 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000ECA2 0000                       		dc.w Obj43_Action-Obj43_Index
0000ECA4                            ; ===========================================================================
0000ECA4                            
0000ECA4                            Obj43_Main:				; XREF: Obj43_Index
0000ECA4 117C 000E 0016             		move.b	#$E,$16(a0)
0000ECAA 117C 0008 0017             		move.b	#8,$17(a0)
0000ECB0 6100 F554                  		bsr.w	ObjectFall
0000ECB4 6100 0000                  		bsr.w	ObjHitFloor
0000ECB8 4A41                       		tst.w	d1
0000ECBA 6A00                       		bpl.s	locret_E052
0000ECBC D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000ECC0 317C 0000 0012             		move.w	#0,$12(a0)
0000ECC6 5428 0024                  		addq.b	#2,$24(a0)
0000ECCA 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000ECD2 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000ECD8 117C 0004 0001             		move.b	#4,1(a0)
0000ECDE 117C 0004 0018             		move.b	#4,$18(a0)
0000ECE4 117C 0010 0019             		move.b	#$10,$19(a0)
0000ECEA                            
0000ECEA                            locret_E052:
0000ECEA 4E75                       		rts	
0000ECEC                            ; ===========================================================================
0000ECEC                            
0000ECEC                            Obj43_Action:				; XREF: Obj43_Index
0000ECEC 7000                       		moveq	#0,d0
0000ECEE 1028 0025                  		move.b	$25(a0),d0
0000ECF2 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000ECF6 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000ECFA 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000ED00 6100 C5F8                  		bsr.w	AnimateSprite
0000ED04 3028 0008                  		move.w	8(a0),d0
0000ED08 0240 FF80                  		andi.w	#$FF80,d0
0000ED0C 3238 F700                  		move.w	($FFFFF700).w,d1
0000ED10 0441 0080                  		subi.w	#$80,d1
0000ED14 0241 FF80                  		andi.w	#$FF80,d1
0000ED18 9041                       		sub.w	d1,d0
0000ED1A 0C40 0280                  		cmpi.w	#$280,d0
0000ED1E 6E00 0000                  		bgt.w	Obj43_ChkGone
0000ED22 6000 F57E                  		bra.w	DisplaySprite
0000ED26                            ; ===========================================================================
0000ED26                            
0000ED26                            Obj43_ChkGone:				; XREF: Obj43_Action
0000ED26 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000ED2A 7000                       		moveq	#0,d0
0000ED2C 1028 0023                  		move.b	$23(a0),d0
0000ED30 6700                       		beq.s	Obj43_Delete
0000ED32 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000ED38                            
0000ED38                            Obj43_Delete:
0000ED38 6000 F5A4                  		bra.w	DeleteObject
0000ED3C                            ; ===========================================================================
0000ED3C 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000ED3E 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000ED40 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000ED42 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000ED44                            ; ===========================================================================
0000ED44                            
0000ED44                            Obj43_RollChk:				; XREF: Obj43_Index2
0000ED44 3038 D008                  		move.w	($FFFFD008).w,d0
0000ED48 0440 0100                  		subi.w	#$100,d0
0000ED4C 6500                       		bcs.s	loc_E0D2
0000ED4E 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000ED52 6500                       		bcs.s	loc_E0D2
0000ED54 5828 0025                  		addq.b	#4,$25(a0)
0000ED58 117C 0002 001C             		move.b	#2,$1C(a0)
0000ED5E 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000ED64 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000ED6A                            
0000ED6A                            loc_E0D2:
0000ED6A 588F                       		addq.l	#4,sp
0000ED6C 4E75                       		rts	
0000ED6E                            ; ===========================================================================
0000ED6E                            
0000ED6E                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000ED6E 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000ED74 6700                       		beq.s	loc_E0F8
0000ED76 5368 0030                  		subq.w	#1,$30(a0)
0000ED7A 6A00                       		bpl.s	locret_E0F6
0000ED7C 117C 0001 001C             		move.b	#1,$1C(a0)
0000ED82 317C 0700 0010             		move.w	#$700,$10(a0)
0000ED88 117C 008E 0020             		move.b	#$8E,$20(a0)
0000ED8E                            
0000ED8E                            locret_E0F6:
0000ED8E 4E75                       		rts	
0000ED90                            ; ===========================================================================
0000ED90                            
0000ED90                            loc_E0F8:
0000ED90 5428 0025                  		addq.b	#2,$25(a0)
0000ED94 4E75                       		rts	
0000ED96                            ; ===========================================================================
0000ED96                            
0000ED96                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000ED96 6100 0000                  		bsr.w	Obj43_Stop
0000ED9A 6100 F4CC                  		bsr.w	SpeedToPos
0000ED9E 6100 0000                  		bsr.w	ObjHitFloor
0000EDA2 0C41 FFF8                  		cmpi.w	#-8,d1
0000EDA6 6D00                       		blt.s	Obj43_Jump
0000EDA8 0C41 000C                  		cmpi.w	#$C,d1
0000EDAC 6C00                       		bge.s	Obj43_Jump
0000EDAE D368 000C                  		add.w	d1,$C(a0)
0000EDB2 4E75                       		rts	
0000EDB4                            ; ===========================================================================
0000EDB4                            
0000EDB4                            Obj43_Jump:
0000EDB4 5428 0025                  		addq.b	#2,$25(a0)
0000EDB8 08E8 0000 0032             		bset	#0,$32(a0)
0000EDBE 6700                       		beq.s	locret_E12E
0000EDC0 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000EDC6                            
0000EDC6                            locret_E12E:
0000EDC6 4E75                       		rts	
0000EDC8                            ; ===========================================================================
0000EDC8                            
0000EDC8                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000EDC8 6100 F43C                  		bsr.w	ObjectFall
0000EDCC 4A68 0012                  		tst.w	$12(a0)
0000EDD0 6B00                       		bmi.s	locret_E150
0000EDD2 6100 0000                  		bsr.w	ObjHitFloor
0000EDD6 4A41                       		tst.w	d1
0000EDD8 6A00                       		bpl.s	locret_E150
0000EDDA D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000EDDE 5528 0025                  		subq.b	#2,$25(a0)
0000EDE2 317C 0000 0012             		move.w	#0,$12(a0)
0000EDE8                            
0000EDE8                            locret_E150:
0000EDE8 4E75                       		rts	
0000EDEA                            
0000EDEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EDEA                            
0000EDEA                            
0000EDEA                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000EDEA 4A28 0032                  		tst.b	$32(a0)
0000EDEE 6B00                       		bmi.s	locret_E188
0000EDF0 3038 D008                  		move.w	($FFFFD008).w,d0
0000EDF4 0440 0030                  		subi.w	#$30,d0
0000EDF8 9068 0008                  		sub.w	8(a0),d0
0000EDFC 6400                       		bcc.s	locret_E188
0000EDFE 117C 0000 001C             		move.b	#0,$1C(a0)
0000EE04 117C 000E 0020             		move.b	#$E,$20(a0)
0000EE0A 4268 0010                  		clr.w	$10(a0)
0000EE0E 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000EE14 117C 0002 0025             		move.b	#2,$25(a0)
0000EE1A 08E8 0007 0032             		bset	#7,$32(a0)
0000EE20                            
0000EE20                            locret_E188:
0000EE20 4E75                       		rts	
0000EE22                            ; End of function Obj43_Stop
0000EE22                            
0000EE22                            ; ===========================================================================
0000EE22                            Ani_obj43:
0000EE22                            	include "_anim\obj43.asm"
0000EE22                            ; ---------------------------------------------------------------------------
0000EE22                            ; Animation script - Roller enemy
0000EE22                            ; ---------------------------------------------------------------------------
0000EE22 0000                       		dc.w byte_E190-Ani_obj43
0000EE24 0000                       		dc.w byte_E196-Ani_obj43
0000EE26 0000                       		dc.w byte_E19C-Ani_obj43
0000EE28 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000EE2E 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000EE34 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000EE3A 00                         		even
0000EE3A 00                         		even
0000EE3A                            
0000EE3A                            ; ---------------------------------------------------------------------------
0000EE3A                            ; Sprite mappings - Roller enemy (SYZ)
0000EE3A                            ; ---------------------------------------------------------------------------
0000EE3A                            Map_obj43:
0000EE3A                            	include "_maps\obj43.asm"
0000EE3A                            Map_61da:
0000EE3A 0000                       Map_61da_0: 	dc.w Map_61da_A-Map_61da
0000EE3C 0000                       Map_61da_2: 	dc.w Map_61da_15-Map_61da
0000EE3E 0000                       Map_61da_4: 	dc.w Map_61da_20-Map_61da
0000EE40 0000                       Map_61da_6: 	dc.w Map_61da_26-Map_61da
0000EE42 0000                       Map_61da_8: 	dc.w Map_61da_2C-Map_61da
0000EE44 02                         Map_61da_A: 	dc.b $2
0000EE45 DE0E 0000 F0               	dc.b $DE, $E, $0, $0, $F0
0000EE4A F60E 000C F0               	dc.b $F6, $E, $0, $C, $F0
0000EE4F 02                         Map_61da_15: 	dc.b $2
0000EE50 E60E 0000 F0               	dc.b $E6, $E, $0, $0, $F0
0000EE55 FE0D 0018 F0               	dc.b $FE, $D, $0, $18, $F0
0000EE5A 01                         Map_61da_20: 	dc.b $1
0000EE5B F00F 0020 F0               	dc.b $F0, $F, $0, $20, $F0
0000EE60 01                         Map_61da_26: 	dc.b $1
0000EE61 F00F 0030 F0               	dc.b $F0, $F, $0, $30, $F0
0000EE66 01                         Map_61da_2C: 	dc.b $1
0000EE67 F00F 0040 F0               	dc.b $F0, $F, $0, $40, $F0
0000EE6C                            	even
0000EE6C                            	even
0000EE6C                            
0000EE6C                            ; ===========================================================================
0000EE6C                            ; ---------------------------------------------------------------------------
0000EE6C                            ; Object 44 - walls (GHZ)
0000EE6C                            ; ---------------------------------------------------------------------------
0000EE6C                            
0000EE6C                            Obj44:					; XREF: Obj_Index
0000EE6C 7000                       		moveq	#0,d0
0000EE6E 1028 0024                  		move.b	$24(a0),d0
0000EE72 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000EE76 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000EE7A                            ; ===========================================================================
0000EE7A 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000EE7C 0000                       		dc.w Obj44_Solid-Obj44_Index
0000EE7E 0000                       		dc.w Obj44_Display-Obj44_Index
0000EE80                            ; ===========================================================================
0000EE80                            
0000EE80                            Obj44_Main:				; XREF: Obj44_Index
0000EE80 5428 0024                  		addq.b	#2,$24(a0)
0000EE84 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000EE8C 317C 434C 0002             		move.w	#$434C,2(a0)
0000EE92 0028 0004 0001             		ori.b	#4,1(a0)
0000EE98 117C 0008 0019             		move.b	#8,$19(a0)
0000EE9E 117C 0006 0018             		move.b	#6,$18(a0)
0000EEA4 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000EEAA 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000EEB0 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000EEB2 5428 0024                  		addq.b	#2,$24(a0)
0000EEB6 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000EEB8                            ; ===========================================================================
0000EEB8                            
0000EEB8                            Obj44_Solid:				; XREF: Obj44_Index
0000EEB8 323C 0013                  		move.w	#$13,d1
0000EEBC 343C 0028                  		move.w	#$28,d2
0000EEC0 6100 A6A2                  		bsr.w	Obj44_SolidWall
0000EEC4                            
0000EEC4                            Obj44_Display:				; XREF: Obj44_Index
0000EEC4 6100 F3DC                  		bsr.w	DisplaySprite
0000EEC8 3028 0008                  		move.w	8(a0),d0
0000EECC 0240 FF80                  		andi.w	#$FF80,d0
0000EED0 3238 F700                  		move.w	($FFFFF700).w,d1
0000EED4 0441 0080                  		subi.w	#$80,d1
0000EED8 0241 FF80                  		andi.w	#$FF80,d1
0000EEDC 9041                       		sub.w	d1,d0
0000EEDE 0C40 0280                  		cmpi.w	#$280,d0
0000EEE2 6200 F3FA                  		bhi.w	DeleteObject
0000EEE6 4E75                       		rts	
0000EEE8                            ; ===========================================================================
0000EEE8                            ; ---------------------------------------------------------------------------
0000EEE8                            ; Sprite mappings - walls (GHZ)
0000EEE8                            ; ---------------------------------------------------------------------------
0000EEE8                            Map_obj44:
0000EEE8                            	include "_maps\obj44.asm"
0000EEE8                            ; ---------------------------------------------------------------------------
0000EEE8                            ; Sprite mappings - walls (GHZ)
0000EEE8                            ; ---------------------------------------------------------------------------
0000EEE8 0000                       		dc.w byte_E256-Map_obj44
0000EEEA 0000                       		dc.w byte_E26B-Map_obj44
0000EEEC 0000                       		dc.w byte_E280-Map_obj44
0000EEEE 04                         byte_E256:	dc.b 4
0000EEEF E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000EEF4 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EEF9 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000EEFE 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000EF03 04                         byte_E26B:	dc.b 4
0000EF04 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000EF09 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EF0E 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000EF13 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000EF18 04                         byte_E280:	dc.b 4
0000EF19 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000EF1E F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000EF23 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000EF28 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000EF2E 00                         		even
0000EF2E 00                         		even
0000EF2E                            
0000EF2E                            ; ===========================================================================
0000EF2E                            ; ---------------------------------------------------------------------------
0000EF2E                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000EF2E                            ; ---------------------------------------------------------------------------
0000EF2E                            
0000EF2E                            Obj13:					; XREF: Obj_Index
0000EF2E 7000                       		moveq	#0,d0
0000EF30 1028 0024                  		move.b	$24(a0),d0
0000EF34 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000EF38 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000EF3C 6000 0000                  		bra.w	Obj14_ChkDel
0000EF40                            ; ===========================================================================
0000EF40 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000EF42 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000EF44                            ; ---------------------------------------------------------------------------
0000EF44                            ;
0000EF44                            ; Lava ball production rates
0000EF44                            ;
0000EF44 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000EF4A                            ; ===========================================================================
0000EF4A                            
0000EF4A                            Obj13_Main:				; XREF: Obj13_Index
0000EF4A 5428 0024                  		addq.b	#2,$24(a0)
0000EF4E 1028 0028                  		move.b	$28(a0),d0
0000EF52 E848                       		lsr.w	#4,d0
0000EF54 0240 000F                  		andi.w	#$F,d0
0000EF58 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000EF5E 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000EF64 0228 000F 0028             		andi.b	#$F,$28(a0)
0000EF6A                            
0000EF6A                            Obj13_MakeLava:				; XREF: Obj13_Index
0000EF6A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000EF6E 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000EF70 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000EF76 6100 F5A4                  		bsr.w	ChkObjOnScreen
0000EF7A 6600                       		bne.s	locret_E302
0000EF7C 6100 F7AA                  		bsr.w	SingleObjLoad
0000EF80 6600                       		bne.s	locret_E302
0000EF82 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000EF86 3368 0008 0008             		move.w	8(a0),8(a1)
0000EF8C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EF92 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000EF98                            
0000EF98                            locret_E302:
0000EF98 4E75                       		rts	
0000EF9A                            ; ===========================================================================
0000EF9A                            ; ---------------------------------------------------------------------------
0000EF9A                            ; Object 14 - lava balls (MZ, SLZ)
0000EF9A                            ; ---------------------------------------------------------------------------
0000EF9A                            
0000EF9A                            Obj14:					; XREF: Obj_Index
0000EF9A 7000                       		moveq	#0,d0
0000EF9C 1028 0024                  		move.b	$24(a0),d0
0000EFA0 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000EFA4 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000EFA8 6000 F2F8                  		bra.w	DisplaySprite
0000EFAC                            ; ===========================================================================
0000EFAC 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000EFAE 0000                       		dc.w Obj14_Action-Obj14_Index
0000EFB0 0000                       		dc.w Obj14_Delete-Obj14_Index
0000EFB2                            
0000EFB2 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000EFBC 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000EFC4                            ; ===========================================================================
0000EFC4                            
0000EFC4                            Obj14_Main:				; XREF: Obj14_Index
0000EFC4 5428 0024                  		addq.b	#2,$24(a0)
0000EFC8 117C 0008 0016             		move.b	#8,$16(a0)
0000EFCE 117C 0008 0017             		move.b	#8,$17(a0)
0000EFD4 217C 0000 BEF8 0004        		move.l	#Map_obj14,4(a0)
0000EFDC 317C 0345 0002             		move.w	#$345,2(a0)
0000EFE2 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000EFE8 6600                       		bne.s	loc_E35A
0000EFEA 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000EFF0                            
0000EFF0                            loc_E35A:
0000EFF0 117C 0004 0001             		move.b	#4,1(a0)
0000EFF6 117C 0003 0018             		move.b	#3,$18(a0)
0000EFFC 117C 008B 0020             		move.b	#$8B,$20(a0)
0000F002 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F008 4A28 0029                  		tst.b	$29(a0)
0000F00C 6700                       		beq.s	Obj14_SetSpeed
0000F00E 5428 0018                  		addq.b	#2,$18(a0)
0000F012                            
0000F012                            Obj14_SetSpeed:
0000F012 7000                       		moveq	#0,d0
0000F014 1028 0028                  		move.b	$28(a0),d0
0000F018 D040                       		add.w	d0,d0
0000F01A 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000F020 117C 0008 0019             		move.b	#8,$19(a0)
0000F026 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000F02C 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000F02E 117C 0010 0019             		move.b	#$10,$19(a0)
0000F034 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000F03A 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000F040 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000F046                            
0000F046                            Obj14_PlaySnd:
0000F046 303C 00AE                  		move.w	#$AE,d0
0000F04A 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000F050                            
0000F050                            Obj14_Action:				; XREF: Obj14_Index
0000F050 7000                       		moveq	#0,d0
0000F052 1028 0028                  		move.b	$28(a0),d0
0000F056 D040                       		add.w	d0,d0
0000F058 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000F05C 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000F060 6100 F206                  		bsr.w	SpeedToPos
0000F064 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000F06A 6100 C28E                  		bsr.w	AnimateSprite
0000F06E                            
0000F06E                            Obj14_ChkDel:				; XREF: Obj13
0000F06E 3028 0008                  		move.w	8(a0),d0
0000F072 0240 FF80                  		andi.w	#$FF80,d0
0000F076 3238 F700                  		move.w	($FFFFF700).w,d1
0000F07A 0441 0080                  		subi.w	#$80,d1
0000F07E 0241 FF80                  		andi.w	#$FF80,d1
0000F082 9041                       		sub.w	d1,d0
0000F084 0C40 0280                  		cmpi.w	#$280,d0
0000F088 6200 F254                  		bhi.w	DeleteObject
0000F08C 4E75                       		rts	
0000F08E                            ; ===========================================================================
0000F08E 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000F092 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000F096 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000F09A 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000F09E 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000F0A0                            ; ===========================================================================
0000F0A0                            ; lavaball types 00-03 fly up and fall back down
0000F0A0                            
0000F0A0                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000F0A0 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000F0A6 3028 0030                  		move.w	$30(a0),d0
0000F0AA B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000F0AE 6400                       		bcc.s	loc_E41E	; if not, branch
0000F0B0 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000F0B4                            
0000F0B4                            loc_E41E:
0000F0B4 08A8 0001 0022             		bclr	#1,$22(a0)
0000F0BA 4A68 0012                  		tst.w	$12(a0)
0000F0BE 6A00                       		bpl.s	locret_E430
0000F0C0 08E8 0001 0022             		bset	#1,$22(a0)
0000F0C6                            
0000F0C6                            locret_E430:
0000F0C6 4E75                       		rts	
0000F0C8                            ; ===========================================================================
0000F0C8                            ; lavaball type	04 flies up until it hits the ceiling
0000F0C8                            
0000F0C8                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000F0C8 08E8 0001 0022             		bset	#1,$22(a0)
0000F0CE 6100 0000                  		bsr.w	ObjHitCeiling
0000F0D2 4A41                       		tst.w	d1
0000F0D4 6A00                       		bpl.s	locret_E452
0000F0D6 117C 0008 0028             		move.b	#8,$28(a0)
0000F0DC 117C 0001 001C             		move.b	#1,$1C(a0)
0000F0E2 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000F0E8                            
0000F0E8                            locret_E452:
0000F0E8 4E75                       		rts	
0000F0EA                            ; ===========================================================================
0000F0EA                            ; lavaball type	05 falls down until it hits the	floor
0000F0EA                            
0000F0EA                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000F0EA 08A8 0001 0022             		bclr	#1,$22(a0)
0000F0F0 6100 0000                  		bsr.w	ObjHitFloor
0000F0F4 4A41                       		tst.w	d1
0000F0F6 6A00                       		bpl.s	locret_E474
0000F0F8 117C 0008 0028             		move.b	#8,$28(a0)
0000F0FE 117C 0001 001C             		move.b	#1,$1C(a0)
0000F104 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000F10A                            
0000F10A                            locret_E474:
0000F10A 4E75                       		rts	
0000F10C                            ; ===========================================================================
0000F10C                            ; lavaball types 06-07 move sideways
0000F10C                            
0000F10C                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000F10C 08E8 0000 0022             		bset	#0,$22(a0)
0000F112 76F8                       		moveq	#-8,d3
0000F114 6100 0000                  		bsr.w	ObjHitWallLeft
0000F118 4A41                       		tst.w	d1
0000F11A 6A00                       		bpl.s	locret_E498
0000F11C 117C 0008 0028             		move.b	#8,$28(a0)
0000F122 117C 0003 001C             		move.b	#3,$1C(a0)
0000F128 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000F12E                            
0000F12E                            locret_E498:
0000F12E 4E75                       		rts	
0000F130                            ; ===========================================================================
0000F130                            
0000F130                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000F130 08A8 0000 0022             		bclr	#0,$22(a0)
0000F136 7608                       		moveq	#8,d3
0000F138 6100 0000                  		bsr.w	ObjHitWallRight
0000F13C 4A41                       		tst.w	d1
0000F13E 6A00                       		bpl.s	locret_E4BC
0000F140 117C 0008 0028             		move.b	#8,$28(a0)
0000F146 117C 0003 001C             		move.b	#3,$1C(a0)
0000F14C 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000F152                            
0000F152                            locret_E4BC:
0000F152 4E75                       		rts	
0000F154                            ; ===========================================================================
0000F154                            
0000F154                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000F154 4E75                       		rts	
0000F156                            ; ===========================================================================
0000F156                            
0000F156                            Obj14_Delete:				; XREF: Obj14_Index
0000F156 6000 F186                  		bra.w	DeleteObject
0000F15A                            ; ===========================================================================
0000F15A                            Ani_obj14:
0000F15A                            	include "_anim\obj14.asm"
0000F15A                            ; ---------------------------------------------------------------------------
0000F15A                            ; Animation script - lava balls
0000F15A                            ; ---------------------------------------------------------------------------
0000F15A 0000                       		dc.w byte_E4CC-Ani_obj14
0000F15C 0000                       		dc.w byte_E4D2-Ani_obj14
0000F15E 0000                       		dc.w byte_E4D6-Ani_obj14
0000F160 0000                       		dc.w byte_E4DC-Ani_obj14
0000F162 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000F168 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000F16C 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000F172 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000F176                            		even
0000F176                            		even
0000F176                            
0000F176                            ; ===========================================================================
0000F176                            ; ---------------------------------------------------------------------------
0000F176                            ; Object 6D - flame thrower (SBZ)
0000F176                            ; ---------------------------------------------------------------------------
0000F176                            
0000F176                            Obj6D:					; XREF: Obj_Index
0000F176 7000                       		moveq	#0,d0
0000F178 1028 0024                  		move.b	$24(a0),d0
0000F17C 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000F180 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000F184                            ; ===========================================================================
0000F184 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000F186 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000F188                            ; ===========================================================================
0000F188                            
0000F188                            Obj6D_Main:				; XREF: Obj6D_Index
0000F188 5428 0024                  		addq.b	#2,$24(a0)
0000F18C 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000F194 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000F19A 0028 0004 0001             		ori.b	#4,1(a0)
0000F1A0 117C 0001 0018             		move.b	#1,$18(a0)
0000F1A6 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F1AC 117C 000C 0019             		move.b	#$C,$19(a0)
0000F1B2 1028 0028                  		move.b	$28(a0),d0
0000F1B6 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000F1BA D040                       		add.w	d0,d0		; multiply by 2
0000F1BC 3140 0030                  		move.w	d0,$30(a0)
0000F1C0 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000F1C4 1028 0028                  		move.b	$28(a0),d0
0000F1C8 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000F1CC EB48                       		lsl.w	#5,d0		; multiply by $20
0000F1CE 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000F1D2 117C 000A 0036             		move.b	#$A,$36(a0)
0000F1D8 0828 0001 0022             		btst	#1,$22(a0)
0000F1DE 6700                       		beq.s	Obj6D_Action
0000F1E0 117C 0002 001C             		move.b	#2,$1C(a0)
0000F1E6 117C 0015 0036             		move.b	#$15,$36(a0)
0000F1EC                            
0000F1EC                            Obj6D_Action:				; XREF: Obj6D_Index
0000F1EC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000F1F0 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000F1F2 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000F1F8 0868 0000 001C             		bchg	#0,$1C(a0)
0000F1FE 6700                       		beq.s	loc_E57A
0000F200 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000F206 303C 00B3                  		move.w	#$B3,d0
0000F20A 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play flame sound
0000F210                            
0000F210                            loc_E57A:
0000F210 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000F216 6100 C0E2                  		bsr.w	AnimateSprite
0000F21A 117C 0000 0020             		move.b	#0,$20(a0)
0000F220 1028 0036                  		move.b	$36(a0),d0
0000F224 B028 001A                  		cmp.b	$1A(a0),d0
0000F228 6600                       		bne.s	Obj6D_ChkDel
0000F22A 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000F230                            
0000F230                            Obj6D_ChkDel:
0000F230 3028 0008                  		move.w	8(a0),d0
0000F234 0240 FF80                  		andi.w	#$FF80,d0
0000F238 3238 F700                  		move.w	($FFFFF700).w,d1
0000F23C 0441 0080                  		subi.w	#$80,d1
0000F240 0241 FF80                  		andi.w	#$FF80,d1
0000F244 9041                       		sub.w	d1,d0
0000F246 0C40 0280                  		cmpi.w	#$280,d0
0000F24A 6200 F092                  		bhi.w	DeleteObject
0000F24E 6000 F052                  		bra.w	DisplaySprite
0000F252                            ; ===========================================================================
0000F252                            Ani_obj6D:
0000F252                            	include "_anim\obj6D.asm"
0000F252                            ; ---------------------------------------------------------------------------
0000F252                            ; Animation script - flamethrower (SBZ)
0000F252                            ; ---------------------------------------------------------------------------
0000F252 0000                       		dc.w byte_E5C4-Ani_obj6D
0000F254 0000                       		dc.w byte_E5D2-Ani_obj6D
0000F256 0000                       		dc.w byte_E5DC-Ani_obj6D
0000F258 0000                       		dc.w byte_E5EA-Ani_obj6D
0000F25A 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000F268 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000F272 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000F280 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000F28A                            		even
0000F28A                            		even
0000F28A                            
0000F28A                            ; ---------------------------------------------------------------------------
0000F28A                            ; Sprite mappings - flame thrower (SBZ)
0000F28A                            ; ---------------------------------------------------------------------------
0000F28A                            Map_obj6D:
0000F28A                            	include "_maps\obj6D.asm"
0000F28A                            ; ---------------------------------------------------------------------------
0000F28A                            ; Sprite mappings - flame thrower (SBZ)
0000F28A                            ; ---------------------------------------------------------------------------
0000F28A 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000F28E 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000F292 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000F296 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000F29A 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000F29E 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000F2A2 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000F2A6 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000F2AA 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000F2AE 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000F2B2 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000F2B6 01                         byte_E620:	dc.b 1
0000F2B7 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F2BC 02                         byte_E626:	dc.b 2
0000F2BD 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F2C2 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F2C7 02                         byte_E631:	dc.b 2
0000F2C8 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F2CD 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F2D2 03                         byte_E63C:	dc.b 3
0000F2D3 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F2D8 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F2DD 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F2E2 03                         byte_E64C:	dc.b 3
0000F2E3 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F2E8 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F2ED 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F2F2 04                         byte_E65C:	dc.b 4
0000F2F3 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F2F8 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F2FD 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F302 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F307 04                         byte_E671:	dc.b 4
0000F308 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F30D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F312 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F317 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F31C 05                         byte_E686:	dc.b 5
0000F31D F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F322 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F327 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F32C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F331 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F336 05                         byte_E6A0:	dc.b 5
0000F337 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F33C 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F341 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F346 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F34B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F350 06                         byte_E6BA:	dc.b 6
0000F351 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F356 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F35B 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F360 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F365 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F36A 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F36F 06                         byte_E6D9:	dc.b 6
0000F370 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F375 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F37A 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F37F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F384 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F389 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F38E 01                         byte_E6F8:	dc.b 1
0000F38F 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F394 02                         byte_E6FE:	dc.b 2
0000F395 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F39A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F39F 02                         byte_E709:	dc.b 2
0000F3A0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F3A5 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F3AA 03                         byte_E714:	dc.b 3
0000F3AB 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F3B0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F3B5 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F3BA 03                         byte_E724:	dc.b 3
0000F3BB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F3C0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F3C5 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F3CA 04                         byte_E734:	dc.b 4
0000F3CB 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F3D0 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F3D5 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F3DA 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F3DF 04                         byte_E749:	dc.b 4
0000F3E0 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F3E5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F3EA 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F3EF 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F3F4 05                         byte_E75E:	dc.b 5
0000F3F5 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F3FA 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F3FF 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F404 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F409 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F40E 05                         byte_E778:	dc.b 5
0000F40F F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F414 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F419 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F41E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F423 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F428 06                         byte_E792:	dc.b 6
0000F429 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F42E F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F433 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F438 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F43D 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F442 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F447 06                         byte_E7B1:	dc.b 6
0000F448 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F44D F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F452 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F457 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F45C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F461 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F466                            		even
0000F466                            		even
0000F466                            
0000F466                            ; ===========================================================================
0000F466                            ; ---------------------------------------------------------------------------
0000F466                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000F466                            ; ---------------------------------------------------------------------------
0000F466                            
0000F466                            Obj46:					; XREF: Obj_Index
0000F466 7000                       		moveq	#0,d0
0000F468 1028 0024                  		move.b	$24(a0),d0
0000F46C 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000F470 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000F474                            ; ===========================================================================
0000F474 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000F476 0000                       		dc.w Obj46_Action-Obj46_Index
0000F478                            ; ===========================================================================
0000F478                            
0000F478                            Obj46_Main:				; XREF: Obj46_Index
0000F478 5428 0024                  		addq.b	#2,$24(a0)
0000F47C 117C 000F 0016             		move.b	#$F,$16(a0)
0000F482 117C 000F 0017             		move.b	#$F,$17(a0)
0000F488 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000F490 317C 4000 0002             		move.w	#$4000,2(a0)
0000F496 117C 0004 0001             		move.b	#4,1(a0)
0000F49C 117C 0003 0018             		move.b	#3,$18(a0)
0000F4A2 117C 0010 0019             		move.b	#$10,$19(a0)
0000F4A8 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F4AE 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000F4B4                            
0000F4B4                            Obj46_Action:				; XREF: Obj46_Index
0000F4B4 4A28 0001                  		tst.b	1(a0)
0000F4B8 6A00                       		bpl.s	Obj46_ChkDel
0000F4BA 7000                       		moveq	#0,d0
0000F4BC 1028 0028                  		move.b	$28(a0),d0	; get object type
0000F4C0 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000F4C4 D040                       		add.w	d0,d0
0000F4C6 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000F4CA 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000F4CE 323C 001B                  		move.w	#$1B,d1
0000F4D2 343C 0010                  		move.w	#$10,d2
0000F4D6 363C 0011                  		move.w	#$11,d3
0000F4DA 3828 0008                  		move.w	8(a0),d4
0000F4DE 6100 0000                  		bsr.w	SolidObject
0000F4E2                            
0000F4E2                            Obj46_ChkDel:
0000F4E2 6100 EDBE                  		bsr.w	DisplaySprite
0000F4E6 3028 0008                  		move.w	8(a0),d0
0000F4EA 0240 FF80                  		andi.w	#$FF80,d0
0000F4EE 3238 F700                  		move.w	($FFFFF700).w,d1
0000F4F2 0441 0080                  		subi.w	#$80,d1
0000F4F6 0241 FF80                  		andi.w	#$FF80,d1
0000F4FA 9041                       		sub.w	d1,d0
0000F4FC 0C40 0280                  		cmpi.w	#$280,d0
0000F500 6200 EDDC                  		bhi.w	DeleteObject
0000F504 4E75                       		rts	
0000F506                            ; ===========================================================================
0000F506 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000F508 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000F50A 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000F50C 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000F50E 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000F510                            ; ===========================================================================
0000F510                            
0000F510                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000F510 4E75                       		rts	
0000F512                            ; ===========================================================================
0000F512                            
0000F512                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000F512 3038 D008                  		move.w	($FFFFD008).w,d0
0000F516 9068 0008                  		sub.w	8(a0),d0
0000F51A 6400                       		bcc.s	loc_E888
0000F51C 4440                       		neg.w	d0
0000F51E                            
0000F51E                            loc_E888:
0000F51E 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000F522 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000F524 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000F52A                            
0000F52A                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000F52A 7000                       		moveq	#0,d0
0000F52C 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000F530 0828 0003 0028             		btst	#3,$28(a0)
0000F536 6700                       		beq.s	loc_E8A8
0000F538 4440                       		neg.w	d0
0000F53A 0640 0010                  		addi.w	#$10,d0
0000F53E                            
0000F53E                            loc_E8A8:
0000F53E 3228 0030                  		move.w	$30(a0),d1
0000F542 9240                       		sub.w	d0,d1
0000F544 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000F548 4E75                       		rts	
0000F54A                            ; ===========================================================================
0000F54A                            
0000F54A                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000F54A 7218                       		moveq	#$18,d1
0000F54C 6100 ECBA                  		bsr.w	ObjectFallCustom
0000F550 6100 0000                  		bsr.w	ObjHitFloor
0000F554 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000F556 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000F55A D368 000C                  		add.w	d1,$C(a0)
0000F55E 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000F562 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F568 117C 0004 0028             		move.b	#4,$28(a0)
0000F56E 3011                       		move.w	(a1),d0
0000F570 0240 03FF                  		andi.w	#$3FF,d0
0000F574 0C40 02E8                  		cmpi.w	#$2E8,d0
0000F578 6400                       		bcc.s	locret_E8EE
0000F57A 117C 0000 0028             		move.b	#0,$28(a0)
0000F580                            
0000F580                            locret_E8EE:
0000F580 4E75                       		rts	
0000F582                            ; ===========================================================================
0000F582                            
0000F582                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000F582 7000                       		moveq	#0,d0
0000F584 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000F588 E648                       		lsr.w	#3,d0
0000F58A 3228 0030                  		move.w	$30(a0),d1
0000F58E 9240                       		sub.w	d0,d1
0000F590 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000F594 4E75                       		rts	
0000F596                            ; ===========================================================================
0000F596                            ; ---------------------------------------------------------------------------
0000F596                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F596                            ; ---------------------------------------------------------------------------
0000F596                            Map_obj46:
0000F596                            	include "_maps\obj46.asm"
0000F596                            ; ---------------------------------------------------------------------------
0000F596                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F596                            ; ---------------------------------------------------------------------------
0000F596 0000                       		dc.w byte_E906-Map_obj46
0000F598 01                         byte_E906:	dc.b 1
0000F599 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000F59E                            		even
0000F59E                            		even
0000F59E                            
0000F59E                            ; ===========================================================================
0000F59E                            ; ---------------------------------------------------------------------------
0000F59E                            ; Object 12 - lamp (SYZ)
0000F59E                            ; ---------------------------------------------------------------------------
0000F59E                            
0000F59E                            Obj12:					; XREF: Obj_Index
0000F59E 7000                       		moveq	#0,d0
0000F5A0 1028 0024                  		move.b	$24(a0),d0
0000F5A4 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000F5A8 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000F5AC                            ; ===========================================================================
0000F5AC 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000F5AE 0000                       		dc.w Obj12_Animate-Obj12_Index
0000F5B0                            ; ===========================================================================
0000F5B0                            
0000F5B0                            Obj12_Main:				; XREF: Obj12_Index
0000F5B0 5428 0024                  		addq.b	#2,$24(a0)
0000F5B4 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000F5BC 317C 0000 0002             		move.w	#0,2(a0)
0000F5C2 117C 0004 0001             		move.b	#4,1(a0)
0000F5C8 117C 0010 0019             		move.b	#$10,$19(a0)
0000F5CE 117C 0006 0018             		move.b	#6,$18(a0)
0000F5D4                            
0000F5D4                            Obj12_Animate:				; XREF: Obj12_Index
0000F5D4 5328 001E                  		subq.b	#1,$1E(a0)
0000F5D8 6A00                       		bpl.s	Obj12_ChkDel
0000F5DA 117C 0007 001E             		move.b	#7,$1E(a0)
0000F5E0 5228 001A                  		addq.b	#1,$1A(a0)
0000F5E4 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000F5EA 6500                       		bcs.s	Obj12_ChkDel
0000F5EC 117C 0000 001A             		move.b	#0,$1A(a0)
0000F5F2                            
0000F5F2                            Obj12_ChkDel:
0000F5F2 3028 0008                  		move.w	8(a0),d0
0000F5F6 0240 FF80                  		andi.w	#$FF80,d0
0000F5FA 3238 F700                  		move.w	($FFFFF700).w,d1
0000F5FE 0441 0080                  		subi.w	#$80,d1
0000F602 0241 FF80                  		andi.w	#$FF80,d1
0000F606 9041                       		sub.w	d1,d0
0000F608 0C40 0280                  		cmpi.w	#$280,d0
0000F60C 6200 ECD0                  		bhi.w	DeleteObject
0000F610 6000 EC90                  		bra.w	DisplaySprite
0000F614                            ; ===========================================================================
0000F614                            ; ---------------------------------------------------------------------------
0000F614                            ; Sprite mappings - lamp (SYZ)
0000F614                            ; ---------------------------------------------------------------------------
0000F614                            Map_obj12:
0000F614                            	include "_maps\obj12.asm"
0000F614                            ; ---------------------------------------------------------------------------
0000F614                            ; Sprite mappings - lamp (SYZ)
0000F614                            ; ---------------------------------------------------------------------------
0000F614 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000F618 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000F61C 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000F620 02                         byte_E98E:	dc.b 2
0000F621 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000F626 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000F62B 02                         byte_E999:	dc.b 2
0000F62C F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000F631 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000F636 02                         byte_E9A4:	dc.b 2
0000F637 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000F63C 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000F641 02                         byte_E9AF:	dc.b 2
0000F642 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000F647 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000F64C 02                         byte_E9BA:	dc.b 2
0000F64D F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000F652 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000F657 02                         byte_E9C5:	dc.b 2
0000F658 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000F65D 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000F662                            		even
0000F662                            		even
0000F662                            
0000F662                            ; ===========================================================================
0000F662                            ; ---------------------------------------------------------------------------
0000F662                            ; Object 47 - pinball bumper (SYZ)
0000F662                            ; ---------------------------------------------------------------------------
0000F662                            
0000F662                            Obj47:					; XREF: Obj_Index
0000F662 7000                       		moveq	#0,d0
0000F664 1028 0024                  		move.b	$24(a0),d0
0000F668 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000F66C 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000F670                            ; ===========================================================================
0000F670 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000F672 0000                       		dc.w Obj47_Hit-Obj47_Index
0000F674                            ; ===========================================================================
0000F674                            
0000F674                            Obj47_Main:				; XREF: Obj47_Index
0000F674 5428 0024                  		addq.b	#2,$24(a0)
0000F678 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000F680 317C 0380 0002             		move.w	#$380,2(a0)
0000F686 117C 0004 0001             		move.b	#4,1(a0)
0000F68C 117C 0010 0019             		move.b	#$10,$19(a0)
0000F692 117C 0001 0018             		move.b	#1,$18(a0)
0000F698 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000F69E                            
0000F69E                            Obj47_Hit:				; XREF: Obj47_Index
0000F69E 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000F6A2 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000F6A6 4228 0021                  		clr.b	$21(a0)
0000F6AA 43F8 D000                  		lea	($FFFFD000).w,a1
0000F6AE 3228 0008                  		move.w	8(a0),d1
0000F6B2 3428 000C                  		move.w	$C(a0),d2
0000F6B6 9269 0008                  		sub.w	8(a1),d1
0000F6BA 9469 000C                  		sub.w	$C(a1),d2
0000F6BE 4EB9 0000 304E             		jsr	(CalcAngle).l
0000F6C4 4EB9 0000 2D80             		jsr	(CalcSine).l
0000F6CA C3FC F900                  		muls.w	#-$700,d1
0000F6CE E081                       		asr.l	#8,d1
0000F6D0 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000F6D4 C1FC F900                  		muls.w	#-$700,d0
0000F6D8 E080                       		asr.l	#8,d0
0000F6DA 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000F6DE 08E9 0001 0022             		bset	#1,$22(a1)
0000F6E4 08A9 0004 0022             		bclr	#4,$22(a1)
0000F6EA 08A9 0005 0022             		bclr	#5,$22(a1)
0000F6F0 4229 003C                  		clr.b	$3C(a1)
0000F6F4 117C 0001 001C             		move.b	#1,$1C(a0)
0000F6FA 303C 00B4                  		move.w	#$B4,d0
0000F6FE 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F704 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F708 7000                       		moveq	#0,d0
0000F70A 1028 0023                  		move.b	$23(a0),d0
0000F70E 6700                       		beq.s	Obj47_Score
0000F710 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F716 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F718 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F71C                            
0000F71C                            Obj47_Score:
0000F71C 7001                       		moveq	#1,d0
0000F71E 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F724 6100 F002                  		bsr.w	SingleObjLoad
0000F728 6600                       		bne.s	Obj47_Display
0000F72A 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F72E 3368 0008 0008             		move.w	8(a0),8(a1)
0000F734 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F73A 137C 0004 001A             		move.b	#4,$1A(a1)
0000F740                            
0000F740                            Obj47_Display:
0000F740 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F746 6100 BBB2                  		bsr.w	AnimateSprite
0000F74A 3028 0008                  		move.w	8(a0),d0
0000F74E 0240 FF80                  		andi.w	#$FF80,d0
0000F752 3238 F700                  		move.w	($FFFFF700).w,d1
0000F756 0441 0080                  		subi.w	#$80,d1
0000F75A 0241 FF80                  		andi.w	#$FF80,d1
0000F75E 9041                       		sub.w	d1,d0
0000F760 0C40 0280                  		cmpi.w	#$280,d0
0000F764 6200                       		bhi.s	Obj47_ChkHit
0000F766 6000 EB3A                  		bra.w	DisplaySprite
0000F76A                            ; ===========================================================================
0000F76A                            
0000F76A                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F76A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F76E 7000                       		moveq	#0,d0
0000F770 1028 0023                  		move.b	$23(a0),d0
0000F774 6700                       		beq.s	Obj47_Delete
0000F776 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F77C                            
0000F77C                            Obj47_Delete:
0000F77C 6000 EB60                  		bra.w	DeleteObject
0000F780                            ; ===========================================================================
0000F780                            Ani_obj47:
0000F780                            	include "_anim\obj47.asm"
0000F780                            ; ---------------------------------------------------------------------------
0000F780                            ; Animation script - flamethrower (SBZ)
0000F780                            ; ---------------------------------------------------------------------------
0000F780 0000                       		dc.w byte_EAF4-Ani_obj47
0000F782 0000                       		dc.w byte_EAF8-Ani_obj47
0000F784 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F788 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F790                            		even
0000F790                            		even
0000F790                            
0000F790                            ; ---------------------------------------------------------------------------
0000F790                            ; Sprite mappings - pinball bumper (SYZ)
0000F790                            ; ---------------------------------------------------------------------------
0000F790                            Map_obj47:
0000F790                            	include "_maps\obj47.asm"
0000F790                            ; ---------------------------------------------------------------------------
0000F790                            ; Sprite mappings - pinball bumper (SYZ)
0000F790                            ; ---------------------------------------------------------------------------
0000F790 0000                       		dc.w byte_EB06-Map_obj47
0000F792 0000                       		dc.w byte_EB11-Map_obj47
0000F794 0000                       		dc.w byte_EB1C-Map_obj47
0000F796 02                         byte_EB06:	dc.b 2
0000F797 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F79C F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F7A1 02                         byte_EB11:	dc.b 2
0000F7A2 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F7A7 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F7AC 02                         byte_EB1C:	dc.b 2
0000F7AD F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F7B2 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F7B8 00                         		even
0000F7B8 00                         		even
0000F7B8                            
0000F7B8                            ; ===========================================================================
0000F7B8                            ; ---------------------------------------------------------------------------
0000F7B8                            ; Object 0D - signpost at the end of a level
0000F7B8                            ; ---------------------------------------------------------------------------
0000F7B8                            
0000F7B8                            Obj0D:					; XREF: Obj_Index
0000F7B8 7000                       		moveq	#0,d0
0000F7BA 1028 0024                  		move.b	$24(a0),d0
0000F7BE 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F7C2 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F7C6 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F7CC 6100 BB2C                  		bsr.w	AnimateSprite
0000F7D0 6100 EAD0                  		bsr.w	DisplaySprite
0000F7D4 3028 0008                  		move.w	8(a0),d0
0000F7D8 0240 FF80                  		andi.w	#$FF80,d0
0000F7DC 3238 F700                  		move.w	($FFFFF700).w,d1
0000F7E0 0441 0080                  		subi.w	#$80,d1
0000F7E4 0241 FF80                  		andi.w	#$FF80,d1
0000F7E8 9041                       		sub.w	d1,d0
0000F7EA 0C40 0280                  		cmpi.w	#$280,d0
0000F7EE 6200 EAEE                  		bhi.w	DeleteObject
0000F7F2 4E75                       		rts	
0000F7F4                            ; ===========================================================================
0000F7F4 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F7F6 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F7F8 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F7FA 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F7FC 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F7FE                            ; ===========================================================================
0000F7FE                            
0000F7FE                            Obj0D_Main:				; XREF: Obj0D_Index
0000F7FE 5428 0024                  		addq.b	#2,$24(a0)
0000F802 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F80A 317C 0680 0002             		move.w	#$680,2(a0)
0000F810 117C 0004 0001             		move.b	#4,1(a0)
0000F816 117C 0018 0019             		move.b	#$18,$19(a0)
0000F81C 117C 0004 0018             		move.b	#4,$18(a0)
0000F822                            
0000F822                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F822 3038 D008                  		move.w	($FFFFD008).w,d0
0000F826 9068 0008                  		sub.w	8(a0),d0
0000F82A 6500                       		bcs.s	locret_EBBA
0000F82C 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F830 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F832 303C 00CF                  		move.w	#$CF,d0
0000F836 4EB9 0000 15E0             		jsr	(PlaySound).l	; play signpost	sound
0000F83C 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F840 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F846 5428 0024                  		addq.b	#2,$24(a0)
0000F84A                            
0000F84A                            locret_EBBA:
0000F84A 4E75                       		rts	
0000F84C                            ; ===========================================================================
0000F84C                            
0000F84C                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F84C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F850 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F852 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F858 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F85C 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F862 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F864 5428 0024                  		addq.b	#2,$24(a0)
0000F868                            
0000F868                            Obj0D_Sparkle:
0000F868 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F86C 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F86E 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F874 7000                       		moveq	#0,d0
0000F876 1028 0034                  		move.b	$34(a0),d0
0000F87A 5428 0034                  		addq.b	#2,$34(a0)
0000F87E 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F884 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F888 6100 EE9E                  		bsr.w	SingleObjLoad
0000F88C 6600                       		bne.s	locret_EC42
0000F88E 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F892 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F898 101A                       		move.b	(a2)+,d0
0000F89A 4880                       		ext.w	d0
0000F89C D068 0008                  		add.w	8(a0),d0
0000F8A0 3340 0008                  		move.w	d0,8(a1)
0000F8A4 101A                       		move.b	(a2)+,d0
0000F8A6 4880                       		ext.w	d0
0000F8A8 D068 000C                  		add.w	$C(a0),d0
0000F8AC 3340 000C                  		move.w	d0,$C(a1)
0000F8B0 237C 0000 AA9C 0004        		move.l	#Map_obj25,4(a1)
0000F8B8 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F8BE 137C 0004 0001             		move.b	#4,1(a1)
0000F8C4 137C 0002 0018             		move.b	#2,$18(a1)
0000F8CA 137C 0008 0019             		move.b	#8,$19(a1)
0000F8D0                            
0000F8D0                            locret_EC42:
0000F8D0 4E75                       		rts	
0000F8D2                            ; ===========================================================================
0000F8D2 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F8D4 0808                       		dc.b	8,   8
0000F8D6 F000                       		dc.b -$10,   0
0000F8D8 18F8                       		dc.b  $18,  -8
0000F8DA 00F8                       		dc.b	0,  -8
0000F8DC 1000                       		dc.b  $10,   0
0000F8DE E808                       		dc.b -$18,   8
0000F8E0 1810                       		dc.b  $18, $10
0000F8E2                            ; ===========================================================================
0000F8E2                            
0000F8E2                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F8E2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F8E6 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F8EA 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F8F0 6600                       		bne.s	loc_EC70
0000F8F2 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F8F8 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000F8FE 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000F900 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000F906 6000                       		bra.s	loc_EC70
0000F908                            
0000F908                            Obj0D_MoveLeft:
0000F908 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F90E                            
0000F90E                            loc_EC70:
0000F90E 4A38 D000                  		tst.b	($FFFFD000).w
0000F912 6700                       		beq.s	loc_EC86
0000F914 3038 D008                  		move.w	($FFFFD008).w,d0
0000F918 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F91C 0641 0128                  		addi.w	#$128,d1
0000F920 B041                       		cmp.w	d1,d0
0000F922 6500                       		bcs.s	locret_ECEE
0000F924                            
0000F924                            loc_EC86:
0000F924 5428 0024                  		addq.b	#2,$24(a0)
0000F928                            
0000F928                            ; ---------------------------------------------------------------------------
0000F928                            ; Subroutine to	set up bonuses at the end of an	act
0000F928                            ; ---------------------------------------------------------------------------
0000F928                            
0000F928                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F928                            
0000F928                            
0000F928                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F928 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F92C 6600                       		bne.s	locret_ECEE
0000F92E 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F934 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F938 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F93C 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F942 7010                       		moveq	#$10,d0
0000F944 4EB9 0000 17FC             		jsr	(LoadPLC2).l	; load title card patterns
0000F94A 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F950 7000                       		moveq	#0,d0
0000F952 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F956 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F95A 7200                       		moveq	#0,d1
0000F95C 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F960 D041                       		add.w	d1,d0		; add up your time
0000F962 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F966 7214                       		moveq	#$14,d1
0000F968 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F96A 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F96C 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F96E                            
0000F96E                            loc_ECD0:
0000F96E D040                       		add.w	d0,d0
0000F970 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F976 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F97A C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F97E 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F982 303C 008E                  		move.w	#$8E,d0
0000F986 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F98C                            
0000F98C                            locret_ECEE:
0000F98C 4E75                       		rts	
0000F98E                            ; End of function GotThroughAct
0000F98E                            
0000F98E                            ; ===========================================================================
0000F98E 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F9A2 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F9B8                            ; ===========================================================================
0000F9B8                            
0000F9B8                            locret_ED1A:				; XREF: Obj0D_Index
0000F9B8 4E75                       		rts	
0000F9BA                            ; ===========================================================================
0000F9BA                            Ani_obj0D:
0000F9BA                            	include "_anim\obj0D.asm"
0000F9BA                            ; ---------------------------------------------------------------------------
0000F9BA                            ; Animation script - signpost
0000F9BA                            ; ---------------------------------------------------------------------------
0000F9BA 0000                       		dc.w byte_ED24-Ani_obj0D
0000F9BC 0000                       		dc.w byte_ED28-Ani_obj0D
0000F9BE 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F9C0 0000                       		dc.w byte_ED34-Ani_obj0D
0000F9C2 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F9C6 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F9CC 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F9D2 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F9D6 00                         		even
0000F9D6 00                         		even
0000F9D6                            
0000F9D6                            ; ---------------------------------------------------------------------------
0000F9D6                            ; Sprite mappings - signpost
0000F9D6                            ; ---------------------------------------------------------------------------
0000F9D6                            Map_obj0D:
0000F9D6                            	include "_maps\obj0D.asm"
0000F9D6                            ; ---------------------------------------------------------------------------
0000F9D6                            ; Sprite mappings - signpost
0000F9D6                            ; ---------------------------------------------------------------------------
0000F9D6 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F9DA 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F9DE 0000                       		dc.w byte_ED73-Map_obj0D
0000F9E0 03                         byte_ED42:	dc.b 3
0000F9E1 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F9E6 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F9EB 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F9F0 02                         byte_ED52:	dc.b 2
0000F9F1 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F9F6 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F9FB 02                         byte_ED5D:	dc.b 2
0000F9FC F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000FA01 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000FA06 02                         byte_ED68:	dc.b 2
0000FA07 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000FA0C 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000FA11 03                         byte_ED73:	dc.b 3
0000FA12 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000FA17 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000FA1C 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000FA22 00                         		even
0000FA22 00                         		even
0000FA22                            
0000FA22                            ; ===========================================================================
0000FA22                            ; ---------------------------------------------------------------------------
0000FA22                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000FA22                            ; ---------------------------------------------------------------------------
0000FA22                            
0000FA22                            Obj4C:					; XREF: Obj_Index
0000FA22 7000                       		moveq	#0,d0
0000FA24 1028 0024                  		move.b	$24(a0),d0
0000FA28 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000FA2C 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000FA30 6000 0000                  		bra.w	Obj4D_ChkDel
0000FA34                            ; ===========================================================================
0000FA34 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000FA36 0000                       		dc.w loc_EDCC-Obj4C_Index
0000FA38 0000                       		dc.w loc_EE3E-Obj4C_Index
0000FA3A 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000FA3C 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000FA3E 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000FA40                            ; ===========================================================================
0000FA40                            
0000FA40                            Obj4C_Main:				; XREF: Obj4C_Index
0000FA40 5428 0024                  		addq.b	#2,$24(a0)
0000FA44 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000FA4C 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000FA52 117C 0004 0001             		move.b	#4,1(a0)
0000FA58 117C 0001 0018             		move.b	#1,$18(a0)
0000FA5E 117C 0038 0019             		move.b	#$38,$19(a0)
0000FA64 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000FA6A                            
0000FA6A                            loc_EDCC:				; XREF: Obj4C_Index
0000FA6A 5368 0032                  		subq.w	#1,$32(a0)
0000FA6E 6A00                       		bpl.s	locret_EDF0
0000FA70 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000FA76 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000FA7A 3228 000C                  		move.w	$C(a0),d1
0000FA7E B041                       		cmp.w	d1,d0
0000FA80 6400                       		bcc.s	locret_EDF0
0000FA82 0441 0170                  		subi.w	#$170,d1
0000FA86 B041                       		cmp.w	d1,d0
0000FA88 6500                       		bcs.s	locret_EDF0
0000FA8A 5428 0024                  		addq.b	#2,$24(a0)
0000FA8E                            
0000FA8E                            locret_EDF0:
0000FA8E 4E75                       		rts	
0000FA90                            ; ===========================================================================
0000FA90                            
0000FA90                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000FA90 5428 0024                  		addq.b	#2,$24(a0)
0000FA94 6100 ECA8                  		bsr.w	SingleObjLoad2
0000FA98 6600                       		bne.s	loc_EE18
0000FA9A 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000FA9E 3368 0008 0008             		move.w	8(a0),8(a1)
0000FAA4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FAAA 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000FAB0 2348 003C                  		move.l	a0,$3C(a1)
0000FAB4                            
0000FAB4                            loc_EE18:
0000FAB4 117C 0001 001C             		move.b	#1,$1C(a0)
0000FABA 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000FABE 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000FAC0 117C 0004 001C             		move.b	#4,$1C(a0)
0000FAC6 6000                       		bra.s	Obj4C_Display
0000FAC8                            ; ===========================================================================
0000FAC8                            
0000FAC8                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000FAC8 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000FACC 08E9 0001 0022             		bset	#1,$22(a1)
0000FAD2 337C FA80 0012             		move.w	#-$580,$12(a1)
0000FAD8 6000                       		bra.s	Obj4C_Display
0000FADA                            ; ===========================================================================
0000FADA                            
0000FADA                            loc_EE3E:				; XREF: Obj4C_Index
0000FADA 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000FADE 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000FAE0 5428 0024                  		addq.b	#2,$24(a0)
0000FAE4 4E75                       		rts	
0000FAE6                            ; ===========================================================================
0000FAE6                            
0000FAE6                            Obj4C_Display:				; XREF: Obj4C_Index
0000FAE6 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000FAEC 6100 B80C                  		bsr.w	AnimateSprite
0000FAF0 6100 E7B0                  		bsr.w	DisplaySprite
0000FAF4 4E75                       		rts	
0000FAF6                            ; ===========================================================================
0000FAF6                            
0000FAF6                            Obj4C_Delete:				; XREF: Obj4C_Index
0000FAF6 117C 0000 001C             		move.b	#0,$1C(a0)
0000FAFC 117C 0002 0024             		move.b	#2,$24(a0)
0000FB02 4A28 0028                  		tst.b	$28(a0)
0000FB06 6700 E7D6                  		beq.w	DeleteObject
0000FB0A 4E75                       		rts	
0000FB0C                            ; ===========================================================================
0000FB0C                            ; ---------------------------------------------------------------------------
0000FB0C                            ; Object 4D - lava geyser / lavafall (MZ)
0000FB0C                            ; ---------------------------------------------------------------------------
0000FB0C                            
0000FB0C                            Obj4D:					; XREF: Obj_Index
0000FB0C 7000                       		moveq	#0,d0
0000FB0E 1028 0024                  		move.b	$24(a0),d0
0000FB12 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000FB16 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000FB1A 6000 E786                  		bra.w	DisplaySprite
0000FB1E                            ; ===========================================================================
0000FB1E 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000FB20 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000FB22 0000                       		dc.w loc_EFFC-Obj4D_Index
0000FB24 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000FB26                            
0000FB26 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000FB2A                            ; ===========================================================================
0000FB2A                            
0000FB2A                            Obj4D_Main:				; XREF: Obj4D_Index
0000FB2A 5428 0024                  		addq.b	#2,$24(a0)
0000FB2E 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000FB34 4A28 0028                  		tst.b	$28(a0)
0000FB38 6700                       		beq.s	loc_EEA4
0000FB3A 0468 0250 000C             		subi.w	#$250,$C(a0)
0000FB40                            
0000FB40                            loc_EEA4:
0000FB40 7000                       		moveq	#0,d0
0000FB42 1028 0028                  		move.b	$28(a0),d0
0000FB46 D040                       		add.w	d0,d0
0000FB48 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000FB4E 2248                       		movea.l	a0,a1
0000FB50 7201                       		moveq	#1,d1
0000FB52 6100                       		bsr.s	Obj4D_MakeLava
0000FB54 6000                       		bra.s	loc_EF10
0000FB56                            ; ===========================================================================
0000FB56                            
0000FB56                            Obj4D_Loop:
0000FB56 6100 EBE6                  		bsr.w	SingleObjLoad2
0000FB5A 6600                       		bne.s	loc_EF0A
0000FB5C                            
0000FB5C                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000FB5C 12BC 004D                  		move.b	#$4D,0(a1)
0000FB60 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000FB68 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000FB6E 137C 0004 0001             		move.b	#4,1(a1)
0000FB74 137C 0020 0019             		move.b	#$20,$19(a1)
0000FB7A 3368 0008 0008             		move.w	8(a0),8(a1)
0000FB80 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FB86 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000FB8C 137C 0001 0018             		move.b	#1,$18(a1)
0000FB92 137C 0005 001C             		move.b	#5,$1C(a1)
0000FB98 4A28 0028                  		tst.b	$28(a0)
0000FB9C 6700                       		beq.s	loc_EF0A
0000FB9E 137C 0002 001C             		move.b	#2,$1C(a1)
0000FBA4                            
0000FBA4                            loc_EF0A:
0000FBA4 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000FBA8 4E75                       		rts	
0000FBAA                            ; ===========================================================================
0000FBAA                            
0000FBAA                            loc_EF10:				; XREF: Obj4D_Main
0000FBAA 0669 0060 000C             		addi.w	#$60,$C(a1)
0000FBB0 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000FBB6 0669 0060 0030             		addi.w	#$60,$30(a1)
0000FBBC 137C 0093 0020             		move.b	#$93,$20(a1)
0000FBC2 137C 0080 0016             		move.b	#$80,$16(a1)
0000FBC8 08E9 0004 0001             		bset	#4,1(a1)
0000FBCE 5829 0024                  		addq.b	#4,$24(a1)
0000FBD2 2348 003C                  		move.l	a0,$3C(a1)
0000FBD6 4A28 0028                  		tst.b	$28(a0)
0000FBDA 6700                       		beq.s	Obj4D_PlaySnd
0000FBDC 7200                       		moveq	#0,d1
0000FBDE 6100 FF76                  		bsr.w	Obj4D_Loop
0000FBE2 5429 0024                  		addq.b	#2,$24(a1)
0000FBE6 08E9 0004 0002             		bset	#4,2(a1)
0000FBEC 0669 0100 000C             		addi.w	#$100,$C(a1)
0000FBF2 137C 0000 0018             		move.b	#0,$18(a1)
0000FBF8 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000FBFE 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000FC04 117C 0000 0028             		move.b	#0,$28(a0)
0000FC0A                            
0000FC0A                            Obj4D_PlaySnd:
0000FC0A 303C 00C8                  		move.w	#$C8,d0
0000FC0E 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play flame sound
0000FC14                            
0000FC14                            Obj4D_Action:				; XREF: Obj4D_Index
0000FC14 7000                       		moveq	#0,d0
0000FC16 1028 0028                  		move.b	$28(a0),d0
0000FC1A D040                       		add.w	d0,d0
0000FC1C 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000FC20 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000FC24 6100 E642                  		bsr.w	SpeedToPos
0000FC28 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000FC2E 6100 B6CA                  		bsr.w	AnimateSprite
0000FC32                            
0000FC32                            Obj4D_ChkDel:				; XREF: Obj4C
0000FC32 3028 0008                  		move.w	8(a0),d0
0000FC36 0240 FF80                  		andi.w	#$FF80,d0
0000FC3A 3238 F700                  		move.w	($FFFFF700).w,d1
0000FC3E 0441 0080                  		subi.w	#$80,d1
0000FC42 0241 FF80                  		andi.w	#$FF80,d1
0000FC46 9041                       		sub.w	d1,d0
0000FC48 0C40 0280                  		cmpi.w	#$280,d0
0000FC4C 6200 E690                  		bhi.w	DeleteObject
0000FC50 4E75                       		rts	
0000FC52                            ; ===========================================================================
0000FC52 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000FC54 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000FC56                            ; ===========================================================================
0000FC56                            
0000FC56                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000FC56 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000FC5C 3028 0030                  		move.w	$30(a0),d0
0000FC60 B068 000C                  		cmp.w	$C(a0),d0
0000FC64 6400                       		bcc.s	locret_EFDA
0000FC66 5828 0024                  		addq.b	#4,$24(a0)
0000FC6A 2268 003C                  		movea.l	$3C(a0),a1
0000FC6E 137C 0003 001C             		move.b	#3,$1C(a1)
0000FC74                            
0000FC74                            locret_EFDA:
0000FC74 4E75                       		rts	
0000FC76                            ; ===========================================================================
0000FC76                            
0000FC76                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000FC76 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000FC7C 3028 0030                  		move.w	$30(a0),d0
0000FC80 B068 000C                  		cmp.w	$C(a0),d0
0000FC84 6400                       		bcc.s	locret_EFFA
0000FC86 5828 0024                  		addq.b	#4,$24(a0)
0000FC8A 2268 003C                  		movea.l	$3C(a0),a1
0000FC8E 137C 0001 001C             		move.b	#1,$1C(a1)
0000FC94                            
0000FC94                            locret_EFFA:
0000FC94 4E75                       		rts	
0000FC96                            ; ===========================================================================
0000FC96                            
0000FC96                            loc_EFFC:				; XREF: Obj4D_Index
0000FC96 2268 003C                  		movea.l	$3C(a0),a1
0000FC9A 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000FCA0 6700 0000                  		beq.w	Obj4D_Delete
0000FCA4 3029 000C                  		move.w	$C(a1),d0
0000FCA8 0640 0060                  		addi.w	#$60,d0
0000FCAC 3140 000C                  		move.w	d0,$C(a0)
0000FCB0 9068 0030                  		sub.w	$30(a0),d0
0000FCB4 4440                       		neg.w	d0
0000FCB6 7208                       		moveq	#8,d1
0000FCB8 0C40 0040                  		cmpi.w	#$40,d0
0000FCBC 6C00                       		bge.s	loc_F026
0000FCBE 720B                       		moveq	#$B,d1
0000FCC0                            
0000FCC0                            loc_F026:
0000FCC0 0C40 0080                  		cmpi.w	#$80,d0
0000FCC4 6F00                       		ble.s	loc_F02E
0000FCC6 720E                       		moveq	#$E,d1
0000FCC8                            
0000FCC8                            loc_F02E:
0000FCC8 5328 001E                  		subq.b	#1,$1E(a0)
0000FCCC 6A00                       		bpl.s	loc_F04C
0000FCCE 117C 0007 001E             		move.b	#7,$1E(a0)
0000FCD4 5228 001B                  		addq.b	#1,$1B(a0)
0000FCD8 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000FCDE 6500                       		bcs.s	loc_F04C
0000FCE0 117C 0000 001B             		move.b	#0,$1B(a0)
0000FCE6                            
0000FCE6                            loc_F04C:
0000FCE6 1028 001B                  		move.b	$1B(a0),d0
0000FCEA D001                       		add.b	d1,d0
0000FCEC 1140 001A                  		move.b	d0,$1A(a0)
0000FCF0 6000 FF40                  		bra.w	Obj4D_ChkDel
0000FCF4                            ; ===========================================================================
0000FCF4                            
0000FCF4                            Obj4D_Delete:				; XREF: Obj4D_Index
0000FCF4 6000 E5E8                  		bra.w	DeleteObject
0000FCF8                            ; ===========================================================================
0000FCF8                            ; ---------------------------------------------------------------------------
0000FCF8                            ; Object 4E - advancing	wall of	lava (MZ)
0000FCF8                            ; ---------------------------------------------------------------------------
0000FCF8                            
0000FCF8                            Obj4E:					; XREF: Obj_Index
0000FCF8 7000                       		moveq	#0,d0
0000FCFA 1028 0024                  		move.b	$24(a0),d0
0000FCFE 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000FD02 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000FD06                            ; ===========================================================================
0000FD06 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000FD08 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000FD0A 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000FD0C 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000FD0E 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000FD10                            ; ===========================================================================
0000FD10                            
0000FD10                            Obj4E_Main:				; XREF: Obj4E_Index
0000FD10 5828 0024                  		addq.b	#4,$24(a0)
0000FD14 2248                       		movea.l	a0,a1
0000FD16 7201                       		moveq	#1,d1
0000FD18 6000                       		bra.s	Obj4E_Main2
0000FD1A                            ; ===========================================================================
0000FD1A                            
0000FD1A                            Obj4E_Loop:
0000FD1A 6100 EA22                  		bsr.w	SingleObjLoad2
0000FD1E 6600                       		bne.s	loc_F0C8
0000FD20                            
0000FD20                            Obj4E_Main2:				; XREF: Obj4E_Main
0000FD20 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000FD24 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000FD2C 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000FD32 137C 0004 0001             		move.b	#4,1(a1)
0000FD38 137C 0050 0019             		move.b	#$50,$19(a1)
0000FD3E 3368 0008 0008             		move.w	8(a0),8(a1)
0000FD44 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FD4A 137C 0001 0018             		move.b	#1,$18(a1)
0000FD50 137C 0000 001C             		move.b	#0,$1C(a1)
0000FD56 137C 0094 0020             		move.b	#$94,$20(a1)
0000FD5C 2348 003C                  		move.l	a0,$3C(a1)
0000FD60                            
0000FD60                            loc_F0C8:
0000FD60 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000FD64                            
0000FD64 5C29 0024                  		addq.b	#6,$24(a1)
0000FD68 137C 0004 001A             		move.b	#4,$1A(a1)
0000FD6E                            
0000FD6E                            Obj4E_Action:				; XREF: Obj4E_Index
0000FD6E 3038 D008                  		move.w	($FFFFD008).w,d0
0000FD72 9068 0008                  		sub.w	8(a0),d0
0000FD76 6400                       		bcc.s	Obj4E_ChkSonic
0000FD78 4440                       		neg.w	d0
0000FD7A                            
0000FD7A                            Obj4E_ChkSonic:
0000FD7A 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000FD7E 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000FD80 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000FD84 9068 000C                  		sub.w	$C(a0),d0
0000FD88 6400                       		bcc.s	loc_F0F4
0000FD8A 4440                       		neg.w	d0
0000FD8C                            
0000FD8C                            loc_F0F4:
0000FD8C 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000FD90 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000FD92 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000FD98 6000                       		bra.s	Obj4E_Solid
0000FD9A                            ; ===========================================================================
0000FD9A                            
0000FD9A                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000FD9A 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000FD9E 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000FDA0 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000FDA6 5528 0024                  		subq.b	#2,$24(a0)
0000FDAA                            
0000FDAA                            Obj4E_Solid:				; XREF: Obj4E_Index
0000FDAA 323C 002B                  		move.w	#$2B,d1
0000FDAE 343C 0018                  		move.w	#$18,d2
0000FDB2 3602                       		move.w	d2,d3
0000FDB4 5243                       		addq.w	#1,d3
0000FDB6 3828 0008                  		move.w	8(a0),d4
0000FDBA 1028 0024                  		move.b	$24(a0),d0
0000FDBE 3F00                       		move.w	d0,-(sp)
0000FDC0 6100 0000                  		bsr.w	SolidObject
0000FDC4 301F                       		move.w	(sp)+,d0
0000FDC6 1140 0024                  		move.b	d0,$24(a0)
0000FDCA 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000FDD0 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000FDD2 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000FDD6 4228 0036                  		clr.b	$36(a0)
0000FDDA                            
0000FDDA                            Obj4E_Animate:
0000FDDA 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000FDE0 6100 B518                  		bsr.w	AnimateSprite
0000FDE4 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000FDEA 6400                       		bcc.s	Obj4E_ChkDel
0000FDEC 6100 E47A                  		bsr.w	SpeedToPos
0000FDF0                            
0000FDF0                            Obj4E_ChkDel:
0000FDF0 6100 E4B0                  		bsr.w	DisplaySprite
0000FDF4 4A28 0036                  		tst.b	$36(a0)
0000FDF8 6600                       		bne.s	locret_F17E
0000FDFA 3028 0008                  		move.w	8(a0),d0
0000FDFE 0240 FF80                  		andi.w	#$FF80,d0
0000FE02 3238 F700                  		move.w	($FFFFF700).w,d1
0000FE06 0441 0080                  		subi.w	#$80,d1
0000FE0A 0241 FF80                  		andi.w	#$FF80,d1
0000FE0E 9041                       		sub.w	d1,d0
0000FE10 0C40 0280                  		cmpi.w	#$280,d0
0000FE14 6200                       		bhi.s	Obj4E_ChkGone
0000FE16                            
0000FE16                            locret_F17E:
0000FE16 4E75                       		rts	
0000FE18                            ; ===========================================================================
0000FE18                            
0000FE18                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000FE18 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FE1C 7000                       		moveq	#0,d0
0000FE1E 1028 0023                  		move.b	$23(a0),d0
0000FE22 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FE28 117C 0008 0024             		move.b	#8,$24(a0)
0000FE2E 4E75                       		rts	
0000FE30                            ; ===========================================================================
0000FE30                            
0000FE30                            Obj4E_Move2:				; XREF: Obj4E_Index
0000FE30 2268 003C                  		movea.l	$3C(a0),a1
0000FE34 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000FE3A 6700                       		beq.s	Obj4E_Delete
0000FE3C 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000FE42 0468 0080 0008             		subi.w	#$80,8(a0)
0000FE48 6000 E458                  		bra.w	DisplaySprite
0000FE4C                            ; ===========================================================================
0000FE4C                            
0000FE4C                            Obj4E_Delete:				; XREF: Obj4E_Index
0000FE4C 6000 E490                  		bra.w	DeleteObject
0000FE50                            ; ===========================================================================
0000FE50                            ; ---------------------------------------------------------------------------
0000FE50                            ; Object 54 - invisible	lava tag (MZ)
0000FE50                            ; ---------------------------------------------------------------------------
0000FE50                            
0000FE50                            Obj54:					; XREF: Obj_Index
0000FE50 7000                       		moveq	#0,d0
0000FE52 1028 0024                  		move.b	$24(a0),d0
0000FE56 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000FE5A 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000FE5E                            ; ===========================================================================
0000FE5E 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000FE60 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000FE62                            
0000FE62 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000FE66                            ; ===========================================================================
0000FE66                            
0000FE66                            Obj54_Main:				; XREF: Obj54_Index
0000FE66 5428 0024                  		addq.b	#2,$24(a0)
0000FE6A 7000                       		moveq	#0,d0
0000FE6C 1028 0028                  		move.b	$28(a0),d0
0000FE70 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000FE76 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000FE7E 117C 0084 0001             		move.b	#$84,1(a0)
0000FE84                            
0000FE84                            Obj54_ChkDel:				; XREF: Obj54_Index
0000FE84 3028 0008                  		move.w	8(a0),d0
0000FE88 0240 FF80                  		andi.w	#$FF80,d0
0000FE8C 3238 F700                  		move.w	($FFFFF700).w,d1
0000FE90 0441 0080                  		subi.w	#$80,d1
0000FE94 0241 FF80                  		andi.w	#$FF80,d1
0000FE98 9041                       		sub.w	d1,d0
0000FE9A 6B00 E442                  		bmi.w	DeleteObject
0000FE9E 0C40 0280                  		cmpi.w	#$280,d0
0000FEA2 6200 E43A                  		bhi.w	DeleteObject
0000FEA6 4E75                       		rts	
0000FEA8                            ; ===========================================================================
0000FEA8                            ; ---------------------------------------------------------------------------
0000FEA8                            ; Sprite mappings - invisible lava tag (MZ)
0000FEA8                            ; ---------------------------------------------------------------------------
0000FEA8                            Map_obj54:
0000FEA8                            	include "_maps\obj54.asm"
0000FEA8                            ; ---------------------------------------------------------------------------
0000FEA8                            ; Sprite mappings - invisible lava tag (MZ)
0000FEA8                            ; ---------------------------------------------------------------------------
0000FEA8 0000                       		dc.w byte_F212-Map_obj54
0000FEAA 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000FEAC 00                         		even
0000FEAC 00                         		even
0000FEAC                            
0000FEAC                            Ani_obj4C:
0000FEAC                            	include "_anim\obj4C.asm"
0000FEAC                            ; ---------------------------------------------------------------------------
0000FEAC                            ; Animation script - geyser of lava (MZ)
0000FEAC                            ; ---------------------------------------------------------------------------
0000FEAC 0000                       		dc.w byte_F220-Ani_obj4C
0000FEAE 0000                       		dc.w byte_F22A-Ani_obj4C
0000FEB0 0000                       		dc.w byte_F22E-Ani_obj4C
0000FEB2 0000                       		dc.w byte_F232-Ani_obj4C
0000FEB4 0000                       		dc.w byte_F23A-Ani_obj4C
0000FEB6 0000                       		dc.w byte_F23E-Ani_obj4C
0000FEB8 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000FEC2 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000FEC6 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000FECA 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000FED2 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000FED6 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000FEDA                            		even
0000FEDA                            		even
0000FEDA                            
0000FEDA                            Ani_obj4E:
0000FEDA                            	include "_anim\obj4E.asm"
0000FEDA                            ; ---------------------------------------------------------------------------
0000FEDA                            ; Animation script - advancing wall of lava (MZ)
0000FEDA                            ; ---------------------------------------------------------------------------
0000FEDA 0000                       		dc.w byte_F244-Ani_obj4E
0000FEDC 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000FEE2                            		even
0000FEE2                            		even
0000FEE2                            
0000FEE2                            ; ---------------------------------------------------------------------------
0000FEE2                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FEE2                            ; ---------------------------------------------------------------------------
0000FEE2                            Map_obj4C:
0000FEE2                            	include "_maps\obj4C.asm"
0000FEE2                            ; ---------------------------------------------------------------------------
0000FEE2                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FEE2                            ; ---------------------------------------------------------------------------
0000FEE2 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000FEE6 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000FEEA 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000FEEE 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000FEF2 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000FEF6 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000FEFA 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000FEFE 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000FF02 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000FF06 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000FF0A 02                         byte_F272:	dc.b 2
0000FF0B EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000FF10 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000FF15 02                         byte_F27D:	dc.b 2
0000FF16 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000FF1B EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000FF20 04                         byte_F288:	dc.b 4
0000FF21 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FF26 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FF2B F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FF30 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FF35 04                         byte_F29D:	dc.b 4
0000FF36 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FF3B F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FF40 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FF45 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FF4A 06                         byte_F2B2:	dc.b 6
0000FF4B EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FF50 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FF55 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FF5A EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FF5F E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000FF64 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000FF69 06                         byte_F2D1:	dc.b 6
0000FF6A EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FF6F F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FF74 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FF79 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FF7E E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000FF83 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000FF88 02                         byte_F2F0:	dc.b 2
0000FF89 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000FF8E E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000FF93 02                         byte_F2FB:	dc.b 2
0000FF94 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000FF99 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000FF9E 0A                         byte_F306:	dc.b $A
0000FF9F 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FFA4 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FFA9 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FFAE B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FFB3 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FFB8 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FFBD F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FFC2 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FFC7 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FFCC 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FFD1 0A                         byte_F339:	dc.b $A
0000FFD2 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FFD7 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FFDC B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FFE1 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FFE6 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FFEB D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FFF0 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FFF5 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FFFA 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FFFF 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00010004 0A                         byte_F36C:	dc.b $A
00010005 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0001000A 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0001000F B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010014 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010019 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0001001E D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010023 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00010028 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0001002D 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00010032 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00010037 06                         byte_F39F:	dc.b 6
00010038 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0001003D 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010042 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010047 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0001004C D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010051 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010056 06                         byte_F3BE:	dc.b 6
00010057 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0001005C 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010061 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010066 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0001006B D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010070 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010075 06                         byte_F3DD:	dc.b 6
00010076 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0001007B 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010080 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010085 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0001008A D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0001008F D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010094 10                         byte_F3FC:	dc.b $10
00010095 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0001009A 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0001009F B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
000100A4 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
000100A9 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
000100AE D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
000100B3 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
000100B8 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
000100BD 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
000100C2 100F 0840 00               		dc.b $10, $F, 8, $40, 0
000100C7 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
000100CC 300F 0840 00               		dc.b $30, $F, 8, $40, 0
000100D1 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
000100D6 500F 0840 00               		dc.b $50, $F, 8, $40, 0
000100DB 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
000100E0 700F 0840 00               		dc.b $70, $F, 8, $40, 0
000100E5 10                         byte_F44D:	dc.b $10
000100E6 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
000100EB 900F 0850 00               		dc.b $90, $F, 8, $50, 0
000100F0 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
000100F5 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
000100FA D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
000100FF D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010104 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00010109 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0001010E 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00010113 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00010118 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0001011D 300F 0850 00               		dc.b $30, $F, 8, $50, 0
00010122 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
00010127 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0001012C 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
00010131 700F 0850 00               		dc.b $70, $F, 8, $50, 0
00010136 10                         byte_F49E:	dc.b $10
00010137 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0001013C 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010141 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010146 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0001014B D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010150 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010155 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0001015A F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0001015F 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00010164 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00010169 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0001016E 300F 0860 00               		dc.b $30, $F, 8, $60, 0
00010173 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
00010178 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0001017D 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
00010182 700F 0860 00               		dc.b $70, $F, 8, $60, 0
00010187 06                         byte_F4EF:	dc.b 6
00010188 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0001018D E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
00010192 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
00010197 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0001019C D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
000101A1 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
000101A6 06                         byte_F50E:	dc.b 6
000101A7 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
000101AC E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
000101B1 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
000101B6 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
000101BB D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
000101C0 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
000101C5 00                         byte_F52D:	dc.b 0
000101C6                            		even
000101C6                            		even
000101C6                            
000101C6                            ; ---------------------------------------------------------------------------
000101C6                            ; Sprite mappings - advancing wall of lava (MZ)
000101C6                            ; ---------------------------------------------------------------------------
000101C6                            Map_obj4E:
000101C6                            	include "_maps\obj4E.asm"
000101C6                            ; ---------------------------------------------------------------------------
000101C6                            ; Sprite mappings - advancing wall of lava (MZ)
000101C6                            ; ---------------------------------------------------------------------------
000101C6 0000                       		dc.w byte_F538-Map_obj4E
000101C8 0000                       		dc.w byte_F566-Map_obj4E
000101CA 0000                       		dc.w byte_F594-Map_obj4E
000101CC 0000                       		dc.w byte_F5C2-Map_obj4E
000101CE 0000                       		dc.w byte_F5F0-Map_obj4E
000101D0 09                         byte_F538:	dc.b 9
000101D1 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
000101D6 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
000101DB 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000101E0 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000101E5 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000101EA E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000101EF 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000101F4 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000101F9 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000101FE 09                         byte_F566:	dc.b 9
000101FF E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
00010204 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
00010209 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0001020E E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010213 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010218 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0001021D 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010222 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010227 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0001022C 09                         byte_F594:	dc.b 9
0001022D E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
00010232 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
00010237 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0001023C E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010241 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010246 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0001024B 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010250 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010255 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0001025A 09                         byte_F5C2:	dc.b 9
0001025B E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
00010260 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
00010265 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0001026A E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0001026F 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010274 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010279 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0001027E E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010283 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010288 08                         byte_F5F0:	dc.b 8
00010289 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0001028E 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010293 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010298 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0001029D E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000102A2 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000102A7 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000102AC 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000102B2 00                         		even
000102B2 00                         		even
000102B2                            
000102B2                            ; ===========================================================================
000102B2                            ; ---------------------------------------------------------------------------
000102B2                            ; Object 40 - Moto Bug enemy (GHZ)
000102B2                            ; ---------------------------------------------------------------------------
000102B2                            
000102B2                            Obj40:					; XREF: Obj_Index
000102B2 7000                       		moveq	#0,d0
000102B4 1028 0024                  		move.b	$24(a0),d0
000102B8 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
000102BC 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
000102C0                            ; ===========================================================================
000102C0 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
000102C2 0000                       		dc.w Obj40_Action-Obj40_Index
000102C4 0000                       		dc.w Obj40_Animate-Obj40_Index
000102C6 0000                       		dc.w Obj40_Delete-Obj40_Index
000102C8                            ; ===========================================================================
000102C8                            
000102C8                            Obj40_Main:				; XREF: Obj40_Index
000102C8 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
000102D0 317C 04F0 0002             		move.w	#$4F0,2(a0)
000102D6 117C 0004 0001             		move.b	#4,1(a0)
000102DC 117C 0004 0018             		move.b	#4,$18(a0)
000102E2 117C 0014 0019             		move.b	#$14,$19(a0)
000102E8 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
000102EC 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
000102EE 117C 000E 0016             		move.b	#$E,$16(a0)
000102F4 117C 0008 0017             		move.b	#8,$17(a0)
000102FA 117C 000C 0020             		move.b	#$C,$20(a0)
00010300 6100 DF04                  		bsr.w	ObjectFall
00010304 4EB9 0000 0000             		jsr	ObjHitFloor
0001030A 4A41                       		tst.w	d1
0001030C 6A00                       		bpl.s	locret_F68A
0001030E D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010312 317C 0000 0012             		move.w	#0,$12(a0)
00010318 5428 0024                  		addq.b	#2,$24(a0)
0001031C 0868 0000 0022             		bchg	#0,$22(a0)
00010322                            
00010322                            locret_F68A:
00010322 4E75                       		rts	
00010324                            ; ===========================================================================
00010324                            
00010324                            Obj40_SetSmoke:				; XREF: Obj40_Main
00010324 5828 0024                  		addq.b	#4,$24(a0)
00010328 6000 0000                  		bra.w	Obj40_Animate
0001032C                            ; ===========================================================================
0001032C                            
0001032C                            Obj40_Action:				; XREF: Obj40_Index
0001032C 7000                       		moveq	#0,d0
0001032E 1028 0025                  		move.b	$25(a0),d0
00010332 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
00010336 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0001033A 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00010340 6100 AFB8                  		bsr.w	AnimateSprite
00010344                            
00010344                            ; ---------------------------------------------------------------------------
00010344                            ; Routine to mark an enemy/monitor/ring	as destroyed
00010344                            ; ---------------------------------------------------------------------------
00010344                            
00010344                            MarkObjGone:
00010344 3028 0008                  		move.w	8(a0),d0
00010348 0240 FF80                  		andi.w	#$FF80,d0
0001034C 3238 F700                  		move.w	($FFFFF700).w,d1
00010350 0441 0080                  		subi.w	#$80,d1
00010354 0241 FF80                  		andi.w	#$FF80,d1
00010358 9041                       		sub.w	d1,d0
0001035A 0C40 0280                  		cmpi.w	#$280,d0
0001035E 6200 0000                  		bhi.w	Mark_ChkGone
00010362 6000 DF3E                  		bra.w	DisplaySprite
00010366                            ; ===========================================================================
00010366                            
00010366                            Mark_ChkGone:
00010366 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001036A 7000                       		moveq	#0,d0
0001036C 1028 0023                  		move.b	$23(a0),d0
00010370 6700                       		beq.s	Mark_Delete
00010372 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010378                            
00010378                            Mark_Delete:
00010378 6000 DF64                  		bra.w	DeleteObject
0001037C                            
0001037C                            ; ===========================================================================
0001037C 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0001037E 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
00010380                            ; ===========================================================================
00010380                            
00010380                            Obj40_Move:				; XREF: Obj40_Index2
00010380 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00010384 6A00                       		bpl.s	locret_F70A	; if time remains, branch
00010386 5428 0025                  		addq.b	#2,$25(a0)
0001038A 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
00010390 117C 0001 001C             		move.b	#1,$1C(a0)
00010396 0868 0000 0022             		bchg	#0,$22(a0)
0001039C 6600                       		bne.s	locret_F70A
0001039E 4468 0010                  		neg.w	$10(a0)		; change direction
000103A2                            
000103A2                            locret_F70A:
000103A2 4E75                       		rts	
000103A4                            ; ===========================================================================
000103A4                            
000103A4                            Obj40_FixToFloor:			; XREF: Obj40_Index2
000103A4 6100 DEC2                  		bsr.w	SpeedToPos
000103A8 4EB9 0000 0000             		jsr	ObjHitFloor
000103AE 0C41 FFF8                  		cmpi.w	#-8,d1
000103B2 6D00                       		blt.s	Obj40_Pause
000103B4 0C41 000C                  		cmpi.w	#$C,d1
000103B8 6C00                       		bge.s	Obj40_Pause
000103BA D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
000103BE 5328 0033                  		subq.b	#1,$33(a0)
000103C2 6A00                       		bpl.s	locret_F756
000103C4 117C 000F 0033             		move.b	#$F,$33(a0)
000103CA 6100 E35C                  		bsr.w	SingleObjLoad
000103CE 6600                       		bne.s	locret_F756
000103D0 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
000103D4 3368 0008 0008             		move.w	8(a0),8(a1)
000103DA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000103E0 1368 0022 0022             		move.b	$22(a0),$22(a1)
000103E6 137C 0002 001C             		move.b	#2,$1C(a1)
000103EC                            
000103EC                            locret_F756:
000103EC 4E75                       		rts	
000103EE                            ; ===========================================================================
000103EE                            
000103EE                            Obj40_Pause:				; XREF: Obj40_FixToFloor
000103EE 5528 0025                  		subq.b	#2,$25(a0)
000103F2 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
000103F8 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
000103FE 117C 0000 001C             		move.b	#0,$1C(a0)
00010404 4E75                       		rts	
00010406                            ; ===========================================================================
00010406                            
00010406                            Obj40_Animate:				; XREF: Obj40_Index
00010406 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0001040C 6100 AEEC                  		bsr.w	AnimateSprite
00010410 6000 DE90                  		bra.w	DisplaySprite
00010414                            ; ===========================================================================
00010414                            
00010414                            Obj40_Delete:				; XREF: Obj40_Index
00010414 6000 DEC8                  		bra.w	DeleteObject
00010418                            ; ===========================================================================
00010418                            Ani_obj40:
00010418                            	include "_anim\obj40.asm"
00010418                            ; ---------------------------------------------------------------------------
00010418                            ; Animation script - Motobug enemy
00010418                            ; ---------------------------------------------------------------------------
00010418 0000                       		dc.w byte_F788-Ani_obj40
0001041A 0000                       		dc.w byte_F78C-Ani_obj40
0001041C 0000                       		dc.w byte_F792-Ani_obj40
0001041E 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
00010422 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
00010428 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
00010436                            		even
00010436                            		even
00010436                            
00010436                            ; ---------------------------------------------------------------------------
00010436                            ; Sprite mappings - Moto Bug enemy (GHZ)
00010436                            ; ---------------------------------------------------------------------------
00010436                            Map_obj40:
00010436                            	include "_maps\obj40.asm"
00010436                            Map_cedc:
00010436 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
00010438 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
0001043A 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
0001043C 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
0001043E 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
00010440 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
00010442 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
00010444 04                         Map_cedc_E: 	dc.b $4
00010445 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0001044A 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
0001044F F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
00010454 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
00010459 04                         Map_cedc_23: 	dc.b $4
0001045A F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
0001045F 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
00010464 F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
00010469 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
0001046E 05                         Map_cedc_38: 	dc.b $5
0001046F F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
00010474 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
00010479 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0001047E 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
00010483 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
00010488 01                         Map_cedc_52: 	dc.b $1
00010489 FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
0001048E 01                         Map_cedc_58: 	dc.b $1
0001048F FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
00010494 01                         Map_cedc_5E: 	dc.b $1
00010495 FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
0001049A 00                         Map_cedc_64: 	dc.b $0
0001049C 00                         	even
0001049C 00                         	even
0001049C                            
0001049C                            ; ===========================================================================
0001049C                            ; ---------------------------------------------------------------------------
0001049C                            ; Object 4F - blank
0001049C                            ; ---------------------------------------------------------------------------
0001049C                            
0001049C                            Obj4F:					; XREF: Obj_Index
0001049C 4E75                       		rts	
0001049E                            
0001049E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001049E                            
0001049E                            
0001049E                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
0001049E 3038 FE04                  		move.w	($FFFFFE04).w,d0
000104A2 D047                       		add.w	d7,d0
000104A4 0240 0003                  		andi.w	#3,d0
000104A8 6600                       		bne.s	loc_F836
000104AA 7600                       		moveq	#0,d3
000104AC 1628 0019                  		move.b	$19(a0),d3
000104B0 4A68 0010                  		tst.w	$10(a0)
000104B4 6B00                       		bmi.s	loc_F82C
000104B6 6100 0000                  		bsr.w	ObjHitWallRight
000104BA 4A41                       		tst.w	d1
000104BC 6A00                       		bpl.s	loc_F836
000104BE                            
000104BE                            loc_F828:
000104BE 7001                       		moveq	#1,d0
000104C0 4E75                       		rts	
000104C2                            ; ===========================================================================
000104C2                            
000104C2                            loc_F82C:
000104C2 4643                       		not.w	d3
000104C4 6100 0000                  		bsr.w	ObjHitWallLeft
000104C8 4A41                       		tst.w	d1
000104CA 6BF2                       		bmi.s	loc_F828
000104CC                            
000104CC                            loc_F836:
000104CC 7000                       		moveq	#0,d0
000104CE 4E75                       		rts	
000104D0                            ; End of function Obj50_ChkWall
000104D0                            
000104D0                            ; ===========================================================================
000104D0                            ; ---------------------------------------------------------------------------
000104D0                            ; Object 50 - Yadrin enemy (SYZ)
000104D0                            ; ---------------------------------------------------------------------------
000104D0                            
000104D0                            Obj50:					; XREF: Obj_Index
000104D0 7000                       		moveq	#0,d0
000104D2 1028 0024                  		move.b	$24(a0),d0
000104D6 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
000104DA 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
000104DE                            ; ===========================================================================
000104DE 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
000104E0 0000                       		dc.w Obj50_Action-Obj50_Index
000104E2                            ; ===========================================================================
000104E2                            
000104E2                            Obj50_Main:				; XREF: Obj50_Index
000104E2 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
000104EA 317C 247B 0002             		move.w	#$247B,2(a0)
000104F0 117C 0004 0001             		move.b	#4,1(a0)
000104F6 117C 0004 0018             		move.b	#4,$18(a0)
000104FC 117C 0014 0019             		move.b	#$14,$19(a0)
00010502 117C 0011 0016             		move.b	#$11,$16(a0)
00010508 117C 0008 0017             		move.b	#8,$17(a0)
0001050E 117C 00CC 0020             		move.b	#$CC,$20(a0)
00010514 6100 DCF0                  		bsr.w	ObjectFall
00010518 6100 0000                  		bsr.w	ObjHitFloor
0001051C 4A41                       		tst.w	d1
0001051E 6A00                       		bpl.s	locret_F89E
00010520 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010524 317C 0000 0012             		move.w	#0,$12(a0)
0001052A 5428 0024                  		addq.b	#2,$24(a0)
0001052E 0868 0000 0022             		bchg	#0,$22(a0)
00010534                            
00010534                            locret_F89E:
00010534 4E75                       		rts	
00010536                            ; ===========================================================================
00010536                            
00010536                            Obj50_Action:				; XREF: Obj50_Index
00010536 7000                       		moveq	#0,d0
00010538 1028 0025                  		move.b	$25(a0),d0
0001053C 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
00010540 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
00010544 43F9 0000 0000             		lea	(Ani_obj50).l,a1
0001054A 6100 ADAE                  		bsr.w	AnimateSprite
0001054E 6000 FDF4                  		bra.w	MarkObjGone
00010552                            ; ===========================================================================
00010552 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
00010554 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
00010556                            ; ===========================================================================
00010556                            
00010556                            Obj50_Move:				; XREF: Obj50_Index2
00010556 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0001055A 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
0001055C 5428 0025                  		addq.b	#2,$25(a0)
00010560 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
00010566 117C 0001 001C             		move.b	#1,$1C(a0)
0001056C 0868 0000 0022             		bchg	#0,$22(a0)
00010572 6600                       		bne.s	locret_F8E2
00010574 4468 0010                  		neg.w	$10(a0)		; change direction
00010578                            
00010578                            locret_F8E2:
00010578 4E75                       		rts	
0001057A                            ; ===========================================================================
0001057A                            
0001057A                            Obj50_FixToFloor:			; XREF: Obj50_Index2
0001057A 6100 DCEC                  		bsr.w	SpeedToPos
0001057E 6100 0000                  		bsr.w	ObjHitFloor
00010582 0C41 FFF8                  		cmpi.w	#-8,d1
00010586 6D00                       		blt.s	Obj50_Pause
00010588 0C41 000C                  		cmpi.w	#$C,d1
0001058C 6C00                       		bge.s	Obj50_Pause
0001058E D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
00010592 6100 FF0A                  		bsr.w	Obj50_ChkWall
00010596 6600                       		bne.s	Obj50_Pause
00010598 4E75                       		rts	
0001059A                            ; ===========================================================================
0001059A                            
0001059A                            Obj50_Pause:				; XREF: Obj50_FixToFloor
0001059A 5528 0025                  		subq.b	#2,$25(a0)
0001059E 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
000105A4 317C 0000 0010             		move.w	#0,$10(a0)
000105AA 117C 0000 001C             		move.b	#0,$1C(a0)
000105B0 4E75                       		rts	
000105B2                            ; ===========================================================================
000105B2                            Ani_obj50:
000105B2                            	include "_anim\obj50.asm"
000105B2                            ; ---------------------------------------------------------------------------
000105B2                            ; Animation script - Yadrin enemy
000105B2                            ; ---------------------------------------------------------------------------
000105B2 0000                       		dc.w byte_F920-Ani_obj50
000105B4 0000                       		dc.w byte_F924-Ani_obj50
000105B6 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
000105BA 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
000105C4                            		even
000105C4                            		even
000105C4                            
000105C4                            ; ---------------------------------------------------------------------------
000105C4                            ; Sprite mappings - Yadrin enemy (SYZ)
000105C4                            ; ---------------------------------------------------------------------------
000105C4                            Map_obj50:
000105C4                            	include "_maps\obj50.asm"
000105C4                            Map_ff24:
000105C4 0000                       Map_ff24_0: 	dc.w Map_ff24_C-Map_ff24
000105C6 0000                       Map_ff24_2: 	dc.w Map_ff24_26-Map_ff24
000105C8 0000                       Map_ff24_4: 	dc.w Map_ff24_40-Map_ff24
000105CA 0000                       Map_ff24_6: 	dc.w Map_ff24_5A-Map_ff24
000105CC 0000                       Map_ff24_8: 	dc.w Map_ff24_74-Map_ff24
000105CE 0000                       Map_ff24_A: 	dc.w Map_ff24_8E-Map_ff24
000105D0 05                         Map_ff24_C: 	dc.b $5
000105D1 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
000105D6 FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
000105DB EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000105E0 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000105E5 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
000105EA 05                         Map_ff24_26: 	dc.b $5
000105EB F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
000105F0 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
000105F5 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000105FA F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000105FF 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
00010604 05                         Map_ff24_40: 	dc.b $5
00010605 F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
0001060A 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
0001060F EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010614 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010619 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
0001061E 05                         Map_ff24_5A: 	dc.b $5
0001061F F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
00010624 FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
00010629 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0001062E F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010633 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010638 05                         Map_ff24_74: 	dc.b $5
00010639 F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
0001063E FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
00010643 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010648 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0001064D 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010652 05                         Map_ff24_8E: 	dc.b $5
00010653 F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
00010658 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
0001065D EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010662 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010667 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
0001066C                            	even
0001066C                            	even
0001066C                            
0001066C                            ; ---------------------------------------------------------------------------
0001066C                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
0001066C                            ;
0001066C                            ; variables:
0001066C                            ; d1 = width
0001066C                            ; d2 = height /	2 (when	jumping)
0001066C                            ; d3 = height /	2 (when	walking)
0001066C                            ; d4 = x-axis position
0001066C                            ; ---------------------------------------------------------------------------
0001066C                            
0001066C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001066C                            
0001066C                            
0001066C                            SolidObject:
0001066C 4A28 0025                  		tst.b	$25(a0)
00010670 6700 0000                  		beq.w	loc_FAC8
00010674 3401                       		move.w	d1,d2
00010676 D442                       		add.w	d2,d2
00010678 43F8 D000                  		lea	($FFFFD000).w,a1
0001067C 0829 0001 0022             		btst	#1,$22(a1)
00010682 6600                       		bne.s	loc_F9FE
00010684 3029 0008                  		move.w	8(a1),d0
00010688 9068 0008                  		sub.w	8(a0),d0
0001068C D041                       		add.w	d1,d0
0001068E 6B00                       		bmi.s	loc_F9FE
00010690 B042                       		cmp.w	d2,d0
00010692 6500                       		bcs.s	loc_FA12
00010694                            
00010694                            loc_F9FE:
00010694 08A9 0003 0022             		bclr	#3,$22(a1)
0001069A 08A8 0003 0022             		bclr	#3,$22(a0)
000106A0 4228 0025                  		clr.b	$25(a0)
000106A4 7800                       		moveq	#0,d4
000106A6 4E75                       		rts	
000106A8                            ; ===========================================================================
000106A8                            
000106A8                            loc_FA12:
000106A8 3404                       		move.w	d4,d2
000106AA 4EB9 0000 859A             		jsr	MvSonicOnPtfm 
000106B0 7800                       		moveq	#0,d4
000106B2 4E75                       		rts	
000106B4                            ; ===========================================================================
000106B4                            
000106B4                            SolidObject71:				; XREF: Obj71_Solid
000106B4 4A28 0025                  		tst.b	$25(a0)
000106B8 6700 0000                  		beq.w	loc_FAD0
000106BC 3401                       		move.w	d1,d2
000106BE D442                       		add.w	d2,d2
000106C0 43F8 D000                  		lea	($FFFFD000).w,a1
000106C4 0829 0001 0022             		btst	#1,$22(a1)
000106CA 6600                       		bne.s	loc_FA44
000106CC 3029 0008                  		move.w	8(a1),d0
000106D0 9068 0008                  		sub.w	8(a0),d0
000106D4 D041                       		add.w	d1,d0
000106D6 6B00                       		bmi.s	loc_FA44
000106D8 B042                       		cmp.w	d2,d0
000106DA 6500                       		bcs.s	loc_FA58
000106DC                            
000106DC                            loc_FA44:
000106DC 08A9 0003 0022             		bclr	#3,$22(a1)
000106E2 08A8 0003 0022             		bclr	#3,$22(a0)
000106E8 4228 0025                  		clr.b	$25(a0)
000106EC 7800                       		moveq	#0,d4
000106EE 4E75                       		rts	
000106F0                            ; ===========================================================================
000106F0                            
000106F0                            loc_FA58:
000106F0 3404                       		move.w	d4,d2
000106F2                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
000106F2 7800                       		moveq	#0,d4
000106F4 4E75                       		rts	
000106F6                            ; ===========================================================================
000106F6                            
000106F6                            SolidObject2F:				; XREF: Obj2F_Solid
000106F6 43F8 D000                  		lea	($FFFFD000).w,a1
000106FA 4A28 0001                  		tst.b	1(a0)
000106FE 6A00 0000                  		bpl.w	loc_FB92
00010702 3029 0008                  		move.w	8(a1),d0
00010706 9068 0008                  		sub.w	8(a0),d0
0001070A D041                       		add.w	d1,d0
0001070C 6B00 0000                  		bmi.w	loc_FB92
00010710 3601                       		move.w	d1,d3
00010712 D643                       		add.w	d3,d3
00010714 B043                       		cmp.w	d3,d0
00010716 6200 0000                  		bhi.w	loc_FB92
0001071A 3A00                       		move.w	d0,d5
0001071C 0828 0000 0001             		btst	#0,1(a0)
00010722 6700                       		beq.s	loc_FA94
00010724 4645                       		not.w	d5
00010726 DA43                       		add.w	d3,d5
00010728                            
00010728                            loc_FA94:
00010728 E24D                       		lsr.w	#1,d5
0001072A 7600                       		moveq	#0,d3
0001072C 1632 5000                  		move.b	(a2,d5.w),d3
00010730 9612                       		sub.b	(a2),d3
00010732 3A28 000C                  		move.w	$C(a0),d5
00010736 9A43                       		sub.w	d3,d5
00010738 1629 0016                  		move.b	$16(a1),d3
0001073C 4883                       		ext.w	d3
0001073E D443                       		add.w	d3,d2
00010740 3629 000C                  		move.w	$C(a1),d3
00010744 9645                       		sub.w	d5,d3
00010746 5843                       		addq.w	#4,d3
00010748 D642                       		add.w	d2,d3
0001074A 6B00 0000                  		bmi.w	loc_FB92
0001074E 3802                       		move.w	d2,d4
00010750 D844                       		add.w	d4,d4
00010752 B644                       		cmp.w	d4,d3
00010754 6400 0000                  		bcc.w	loc_FB92
00010758 6000 0000                  		bra.w	loc_FB0E
0001075C                            ; ===========================================================================
0001075C                            
0001075C                            loc_FAC8:
0001075C 4A28 0001                  		tst.b	1(a0)
00010760 6A00 0000                  		bpl.w	loc_FB92
00010764                            
00010764                            loc_FAD0:
00010764 43F8 D000                  		lea	($FFFFD000).w,a1
00010768 3029 0008                  		move.w	8(a1),d0
0001076C 9068 0008                  		sub.w	8(a0),d0
00010770 D041                       		add.w	d1,d0
00010772 6B00 0000                  		bmi.w	loc_FB92
00010776 3601                       		move.w	d1,d3
00010778 D643                       		add.w	d3,d3
0001077A B043                       		cmp.w	d3,d0
0001077C 6200 0000                  		bhi.w	loc_FB92
00010780 1629 0016                  		move.b	$16(a1),d3
00010784 4883                       		ext.w	d3
00010786 D443                       		add.w	d3,d2
00010788 3629 000C                  		move.w	$C(a1),d3
0001078C 9668 000C                  		sub.w	$C(a0),d3
00010790 5843                       		addq.w	#4,d3
00010792 D642                       		add.w	d2,d3
00010794 6B00 0000                  		bmi.w	loc_FB92
00010798 3802                       		move.w	d2,d4
0001079A D844                       		add.w	d4,d4
0001079C B644                       		cmp.w	d4,d3
0001079E 6400 0000                  		bcc.w	loc_FB92
000107A2                            
000107A2                            loc_FB0E:
000107A2 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000107A6 6B00 0000                  		bmi.w	loc_FB92
000107AA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000107B0 6400 0000                  		bcc.w	loc_FB92
000107B4 4A78 FE08                  		tst.w	($FFFFFE08).w
000107B8 6600 0000                  		bne.w	loc_FBAC
000107BC 3A00                       		move.w	d0,d5
000107BE B240                       		cmp.w	d0,d1
000107C0 6400                       		bcc.s	loc_FB36
000107C2 D241                       		add.w	d1,d1
000107C4 9041                       		sub.w	d1,d0
000107C6 3A00                       		move.w	d0,d5
000107C8 4445                       		neg.w	d5
000107CA                            
000107CA                            loc_FB36:
000107CA 3203                       		move.w	d3,d1
000107CC B443                       		cmp.w	d3,d2
000107CE 6400                       		bcc.s	loc_FB44
000107D0 5943                       		subq.w	#4,d3
000107D2 9644                       		sub.w	d4,d3
000107D4 3203                       		move.w	d3,d1
000107D6 4441                       		neg.w	d1
000107D8                            
000107D8                            loc_FB44:
000107D8 BA41                       		cmp.w	d1,d5
000107DA 6200 0000                  		bhi.w	loc_FBB0
000107DE 0C41 0004                  		cmpi.w	#4,d1
000107E2 6300                       		bls.s	loc_FB8C
000107E4 4A40                       		tst.w	d0
000107E6 6700                       		beq.s	loc_FB70
000107E8 6B00                       		bmi.s	loc_FB5E
000107EA 4A69 0010                  		tst.w	$10(a1)
000107EE 6B00                       		bmi.s	loc_FB70
000107F0 6000                       		bra.s	loc_FB64
000107F2                            ; ===========================================================================
000107F2                            
000107F2                            loc_FB5E:
000107F2 4A69 0010                  		tst.w	$10(a1)
000107F6 6A00                       		bpl.s	loc_FB70
000107F8                            
000107F8                            loc_FB64:
000107F8 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
000107FE 337C 0000 0010             		move.w	#0,$10(a1)
00010804                            
00010804                            loc_FB70:
00010804 9169 0008                  		sub.w	d0,8(a1)
00010808 0829 0001 0022             		btst	#1,$22(a1)
0001080E 6600                       		bne.s	loc_FB8C
00010810 08E9 0005 0022             		bset	#5,$22(a1)
00010816 08E8 0005 0022             		bset	#5,$22(a0)
0001081C 7801                       		moveq	#1,d4
0001081E 4E75                       		rts	
00010820                            ; ===========================================================================
00010820                            
00010820                            loc_FB8C:
00010820 6100                       		bsr.s	loc_FBA0
00010822 7801                       		moveq	#1,d4
00010824 4E75                       		rts	
00010826                            ; ===========================================================================
00010826                            
00010826                            loc_FB92:
00010826 0828 0005 0022             		btst	#5,$22(a0)
0001082C 6700                       		beq.s	loc_FBAC
0001082E 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
00010834                            
00010834                            loc_FBA0:
00010834 08A8 0005 0022             		bclr	#5,$22(a0)
0001083A 08A9 0005 0022             		bclr	#5,$22(a1)
00010840                            
00010840                            loc_FBAC:
00010840 7800                       		moveq	#0,d4
00010842 4E75                       		rts	
00010844                            ; ===========================================================================
00010844                            
00010844                            loc_FBB0:
00010844 4A43                       		tst.w	d3
00010846 6B00                       		bmi.s	loc_FBBC
00010848 0C43 0010                  		cmpi.w	#$10,d3
0001084C 6500                       		bcs.s	loc_FBEE
0001084E 60D6                       		bra.s	loc_FB92
00010850                            ; ===========================================================================
00010850                            
00010850                            loc_FBBC:
00010850 4A69 0012                  		tst.w	$12(a1)
00010854 6700                       		beq.s	loc_FBD6
00010856 6A00                       		bpl.s	loc_FBD2
00010858 4A43                       		tst.w	d3
0001085A 6A00                       		bpl.s	loc_FBD2
0001085C 9769 000C                  		sub.w	d3,$C(a1)
00010860 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
00010866                            
00010866                            loc_FBD2:
00010866 78FF                       		moveq	#-1,d4
00010868 4E75                       		rts	
0001086A                            ; ===========================================================================
0001086A                            
0001086A                            loc_FBD6:
0001086A 0829 0001 0022             		btst	#1,$22(a1)
00010870 66F4                       		bne.s	loc_FBD2
00010872 2F08                       		move.l	a0,-(sp)
00010874 2049                       		movea.l	a1,a0
00010876 4EB9 0000 0000             		jsr	KillSonic
0001087C 205F                       		movea.l	(sp)+,a0
0001087E 78FF                       		moveq	#-1,d4
00010880 4E75                       		rts	
00010882                            ; ===========================================================================
00010882                            
00010882                            loc_FBEE:
00010882 5943                       		subq.w	#4,d3
00010884 7200                       		moveq	#0,d1
00010886 1228 0019                  		move.b	$19(a0),d1
0001088A 3401                       		move.w	d1,d2
0001088C D442                       		add.w	d2,d2
0001088E D269 0008                  		add.w	8(a1),d1
00010892 9268 0008                  		sub.w	8(a0),d1
00010896 6B00                       		bmi.s	loc_FC28
00010898 B242                       		cmp.w	d2,d1
0001089A 6400                       		bcc.s	loc_FC28
0001089C 4A69 0012                  		tst.w	$12(a1)
000108A0 6B00                       		bmi.s	loc_FC28
000108A2 9769 000C                  		sub.w	d3,$C(a1)
000108A6 5369 000C                  		subq.w	#1,$C(a1)
000108AA 6100                       		bsr.s	sub_FC2C
000108AC 117C 0002 0025             		move.b	#2,$25(a0)
000108B2 08E8 0003 0022             		bset	#3,$22(a0)
000108B8 78FF                       		moveq	#-1,d4
000108BA 4E75                       		rts	
000108BC                            ; ===========================================================================
000108BC                            
000108BC                            loc_FC28:
000108BC 7800                       		moveq	#0,d4
000108BE 4E75                       		rts	
000108C0                            ; End of function SolidObject
000108C0                            
000108C0                            
000108C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000108C0                            
000108C0                            
000108C0                            sub_FC2C:				; XREF: SolidObject
000108C0 0829 0003 0022             		btst	#3,$22(a1)
000108C6 6700                       		beq.s	loc_FC4E
000108C8 7000                       		moveq	#0,d0
000108CA 1029 003D                  		move.b	$3D(a1),d0
000108CE ED48                       		lsl.w	#6,d0
000108D0 0680 00FF D000             		addi.l	#$FFD000,d0
000108D6 2440                       		movea.l	d0,a2
000108D8 08AA 0003 0022             		bclr	#3,$22(a2)
000108DE 422A 0025                  		clr.b	$25(a2)
000108E2                            
000108E2                            loc_FC4E:
000108E2 3008                       		move.w	a0,d0
000108E4 0440 D000                  		subi.w	#-$3000,d0
000108E8 EC48                       		lsr.w	#6,d0
000108EA 0240 007F                  		andi.w	#$7F,d0
000108EE 1340 003D                  		move.b	d0,$3D(a1)
000108F2 137C 0000 0026             		move.b	#0,$26(a1)
000108F8 337C 0000 0012             		move.w	#0,$12(a1)
000108FE 3369 0010 0014             		move.w	$10(a1),$14(a1)
00010904 0829 0001 0022             		btst	#1,$22(a1)
0001090A 6700                       		beq.s	loc_FC84
0001090C 2F08                       		move.l	a0,-(sp)
0001090E 2049                       		movea.l	a1,a0
00010910 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00010916 205F                       		movea.l	(sp)+,a0
00010918                            
00010918                            loc_FC84:
00010918 08E9 0003 0022             		bset	#3,$22(a1)
0001091E 08E8 0003 0022             		bset	#3,$22(a0)
00010924 4E75                       		rts	
00010926                            ; End of function sub_FC2C
00010926                            
00010926                            ; ===========================================================================
00010926                            ; ---------------------------------------------------------------------------
00010926                            ; Object 51 - smashable	green block (MZ)
00010926                            ; ---------------------------------------------------------------------------
00010926                            
00010926                            Obj51:					; XREF: Obj_Index
00010926 7000                       		moveq	#0,d0
00010928 1028 0024                  		move.b	$24(a0),d0
0001092C 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
00010930 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
00010934 6000 FA0E                  		bra.w	MarkObjGone
00010938                            ; ===========================================================================
00010938 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
0001093A 0000                       		dc.w Obj51_Solid-Obj51_Index
0001093C 0000                       		dc.w Obj51_Display-Obj51_Index
0001093E                            ; ===========================================================================
0001093E                            
0001093E                            Obj51_Main:				; XREF: Obj51_Index
0001093E 5428 0024                  		addq.b	#2,$24(a0)
00010942 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
0001094A 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010950 117C 0004 0001             		move.b	#4,1(a0)
00010956 117C 0010 0019             		move.b	#$10,$19(a0)
0001095C 117C 0004 0018             		move.b	#4,$18(a0)
00010962 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00010968                            
00010968                            Obj51_Solid:				; XREF: Obj51_Index
00010968 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
0001096E 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
00010974 323C 001B                  		move.w	#$1B,d1
00010978 343C 0010                  		move.w	#$10,d2
0001097C 363C 0011                  		move.w	#$11,d3
00010980 3828 0008                  		move.w	8(a0),d4
00010984 6100 FCE6                  		bsr.w	SolidObject
00010988 0828 0003 0022             		btst	#3,$22(a0)
0001098E 6600                       		bne.s	Obj51_Smash
00010990                            
00010990                            locret_FCFC:
00010990 4E75                       		rts	
00010992                            ; ===========================================================================
00010992                            
00010992                            Obj51_Smash:				; XREF: Obj51_Solid
00010992 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
00010998 66F6                       		bne.s	locret_FCFC	; if not, branch
0001099A 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
000109A0 08E9 0002 0022             		bset	#2,$22(a1)
000109A6 137C 000E 0016             		move.b	#$E,$16(a1)
000109AC 137C 0007 0017             		move.b	#7,$17(a1)
000109B2 137C 0002 001C             		move.b	#2,$1C(a1)
000109B8 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
000109BE 08E9 0001 0022             		bset	#1,$22(a1)
000109C4 08A9 0003 0022             		bclr	#3,$22(a1)
000109CA 137C 0002 0024             		move.b	#2,$24(a1)
000109D0 08A8 0003 0022             		bclr	#3,$22(a0)
000109D6 4228 0025                  		clr.b	$25(a0)
000109DA 117C 0001 001A             		move.b	#1,$1A(a0)
000109E0 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
000109E6 7203                       		moveq	#3,d1		; set number of	fragments to 4
000109E8 343C 0038                  		move.w	#$38,d2
000109EC 6100 D458                  		bsr.w	SmashObject
000109F0 6100 DD36                  		bsr.w	SingleObjLoad
000109F4 6600                       		bne.s	Obj51_Display
000109F6 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000109FA 3368 0008 0008             		move.w	8(a0),8(a1)
00010A00 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010A06 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
00010A0A 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
00010A0E 0C42 0006                  		cmpi.w	#6,d2
00010A12 6500                       		bcs.s	Obj51_Bonus
00010A14 7406                       		moveq	#6,d2
00010A16                            
00010A16                            Obj51_Bonus:
00010A16 7000                       		moveq	#0,d0
00010A18 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
00010A1C 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
00010A22 6500                       		bcs.s	loc_FD98	; if not, branch
00010A24 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00010A28 740A                       		moveq	#10,d2
00010A2A                            
00010A2A                            loc_FD98:
00010A2A 4EB9 0000 0000             		jsr	AddPoints
00010A30 E24A                       		lsr.w	#1,d2
00010A32 1342 001A                  		move.b	d2,$1A(a1)
00010A36                            
00010A36                            Obj51_Display:				; XREF: Obj51_Index
00010A36 6100 D7CE                  		bsr.w	ObjectFall
00010A3A 6100 D866                  		bsr.w	DisplaySprite
00010A3E 4A28 0001                  		tst.b	1(a0)
00010A42 6A00 D89A                  		bpl.w	DeleteObject
00010A46 4E75                       		rts	
00010A48                            ; ===========================================================================
00010A48 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
00010A4C FF00 FF00                  		dc.w $FF00, $FF00
00010A50 0200 FE00                  		dc.w $200, $FE00
00010A54 0100 FF00                  		dc.w $100, $FF00
00010A58                            
00010A58 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
00010A60                            ; ---------------------------------------------------------------------------
00010A60                            ; Sprite mappings - smashable green block (MZ)
00010A60                            ; ---------------------------------------------------------------------------
00010A60                            Map_obj51:
00010A60                            	include "_maps\obj51.asm"
00010A60                            ; ---------------------------------------------------------------------------
00010A60                            ; Sprite mappings - smashable green block (MZ)
00010A60                            ; ---------------------------------------------------------------------------
00010A60 0000                       		dc.w byte_FDD8-Map_obj51
00010A62 0000                       		dc.w byte_FDE3-Map_obj51
00010A64 02                         byte_FDD8:	dc.b 2
00010A65 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
00010A6A 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
00010A6F 04                         byte_FDE3:	dc.b 4
00010A70 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
00010A75 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00010A7A F005 8000 00               		dc.b $F0, 5, $80, 0, 0
00010A7F 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00010A84                            		even
00010A84                            		even
00010A84                            
00010A84                            ; ===========================================================================
00010A84                            ; ---------------------------------------------------------------------------
00010A84                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00010A84                            ; ---------------------------------------------------------------------------
00010A84                            
00010A84                            Obj52:					; XREF: Obj_Index
00010A84 7000                       		moveq	#0,d0
00010A86 1028 0024                  		move.b	$24(a0),d0
00010A8A 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
00010A8E 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
00010A92                            ; ===========================================================================
00010A92 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
00010A94 0000                       		dc.w Obj52_Platform-Obj52_Index
00010A96 0000                       		dc.w Obj52_StandOn-Obj52_Index
00010A98                            
00010A98 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
00010A9A 2001                       		dc.b $20, 1
00010A9C 2002                       		dc.b $20, 2
00010A9E 4003                       		dc.b $40, 3
00010AA0 3004                       		dc.b $30, 4
00010AA2                            ; ===========================================================================
00010AA2                            
00010AA2                            Obj52_Main:				; XREF: Obj52_Index
00010AA2 5428 0024                  		addq.b	#2,$24(a0)
00010AA6 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
00010AAE 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010AB4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010ABA 6600                       		bne.s	loc_FE44
00010ABC 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00010AC4 317C 43BC 0002             		move.w	#$43BC,2(a0)
00010ACA 117C 0007 0016             		move.b	#7,$16(a0)
00010AD0                            
00010AD0                            loc_FE44:
00010AD0 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00010AD6 6600                       		bne.s	loc_FE60
00010AD8 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
00010ADE 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
00010AE4 6700                       		beq.s	loc_FE60	; if yes, branch
00010AE6 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
00010AEC                            
00010AEC                            loc_FE60:
00010AEC 117C 0004 0001             		move.b	#4,1(a0)
00010AF2 7000                       		moveq	#0,d0
00010AF4 1028 0028                  		move.b	$28(a0),d0
00010AF8 E648                       		lsr.w	#3,d0
00010AFA 0240 001E                  		andi.w	#$1E,d0
00010AFE 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
00010B02 115A 0019                  		move.b	(a2)+,$19(a0)
00010B06 115A 001A                  		move.b	(a2)+,$1A(a0)
00010B0A 117C 0004 0018             		move.b	#4,$18(a0)
00010B10 3168 0008 0030             		move.w	8(a0),$30(a0)
00010B16 3168 000C 0032             		move.w	$C(a0),$32(a0)
00010B1C 0228 000F 0028             		andi.b	#$F,$28(a0)
00010B22                            
00010B22                            Obj52_Platform:				; XREF: Obj52_Index
00010B22 6100 0000                  		bsr.w	Obj52_Move
00010B26 7200                       		moveq	#0,d1
00010B28 1228 0019                  		move.b	$19(a0),d1
00010B2C 4EB9 0000 7EC8             		jsr	(PlatformObject).l
00010B32 6000                       		bra.s	Obj52_ChkDel
00010B34                            ; ===========================================================================
00010B34                            
00010B34                            Obj52_StandOn:				; XREF: Obj52_Index
00010B34 7200                       		moveq	#0,d1
00010B36 1228 0019                  		move.b	$19(a0),d1
00010B3A 4EB9 0000 803C             		jsr	(ExitPlatform).l
00010B40 3F28 0008                  		move.w	8(a0),-(sp)
00010B44 6100 0000                  		bsr.w	Obj52_Move
00010B48 341F                       		move.w	(sp)+,d2
00010B4A 4EB9 0000 85A6             		jsr	(MvSonicOnPtfm2).l
00010B50                            
00010B50                            Obj52_ChkDel:				; XREF: Obj52_Platform
00010B50 3028 0030                  		move.w	$30(a0),d0
00010B54 0240 FF80                  		andi.w	#$FF80,d0
00010B58 3238 F700                  		move.w	($FFFFF700).w,d1
00010B5C 0441 0080                  		subi.w	#$80,d1
00010B60 0241 FF80                  		andi.w	#$FF80,d1
00010B64 9041                       		sub.w	d1,d0
00010B66 0C40 0280                  		cmpi.w	#$280,d0
00010B6A 6200 D772                  		bhi.w	DeleteObject
00010B6E 6000 D732                  		bra.w	DisplaySprite
00010B72                            ; ===========================================================================
00010B72                            
00010B72                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
00010B72 7000                       		moveq	#0,d0
00010B74 1028 0028                  		move.b	$28(a0),d0
00010B78 0240 000F                  		andi.w	#$F,d0
00010B7C D040                       		add.w	d0,d0
00010B7E 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
00010B82 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
00010B86                            ; ===========================================================================
00010B86 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
00010B8A 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
00010B8E 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
00010B92 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00010B96 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00010B9A 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00010B9C                            ; ===========================================================================
00010B9C                            
00010B9C                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00010B9C 4E75                       		rts	
00010B9E                            ; ===========================================================================
00010B9E                            
00010B9E                            Obj52_Type01:				; XREF: Obj52_TypeIndex
00010B9E 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010BA2 323C 0060                  		move.w	#$60,d1
00010BA6 0828 0000 0022             		btst	#0,$22(a0)
00010BAC 6700                       		beq.s	loc_FF26
00010BAE 4440                       		neg.w	d0
00010BB0 D041                       		add.w	d1,d0
00010BB2                            
00010BB2                            loc_FF26:
00010BB2 3228 0030                  		move.w	$30(a0),d1
00010BB6 9240                       		sub.w	d0,d1
00010BB8 3141 0008                  		move.w	d1,8(a0)
00010BBC 4E75                       		rts	
00010BBE                            ; ===========================================================================
00010BBE                            
00010BBE                            Obj52_Type02:				; XREF: Obj52_TypeIndex
00010BBE 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00010BC4 6600                       		bne.s	Obj52_02_Wait
00010BC6 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00010BCA                            
00010BCA                            Obj52_02_Wait:
00010BCA 4E75                       		rts	
00010BCC                            ; ===========================================================================
00010BCC                            
00010BCC                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00010BCC 7600                       		moveq	#0,d3
00010BCE 1628 0019                  		move.b	$19(a0),d3
00010BD2 6100 0000                  		bsr.w	ObjHitWallRight
00010BD6 4A41                       		tst.w	d1		; has the platform hit a wall?
00010BD8 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00010BDA 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010BDE 3168 0008 0030             		move.w	8(a0),$30(a0)
00010BE4 4E75                       		rts	
00010BE6                            ; ===========================================================================
00010BE6                            
00010BE6                            Obj52_03_End:
00010BE6 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
00010BEA 4E75                       		rts	
00010BEC                            ; ===========================================================================
00010BEC                            
00010BEC                            Obj52_Type05:				; XREF: Obj52_TypeIndex
00010BEC 7600                       		moveq	#0,d3
00010BEE 1628 0019                  		move.b	$19(a0),d3
00010BF2 6100 0000                  		bsr.w	ObjHitWallRight
00010BF6 4A41                       		tst.w	d1		; has the platform hit a wall?
00010BF8 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
00010BFA 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010BFE 3168 0008 0030             		move.w	8(a0),$30(a0)
00010C04 4E75                       		rts	
00010C06                            ; ===========================================================================
00010C06                            
00010C06                            Obj52_05_End:
00010C06 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
00010C0A 4E75                       		rts	
00010C0C                            ; ===========================================================================
00010C0C                            
00010C0C                            Obj52_Type06:				; XREF: Obj52_TypeIndex
00010C0C 7218                       		moveq	#$18,d1
00010C0E 6100 D5F8                  		bsr.w	ObjectFallCustom
00010C12 6100 0000                  		bsr.w	ObjHitFloor
00010C16 4A41                       		tst.w	d1		; has platform hit the floor?
00010C18 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00010C1C D368 000C                  		add.w	d1,$C(a0)
00010C20 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00010C24 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
00010C28                            
00010C28                            locret_FFA0:
00010C28 4E75                       		rts	
00010C2A                            ; ===========================================================================
00010C2A                            
00010C2A                            Obj52_Type07:				; XREF: Obj52_TypeIndex
00010C2A 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
00010C2E 6700                       		beq.s	Obj52_07_ChkDel
00010C30 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
00010C34                            
00010C34                            Obj52_07_ChkDel:
00010C34 588F                       		addq.l	#4,sp
00010C36 3028 0030                  		move.w	$30(a0),d0
00010C3A 0240 FF80                  		andi.w	#$FF80,d0
00010C3E 3238 F700                  		move.w	($FFFFF700).w,d1
00010C42 0441 0080                  		subi.w	#$80,d1
00010C46 0241 FF80                  		andi.w	#$FF80,d1
00010C4A 9041                       		sub.w	d1,d0
00010C4C 0C40 0280                  		cmpi.w	#$280,d0
00010C50 6200 D68C                  		bhi.w	DeleteObject
00010C54 4E75                       		rts	
00010C56                            ; ===========================================================================
00010C56                            
00010C56                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00010C56 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010C5A 323C 0080                  		move.w	#$80,d1
00010C5E 0828 0000 0022             		btst	#0,$22(a0)
00010C64 6700                       		beq.s	loc_FFE2
00010C66 4440                       		neg.w	d0
00010C68 D041                       		add.w	d1,d0
00010C6A                            
00010C6A                            loc_FFE2:
00010C6A 3228 0032                  		move.w	$32(a0),d1
00010C6E 9240                       		sub.w	d0,d1
00010C70 3141 000C                  		move.w	d1,$C(a0)
00010C74 4E75                       		rts	
00010C76                            ; ===========================================================================
00010C76                            
00010C76                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00010C76 7600                       		moveq	#0,d3
00010C78 1628 0019                  		move.b	$19(a0),d3
00010C7C D643                       		add.w	d3,d3
00010C7E 7208                       		moveq	#8,d1
00010C80 0828 0000 0022             		btst	#0,$22(a0)
00010C86 6700                       		beq.s	loc_10004
00010C88 4441                       		neg.w	d1
00010C8A 4443                       		neg.w	d3
00010C8C                            
00010C8C                            loc_10004:
00010C8C 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00010C90 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00010C92 3028 0008                  		move.w	8(a0),d0
00010C96 9068 0030                  		sub.w	$30(a0),d0
00010C9A B043                       		cmp.w	d3,d0
00010C9C 6700                       		beq.s	Obj52_0A_Wait
00010C9E D368 0008                  		add.w	d1,8(a0)	; move platform
00010CA2 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00010CA8 4E75                       		rts	
00010CAA                            ; ===========================================================================
00010CAA                            
00010CAA                            Obj52_0A_Wait:
00010CAA 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00010CAE 6600                       		bne.s	locret_1002E	; if time remains, branch
00010CB0 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00010CB6                            
00010CB6                            locret_1002E:
00010CB6 4E75                       		rts	
00010CB8                            ; ===========================================================================
00010CB8                            
00010CB8                            Obj52_0A_Back:
00010CB8 3028 0008                  		move.w	8(a0),d0
00010CBC 9068 0030                  		sub.w	$30(a0),d0
00010CC0 6700                       		beq.s	Obj52_0A_Reset
00010CC2 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00010CC6 4E75                       		rts	
00010CC8                            ; ===========================================================================
00010CC8                            
00010CC8                            Obj52_0A_Reset:
00010CC8 4268 0036                  		clr.w	$36(a0)
00010CCC 5328 0028                  		subq.b	#1,$28(a0)
00010CD0 4E75                       		rts	
00010CD2                            ; ===========================================================================
00010CD2                            ; ---------------------------------------------------------------------------
00010CD2                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010CD2                            ; ---------------------------------------------------------------------------
00010CD2                            Map_obj52:
00010CD2                            	include "_maps\obj52mz.asm"
00010CD2                            ; ---------------------------------------------------------------------------
00010CD2                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010CD2                            ; ---------------------------------------------------------------------------
00010CD2 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00010CD6 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00010CDA 0000                       		dc.w byte_1008F-Map_obj52
00010CDC 01                         byte_10054:	dc.b 1
00010CDD F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010CE2 02                         byte_1005A:	dc.b 2
00010CE3 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00010CE8 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00010CED 04                         byte_10065:	dc.b 4
00010CEE F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00010CF3 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00010CF8 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00010CFD 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00010D02 04                         byte_1007A:	dc.b 4
00010D03 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00010D08 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00010D0D F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00010D12 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00010D17 03                         byte_1008F:	dc.b 3
00010D18 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00010D1D F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010D22 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00010D28 00                         		even
00010D28 00                         		even
00010D28                            
00010D28                            ; ---------------------------------------------------------------------------
00010D28                            ; Sprite mappings - moving block (LZ)
00010D28                            ; ---------------------------------------------------------------------------
00010D28                            Map_obj52a:
00010D28                            	include "_maps\obj52lz.asm"
00010D28                            ; ---------------------------------------------------------------------------
00010D28                            ; Sprite mappings - moving block (LZ)
00010D28                            ; ---------------------------------------------------------------------------
00010D28 0000                       		dc.w byte_100A2-Map_obj52a
00010D2A 01                         byte_100A2:	dc.b 1
00010D2B F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00010D30                            		even
00010D30                            		even
00010D30                            
00010D30                            ; ===========================================================================
00010D30                            ; ---------------------------------------------------------------------------
00010D30                            ; Object 55 - Basaran enemy (MZ)
00010D30                            ; ---------------------------------------------------------------------------
00010D30                            
00010D30                            Obj55:					; XREF: Obj_Index
00010D30 7000                       		moveq	#0,d0
00010D32 1028 0024                  		move.b	$24(a0),d0
00010D36 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00010D3A 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00010D3E                            ; ===========================================================================
00010D3E 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00010D40 0000                       		dc.w Obj55_Action-Obj55_Index
00010D42                            ; ===========================================================================
00010D42                            
00010D42                            Obj55_Main:				; XREF: Obj55_Index
00010D42 5428 0024                  		addq.b	#2,$24(a0)
00010D46 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00010D4E 317C 84B8 0002             		move.w	#$84B8,2(a0)
00010D54 117C 0004 0001             		move.b	#4,1(a0)
00010D5A 117C 000C 0016             		move.b	#$C,$16(a0)
00010D60 117C 0002 0018             		move.b	#2,$18(a0)
00010D66 117C 000B 0020             		move.b	#$B,$20(a0)
00010D6C 117C 0010 0019             		move.b	#$10,$19(a0)
00010D72                            
00010D72                            Obj55_Action:				; XREF: Obj55_Index
00010D72 7000                       		moveq	#0,d0
00010D74 1028 0025                  		move.b	$25(a0),d0
00010D78 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00010D7C 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00010D80 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00010D86 6100 A572                  		bsr.w	AnimateSprite
00010D8A 6000 F5B8                  		bra.w	MarkObjGone
00010D8E                            ; ===========================================================================
00010D8E 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00010D90 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00010D92 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00010D94 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00010D96                            ; ===========================================================================
00010D96                            
00010D96                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00010D96 343C 0080                  		move.w	#$80,d2
00010D9A 6100 0000                  		bsr.w	Obj55_ChkSonic
00010D9E 6400                       		bcc.s	Obj55_NoDrop
00010DA0 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010DA4 3140 0036                  		move.w	d0,$36(a0)
00010DA8 9068 000C                  		sub.w	$C(a0),d0
00010DAC 6500                       		bcs.s	Obj55_NoDrop
00010DAE 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00010DB2 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00010DB4 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00010DB8 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00010DBA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010DBE D007                       		add.b	d7,d0
00010DC0 0200 0007                  		andi.b	#7,d0
00010DC4 6600                       		bne.s	Obj55_NoDrop
00010DC6 117C 0001 001C             		move.b	#1,$1C(a0)
00010DCC 5428 0025                  		addq.b	#2,$25(a0)
00010DD0                            
00010DD0                            Obj55_NoDrop:
00010DD0 4E75                       		rts	
00010DD2                            ; ===========================================================================
00010DD2                            
00010DD2                            Obj55_DropFly:				; XREF: Obj55_Index2
00010DD2 7218                       		moveq	#$18,d1
00010DD4 6100 D432                  		bsr.w	ObjectFallCustom
00010DD8 343C 0080                  		move.w	#$80,d2
00010DDC 6100 0000                  		bsr.w	Obj55_ChkSonic
00010DE0 3028 0036                  		move.w	$36(a0),d0
00010DE4 9068 000C                  		sub.w	$C(a0),d0
00010DE8 6500                       		bcs.s	Obj55_ChkDel
00010DEA 0C40 0010                  		cmpi.w	#$10,d0
00010DEE 6400                       		bcc.s	locret_10180
00010DF0 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00010DF4 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00010DFA 117C 0002 001C             		move.b	#2,$1C(a0)
00010E00 5428 0025                  		addq.b	#2,$25(a0)
00010E04                            
00010E04                            locret_10180:
00010E04 4E75                       		rts	
00010E06                            ; ===========================================================================
00010E06                            
00010E06                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00010E06 4A28 0001                  		tst.b	1(a0)
00010E0A 6A00 D4D2                  		bpl.w	DeleteObject
00010E0E 4E75                       		rts	
00010E10                            ; ===========================================================================
00010E10                            
00010E10                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00010E10 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010E14 0200 000F                  		andi.b	#$F,d0
00010E18 6600                       		bne.s	loc_101A0
00010E1A 303C 00C0                  		move.w	#$C0,d0
00010E1E 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play flapping sound
00010E24                            
00010E24                            loc_101A0:
00010E24 6100 D442                  		bsr.w	SpeedToPos
00010E28 3038 D008                  		move.w	($FFFFD008).w,d0
00010E2C 9068 0008                  		sub.w	8(a0),d0
00010E30 6400                       		bcc.s	loc_101B0
00010E32 4440                       		neg.w	d0
00010E34                            
00010E34                            loc_101B0:
00010E34 0C40 0080                  		cmpi.w	#$80,d0
00010E38 6500                       		bcs.s	locret_101C6
00010E3A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010E3E D007                       		add.b	d7,d0
00010E40 0200 0007                  		andi.b	#7,d0
00010E44 6600                       		bne.s	locret_101C6
00010E46 5428 0025                  		addq.b	#2,$25(a0)
00010E4A                            
00010E4A                            locret_101C6:
00010E4A 4E75                       		rts	
00010E4C                            ; ===========================================================================
00010E4C                            
00010E4C                            Obj55_FlyUp:				; XREF: Obj55_Index2
00010E4C 72E8                       		moveq	#-$18,d1
00010E4E 4EBA D3B8                  		jsr	ObjectFallCustom
00010E52 6100 0000                  		bsr.w	ObjHitCeiling
00010E56 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00010E58 6A00                       		bpl.s	locret_101F4	; if not, branch
00010E5A 9368 000C                  		sub.w	d1,$C(a0)
00010E5E 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00010E64 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00010E68 4268 0012                  		clr.w	$12(a0)
00010E6C 4228 001C                  		clr.b	$1C(a0)
00010E70 4228 0025                  		clr.b	$25(a0)
00010E74                            
00010E74                            locret_101F4:
00010E74 4E75                       		rts	
00010E76                            ; ===========================================================================
00010E76                            
00010E76                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00010E76 323C 0100                  		move.w	#$100,d1
00010E7A 08E8 0000 0022             		bset	#0,$22(a0)
00010E80 3038 D008                  		move.w	($FFFFD008).w,d0
00010E84 9068 0008                  		sub.w	8(a0),d0
00010E88 6400                       		bcc.s	loc_10214
00010E8A 4440                       		neg.w	d0
00010E8C 4441                       		neg.w	d1
00010E8E 08A8 0000 0022             		bclr	#0,$22(a0)
00010E94                            
00010E94                            loc_10214:
00010E94 B042                       		cmp.w	d2,d0
00010E96 4E75                       		rts
00010E98                            ; ===========================================================================
00010E98                            Ani_obj55:
00010E98                            	include "_anim\obj55.asm"
00010E98                            ; ---------------------------------------------------------------------------
00010E98                            ; Animation script - Basaran enemy
00010E98                            ; ---------------------------------------------------------------------------
00010E98 0000                       		dc.w byte_10230-Ani_obj55
00010E9A 0000                       		dc.w byte_10234-Ani_obj55
00010E9C 0000                       		dc.w byte_10238-Ani_obj55
00010E9E 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00010EA2 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00010EA6 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00010EAC                            		even
00010EAC                            		even
00010EAC                            
00010EAC                            ; ---------------------------------------------------------------------------
00010EAC                            ; Sprite mappings - Basaran enemy (MZ)
00010EAC                            ; ---------------------------------------------------------------------------
00010EAC                            Map_obj55:
00010EAC                            	include "_maps\obj55.asm"
00010EAC                            ; ---------------------------------------------------------------------------
00010EAC                            ; Sprite mappings - Basaran enemy (MZ)
00010EAC                            ; ---------------------------------------------------------------------------
00010EAC 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00010EB0 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00010EB4 01                         byte_10246:	dc.b 1
00010EB5 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00010EBA 03                         byte_1024C:	dc.b 3
00010EBB F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00010EC0 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00010EC5 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00010ECA 04                         byte_1025C:	dc.b 4
00010ECB F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00010ED0 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00010ED5 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00010EDA 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00010EDF 04                         byte_10271:	dc.b 4
00010EE0 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00010EE5 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00010EEA 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00010EEF FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00010EF4                            		even
00010EF4                            		even
00010EF4                            
00010EF4                            ; ===========================================================================
00010EF4                            ; ---------------------------------------------------------------------------
00010EF4                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00010EF4                            ; ---------------------------------------------------------------------------
00010EF4                            
00010EF4                            Obj56:					; XREF: Obj_Index
00010EF4 7000                       		moveq	#0,d0
00010EF6 1028 0024                  		move.b	$24(a0),d0
00010EFA 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010EFE 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010F02                            ; ===========================================================================
00010F02 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00010F04 0000                       		dc.w Obj56_Action-Obj56_Index
00010F06                            
00010F06 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00010F08 2020                       		dc.b  $20, $20
00010F0A 1020                       		dc.b  $10, $20
00010F0C 201A                       		dc.b  $20, $1A
00010F0E 1027                       		dc.b  $10, $27
00010F10 1010                       		dc.b  $10, $10
00010F12 0820                       		dc.b	8, $20
00010F14 4010                       		dc.b  $40, $10
00010F16                            ; ===========================================================================
00010F16                            
00010F16                            Obj56_Main:				; XREF: Obj56_Index
00010F16 5428 0024                  		addq.b	#2,$24(a0)
00010F1A 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010F22 317C 4000 0002             		move.w	#$4000,2(a0)
00010F28 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010F2E 6600                       		bne.s	loc_102C8
00010F30 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010F36                            
00010F36                            loc_102C8:
00010F36 117C 0004 0001             		move.b	#4,1(a0)
00010F3C 117C 0003 0018             		move.b	#3,$18(a0)
00010F42 7000                       		moveq	#0,d0
00010F44 1028 0028                  		move.b	$28(a0),d0
00010F48 E648                       		lsr.w	#3,d0
00010F4A 0240 000E                  		andi.w	#$E,d0
00010F4E 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010F52 115A 0019                  		move.b	(a2)+,$19(a0)
00010F56 1152 0016                  		move.b	(a2),$16(a0)
00010F5A E248                       		lsr.w	#1,d0
00010F5C 1140 001A                  		move.b	d0,$1A(a0)
00010F60 3168 0008 0034             		move.w	8(a0),$34(a0)
00010F66 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010F6C 7000                       		moveq	#0,d0
00010F6E 1012                       		move.b	(a2),d0
00010F70 D040                       		add.w	d0,d0
00010F72 3140 003A                  		move.w	d0,$3A(a0)
00010F76 7000                       		moveq	#0,d0
00010F78 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010F7E 6700                       		beq.s	loc_10332
00010F80 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010F84 0240 000F                  		andi.w	#$F,d0
00010F88 5140                       		subq.w	#8,d0
00010F8A 6500                       		bcs.s	loc_10332
00010F8C E548                       		lsl.w	#2,d0
00010F8E 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010F92 45F2 0000                  		lea	(a2,d0.w),a2
00010F96 4A52                       		tst.w	(a2)
00010F98 6A00                       		bpl.s	loc_10332
00010F9A 0868 0000 0022             		bchg	#0,$22(a0)
00010FA0                            
00010FA0                            loc_10332:
00010FA0 1028 0028                  		move.b	$28(a0),d0
00010FA4 6A00                       		bpl.s	Obj56_Action
00010FA6 0200 000F                  		andi.b	#$F,d0
00010FAA 1140 003C                  		move.b	d0,$3C(a0)
00010FAE 117C 0005 0028             		move.b	#5,$28(a0)
00010FB4 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00010FBA 6600                       		bne.s	Obj56_ChkGone
00010FBC 117C 000C 0028             		move.b	#$C,$28(a0)
00010FC2 317C 0080 003A             		move.w	#$80,$3A(a0)
00010FC8                            
00010FC8                            Obj56_ChkGone:
00010FC8 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010FCC 7000                       		moveq	#0,d0
00010FCE 1028 0023                  		move.b	$23(a0),d0
00010FD2 6700                       		beq.s	Obj56_Action
00010FD4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010FDA 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010FE0 6700                       		beq.s	Obj56_Action
00010FE2 5228 0028                  		addq.b	#1,$28(a0)
00010FE6 4268 003A                  		clr.w	$3A(a0)
00010FEA                            
00010FEA                            Obj56_Action:				; XREF: Obj56_Index
00010FEA 3F28 0008                  		move.w	8(a0),-(sp)
00010FEE 7000                       		moveq	#0,d0
00010FF0 1028 0028                  		move.b	$28(a0),d0	; get object type
00010FF4 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010FF8 D040                       		add.w	d0,d0
00010FFA 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010FFE 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00011002 381F                       		move.w	(sp)+,d4
00011004 4A28 0001                  		tst.b	1(a0)
00011008 6A00                       		bpl.s	Obj56_ChkDel
0001100A 7200                       		moveq	#0,d1
0001100C 1228 0019                  		move.b	$19(a0),d1
00011010 0641 000B                  		addi.w	#$B,d1
00011014 7400                       		moveq	#0,d2
00011016 1428 0016                  		move.b	$16(a0),d2
0001101A 3602                       		move.w	d2,d3
0001101C 5243                       		addq.w	#1,d3
0001101E 6100 F64C                  		bsr.w	SolidObject
00011022                            
00011022                            Obj56_ChkDel:
00011022 3028 0034                  		move.w	$34(a0),d0
00011026 0240 FF80                  		andi.w	#$FF80,d0
0001102A 3238 F700                  		move.w	($FFFFF700).w,d1
0001102E 0441 0080                  		subi.w	#$80,d1
00011032 0241 FF80                  		andi.w	#$FF80,d1
00011036 9041                       		sub.w	d1,d0
00011038 0C40 0280                  		cmpi.w	#$280,d0
0001103C 6200 D2A0                  		bhi.w	DeleteObject
00011040 6000 D260                  		bra.w	DisplaySprite
00011044                            ; ===========================================================================
00011044 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00011048 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
0001104C 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00011050 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00011054 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00011058 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
0001105C 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00011060                            ; ===========================================================================
00011060                            
00011060                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00011060 4E75                       		rts	
00011062                            ; ===========================================================================
00011062                            
00011062                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00011062 323C 0040                  		move.w	#$40,d1
00011066 7000                       		moveq	#0,d0
00011068 1038 FE68                  		move.b	($FFFFFE68).w,d0
0001106C 6000                       		bra.s	Obj56_Move_LR
0001106E                            ; ===========================================================================
0001106E                            
0001106E                            Obj56_Type02:				; XREF: Obj56_TypeIndex
0001106E 323C 0080                  		move.w	#$80,d1
00011072 7000                       		moveq	#0,d0
00011074 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011078                            
00011078                            Obj56_Move_LR:
00011078 0828 0000 0022             		btst	#0,$22(a0)
0001107E 6700                       		beq.s	loc_10416
00011080 4440                       		neg.w	d0
00011082 D041                       		add.w	d1,d0
00011084                            
00011084                            loc_10416:
00011084 3228 0034                  		move.w	$34(a0),d1
00011088 9240                       		sub.w	d0,d1
0001108A 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
0001108E 4E75                       		rts	
00011090                            ; ===========================================================================
00011090                            
00011090                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00011090 323C 0040                  		move.w	#$40,d1
00011094 7000                       		moveq	#0,d0
00011096 1038 FE68                  		move.b	($FFFFFE68).w,d0
0001109A 6000                       		bra.s	Obj56_Move_UD
0001109C                            ; ===========================================================================
0001109C                            
0001109C                            Obj56_Type04:				; XREF: Obj56_TypeIndex
0001109C 323C 0080                  		move.w	#$80,d1
000110A0 7000                       		moveq	#0,d0
000110A2 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000110A6                            
000110A6                            Obj56_Move_UD:
000110A6 0828 0000 0022             		btst	#0,$22(a0)
000110AC 6700                       		beq.s	loc_10444
000110AE 4440                       		neg.w	d0
000110B0 D041                       		add.w	d1,d0
000110B2                            
000110B2                            loc_10444:
000110B2 3228 0030                  		move.w	$30(a0),d1
000110B6 9240                       		sub.w	d0,d1
000110B8 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
000110BC 4E75                       		rts	
000110BE                            ; ===========================================================================
000110BE                            
000110BE                            Obj56_Type05:				; XREF: Obj56_TypeIndex
000110BE 4A28 0038                  		tst.b	$38(a0)
000110C2 6600                       		bne.s	loc_104A4
000110C4 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
000110CA 6600                       		bne.s	loc_1047A	; if not, branch
000110CC 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
000110D2 6600                       		bne.s	loc_1047A
000110D4 4238 F7C9                  		clr.b	($FFFFF7C9).w
000110D8 3038 D008                  		move.w	($FFFFD008).w,d0
000110DC B068 0008                  		cmp.w	8(a0),d0
000110E0 6400                       		bcc.s	loc_1047A
000110E2 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
000110E8                            
000110E8                            loc_1047A:
000110E8 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000110EC 7000                       		moveq	#0,d0
000110EE 1028 003C                  		move.b	$3C(a0),d0
000110F2 0832 0000 0000             		btst	#0,(a2,d0.w)
000110F8 6700                       		beq.s	loc_104AE
000110FA 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00011100 6600                       		bne.s	loc_1049E	; if not, branch
00011102 0C00 0003                  		cmpi.b	#3,d0
00011106 6600                       		bne.s	loc_1049E
00011108 4238 F7C9                  		clr.b	($FFFFF7C9).w
0001110C                            
0001110C                            loc_1049E:
0001110C 117C 0001 0038             		move.b	#1,$38(a0)
00011112                            
00011112                            loc_104A4:
00011112 4A68 003A                  		tst.w	$3A(a0)
00011116 6700                       		beq.s	loc_104C8
00011118 5568 003A                  		subq.w	#2,$3A(a0)
0001111C                            
0001111C                            loc_104AE:
0001111C 3028 003A                  		move.w	$3A(a0),d0
00011120 0828 0000 0022             		btst	#0,$22(a0)
00011126 6700                       		beq.s	loc_104BC
00011128 4440                       		neg.w	d0
0001112A                            
0001112A                            loc_104BC:
0001112A 3228 0030                  		move.w	$30(a0),d1
0001112E D240                       		add.w	d0,d1
00011130 3141 000C                  		move.w	d1,$C(a0)
00011134 4E75                       		rts	
00011136                            ; ===========================================================================
00011136                            
00011136                            loc_104C8:
00011136 5228 0028                  		addq.b	#1,$28(a0)
0001113A 4228 0038                  		clr.b	$38(a0)
0001113E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011142 7000                       		moveq	#0,d0
00011144 1028 0023                  		move.b	$23(a0),d0
00011148 67D2                       		beq.s	loc_104AE
0001114A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00011150 60CA                       		bra.s	loc_104AE
00011152                            ; ===========================================================================
00011152                            
00011152                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00011152 4A28 0038                  		tst.b	$38(a0)
00011156 6600                       		bne.s	loc_10500
00011158 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001115C 7000                       		moveq	#0,d0
0001115E 1028 003C                  		move.b	$3C(a0),d0
00011162 4A32 0000                  		tst.b	(a2,d0.w)
00011166 6A00                       		bpl.s	loc_10512
00011168 117C 0001 0038             		move.b	#1,$38(a0)
0001116E                            
0001116E                            loc_10500:
0001116E 7000                       		moveq	#0,d0
00011170 1028 0016                  		move.b	$16(a0),d0
00011174 D040                       		add.w	d0,d0
00011176 B068 003A                  		cmp.w	$3A(a0),d0
0001117A 6700                       		beq.s	loc_1052C
0001117C 5468 003A                  		addq.w	#2,$3A(a0)
00011180                            
00011180                            loc_10512:
00011180 3028 003A                  		move.w	$3A(a0),d0
00011184 0828 0000 0022             		btst	#0,$22(a0)
0001118A 6700                       		beq.s	loc_10520
0001118C 4440                       		neg.w	d0
0001118E                            
0001118E                            loc_10520:
0001118E 3228 0030                  		move.w	$30(a0),d1
00011192 D240                       		add.w	d0,d1
00011194 3141 000C                  		move.w	d1,$C(a0)
00011198 4E75                       		rts	
0001119A                            ; ===========================================================================
0001119A                            
0001119A                            loc_1052C:
0001119A 5328 0028                  		subq.b	#1,$28(a0)
0001119E 4228 0038                  		clr.b	$38(a0)
000111A2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000111A6 7000                       		moveq	#0,d0
000111A8 1028 0023                  		move.b	$23(a0),d0
000111AC 67D2                       		beq.s	loc_10512
000111AE 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000111B4 60CA                       		bra.s	loc_10512
000111B6                            ; ===========================================================================
000111B6                            
000111B6                            Obj56_Type07:				; XREF: Obj56_TypeIndex
000111B6 4A28 0038                  		tst.b	$38(a0)
000111BA 6600                       		bne.s	loc_1055E
000111BC 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
000111C0 6700                       		beq.s	locret_10578
000111C2 117C 0001 0038             		move.b	#1,$38(a0)
000111C8 4268 003A                  		clr.w	$3A(a0)
000111CC                            
000111CC                            loc_1055E:
000111CC 5268 0008                  		addq.w	#1,8(a0)
000111D0 3168 0008 0034             		move.w	8(a0),$34(a0)
000111D6 5268 003A                  		addq.w	#1,$3A(a0)
000111DA 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
000111E0 6600                       		bne.s	locret_10578
000111E2 4228 0028                  		clr.b	$28(a0)
000111E6                            
000111E6                            locret_10578:
000111E6 4E75                       		rts	
000111E8                            ; ===========================================================================
000111E8                            
000111E8                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
000111E8 4A28 0038                  		tst.b	$38(a0)
000111EC 6600                       		bne.s	loc_10598
000111EE 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000111F2 7000                       		moveq	#0,d0
000111F4 1028 003C                  		move.b	$3C(a0),d0
000111F8 0832 0000 0000             		btst	#0,(a2,d0.w)
000111FE 6700                       		beq.s	loc_105A2
00011200 117C 0001 0038             		move.b	#1,$38(a0)
00011206                            
00011206                            loc_10598:
00011206 4A68 003A                  		tst.w	$3A(a0)
0001120A 6700                       		beq.s	loc_105C0
0001120C 5568 003A                  		subq.w	#2,$3A(a0)
00011210                            
00011210                            loc_105A2:
00011210 3028 003A                  		move.w	$3A(a0),d0
00011214 0828 0000 0022             		btst	#0,$22(a0)
0001121A 6700                       		beq.s	loc_105B4
0001121C 4440                       		neg.w	d0
0001121E 0640 0080                  		addi.w	#$80,d0
00011222                            
00011222                            loc_105B4:
00011222 3228 0034                  		move.w	$34(a0),d1
00011226 D240                       		add.w	d0,d1
00011228 3141 0008                  		move.w	d1,8(a0)
0001122C 4E75                       		rts	
0001122E                            ; ===========================================================================
0001122E                            
0001122E                            loc_105C0:
0001122E 5228 0028                  		addq.b	#1,$28(a0)
00011232 4228 0038                  		clr.b	$38(a0)
00011236 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001123A 7000                       		moveq	#0,d0
0001123C 1028 0023                  		move.b	$23(a0),d0
00011240 67CE                       		beq.s	loc_105A2
00011242 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00011248 60C6                       		bra.s	loc_105A2
0001124A                            ; ===========================================================================
0001124A                            
0001124A                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
0001124A 4A28 0038                  		tst.b	$38(a0)
0001124E 6600                       		bne.s	loc_105F8
00011250 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011254 7000                       		moveq	#0,d0
00011256 1028 003C                  		move.b	$3C(a0),d0
0001125A 4A32 0000                  		tst.b	(a2,d0.w)
0001125E 6A00                       		bpl.s	loc_10606
00011260 117C 0001 0038             		move.b	#1,$38(a0)
00011266                            
00011266                            loc_105F8:
00011266 303C 0080                  		move.w	#$80,d0
0001126A B068 003A                  		cmp.w	$3A(a0),d0
0001126E 6700                       		beq.s	loc_10624
00011270 5468 003A                  		addq.w	#2,$3A(a0)
00011274                            
00011274                            loc_10606:
00011274 3028 003A                  		move.w	$3A(a0),d0
00011278 0828 0000 0022             		btst	#0,$22(a0)
0001127E 6700                       		beq.s	loc_10618
00011280 4440                       		neg.w	d0
00011282 0640 0080                  		addi.w	#$80,d0
00011286                            
00011286                            loc_10618:
00011286 3228 0034                  		move.w	$34(a0),d1
0001128A D240                       		add.w	d0,d1
0001128C 3141 0008                  		move.w	d1,8(a0)
00011290 4E75                       		rts	
00011292                            ; ===========================================================================
00011292                            
00011292                            loc_10624:
00011292 5328 0028                  		subq.b	#1,$28(a0)
00011296 4228 0038                  		clr.b	$38(a0)
0001129A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001129E 7000                       		moveq	#0,d0
000112A0 1028 0023                  		move.b	$23(a0),d0
000112A4 67CE                       		beq.s	loc_10606
000112A6 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000112AC 60C6                       		bra.s	loc_10606
000112AE                            ; ===========================================================================
000112AE                            
000112AE                            Obj56_Type08:				; XREF: Obj56_TypeIndex
000112AE 323C 0010                  		move.w	#$10,d1
000112B2 7000                       		moveq	#0,d0
000112B4 1038 FE88                  		move.b	($FFFFFE88).w,d0
000112B8 E248                       		lsr.w	#1,d0
000112BA 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
000112BE 6000                       		bra.s	Obj56_Move_Sqr
000112C0                            ; ===========================================================================
000112C0                            
000112C0                            Obj56_Type09:				; XREF: Obj56_TypeIndex
000112C0 323C 0030                  		move.w	#$30,d1
000112C4 7000                       		moveq	#0,d0
000112C6 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
000112CA 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
000112CE 6000                       		bra.s	Obj56_Move_Sqr
000112D0                            ; ===========================================================================
000112D0                            
000112D0                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
000112D0 323C 0050                  		move.w	#$50,d1
000112D4 7000                       		moveq	#0,d0
000112D6 1038 FE90                  		move.b	($FFFFFE90).w,d0
000112DA 3638 FE92                  		move.w	($FFFFFE92).w,d3
000112DE 6000                       		bra.s	Obj56_Move_Sqr
000112E0                            ; ===========================================================================
000112E0                            
000112E0                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
000112E0 323C 0070                  		move.w	#$70,d1
000112E4 7000                       		moveq	#0,d0
000112E6 1038 FE94                  		move.b	($FFFFFE94).w,d0
000112EA 3638 FE96                  		move.w	($FFFFFE96).w,d3
000112EE                            
000112EE                            Obj56_Move_Sqr:
000112EE 4A43                       		tst.w	d3
000112F0 6600                       		bne.s	loc_1068E
000112F2 5228 0022                  		addq.b	#1,$22(a0)
000112F6 0228 0003 0022             		andi.b	#3,$22(a0)
000112FC                            
000112FC                            loc_1068E:
000112FC 1428 0022                  		move.b	$22(a0),d2
00011300 0202 0003                  		andi.b	#3,d2
00011304 6600                       		bne.s	loc_106AE
00011306 9041                       		sub.w	d1,d0
00011308 D068 0034                  		add.w	$34(a0),d0
0001130C 3140 0008                  		move.w	d0,8(a0)
00011310 4441                       		neg.w	d1
00011312 D268 0030                  		add.w	$30(a0),d1
00011316 3141 000C                  		move.w	d1,$C(a0)
0001131A 4E75                       		rts	
0001131C                            ; ===========================================================================
0001131C                            
0001131C                            loc_106AE:
0001131C 5302                       		subq.b	#1,d2
0001131E 6600                       		bne.s	loc_106CC
00011320 5341                       		subq.w	#1,d1
00011322 9041                       		sub.w	d1,d0
00011324 4440                       		neg.w	d0
00011326 D068 0030                  		add.w	$30(a0),d0
0001132A 3140 000C                  		move.w	d0,$C(a0)
0001132E 5241                       		addq.w	#1,d1
00011330 D268 0034                  		add.w	$34(a0),d1
00011334 3141 0008                  		move.w	d1,8(a0)
00011338 4E75                       		rts	
0001133A                            ; ===========================================================================
0001133A                            
0001133A                            loc_106CC:
0001133A 5302                       		subq.b	#1,d2
0001133C 6600                       		bne.s	loc_106EA
0001133E 5341                       		subq.w	#1,d1
00011340 9041                       		sub.w	d1,d0
00011342 4440                       		neg.w	d0
00011344 D068 0034                  		add.w	$34(a0),d0
00011348 3140 0008                  		move.w	d0,8(a0)
0001134C 5241                       		addq.w	#1,d1
0001134E D268 0030                  		add.w	$30(a0),d1
00011352 3141 000C                  		move.w	d1,$C(a0)
00011356 4E75                       		rts	
00011358                            ; ===========================================================================
00011358                            
00011358                            loc_106EA:
00011358 9041                       		sub.w	d1,d0
0001135A D068 0030                  		add.w	$30(a0),d0
0001135E 3140 000C                  		move.w	d0,$C(a0)
00011362 4441                       		neg.w	d1
00011364 D268 0034                  		add.w	$34(a0),d1
00011368 3141 0008                  		move.w	d1,8(a0)
0001136C 4E75                       		rts	
0001136E                            ; ===========================================================================
0001136E                            ; ---------------------------------------------------------------------------
0001136E                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
0001136E                            ; ---------------------------------------------------------------------------
0001136E                            Map_obj56:
0001136E                            	include "_maps\obj56.asm"
0001136E                            ; ---------------------------------------------------------------------------
0001136E                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
0001136E                            ; ---------------------------------------------------------------------------
0001136E 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00011372 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00011376 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
0001137A 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
0001137E 01                         byte_10710:	dc.b 1
0001137F F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00011384 04                         byte_10716:	dc.b 4
00011385 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
0001138A E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
0001138F 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00011394 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00011399 02                         byte_1072B:	dc.b 2
0001139A E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
0001139F 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
000113A4 04                         byte_10736:	dc.b 4
000113A5 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
000113AA E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
000113AF 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
000113B4 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
000113B9 03                         byte_1074B:	dc.b 3
000113BA D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
000113BF F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
000113C4 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
000113C9 01                         byte_1075B:	dc.b 1
000113CA F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
000113CF 02                         byte_10761:	dc.b 2
000113D0 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
000113D5 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
000113DA 04                         byte_1076C:	dc.b 4
000113DB F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
000113E0 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
000113E5 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
000113EA F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
000113F0 00                         		even
000113F0 00                         		even
000113F0                            
000113F0                            ; ===========================================================================
000113F0                            ; ---------------------------------------------------------------------------
000113F0                            ; Object 57 - spiked balls (SYZ, LZ)
000113F0                            ; ---------------------------------------------------------------------------
000113F0                            
000113F0                            Obj57:					; XREF: Obj_Index
000113F0 7000                       		moveq	#0,d0
000113F2 1028 0024                  		move.b	$24(a0),d0
000113F6 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
000113FA 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
000113FE                            ; ===========================================================================
000113FE 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00011400 0000                       		dc.w Obj57_Move-Obj57_Index
00011402 0000                       		dc.w Obj57_Display-Obj57_Index
00011404                            ; ===========================================================================
00011404                            
00011404                            Obj57_Main:				; XREF: Obj57_Index
00011404 5428 0024                  		addq.b	#2,$24(a0)
00011408 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00011410 317C 03BA 0002             		move.w	#$3BA,2(a0)
00011416 117C 0004 0001             		move.b	#4,1(a0)
0001141C 117C 0004 0018             		move.b	#4,$18(a0)
00011422 117C 0008 0019             		move.b	#8,$19(a0)
00011428 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001142E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00011434 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
0001143A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011440 6600                       		bne.s	loc_107E8
00011442 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00011448 317C 0310 0002             		move.w	#$310,2(a0)
0001144E 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00011456                            
00011456                            loc_107E8:
00011456 1228 0028                  		move.b	$28(a0),d1	; get object type
0001145A 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001145E 4881                       		ext.w	d1
00011460 E741                       		asl.w	#3,d1		; multiply by 8
00011462 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00011466 1028 0022                  		move.b	$22(a0),d0
0001146A E418                       		ror.b	#2,d0
0001146C 0200 00C0                  		andi.b	#-$40,d0
00011470 1140 0026                  		move.b	d0,$26(a0)
00011474 45E8 0029                  		lea	$29(a0),a2
00011478 1228 0028                  		move.b	$28(a0),d1	; get object type
0001147C 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00011480 14FC 0000                  		move.b	#0,(a2)+
00011484 3601                       		move.w	d1,d3
00011486 E94B                       		lsl.w	#4,d3
00011488 1143 003C                  		move.b	d3,$3C(a0)
0001148C 5341                       		subq.w	#1,d1		; set chain length (type-1)
0001148E 6500                       		bcs.s	loc_10894
00011490 0828 0003 0028             		btst	#3,$28(a0)
00011496 6700                       		beq.s	Obj57_MakeChain
00011498 5341                       		subq.w	#1,d1
0001149A 6500                       		bcs.s	loc_10894
0001149C                            
0001149C                            Obj57_MakeChain:
0001149C 6100 D28A                  		bsr.w	SingleObjLoad
000114A0 6600                       		bne.s	loc_10894
000114A2 5228 0029                  		addq.b	#1,$29(a0)
000114A6 3A09                       		move.w	a1,d5
000114A8 0445 D000                  		subi.w	#-$3000,d5
000114AC EC4D                       		lsr.w	#6,d5
000114AE 0245 007F                  		andi.w	#$7F,d5
000114B2 14C5                       		move.b	d5,(a2)+
000114B4 137C 0004 0024             		move.b	#4,$24(a1)
000114BA 1290                       		move.b	0(a0),0(a1)
000114BC 2368 0004 0004             		move.l	4(a0),4(a1)
000114C2 3368 0002 0002             		move.w	2(a0),2(a1)
000114C8 1368 0001 0001             		move.b	1(a0),1(a1)
000114CE 1368 0018 0018             		move.b	$18(a0),$18(a1)
000114D4 1368 0019 0019             		move.b	$19(a0),$19(a1)
000114DA 1368 0020 0020             		move.b	$20(a0),$20(a1)
000114E0 0403 0010                  		subi.b	#$10,d3
000114E4 1343 003C                  		move.b	d3,$3C(a1)
000114E8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000114EE 6600                       		bne.s	loc_10890
000114F0 4A03                       		tst.b	d3
000114F2 6600                       		bne.s	loc_10890
000114F4 137C 0002 001A             		move.b	#2,$1A(a1)
000114FA                            
000114FA                            loc_10890:
000114FA 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
000114FE                            
000114FE                            loc_10894:
000114FE 3A08                       		move.w	a0,d5
00011500 0445 D000                  		subi.w	#-$3000,d5
00011504 EC4D                       		lsr.w	#6,d5
00011506 0245 007F                  		andi.w	#$7F,d5
0001150A 14C5                       		move.b	d5,(a2)+
0001150C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011512 6600                       		bne.s	Obj57_Move
00011514 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
0001151A 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
00011520                            
00011520                            Obj57_Move:				; XREF: Obj57_Index
00011520 6100 0000                  		bsr.w	Obj57_MoveSub
00011524 6000 0000                  		bra.w	Obj57_ChkDel
00011528                            ; ===========================================================================
00011528                            
00011528                            Obj57_MoveSub:				; XREF: Obj57_Move
00011528 3028 003E                  		move.w	$3E(a0),d0
0001152C D168 0026                  		add.w	d0,$26(a0)
00011530 1028 0026                  		move.b	$26(a0),d0
00011534 4EB9 0000 2D80             		jsr	(CalcSine).l
0001153A 3428 0038                  		move.w	$38(a0),d2
0001153E 3628 003A                  		move.w	$3A(a0),d3
00011542 45E8 0029                  		lea	$29(a0),a2
00011546 7C00                       		moveq	#0,d6
00011548 1C1A                       		move.b	(a2)+,d6
0001154A                            
0001154A                            Obj57_MoveLoop:
0001154A 7800                       		moveq	#0,d4
0001154C 181A                       		move.b	(a2)+,d4
0001154E ED4C                       		lsl.w	#6,d4
00011550 0684 00FF D000             		addi.l	#$FFD000,d4
00011556 2244                       		movea.l	d4,a1
00011558 7800                       		moveq	#0,d4
0001155A 1829 003C                  		move.b	$3C(a1),d4
0001155E 2A04                       		move.l	d4,d5
00011560 C9C0                       		muls.w	d0,d4
00011562 E084                       		asr.l	#8,d4
00011564 CBC1                       		muls.w	d1,d5
00011566 E085                       		asr.l	#8,d5
00011568 D842                       		add.w	d2,d4
0001156A DA43                       		add.w	d3,d5
0001156C 3344 000C                  		move.w	d4,$C(a1)
00011570 3345 0008                  		move.w	d5,8(a1)
00011574 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00011578 4E75                       		rts	
0001157A                            ; ===========================================================================
0001157A                            
0001157A                            Obj57_ChkDel:				; XREF: Obj57_Move
0001157A 3028 003A                  		move.w	$3A(a0),d0
0001157E 0240 FF80                  		andi.w	#$FF80,d0
00011582 3238 F700                  		move.w	($FFFFF700).w,d1
00011586 0441 0080                  		subi.w	#$80,d1
0001158A 0241 FF80                  		andi.w	#$FF80,d1
0001158E 9041                       		sub.w	d1,d0
00011590 0C40 0280                  		cmpi.w	#$280,d0
00011594 6200 0000                  		bhi.w	Obj57_Delete
00011598 6000 CD08                  		bra.w	DisplaySprite
0001159C                            ; ===========================================================================
0001159C                            
0001159C                            Obj57_Delete:				; XREF: Obj57_ChkDel
0001159C 7400                       		moveq	#0,d2
0001159E 45E8 0029                  		lea	$29(a0),a2
000115A2 141A                       		move.b	(a2)+,d2
000115A4                            
000115A4                            Obj57_DelLoop:
000115A4 7000                       		moveq	#0,d0
000115A6 101A                       		move.b	(a2)+,d0
000115A8 ED48                       		lsl.w	#6,d0
000115AA 0680 00FF D000             		addi.l	#$FFD000,d0
000115B0 2240                       		movea.l	d0,a1
000115B2 6100 CD2C                  		bsr.w	DeleteObject2
000115B6 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
000115BA                            
000115BA 4E75                       		rts	
000115BC                            ; ===========================================================================
000115BC                            
000115BC                            Obj57_Display:				; XREF: Obj57_Index
000115BC 6000 CCE4                  		bra.w	DisplaySprite
000115C0                            ; ===========================================================================
000115C0                            ; ---------------------------------------------------------------------------
000115C0                            ; Sprite mappings - chain of spiked balls (SYZ)
000115C0                            ; ---------------------------------------------------------------------------
000115C0                            Map_obj57:
000115C0                            	include "_maps\obj57syz.asm"
000115C0                            ; ---------------------------------------------------------------------------
000115C0                            ; Sprite mappings - chain of spiked balls (SYZ)
000115C0                            ; ---------------------------------------------------------------------------
000115C0 0000                       		dc.w byte_10958-Map_obj57
000115C2 01                         byte_10958:	dc.b 1
000115C3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000115C8                            		even
000115C8                            		even
000115C8                            
000115C8                            ; ---------------------------------------------------------------------------
000115C8                            ; Sprite mappings - spiked ball	on a chain (LZ)
000115C8                            ; ---------------------------------------------------------------------------
000115C8                            Map_obj57a:
000115C8                            	include "_maps\obj57lz.asm"
000115C8                            ; ---------------------------------------------------------------------------
000115C8                            ; Sprite mappings - spiked ball	on a chain (LZ)
000115C8                            ; ---------------------------------------------------------------------------
000115C8 0000                       		dc.w byte_10964-Map_obj57a
000115CA 0000                       		dc.w byte_1096A-Map_obj57a
000115CC 0000                       		dc.w byte_10970-Map_obj57a
000115CE 01                         byte_10964:	dc.b 1
000115CF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000115D4 01                         byte_1096A:	dc.b 1
000115D5 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
000115DA 01                         byte_10970:	dc.b 1
000115DB F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
000115E0                            		even
000115E0                            		even
000115E0                            
000115E0                            ; ===========================================================================
000115E0                            ; ---------------------------------------------------------------------------
000115E0                            ; Object 58 - giant spiked balls (SYZ)
000115E0                            ; ---------------------------------------------------------------------------
000115E0                            
000115E0                            Obj58:					; XREF: Obj_Index
000115E0 7000                       		moveq	#0,d0
000115E2 1028 0024                  		move.b	$24(a0),d0
000115E6 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
000115EA 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
000115EE                            ; ===========================================================================
000115EE 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
000115F0 0000                       		dc.w Obj58_Move-Obj58_Index
000115F2                            ; ===========================================================================
000115F2                            
000115F2                            Obj58_Main:				; XREF: Obj58_Index
000115F2 5428 0024                  		addq.b	#2,$24(a0)
000115F6 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
000115FE 317C 0396 0002             		move.w	#$396,2(a0)
00011604 117C 0004 0001             		move.b	#4,1(a0)
0001160A 117C 0004 0018             		move.b	#4,$18(a0)
00011610 117C 0018 0019             		move.b	#$18,$19(a0)
00011616 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001161C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00011622 117C 0086 0020             		move.b	#$86,$20(a0)
00011628 1228 0028                  		move.b	$28(a0),d1	; get object type
0001162C 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00011630 4881                       		ext.w	d1
00011632 E741                       		asl.w	#3,d1		; multiply by 8
00011634 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00011638 1028 0022                  		move.b	$22(a0),d0
0001163C E418                       		ror.b	#2,d0
0001163E 0200 00C0                  		andi.b	#$C0,d0
00011642 1140 0026                  		move.b	d0,$26(a0)
00011646 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
0001164C                            
0001164C                            Obj58_Move:				; XREF: Obj58_Index
0001164C 7000                       		moveq	#0,d0
0001164E 1028 0028                  		move.b	$28(a0),d0	; get object type
00011652 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00011656 D040                       		add.w	d0,d0
00011658 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
0001165C 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00011660 3028 003A                  		move.w	$3A(a0),d0
00011664 0240 FF80                  		andi.w	#$FF80,d0
00011668 3238 F700                  		move.w	($FFFFF700).w,d1
0001166C 0441 0080                  		subi.w	#$80,d1
00011670 0241 FF80                  		andi.w	#$FF80,d1
00011674 9041                       		sub.w	d1,d0
00011676 0C40 0280                  		cmpi.w	#$280,d0
0001167A 6200 CC62                  		bhi.w	DeleteObject
0001167E 6000 CC22                  		bra.w	DisplaySprite
00011682                            ; ===========================================================================
00011682 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00011684 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00011686 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00011688 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
0001168A                            ; ===========================================================================
0001168A                            
0001168A                            Obj58_Type00:				; XREF: Obj58_TypeIndex
0001168A 4E75                       		rts	
0001168C                            ; ===========================================================================
0001168C                            
0001168C                            Obj58_Type01:				; XREF: Obj58_TypeIndex
0001168C 323C 0060                  		move.w	#$60,d1
00011690 7000                       		moveq	#0,d0
00011692 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011696 0828 0000 0022             		btst	#0,$22(a0)
0001169C 6700                       		beq.s	loc_10A38
0001169E 4440                       		neg.w	d0
000116A0 D041                       		add.w	d1,d0
000116A2                            
000116A2                            loc_10A38:
000116A2 3228 003A                  		move.w	$3A(a0),d1
000116A6 9240                       		sub.w	d0,d1
000116A8 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
000116AC 4E75                       		rts	
000116AE                            ; ===========================================================================
000116AE                            
000116AE                            Obj58_Type02:				; XREF: Obj58_TypeIndex
000116AE 323C 0060                  		move.w	#$60,d1
000116B2 7000                       		moveq	#0,d0
000116B4 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000116B8 0828 0000 0022             		btst	#0,$22(a0)
000116BE 6700                       		beq.s	loc_10A5C
000116C0 4440                       		neg.w	d0
000116C2 0640 0080                  		addi.w	#$80,d0
000116C6                            
000116C6                            loc_10A5C:
000116C6 3228 0038                  		move.w	$38(a0),d1
000116CA 9240                       		sub.w	d0,d1
000116CC 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
000116D0 4E75                       		rts	
000116D2                            ; ===========================================================================
000116D2                            
000116D2                            Obj58_Type03:				; XREF: Obj58_TypeIndex
000116D2 3028 003E                  		move.w	$3E(a0),d0
000116D6 D168 0026                  		add.w	d0,$26(a0)
000116DA 1028 0026                  		move.b	$26(a0),d0
000116DE 4EB9 0000 2D80             		jsr	(CalcSine).l
000116E4 3428 0038                  		move.w	$38(a0),d2
000116E8 3628 003A                  		move.w	$3A(a0),d3
000116EC 7800                       		moveq	#0,d4
000116EE 1828 003C                  		move.b	$3C(a0),d4
000116F2 2A04                       		move.l	d4,d5
000116F4 C9C0                       		muls.w	d0,d4
000116F6 E084                       		asr.l	#8,d4
000116F8 CBC1                       		muls.w	d1,d5
000116FA E085                       		asr.l	#8,d5
000116FC D842                       		add.w	d2,d4
000116FE DA43                       		add.w	d3,d5
00011700 3144 000C                  		move.w	d4,$C(a0)
00011704 3145 0008                  		move.w	d5,8(a0)
00011708 4E75                       		rts	
0001170A                            ; ===========================================================================
0001170A                            ; ---------------------------------------------------------------------------
0001170A                            ; Sprite mappings - SBZ	spiked ball on a chain
0001170A                            ; ---------------------------------------------------------------------------
0001170A                            Map_obj15b:
0001170A                            	include "_maps\obj15sbz.asm"
0001170A                            ; ---------------------------------------------------------------------------
0001170A                            ; Sprite mappings - spiked ball on a chain (SBZ)
0001170A                            ; ---------------------------------------------------------------------------
0001170A 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
0001170E 0000                       		dc.w byte_10AC6-Map_obj15b
00011710 05                         byte_10AA6:	dc.b 5
00011711 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00011716 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
0001171B F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00011720 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00011725 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
0001172A 01                         byte_10AC0:	dc.b 1
0001172B F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
00011730 02                         byte_10AC6:	dc.b 2
00011731 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00011736 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
0001173C 00                         		even
0001173C 00                         		even
0001173C                            
0001173C                            ; ===========================================================================
0001173C                            ; ---------------------------------------------------------------------------
0001173C                            ; Object 59 - platforms	that move when you stand on them (SLZ)
0001173C                            ; ---------------------------------------------------------------------------
0001173C                            
0001173C                            Obj59:					; XREF: Obj_Index
0001173C 7000                       		moveq	#0,d0
0001173E 1028 0024                  		move.b	$24(a0),d0
00011742 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00011746 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
0001174A 3028 0032                  		move.w	$32(a0),d0
0001174E 0240 FF80                  		andi.w	#$FF80,d0
00011752 3238 F700                  		move.w	($FFFFF700).w,d1
00011756 0441 0080                  		subi.w	#$80,d1
0001175A 0241 FF80                  		andi.w	#$FF80,d1
0001175E 9041                       		sub.w	d1,d0
00011760 0C40 0280                  		cmpi.w	#$280,d0
00011764 6200 CB78                  		bhi.w	DeleteObject
00011768 6000 CB38                  		bra.w	DisplaySprite
0001176C                            ; ===========================================================================
0001176C 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
0001176E 0000                       		dc.w Obj59_Platform-Obj59_Index
00011770 0000                       		dc.w Obj59_Action-Obj59_Index
00011772 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00011774                            
00011774 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00011776                            
00011776 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00011778 2001                       		dc.b $20, 1
0001177A 3401                       		dc.b $34, 1
0001177C 1003                       		dc.b $10, 3
0001177E 2003                       		dc.b $20, 3
00011780 3403                       		dc.b $34, 3
00011782 1401                       		dc.b $14, 1
00011784 2401                       		dc.b $24, 1
00011786 2C01                       		dc.b $2C, 1
00011788 1403                       		dc.b $14, 3
0001178A 2403                       		dc.b $24, 3
0001178C 2C03                       		dc.b $2C, 3
0001178E 2005                       		dc.b $20, 5
00011790 2007                       		dc.b $20, 7
00011792 3009                       		dc.b $30, 9
00011794                            ; ===========================================================================
00011794                            
00011794                            Obj59_Main:				; XREF: Obj59_Index
00011794 5428 0024                  		addq.b	#2,$24(a0)
00011798 7000                       		moveq	#0,d0
0001179A 1028 0028                  		move.b	$28(a0),d0
0001179E 6A00                       		bpl.s	Obj59_Main2
000117A0 5828 0024                  		addq.b	#4,$24(a0)
000117A4 0240 007F                  		andi.w	#$7F,d0
000117A8 C0FC 0006                  		mulu.w	#6,d0
000117AC 3140 003C                  		move.w	d0,$3C(a0)
000117B0 3140 003E                  		move.w	d0,$3E(a0)
000117B4 588F                       		addq.l	#4,sp
000117B6 4E75                       		rts	
000117B8                            ; ===========================================================================
000117B8                            
000117B8                            Obj59_Main2:
000117B8 E648                       		lsr.w	#3,d0
000117BA 0240 001E                  		andi.w	#$1E,d0
000117BE 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
000117C2 115A 0019                  		move.b	(a2)+,$19(a0)
000117C6 115A 001A                  		move.b	(a2)+,$1A(a0)
000117CA 7000                       		moveq	#0,d0
000117CC 1028 0028                  		move.b	$28(a0),d0
000117D0 D040                       		add.w	d0,d0
000117D2 0240 001E                  		andi.w	#$1E,d0
000117D6 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
000117DA 101A                       		move.b	(a2)+,d0
000117DC E548                       		lsl.w	#2,d0
000117DE 3140 003C                  		move.w	d0,$3C(a0)
000117E2 115A 0028                  		move.b	(a2)+,$28(a0)
000117E6 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
000117EE 317C 4000 0002             		move.w	#$4000,2(a0)
000117F4 117C 0004 0001             		move.b	#4,1(a0)
000117FA 117C 0004 0018             		move.b	#4,$18(a0)
00011800 3168 0008 0032             		move.w	8(a0),$32(a0)
00011806 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001180C                            
0001180C                            Obj59_Platform:				; XREF: Obj59_Index
0001180C 7200                       		moveq	#0,d1
0001180E 1228 0019                  		move.b	$19(a0),d1
00011812 4EB9 0000 7EC8             		jsr	(PlatformObject).l
00011818 6000 0000                  		bra.w	Obj59_Types
0001181C                            ; ===========================================================================
0001181C                            
0001181C                            Obj59_Action:				; XREF: Obj59_Index
0001181C 7200                       		moveq	#0,d1
0001181E 1228 0019                  		move.b	$19(a0),d1
00011822 4EB9 0000 803C             		jsr	(ExitPlatform).l
00011828 3F28 0008                  		move.w	8(a0),-(sp)
0001182C 6100 0000                  		bsr.w	Obj59_Types
00011830 341F                       		move.w	(sp)+,d2
00011832 4A10                       		tst.b	0(a0)
00011834 6700                       		beq.s	locret_10BD4
00011836 4EF9 0000 85A6             		jmp	(MvSonicOnPtfm2).l
0001183C                            ; ===========================================================================
0001183C                            
0001183C                            locret_10BD4:
0001183C 4E75                       		rts	
0001183E                            ; ===========================================================================
0001183E                            
0001183E                            Obj59_Types:
0001183E 7000                       		moveq	#0,d0
00011840 1028 0028                  		move.b	$28(a0),d0
00011844 0240 000F                  		andi.w	#$F,d0
00011848 D040                       		add.w	d0,d0
0001184A 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
0001184E 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
00011852                            ; ===========================================================================
00011852 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011856 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001185A 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001185E 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011862 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00011866                            ; ===========================================================================
00011866                            
00011866                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00011866 4E75                       		rts	
00011868                            ; ===========================================================================
00011868                            
00011868                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00011868 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
0001186E 6600                       		bne.s	locret_10C0C
00011870 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00011874                            
00011874                            locret_10C0C:
00011874 4E75                       		rts	
00011876                            ; ===========================================================================
00011876                            
00011876                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00011876 6100 0000                  		bsr.w	Obj59_Move
0001187A 3028 0034                  		move.w	$34(a0),d0
0001187E 4440                       		neg.w	d0
00011880 D068 0030                  		add.w	$30(a0),d0
00011884 3140 000C                  		move.w	d0,$C(a0)
00011888 4E75                       		rts	
0001188A                            ; ===========================================================================
0001188A                            
0001188A                            Obj59_Type04:				; XREF: Obj59_TypeIndex
0001188A 6100 0000                  		bsr.w	Obj59_Move
0001188E 3028 0034                  		move.w	$34(a0),d0
00011892 D068 0030                  		add.w	$30(a0),d0
00011896 3140 000C                  		move.w	d0,$C(a0)
0001189A 4E75                       		rts	
0001189C                            ; ===========================================================================
0001189C                            
0001189C                            Obj59_Type06:				; XREF: Obj59_TypeIndex
0001189C 6100 0000                  		bsr.w	Obj59_Move
000118A0 3028 0034                  		move.w	$34(a0),d0
000118A4 E240                       		asr.w	#1,d0
000118A6 4440                       		neg.w	d0
000118A8 D068 0030                  		add.w	$30(a0),d0
000118AC 3140 000C                  		move.w	d0,$C(a0)
000118B0 3028 0034                  		move.w	$34(a0),d0
000118B4 D068 0032                  		add.w	$32(a0),d0
000118B8 3140 0008                  		move.w	d0,8(a0)
000118BC 4E75                       		rts	
000118BE                            ; ===========================================================================
000118BE                            
000118BE                            Obj59_Type08:				; XREF: Obj59_TypeIndex
000118BE 6100 0000                  		bsr.w	Obj59_Move
000118C2 3028 0034                  		move.w	$34(a0),d0
000118C6 E240                       		asr.w	#1,d0
000118C8 D068 0030                  		add.w	$30(a0),d0
000118CC 3140 000C                  		move.w	d0,$C(a0)
000118D0 3028 0034                  		move.w	$34(a0),d0
000118D4 4440                       		neg.w	d0
000118D6 D068 0032                  		add.w	$32(a0),d0
000118DA 3140 0008                  		move.w	d0,8(a0)
000118DE 4E75                       		rts	
000118E0                            ; ===========================================================================
000118E0                            
000118E0                            Obj59_Type09:				; XREF: Obj59_TypeIndex
000118E0 6100 0000                  		bsr.w	Obj59_Move
000118E4 3028 0034                  		move.w	$34(a0),d0
000118E8 4440                       		neg.w	d0
000118EA D068 0030                  		add.w	$30(a0),d0
000118EE 3140 000C                  		move.w	d0,$C(a0)
000118F2 4A28 0028                  		tst.b	$28(a0)
000118F6 6700 0000                  		beq.w	loc_10C94
000118FA 4E75                       		rts	
000118FC                            ; ===========================================================================
000118FC                            
000118FC                            loc_10C94:
000118FC 0828 0003 0022             		btst	#3,$22(a0)
00011902 6700                       		beq.s	Obj59_Delete
00011904 08E9 0001 0022             		bset	#1,$22(a1)
0001190A 08A9 0003 0022             		bclr	#3,$22(a1)
00011910 137C 0002 0024             		move.b	#2,$24(a1)
00011916                            
00011916                            Obj59_Delete:
00011916 6000 C9C6                  		bra.w	DeleteObject
0001191A                            
0001191A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001191A                            
0001191A                            
0001191A                            Obj59_Move:				; XREF: Obj59_Type02; et al
0001191A 3028 0038                  		move.w	$38(a0),d0
0001191E 4A28 003A                  		tst.b	$3A(a0)
00011922 6600                       		bne.s	loc_10CC8
00011924 0C40 0800                  		cmpi.w	#$800,d0
00011928 6400                       		bcc.s	loc_10CD0
0001192A 0640 0010                  		addi.w	#$10,d0
0001192E 6000                       		bra.s	loc_10CD0
00011930                            ; ===========================================================================
00011930                            
00011930                            loc_10CC8:
00011930 4A40                       		tst.w	d0
00011932 6700                       		beq.s	loc_10CD0
00011934 0440 0010                  		subi.w	#$10,d0
00011938                            
00011938                            loc_10CD0:
00011938 3140 0038                  		move.w	d0,$38(a0)
0001193C 48C0                       		ext.l	d0
0001193E E180                       		asl.l	#8,d0
00011940 D0A8 0034                  		add.l	$34(a0),d0
00011944 2140 0034                  		move.l	d0,$34(a0)
00011948 4840                       		swap	d0
0001194A 3428 003C                  		move.w	$3C(a0),d2
0001194E B042                       		cmp.w	d2,d0
00011950 6300                       		bls.s	loc_10CF0
00011952 117C 0001 003A             		move.b	#1,$3A(a0)
00011958                            
00011958                            loc_10CF0:
00011958 D442                       		add.w	d2,d2
0001195A B042                       		cmp.w	d2,d0
0001195C 6600                       		bne.s	locret_10CFA
0001195E 4228 0028                  		clr.b	$28(a0)
00011962                            
00011962                            locret_10CFA:
00011962 4E75                       		rts	
00011964                            ; End of function Obj59_Move
00011964                            
00011964                            ; ===========================================================================
00011964                            
00011964                            Obj59_MakeMulti:			; XREF: Obj59_Index
00011964 5368 003C                  		subq.w	#1,$3C(a0)
00011968 6600                       		bne.s	Obj59_ChkDel
0001196A 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
00011970 6100 CDB6                  		bsr.w	SingleObjLoad
00011974 6600                       		bne.s	Obj59_ChkDel
00011976 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
0001197A 3368 0008 0008             		move.w	8(a0),8(a1)
00011980 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011986 137C 000E 0028             		move.b	#$E,$28(a1)
0001198C                            
0001198C                            Obj59_ChkDel:
0001198C 588F                       		addq.l	#4,sp
0001198E 3028 0008                  		move.w	8(a0),d0
00011992 0240 FF80                  		andi.w	#$FF80,d0
00011996 3238 F700                  		move.w	($FFFFF700).w,d1
0001199A 0441 0080                  		subi.w	#$80,d1
0001199E 0241 FF80                  		andi.w	#$FF80,d1
000119A2 9041                       		sub.w	d1,d0
000119A4 0C40 0280                  		cmpi.w	#$280,d0
000119A8 6200 C934                  		bhi.w	DeleteObject
000119AC 4E75                       		rts	
000119AE                            ; ===========================================================================
000119AE                            ; ---------------------------------------------------------------------------
000119AE                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000119AE                            ; ---------------------------------------------------------------------------
000119AE                            Map_obj59:
000119AE                            	include "_maps\obj59.asm"
000119AE                            ; ---------------------------------------------------------------------------
000119AE                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000119AE                            ; ---------------------------------------------------------------------------
000119AE 0000                       		dc.w byte_10D4A-Map_obj59
000119B0 03                         byte_10D4A:	dc.b 3
000119B1 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
000119B6 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
000119BB F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
000119C0                            		even
000119C0                            		even
000119C0                            
000119C0                            ; ===========================================================================
000119C0                            ; ---------------------------------------------------------------------------
000119C0                            ; Object 5A - platforms	moving in circles (SLZ)
000119C0                            ; ---------------------------------------------------------------------------
000119C0                            
000119C0                            Obj5A:					; XREF: Obj_Index
000119C0 7000                       		moveq	#0,d0
000119C2 1028 0024                  		move.b	$24(a0),d0
000119C6 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
000119CA 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
000119CE 3028 0032                  		move.w	$32(a0),d0
000119D2 0240 FF80                  		andi.w	#$FF80,d0
000119D6 3238 F700                  		move.w	($FFFFF700).w,d1
000119DA 0441 0080                  		subi.w	#$80,d1
000119DE 0241 FF80                  		andi.w	#$FF80,d1
000119E2 9041                       		sub.w	d1,d0
000119E4 0C40 0280                  		cmpi.w	#$280,d0
000119E8 6200 C8F4                  		bhi.w	DeleteObject
000119EC 6000 C8B4                  		bra.w	DisplaySprite
000119F0                            ; ===========================================================================
000119F0 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
000119F2 0000                       		dc.w Obj5A_Platform-Obj5A_Index
000119F4 0000                       		dc.w Obj5A_Action-Obj5A_Index
000119F6                            ; ===========================================================================
000119F6                            
000119F6                            Obj5A_Main:				; XREF: Obj5A_Index
000119F6 5428 0024                  		addq.b	#2,$24(a0)
000119FA 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
00011A02 317C 4000 0002             		move.w	#$4000,2(a0)
00011A08 117C 0004 0001             		move.b	#4,1(a0)
00011A0E 117C 0004 0018             		move.b	#4,$18(a0)
00011A14 117C 0018 0019             		move.b	#$18,$19(a0)
00011A1A 3168 0008 0032             		move.w	8(a0),$32(a0)
00011A20 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011A26                            
00011A26                            Obj5A_Platform:				; XREF: Obj5A_Index
00011A26 7200                       		moveq	#0,d1
00011A28 1228 0019                  		move.b	$19(a0),d1
00011A2C 4EB9 0000 7EC8             		jsr	(PlatformObject).l
00011A32 6000 0000                  		bra.w	Obj5A_Types
00011A36                            ; ===========================================================================
00011A36                            
00011A36                            Obj5A_Action:				; XREF: Obj5A_Index
00011A36 7200                       		moveq	#0,d1
00011A38 1228 0019                  		move.b	$19(a0),d1
00011A3C 4EB9 0000 803C             		jsr	(ExitPlatform).l
00011A42 3F28 0008                  		move.w	8(a0),-(sp)
00011A46 6100 0000                  		bsr.w	Obj5A_Types
00011A4A 341F                       		move.w	(sp)+,d2
00011A4C 4EF9 0000 85A6             		jmp	(MvSonicOnPtfm2).l
00011A52                            ; ===========================================================================
00011A52                            
00011A52                            Obj5A_Types:
00011A52 7000                       		moveq	#0,d0
00011A54 1028 0028                  		move.b	$28(a0),d0
00011A58 0240 000C                  		andi.w	#$C,d0
00011A5C E248                       		lsr.w	#1,d0
00011A5E 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
00011A62 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00011A66                            ; ===========================================================================
00011A66 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00011A68 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
00011A6A                            ; ===========================================================================
00011A6A                            
00011A6A                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
00011A6A 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011A6E 0401 0050                  		subi.b	#$50,d1
00011A72 4881                       		ext.w	d1
00011A74 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011A78 0402 0050                  		subi.b	#$50,d2
00011A7C 4882                       		ext.w	d2
00011A7E 0828 0000 0028             		btst	#0,$28(a0)
00011A84 6700                       		beq.s	loc_10E24
00011A86 4441                       		neg.w	d1
00011A88 4442                       		neg.w	d2
00011A8A                            
00011A8A                            loc_10E24:
00011A8A 0828 0001 0028             		btst	#1,$28(a0)
00011A90 6700                       		beq.s	loc_10E30
00011A92 4441                       		neg.w	d1
00011A94 C342                       		exg	d1,d2
00011A96                            
00011A96                            loc_10E30:
00011A96 D268 0032                  		add.w	$32(a0),d1
00011A9A 3141 0008                  		move.w	d1,8(a0)
00011A9E D468 0030                  		add.w	$30(a0),d2
00011AA2 3142 000C                  		move.w	d2,$C(a0)
00011AA6 4E75                       		rts	
00011AA8                            ; ===========================================================================
00011AA8                            
00011AA8                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00011AA8 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011AAC 0401 0050                  		subi.b	#$50,d1
00011AB0 4881                       		ext.w	d1
00011AB2 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011AB6 0402 0050                  		subi.b	#$50,d2
00011ABA 4882                       		ext.w	d2
00011ABC 0828 0000 0028             		btst	#0,$28(a0)
00011AC2 6700                       		beq.s	loc_10E62
00011AC4 4441                       		neg.w	d1
00011AC6 4442                       		neg.w	d2
00011AC8                            
00011AC8                            loc_10E62:
00011AC8 0828 0001 0028             		btst	#1,$28(a0)
00011ACE 6700                       		beq.s	loc_10E6E
00011AD0 4441                       		neg.w	d1
00011AD2 C342                       		exg	d1,d2
00011AD4                            
00011AD4                            loc_10E6E:
00011AD4 4441                       		neg.w	d1
00011AD6 D268 0032                  		add.w	$32(a0),d1
00011ADA 3141 0008                  		move.w	d1,8(a0)
00011ADE D468 0030                  		add.w	$30(a0),d2
00011AE2 3142 000C                  		move.w	d2,$C(a0)
00011AE6 4E75                       		rts	
00011AE8                            ; ===========================================================================
00011AE8                            ; ---------------------------------------------------------------------------
00011AE8                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011AE8                            ; ---------------------------------------------------------------------------
00011AE8                            Map_obj5A:
00011AE8                            	include "_maps\obj5A.asm"
00011AE8                            ; ---------------------------------------------------------------------------
00011AE8                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011AE8                            ; ---------------------------------------------------------------------------
00011AE8 0000                       		dc.w byte_10E84-Map_obj5A
00011AEA 02                         byte_10E84:	dc.b 2
00011AEB F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00011AF0 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00011AF6 00                         		even
00011AF6 00                         		even
00011AF6                            
00011AF6                            ; ===========================================================================
00011AF6                            ; ---------------------------------------------------------------------------
00011AF6                            ; Object 5B - blocks that form a staircase (SLZ)
00011AF6                            ; ---------------------------------------------------------------------------
00011AF6                            
00011AF6                            Obj5B:					; XREF: Obj_Index
00011AF6 7000                       		moveq	#0,d0
00011AF8 1028 0024                  		move.b	$24(a0),d0
00011AFC 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
00011B00 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
00011B04 3028 0030                  		move.w	$30(a0),d0
00011B08 0240 FF80                  		andi.w	#$FF80,d0
00011B0C 3238 F700                  		move.w	($FFFFF700).w,d1
00011B10 0441 0080                  		subi.w	#$80,d1
00011B14 0241 FF80                  		andi.w	#$FF80,d1
00011B18 9041                       		sub.w	d1,d0
00011B1A 0C40 0280                  		cmpi.w	#$280,d0
00011B1E 6200 C7BE                  		bhi.w	DeleteObject
00011B22 6000 C77E                  		bra.w	DisplaySprite
00011B26                            ; ===========================================================================
00011B26 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
00011B28 0000                       		dc.w Obj5B_Move-Obj5B_Index
00011B2A 0000                       		dc.w Obj5B_Solid-Obj5B_Index
00011B2C                            ; ===========================================================================
00011B2C                            
00011B2C                            Obj5B_Main:				; XREF: Obj5B_Index
00011B2C 5428 0024                  		addq.b	#2,$24(a0)
00011B30 7638                       		moveq	#$38,d3
00011B32 7801                       		moveq	#1,d4
00011B34 0828 0000 0022             		btst	#0,$22(a0)
00011B3A 6700                       		beq.s	loc_10EDA
00011B3C 763B                       		moveq	#$3B,d3
00011B3E 78FF                       		moveq	#-1,d4
00011B40                            
00011B40                            loc_10EDA:
00011B40 3428 0008                  		move.w	8(a0),d2
00011B44 2248                       		movea.l	a0,a1
00011B46 7203                       		moveq	#3,d1
00011B48 6000                       		bra.s	Obj5B_MakeBlocks
00011B4A                            ; ===========================================================================
00011B4A                            
00011B4A                            Obj5B_Loop:
00011B4A 6100 CBF2                  		bsr.w	SingleObjLoad2
00011B4E 6600 0000                  		bne.w	Obj5B_Move
00011B52 137C 0004 0024             		move.b	#4,$24(a1)
00011B58                            
00011B58                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
00011B58 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00011B5C 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
00011B64 337C 4000 0002             		move.w	#$4000,2(a1)
00011B6A 137C 0004 0001             		move.b	#4,1(a1)
00011B70 137C 0003 0018             		move.b	#3,$18(a1)
00011B76 137C 0010 0019             		move.b	#$10,$19(a1)
00011B7C 1368 0028 0028             		move.b	$28(a0),$28(a1)
00011B82 3342 0008                  		move.w	d2,8(a1)
00011B86 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011B8C 3368 0008 0030             		move.w	8(a0),$30(a1)
00011B92 3369 000C 0032             		move.w	$C(a1),$32(a1)
00011B98 0642 0020                  		addi.w	#$20,d2
00011B9C 1343 0037                  		move.b	d3,$37(a1)
00011BA0 2348 003C                  		move.l	a0,$3C(a1)
00011BA4 D604                       		add.b	d4,d3
00011BA6 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00011BAA                            
00011BAA                            Obj5B_Move:				; XREF: Obj5B_Index
00011BAA 7000                       		moveq	#0,d0
00011BAC 1028 0028                  		move.b	$28(a0),d0
00011BB0 0240 0007                  		andi.w	#7,d0
00011BB4 D040                       		add.w	d0,d0
00011BB6 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00011BBA 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
00011BBE                            
00011BBE                            Obj5B_Solid:				; XREF: Obj5B_Index
00011BBE 2468 003C                  		movea.l	$3C(a0),a2
00011BC2 7000                       		moveq	#0,d0
00011BC4 1028 0037                  		move.b	$37(a0),d0
00011BC8 1032 0000                  		move.b	(a2,d0.w),d0
00011BCC D068 0032                  		add.w	$32(a0),d0
00011BD0 3140 000C                  		move.w	d0,$C(a0)
00011BD4 7200                       		moveq	#0,d1
00011BD6 1228 0019                  		move.b	$19(a0),d1
00011BDA 0641 000B                  		addi.w	#$B,d1
00011BDE 343C 0010                  		move.w	#$10,d2
00011BE2 363C 0011                  		move.w	#$11,d3
00011BE6 3828 0008                  		move.w	8(a0),d4
00011BEA 6100 EA80                  		bsr.w	SolidObject
00011BEE 4A04                       		tst.b	d4
00011BF0 6A00                       		bpl.s	loc_10F92
00011BF2 1544 0036                  		move.b	d4,$36(a2)
00011BF6                            
00011BF6                            loc_10F92:
00011BF6 0828 0003 0022             		btst	#3,$22(a0)
00011BFC 6700                       		beq.s	locret_10FA0
00011BFE 157C 0001 0036             		move.b	#1,$36(a2)
00011C04                            
00011C04                            locret_10FA0:
00011C04 4E75                       		rts	
00011C06                            ; ===========================================================================
00011C06 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00011C08 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011C0A 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00011C0C 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011C0E                            ; ===========================================================================
00011C0E                            
00011C0E                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00011C0E 4A68 0034                  		tst.w	$34(a0)
00011C12 6600                       		bne.s	loc_10FC0
00011C14 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00011C1A 6600                       		bne.s	locret_10FBE
00011C1C 317C 001E 0034             		move.w	#$1E,$34(a0)
00011C22                            
00011C22                            locret_10FBE:
00011C22 4E75                       		rts	
00011C24                            ; ===========================================================================
00011C24                            
00011C24                            loc_10FC0:
00011C24 5368 0034                  		subq.w	#1,$34(a0)
00011C28 66F8                       		bne.s	locret_10FBE
00011C2A 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011C2E 4E75                       		rts	
00011C30                            ; ===========================================================================
00011C30                            
00011C30                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00011C30 4A68 0034                  		tst.w	$34(a0)
00011C34 6600                       		bne.s	loc_10FE0
00011C36 4A28 0036                  		tst.b	$36(a0)
00011C3A 6A00                       		bpl.s	locret_10FDE
00011C3C 317C 003C 0034             		move.w	#$3C,$34(a0)
00011C42                            
00011C42                            locret_10FDE:
00011C42 4E75                       		rts	
00011C44                            ; ===========================================================================
00011C44                            
00011C44                            loc_10FE0:
00011C44 5368 0034                  		subq.w	#1,$34(a0)
00011C48 6600                       		bne.s	loc_10FEC
00011C4A 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011C4E 4E75                       		rts	
00011C50                            ; ===========================================================================
00011C50                            
00011C50                            loc_10FEC:
00011C50 43E8 0038                  		lea	$38(a0),a1
00011C54 3028 0034                  		move.w	$34(a0),d0
00011C58 E408                       		lsr.b	#2,d0
00011C5A 0200 0001                  		andi.b	#1,d0
00011C5E 12C0                       		move.b	d0,(a1)+
00011C60 0A00 0001                  		eori.b	#1,d0
00011C64 12C0                       		move.b	d0,(a1)+
00011C66 0A00 0001                  		eori.b	#1,d0
00011C6A 12C0                       		move.b	d0,(a1)+
00011C6C 0A00 0001                  		eori.b	#1,d0
00011C70 12C0                       		move.b	d0,(a1)+
00011C72 4E75                       		rts	
00011C74                            ; ===========================================================================
00011C74                            
00011C74                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00011C74 43E8 0038                  		lea	$38(a0),a1
00011C78 0C11 0080                  		cmpi.b	#$80,(a1)
00011C7C 6700                       		beq.s	locret_11038
00011C7E 5211                       		addq.b	#1,(a1)
00011C80 7200                       		moveq	#0,d1
00011C82 1219                       		move.b	(a1)+,d1
00011C84 4841                       		swap	d1
00011C86 E289                       		lsr.l	#1,d1
00011C88 2401                       		move.l	d1,d2
00011C8A E289                       		lsr.l	#1,d1
00011C8C 2601                       		move.l	d1,d3
00011C8E D682                       		add.l	d2,d3
00011C90 4841                       		swap	d1
00011C92 4842                       		swap	d2
00011C94 4843                       		swap	d3
00011C96 12C3                       		move.b	d3,(a1)+
00011C98 12C2                       		move.b	d2,(a1)+
00011C9A 12C1                       		move.b	d1,(a1)+
00011C9C                            
00011C9C                            locret_11038:
00011C9C 4E75                       		rts	
00011C9E 4E75                       		rts	
00011CA0                            ; ===========================================================================
00011CA0                            ; ---------------------------------------------------------------------------
00011CA0                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011CA0                            ; ---------------------------------------------------------------------------
00011CA0                            Map_obj5B:
00011CA0                            	include "_maps\obj5B.asm"
00011CA0                            ; ---------------------------------------------------------------------------
00011CA0                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011CA0                            ; ---------------------------------------------------------------------------
00011CA0 0000                       		dc.w byte_1103E-Map_obj5B
00011CA2 01                         byte_1103E:	dc.b 1
00011CA3 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00011CA8                            		even
00011CA8                            		even
00011CA8                            
00011CA8                            ; ===========================================================================
00011CA8                            ; ---------------------------------------------------------------------------
00011CA8                            ; Object 5C - metal girders in foreground (SLZ)
00011CA8                            ; ---------------------------------------------------------------------------
00011CA8                            
00011CA8                            Obj5C:					; XREF: Obj_Index
00011CA8 7000                       		moveq	#0,d0
00011CAA 1028 0024                  		move.b	$24(a0),d0
00011CAE 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00011CB2 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00011CB6                            ; ===========================================================================
00011CB6 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00011CB8 0000                       		dc.w Obj5C_Display-Obj5C_Index
00011CBA                            ; ===========================================================================
00011CBA                            
00011CBA                            Obj5C_Main:				; XREF: Obj5C_Index
00011CBA 5428 0024                  		addq.b	#2,$24(a0)
00011CBE 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00011CC6 317C 83CC 0002             		move.w	#$83CC,2(a0)
00011CCC 117C 0010 0019             		move.b	#$10,$19(a0)
00011CD2                            
00011CD2                            Obj5C_Display:				; XREF: Obj5C_Index
00011CD2 2238 F700                  		move.l	($FFFFF700).w,d1
00011CD6 D281                       		add.l	d1,d1
00011CD8 4841                       		swap	d1
00011CDA 4441                       		neg.w	d1
00011CDC 3141 0008                  		move.w	d1,8(a0)
00011CE0 2238 F704                  		move.l	($FFFFF704).w,d1
00011CE4 D281                       		add.l	d1,d1
00011CE6 4841                       		swap	d1
00011CE8 0241 003F                  		andi.w	#$3F,d1
00011CEC 4441                       		neg.w	d1
00011CEE 0641 0100                  		addi.w	#$100,d1
00011CF2 3141 000A                  		move.w	d1,$A(a0)
00011CF6 6000 C5AA                  		bra.w	DisplaySprite
00011CFA                            ; ===========================================================================
00011CFA                            ; ---------------------------------------------------------------------------
00011CFA                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011CFA                            ; ---------------------------------------------------------------------------
00011CFA                            Map_obj5C:
00011CFA                            	include "_maps\obj5C.asm"
00011CFA                            ; ---------------------------------------------------------------------------
00011CFA                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011CFA                            ; ---------------------------------------------------------------------------
00011CFA 0000                       		dc.w byte_11098-Map_obj5C
00011CFC 09                         byte_11098:	dc.b 9
00011CFD 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00011D02 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00011D07 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00011D0C E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00011D11 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00011D16 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00011D1B 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00011D20 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00011D25 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00011D2A                            		even
00011D2A                            		even
00011D2A                            
00011D2A                            ; ===========================================================================
00011D2A                            ; ---------------------------------------------------------------------------
00011D2A                            ; Object 1B - water surface (LZ)
00011D2A                            ; ---------------------------------------------------------------------------
00011D2A                            
00011D2A                            Obj1B:					; XREF: Obj_Index
00011D2A 7000                       		moveq	#0,d0
00011D2C 1028 0024                  		move.b	$24(a0),d0
00011D30 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00011D34 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00011D38                            ; ===========================================================================
00011D38 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00011D3A 0000                       		dc.w Obj1B_Action-Obj1B_Index
00011D3C                            ; ===========================================================================
00011D3C                            
00011D3C                            Obj1B_Main:				; XREF: Obj1B_Index
00011D3C 5428 0024                  		addq.b	#2,$24(a0)
00011D40 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00011D48 317C C300 0002             		move.w	#$C300,2(a0)
00011D4E 117C 0004 0001             		move.b	#4,1(a0)
00011D54 117C 0080 0019             		move.b	#$80,$19(a0)
00011D5A 3168 0008 0030             		move.w	8(a0),$30(a0)
00011D60                            
00011D60                            Obj1B_Action:				; XREF: Obj1B_Index
00011D60 3238 F700                  		move.w	($FFFFF700).w,d1
00011D64 0241 FFE0                  		andi.w	#$FFE0,d1
00011D68 D268 0030                  		add.w	$30(a0),d1
00011D6C 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00011D72 6700                       		beq.s	loc_11114
00011D74 0641 0020                  		addi.w	#$20,d1
00011D78                            
00011D78                            loc_11114:
00011D78 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00011D7C 3238 F646                  		move.w	($FFFFF646).w,d1
00011D80 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00011D84 4A28 0032                  		tst.b	$32(a0)
00011D88 6600                       		bne.s	Obj1B_Animate
00011D8A 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00011D90 6700                       		beq.s	loc_1114A	; if not, branch
00011D92 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00011D96 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00011D9C 6000                       		bra.s	Obj1B_Display
00011D9E                            ; ===========================================================================
00011D9E                            
00011D9E                            Obj1B_Animate:				; XREF: loc_11114
00011D9E 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00011DA2 6600                       		bne.s	Obj1B_Display	; if yes, branch
00011DA4 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00011DAA 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00011DAE                            
00011DAE                            loc_1114A:				; XREF: loc_11114
00011DAE 5328 001E                  		subq.b	#1,$1E(a0)
00011DB2 6A00                       		bpl.s	Obj1B_Display
00011DB4 117C 0007 001E             		move.b	#7,$1E(a0)
00011DBA 5228 001A                  		addq.b	#1,$1A(a0)
00011DBE 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00011DC4 6500                       		bcs.s	Obj1B_Display
00011DC6 117C 0000 001A             		move.b	#0,$1A(a0)
00011DCC                            
00011DCC                            Obj1B_Display:
00011DCC 6000 C4D4                  		bra.w	DisplaySprite
00011DD0                            ; ===========================================================================
00011DD0                            ; ---------------------------------------------------------------------------
00011DD0                            ; Sprite mappings - water surface (LZ)
00011DD0                            ; ---------------------------------------------------------------------------
00011DD0                            Map_obj1B:
00011DD0                            	include "_maps\obj1B.asm"
00011DD0                            ; ---------------------------------------------------------------------------
00011DD0                            ; Sprite mappings - water surface (LZ)
00011DD0                            ; ---------------------------------------------------------------------------
00011DD0 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00011DD4 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00011DD8 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00011DDC 03                         byte_11178:	dc.b 3
00011DDD FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011DE2 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011DE7 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011DEC 03                         byte_11188:	dc.b 3
00011DED FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011DF2 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011DF7 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011DFC 03                         byte_11198:	dc.b 3
00011DFD FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011E02 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011E07 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011E0C 06                         byte_111A8:	dc.b 6
00011E0D FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011E12 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00011E17 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011E1C FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00011E21 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011E26 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00011E2B 06                         byte_111C7:	dc.b 6
00011E2C FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011E31 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00011E36 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011E3B FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00011E40 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011E45 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00011E4A 06                         byte_111E6:	dc.b 6
00011E4B FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011E50 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00011E55 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011E5A FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00011E5F FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011E64 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00011E6A 00                         		even
00011E6A 00                         		even
00011E6A                            
00011E6A                            ; ===========================================================================
00011E6A                            ; ---------------------------------------------------------------------------
00011E6A                            ; Object 0B - pole that	breaks (LZ)
00011E6A                            ; ---------------------------------------------------------------------------
00011E6A                            
00011E6A                            Obj0B:					; XREF: Obj_Index
00011E6A 7000                       		moveq	#0,d0
00011E6C 1028 0024                  		move.b	$24(a0),d0
00011E70 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00011E74 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00011E78                            ; ===========================================================================
00011E78 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00011E7A 0000                       		dc.w Obj0B_Action-Obj0B_Index
00011E7C 0000                       		dc.w Obj0B_Display-Obj0B_Index
00011E7E                            ; ===========================================================================
00011E7E                            
00011E7E                            Obj0B_Main:				; XREF: Obj0B_Index
00011E7E 5428 0024                  		addq.b	#2,$24(a0)
00011E82 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00011E8A 317C 43DE 0002             		move.w	#$43DE,2(a0)
00011E90 117C 0004 0001             		move.b	#4,1(a0)
00011E96 117C 0008 0019             		move.b	#8,$19(a0)
00011E9C 117C 0004 0018             		move.b	#4,$18(a0)
00011EA2 117C 00E1 0020             		move.b	#$E1,$20(a0)
00011EA8 7000                       		moveq	#0,d0
00011EAA 1028 0028                  		move.b	$28(a0),d0	; get object type
00011EAE C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011EB2 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00011EB6                            
00011EB6                            Obj0B_Action:				; XREF: Obj0B_Index
00011EB6 4A28 0032                  		tst.b	$32(a0)
00011EBA 6700                       		beq.s	Obj0B_Grab
00011EBC 4A68 0030                  		tst.w	$30(a0)
00011EC0 6700                       		beq.s	Obj0B_MoveUp
00011EC2 5368 0030                  		subq.w	#1,$30(a0)
00011EC6 6600                       		bne.s	Obj0B_MoveUp
00011EC8 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00011ECE 6000                       		bra.s	Obj0B_Release
00011ED0                            ; ===========================================================================
00011ED0                            
00011ED0                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00011ED0 43F8 D000                  		lea	($FFFFD000).w,a1
00011ED4 3028 000C                  		move.w	$C(a0),d0
00011ED8 0440 0018                  		subi.w	#$18,d0
00011EDC 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00011EE2 6700                       		beq.s	Obj0B_MoveDown
00011EE4 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00011EE8 B069 000C                  		cmp.w	$C(a1),d0
00011EEC 6500                       		bcs.s	Obj0B_MoveDown
00011EEE 3340 000C                  		move.w	d0,$C(a1)
00011EF2                            
00011EF2                            Obj0B_MoveDown:
00011EF2 0640 0024                  		addi.w	#$24,d0
00011EF6 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00011EFC 6700                       		beq.s	Obj0B_LetGo
00011EFE 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011F02 B069 000C                  		cmp.w	$C(a1),d0
00011F06 6400                       		bcc.s	Obj0B_LetGo
00011F08 3340 000C                  		move.w	d0,$C(a1)
00011F0C                            
00011F0C                            Obj0B_LetGo:
00011F0C 1038 F603                  		move.b	($FFFFF603).w,d0
00011F10 0240 0070                  		andi.w	#$70,d0
00011F14 6700                       		beq.s	Obj0B_Display
00011F16                            
00011F16                            Obj0B_Release:				; XREF: Obj0B_Action
00011F16 4228 0020                  		clr.b	$20(a0)
00011F1A 5428 0024                  		addq.b	#2,$24(a0)
00011F1E 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011F22 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011F26 4228 0032                  		clr.b	$32(a0)
00011F2A 6000                       		bra.s	Obj0B_Display
00011F2C                            ; ===========================================================================
00011F2C                            
00011F2C                            Obj0B_Grab:				; XREF: Obj0B_Action
00011F2C 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011F30 6700                       		beq.s	Obj0B_Display	; if not, branch
00011F32 43F8 D000                  		lea	($FFFFD000).w,a1
00011F36 3028 0008                  		move.w	8(a0),d0
00011F3A 0640 0014                  		addi.w	#$14,d0
00011F3E B069 0008                  		cmp.w	8(a1),d0
00011F42 6400                       		bcc.s	Obj0B_Display
00011F44 4228 0021                  		clr.b	$21(a0)
00011F48 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011F4E 6400                       		bcc.s	Obj0B_Display
00011F50 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011F54 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011F58 3028 0008                  		move.w	8(a0),d0
00011F5C 0640 0014                  		addi.w	#$14,d0
00011F60 3340 0008                  		move.w	d0,8(a1)
00011F64 08A9 0000 0022             		bclr	#0,$22(a1)
00011F6A 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011F70 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00011F76 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011F7C 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011F82                            
00011F82                            Obj0B_Display:				; XREF: Obj0B_Index
00011F82 6000 E3C0                  		bra.w	MarkObjGone
00011F86                            ; ===========================================================================
00011F86                            ; ---------------------------------------------------------------------------
00011F86                            ; Sprite mappings - pole that breaks (LZ)
00011F86                            ; ---------------------------------------------------------------------------
00011F86                            Map_obj0B:
00011F86                            	include "_maps\obj0B.asm"
00011F86                            ; ---------------------------------------------------------------------------
00011F86                            ; Sprite mappings - pole that breaks (LZ)
00011F86                            ; ---------------------------------------------------------------------------
00011F86 0000                       		dc.w byte_11326-Map_obj0B
00011F88 0000                       		dc.w byte_11331-Map_obj0B
00011F8A 02                         byte_11326:	dc.b 2			; normal pole
00011F8B E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011F90 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011F95 04                         byte_11331:	dc.b 4			; broken pole
00011F96 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011F9B F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00011FA0 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00011FA5 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011FAA                            		even
00011FAA                            		even
00011FAA                            
00011FAA                            ; ===========================================================================
00011FAA                            ; ---------------------------------------------------------------------------
00011FAA                            ; Object 0C - flapping door (LZ)
00011FAA                            ; ---------------------------------------------------------------------------
00011FAA                            
00011FAA                            Obj0C:					; XREF: Obj_Index
00011FAA 7000                       		moveq	#0,d0
00011FAC 1028 0024                  		move.b	$24(a0),d0
00011FB0 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00011FB4 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00011FB8                            ; ===========================================================================
00011FB8 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00011FBA 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00011FBC                            ; ===========================================================================
00011FBC                            
00011FBC                            Obj0C_Main:				; XREF: Obj0C_Index
00011FBC 5428 0024                  		addq.b	#2,$24(a0)
00011FC0 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00011FC8 317C 4328 0002             		move.w	#$4328,2(a0)
00011FCE 0028 0004 0001             		ori.b	#4,1(a0)
00011FD4 117C 0028 0019             		move.b	#$28,$19(a0)
00011FDA 7000                       		moveq	#0,d0
00011FDC 1028 0028                  		move.b	$28(a0),d0	; get object type
00011FE0 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011FE4 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00011FE8                            
00011FE8                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00011FE8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011FEC 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011FEE 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00011FF4 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011FFA 4A28 0001                  		tst.b	1(a0)
00011FFE 6A00                       		bpl.s	Obj0C_Solid
00012000 303C 00BB                  		move.w	#$BB,d0
00012004 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play door sound
0001200A                            
0001200A                            Obj0C_Solid:
0001200A 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00012010 6100 92E8                  		bsr.w	AnimateSprite
00012014 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00012018 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
0001201C 6600                       		bne.s	Obj0C_Display	; if yes, branch
0001201E 3038 D008                  		move.w	($FFFFD008).w,d0
00012022 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00012026 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00012028 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
0001202E 323C 0013                  		move.w	#$13,d1
00012032 343C 0020                  		move.w	#$20,d2
00012036 3602                       		move.w	d2,d3
00012038 5243                       		addq.w	#1,d3
0001203A 3828 0008                  		move.w	8(a0),d4
0001203E 6100 E62C                  		bsr.w	SolidObject	; make the door	solid
00012042                            
00012042                            Obj0C_Display:
00012042 6000 E300                  		bra.w	MarkObjGone
00012046                            ; ===========================================================================
00012046                            Ani_obj0C:
00012046                            	include "_anim\obj0C.asm"
00012046                            ; ---------------------------------------------------------------------------
00012046                            ; Animation script - flapping door (LZ)
00012046                            ; ---------------------------------------------------------------------------
00012046 0000                       		dc.w byte_113E6-Ani_obj0C
00012048 0000                       		dc.w byte_113EC-Ani_obj0C
0001204A 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00012050 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00012056                            		even
00012056                            		even
00012056                            
00012056                            ; ---------------------------------------------------------------------------
00012056                            ; Sprite mappings - flapping door (LZ)
00012056                            ; ---------------------------------------------------------------------------
00012056                            Map_obj0C:
00012056                            	include "_maps\obj0C.asm"
00012056                            ; ---------------------------------------------------------------------------
00012056                            ; Sprite mappings - flapping door (LZ)
00012056                            ; ---------------------------------------------------------------------------
00012056 0000                       		dc.w byte_113F8-Map_obj0C
00012058 0000                       		dc.w byte_11403-Map_obj0C
0001205A 0000                       		dc.w byte_1140E-Map_obj0C
0001205C 02                         byte_113F8:	dc.b 2
0001205D E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00012062 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012067 02                         byte_11403:	dc.b 2
00012068 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
0001206D 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00012072 02                         byte_1140E:	dc.b 2
00012073 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00012078 180D 1018 00               		dc.b $18, $D, $10, $18,	0
0001207E 00                         		even
0001207E 00                         		even
0001207E                            
0001207E                            ; ===========================================================================
0001207E                            ; ---------------------------------------------------------------------------
0001207E                            ; Object 71 - invisible	solid blocks
0001207E                            ; ---------------------------------------------------------------------------
0001207E                            
0001207E                            Obj71:					; XREF: Obj_Index
0001207E 7000                       		moveq	#0,d0
00012080 1028 0024                  		move.b	$24(a0),d0
00012084 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00012088 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
0001208C                            ; ===========================================================================
0001208C 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
0001208E 0000                       		dc.w Obj71_Solid-Obj71_Index
00012090                            ; ===========================================================================
00012090                            
00012090                            Obj71_Main:				; XREF: Obj71_Index
00012090 5428 0024                  		addq.b	#2,$24(a0)
00012094 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
0001209C 317C 8680 0002             		move.w	#$8680,2(a0)
000120A2 0028 0004 0001             		ori.b	#4,1(a0)
000120A8 1028 0028                  		move.b	$28(a0),d0	; get object type
000120AC 1200                       		move.b	d0,d1
000120AE 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
000120B2 0640 0010                  		addi.w	#$10,d0
000120B6 E248                       		lsr.w	#1,d0
000120B8 1140 0019                  		move.b	d0,$19(a0)	; set object width
000120BC 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
000120C0 5241                       		addq.w	#1,d1
000120C2 E749                       		lsl.w	#3,d1
000120C4 1141 0016                  		move.b	d1,$16(a0)	; set object height
000120C8                            
000120C8                            Obj71_Solid:				; XREF: Obj71_Index
000120C8 6100 C452                  		bsr.w	ChkObjOnScreen
000120CC 6600                       		bne.s	Obj71_ChkDel
000120CE 7200                       		moveq	#0,d1
000120D0 1228 0019                  		move.b	$19(a0),d1
000120D4 0641 000B                  		addi.w	#$B,d1
000120D8 7400                       		moveq	#0,d2
000120DA 1428 0016                  		move.b	$16(a0),d2
000120DE 3602                       		move.w	d2,d3
000120E0 5243                       		addq.w	#1,d3
000120E2 3828 0008                  		move.w	8(a0),d4
000120E6 6100 E5CC                  		bsr.w	SolidObject71
000120EA                            
000120EA                            Obj71_ChkDel:
000120EA 3028 0008                  		move.w	8(a0),d0
000120EE 0240 FF80                  		andi.w	#$FF80,d0
000120F2 3238 F700                  		move.w	($FFFFF700).w,d1
000120F6 0441 0080                  		subi.w	#$80,d1
000120FA 0241 FF80                  		andi.w	#$FF80,d1
000120FE 9041                       		sub.w	d1,d0
00012100 0C40 0280                  		cmpi.w	#$280,d0
00012104 6200                       		bhi.s	Obj71_Delete
00012106 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
0001210A 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
0001210C 4EFA C194                  		jmp	DisplaySprite	; if yes, display the object
00012110                            ; ===========================================================================
00012110                            
00012110                            Obj71_NoDisplay:
00012110 4E75                       		rts	
00012112                            ; ===========================================================================
00012112                            
00012112                            Obj71_Delete:
00012112 4EFA C1CA                  		jmp	DeleteObject
00012116                            ; ===========================================================================
00012116                            ; ---------------------------------------------------------------------------
00012116                            ; Sprite mappings - invisible solid blocks
00012116                            ; ---------------------------------------------------------------------------
00012116                            Map_obj71:
00012116                            	include "_maps\obj71.asm"
00012116                            ; ---------------------------------------------------------------------------
00012116                            ; Sprite mappings - invisible solid blocks
00012116                            ; ---------------------------------------------------------------------------
00012116 0000                       		dc.w byte_114BC-Map_obj71
00012118 0000                       		dc.w byte_114D1-Map_obj71
0001211A 0000                       		dc.w byte_114E6-Map_obj71
0001211C 04                         byte_114BC:	dc.b 4
0001211D F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00012122 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00012127 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
0001212C 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00012131 04                         byte_114D1:	dc.b 4
00012132 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00012137 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
0001213C 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00012141 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00012146 04                         byte_114E6:	dc.b 4
00012147 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
0001214C E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00012151 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00012156 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
0001215C 00                         		even
0001215C 00                         		even
0001215C                            
0001215C                            ; ===========================================================================
0001215C                            ; ---------------------------------------------------------------------------
0001215C                            ; Object 5D - fans (SLZ)
0001215C                            ; ---------------------------------------------------------------------------
0001215C                            
0001215C                            Obj5D:					; XREF: Obj_Index
0001215C 7000                       		moveq	#0,d0
0001215E 1028 0024                  		move.b	$24(a0),d0
00012162 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00012166 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
0001216A                            ; ===========================================================================
0001216A 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
0001216C 0000                       		dc.w Obj5D_Delay-Obj5D_Index
0001216E                            ; ===========================================================================
0001216E                            
0001216E                            Obj5D_Main:				; XREF: Obj5D_Index
0001216E 5428 0024                  		addq.b	#2,$24(a0)
00012172 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
0001217A 317C 43A0 0002             		move.w	#$43A0,2(a0)
00012180 0028 0004 0001             		ori.b	#4,1(a0)
00012186 117C 0010 0019             		move.b	#$10,$19(a0)
0001218C 117C 0004 0018             		move.b	#4,$18(a0)
00012192                            
00012192                            Obj5D_Delay:				; XREF: Obj5D_Index
00012192 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00012198 6600                       		bne.s	Obj5D_Blow	; if yes, branch
0001219A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001219E 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
000121A0 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
000121A6 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
000121AC 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
000121AE 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
000121B4                            
000121B4                            Obj5D_Blow:
000121B4 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
000121B8 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
000121BC 43F8 D000                  		lea	($FFFFD000).w,a1
000121C0 3029 0008                  		move.w	8(a1),d0
000121C4 9068 0008                  		sub.w	8(a0),d0
000121C8 0828 0000 0022             		btst	#0,$22(a0)
000121CE 6600                       		bne.s	Obj5D_ChkSonic
000121D0 4440                       		neg.w	d0
000121D2                            
000121D2                            Obj5D_ChkSonic:
000121D2 0640 0050                  		addi.w	#$50,d0
000121D6 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
000121DA 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
000121DC 3229 000C                  		move.w	$C(a1),d1
000121E0 0641 0060                  		addi.w	#$60,d1
000121E4 9268 000C                  		sub.w	$C(a0),d1
000121E8 6500                       		bcs.s	Obj5D_Animate
000121EA 0C41 0070                  		cmpi.w	#$70,d1
000121EE 6400                       		bcc.s	Obj5D_Animate
000121F0 0440 0050                  		subi.w	#$50,d0
000121F4 6400                       		bcc.s	loc_1159A
000121F6 4640                       		not.w	d0
000121F8 D040                       		add.w	d0,d0
000121FA                            
000121FA                            loc_1159A:
000121FA 0640 0060                  		addi.w	#$60,d0
000121FE 0828 0000 0022             		btst	#0,$22(a0)
00012204 6600                       		bne.s	loc_115A8
00012206 4440                       		neg.w	d0
00012208                            
00012208                            loc_115A8:
00012208 4400                       		neg.b	d0
0001220A E840                       		asr.w	#4,d0
0001220C 0828 0000 0028             		btst	#0,$28(a0)
00012212 6700                       		beq.s	Obj5D_MoveSonic
00012214 4440                       		neg.w	d0
00012216                            
00012216                            Obj5D_MoveSonic:
00012216 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
0001221A                            
0001221A                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
0001221A 5328 001E                  		subq.b	#1,$1E(a0)
0001221E 6A00                       		bpl.s	Obj5D_ChkDel
00012220 117C 0000 001E             		move.b	#0,$1E(a0)
00012226 5228 001B                  		addq.b	#1,$1B(a0)
0001222A 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00012230 6500                       		bcs.s	loc_115D8
00012232 117C 0000 001B             		move.b	#0,$1B(a0)
00012238                            
00012238                            loc_115D8:
00012238 7000                       		moveq	#0,d0
0001223A 0828 0000 0028             		btst	#0,$28(a0)
00012240 6700                       		beq.s	loc_115E4
00012242 7002                       		moveq	#2,d0
00012244                            
00012244                            loc_115E4:
00012244 D028 001B                  		add.b	$1B(a0),d0
00012248 1140 001A                  		move.b	d0,$1A(a0)
0001224C                            
0001224C                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
0001224C 6100 C054                  		bsr.w	DisplaySprite
00012250 3028 0008                  		move.w	8(a0),d0
00012254 0240 FF80                  		andi.w	#$FF80,d0
00012258 3238 F700                  		move.w	($FFFFF700).w,d1
0001225C 0441 0080                  		subi.w	#$80,d1
00012260 0241 FF80                  		andi.w	#$FF80,d1
00012264 9041                       		sub.w	d1,d0
00012266 0C40 0280                  		cmpi.w	#$280,d0
0001226A 6200 C072                  		bhi.w	DeleteObject
0001226E 4E75                       		rts	
00012270                            ; ===========================================================================
00012270                            ; ---------------------------------------------------------------------------
00012270                            ; Sprite mappings - fans (SLZ)
00012270                            ; ---------------------------------------------------------------------------
00012270                            Map_obj5D:
00012270                            	include "_maps\obj5D.asm"
00012270                            ; ---------------------------------------------------------------------------
00012270                            ; Sprite mappings - fans (SLZ)
00012270                            ; ---------------------------------------------------------------------------
00012270 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00012274 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00012278 0000                       		dc.w byte_1161A-Map_obj5D
0001227A 02                         byte_1161A:	dc.b 2
0001227B F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00012280 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00012285 02                         byte_11625:	dc.b 2
00012286 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
0001228B 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00012290 02                         byte_11630:	dc.b 2
00012291 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00012296 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
0001229C 00                         		even
0001229C 00                         		even
0001229C                            
0001229C                            ; ===========================================================================
0001229C                            ; ---------------------------------------------------------------------------
0001229C                            ; Object 5E - seesaws (SLZ)
0001229C                            ; ---------------------------------------------------------------------------
0001229C                            
0001229C                            Obj5E:					; XREF: Obj_Index
0001229C 7000                       		moveq	#0,d0
0001229E 1028 0024                  		move.b	$24(a0),d0
000122A2 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
000122A6 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
000122AA 3028 0030                  		move.w	$30(a0),d0
000122AE 0240 FF80                  		andi.w	#$FF80,d0
000122B2 3238 F700                  		move.w	($FFFFF700).w,d1
000122B6 0441 0080                  		subi.w	#$80,d1
000122BA 0241 FF80                  		andi.w	#$FF80,d1
000122BE 9041                       		sub.w	d1,d0
000122C0 6B00 C01C                  		bmi.w	DeleteObject
000122C4 0C40 0280                  		cmpi.w	#$280,d0
000122C8 6200 C014                  		bhi.w	DeleteObject
000122CC 6000 BFD4                  		bra.w	DisplaySprite
000122D0                            ; ===========================================================================
000122D0 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
000122D2 0000                       		dc.w Obj5E_Slope-Obj5E_Index
000122D4 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
000122D6 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
000122D8 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
000122DA 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
000122DC                            ; ===========================================================================
000122DC                            
000122DC                            Obj5E_Main:				; XREF: Obj5E_Index
000122DC 5428 0024                  		addq.b	#2,$24(a0)
000122E0 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
000122E8 317C 0374 0002             		move.w	#$374,2(a0)
000122EE 0028 0004 0001             		ori.b	#4,1(a0)
000122F4 117C 0004 0018             		move.b	#4,$18(a0)
000122FA 117C 0030 0019             		move.b	#$30,$19(a0)
00012300 3168 0008 0030             		move.w	8(a0),$30(a0)
00012306 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
0001230A 6600                       		bne.s	loc_116D2	; if not, branch
0001230C 6100 C430                  		bsr.w	SingleObjLoad2
00012310 6600                       		bne.s	loc_116D2
00012312 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00012316 5C29 0024                  		addq.b	#6,$24(a1)
0001231A 3368 0008 0008             		move.w	8(a0),8(a1)
00012320 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012326 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001232C 2348 003C                  		move.l	a0,$3C(a1)
00012330                            
00012330                            loc_116D2:
00012330 0828 0000 0022             		btst	#0,$22(a0)
00012336 6700                       		beq.s	loc_116E0
00012338 117C 0002 001A             		move.b	#2,$1A(a0)
0001233E                            
0001233E                            loc_116E0:
0001233E 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00012344                            
00012344                            Obj5E_Slope:				; XREF: Obj5E_Index
00012344 1228 003A                  		move.b	$3A(a0),d1
00012348 6100 0000                  		bsr.w	loc_11766
0001234C 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00012352 0828 0000 001A             		btst	#0,$1A(a0)
00012358 6700                       		beq.s	loc_11702
0001235A 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00012360                            
00012360                            loc_11702:
00012360 43F8 D000                  		lea	($FFFFD000).w,a1
00012364 3169 0012 0038             		move.w	$12(a1),$38(a0)
0001236A 323C 0030                  		move.w	#$30,d1
0001236E 4EB9 0000 7F9C             		jsr	(SlopeObject).l
00012374 4E75                       		rts	
00012376                            ; ===========================================================================
00012376                            
00012376                            Obj5E_Slope2:				; XREF: Obj5E_Index
00012376 6100 0000                  		bsr.w	loc_1174A
0001237A 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00012380 0828 0000 001A             		btst	#0,$1A(a0)
00012386 6700                       		beq.s	loc_11730
00012388 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
0001238E                            
0001238E                            loc_11730:
0001238E 323C 0030                  		move.w	#$30,d1
00012392 4EB9 0000 803C             		jsr	(ExitPlatform).l
00012398 323C 0030                  		move.w	#$30,d1
0001239C 3428 0008                  		move.w	8(a0),d2
000123A0 4EB9 0000 902C             		jsr	SlopeObject2
000123A6 4E75                       		rts	
000123A8                            ; ===========================================================================
000123A8                            
000123A8                            loc_1174A:				; XREF: Obj5E_Slope2
000123A8 7202                       		moveq	#2,d1
000123AA 43F8 D000                  		lea	($FFFFD000).w,a1
000123AE 3028 0008                  		move.w	8(a0),d0
000123B2 9069 0008                  		sub.w	8(a1),d0
000123B6 6400                       		bcc.s	loc_1175E
000123B8 4440                       		neg.w	d0
000123BA 7200                       		moveq	#0,d1
000123BC                            
000123BC                            loc_1175E:
000123BC 0C40 0008                  		cmpi.w	#8,d0
000123C0 6400                       		bcc.s	loc_11766
000123C2 7201                       		moveq	#1,d1
000123C4                            
000123C4                            loc_11766:
000123C4 1028 001A                  		move.b	$1A(a0),d0
000123C8 B001                       		cmp.b	d1,d0
000123CA 6700                       		beq.s	locret_11790
000123CC 6400                       		bcc.s	loc_11772
000123CE 5400                       		addq.b	#2,d0
000123D0                            
000123D0                            loc_11772:
000123D0 5300                       		subq.b	#1,d0
000123D2 1140 001A                  		move.b	d0,$1A(a0)
000123D6 1141 003A                  		move.b	d1,$3A(a0)
000123DA 08A8 0000 0001             		bclr	#0,1(a0)
000123E0 0828 0001 001A             		btst	#1,$1A(a0)
000123E6 6700                       		beq.s	locret_11790
000123E8 08E8 0000 0001             		bset	#0,1(a0)
000123EE                            
000123EE                            locret_11790:
000123EE 4E75                       		rts	
000123F0                            ; ===========================================================================
000123F0                            
000123F0                            Obj5E_Spikeball:			; XREF: Obj5E_Index
000123F0 5428 0024                  		addq.b	#2,$24(a0)
000123F4 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
000123FC 317C 04F0 0002             		move.w	#$4F0,2(a0)
00012402 0028 0004 0001             		ori.b	#4,1(a0)
00012408 117C 0004 0018             		move.b	#4,$18(a0)
0001240E 117C 008B 0020             		move.b	#$8B,$20(a0)
00012414 117C 000C 0019             		move.b	#$C,$19(a0)
0001241A 3168 0008 0030             		move.w	8(a0),$30(a0)
00012420 0668 0028 0008             		addi.w	#$28,8(a0)
00012426 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001242C 117C 0001 001A             		move.b	#1,$1A(a0)
00012432 0828 0000 0022             		btst	#0,$22(a0)
00012438 6700                       		beq.s	Obj5E_MoveSpike
0001243A 0468 0050 0008             		subi.w	#$50,8(a0)
00012440 117C 0002 003A             		move.b	#2,$3A(a0)
00012446                            
00012446                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00012446 2268 003C                  		movea.l	$3C(a0),a1
0001244A 7000                       		moveq	#0,d0
0001244C 1028 003A                  		move.b	$3A(a0),d0
00012450 9029 003A                  		sub.b	$3A(a1),d0
00012454 6700                       		beq.s	loc_1183E
00012456 6400                       		bcc.s	loc_117FC
00012458 4400                       		neg.b	d0
0001245A                            
0001245A                            loc_117FC:
0001245A 323C F7E8                  		move.w	#-$818,d1
0001245E 343C FEEC                  		move.w	#-$114,d2
00012462 0C00 0001                  		cmpi.b	#1,d0
00012466 6700                       		beq.s	loc_11822
00012468 323C F510                  		move.w	#-$AF0,d1
0001246C 343C FF34                  		move.w	#-$CC,d2
00012470 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00012476 6D00                       		blt.s	loc_11822
00012478 323C F200                  		move.w	#-$E00,d1
0001247C 343C FF60                  		move.w	#-$A0,d2
00012480                            
00012480                            loc_11822:
00012480 3141 0012                  		move.w	d1,$12(a0)
00012484 3142 0010                  		move.w	d2,$10(a0)
00012488 3028 0008                  		move.w	8(a0),d0
0001248C 9068 0030                  		sub.w	$30(a0),d0
00012490 6400                       		bcc.s	loc_11838
00012492 4468 0010                  		neg.w	$10(a0)
00012496                            
00012496                            loc_11838:
00012496 5428 0024                  		addq.b	#2,$24(a0)
0001249A 6000                       		bra.s	Obj5E_SpikeFall
0001249C                            ; ===========================================================================
0001249C                            
0001249C                            loc_1183E:				; XREF: Obj5E_MoveSpike
0001249C 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
000124A2 7000                       		moveq	#0,d0
000124A4 1029 001A                  		move.b	$1A(a1),d0
000124A8 343C 0028                  		move.w	#$28,d2
000124AC 3228 0008                  		move.w	8(a0),d1
000124B0 9268 0030                  		sub.w	$30(a0),d1
000124B4 6400                       		bcc.s	loc_1185C
000124B6 4442                       		neg.w	d2
000124B8 5440                       		addq.w	#2,d0
000124BA                            
000124BA                            loc_1185C:
000124BA D040                       		add.w	d0,d0
000124BC 3228 0034                  		move.w	$34(a0),d1
000124C0 D272 0000                  		add.w	(a2,d0.w),d1
000124C4 3141 000C                  		move.w	d1,$C(a0)
000124C8 D468 0030                  		add.w	$30(a0),d2
000124CC 3142 0008                  		move.w	d2,8(a0)
000124D0 4268 000E                  		clr.w	$E(a0)
000124D4 4268 000A                  		clr.w	$A(a0)
000124D8 4E75                       		rts	
000124DA                            ; ===========================================================================
000124DA                            
000124DA                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
000124DA 4A68 0012                  		tst.w	$12(a0)
000124DE 6A00                       		bpl.s	loc_1189A
000124E0 6100 BD24                  		bsr.w	ObjectFall
000124E4 3028 0034                  		move.w	$34(a0),d0
000124E8 0440 002F                  		subi.w	#$2F,d0
000124EC B068 000C                  		cmp.w	$C(a0),d0
000124F0 6E00                       		bgt.s	locret_11898
000124F2 6100 BD12                  		bsr.w	ObjectFall
000124F6                            
000124F6                            locret_11898:
000124F6 4E75                       		rts	
000124F8                            ; ===========================================================================
000124F8                            
000124F8                            loc_1189A:				; XREF: Obj5E_SpikeFall
000124F8 6100 BD0C                  		bsr.w	ObjectFall
000124FC 2268 003C                  		movea.l	$3C(a0),a1
00012500 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00012506 7000                       		moveq	#0,d0
00012508 1029 001A                  		move.b	$1A(a1),d0
0001250C 3228 0008                  		move.w	8(a0),d1
00012510 9268 0030                  		sub.w	$30(a0),d1
00012514 6400                       		bcc.s	loc_118BA
00012516 5440                       		addq.w	#2,d0
00012518                            
00012518                            loc_118BA:
00012518 D040                       		add.w	d0,d0
0001251A 3228 0034                  		move.w	$34(a0),d1
0001251E D272 0000                  		add.w	(a2,d0.w),d1
00012522 B268 000C                  		cmp.w	$C(a0),d1
00012526 6E00                       		bgt.s	locret_11938
00012528 2268 003C                  		movea.l	$3C(a0),a1
0001252C 7202                       		moveq	#2,d1
0001252E 4A68 0010                  		tst.w	$10(a0)
00012532 6B00                       		bmi.s	Obj5E_Spring
00012534 7200                       		moveq	#0,d1
00012536                            
00012536                            Obj5E_Spring:
00012536 1341 003A                  		move.b	d1,$3A(a1)
0001253A 1141 003A                  		move.b	d1,$3A(a0)
0001253E B229 001A                  		cmp.b	$1A(a1),d1
00012542 6700                       		beq.s	loc_1192C
00012544 08A9 0003 0022             		bclr	#3,$22(a1)
0001254A 6700                       		beq.s	loc_1192C
0001254C 4229 0025                  		clr.b	$25(a1)
00012550 137C 0002 0024             		move.b	#2,$24(a1)
00012556 45F8 D000                  		lea	($FFFFD000).w,a2
0001255A 3568 0012 0012             		move.w	$12(a0),$12(a2)
00012560 446A 0012                  		neg.w	$12(a2)
00012564 08EA 0001 0022             		bset	#1,$22(a2)
0001256A 08AA 0003 0022             		bclr	#3,$22(a2)
00012570 422A 003C                  		clr.b	$3C(a2)
00012574 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
0001257A 157C 0002 0024             		move.b	#2,$24(a2)
00012580 303C 00CC                  		move.w	#$CC,d0
00012584 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play spring sound
0001258A                            
0001258A                            loc_1192C:
0001258A 4268 0010                  		clr.w	$10(a0)
0001258E 4268 0012                  		clr.w	$12(a0)
00012592 5528 0024                  		subq.b	#2,$24(a0)
00012596                            
00012596                            locret_11938:
00012596 4E75                       		rts	
00012598                            ; ===========================================================================
00012598 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
000125A2                            
000125A2                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
000125D2                            		even
000125D2                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00012602                            		even
00012602                            ; ---------------------------------------------------------------------------
00012602                            ; Sprite mappings - seesaws (SLZ)
00012602                            ; ---------------------------------------------------------------------------
00012602                            Map_obj5E:
00012602                            	include "_maps\obj5E.asm"
00012602                            ; ---------------------------------------------------------------------------
00012602                            ; Sprite mappings - seesaws (SLZ)
00012602                            ; ---------------------------------------------------------------------------
00012602 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00012606 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
0001260A 07                         byte_119AC:	dc.b 7
0001260B D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00012610 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00012615 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
0001261A EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
0001261F FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00012624 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00012629 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
0001262E 04                         byte_119D0:	dc.b 4
0001262F E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00012634 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00012639 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
0001263E E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00012644 00                         		even
00012644 00                         		even
00012644                            
00012644                            ; ---------------------------------------------------------------------------
00012644                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00012644                            ; ---------------------------------------------------------------------------
00012644                            Map_obj5Ea:
00012644                            	include "_maps\obj5Eballs.asm"
00012644                            ; ---------------------------------------------------------------------------
00012644                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00012644                            ; ---------------------------------------------------------------------------
00012644 0000                       		dc.w byte_119EA-Map_obj5Ea
00012646 0000                       		dc.w byte_119F0-Map_obj5Ea
00012648 01                         byte_119EA:	dc.b 1
00012649 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001264E 01                         byte_119F0:	dc.b 1
0001264F F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00012654                            		even
00012654                            		even
00012654                            
00012654                            ; ===========================================================================
00012654                            ; ---------------------------------------------------------------------------
00012654                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00012654                            ; ---------------------------------------------------------------------------
00012654                            
00012654                            Obj5F:					; XREF: Obj_Index
00012654 7000                       		moveq	#0,d0
00012656 1028 0024                  		move.b	$24(a0),d0
0001265A 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
0001265E 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00012662                            ; ===========================================================================
00012662 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00012664 0000                       		dc.w Obj5F_Action-Obj5F_Index
00012666 0000                       		dc.w Obj5F_Display-Obj5F_Index
00012668 0000                       		dc.w Obj5F_End-Obj5F_Index
0001266A                            ; ===========================================================================
0001266A                            
0001266A                            Obj5F_Main:				; XREF: Obj5F_Index
0001266A 5428 0024                  		addq.b	#2,$24(a0)
0001266E 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00012676 317C 0400 0002             		move.w	#$400,2(a0)
0001267C 0028 0004 0001             		ori.b	#4,1(a0)
00012682 117C 0003 0018             		move.b	#3,$18(a0)
00012688 117C 000C 0019             		move.b	#$C,$19(a0)
0001268E 1028 0028                  		move.b	$28(a0),d0
00012692 6700                       		beq.s	loc_11A3C
00012694 1140 0024                  		move.b	d0,$24(a0)
00012698 4E75                       		rts	
0001269A                            ; ===========================================================================
0001269A                            
0001269A                            loc_11A3C:
0001269A 117C 009A 0020             		move.b	#$9A,$20(a0)
000126A0 0868 0000 0022             		bchg	#0,$22(a0)
000126A6                            
000126A6                            Obj5F_Action:				; XREF: Obj5F_Index
000126A6 7000                       		moveq	#0,d0
000126A8 1028 0025                  		move.b	$25(a0),d0
000126AC 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
000126B0 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
000126B4 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000126BA 6100 8C3E                  		bsr.w	AnimateSprite
000126BE 6000 DC84                  		bra.w	MarkObjGone
000126C2                            ; ===========================================================================
000126C2 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
000126C4 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
000126C6 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
000126C8                            ; ===========================================================================
000126C8                            
000126C8                            Obj5F_Walk:				; XREF: Obj5F_Index2
000126C8 6100 0000                  		bsr.w	Obj5F_ChkSonic
000126CC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000126D0 6A00                       		bpl.s	locret_11A96	; if time remains, branch
000126D2 5428 0025                  		addq.b	#2,$25(a0)
000126D6 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
000126DC 317C 0010 0010             		move.w	#$10,$10(a0)
000126E2 117C 0001 001C             		move.b	#1,$1C(a0)
000126E8 0868 0000 0022             		bchg	#0,$22(a0)
000126EE 6700                       		beq.s	locret_11A96
000126F0 4468 0010                  		neg.w	$10(a0)		; change direction
000126F4                            
000126F4                            locret_11A96:
000126F4 4E75                       		rts	
000126F6                            ; ===========================================================================
000126F6                            
000126F6                            Obj5F_Wait:				; XREF: Obj5F_Index2
000126F6 6100 0000                  		bsr.w	Obj5F_ChkSonic
000126FA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000126FE 6B00                       		bmi.s	loc_11AA8
00012700 6000 BB66                  		bra.w	SpeedToPos
00012704                            ; ===========================================================================
00012704                            
00012704                            loc_11AA8:
00012704 5528 0025                  		subq.b	#2,$25(a0)
00012708 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
0001270E 4268 0010                  		clr.w	$10(a0)		; stop walking
00012712 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00012718 4E75                       		rts	
0001271A                            ; ===========================================================================
0001271A                            
0001271A                            Obj5F_Explode:				; XREF: Obj5F_Index2
0001271A 5368 0030                  		subq.w	#1,$30(a0)
0001271E 6A00                       		bpl.s	locret_11AD0
00012720 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00012724 117C 0000 0024             		move.b	#0,$24(a0)
0001272A                            
0001272A                            locret_11AD0:
0001272A 4E75                       		rts	
0001272C                            ; ===========================================================================
0001272C                            
0001272C                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
0001272C 3038 D008                  		move.w	($FFFFD008).w,d0
00012730 9068 0008                  		sub.w	8(a0),d0
00012734 6400                       		bcc.s	loc_11ADE
00012736 4440                       		neg.w	d0
00012738                            
00012738                            loc_11ADE:
00012738 0C40 0060                  		cmpi.w	#$60,d0
0001273C 6400                       		bcc.s	locret_11B5E
0001273E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012742 9068 000C                  		sub.w	$C(a0),d0
00012746 6400                       		bcc.s	Obj5F_MakeFuse
00012748 4440                       		neg.w	d0
0001274A                            
0001274A                            Obj5F_MakeFuse:
0001274A 0C40 0060                  		cmpi.w	#$60,d0
0001274E 6400                       		bcc.s	locret_11B5E
00012750 4A78 FE08                  		tst.w	($FFFFFE08).w
00012754 6600                       		bne.s	locret_11B5E
00012756 117C 0004 0025             		move.b	#4,$25(a0)
0001275C 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00012762 4268 0010                  		clr.w	$10(a0)
00012766 117C 0002 001C             		move.b	#2,$1C(a0)
0001276C 6100 BFD0                  		bsr.w	SingleObjLoad2
00012770 6600                       		bne.s	locret_11B5E
00012772 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
00012776 3368 0008 0008             		move.w	8(a0),8(a1)
0001277C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012782 3368 000C 0034             		move.w	$C(a0),$34(a1)
00012788 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001278E 137C 0004 0028             		move.b	#4,$28(a1)
00012794 137C 0003 001C             		move.b	#3,$1C(a1)
0001279A 337C 0010 0012             		move.w	#$10,$12(a1)
000127A0 0828 0001 0022             		btst	#1,$22(a0)
000127A6 6700                       		beq.s	loc_11B54
000127A8 4469 0012                  		neg.w	$12(a1)
000127AC                            
000127AC                            loc_11B54:
000127AC 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
000127B2 2348 003C                  		move.l	a0,$3C(a1)
000127B6                            
000127B6                            locret_11B5E:
000127B6 4E75                       		rts	
000127B8                            ; ===========================================================================
000127B8                            
000127B8                            Obj5F_Display:				; XREF: Obj5F_Index
000127B8 6100                       		bsr.s	loc_11B70
000127BA 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000127C0 6100 8B38                  		bsr.w	AnimateSprite
000127C4 6000 DB7E                  		bra.w	MarkObjGone
000127C8                            ; ===========================================================================
000127C8                            
000127C8                            loc_11B70:
000127C8 5368 0030                  		subq.w	#1,$30(a0)
000127CC 6B00                       		bmi.s	loc_11B7C
000127CE 6000 BA98                  		bra.w	SpeedToPos
000127D2                            ; ===========================================================================
000127D2                            
000127D2                            loc_11B7C:
000127D2 4268 0030                  		clr.w	$30(a0)
000127D6 4228 0024                  		clr.b	$24(a0)
000127DA 3168 0034 000C             		move.w	$34(a0),$C(a0)
000127E0 7203                       		moveq	#3,d1
000127E2 2248                       		movea.l	a0,a1
000127E4 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
000127EA 6000                       		bra.s	Obj5F_MakeShrap
000127EC                            ; ===========================================================================
000127EC                            
000127EC                            Obj5F_Loop:
000127EC 6100 BF50                  		bsr.w	SingleObjLoad2
000127F0 6600                       		bne.s	loc_11BCE
000127F2                            
000127F2                            Obj5F_MakeShrap:			; XREF: loc_11B7C
000127F2 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
000127F6 3368 0008 0008             		move.w	8(a0),8(a1)
000127FC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012802 137C 0006 0028             		move.b	#6,$28(a1)
00012808 137C 0004 001C             		move.b	#4,$1C(a1)
0001280E 335A 0010                  		move.w	(a2)+,$10(a1)
00012812 335A 0012                  		move.w	(a2)+,$12(a1)
00012816 137C 0098 0020             		move.b	#$98,$20(a1)
0001281C 08E9 0007 0001             		bset	#7,1(a1)
00012822                            
00012822                            loc_11BCE:
00012822 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
00012826                            
00012826 117C 0006 0024             		move.b	#6,$24(a0)
0001282C                            
0001282C                            Obj5F_End:				; XREF: Obj5F_Index
0001282C 7218                       		moveq	#$18,d1
0001282E 6100 B9D8                  		bsr.w	ObjectFallCustom
00012832 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012838 6100 8AC0                  		bsr.w	AnimateSprite
0001283C 4A28 0001                  		tst.b	1(a0)
00012840 6A00 BA9C                  		bpl.w	DeleteObject
00012844 6000 BA5C                  		bra.w	DisplaySprite
00012848                            ; ===========================================================================
00012848 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00012858                            
00012858                            Ani_obj5F:
00012858                            	include "_anim\obj5F.asm"
00012858                            ; ---------------------------------------------------------------------------
00012858                            ; Animation script - Bomb enemy
00012858                            ; ---------------------------------------------------------------------------
00012858 0000                       		dc.w byte_11C12-Ani_obj5F
0001285A 0000                       		dc.w byte_11C16-Ani_obj5F
0001285C 0000                       		dc.w byte_11C1C-Ani_obj5F
0001285E 0000                       		dc.w byte_11C20-Ani_obj5F
00012860 0000                       		dc.w byte_11C24-Ani_obj5F
00012862 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00012866 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
0001286C 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00012870 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00012874 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00012878                            		even
00012878                            		even
00012878                            
00012878                            ; ---------------------------------------------------------------------------
00012878                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012878                            ; ---------------------------------------------------------------------------
00012878                            Map_obj5F:
00012878                            	include "_maps\obj5F.asm"
00012878                            ; ---------------------------------------------------------------------------
00012878                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012878                            ; ---------------------------------------------------------------------------
00012878 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
0001287C 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00012880 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00012884 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00012888 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
0001288C 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00012890 03                         byte_11C40:	dc.b 3
00012891 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012896 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001289B E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000128A0 03                         byte_11C50:	dc.b 3
000128A1 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000128A6 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000128AB E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000128B0 03                         byte_11C60:	dc.b 3
000128B1 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000128B6 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
000128BB E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000128C0 03                         byte_11C70:	dc.b 3
000128C1 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000128C6 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
000128CB E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000128D0 03                         byte_11C80:	dc.b 3
000128D1 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000128D6 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
000128DB E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000128E0 03                         byte_11C90:	dc.b 3
000128E1 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000128E6 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
000128EB E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000128F0 02                         byte_11CA0:	dc.b 2
000128F1 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000128F6 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000128FB 02                         byte_11CAB:	dc.b 2
000128FC F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012901 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012906 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
00012907 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
0001290C 01                         byte_11CBC:	dc.b 1			; fuse
0001290D E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00012912 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
00012913 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00012918 01                         byte_11CC8:	dc.b 1			; fireball
00012919 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001291E                            		even
0001291E                            		even
0001291E                            
0001291E                            ; ===========================================================================
0001291E                            ; ---------------------------------------------------------------------------
0001291E                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
0001291E                            ; ---------------------------------------------------------------------------
0001291E                            
0001291E                            Obj60:					; XREF: Obj_Index
0001291E 7000                       		moveq	#0,d0
00012920 1028 0024                  		move.b	$24(a0),d0
00012924 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
00012928 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
0001292C                            ; ===========================================================================
0001292C 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
0001292E 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00012930 0000                       		dc.w Obj60_Display-Obj60_Index
00012932 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00012934 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00012936                            ; ===========================================================================
00012936                            
00012936                            Obj60_Main:				; XREF: Obj60_Index
00012936 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
0001293E 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00012944 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0001294A 6700                       		beq.s	loc_11D02
0001294C 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
00012952                            
00012952                            loc_11D02:
00012952 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00012958 6600                       		bne.s	loc_11D10
0001295A 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00012960                            
00012960                            loc_11D10:
00012960 0028 0004 0001             		ori.b	#4,1(a0)
00012966 117C 0004 0018             		move.b	#4,$18(a0)
0001296C 117C 000B 0020             		move.b	#$B,$20(a0)
00012972 117C 000C 0019             		move.b	#$C,$19(a0)
00012978 7400                       		moveq	#0,d2
0001297A 45E8 0037                  		lea	$37(a0),a2
0001297E 264A                       		movea.l	a2,a3
00012980 524A                       		addq.w	#1,a2
00012982 7203                       		moveq	#3,d1
00012984                            
00012984                            Obj60_MakeOrbs:
00012984 6100 BDB8                  		bsr.w	SingleObjLoad2
00012988 6600                       		bne.s	loc_11D90
0001298A 5213                       		addq.b	#1,(a3)
0001298C 3A09                       		move.w	a1,d5
0001298E 0445 D000                  		subi.w	#-$3000,d5
00012992 EC4D                       		lsr.w	#6,d5
00012994 0245 007F                  		andi.w	#$7F,d5
00012998 14C5                       		move.b	d5,(a2)+
0001299A 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
0001299C 137C 0006 0024             		move.b	#6,$24(a1)
000129A2 2368 0004 0004             		move.l	4(a0),4(a1)
000129A8 3368 0002 0002             		move.w	2(a0),2(a1)
000129AE 0029 0004 0001             		ori.b	#4,1(a1)
000129B4 137C 0004 0018             		move.b	#4,$18(a1)
000129BA 137C 0008 0019             		move.b	#8,$19(a1)
000129C0 137C 0003 001A             		move.b	#3,$1A(a1)
000129C6 137C 0098 0020             		move.b	#$98,$20(a1)
000129CC 1342 0026                  		move.b	d2,$26(a1)
000129D0 0602 0040                  		addi.b	#$40,d2
000129D4 2348 003C                  		move.l	a0,$3C(a1)
000129D8 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
000129DC                            
000129DC                            loc_11D90:
000129DC 7001                       		moveq	#1,d0
000129DE 0828 0000 0022             		btst	#0,$22(a0)
000129E4 6700                       		beq.s	Obj60_Move
000129E6 4440                       		neg.w	d0
000129E8                            
000129E8                            Obj60_Move:
000129E8 1140 0036                  		move.b	d0,$36(a0)
000129EC 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
000129F2 5428 0024                  		addq.b	#2,$24(a0)
000129F6 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
000129FC 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
00012A02 6700                       		beq.s	locret_11DBC	; if not, branch
00012A04 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
00012A08                            
00012A08                            locret_11DBC:
00012A08 4E75                       		rts	
00012A0A                            ; ===========================================================================
00012A0A                            
00012A0A                            Obj60_ChkSonic:				; XREF: Obj60_Index
00012A0A 3038 D008                  		move.w	($FFFFD008).w,d0
00012A0E 9068 0008                  		sub.w	8(a0),d0
00012A12 6400                       		bcc.s	loc_11DCA
00012A14 4440                       		neg.w	d0
00012A16                            
00012A16                            loc_11DCA:
00012A16 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00012A1A 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012A1C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012A20 9068 000C                  		sub.w	$C(a0),d0
00012A24 6400                       		bcc.s	loc_11DDC
00012A26 4440                       		neg.w	d0
00012A28                            
00012A28                            loc_11DDC:
00012A28 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00012A2C 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012A2E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00012A32 6600                       		bne.s	Obj60_Animate	; if yes, branch
00012A34 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
00012A3A                            
00012A3A                            Obj60_Animate:
00012A3A 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00012A40 6100 88B8                  		bsr.w	AnimateSprite
00012A44 6000 0000                  		bra.w	Obj60_ChkDel
00012A48                            ; ===========================================================================
00012A48                            
00012A48                            Obj60_Display:				; XREF: Obj60_Index
00012A48 6100 B81E                  		bsr.w	SpeedToPos
00012A4C                            
00012A4C                            Obj60_ChkDel:				; XREF: Obj60_Animate
00012A4C 3028 0008                  		move.w	8(a0),d0
00012A50 0240 FF80                  		andi.w	#$FF80,d0
00012A54 3238 F700                  		move.w	($FFFFF700).w,d1
00012A58 0441 0080                  		subi.w	#$80,d1
00012A5C 0241 FF80                  		andi.w	#$FF80,d1
00012A60 9041                       		sub.w	d1,d0
00012A62 0C40 0280                  		cmpi.w	#$280,d0
00012A66 6200 0000                  		bhi.w	Obj60_ChkGone
00012A6A 6000 B836                  		bra.w	DisplaySprite
00012A6E                            ; ===========================================================================
00012A6E                            
00012A6E                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00012A6E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00012A72 7000                       		moveq	#0,d0
00012A74 1028 0023                  		move.b	$23(a0),d0
00012A78 6700                       		beq.s	loc_11E34
00012A7A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012A80                            
00012A80                            loc_11E34:
00012A80 45E8 0037                  		lea	$37(a0),a2
00012A84 7400                       		moveq	#0,d2
00012A86 141A                       		move.b	(a2)+,d2
00012A88 5342                       		subq.w	#1,d2
00012A8A 6500                       		bcs.s	Obj60_Delete
00012A8C                            
00012A8C                            loc_11E40:
00012A8C 7000                       		moveq	#0,d0
00012A8E 101A                       		move.b	(a2)+,d0
00012A90 ED48                       		lsl.w	#6,d0
00012A92 0680 00FF D000             		addi.l	#$FFD000,d0
00012A98 2240                       		movea.l	d0,a1
00012A9A 6100 B844                  		bsr.w	DeleteObject2
00012A9E 51CA FFEC                  		dbf	d2,loc_11E40
00012AA2                            
00012AA2                            Obj60_Delete:
00012AA2 6000 B83A                  		bra.w	DeleteObject
00012AA6                            ; ===========================================================================
00012AA6                            
00012AA6                            Obj60_MoveOrb:				; XREF: Obj60_Index
00012AA6 2268 003C                  		movea.l	$3C(a0),a1
00012AAA 0C11 0060                  		cmpi.b	#$60,0(a1)
00012AAE 6600 B82E                  		bne.w	DeleteObject
00012AB2 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
00012AB8 6600                       		bne.s	Obj60_Circle
00012ABA 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
00012AC0 6600                       		bne.s	Obj60_Circle
00012AC2 5428 0024                  		addq.b	#2,$24(a0)
00012AC6 5329 0037                  		subq.b	#1,$37(a1)
00012ACA 6600                       		bne.s	Obj60_FireOrb
00012ACC 5429 0024                  		addq.b	#2,$24(a1)
00012AD0                            
00012AD0                            Obj60_FireOrb:
00012AD0 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
00012AD6 0829 0000 0022             		btst	#0,$22(a1)
00012ADC 6700                       		beq.s	Obj60_Display2
00012ADE 4468 0010                  		neg.w	$10(a0)
00012AE2                            
00012AE2                            Obj60_Display2:
00012AE2 6000 B7BE                  		bra.w	DisplaySprite
00012AE6                            ; ===========================================================================
00012AE6                            
00012AE6                            Obj60_Circle:				; XREF: Obj60_MoveOrb
00012AE6 1028 0026                  		move.b	$26(a0),d0
00012AEA 4EB9 0000 2D80             		jsr	(CalcSine).l
00012AF0 E841                       		asr.w	#4,d1
00012AF2 D269 0008                  		add.w	8(a1),d1
00012AF6 3141 0008                  		move.w	d1,8(a0)
00012AFA E840                       		asr.w	#4,d0
00012AFC D069 000C                  		add.w	$C(a1),d0
00012B00 3140 000C                  		move.w	d0,$C(a0)
00012B04 1029 0036                  		move.b	$36(a1),d0
00012B08 D128 0026                  		add.b	d0,$26(a0)
00012B0C 6000 B794                  		bra.w	DisplaySprite
00012B10                            ; ===========================================================================
00012B10                            
00012B10                            Obj60_ChkDel2:				; XREF: Obj60_Index
00012B10 4A28 0001                  		tst.b	1(a0)
00012B14 6A00 B7C8                  		bpl.w	DeleteObject
00012B18 6100 B74E                  		bsr.w	SpeedToPos
00012B1C 6000 B784                  		bra.w	DisplaySprite
00012B20                            ; ===========================================================================
00012B20                            Ani_obj60:
00012B20                            	include "_anim\obj60.asm"
00012B20                            ; ---------------------------------------------------------------------------
00012B20                            ; Animation script - Orbinaut enemy
00012B20                            ; ---------------------------------------------------------------------------
00012B20 0000                       		dc.w byte_11EDA-Ani_obj60
00012B22 0000                       		dc.w byte_11EDE-Ani_obj60
00012B24 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
00012B28 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
00012B2E                            		even
00012B2E                            		even
00012B2E                            
00012B2E                            ; ---------------------------------------------------------------------------
00012B2E                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012B2E                            ; ---------------------------------------------------------------------------
00012B2E                            Map_obj60:
00012B2E                            	include "_maps\obj60.asm"
00012B2E                            ; ---------------------------------------------------------------------------
00012B2E                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012B2E                            ; ---------------------------------------------------------------------------
00012B2E 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00012B32 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00012B36 01                         byte_11EEC:	dc.b 1
00012B37 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012B3C 01                         byte_11EF2:	dc.b 1
00012B3D F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00012B42 01                         byte_11EF8:	dc.b 1
00012B43 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00012B48 01                         byte_11EFE:	dc.b 1
00012B49 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00012B4E                            		even
00012B4E                            		even
00012B4E                            
00012B4E                            ; ===========================================================================
00012B4E                            ; ---------------------------------------------------------------------------
00012B4E                            ; Object 16 - harpoon (LZ)
00012B4E                            ; ---------------------------------------------------------------------------
00012B4E                            
00012B4E                            Obj16:					; XREF: Obj_Index
00012B4E 7000                       		moveq	#0,d0
00012B50 1028 0024                  		move.b	$24(a0),d0
00012B54 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
00012B58 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
00012B5C                            ; ===========================================================================
00012B5C 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00012B5E 0000                       		dc.w Obj16_Move-Obj16_Index
00012B60 0000                       		dc.w Obj16_Wait-Obj16_Index
00012B62                            ; ===========================================================================
00012B62                            
00012B62                            Obj16_Main:				; XREF: Obj16_Index
00012B62 5428 0024                  		addq.b	#2,$24(a0)
00012B66 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00012B6E 317C 03CC 0002             		move.w	#$3CC,2(a0)
00012B74 0028 0004 0001             		ori.b	#4,1(a0)
00012B7A 117C 0004 0018             		move.b	#4,$18(a0)
00012B80 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00012B86 117C 0014 0019             		move.b	#$14,$19(a0)
00012B8C 317C 003C 0030             		move.w	#60,$30(a0)
00012B92                            
00012B92                            Obj16_Move:				; XREF: Obj16_Index
00012B92 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00012B98 6100 8760                  		bsr.w	AnimateSprite
00012B9C 7000                       		moveq	#0,d0
00012B9E 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00012BA2 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
00012BA8 6000 D79A                  		bra.w	MarkObjGone
00012BAC                            ; ===========================================================================
00012BAC 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00012BB2                            ; ===========================================================================
00012BB2                            
00012BB2                            Obj16_Wait:				; XREF: Obj16_Index
00012BB2 5368 0030                  		subq.w	#1,$30(a0)
00012BB6 6A00                       		bpl.s	Obj16_ChkDel
00012BB8 317C 003C 0030             		move.w	#60,$30(a0)
00012BBE 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
00012BC2 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
00012BC8                            
00012BC8                            Obj16_ChkDel:
00012BC8 6000 D77A                  		bra.w	MarkObjGone
00012BCC                            ; ===========================================================================
00012BCC                            Ani_obj16:
00012BCC                            	include "_anim\obj16.asm"
00012BCC                            ; ---------------------------------------------------------------------------
00012BCC                            ; Animation script - harpoon (LZ)
00012BCC                            ; ---------------------------------------------------------------------------
00012BCC 0000                       		dc.w byte_11F8A-Ani_obj16
00012BCE 0000                       		dc.w byte_11F8E-Ani_obj16
00012BD0 0000                       		dc.w byte_11F92-Ani_obj16
00012BD2 0000                       		dc.w byte_11F96-Ani_obj16
00012BD4 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
00012BD8 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
00012BDC 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
00012BE0 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
00012BE4                            		even
00012BE4                            		even
00012BE4                            
00012BE4                            ; ---------------------------------------------------------------------------
00012BE4                            ; Sprite mappings - harpoon (LZ)
00012BE4                            ; ---------------------------------------------------------------------------
00012BE4                            Map_obj16:
00012BE4                            	include "_maps\obj16.asm"
00012BE4                            ; ---------------------------------------------------------------------------
00012BE4                            ; Sprite mappings - harpoon (LZ)
00012BE4                            ; ---------------------------------------------------------------------------
00012BE4 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
00012BE8 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
00012BEC 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00012BF0 01                         byte_11FA6:	dc.b 1
00012BF1 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00012BF6 01                         byte_11FAC:	dc.b 1
00012BF7 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00012BFC 02                         byte_11FB2:	dc.b 2
00012BFD FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00012C02 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00012C07 01                         byte_11FBD:	dc.b 1
00012C08 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00012C0D 01                         byte_11FC3:	dc.b 1
00012C0E E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00012C13 02                         byte_11FC9:	dc.b 2
00012C14 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
00012C19 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00012C1E                            		even
00012C1E                            		even
00012C1E                            
00012C1E                            ; ===========================================================================
00012C1E                            ; ---------------------------------------------------------------------------
00012C1E                            ; Object 61 - blocks (LZ)
00012C1E                            ; ---------------------------------------------------------------------------
00012C1E                            
00012C1E                            Obj61:					; XREF: Obj_Index
00012C1E 7000                       		moveq	#0,d0
00012C20 1028 0024                  		move.b	$24(a0),d0
00012C24 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00012C28 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00012C2C                            ; ===========================================================================
00012C2C 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00012C2E 0000                       		dc.w Obj61_Action-Obj61_Index
00012C30                            
00012C30 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00012C32 200C                       		dc.b $20, $C
00012C34 1010                       		dc.b $10, $10
00012C36 1010                       		dc.b $10, $10
00012C38                            ; ===========================================================================
00012C38                            
00012C38                            Obj61_Main:				; XREF: Obj61_Index
00012C38 5428 0024                  		addq.b	#2,$24(a0)
00012C3C 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00012C44 317C 43E6 0002             		move.w	#$43E6,2(a0)
00012C4A 117C 0004 0001             		move.b	#4,1(a0)
00012C50 117C 0003 0018             		move.b	#3,$18(a0)
00012C56 7000                       		moveq	#0,d0
00012C58 1028 0028                  		move.b	$28(a0),d0
00012C5C E648                       		lsr.w	#3,d0
00012C5E 0240 000E                  		andi.w	#$E,d0
00012C62 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00012C66 115A 0019                  		move.b	(a2)+,$19(a0)
00012C6A 1152 0016                  		move.b	(a2),$16(a0)
00012C6E E248                       		lsr.w	#1,d0
00012C70 1140 001A                  		move.b	d0,$1A(a0)
00012C74 3168 0008 0034             		move.w	8(a0),$34(a0)
00012C7A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012C80 1028 0028                  		move.b	$28(a0),d0
00012C84 0200 000F                  		andi.b	#$F,d0
00012C88 6700                       		beq.s	Obj61_Action
00012C8A 0C00 0007                  		cmpi.b	#7,d0
00012C8E 6700                       		beq.s	Obj61_Action
00012C90 117C 0001 0038             		move.b	#1,$38(a0)
00012C96                            
00012C96                            Obj61_Action:				; XREF: Obj61_Index
00012C96 3F28 0008                  		move.w	8(a0),-(sp)
00012C9A 7000                       		moveq	#0,d0
00012C9C 1028 0028                  		move.b	$28(a0),d0
00012CA0 0240 000F                  		andi.w	#$F,d0
00012CA4 D040                       		add.w	d0,d0
00012CA6 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00012CAA 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00012CAE 381F                       		move.w	(sp)+,d4
00012CB0 4A28 0001                  		tst.b	1(a0)
00012CB4 6A00                       		bpl.s	Obj61_ChkDel
00012CB6 7200                       		moveq	#0,d1
00012CB8 1228 0019                  		move.b	$19(a0),d1
00012CBC 0641 000B                  		addi.w	#$B,d1
00012CC0 7400                       		moveq	#0,d2
00012CC2 1428 0016                  		move.b	$16(a0),d2
00012CC6 3602                       		move.w	d2,d3
00012CC8 5243                       		addq.w	#1,d3
00012CCA 6100 D9A0                  		bsr.w	SolidObject
00012CCE 1144 003F                  		move.b	d4,$3F(a0)
00012CD2 6100 0000                  		bsr.w	loc_12180
00012CD6                            
00012CD6                            Obj61_ChkDel:
00012CD6 3028 0034                  		move.w	$34(a0),d0
00012CDA 0240 FF80                  		andi.w	#$FF80,d0
00012CDE 3238 F700                  		move.w	($FFFFF700).w,d1
00012CE2 0441 0080                  		subi.w	#$80,d1
00012CE6 0241 FF80                  		andi.w	#$FF80,d1
00012CEA 9041                       		sub.w	d1,d0
00012CEC 0C40 0280                  		cmpi.w	#$280,d0
00012CF0 6200 B5EC                  		bhi.w	DeleteObject
00012CF4 6000 B5AC                  		bra.w	DisplaySprite
00012CF8                            ; ===========================================================================
00012CF8 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012CFC 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012D00 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00012D04 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00012D08                            ; ===========================================================================
00012D08                            
00012D08                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00012D08 4E75                       		rts	
00012D0A                            ; ===========================================================================
00012D0A                            
00012D0A                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00012D0A 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00012D0E 6600                       		bne.s	loc_120D6	; if yes, branch
00012D10 0828 0003 0022             		btst	#3,$22(a0)
00012D16 6700                       		beq.s	locret_120D4
00012D18 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
00012D1E                            
00012D1E                            locret_120D4:
00012D1E 4E75                       		rts	
00012D20                            ; ===========================================================================
00012D20                            
00012D20                            loc_120D6:
00012D20 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00012D24 66F8                       		bne.s	locret_120D4	; if time remains, branch
00012D26 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012D2A 4228 0038                  		clr.b	$38(a0)
00012D2E 4E75                       		rts	
00012D30                            ; ===========================================================================
00012D30                            
00012D30                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00012D30 7208                       		moveq	#8,d1
00012D32 4EBA B4D4                  		jsr	ObjectFallCustom
00012D36 6100 0000                  		bsr.w	ObjHitFloor
00012D3A 4A41                       		tst.w	d1
00012D3C 6A00 0000                  		bpl.w	locret_12106
00012D40 5241                       		addq.w	#1,d1
00012D42 D368 000C                  		add.w	d1,$C(a0)
00012D46 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00012D4A 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012D4E                            
00012D4E                            locret_12106:
00012D4E 4E75                       		rts	
00012D50                            ; ===========================================================================
00012D50                            
00012D50                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00012D50 72F8                       		moveq	#-8,d1
00012D52 4EBA B4B4                  		jsr	ObjectFallCustom
00012D56 6100 0000                  		bsr.w	ObjHitCeiling
00012D5A 4A41                       		tst.w	d1
00012D5C 6A00 0000                  		bpl.w	locret_12126
00012D60 9368 000C                  		sub.w	d1,$C(a0)
00012D64 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00012D68 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012D6C                            
00012D6C                            locret_12126:
00012D6C 4E75                       		rts	
00012D6E                            ; ===========================================================================
00012D6E                            
00012D6E                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00012D6E 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00012D74 6600                       		bne.s	locret_12138	; if not, branch
00012D76 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00012D7A 4228 0038                  		clr.b	$38(a0)
00012D7E                            
00012D7E                            locret_12138:
00012D7E 4E75                       		rts	
00012D80                            ; ===========================================================================
00012D80                            
00012D80                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00012D80 3038 F646                  		move.w	($FFFFF646).w,d0
00012D84 9068 000C                  		sub.w	$C(a0),d0
00012D88 6700                       		beq.s	locret_1217E
00012D8A 6400                       		bcc.s	loc_12162
00012D8C 0C40 FFFE                  		cmpi.w	#-2,d0
00012D90 6C00                       		bge.s	loc_1214E
00012D92 70FE                       		moveq	#-2,d0
00012D94                            
00012D94                            loc_1214E:
00012D94 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00012D98 6100 0000                  		bsr.w	ObjHitCeiling
00012D9C 4A41                       		tst.w	d1
00012D9E 6A00 0000                  		bpl.w	locret_12160
00012DA2 9368 000C                  		sub.w	d1,$C(a0)
00012DA6                            
00012DA6                            locret_12160:
00012DA6 4E75                       		rts	
00012DA8                            ; ===========================================================================
00012DA8                            
00012DA8                            loc_12162:				; XREF: Obj61_Type07
00012DA8 0C40 0002                  		cmpi.w	#2,d0
00012DAC 6F00                       		ble.s	loc_1216A
00012DAE 7002                       		moveq	#2,d0
00012DB0                            
00012DB0                            loc_1216A:
00012DB0 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00012DB4 6100 0000                  		bsr.w	ObjHitFloor
00012DB8 4A41                       		tst.w	d1
00012DBA 6A00 0000                  		bpl.w	locret_1217E
00012DBE 5241                       		addq.w	#1,d1
00012DC0 D368 000C                  		add.w	d1,$C(a0)
00012DC4                            
00012DC4                            locret_1217E:
00012DC4 4E75                       		rts	
00012DC6                            ; ===========================================================================
00012DC6                            
00012DC6                            loc_12180:				; XREF: Obj61_Action
00012DC6 4A28 0038                  		tst.b	$38(a0)
00012DCA 6700                       		beq.s	locret_121C0
00012DCC 0828 0003 0022             		btst	#3,$22(a0)
00012DD2 6600                       		bne.s	loc_1219A
00012DD4 4A28 003E                  		tst.b	$3E(a0)
00012DD8 6700                       		beq.s	locret_121C0
00012DDA 5928 003E                  		subq.b	#4,$3E(a0)
00012DDE 6000                       		bra.s	loc_121A6
00012DE0                            ; ===========================================================================
00012DE0                            
00012DE0                            loc_1219A:
00012DE0 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00012DE6 6700                       		beq.s	locret_121C0
00012DE8 5828 003E                  		addq.b	#4,$3E(a0)
00012DEC                            
00012DEC                            loc_121A6:
00012DEC 1028 003E                  		move.b	$3E(a0),d0
00012DF0 4EB9 0000 2D80             		jsr	(CalcSine).l
00012DF6 323C 0400                  		move.w	#$400,d1
00012DFA C1C1                       		muls.w	d1,d0
00012DFC 4840                       		swap	d0
00012DFE D068 0030                  		add.w	$30(a0),d0
00012E02 3140 000C                  		move.w	d0,$C(a0)
00012E06                            
00012E06                            locret_121C0:
00012E06 4E75                       		rts	
00012E08                            ; ===========================================================================
00012E08                            ; ---------------------------------------------------------------------------
00012E08                            ; Sprite mappings - blocks (LZ)
00012E08                            ; ---------------------------------------------------------------------------
00012E08                            Map_obj61:
00012E08                            	include "_maps\obj61.asm"
00012E08                            ; ---------------------------------------------------------------------------
00012E08                            ; Sprite mappings - blocks (LZ)
00012E08                            ; ---------------------------------------------------------------------------
00012E08 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00012E0C 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00012E10 01                         byte_121CA:	dc.b 1
00012E11 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012E16 02                         byte_121D0:	dc.b 2
00012E17 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00012E1C F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00012E21 01                         byte_121DB:	dc.b 1
00012E22 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012E27 01                         byte_121E1:	dc.b 1
00012E28 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00012E2E 00                         		even
00012E2E 00                         		even
00012E2E                            
00012E2E                            ; ===========================================================================
00012E2E                            ; ---------------------------------------------------------------------------
00012E2E                            ; Object 62 - gargoyle head (LZ)
00012E2E                            ; ---------------------------------------------------------------------------
00012E2E                            
00012E2E                            Obj62:					; XREF: Obj_Index
00012E2E 7000                       		moveq	#0,d0
00012E30 1028 0024                  		move.b	$24(a0),d0
00012E34 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00012E38 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00012E3C 6000 D506                  		bra.w	MarkObjGone
00012E40                            ; ===========================================================================
00012E40 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012E42 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00012E44 0000                       		dc.w Obj62_FireBall-Obj62_Index
00012E46 0000                       		dc.w Obj62_AniFire-Obj62_Index
00012E48                            
00012E48 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00012E50                            ; ===========================================================================
00012E50                            
00012E50                            Obj62_Main:				; XREF: Obj62_Index
00012E50 5428 0024                  		addq.b	#2,$24(a0)
00012E54 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012E5C 317C 42E9 0002             		move.w	#$42E9,2(a0)
00012E62 0028 0004 0001             		ori.b	#4,1(a0)
00012E68 117C 0003 0018             		move.b	#3,$18(a0)
00012E6E 117C 0010 0019             		move.b	#$10,$19(a0)
00012E74 1028 0028                  		move.b	$28(a0),d0	; get object type
00012E78 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012E7C 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00012E82 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012E88 0228 000F 0028             		andi.b	#$F,$28(a0)
00012E8E                            
00012E8E                            Obj62_MakeFire:				; XREF: Obj62_Index
00012E8E 5328 001E                  		subq.b	#1,$1E(a0)
00012E92 6600                       		bne.s	Obj62_NoFire
00012E94 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012E9A 6100 B680                  		bsr.w	ChkObjOnScreen
00012E9E 6600                       		bne.s	Obj62_NoFire
00012EA0 6100 B886                  		bsr.w	SingleObjLoad
00012EA4 6600                       		bne.s	Obj62_NoFire
00012EA6 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00012EAA 5829 0024                  		addq.b	#4,$24(a1)
00012EAE 3368 0008 0008             		move.w	8(a0),8(a1)
00012EB4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012EBA 1368 0001 0001             		move.b	1(a0),1(a1)
00012EC0 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012EC6                            
00012EC6                            Obj62_NoFire:
00012EC6 4E75                       		rts	
00012EC8                            ; ===========================================================================
00012EC8                            
00012EC8                            Obj62_FireBall:				; XREF: Obj62_Index
00012EC8 5428 0024                  		addq.b	#2,$24(a0)
00012ECC 117C 0008 0016             		move.b	#8,$16(a0)
00012ED2 117C 0008 0017             		move.b	#8,$17(a0)
00012ED8 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012EE0 317C 02E9 0002             		move.w	#$2E9,2(a0)
00012EE6 0028 0004 0001             		ori.b	#4,1(a0)
00012EEC 117C 0004 0018             		move.b	#4,$18(a0)
00012EF2 117C 0098 0020             		move.b	#$98,$20(a0)
00012EF8 117C 0008 0019             		move.b	#8,$19(a0)
00012EFE 117C 0002 001A             		move.b	#2,$1A(a0)
00012F04 5068 000C                  		addq.w	#8,$C(a0)
00012F08 317C 0200 0010             		move.w	#$200,$10(a0)
00012F0E 0828 0000 0022             		btst	#0,$22(a0)
00012F14 6600                       		bne.s	Obj62_Sound
00012F16 4468 0010                  		neg.w	$10(a0)
00012F1A                            
00012F1A                            Obj62_Sound:
00012F1A 303C 00AE                  		move.w	#$AE,d0
00012F1E 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012F24                            
00012F24                            Obj62_AniFire:				; XREF: Obj62_Index
00012F24 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012F28 0200 0007                  		andi.b	#7,d0
00012F2C 6600                       		bne.s	Obj62_StopFire
00012F2E 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012F34                            
00012F34                            Obj62_StopFire:
00012F34 6100 B332                  		bsr.w	SpeedToPos
00012F38 0828 0000 0022             		btst	#0,$22(a0)
00012F3E 6600                       		bne.s	Obj62_StopFire2
00012F40 76F8                       		moveq	#-8,d3
00012F42 6100 0000                  		bsr.w	ObjHitWallLeft
00012F46 4A41                       		tst.w	d1
00012F48 6B00 B394                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012F4C 4E75                       		rts	
00012F4E                            ; ===========================================================================
00012F4E                            
00012F4E                            Obj62_StopFire2:
00012F4E 7608                       		moveq	#8,d3
00012F50 6100 0000                  		bsr.w	ObjHitWallRight
00012F54 4A41                       		tst.w	d1
00012F56 6B00 B386                  		bmi.w	DeleteObject
00012F5A 4E75                       		rts	
00012F5C                            ; ===========================================================================
00012F5C                            ; ---------------------------------------------------------------------------
00012F5C                            ; Sprite mappings - gargoyle head (LZ)
00012F5C                            ; ---------------------------------------------------------------------------
00012F5C                            Map_obj62:
00012F5C                            	include "_maps\obj62.asm"
00012F5C                            ; ---------------------------------------------------------------------------
00012F5C                            ; Sprite mappings - gargoyle head (LZ)
00012F5C                            ; ---------------------------------------------------------------------------
00012F5C 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012F60 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012F64 03                         byte_12320:	dc.b 3
00012F65 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00012F6A F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012F6F 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012F74 01                         byte_12330:	dc.b 1
00012F75 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012F7A 01                         byte_12336:	dc.b 1
00012F7B FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012F80                            		even
00012F80                            		even
00012F80                            
00012F80                            ; ===========================================================================
00012F80                            ; ---------------------------------------------------------------------------
00012F80                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012F80                            ; ---------------------------------------------------------------------------
00012F80                            
00012F80                            Obj63:					; XREF: Obj_Index
00012F80 7000                       		moveq	#0,d0
00012F82 1028 0024                  		move.b	$24(a0),d0
00012F86 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00012F8A 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00012F8E 3028 0030                  		move.w	$30(a0),d0
00012F92 0240 FF80                  		andi.w	#$FF80,d0
00012F96 3238 F700                  		move.w	($FFFFF700).w,d1
00012F9A 0441 0080                  		subi.w	#$80,d1
00012F9E 0241 FF80                  		andi.w	#$FF80,d1
00012FA2 9041                       		sub.w	d1,d0
00012FA4 0C40 0280                  		cmpi.w	#$280,d0
00012FA8 6200                       		bhi.s	loc_1236A
00012FAA                            
00012FAA                            Obj63_Display:				; XREF: loc_1236A
00012FAA 6000 B2F6                  		bra.w	DisplaySprite
00012FAE                            ; ===========================================================================
00012FAE                            
00012FAE                            loc_1236A:				; XREF: Obj63
00012FAE 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00012FB4 6600                       		bne.s	loc_12378
00012FB6 0C40 FF80                  		cmpi.w	#-$80,d0
00012FBA 64EE                       		bcc.s	Obj63_Display
00012FBC                            
00012FBC                            loc_12378:
00012FBC 1028 002F                  		move.b	$2F(a0),d0
00012FC0 6A00 B31C                  		bpl.w	DeleteObject
00012FC4 0240 007F                  		andi.w	#$7F,d0
00012FC8 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012FCC 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012FD2 6000 B30A                  		bra.w	DeleteObject
00012FD6                            ; ===========================================================================
00012FD6 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00012FD8 0000                       		dc.w loc_124B2-Obj63_Index
00012FDA 0000                       		dc.w loc_124C2-Obj63_Index
00012FDC 0000                       		dc.w loc_124DE-Obj63_Index
00012FDE                            ; ===========================================================================
00012FDE                            
00012FDE                            Obj63_Main:				; XREF: Obj63_Index
00012FDE 1028 0028                  		move.b	$28(a0),d0
00012FE2 6B00 0000                  		bmi.w	loc_12460
00012FE6 5428 0024                  		addq.b	#2,$24(a0)
00012FEA 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012FF2 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012FF8 0028 0004 0001             		ori.b	#4,1(a0)
00012FFE 117C 0010 0019             		move.b	#$10,$19(a0)
00013004 117C 0004 0018             		move.b	#4,$18(a0)
0001300A 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00013010 6600                       		bne.s	loc_123E2
00013012 5828 0024                  		addq.b	#4,$24(a0)
00013016 317C 03F6 0002             		move.w	#$3F6,2(a0)
0001301C 117C 0001 0018             		move.b	#1,$18(a0)
00013022 6000 0000                  		bra.w	loc_124DE
00013026                            ; ===========================================================================
00013026                            
00013026                            loc_123E2:
00013026 117C 0004 001A             		move.b	#4,$1A(a0)
0001302C 7000                       		moveq	#0,d0
0001302E 1028 0028                  		move.b	$28(a0),d0
00013032 3200                       		move.w	d0,d1
00013034 E648                       		lsr.w	#3,d0
00013036 0240 001E                  		andi.w	#$1E,d0
0001303A 45FA 0000                  		lea	Obj63_Data(pc),a2
0001303E D4F2 0000                  		adda.w	(a2,d0.w),a2
00013042 315A 0038                  		move.w	(a2)+,$38(a0)
00013046 315A 0030                  		move.w	(a2)+,$30(a0)
0001304A 214A 003C                  		move.l	a2,$3C(a0)
0001304E 0241 000F                  		andi.w	#$F,d1
00013052 E549                       		lsl.w	#2,d1
00013054 1141 0038                  		move.b	d1,$38(a0)
00013058 117C 0004 003A             		move.b	#4,$3A(a0)
0001305E 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00013062 6700                       		beq.s	loc_1244C
00013064 117C 0001 003B             		move.b	#1,$3B(a0)
0001306A 4428 003A                  		neg.b	$3A(a0)
0001306E 7200                       		moveq	#0,d1
00013070 1228 0038                  		move.b	$38(a0),d1
00013074 D228 003A                  		add.b	$3A(a0),d1
00013078 B228 0039                  		cmp.b	$39(a0),d1
0001307C 6500                       		bcs.s	loc_12448
0001307E 1001                       		move.b	d1,d0
00013080 7200                       		moveq	#0,d1
00013082 4A00                       		tst.b	d0
00013084 6A00                       		bpl.s	loc_12448
00013086 1228 0039                  		move.b	$39(a0),d1
0001308A 5901                       		subq.b	#4,d1
0001308C                            
0001308C                            loc_12448:
0001308C 1141 0038                  		move.b	d1,$38(a0)
00013090                            
00013090                            loc_1244C:
00013090 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00013096 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
0001309C 6100 0000                  		bsr.w	Obj63_ChangeDir
000130A0 6000 0000                  		bra.w	loc_124B2
000130A4                            ; ===========================================================================
000130A4                            
000130A4                            loc_12460:				; XREF: Obj63_Main
000130A4 1140 002F                  		move.b	d0,$2F(a0)
000130A8 0240 007F                  		andi.w	#$7F,d0
000130AC 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000130B0 08F2 0000 0000             		bset	#0,(a2,d0.w)
000130B6 6600 B226                  		bne.w	DeleteObject
000130BA D040                       		add.w	d0,d0
000130BC 0240 001E                  		andi.w	#$1E,d0
000130C0 45F9 0000 0000             		lea	(ObjPos_LZxpf_Index).l,a2
000130C6 D4F2 0000                  		adda.w	(a2,d0.w),a2
000130CA 321A                       		move.w	(a2)+,d1
000130CC 2248                       		movea.l	a0,a1
000130CE 6000                       		bra.s	Obj63_MakePtfms
000130D0                            ; ===========================================================================
000130D0                            
000130D0                            Obj63_Loop:
000130D0 6100 B656                  		bsr.w	SingleObjLoad
000130D4 6600                       		bne.s	loc_124AA
000130D6                            
000130D6                            Obj63_MakePtfms:			; XREF: loc_12460
000130D6 12BC 0063                  		move.b	#$63,0(a1)
000130DA 335A 0008                  		move.w	(a2)+,8(a1)
000130DE 335A 000C                  		move.w	(a2)+,$C(a1)
000130E2 301A                       		move.w	(a2)+,d0
000130E4 1340 0028                  		move.b	d0,$28(a1)
000130E8                            
000130E8                            loc_124AA:
000130E8 51C9 FFE6                  		dbf	d1,Obj63_Loop
000130EC                            
000130EC 588F                       		addq.l	#4,sp
000130EE 4E75                       		rts	
000130F0                            ; ===========================================================================
000130F0                            
000130F0                            loc_124B2:				; XREF: Obj63_Index
000130F0 7200                       		moveq	#0,d1
000130F2 1228 0019                  		move.b	$19(a0),d1
000130F6 4EB9 0000 7EC8             		jsr	(PlatformObject).l
000130FC 6000 0000                  		bra.w	sub_12502
00013100                            ; ===========================================================================
00013100                            
00013100                            loc_124C2:				; XREF: Obj63_Index
00013100 7200                       		moveq	#0,d1
00013102 1228 0019                  		move.b	$19(a0),d1
00013106 4EB9 0000 803C             		jsr	(ExitPlatform).l
0001310C 3F28 0008                  		move.w	8(a0),-(sp)
00013110 6100 0000                  		bsr.w	sub_12502
00013114 341F                       		move.w	(sp)+,d2
00013116 4EF9 0000 85A6             		jmp	(MvSonicOnPtfm2).l
0001311C                            ; ===========================================================================
0001311C                            
0001311C                            loc_124DE:				; XREF: Obj63_Index
0001311C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00013120 0240 0003                  		andi.w	#3,d0
00013124 6600                       		bne.s	loc_124FC
00013126 7201                       		moveq	#1,d1
00013128 4A38 F7C0                  		tst.b	($FFFFF7C0).w
0001312C 6700                       		beq.s	loc_124F2
0001312E 4401                       		neg.b	d1
00013130                            
00013130                            loc_124F2:
00013130 D328 001A                  		add.b	d1,$1A(a0)
00013134 0228 0003 001A             		andi.b	#3,$1A(a0)
0001313A                            
0001313A                            loc_124FC:
0001313A 588F                       		addq.l	#4,sp
0001313C 6000 D206                  		bra.w	MarkObjGone
00013140                            
00013140                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013140                            
00013140                            
00013140                            sub_12502:				; XREF: loc_124B2; loc_124C2
00013140 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00013144 6700                       		beq.s	loc_12520
00013146 4A28 003B                  		tst.b	$3B(a0)
0001314A 6600                       		bne.s	loc_12520
0001314C 117C 0001 003B             		move.b	#1,$3B(a0)
00013152 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00013158 4428 003A                  		neg.b	$3A(a0)
0001315C 6000                       		bra.s	loc_12534
0001315E                            ; ===========================================================================
0001315E                            
0001315E                            loc_12520:
0001315E 3028 0008                  		move.w	8(a0),d0
00013162 B068 0034                  		cmp.w	$34(a0),d0
00013166 6600                       		bne.s	loc_1256A
00013168 3028 000C                  		move.w	$C(a0),d0
0001316C B068 0036                  		cmp.w	$36(a0),d0
00013170 6600                       		bne.s	loc_1256A
00013172                            
00013172                            loc_12534:
00013172 7200                       		moveq	#0,d1
00013174 1228 0038                  		move.b	$38(a0),d1
00013178 D228 003A                  		add.b	$3A(a0),d1
0001317C B228 0039                  		cmp.b	$39(a0),d1
00013180 6500                       		bcs.s	loc_12552
00013182 1001                       		move.b	d1,d0
00013184 7200                       		moveq	#0,d1
00013186 4A00                       		tst.b	d0
00013188 6A00                       		bpl.s	loc_12552
0001318A 1228 0039                  		move.b	$39(a0),d1
0001318E 5901                       		subq.b	#4,d1
00013190                            
00013190                            loc_12552:
00013190 1141 0038                  		move.b	d1,$38(a0)
00013194 2268 003C                  		movea.l	$3C(a0),a1
00013198 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
0001319E 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000131A4 6100 0000                  		bsr.w	Obj63_ChangeDir
000131A8                            
000131A8                            loc_1256A:
000131A8 6100 B0BE                  		bsr.w	SpeedToPos
000131AC 4E75                       		rts	
000131AE                            ; End of function sub_12502
000131AE                            
000131AE                            
000131AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000131AE                            
000131AE                            
000131AE                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
000131AE 7000                       		moveq	#0,d0
000131B0 343C FF00                  		move.w	#-$100,d2
000131B4 3028 0008                  		move.w	8(a0),d0
000131B8 9068 0034                  		sub.w	$34(a0),d0
000131BC 6400                       		bcc.s	loc_12584
000131BE 4440                       		neg.w	d0
000131C0 4442                       		neg.w	d2
000131C2                            
000131C2                            loc_12584:
000131C2 7200                       		moveq	#0,d1
000131C4 363C FF00                  		move.w	#-$100,d3
000131C8 3228 000C                  		move.w	$C(a0),d1
000131CC 9268 0036                  		sub.w	$36(a0),d1
000131D0 6400                       		bcc.s	loc_12598
000131D2 4441                       		neg.w	d1
000131D4 4443                       		neg.w	d3
000131D6                            
000131D6                            loc_12598:
000131D6 B240                       		cmp.w	d0,d1
000131D8 6500                       		bcs.s	loc_125C2
000131DA 3028 0008                  		move.w	8(a0),d0
000131DE 9068 0034                  		sub.w	$34(a0),d0
000131E2 6700                       		beq.s	loc_125AE
000131E4 48C0                       		ext.l	d0
000131E6 E180                       		asl.l	#8,d0
000131E8 81C1                       		divs.w	d1,d0
000131EA 4440                       		neg.w	d0
000131EC                            
000131EC                            loc_125AE:
000131EC 3140 0010                  		move.w	d0,$10(a0)
000131F0 3143 0012                  		move.w	d3,$12(a0)
000131F4 4840                       		swap	d0
000131F6 3140 000A                  		move.w	d0,$A(a0)
000131FA 4268 000E                  		clr.w	$E(a0)
000131FE 4E75                       		rts	
00013200                            ; ===========================================================================
00013200                            
00013200                            loc_125C2:				; XREF: Obj63_ChangeDir
00013200 3228 000C                  		move.w	$C(a0),d1
00013204 9268 0036                  		sub.w	$36(a0),d1
00013208 6700                       		beq.s	loc_125D4
0001320A 48C1                       		ext.l	d1
0001320C E181                       		asl.l	#8,d1
0001320E 83C0                       		divs.w	d0,d1
00013210 4441                       		neg.w	d1
00013212                            
00013212                            loc_125D4:
00013212 3141 0012                  		move.w	d1,$12(a0)
00013216 3142 0010                  		move.w	d2,$10(a0)
0001321A 4841                       		swap	d1
0001321C 3141 000E                  		move.w	d1,$E(a0)
00013220 4268 000A                  		clr.w	$A(a0)
00013224 4E75                       		rts	
00013226                            ; End of function Obj63_ChangeDir
00013226                            
00013226                            ; ===========================================================================
00013226 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00013228 0000                       		dc.w word_12610-Obj63_Data
0001322A 0000                       		dc.w word_12628-Obj63_Data
0001322C 0000                       		dc.w word_1263C-Obj63_Data
0001322E 0000                       		dc.w word_12650-Obj63_Data
00013230 0000                       		dc.w word_12668-Obj63_Data
00013232 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00013242 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
0001324E 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
0001325E 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00013266 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
0001327A 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
0001328E 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
000132A6 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
000132BA                            
000132BA                            ; ---------------------------------------------------------------------------
000132BA                            ; Sprite mappings - platforms on a conveyor belt (LZ)
000132BA                            ; ---------------------------------------------------------------------------
000132BA                            Map_obj63:
000132BA                            	include "_maps\obj63.asm"
000132BA                            ; ---------------------------------------------------------------------------
000132BA                            ; Sprite mappings - platforms on a conveyor belt (LZ)
000132BA                            ; ---------------------------------------------------------------------------
000132BA 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
000132BE 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
000132C2 0000                       		dc.w byte_1269E-Map_obj63
000132C4 01                         byte_12686:	dc.b 1
000132C5 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000132CA 01                         byte_1268C:	dc.b 1
000132CB F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000132D0 01                         byte_12692:	dc.b 1
000132D1 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
000132D6 01                         byte_12698:	dc.b 1
000132D7 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
000132DC 01                         byte_1269E:	dc.b 1
000132DD F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
000132E2                            		even
000132E2                            		even
000132E2                            
000132E2                            ; ===========================================================================
000132E2                            ; ---------------------------------------------------------------------------
000132E2                            ; Object 64 - bubbles (LZ)
000132E2                            ; ---------------------------------------------------------------------------
000132E2                            
000132E2                            Obj64:					; XREF: Obj_Index
000132E2 7000                       		moveq	#0,d0
000132E4 1028 0024                  		move.b	$24(a0),d0
000132E8 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
000132EC 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
000132F0                            ; ===========================================================================
000132F0 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
000132F2 0000                       		dc.w Obj64_Animate-Obj64_Index
000132F4 0000                       		dc.w Obj64_ChkWater-Obj64_Index
000132F6 0000                       		dc.w Obj64_Display2-Obj64_Index
000132F8 0000                       		dc.w Obj64_Delete3-Obj64_Index
000132FA 0000                       		dc.w Obj64_BblMaker-Obj64_Index
000132FC                            ; ===========================================================================
000132FC                            
000132FC                            Obj64_Main:				; XREF: Obj64_Index
000132FC 5428 0024                  		addq.b	#2,$24(a0)
00013300 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00013308 317C 8348 0002             		move.w	#$8348,2(a0)
0001330E 117C 0084 0001             		move.b	#$84,1(a0)
00013314 117C 0010 0019             		move.b	#$10,$19(a0)
0001331A 117C 0001 0018             		move.b	#1,$18(a0)
00013320 1028 0028                  		move.b	$28(a0),d0	; get object type
00013324 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00013326 5028 0024                  		addq.b	#8,$24(a0)
0001332A 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
0001332E 1140 0032                  		move.b	d0,$32(a0)
00013332 1140 0033                  		move.b	d0,$33(a0)
00013336 117C 0006 001C             		move.b	#6,$1C(a0)
0001333C 6000 0000                  		bra.w	Obj64_BblMaker
00013340                            ; ===========================================================================
00013340                            
00013340                            Obj64_Bubble:				; XREF: Obj64_Main
00013340 1140 001C                  		move.b	d0,$1C(a0)
00013344 3168 0008 0030             		move.w	8(a0),$30(a0)
0001334A 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00013350 4EB9 0000 2D5A             		jsr	(RandomNumber).l
00013356 1140 0026                  		move.b	d0,$26(a0)
0001335A                            
0001335A                            Obj64_Animate:				; XREF: Obj64_Index
0001335A 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013360 4EB9 0000 B2FA             		jsr	AnimateSprite
00013366 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0001336C 6600                       		bne.s	Obj64_ChkWater
0001336E 117C 0001 002E             		move.b	#1,$2E(a0)
00013374                            
00013374                            Obj64_ChkWater:				; XREF: Obj64_Index
00013374 3038 F646                  		move.w	($FFFFF646).w,d0
00013378 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
0001337C 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
0001337E                            
0001337E                            Obj64_Burst:				; XREF: Obj64_Wobble
0001337E 117C 0006 0024             		move.b	#6,$24(a0)
00013384 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00013388 6000 0000                  		bra.w	Obj64_Display2
0001338C                            ; ===========================================================================
0001338C                            
0001338C                            Obj64_Wobble:				; XREF: Obj64_ChkWater
0001338C 1028 0026                  		move.b	$26(a0),d0
00013390 5228 0026                  		addq.b	#1,$26(a0)
00013394 0240 007F                  		andi.w	#$7F,d0
00013398 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
0001339E 1031 0000                  		move.b	(a1,d0.w),d0
000133A2 4880                       		ext.w	d0
000133A4 D068 0030                  		add.w	$30(a0),d0
000133A8 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
000133AC 4A28 002E                  		tst.b	$2E(a0)
000133B0 6700                       		beq.s	Obj64_Display
000133B2 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
000133B6 6700                       		beq.s	Obj64_Display	; if not, branch
000133B8                            
000133B8 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
000133BC 303C 00AD                  		move.w	#$AD,d0
000133C0 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
000133C6 43F8 D000                  		lea	($FFFFD000).w,a1
000133CA 4269 0010                  		clr.w	$10(a1)
000133CE 4269 0012                  		clr.w	$12(a1)
000133D2 4269 0014                  		clr.w	$14(a1)
000133D6 137C 0015 001C             		move.b	#$15,$1C(a1)
000133DC 337C 0023 003E             		move.w	#$23,$3E(a1)
000133E2 137C 0000 003C             		move.b	#0,$3C(a1)
000133E8 08A9 0005 0022             		bclr	#5,$22(a1)
000133EE 08A9 0004 0022             		bclr	#4,$22(a1)
000133F4 0829 0002 0022             		btst	#2,$22(a1)
000133FA 6700 FF82                  		beq.w	Obj64_Burst
000133FE 08A9 0002 0022             		bclr	#2,$22(a1)
00013404 137C 0013 0016             		move.b	#$13,$16(a1)
0001340A 137C 0009 0017             		move.b	#9,$17(a1)
00013410 5B69 000C                  		subq.w	#5,$C(a1)
00013414 6000 FF68                  		bra.w	Obj64_Burst
00013418                            ; ===========================================================================
00013418                            
00013418                            Obj64_Display:				; XREF: Obj64_Wobble
00013418 6100 AE4E                  		bsr.w	SpeedToPos
0001341C 4A28 0001                  		tst.b	1(a0)
00013420 6A00                       		bpl.s	Obj64_Delete
00013422 4EFA AE7E                  		jmp	DisplaySprite
00013426                            ; ===========================================================================
00013426                            
00013426                            Obj64_Delete:
00013426 4EFA AEB6                  		jmp	DeleteObject
0001342A                            ; ===========================================================================
0001342A                            
0001342A                            Obj64_Display2:				; XREF: Obj64_Index
0001342A 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013430 4EB9 0000 B2FA             		jsr	AnimateSprite
00013436 4A28 0001                  		tst.b	1(a0)
0001343A 6A00                       		bpl.s	Obj64_Delete2
0001343C 4EFA AE64                  		jmp	DisplaySprite
00013440                            ; ===========================================================================
00013440                            
00013440                            Obj64_Delete2:
00013440 4EFA AE9C                  		jmp	DeleteObject
00013444                            ; ===========================================================================
00013444                            
00013444                            Obj64_Delete3:				; XREF: Obj64_Index
00013444 6000 AE98                  		bra.w	DeleteObject
00013448                            ; ===========================================================================
00013448                            
00013448                            Obj64_BblMaker:				; XREF: Obj64_Index
00013448 4A68 0036                  		tst.w	$36(a0)
0001344C 6600                       		bne.s	loc_12874
0001344E 3038 F646                  		move.w	($FFFFF646).w,d0
00013452 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00013456 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
0001345A 4A28 0001                  		tst.b	1(a0)
0001345E 6A00 0000                  		bpl.w	Obj64_ChkDel
00013462 5368 0038                  		subq.w	#1,$38(a0)
00013466 6A00 0000                  		bpl.w	loc_12914
0001346A 317C 0001 0036             		move.w	#1,$36(a0)
00013470                            
00013470                            loc_1283A:
00013470 4EB9 0000 2D5A             		jsr	(RandomNumber).l
00013476 3200                       		move.w	d0,d1
00013478 0240 0007                  		andi.w	#7,d0
0001347C 0C40 0006                  		cmpi.w	#6,d0
00013480 64EE                       		bcc.s	loc_1283A
00013482                            
00013482 1140 0034                  		move.b	d0,$34(a0)
00013486 0241 000C                  		andi.w	#$C,d1
0001348A 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00013490 D2C1                       		adda.w	d1,a1
00013492 2149 003C                  		move.l	a1,$3C(a0)
00013496 5328 0032                  		subq.b	#1,$32(a0)
0001349A 6A00                       		bpl.s	loc_12872
0001349C 1168 0033 0032             		move.b	$33(a0),$32(a0)
000134A2 08E8 0007 0036             		bset	#7,$36(a0)
000134A8                            
000134A8                            loc_12872:
000134A8 6000                       		bra.s	loc_1287C
000134AA                            ; ===========================================================================
000134AA                            
000134AA                            loc_12874:				; XREF: Obj64_BblMaker
000134AA 5368 0038                  		subq.w	#1,$38(a0)
000134AE 6A00 0000                  		bpl.w	loc_12914
000134B2                            
000134B2                            loc_1287C:
000134B2 4EB9 0000 2D5A             		jsr	(RandomNumber).l
000134B8 0240 001F                  		andi.w	#$1F,d0
000134BC 3140 0038                  		move.w	d0,$38(a0)
000134C0 6100 B266                  		bsr.w	SingleObjLoad
000134C4 6600                       		bne.s	loc_128F8
000134C6 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
000134CA 3368 0008 0008             		move.w	8(a0),8(a1)
000134D0 4EB9 0000 2D5A             		jsr	(RandomNumber).l
000134D6 0240 000F                  		andi.w	#$F,d0
000134DA 5140                       		subq.w	#8,d0
000134DC D169 0008                  		add.w	d0,8(a1)
000134E0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000134E6 7000                       		moveq	#0,d0
000134E8 1028 0034                  		move.b	$34(a0),d0
000134EC 2468 003C                  		movea.l	$3C(a0),a2
000134F0 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
000134F6 0828 0007 0036             		btst	#7,$36(a0)
000134FC 6700                       		beq.s	loc_128F8
000134FE 4EB9 0000 2D5A             		jsr	(RandomNumber).l
00013504 0240 0003                  		andi.w	#3,d0
00013508 6600                       		bne.s	loc_128E4
0001350A 08E8 0006 0036             		bset	#6,$36(a0)
00013510 6600                       		bne.s	loc_128F8
00013512 137C 0002 0028             		move.b	#2,$28(a1)
00013518                            
00013518                            loc_128E4:
00013518 4A28 0034                  		tst.b	$34(a0)
0001351C 6600                       		bne.s	loc_128F8
0001351E 08E8 0006 0036             		bset	#6,$36(a0)
00013524 6600                       		bne.s	loc_128F8
00013526 137C 0002 0028             		move.b	#2,$28(a1)
0001352C                            
0001352C                            loc_128F8:
0001352C 5328 0034                  		subq.b	#1,$34(a0)
00013530 6A00                       		bpl.s	loc_12914
00013532 4EB9 0000 2D5A             		jsr	(RandomNumber).l
00013538 0240 007F                  		andi.w	#$7F,d0
0001353C 0640 0080                  		addi.w	#$80,d0
00013540 D168 0038                  		add.w	d0,$38(a0)
00013544 4268 0036                  		clr.w	$36(a0)
00013548                            
00013548                            loc_12914:
00013548 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001354E 4EB9 0000 B2FA             		jsr	AnimateSprite
00013554                            
00013554                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00013554 3028 0008                  		move.w	8(a0),d0
00013558 0240 FF80                  		andi.w	#$FF80,d0
0001355C 3238 F700                  		move.w	($FFFFF700).w,d1
00013560 0441 0080                  		subi.w	#$80,d1
00013564 0241 FF80                  		andi.w	#$FF80,d1
00013568 9041                       		sub.w	d1,d0
0001356A 0C40 0280                  		cmpi.w	#$280,d0
0001356E 6200 AD6E                  		bhi.w	DeleteObject
00013572 3038 F646                  		move.w	($FFFFF646).w,d0
00013576 B068 000C                  		cmp.w	$C(a0),d0
0001357A 6500 AD26                  		bcs.w	DisplaySprite
0001357E 4E75                       		rts	
00013580                            ; ===========================================================================
00013580                            ; bubble production sequence
00013580                            
00013580                            ; 0 = small bubble, 1 =	large bubble
00013580                            
00013580 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00013592                            
00013592                            ; ===========================================================================
00013592                            
00013592                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00013592 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013596 6B00                       		bmi.s	loc_12998
00013598 43F8 D000                  		lea	($FFFFD000).w,a1
0001359C 3029 0008                  		move.w	8(a1),d0
000135A0 3228 0008                  		move.w	8(a0),d1
000135A4 0441 0010                  		subi.w	#$10,d1
000135A8 B240                       		cmp.w	d0,d1
000135AA 6400                       		bcc.s	loc_12998
000135AC 0641 0020                  		addi.w	#$20,d1
000135B0 B240                       		cmp.w	d0,d1
000135B2 6500                       		bcs.s	loc_12998
000135B4 3029 000C                  		move.w	$C(a1),d0
000135B8 3228 000C                  		move.w	$C(a0),d1
000135BC B240                       		cmp.w	d0,d1
000135BE 6400                       		bcc.s	loc_12998
000135C0 0641 0010                  		addi.w	#$10,d1
000135C4 B240                       		cmp.w	d0,d1
000135C6 6500                       		bcs.s	loc_12998
000135C8 7001                       		moveq	#1,d0
000135CA 4E75                       		rts	
000135CC                            ; ===========================================================================
000135CC                            
000135CC                            loc_12998:
000135CC 7000                       		moveq	#0,d0
000135CE 4E75                       		rts	
000135D0                            ; ===========================================================================
000135D0                            Ani_obj64:
000135D0                            	include "_anim\obj64.asm"
000135D0                            ; ---------------------------------------------------------------------------
000135D0                            ; Animation script - bubbles (LZ)
000135D0                            ; ---------------------------------------------------------------------------
000135D0 0000                       		dc.w byte_129AA-Ani_obj64
000135D2 0000                       		dc.w byte_129B0-Ani_obj64
000135D4 0000                       		dc.w byte_129B6-Ani_obj64
000135D6 0000                       		dc.w byte_129BE-Ani_obj64
000135D8 0000                       		dc.w byte_129BE-Ani_obj64
000135DA 0000                       		dc.w byte_129C0-Ani_obj64
000135DC 0000                       		dc.w byte_129C6-Ani_obj64
000135DE 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
000135E4 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
000135EA 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
000135F2 04FC                       byte_129BE:	dc.b 4,	$FC
000135F4 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
000135FA 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00013600 00                         		even
00013600 00                         		even
00013600                            
00013600                            ; ---------------------------------------------------------------------------
00013600                            ; Sprite mappings - bubbles (LZ)
00013600                            ; ---------------------------------------------------------------------------
00013600                            Map_obj64:
00013600                            	include "_maps\obj64.asm"
00013600                            ; ---------------------------------------------------------------------------
00013600                            ; Sprite mappings - bubbles (LZ)
00013600                            ; ---------------------------------------------------------------------------
00013600 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00013604 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00013608 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
0001360C 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00013610 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00013614 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00013618 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
0001361C 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00013620 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00013624 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00013628 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
0001362C 0000                       		dc.w byte_12A9C-Map_obj64
0001362E 01                         byte_129FA:	dc.b 1
0001362F FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00013634 01                         byte_12A00:	dc.b 1
00013635 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
0001363A 01                         byte_12A06:	dc.b 1
0001363B FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00013640 01                         byte_12A0C:	dc.b 1
00013641 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00013646 01                         byte_12A12:	dc.b 1
00013647 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
0001364C 01                         byte_12A18:	dc.b 1
0001364D F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00013652 01                         byte_12A1E:	dc.b 1
00013653 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00013658 04                         byte_12A24:	dc.b 4
00013659 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
0001365E F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00013663 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00013668 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
0001366D 04                         byte_12A39:	dc.b 4
0001366E F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00013673 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00013678 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
0001367D 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00013682 01                         byte_12A4E:	dc.b 1
00013683 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00013688 01                         byte_12A54:	dc.b 1
00013689 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
0001368E 01                         byte_12A5A:	dc.b 1
0001368F F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00013694 01                         byte_12A60:	dc.b 1
00013695 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
0001369A 01                         byte_12A66:	dc.b 1
0001369B F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
000136A0 01                         byte_12A6C:	dc.b 1
000136A1 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
000136A6 01                         byte_12A72:	dc.b 1
000136A7 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
000136AC 01                         byte_12A78:	dc.b 1
000136AD F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
000136B2 01                         byte_12A7E:	dc.b 1
000136B3 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
000136B8 01                         byte_12A84:	dc.b 1
000136B9 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
000136BE 01                         byte_12A8A:	dc.b 1
000136BF F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
000136C4 01                         byte_12A90:	dc.b 1
000136C5 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
000136CA 01                         byte_12A96:	dc.b 1
000136CB F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
000136D0 00                         byte_12A9C:	dc.b 0
000136D2 00                         		even
000136D2 00                         		even
000136D2                            
000136D2                            ; ===========================================================================
000136D2                            ; ---------------------------------------------------------------------------
000136D2                            ; Object 65 - waterfalls (LZ)
000136D2                            ; ---------------------------------------------------------------------------
000136D2                            
000136D2                            Obj65:					; XREF: Obj_Index
000136D2 7000                       		moveq	#0,d0
000136D4 1028 0024                  		move.b	$24(a0),d0
000136D8 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
000136DC 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
000136E0                            ; ===========================================================================
000136E0 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
000136E2 0000                       		dc.w Obj65_Animate-Obj65_Index
000136E4 0000                       		dc.w Obj65_ChkDel-Obj65_Index
000136E6 0000                       		dc.w Obj65_FixHeight-Obj65_Index
000136E8 0000                       		dc.w loc_12B36-Obj65_Index
000136EA                            ; ===========================================================================
000136EA                            
000136EA                            Obj65_Main:				; XREF: Obj65_Index
000136EA 5828 0024                  		addq.b	#4,$24(a0)
000136EE 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
000136F6 317C 4259 0002             		move.w	#$4259,2(a0)
000136FC 0028 0004 0001             		ori.b	#4,1(a0)
00013702 117C 0018 0019             		move.b	#$18,$19(a0)
00013708 117C 0001 0018             		move.b	#1,$18(a0)
0001370E 1028 0028                  		move.b	$28(a0),d0	; get object type
00013712 6A00                       		bpl.s	loc_12AE6
00013714 08E8 0007 0002             		bset	#7,2(a0)
0001371A                            
0001371A                            loc_12AE6:
0001371A 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
0001371E 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
00013722 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00013726 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00013728 4228 0018                  		clr.b	$18(a0)
0001372C 5528 0024                  		subq.b	#2,$24(a0)
00013730 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00013736 6700                       		beq.s	loc_12B0A	; if not, branch
00013738 117C 0006 0024             		move.b	#6,$24(a0)
0001373E                            
0001373E                            loc_12B0A:
0001373E 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
00013744 6700                       		beq.s	Obj65_Animate	; if not, branch
00013746 117C 0008 0024             		move.b	#8,$24(a0)
0001374C                            
0001374C                            Obj65_Animate:				; XREF: Obj65_Index
0001374C 43F9 0000 0000             		lea	(Ani_obj65).l,a1
00013752 4EB9 0000 B2FA             		jsr	AnimateSprite
00013758                            
00013758                            Obj65_ChkDel:				; XREF: Obj65_Index
00013758 6000 CBEA                  		bra.w	MarkObjGone
0001375C                            ; ===========================================================================
0001375C                            
0001375C                            Obj65_FixHeight:			; XREF: Obj65_Index
0001375C 3038 F646                  		move.w	($FFFFF646).w,d0
00013760 0440 0010                  		subi.w	#$10,d0
00013764 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
00013768 60E2                       		bra.s	Obj65_Animate
0001376A                            ; ===========================================================================
0001376A                            
0001376A                            loc_12B36:				; XREF: Obj65_Index
0001376A 08A8 0007 0002             		bclr	#7,2(a0)
00013770 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00013776 6600                       		bne.s	Obj65_Animate2
00013778 08E8 0007 0002             		bset	#7,2(a0)
0001377E                            
0001377E                            Obj65_Animate2:
0001377E 60CC                       		bra.s	Obj65_Animate
00013780                            ; ===========================================================================
00013780                            Ani_obj65:
00013780                            	include "_anim\obj65.asm"
00013780                            ; ---------------------------------------------------------------------------
00013780                            ; Animation script - waterfall (LZ)
00013780                            ; ---------------------------------------------------------------------------
00013780 0000                       		dc.w byte_12B4E-Ani_obj65
00013782 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00013788 00                         		even
00013788 00                         		even
00013788                            
00013788                            ; ---------------------------------------------------------------------------
00013788                            ; Sprite mappings - waterfalls (LZ)
00013788                            ; ---------------------------------------------------------------------------
00013788                            Map_obj65:
00013788                            	include "_maps\obj65.asm"
00013788                            ; ---------------------------------------------------------------------------
00013788                            ; Sprite mappings - waterfalls (LZ)
00013788                            ; ---------------------------------------------------------------------------
00013788 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
0001378C 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00013790 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00013794 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00013798 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
0001379C 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
000137A0 01                         byte_12B6C:	dc.b 1
000137A1 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000137A6 02                         byte_12B72:	dc.b 2
000137A7 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
000137AC 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
000137B1 02                         byte_12B7D:	dc.b 2
000137B2 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000137B7 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000137BC 01                         byte_12B88:	dc.b 1
000137BD F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
000137C2 02                         byte_12B8E:	dc.b 2
000137C3 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000137C8 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000137CD 01                         byte_12B99:	dc.b 1
000137CE F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
000137D3 01                         byte_12B9F:	dc.b 1
000137D4 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
000137D9 01                         byte_12BA5:	dc.b 1
000137DA F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
000137DF 02                         byte_12BAB:	dc.b 2
000137E0 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
000137E5 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
000137EA 02                         byte_12BB6:	dc.b 2
000137EB F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
000137F0 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
000137F5 02                         byte_12BC1:	dc.b 2
000137F6 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
000137FB F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00013800 02                         byte_12BCC:	dc.b 2
00013801 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00013806 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
0001380C 00                         		even
0001380C 00                         		even
0001380C                            
0001380C                            ; ===========================================================================
0001380C                            ; ---------------------------------------------------------------------------
0001380C                            ; Object 01 - Sonic
0001380C                            ; ---------------------------------------------------------------------------
0001380C                            
0001380C                            Obj01:					; XREF: Obj_Index
0001380C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00013810 6700                       		beq.s	Obj01_Normal	; if not, branch
00013812 4EF9 0000 0000             		jmp	DebugMode
00013818                            ; ===========================================================================
00013818                            
00013818                            Obj01_Normal:
00013818 7000                       		moveq	#0,d0
0001381A 1028 0024                  		move.b	$24(a0),d0
0001381E 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00013822 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00013826                            ; ===========================================================================
00013826 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00013828 0000                       		dc.w Obj01_Control-Obj01_Index
0001382A 0000                       		dc.w Obj01_Hurt-Obj01_Index
0001382C 0000                       		dc.w Obj01_Death-Obj01_Index
0001382E 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00013830                            ; ===========================================================================
00013830                            
00013830                            Player_Maps:
00013830 0000 0000                  	dc.l	Map_Sonic
00013834 0000 0000                  	dc.l	Map_Sonic ; gronic
00013838 0000 0000                  	dc.l	Map_Sonic ; anakama
0001383C 0000 0000                  	dc.l	Map_Sonic ; LimitedSonic
00013840                            	; insert player mapping here
00013840                            	
00013840                            Obj01_Main:				; XREF: Obj01_Index
00013840 5428 0024                  		addq.b	#2,$24(a0)
00013844 117C 0013 0016             		move.b	#$13,$16(a0)
0001384A 117C 0009 0017             		move.b	#9,$17(a0)
00013850                            		
00013850 7000                       		moveq	#0,d0
00013852 1038 FFE8                  		move.b	(v_character),d0
00013856 E548                       		lsl.w	#2,d0
00013858 43FA FFD6                  		lea 	Player_Maps(pc),a1
0001385C 2171 0000 0004             		move.l	(a1,d0.w),4(a0)	; load Map patterns
00013862                            		
00013862 317C 0780 0002             		move.w	#$780,2(a0)
00013868 117C 0002 0018             		move.b	#2,$18(a0)
0001386E 117C 0018 0019             		move.b	#$18,$19(a0)
00013874 117C 0004 0001             		move.b	#4,1(a0)
0001387A 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
00013880 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
00013886 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
0001388C                            
0001388C                            Obj01_Control:				; XREF: Obj01_Index
0001388C 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00013890 6700                       		beq.s	loc_12C58	; if not, branch
00013892 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00013898 6700                       		beq.s	loc_12C58	; if not, branch
0001389A 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
000138A0 4238 F7CC                  		clr.b	($FFFFF7CC).w
000138A4 4E75                       		rts	
000138A6                            ; ===========================================================================
000138A6                            
000138A6                            loc_12C58:
000138A6 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
000138AA 6600                       		bne.s	loc_12C64	; if yes, branch
000138AC 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
000138B2                            
000138B2                            loc_12C64:
000138B2 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
000138B8 6600                       		bne.s	loc_12C7E	; if yes, branch
000138BA 7000                       		moveq	#0,d0
000138BC 1028 0022                  		move.b	$22(a0),d0
000138C0 0240 0006                  		andi.w	#6,d0
000138C4 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
000138C8 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
000138CC                            
000138CC                            loc_12C7E:
000138CC 6100                       		bsr.s	Sonic_Display
000138CE 6100 0000                  		bsr.w	Sonic_RecordPos
000138D2 6100 0000                  		bsr.w	Sonic_Water
000138D6 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
000138DC 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
000138E2 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000138E6 6700                       		beq.s	loc_12CA6
000138E8 4A28 001C                  		tst.b	$1C(a0)
000138EC 6600                       		bne.s	loc_12CA6
000138EE 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
000138F4                            
000138F4                            loc_12CA6:
000138F4 6100 0000                  		bsr.w	Sonic_Animate
000138F8 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000138FC 6B00                       		bmi.s	loc_12CB6
000138FE 4EB9 0000 0000             		jsr	TouchResponse
00013904                            
00013904                            loc_12CB6:
00013904 6100 0000                  		bsr.w	Sonic_Loops
00013908 6100 0000                  		bsr.w	LoadSonicDynPLC
0001390C 4E75                       		rts	
0001390E                            ; ===========================================================================
0001390E 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
00013910 0000                       		dc.w Obj01_MdJump-Obj01_Modes
00013912 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
00013914 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
00013916                            ; ---------------------------------------------------------------------------
00013916                            ; Music	to play	after invincibility wears off
00013916                            ; ---------------------------------------------------------------------------
00013916                            ; ===========================================================================
00013916                            
00013916                            Sonic_Display:				; XREF: loc_12C7E
00013916 3028 0030                  		move.w	$30(a0),d0
0001391A 6700                       		beq.s	Obj01_Display
0001391C 5368 0030                  		subq.w	#1,$30(a0)
00013920 E648                       		lsr.w	#3,d0
00013922 6400                       		bcc.s	Obj01_ChkInvin
00013924                            
00013924                            Obj01_Display:
00013924 4EBA A97C                  		jsr	DisplaySprite
00013928                            
00013928                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
00013928                             
00013928                            Obj01_ChkInvin:
00013928 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
0001392C 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
00013930 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00013934 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
00013938 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
0001393C 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
00013940 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013944 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
00013948 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
0001394E 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
00013952 7000                       		moveq	#0,d0
00013954 1038 FE10                  		move.b	($FFFFFE10).w,d0
00013958                             
00013958 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
0001395E 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
00013960 43F9 0000 3DE2             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00013966 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013968                             
00013968                            Obj01_GetBgm2:
00013968 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
0001396E 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
00013970 43F9 0000 3DEA             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00013976 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013978                             
00013978                            Obj01_GetBgm3:
00013978 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
0001397E 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
00013980 43F9 0000 3DF2             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00013986 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013988                             
00013988                            Obj01_GetBgm4:
00013988 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
0001398E 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
00013990 43F9 0000 3DFA             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00013996                             
00013996                            Obj01_PlayMusic:
00013996 1031 0000                  		move.b	(a1,d0.w),d0
0001399A 4EB9 0000 15E0             		jsr	(PlaySound).l	; play normal music
000139A0                             
000139A0                            ; NineKode ends here.
000139A0                            
000139A0                            Obj01_RmvInvin:
000139A0 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
000139A6                            
000139A6                            Obj01_ChkShoes:
000139A6 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
000139AA 6700                       		beq.s	Obj01_ExitChk	; if not, branch
000139AC 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
000139B0 6700                       		beq.s	Obj01_ExitChk
000139B2 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
000139B6 6600                       		bne.s	Obj01_ExitChk
000139B8 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000139BE 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000139C4 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000139CA 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
000139D0 303C 00E3                  		move.w	#$E3,d0
000139D4 4EF9 0000 15E0             		jmp	(PlaySound).l	; run music at normal speed
000139DA                            ; ===========================================================================
000139DA                            
000139DA                            Obj01_ExitChk:
000139DA 4E75                       		rts	
000139DC                            
000139DC                            ; ---------------------------------------------------------------------------
000139DC                            ; Subroutine to	record Sonic's previous positions for invincibility stars
000139DC                            ; ---------------------------------------------------------------------------
000139DC                            
000139DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000139DC                            
000139DC                            
000139DC                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
000139DC 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000139E0 43F8 CB00                  		lea	($FFFFCB00).w,a1
000139E4 43F1 0000                  		lea	(a1,d0.w),a1
000139E8 32E8 0008                  		move.w	8(a0),(a1)+
000139EC 32E8 000C                  		move.w	$C(a0),(a1)+
000139F0 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
000139F4 4E75                       		rts	
000139F6                            ; End of function Sonic_RecordPos
000139F6                            
000139F6                            ; ---------------------------------------------------------------------------
000139F6                            ; Subroutine for Sonic when he's underwater
000139F6                            ; ---------------------------------------------------------------------------
000139F6                            
000139F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000139F6                            
000139F6                            
000139F6                            Sonic_Water:				; XREF: loc_12C7E
000139F6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000139FC 6700                       		beq.s	Obj01_InWater	; if yes, branch
000139FE                            
000139FE                            locret_12D80:
000139FE 4E75                       		rts	
00013A00                            ; ===========================================================================
00013A00                            
00013A00                            Obj01_InWater:
00013A00 3038 F646                  		move.w	($FFFFF646).w,d0
00013A04 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00013A08 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00013A0A 08E8 0006 0022             		bset	#6,$22(a0)
00013A10 66EC                       		bne.s	locret_12D80
00013A12 6100 0000                  		bsr.w	ResumeMusic
00013A16 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00013A1C 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00013A22 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00013A28 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
00013A2E 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
00013A34 E0E8 0010                  		asr	$10(a0)
00013A38 E0E8 0012                  		asr	$12(a0)
00013A3C E0E8 0012                  		asr	$12(a0)
00013A40 67BC                       		beq.s	locret_12D80
00013A42 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013A48 303C 00AA                  		move.w	#$AA,d0
00013A4C 4EF9 0000 15E6             		jmp	(PlaySound_Special).l ;	play splash sound
00013A52                            ; ===========================================================================
00013A52                            
00013A52                            Obj01_OutWater:
00013A52 08A8 0006 0022             		bclr	#6,$22(a0)
00013A58 67A4                       		beq.s	locret_12D80
00013A5A 6100 0000                  		bsr.w	ResumeMusic
00013A5E 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013A64 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013A6A 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013A70 E1E8 0012                  		asl	$12(a0)
00013A74 6700 FF88                  		beq.w	locret_12D80
00013A78 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013A7E 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00013A84 6E00                       		bgt.s	loc_12E0E
00013A86 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00013A8C                            
00013A8C                            loc_12E0E:
00013A8C 303C 00AA                  		move.w	#$AA,d0
00013A90 4EF9 0000 15E6             		jmp	(PlaySound_Special).l ;	play splash sound
00013A96                            ; End of function Sonic_Water
00013A96                            
00013A96                            ; ===========================================================================
00013A96                            ; ---------------------------------------------------------------------------
00013A96                            ; Modes	for controlling	Sonic
00013A96                            ; ---------------------------------------------------------------------------
00013A96                            
00013A96                            Obj01_MdNormal:				; XREF: Obj01_Modes
00013A96 6100 0000                  		bsr.w	Sonic_Jump
00013A9A 6100 0000                  		bsr.w	Sonic_SlopeResist
00013A9E 6100 0000                  		bsr.w	Sonic_Move
00013AA2 6100 0000                  		bsr.w	Sonic_Roll
00013AA6 6100 0000                  		bsr.w	Sonic_LevelBound
00013AAA 4EBA A7BC                  		jsr	SpeedToPos
00013AAE 6100 0000                  		bsr.w	Sonic_AnglePos
00013AB2 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013AB6 4E75                       		rts	
00013AB8                            ; ===========================================================================
00013AB8                            
00013AB8                            Obj01_MdJump:				; XREF: Obj01_Modes
00013AB8 6100 0000                  		bsr.w	Sonic_JumpHeight
00013ABC 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013AC0 6100 0000                  		bsr.w	Sonic_LevelBound
00013AC4 4EBA A740                  		jsr	ObjectFall
00013AC8 0828 0006 0022             		btst	#6,$22(a0)
00013ACE 6700                       		beq.s	loc_12E5C
00013AD0 0468 0028 0012             		subi.w	#$28,$12(a0)
00013AD6                            
00013AD6                            loc_12E5C:
00013AD6 6100 0000                  		bsr.w	Sonic_JumpAngle
00013ADA 6100 0000                  		bsr.w	Sonic_Floor
00013ADE 4E75                       		rts	
00013AE0                            ; ===========================================================================
00013AE0                            
00013AE0                            Obj01_MdRoll:				; XREF: Obj01_Modes
00013AE0 6100 0000                  		bsr.w	Sonic_Jump
00013AE4 6100 0000                  		bsr.w	Sonic_RollRepel
00013AE8 6100 0000                  		bsr.w	Sonic_RollSpeed
00013AEC 6100 0000                  		bsr.w	Sonic_LevelBound
00013AF0 4EBA A776                  		jsr	SpeedToPos
00013AF4 6100 0000                  		bsr.w	Sonic_AnglePos
00013AF8 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013AFC 4E75                       		rts	
00013AFE                            ; ===========================================================================
00013AFE                            
00013AFE                            Obj01_MdJump2:				; XREF: Obj01_Modes
00013AFE 6100 0000                  		bsr.w	Sonic_JumpHeight
00013B02 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013B06 6100 0000                  		bsr.w	Sonic_LevelBound
00013B0A 6100 0000                  		bsr.w	Sonic_AirUnroll
00013B0E 4EBA A6F6                  		jsr	ObjectFall
00013B12 0828 0006 0022             		btst	#6,$22(a0)
00013B18 6700                       		beq.s	loc_12EA6
00013B1A 0468 0028 0012             		subi.w	#$28,$12(a0)
00013B20                            
00013B20                            loc_12EA6:
00013B20 6100 0000                  		bsr.w	Sonic_JumpAngle
00013B24 6100 0000                  		bsr.w	Sonic_Floor
00013B28 4E75                       		rts	
00013B2A                            ; ---------------------------------------------------------------------------
00013B2A                            ; Subroutine to	make Sonic walk/run
00013B2A                            ; ---------------------------------------------------------------------------
00013B2A                            
00013B2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B2A                            
00013B2A                            
00013B2A                            Sonic_Move:				; XREF: Obj01_MdNormal
00013B2A 3C38 F760                  		move.w	($FFFFF760).w,d6
00013B2E 3A38 F762                  		move.w	($FFFFF762).w,d5
00013B32 3838 F764                  		move.w	($FFFFF764).w,d4
00013B36 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013B3A 6600 0000                  		bne.w	loc_12FEE
00013B3E 4A68 003E                  		tst.w	$3E(a0)
00013B42 6600 0000                  		bne.w	Obj01_ResetScr
00013B46 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013B4C 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00013B4E 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013B54 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
00013B56 6100 0000                  		bsr.w	Sonic_MoveLeft
00013B5A                            
00013B5A                            Obj01_NotLeft:
00013B5A 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013B60 6700                       		beq.s	Obj01_NotRight	; if not, branch
00013B62 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013B68 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
00013B6A 6100 0000                  		bsr.w	Sonic_MoveLeft
00013B6E 6000                       		bra.s	Obj01_NotRight
00013B70                            
00013B70                            Obj01_MoveRight:
00013B70 6100 0000                  		bsr.w	Sonic_MoveRight
00013B74                            
00013B74                            Obj01_NotRight:
00013B74 1028 0026                  		move.b	$26(a0),d0
00013B78 0600 0020                  		addi.b	#$20,d0
00013B7C 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00013B80 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013B84 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013B88 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013B8C 08A8 0005 0022             		bclr	#5,$22(a0)
00013B92 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013B98 0828 0003 0022             		btst	#3,$22(a0)
00013B9E 6700                       		beq.s	Sonic_Balance
00013BA0 7000                       		moveq	#0,d0
00013BA2 1028 003D                  		move.b	$3D(a0),d0
00013BA6 ED48                       		lsl.w	#6,d0
00013BA8 43F8 D000                  		lea	($FFFFD000).w,a1
00013BAC 43F1 0000                  		lea	(a1,d0.w),a1
00013BB0 4A29 0022                  		tst.b	$22(a1)
00013BB4 6B00                       		bmi.s	Sonic_LookUp
00013BB6 7200                       		moveq	#0,d1
00013BB8 1229 0019                  		move.b	$19(a1),d1
00013BBC 3401                       		move.w	d1,d2
00013BBE D442                       		add.w	d2,d2
00013BC0 5942                       		subq.w	#4,d2
00013BC2 D268 0008                  		add.w	8(a0),d1
00013BC6 9269 0008                  		sub.w	8(a1),d1
00013BCA 0C41 0004                  		cmpi.w	#4,d1
00013BCE 6D00                       		blt.s	loc_12F6A
00013BD0 B242                       		cmp.w	d2,d1
00013BD2 6C00                       		bge.s	loc_12F5A
00013BD4 6000                       		bra.s	Sonic_LookUp
00013BD6                            ; ===========================================================================
00013BD6                            
00013BD6                            Sonic_Balance:
00013BD6 4EB9 0000 0000             		jsr	ObjHitFloor
00013BDC 0C41 000C                  		cmpi.w	#$C,d1
00013BE0 6D00                       		blt.s	Sonic_LookUp
00013BE2 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00013BE8 6600                       		bne.s	loc_12F62
00013BEA                            
00013BEA                            loc_12F5A:
00013BEA 08A8 0000 0022             		bclr	#0,$22(a0)
00013BF0 6000                       		bra.s	loc_12F70
00013BF2                            ; ===========================================================================
00013BF2                            
00013BF2                            loc_12F62:
00013BF2 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00013BF8 6600                       		bne.s	Sonic_LookUp
00013BFA                            
00013BFA                            loc_12F6A:
00013BFA 08E8 0000 0022             		bset	#0,$22(a0)
00013C00                            
00013C00                            loc_12F70:
00013C00 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00013C06 6000                       		bra.s	Obj01_ResetScr
00013C08                            ; ===========================================================================
00013C08                            
00013C08                            Sonic_LookUp:
00013C08 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00013C0E 6700                       		beq.s	Sonic_Duck	; if not, branch
00013C10 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00013C16 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00013C1C 6700                       		beq.s	loc_12FC2
00013C1E 5478 F73E                  		addq.w	#2,($FFFFF73E).w
00013C22 6000                       		bra.s	loc_12FC2
00013C24                            ; ===========================================================================
00013C24                            
00013C24                            Sonic_Duck:
00013C24 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013C2A 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00013C2C 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
00013C32 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00013C38 6700                       		beq.s	loc_12FC2
00013C3A 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013C3E 6000                       		bra.s	loc_12FC2
00013C40                            ; ===========================================================================
00013C40                            
00013C40                            Obj01_ResetScr:
00013C40 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00013C46 6700                       		beq.s	loc_12FC2	; if yes, branch
00013C48 6400                       		bcc.s	loc_12FBE
00013C4A 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00013C4E                            
00013C4E                            loc_12FBE:
00013C4E 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00013C52                            
00013C52                            loc_12FC2:
00013C52 1038 F602                  		move.b	($FFFFF602).w,d0
00013C56 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00013C5A 6600                       		bne.s	loc_12FEE	; if yes, branch
00013C5C 3028 0014                  		move.w	$14(a0),d0
00013C60 6700                       		beq.s	loc_12FEE
00013C62 6B00                       		bmi.s	loc_12FE2
00013C64 9045                       		sub.w	d5,d0
00013C66 6400                       		bcc.s	loc_12FDC
00013C68 303C 0000                  		move.w	#0,d0
00013C6C                            
00013C6C                            loc_12FDC:
00013C6C 3140 0014                  		move.w	d0,$14(a0)
00013C70 6000                       		bra.s	loc_12FEE
00013C72                            ; ===========================================================================
00013C72                            
00013C72                            loc_12FE2:
00013C72 D045                       		add.w	d5,d0
00013C74 6400                       		bcc.s	loc_12FEA
00013C76 303C 0000                  		move.w	#0,d0
00013C7A                            
00013C7A                            loc_12FEA:
00013C7A 3140 0014                  		move.w	d0,$14(a0)
00013C7E                            
00013C7E                            loc_12FEE:
00013C7E 1028 0026                  		move.b	$26(a0),d0
00013C82 4EB9 0000 2D80             		jsr	(CalcSine).l
00013C88 C3E8 0014                  		muls.w	$14(a0),d1
00013C8C E081                       		asr.l	#8,d1
00013C8E 3141 0010                  		move.w	d1,$10(a0)
00013C92 C1E8 0014                  		muls.w	$14(a0),d0
00013C96 E080                       		asr.l	#8,d0
00013C98 3140 0012                  		move.w	d0,$12(a0)
00013C9C                            
00013C9C                            loc_1300C:
00013C9C 1028 0026                  		move.b	$26(a0),d0
00013CA0 0600 0040                  		addi.b	#$40,d0
00013CA4 6B00                       		bmi.s	locret_1307C
00013CA6 123C 0040                  		move.b	#$40,d1
00013CAA 4A68 0014                  		tst.w	$14(a0)
00013CAE 6700                       		beq.s	locret_1307C
00013CB0 6B00                       		bmi.s	loc_13024
00013CB2 4441                       		neg.w	d1
00013CB4                            
00013CB4                            loc_13024:
00013CB4 1028 0026                  		move.b	$26(a0),d0
00013CB8 D001                       		add.b	d1,d0
00013CBA 3F00                       		move.w	d0,-(sp)
00013CBC 6100 0000                  		bsr.w	Sonic_WalkSpeed
00013CC0 301F                       		move.w	(sp)+,d0
00013CC2 4A41                       		tst.w	d1
00013CC4 6A00                       		bpl.s	locret_1307C
00013CC6 E141                       		asl.w	#8,d1
00013CC8 0600 0020                  		addi.b	#$20,d0
00013CCC 0200 00C0                  		andi.b	#$C0,d0
00013CD0 6700                       		beq.s	loc_13078
00013CD2 0C00 0040                  		cmpi.b	#$40,d0
00013CD6 6700                       		beq.s	loc_13066
00013CD8 0C00 0080                  		cmpi.b	#$80,d0
00013CDC 6700                       		beq.s	loc_13060
00013CDE D368 0010                  		add.w	d1,$10(a0)
00013CE2 08E8 0005 0022             		bset	#5,$22(a0)
00013CE8 317C 0000 0014             		move.w	#0,$14(a0)
00013CEE 4E75                       		rts	
00013CF0                            ; ===========================================================================
00013CF0                            
00013CF0                            loc_13060:
00013CF0 9368 0012                  		sub.w	d1,$12(a0)
00013CF4 4E75                       		rts	
00013CF6                            ; ===========================================================================
00013CF6                            
00013CF6                            loc_13066:
00013CF6 9368 0010                  		sub.w	d1,$10(a0)
00013CFA 08E8 0005 0022             		bset	#5,$22(a0)
00013D00 317C 0000 0014             		move.w	#0,$14(a0)
00013D06 4E75                       		rts	
00013D08                            ; ===========================================================================
00013D08                            
00013D08                            loc_13078:
00013D08 D368 0012                  		add.w	d1,$12(a0)
00013D0C                            
00013D0C                            locret_1307C:
00013D0C 4E75                       		rts	
00013D0E                            ; End of function Sonic_Move
00013D0E                            
00013D0E                            
00013D0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D0E                            
00013D0E                            
00013D0E                            Sonic_MoveLeft:				; XREF: Sonic_Move
00013D0E 3028 0014                  		move.w	$14(a0),d0
00013D12 6700                       		beq.s	loc_13086
00013D14 6A00                       		bpl.s	loc_130B2
00013D16                            
00013D16                            loc_13086:
00013D16 08E8 0000 0022             		bset	#0,$22(a0)
00013D1C 6600                       		bne.s	loc_1309A
00013D1E 08A8 0005 0022             		bclr	#5,$22(a0)
00013D24 117C 0001 001D             		move.b	#1,$1D(a0)
00013D2A                            
00013D2A                            loc_1309A:
00013D2A 9045                       		sub.w	d5,d0
00013D2C 3206                       		move.w	d6,d1
00013D2E 4441                       		neg.w	d1
00013D30 B041                       		cmp.w	d1,d0
00013D32 6E00                       		bgt.s	loc_130A6
00013D34 3001                       		move.w	d1,d0
00013D36                            
00013D36                            loc_130A6:
00013D36 3140 0014                  		move.w	d0,$14(a0)
00013D3A 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013D40 4E75                       		rts	
00013D42                            ; ===========================================================================
00013D42                            
00013D42                            loc_130B2:				; XREF: Sonic_MoveLeft
00013D42 9044                       		sub.w	d4,d0
00013D44 6400                       		bcc.s	loc_130BA
00013D46 303C FF80                  		move.w	#-$80,d0
00013D4A                            
00013D4A                            loc_130BA:
00013D4A 3140 0014                  		move.w	d0,$14(a0)
00013D4E 1028 0026                  		move.b	$26(a0),d0
00013D52 0600 0020                  		addi.b	#$20,d0
00013D56 0200 00C0                  		andi.b	#$C0,d0
00013D5A 6600                       		bne.s	locret_130E8
00013D5C 0C40 0400                  		cmpi.w	#$400,d0
00013D60 6D00                       		blt.s	locret_130E8
00013D62 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013D68 08A8 0000 0022             		bclr	#0,$22(a0)
00013D6E 303C 00A4                  		move.w	#$A4,d0
00013D72 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play stopping sound
00013D78                            
00013D78                            locret_130E8:
00013D78 4E75                       		rts	
00013D7A                            ; End of function Sonic_MoveLeft
00013D7A                            
00013D7A                            
00013D7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D7A                            
00013D7A                            
00013D7A                            Sonic_MoveRight:			; XREF: Sonic_Move
00013D7A 3028 0014                  		move.w	$14(a0),d0
00013D7E 6B00                       		bmi.s	loc_13118
00013D80 08A8 0000 0022             		bclr	#0,$22(a0)
00013D86 6700                       		beq.s	loc_13104
00013D88 08A8 0005 0022             		bclr	#5,$22(a0)
00013D8E 117C 0001 001D             		move.b	#1,$1D(a0)
00013D94                            
00013D94                            loc_13104:
00013D94 D045                       		add.w	d5,d0
00013D96 B046                       		cmp.w	d6,d0
00013D98 6D00                       		blt.s	loc_1310C
00013D9A 3006                       		move.w	d6,d0
00013D9C                            
00013D9C                            loc_1310C:
00013D9C 3140 0014                  		move.w	d0,$14(a0)
00013DA0 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013DA6 4E75                       		rts	
00013DA8                            ; ===========================================================================
00013DA8                            
00013DA8                            loc_13118:				; XREF: Sonic_MoveRight
00013DA8 D044                       		add.w	d4,d0
00013DAA 6400                       		bcc.s	loc_13120
00013DAC 303C 0080                  		move.w	#$80,d0
00013DB0                            
00013DB0                            loc_13120:
00013DB0 3140 0014                  		move.w	d0,$14(a0)
00013DB4 1028 0026                  		move.b	$26(a0),d0
00013DB8 0600 0020                  		addi.b	#$20,d0
00013DBC 0200 00C0                  		andi.b	#$C0,d0
00013DC0 6600                       		bne.s	locret_1314E
00013DC2 0C40 FC00                  		cmpi.w	#-$400,d0
00013DC6 6E00                       		bgt.s	locret_1314E
00013DC8 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013DCE 08E8 0000 0022             		bset	#0,$22(a0)
00013DD4 303C 00A4                  		move.w	#$A4,d0
00013DD8 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play stopping sound
00013DDE                            
00013DDE                            locret_1314E:
00013DDE 4E75                       		rts	
00013DE0                            ; End of function Sonic_MoveRight
00013DE0                            
00013DE0                            ; ---------------------------------------------------------------------------
00013DE0                            ; Subroutine to	change Sonic's speed as he rolls
00013DE0                            ; ---------------------------------------------------------------------------
00013DE0                            
00013DE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DE0                            
00013DE0                            
00013DE0                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00013DE0 3C38 F760                  		move.w	($FFFFF760).w,d6
00013DE4 E346                       		asl.w	#1,d6
00013DE6 3A38 F762                  		move.w	($FFFFF762).w,d5
00013DEA E245                       		asr.w	#1,d5
00013DEC 3838 F764                  		move.w	($FFFFF764).w,d4
00013DF0 E444                       		asr.w	#2,d4
00013DF2 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013DF6 6600 0000                  		bne.w	loc_131CC
00013DFA 4A68 003E                  		tst.w	$3E(a0)
00013DFE 6600                       		bne.s	loc_13188
00013E00 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013E06 6700                       		beq.s	loc_1317C	; if not, branch
00013E08 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013E0E 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
00013E10 6100 0000                  		bsr.w	Sonic_RollLeft
00013E14                            
00013E14                            loc_1317C:
00013E14 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013E1A 6700                       		beq.s	loc_13188	; if not, branch
00013E1C 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013E22 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
00013E24 6100 0000                  		bsr.w	Sonic_RollLeft
00013E28 6000                       		bra.s	loc_13188
00013E2A                            
00013E2A                            SonicRS_RollRight:
00013E2A 6100 0000                  		bsr.w	Sonic_RollRight
00013E2E                            
00013E2E                            loc_13188:
00013E2E 3028 0014                  		move.w	$14(a0),d0
00013E32 6700                       		beq.s	loc_131AA
00013E34 6B00                       		bmi.s	loc_1319E
00013E36 9045                       		sub.w	d5,d0
00013E38 6400                       		bcc.s	loc_13198
00013E3A 303C 0000                  		move.w	#0,d0
00013E3E                            
00013E3E                            loc_13198:
00013E3E 3140 0014                  		move.w	d0,$14(a0)
00013E42 6000                       		bra.s	loc_131AA
00013E44                            ; ===========================================================================
00013E44                            
00013E44                            loc_1319E:				; XREF: Sonic_RollSpeed
00013E44 D045                       		add.w	d5,d0
00013E46 6400                       		bcc.s	loc_131A6
00013E48 303C 0000                  		move.w	#0,d0
00013E4C                            
00013E4C                            loc_131A6:
00013E4C 3140 0014                  		move.w	d0,$14(a0)
00013E50                            
00013E50                            loc_131AA:
00013E50 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013E54 6600                       		bne.s	loc_131CC	; if yes, branch
00013E56 08A8 0002 0022             		bclr	#2,$22(a0)
00013E5C 117C 0013 0016             		move.b	#$13,$16(a0)
00013E62 117C 0009 0017             		move.b	#9,$17(a0)
00013E68 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013E6E 5B68 000C                  		subq.w	#5,$C(a0)
00013E72                            
00013E72                            loc_131CC:
00013E72 1028 0026                  		move.b	$26(a0),d0
00013E76 4EB9 0000 2D80             		jsr	(CalcSine).l
00013E7C C1E8 0014                  		muls.w	$14(a0),d0
00013E80 E080                       		asr.l	#8,d0
00013E82 3140 0012                  		move.w	d0,$12(a0)
00013E86 C3E8 0014                  		muls.w	$14(a0),d1
00013E8A E081                       		asr.l	#8,d1
00013E8C 0C41 1000                  		cmpi.w	#$1000,d1
00013E90 6F00                       		ble.s	loc_131F0
00013E92 323C 1000                  		move.w	#$1000,d1
00013E96                            
00013E96                            loc_131F0:
00013E96 0C41 F000                  		cmpi.w	#-$1000,d1
00013E9A 6C00                       		bge.s	loc_131FA
00013E9C 323C F000                  		move.w	#-$1000,d1
00013EA0                            
00013EA0                            loc_131FA:
00013EA0 3141 0010                  		move.w	d1,$10(a0)
00013EA4 6000 FDF6                  		bra.w	loc_1300C
00013EA8                            ; End of function Sonic_RollSpeed
00013EA8                            
00013EA8                            
00013EA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013EA8                            
00013EA8                            
00013EA8                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00013EA8 3028 0014                  		move.w	$14(a0),d0
00013EAC 6700                       		beq.s	loc_1320A
00013EAE 6A00                       		bpl.s	loc_13218
00013EB0                            
00013EB0                            loc_1320A:
00013EB0 08E8 0000 0022             		bset	#0,$22(a0)
00013EB6 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013EBC 4E75                       		rts	
00013EBE                            ; ===========================================================================
00013EBE                            
00013EBE                            loc_13218:
00013EBE 9044                       		sub.w	d4,d0
00013EC0 6400                       		bcc.s	loc_13220
00013EC2 303C FF80                  		move.w	#-$80,d0
00013EC6                            
00013EC6                            loc_13220:
00013EC6 3140 0014                  		move.w	d0,$14(a0)
00013ECA 4E75                       		rts	
00013ECC                            ; End of function Sonic_RollLeft
00013ECC                            
00013ECC                            
00013ECC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013ECC                            
00013ECC                            
00013ECC                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00013ECC 3028 0014                  		move.w	$14(a0),d0
00013ED0 6B00                       		bmi.s	loc_1323A
00013ED2 08A8 0000 0022             		bclr	#0,$22(a0)
00013ED8 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013EDE 4E75                       		rts	
00013EE0                            ; ===========================================================================
00013EE0                            
00013EE0                            loc_1323A:
00013EE0 D044                       		add.w	d4,d0
00013EE2 6400                       		bcc.s	loc_13242
00013EE4 303C 0080                  		move.w	#$80,d0
00013EE8                            
00013EE8                            loc_13242:
00013EE8 3140 0014                  		move.w	d0,$14(a0)
00013EEC 4E75                       		rts	
00013EEE                            ; End of function Sonic_RollRight
00013EEE                            
00013EEE                            Sonic_AirUnroll:
00013EEE                            		
00013EEE 4A28 003A                  		tst.b	$3A(a0) ; check jump height control
00013EF2 6600                       		bne.s	@timer
00013EF4 1038 F605                  		move.b	($FFFFF605).w,d0
00013EF8 0200 0070                  		andi.b	#$70,d0 ; is abc being pressed?
00013EFC 6700                       		beq.s	@end	; if not, branch
00013EFE 08A8 0002 0022             		bclr	#2,$22(a0)
00013F04 117C 0013 0016             		move.b	#$13,$16(a0)
00013F0A 117C 0009 0017             		move.b	#9,$17(a0)
00013F10 117C 000E 001C             		move.b	#14,$1C(a0)	; use dunk animation
00013F16 303C 00A5                  		move.w	#$A5,d0
00013F1A 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play fart sound
00013F20 2028 0010                  		move.l	$10(a0),d0
00013F24 D080                       		add.l	d0,d0
00013F26 2140 0010                  		move.l	d0,$10(a0)
00013F2A 5B68 000C                  		subq.w	#5,$C(a0)
00013F2E                            	@end:
00013F2E 4E75                       		rts
00013F30                            	@timer:
00013F30 5328 003A                  		subq.b	#1,$3A(a0)
00013F34 4E75                       		rts
00013F36                            
00013F36                            ; ---------------------------------------------------------------------------
00013F36                            ; Subroutine to	change Sonic's direction while jumping
00013F36                            ; ---------------------------------------------------------------------------
00013F36                            
00013F36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F36                            
00013F36                            
00013F36                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013F36 3C38 F760                  		move.w	($FFFFF760).w,d6
00013F3A 3A38 F762                  		move.w	($FFFFF762).w,d5
00013F3E E345                       		asl.w	#1,d5
00013F40 0828 0004 0022             		btst	#4,$22(a0)
00013F46 6600                       		bne.s	Obj01_ResetScr2
00013F48 3028 0010                  		move.w	$10(a0),d0
00013F4C 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013F52 6700                       		beq.s	loc_13278	; if not, branch
00013F54 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013F5A 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
00013F5C 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013F60 6E00                       		bgt.s	loc_13278
00013F62 3001                       		move.w	d1,d0
00013F64                            
00013F64                            loc_13278:
00013F64 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013F6A 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00013F6C 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013F72 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
00013F74 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013F78 6E00                       		bgt.s	Obj01_JumpMove
00013F7A 3001                       		move.w	d1,d0
00013F7C 6000                       		bra.s	Obj01_JumpMove
00013F7E                            
00013F7E                            SonicCJD_JumpLeft:
00013F7E 08E8 0000 0022             		bset	#0,$22(a0)
00013F84 9045                       		sub.w	d5,d0
00013F86 3206                       		move.w	d6,d1
00013F88 4441                       		neg.w	d1
00013F8A B041                       		cmp.w	d1,d0
00013F8C                            		; bgt.s	loc_13278
00013F8C                            		; move.w	d1,d0
00013F8C 4E75                       		rts
00013F8E                            
00013F8E                            SonicCJD_JumpRight:
00013F8E 08A8 0000 0022             		bclr	#0,$22(a0)
00013F94 D045                       		add.w	d5,d0
00013F96 B046                       		cmp.w	d6,d0
00013F98 6D00                       		blt.s	Obj01_JumpMove
00013F9A 3006                       		move.w	d6,d0
00013F9C                            
00013F9C                            Obj01_JumpMove:
00013F9C 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013FA0                            
00013FA0                            Obj01_ResetScr2:
00013FA0 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013FA6 6700                       		beq.s	loc_132A4	; if yes, branch
00013FA8 6400                       		bcc.s	loc_132A0
00013FAA 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013FAE                            
00013FAE                            loc_132A0:
00013FAE 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013FB2                            
00013FB2                            loc_132A4:
00013FB2 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013FB8 6500                       		bcs.s	locret_132D2	; if yes, branch
00013FBA 3028 0010                  		move.w	$10(a0),d0
00013FBE 3200                       		move.w	d0,d1
00013FC0 EA41                       		asr.w	#5,d1
00013FC2 6700                       		beq.s	locret_132D2
00013FC4 6B00                       		bmi.s	loc_132C6
00013FC6 9041                       		sub.w	d1,d0
00013FC8 6400                       		bcc.s	loc_132C0
00013FCA 303C 0000                  		move.w	#0,d0
00013FCE                            
00013FCE                            loc_132C0:
00013FCE 3140 0010                  		move.w	d0,$10(a0)
00013FD2 4E75                       		rts	
00013FD4                            ; ===========================================================================
00013FD4                            
00013FD4                            loc_132C6:
00013FD4 9041                       		sub.w	d1,d0
00013FD6 6500                       		bcs.s	loc_132CE
00013FD8 303C 0000                  		move.w	#0,d0
00013FDC                            
00013FDC                            loc_132CE:
00013FDC 3140 0010                  		move.w	d0,$10(a0)
00013FE0                            
00013FE0                            locret_132D2:
00013FE0 4E75                       		rts	
00013FE2                            ; End of function Sonic_ChgJumpDir
00013FE2                            
00013FE2                            ; ===========================================================================
00013FE2                            ; ---------------------------------------------------------------------------
00013FE2                            ; Unused subroutine to squash Sonic
00013FE2                            ; ---------------------------------------------------------------------------
00013FE2 1028 0026                  		move.b	$26(a0),d0
00013FE6 0600 0020                  		addi.b	#$20,d0
00013FEA 0200 00C0                  		andi.b	#$C0,d0
00013FEE 6600                       		bne.s	locret_13302
00013FF0 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013FF4 4A41                       		tst.w	d1
00013FF6 6A00                       		bpl.s	locret_13302
00013FF8 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013FFE 317C 0000 0010             		move.w	#0,$10(a0)
00014004 317C 0000 0012             		move.w	#0,$12(a0)
0001400A 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00014010                            
00014010                            locret_13302:
00014010 4E75                       		rts	
00014012                            ; ---------------------------------------------------------------------------
00014012                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00014012                            ; ---------------------------------------------------------------------------
00014012                            
00014012                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014012                            
00014012                            
00014012                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00014012 2228 0008                  		move.l	8(a0),d1
00014016 3028 0010                  		move.w	$10(a0),d0
0001401A 48C0                       		ext.l	d0
0001401C E180                       		asl.l	#8,d0
0001401E D280                       		add.l	d0,d1
00014020 4841                       		swap	d1
00014022 3038 F728                  		move.w	($FFFFF728).w,d0
00014026 0640 0010                  		addi.w	#$10,d0
0001402A B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
0001402C 6200                       		bhi.s	Boundary_Sides	; if yes, branch
0001402E 3038 F72A                  		move.w	($FFFFF72A).w,d0
00014032 0640 0128                  		addi.w	#$128,d0
00014036 4A38 F7AA                  		tst.b	($FFFFF7AA).w
0001403A 6600                       		bne.s	loc_13332
0001403C 0640 0040                  		addi.w	#$40,d0
00014040                            
00014040                            loc_13332:
00014040 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00014042 6300                       		bls.s	Boundary_Sides	; if yes, branch
00014044                            
00014044                            loc_13336:
00014044 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014048 0640 00E0                  		addi.w	#$E0,d0
0001404C B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00014050 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00014052 4E75                       		rts	
00014054                            ; ===========================================================================
00014054                            
00014054                            Boundary_Bottom:
00014054 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
0001405A 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
0001405E 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00014064 6500 0000                  		bcs.w	KillSonic
00014068 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0001406C 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00014072 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00014078 4E75                       		rts	
0001407A                            ; ===========================================================================
0001407A                            
0001407A                            Boundary_Sides:
0001407A 3140 0008                  		move.w	d0,8(a0)
0001407E 317C 0000 000A             		move.w	#0,$A(a0)
00014084 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
0001408A 317C 0000 0014             		move.w	#0,$14(a0)
00014090 60B2                       		bra.s	loc_13336
00014092                            ; End of function Sonic_LevelBound
00014092                            
00014092                            ; ---------------------------------------------------------------------------
00014092                            ; Subroutine allowing Sonic to roll when he's moving
00014092                            ; ---------------------------------------------------------------------------
00014092                            
00014092                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014092                            
00014092                            
00014092                            Sonic_Roll:				; XREF: Obj01_MdNormal
00014092 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00014096 6600                       		bne.s	Obj01_NoRoll
00014098 3028 0014                  		move.w	$14(a0),d0
0001409C 6A00                       		bpl.s	loc_13392
0001409E 4440                       		neg.w	d0
000140A0                            
000140A0                            loc_13392:
000140A0 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
000140A4 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
000140A6 1038 F602                  		move.b	($FFFFF602).w,d0
000140AA 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
000140AE 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
000140B0 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000140B6 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
000140B8                            
000140B8                            Obj01_NoRoll:
000140B8 4E75                       		rts	
000140BA                            ; ===========================================================================
000140BA                            
000140BA                            Obj01_ChkRoll:
000140BA 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
000140C0 6700                       		beq.s	Obj01_DoRoll	; if not, branch
000140C2 4E75                       		rts	
000140C4                            ; ===========================================================================
000140C4                            
000140C4                            Obj01_DoRoll:
000140C4 08E8 0002 0022             		bset	#2,$22(a0)
000140CA 117C 000E 0016             		move.b	#$E,$16(a0)
000140D0 117C 0007 0017             		move.b	#7,$17(a0)
000140D6 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000140DC 5A68 000C                  		addq.w	#5,$C(a0)
000140E0 303C 00BE                  		move.w	#$BE,d0
000140E4 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play rolling sound
000140EA 4A68 0014                  		tst.w	$14(a0)
000140EE 6600                       		bne.s	locret_133E8
000140F0 317C 0200 0014             		move.w	#$200,$14(a0)
000140F6                            
000140F6                            locret_133E8:
000140F6 4E75                       		rts	
000140F8                            ; End of function Sonic_Roll
000140F8                            
000140F8                            ; ---------------------------------------------------------------------------
000140F8                            ; Subroutine allowing Sonic to jump
000140F8                            ; ---------------------------------------------------------------------------
000140F8                            
000140F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000140F8                            
000140F8                            
000140F8                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
000140F8 1038 F603                  		move.b	($FFFFF603).w,d0
000140FC 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00014100 6700 0000                  		beq.w	locret_1348E	; if not, branch
00014104 7000                       		moveq	#0,d0
00014106 1028 0026                  		move.b	$26(a0),d0
0001410A 0600 0080                  		addi.b	#$80,d0
0001410E 6100 0000                  		bsr.w	sub_14D48
00014112 0C41 0006                  		cmpi.w	#6,d1
00014116 6D00 0000                  		blt.w	locret_1348E
0001411A 343C 0680                  		move.w	#$680,d2
0001411E 0828 0006 0022             		btst	#6,$22(a0)
00014124 6700                       		beq.s	loc_1341C
00014126 343C 0380                  		move.w	#$380,d2
0001412A                            
0001412A                            loc_1341C:
0001412A 7000                       		moveq	#0,d0
0001412C 1028 0026                  		move.b	$26(a0),d0
00014130 0400 0040                  		subi.b	#$40,d0
00014134 4EB9 0000 2D80             		jsr	(CalcSine).l
0001413A C3C2                       		muls.w	d2,d1
0001413C E081                       		asr.l	#8,d1
0001413E D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00014142 C1C2                       		muls.w	d2,d0
00014144 E080                       		asr.l	#8,d0
00014146 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
0001414A 08E8 0001 0022             		bset	#1,$22(a0)
00014150 08A8 0005 0022             		bclr	#5,$22(a0)
00014156 588F                       		addq.l	#4,sp
00014158 117C 0001 003C             		move.b	#1,$3C(a0)
0001415E 4228 0038                  		clr.b	$38(a0)
00014162 303C 00A0                  		move.w	#$A0,d0
00014166 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play jumping sound
0001416C 117C 0013 0016             		move.b	#$13,$16(a0)
00014172 117C 0009 0017             		move.b	#9,$17(a0)
00014178 0828 0002 0022             		btst	#2,$22(a0)
0001417E 6600                       		bne.s	loc_13490
00014180 117C 000E 0016             		move.b	#$E,$16(a0)
00014186 117C 0007 0017             		move.b	#7,$17(a0)
0001418C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00014192 08E8 0002 0022             		bset	#2,$22(a0)
00014198 5A68 000C                  		addq.w	#5,$C(a0)
0001419C 117C 000A 003A             		move.b	#10,$3A(a0) ; timer
000141A2                            
000141A2                            locret_1348E:
000141A2 4E75                       		rts	
000141A4                            ; ===========================================================================
000141A4                            
000141A4                            loc_13490:
000141A4 08E8 0004 0022             		bset	#4,$22(a0)
000141AA 4E75                       		rts	
000141AC                            ; End of function Sonic_Jump
000141AC                            
000141AC                            
000141AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000141AC                            
000141AC                            
000141AC                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
000141AC 4A28 003C                  		tst.b	$3C(a0)
000141B0 6700                       		beq.s	loc_134C4
000141B2 323C FC00                  		move.w	#-$400,d1
000141B6 0828 0006 0022             		btst	#6,$22(a0)
000141BC 6700                       		beq.s	loc_134AE
000141BE 323C FE00                  		move.w	#-$200,d1
000141C2                            
000141C2                            loc_134AE:
000141C2 B268 0012                  		cmp.w	$12(a0),d1
000141C6 6F00                       		ble.s	locret_134C2
000141C8 1038 F602                  		move.b	($FFFFF602).w,d0
000141CC 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
000141D0 6600                       		bne.s	locret_134C2	; if yes, branch
000141D2 3141 0012                  		move.w	d1,$12(a0)
000141D6                            
000141D6                            locret_134C2:
000141D6 4E75                       		rts	
000141D8                            ; ===========================================================================
000141D8                            
000141D8                            loc_134C4:
000141D8 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
000141DE 6C00                       		bge.s	locret_134D2
000141E0 317C F040 0012             		move.w	#-$FC0,$12(a0)
000141E6                            
000141E6                            locret_134D2:
000141E6 4E75                       		rts	
000141E8                            ; End of function Sonic_JumpHeight
000141E8                            
000141E8                            ; ---------------------------------------------------------------------------
000141E8                            ; Subroutine to	slow Sonic walking up a	slope
000141E8                            ; ---------------------------------------------------------------------------
000141E8                            
000141E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000141E8                            
000141E8                            
000141E8                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
000141E8 1028 0026                  		move.b	$26(a0),d0
000141EC 0600 0060                  		addi.b	#$60,d0
000141F0 0C00 00C0                  		cmpi.b	#$C0,d0
000141F4 6400                       		bcc.s	locret_13508
000141F6 1028 0026                  		move.b	$26(a0),d0
000141FA 4EB9 0000 2D80             		jsr	(CalcSine).l
00014200 C1FC 0020                  		muls.w	#$20,d0
00014204 E080                       		asr.l	#8,d0
00014206 4A68 0014                  		tst.w	$14(a0)
0001420A 6700                       		beq.s	locret_13508
0001420C 6B00                       		bmi.s	loc_13504
0001420E 4A40                       		tst.w	d0
00014210 6700                       		beq.s	locret_13502
00014212 D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00014216                            
00014216                            locret_13502:
00014216 4E75                       		rts	
00014218                            ; ===========================================================================
00014218                            
00014218                            loc_13504:
00014218 D168 0014                  		add.w	d0,$14(a0)
0001421C                            
0001421C                            locret_13508:
0001421C 4E75                       		rts	
0001421E                            ; End of function Sonic_SlopeResist
0001421E                            
0001421E                            ; ---------------------------------------------------------------------------
0001421E                            ; Subroutine to	push Sonic down	a slope	while he's rolling
0001421E                            ; ---------------------------------------------------------------------------
0001421E                            
0001421E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001421E                            
0001421E                            
0001421E                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
0001421E 1028 0026                  		move.b	$26(a0),d0
00014222 0600 0060                  		addi.b	#$60,d0
00014226 0C00 00C0                  		cmpi.b	#-$40,d0
0001422A 6400                       		bcc.s	locret_13544
0001422C 1028 0026                  		move.b	$26(a0),d0
00014230 4EB9 0000 2D80             		jsr	(CalcSine).l
00014236 C1FC 0050                  		muls.w	#$50,d0
0001423A E080                       		asr.l	#8,d0
0001423C 4A68 0014                  		tst.w	$14(a0)
00014240 6B00                       		bmi.s	loc_1353A
00014242 4A40                       		tst.w	d0
00014244 6A00                       		bpl.s	loc_13534
00014246 E480                       		asr.l	#2,d0
00014248                            
00014248                            loc_13534:
00014248 D168 0014                  		add.w	d0,$14(a0)
0001424C 4E75                       		rts	
0001424E                            ; ===========================================================================
0001424E                            
0001424E                            loc_1353A:
0001424E 4A40                       		tst.w	d0
00014250 6B00                       		bmi.s	loc_13540
00014252 E480                       		asr.l	#2,d0
00014254                            
00014254                            loc_13540:
00014254 D168 0014                  		add.w	d0,$14(a0)
00014258                            
00014258                            locret_13544:
00014258 4E75                       		rts	
0001425A                            ; End of function Sonic_RollRepel
0001425A                            
0001425A                            ; ---------------------------------------------------------------------------
0001425A                            ; Subroutine to	push Sonic down	a slope
0001425A                            ; ---------------------------------------------------------------------------
0001425A                            
0001425A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001425A                            
0001425A                            
0001425A                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
0001425A 4E71                       		nop	
0001425C 4A28 0038                  		tst.b	$38(a0)
00014260 6600                       		bne.s	locret_13580
00014262 4A68 003E                  		tst.w	$3E(a0)
00014266 6600                       		bne.s	loc_13582
00014268 1028 0026                  		move.b	$26(a0),d0
0001426C 0600 0020                  		addi.b	#$20,d0
00014270 0200 00C0                  		andi.b	#$C0,d0
00014274 6700                       		beq.s	locret_13580
00014276 3028 0014                  		move.w	$14(a0),d0
0001427A 6A00                       		bpl.s	loc_1356A
0001427C 4440                       		neg.w	d0
0001427E                            
0001427E                            loc_1356A:
0001427E 0C40 0280                  		cmpi.w	#$280,d0
00014282 6400                       		bcc.s	locret_13580
00014284 4268 0014                  		clr.w	$14(a0)
00014288 08E8 0001 0022             		bset	#1,$22(a0)
0001428E 317C 001E 003E             		move.w	#$1E,$3E(a0)
00014294                            
00014294                            locret_13580:
00014294 4E75                       		rts	
00014296                            ; ===========================================================================
00014296                            
00014296                            loc_13582:
00014296 5368 003E                  		subq.w	#1,$3E(a0)
0001429A 4E75                       		rts	
0001429C                            ; End of function Sonic_SlopeRepel
0001429C                            
0001429C                            ; ---------------------------------------------------------------------------
0001429C                            ; Subroutine to	return Sonic's angle to 0 as he jumps
0001429C                            ; ---------------------------------------------------------------------------
0001429C                            
0001429C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001429C                            
0001429C                            
0001429C                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
0001429C 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
000142A0 6700                       		beq.s	locret_135A2	; if already 0,	branch
000142A2 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
000142A4                            
000142A4 5400                       		addq.b	#2,d0		; increase angle
000142A6 6400                       		bcc.s	loc_13596
000142A8 7000                       		moveq	#0,d0
000142AA                            
000142AA                            loc_13596:
000142AA 6000                       		bra.s	loc_1359E
000142AC                            ; ===========================================================================
000142AC                            
000142AC                            loc_13598:
000142AC 5500                       		subq.b	#2,d0		; decrease angle
000142AE 6400                       		bcc.s	loc_1359E
000142B0 7000                       		moveq	#0,d0
000142B2                            
000142B2                            loc_1359E:
000142B2 1140 0026                  		move.b	d0,$26(a0)
000142B6                            
000142B6                            locret_135A2:
000142B6 4E75                       		rts	
000142B8                            ; End of function Sonic_JumpAngle
000142B8                            
000142B8                            ; ---------------------------------------------------------------------------
000142B8                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
000142B8                            ; ---------------------------------------------------------------------------
000142B8                            
000142B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000142B8                            
000142B8                            
000142B8                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
000142B8 3228 0010                  		move.w	$10(a0),d1
000142BC 3428 0012                  		move.w	$12(a0),d2
000142C0 4EB9 0000 304E             		jsr	(CalcAngle).l
000142C6 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
000142CA 0400 0020                  		subi.b	#$20,d0
000142CE 11C0 FFED                  		move.b	d0,($FFFFFFED).w
000142D2 0200 00C0                  		andi.b	#$C0,d0
000142D6 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
000142DA 0C00 0040                  		cmpi.b	#$40,d0
000142DE 6700 0000                  		beq.w	loc_13680
000142E2 0C00 0080                  		cmpi.b	#$80,d0
000142E6 6700 0000                  		beq.w	loc_136E2
000142EA 0C00 00C0                  		cmpi.b	#-$40,d0
000142EE 6700 0000                  		beq.w	loc_1373E
000142F2 6100 0000                  		bsr.w	Sonic_HitWall
000142F6 4A41                       		tst.w	d1
000142F8 6A00                       		bpl.s	loc_135F0
000142FA 9368 0008                  		sub.w	d1,8(a0)
000142FE 317C 0000 0010             		move.w	#0,$10(a0)
00014304                            
00014304                            loc_135F0:
00014304 6100 0000                  		bsr.w	sub_14EB4
00014308 4A41                       		tst.w	d1
0001430A 6A00                       		bpl.s	loc_13602
0001430C D368 0008                  		add.w	d1,8(a0)
00014310 317C 0000 0010             		move.w	#0,$10(a0)
00014316                            
00014316                            loc_13602:
00014316 6100 0000                  		bsr.w	Sonic_HitFloor
0001431A 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
0001431E 4A41                       		tst.w	d1
00014320 6A00                       		bpl.s	locret_1367E
00014322 1428 0012                  		move.b	$12(a0),d2
00014326 5002                       		addq.b	#8,d2
00014328 4402                       		neg.b	d2
0001432A B202                       		cmp.b	d2,d1
0001432C 6C00                       		bge.s	loc_1361E
0001432E B002                       		cmp.b	d2,d0
00014330 6D00                       		blt.s	locret_1367E
00014332                            
00014332                            loc_1361E:
00014332 D368 000C                  		add.w	d1,$C(a0)
00014336 1143 0026                  		move.b	d3,$26(a0)
0001433A 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001433E 117C 0000 001C             		move.b	#0,$1C(a0)
00014344 1003                       		move.b	d3,d0
00014346 0600 0020                  		addi.b	#$20,d0
0001434A 0200 0040                  		andi.b	#$40,d0
0001434E 6600                       		bne.s	loc_1365C
00014350 1003                       		move.b	d3,d0
00014352 0600 0010                  		addi.b	#$10,d0
00014356 0200 0020                  		andi.b	#$20,d0
0001435A 6700                       		beq.s	loc_1364E
0001435C E0E8 0012                  		asr	$12(a0)
00014360 6000                       		bra.s	loc_13670
00014362                            ; ===========================================================================
00014362                            
00014362                            loc_1364E:
00014362 317C 0000 0012             		move.w	#0,$12(a0)
00014368 3168 0010 0014             		move.w	$10(a0),$14(a0)
0001436E 4E75                       		rts	
00014370                            ; ===========================================================================
00014370                            
00014370                            loc_1365C:
00014370 317C 0000 0010             		move.w	#0,$10(a0)
00014376 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
0001437C 6F00                       		ble.s	loc_13670
0001437E 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00014384                            
00014384                            loc_13670:
00014384 3168 0012 0014             		move.w	$12(a0),$14(a0)
0001438A 4A03                       		tst.b	d3
0001438C 6A00                       		bpl.s	locret_1367E
0001438E 4468 0014                  		neg.w	$14(a0)
00014392                            
00014392                            locret_1367E:
00014392 4E75                       		rts	
00014394                            ; ===========================================================================
00014394                            
00014394                            loc_13680:
00014394 6100 0000                  		bsr.w	Sonic_HitWall
00014398 4A41                       		tst.w	d1
0001439A 6A00                       		bpl.s	loc_1369A
0001439C 9368 0008                  		sub.w	d1,8(a0)
000143A0 317C 0000 0010             		move.w	#0,$10(a0)
000143A6 3168 0012 0014             		move.w	$12(a0),$14(a0)
000143AC 4E75                       		rts	
000143AE                            ; ===========================================================================
000143AE                            
000143AE                            loc_1369A:
000143AE 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000143B2 4A41                       		tst.w	d1
000143B4 6A00                       		bpl.s	loc_136B4
000143B6 9368 000C                  		sub.w	d1,$C(a0)
000143BA 4A68 0012                  		tst.w	$12(a0)
000143BE 6A00                       		bpl.s	locret_136B2
000143C0 317C 0000 0012             		move.w	#0,$12(a0)
000143C6                            
000143C6                            locret_136B2:
000143C6 4E75                       		rts	
000143C8                            ; ===========================================================================
000143C8                            
000143C8                            loc_136B4:
000143C8 4A68 0012                  		tst.w	$12(a0)
000143CC 6B00                       		bmi.s	locret_136E0
000143CE 6100 0000                  		bsr.w	Sonic_HitFloor
000143D2 4A41                       		tst.w	d1
000143D4 6A00                       		bpl.s	locret_136E0
000143D6 D368 000C                  		add.w	d1,$C(a0)
000143DA 1143 0026                  		move.b	d3,$26(a0)
000143DE 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000143E2 117C 0000 001C             		move.b	#0,$1C(a0)
000143E8 317C 0000 0012             		move.w	#0,$12(a0)
000143EE 3168 0010 0014             		move.w	$10(a0),$14(a0)
000143F4                            
000143F4                            locret_136E0:
000143F4 4E75                       		rts	
000143F6                            ; ===========================================================================
000143F6                            
000143F6                            loc_136E2:
000143F6 6100 0000                  		bsr.w	Sonic_HitWall
000143FA 4A41                       		tst.w	d1
000143FC 6A00                       		bpl.s	loc_136F4
000143FE 9368 0008                  		sub.w	d1,8(a0)
00014402 317C 0000 0010             		move.w	#0,$10(a0)
00014408                            
00014408                            loc_136F4:
00014408 6100 0000                  		bsr.w	sub_14EB4
0001440C 4A41                       		tst.w	d1
0001440E 6A00                       		bpl.s	loc_13706
00014410 D368 0008                  		add.w	d1,8(a0)
00014414 317C 0000 0010             		move.w	#0,$10(a0)
0001441A                            
0001441A                            loc_13706:
0001441A 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001441E 4A41                       		tst.w	d1
00014420 6A00                       		bpl.s	locret_1373C
00014422 9368 000C                  		sub.w	d1,$C(a0)
00014426 1003                       		move.b	d3,d0
00014428 0600 0020                  		addi.b	#$20,d0
0001442C 0200 0040                  		andi.b	#$40,d0
00014430 6600                       		bne.s	loc_13726
00014432 317C 0000 0012             		move.w	#0,$12(a0)
00014438 4E75                       		rts	
0001443A                            ; ===========================================================================
0001443A                            
0001443A                            loc_13726:
0001443A 1143 0026                  		move.b	d3,$26(a0)
0001443E 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014442 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014448 4A03                       		tst.b	d3
0001444A 6A00                       		bpl.s	locret_1373C
0001444C 4468 0014                  		neg.w	$14(a0)
00014450                            
00014450                            locret_1373C:
00014450 4E75                       		rts	
00014452                            ; ===========================================================================
00014452                            
00014452                            loc_1373E:
00014452 6100 0000                  		bsr.w	sub_14EB4
00014456 4A41                       		tst.w	d1
00014458 6A00                       		bpl.s	loc_13758
0001445A D368 0008                  		add.w	d1,8(a0)
0001445E 317C 0000 0010             		move.w	#0,$10(a0)
00014464 3168 0012 0014             		move.w	$12(a0),$14(a0)
0001446A 4E75                       		rts	
0001446C                            ; ===========================================================================
0001446C                            
0001446C                            loc_13758:
0001446C 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014470 4A41                       		tst.w	d1
00014472 6A00                       		bpl.s	loc_13772
00014474 9368 000C                  		sub.w	d1,$C(a0)
00014478 4A68 0012                  		tst.w	$12(a0)
0001447C 6A00                       		bpl.s	locret_13770
0001447E 317C 0000 0012             		move.w	#0,$12(a0)
00014484                            
00014484                            locret_13770:
00014484 4E75                       		rts	
00014486                            ; ===========================================================================
00014486                            
00014486                            loc_13772:
00014486 4A68 0012                  		tst.w	$12(a0)
0001448A 6B00                       		bmi.s	locret_1379E
0001448C 6100 0000                  		bsr.w	Sonic_HitFloor
00014490 4A41                       		tst.w	d1
00014492 6A00                       		bpl.s	locret_1379E
00014494 D368 000C                  		add.w	d1,$C(a0)
00014498 1143 0026                  		move.b	d3,$26(a0)
0001449C 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000144A0 117C 0000 001C             		move.b	#0,$1C(a0)
000144A6 317C 0000 0012             		move.w	#0,$12(a0)
000144AC 3168 0010 0014             		move.w	$10(a0),$14(a0)
000144B2                            
000144B2                            locret_1379E:
000144B2 4E75                       		rts	
000144B4                            ; End of function Sonic_Floor
000144B4                            
000144B4                            ; ---------------------------------------------------------------------------
000144B4                            ; Subroutine to	reset Sonic's mode when he lands on the floor
000144B4                            ; ---------------------------------------------------------------------------
000144B4                            
000144B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000144B4                            
000144B4                            
000144B4                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
000144B4 0828 0004 0022             		btst	#4,$22(a0)
000144BA 6700                       		beq.s	loc_137AE
000144BC 4E71                       		nop	
000144BE 4E71                       		nop	
000144C0 4E71                       		nop	
000144C2                            
000144C2                            loc_137AE:
000144C2 08A8 0005 0022             		bclr	#5,$22(a0)
000144C8 08A8 0001 0022             		bclr	#1,$22(a0)
000144CE 08A8 0004 0022             		bclr	#4,$22(a0)
000144D4 0828 0002 0022             		btst	#2,$22(a0)
000144DA 6700                       		beq.s	loc_137E4
000144DC 08A8 0002 0022             		bclr	#2,$22(a0)
000144E2 117C 0013 0016             		move.b	#$13,$16(a0)
000144E8 117C 0009 0017             		move.b	#9,$17(a0)
000144EE 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
000144F4 5B68 000C                  		subq.w	#5,$C(a0)
000144F8                            
000144F8                            loc_137E4:
000144F8 117C 0000 003C             		move.b	#0,$3C(a0)
000144FE 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00014504 4E75                       		rts	
00014506                            ; End of function Sonic_ResetOnFloor
00014506                            
00014506                            ; ===========================================================================
00014506                            ; ---------------------------------------------------------------------------
00014506                            ; Sonic	when he	gets hurt
00014506                            ; ---------------------------------------------------------------------------
00014506                            
00014506                            Obj01_Hurt:				; XREF: Obj01_Index
00014506 7230                       		moveq	#$30,d1
00014508 0828 0006 0022             		btst	#6,$22(a0)
0001450E 6700                       		beq.s	loc_1380C
00014510 7220                       		moveq	#$20,d1
00014512                            loc_1380C:
00014512 4EBA 9CF4                  		jsr	ObjectFallCustom
00014516                            
00014516 6100 0000                  		bsr.w	Sonic_HurtStop
0001451A 6100 FAF6                  		bsr.w	Sonic_LevelBound
0001451E 6100 F4BC                  		bsr.w	Sonic_RecordPos
00014522 6100 0000                  		bsr.w	Sonic_Animate
00014526 6100 0000                  		bsr.w	LoadSonicDynPLC
0001452A 4EFA 9D76                  		jmp	DisplaySprite
0001452E                            
0001452E                            ; ---------------------------------------------------------------------------
0001452E                            ; Subroutine to	stop Sonic falling after he's been hurt
0001452E                            ; ---------------------------------------------------------------------------
0001452E                            
0001452E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001452E                            
0001452E                            
0001452E                            Sonic_HurtStop:				; XREF: Obj01_Hurt
0001452E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014532 0640 00E0                  		addi.w	#$E0,d0
00014536 B068 000C                  		cmp.w	$C(a0),d0
0001453A 6500 0000                  		bcs.w	KillSonic
0001453E 6100 FD78                  		bsr.w	Sonic_Floor
00014542 0828 0001 0022             		btst	#1,$22(a0)
00014548 6600                       		bne.s	locret_13860
0001454A 7000                       		moveq	#0,d0
0001454C 3140 0012                  		move.w	d0,$12(a0)
00014550 3140 0010                  		move.w	d0,$10(a0)
00014554 3140 0014                  		move.w	d0,$14(a0)
00014558 117C 0000 001C             		move.b	#0,$1C(a0)
0001455E 5528 0024                  		subq.b	#2,$24(a0)
00014562 317C 0078 0030             		move.w	#$78,$30(a0)
00014568                            
00014568                            locret_13860:
00014568 4E75                       		rts	
0001456A                            ; End of function Sonic_HurtStop
0001456A                            
0001456A                            ; ===========================================================================
0001456A                            ; ---------------------------------------------------------------------------
0001456A                            ; Sonic	when he	dies
0001456A                            ; ---------------------------------------------------------------------------
0001456A                            
0001456A                            Obj01_Death:				; XREF: Obj01_Index
0001456A 6100 0000                  		bsr.w	GameOver
0001456E 4EBA 9C96                  		jsr	ObjectFall
00014572 6100 F468                  		bsr.w	Sonic_RecordPos
00014576 6100 0000                  		bsr.w	Sonic_Animate
0001457A 6100 0000                  		bsr.w	LoadSonicDynPLC
0001457E 4EFA 9D22                  		jmp	DisplaySprite
00014582                            
00014582                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014582                            
00014582                            
00014582                            GameOver:				; XREF: Obj01_Death
00014582 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014586 0640 0100                  		addi.w	#$100,d0
0001458A B068 000C                  		cmp.w	$C(a0),d0
0001458E 6400 0000                  		bcc.w	locret_13900
00014592 317C FFC8 0012             		move.w	#-$38,$12(a0)
00014598 5428 0024                  		addq.b	#2,$24(a0)
0001459C 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
000145A0 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
000145A4 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
000145A8 6600                       		bne.s	loc_138D4
000145AA 317C 0000 003A             		move.w	#0,$3A(a0)
000145B0 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
000145B6 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
000145BC 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
000145C2 4238 FE1A                  		clr.b	($FFFFFE1A).w
000145C6                            
000145C6                            loc_138C2:
000145C6 303C 008F                  		move.w	#$8F,d0
000145CA 4EB9 0000 15E0             		jsr	(PlaySound).l	; play game over music
000145D0 7003                       		moveq	#3,d0
000145D2 4EF9 0000 17CA             		jmp	(LoadPLC).l	; load game over patterns
000145D8                            ; ===========================================================================
000145D8                            
000145D8                            loc_138D4:
000145D8 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000145DE 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
000145E2 6700                       		beq.s	locret_13900	; if not, branch
000145E4 317C 0000 003A             		move.w	#0,$3A(a0)
000145EA 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
000145F0 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
000145F6 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
000145FC 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00014602 60C2                       		bra.s	loc_138C2
00014604                            ; ===========================================================================
00014604                            
00014604                            locret_13900:
00014604 4E75                       		rts	
00014606                            ; End of function GameOver
00014606                            
00014606                            ; ===========================================================================
00014606                            ; ---------------------------------------------------------------------------
00014606                            ; Sonic	when the level is restarted
00014606                            ; ---------------------------------------------------------------------------
00014606                            
00014606                            Obj01_ResetLevel:			; XREF: Obj01_Index
00014606 4A68 003A                  		tst.w	$3A(a0)
0001460A 6700                       		beq.s	locret_13914
0001460C 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00014610 6600                       		bne.s	locret_13914
00014612 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00014618                            
00014618                            locret_13914:
00014618 4E75                       		rts	
0001461A                            
0001461A                            ; ---------------------------------------------------------------------------
0001461A                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
0001461A                            ; ---------------------------------------------------------------------------
0001461A                            
0001461A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001461A                            
0001461A                            
0001461A                            Sonic_Loops:				; XREF: Obj01_Control
0001461A                            ;		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
0001461A                            ;		beq.s	loc_13926	; if yes, branch
0001461A                            ;		tst.b	($FFFFFE10).w	; is level GHZ ?
0001461A                            ;		bne.w	locret_139C2	; if not, branch
0001461A                            ;		this is commented out, please do more plane messups id love that
0001461A                            ;loc_13926:
0001461A 3028 000C                  		move.w	$C(a0),d0
0001461E E248                       		lsr.w	#1,d0
00014620 0240 0380                  		andi.w	#$380,d0
00014624 1228 0008                  		move.b	8(a0),d1
00014628 0241 007F                  		andi.w	#$7F,d1
0001462C D041                       		add.w	d1,d0
0001462E 43F8 A400                  		lea	($FFFFA400).w,a1
00014632 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00014636 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
0001463A 6700 FA7E                  		beq.w	Obj01_ChkRoll
0001463E B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00014642 6700 FA76                  		beq.w	Obj01_ChkRoll
00014646 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
0001464A 6700                       		beq.s	loc_13976
0001464C B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00014650 6700                       		beq.s	loc_13966
00014652 08A8 0006 0001             		bclr	#6,1(a0)
00014658 4E75                       		rts	
0001465A                            ; ===========================================================================
0001465A                            
0001465A                            loc_13966:
0001465A 0828 0001 0022             		btst	#1,$22(a0)
00014660 6700                       		beq.s	loc_13976
00014662 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014668 4E75                       		rts	
0001466A                            ; ===========================================================================
0001466A                            
0001466A                            loc_13976:
0001466A 3428 0008                  		move.w	8(a0),d2
0001466E 0C02 002C                  		cmpi.b	#$2C,d2
00014672 6400                       		bcc.s	loc_13988
00014674 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
0001467A 4E75                       		rts	
0001467C                            ; ===========================================================================
0001467C                            
0001467C                            loc_13988:
0001467C 0C02 00E0                  		cmpi.b	#-$20,d2
00014680 6500                       		bcs.s	loc_13996
00014682 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014688 4E75                       		rts	
0001468A                            ; ===========================================================================
0001468A                            
0001468A                            loc_13996:
0001468A 0828 0006 0001             		btst	#6,1(a0)
00014690 6600                       		bne.s	loc_139B2
00014692 1228 0026                  		move.b	$26(a0),d1
00014696 6700                       		beq.s	locret_139C2
00014698 0C01 0080                  		cmpi.b	#-$80,d1
0001469C 6200                       		bhi.s	locret_139C2
0001469E 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
000146A4 4E75                       		rts	
000146A6                            ; ===========================================================================
000146A6                            
000146A6                            loc_139B2:
000146A6 1228 0026                  		move.b	$26(a0),d1
000146AA 0C01 0080                  		cmpi.b	#-$80,d1
000146AE 6300                       		bls.s	locret_139C2
000146B0 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000146B6                            
000146B6                            locret_139C2:
000146B6 4E75                       		rts	
000146B8                            ; End of function Sonic_Loops
000146B8                            
000146B8                            ; ---------------------------------------------------------------------------
000146B8                            ; Subroutine to	animate	Sonic's sprites
000146B8                            ; ---------------------------------------------------------------------------
000146B8                            
000146B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000146B8                            
000146B8                            Player_Anim:
000146B8 0000 0000                  	dc.l	SonicAniData
000146BC 0000 0000                  	dc.l	SonicAniData ; gronic
000146C0 0000 0000                  	dc.l	SonicAniData ; anakama
000146C4 0000 0000                  	dc.l	SonicAniData ; LimitedSonic
000146C8                            
000146C8                            	; Insert more animation data for other characters here
000146C8                            	
000146C8                            Sonic_Animate:				; XREF: Obj01_Control; et al
000146C8 7000                       			moveq	#0,d0
000146CA 1038 FFE8                  		move.b	(v_character),d0
000146CE E548                       		lsl.w	#2,d0
000146D0 43FA FFE6                  		lea 	Player_Anim(pc),a1
000146D4                            		
000146D4 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic dplc
000146D8                            	
000146D8 7000                       		moveq	#0,d0
000146DA 1028 001C                  		move.b	$1C(a0),d0
000146DE B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
000146E2 6700                       		beq.s	SAnim_Do	; if not, branch
000146E4 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
000146E8 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
000146EE 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
000146F4                            
000146F4                            SAnim_Do:
000146F4 D040                       		add.w	d0,d0
000146F6 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
000146FA 1011                       		move.b	(a1),d0
000146FC 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
000146FE 1228 0022                  		move.b	$22(a0),d1
00014702 0201 0001                  		andi.b	#1,d1
00014706 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001470C 8328 0001                  		or.b	d1,1(a0)
00014710 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00014714 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00014716 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
0001471A                            
0001471A                            SAnim_Do2:
0001471A 7200                       		moveq	#0,d1
0001471C 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00014720 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00014724 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00014726                            
00014726                            SAnim_Next:
00014726 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0001472A 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0001472E                            
0001472E                            SAnim_Delay:
0001472E 4E75                       		rts	
00014730                            ; ===========================================================================
00014730                            
00014730                            SAnim_End_FF:
00014730 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00014732 6600                       		bne.s	SAnim_End_FE	; if not, branch
00014734 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0001473A 1029 0001                  		move.b	1(a1),d0	; read sprite number
0001473E 60E6                       		bra.s	SAnim_Next
00014740                            ; ===========================================================================
00014740                            
00014740                            SAnim_End_FE:
00014740 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00014742 6600                       		bne.s	SAnim_End_FD	; if not, branch
00014744 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00014748 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0001474C 9200                       		sub.b	d0,d1
0001474E 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00014752 60D2                       		bra.s	SAnim_Next
00014754                            ; ===========================================================================
00014754                            
00014754                            SAnim_End_FD:
00014754 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00014756 6600                       		bne.s	SAnim_End	; if not, branch
00014758 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0001475E                            
0001475E                            SAnim_End:
0001475E 4E75                       		rts	
00014760                            ; ===========================================================================
00014760                            
00014760                            SAnim_WalkRun:				; XREF: SAnim_Do
00014760 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00014764 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00014766 5200                       		addq.b	#1,d0		; is animation walking/running?
00014768 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
0001476C 7200                       		moveq	#0,d1
0001476E 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00014772 1428 0022                  		move.b	$22(a0),d2
00014776 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
0001477A 6600                       		bne.s	loc_13A70	; if yes, branch
0001477C 4600                       		not.b	d0		; reverse angle
0001477E                            
0001477E                            loc_13A70:
0001477E 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00014782 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00014784 7203                       		moveq	#3,d1
00014786                            
00014786                            loc_13A78:
00014786 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001478C B302                       		eor.b	d1,d2
0001478E 8528 0001                  		or.b	d2,1(a0)
00014792 0828 0005 0022             		btst	#5,$22(a0)
00014798 6600 0000                  		bne.w	SAnim_Push
0001479C E808                       		lsr.b	#4,d0		; divide angle by $10
0001479E 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
000147A2 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000147A6 6A00                       		bpl.s	loc_13A9C
000147A8 4442                       		neg.w	d2
000147AA                            
000147AA                            loc_13A9C:
000147AA 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
000147B0 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
000147B4 6400                       		bcc.s	loc_13AB4	; if yes, branch
000147B6 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
000147BC 1200                       		move.b	d0,d1
000147BE E209                       		lsr.b	#1,d1
000147C0 D001                       		add.b	d1,d0
000147C2                            
000147C2                            loc_13AB4:
000147C2 D000                       		add.b	d0,d0
000147C4 1600                       		move.b	d0,d3
000147C6 4442                       		neg.w	d2
000147C8 0642 0800                  		addi.w	#$800,d2
000147CC 6A00                       		bpl.s	loc_13AC2
000147CE 7400                       		moveq	#0,d2
000147D0                            
000147D0                            loc_13AC2:
000147D0 E04A                       		lsr.w	#8,d2
000147D2 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000147D6 6100 FF42                  		bsr.w	SAnim_Do2
000147DA D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
000147DE 4E75                       		rts	
000147E0                            ; ===========================================================================
000147E0                            
000147E0                            SAnim_RollJump:				; XREF: SAnim_WalkRun
000147E0 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
000147E2 6600                       		bne.s	SAnim_Push	; if not, branch
000147E4 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000147E8 6A00                       		bpl.s	loc_13ADE
000147EA 4442                       		neg.w	d2
000147EC                            
000147EC                            loc_13ADE:
000147EC 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
000147F2 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
000147F6 6400                       		bcc.s	loc_13AF0	; if yes, branch
000147F8 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
000147FE                            
000147FE                            loc_13AF0:
000147FE 4442                       		neg.w	d2
00014800 0642 0400                  		addi.w	#$400,d2
00014804 6A00                       		bpl.s	loc_13AFA
00014806 7400                       		moveq	#0,d2
00014808                            
00014808                            loc_13AFA:
00014808 E04A                       		lsr.w	#8,d2
0001480A 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
0001480E 1228 0022                  		move.b	$22(a0),d1
00014812 0201 0001                  		andi.b	#1,d1
00014816 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001481C 8328 0001                  		or.b	d1,1(a0)
00014820 6000 FEF8                  		bra.w	SAnim_Do2
00014824                            ; ===========================================================================
00014824                            
00014824                            SAnim_Push:				; XREF: SAnim_RollJump
00014824 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014828 6B00                       		bmi.s	loc_13B1E
0001482A 4442                       		neg.w	d2
0001482C                            
0001482C                            loc_13B1E:
0001482C 0642 0800                  		addi.w	#$800,d2
00014830 6A00                       		bpl.s	loc_13B26
00014832 7400                       		moveq	#0,d2
00014834                            
00014834                            loc_13B26:
00014834 EC4A                       		lsr.w	#6,d2
00014836 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
0001483A 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00014840 1228 0022                  		move.b	$22(a0),d1
00014844 0201 0001                  		andi.b	#1,d1
00014848 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001484E 8328 0001                  		or.b	d1,1(a0)
00014852 6000 FEC6                  		bra.w	SAnim_Do2
00014856                            ; End of function Sonic_Animate
00014856                            
00014856                            ; ===========================================================================
00014856                            SonicAniData:
00014856                            	include "_anim\Sonic.asm"
00014856                            ; ---------------------------------------------------------------------------
00014856                            ; Animation script - Sonic
00014856                            ; ---------------------------------------------------------------------------
00014856 0000                       		dc.w SonAni_Walk-SonicAniData
00014858 0000                       		dc.w SonAni_Run-SonicAniData
0001485A 0000                       		dc.w SonAni_Roll-SonicAniData
0001485C 0000                       		dc.w SonAni_Roll2-SonicAniData
0001485E 0000                       		dc.w SonAni_Push-SonicAniData
00014860 0000                       		dc.w SonAni_Wait-SonicAniData
00014862 0000                       		dc.w SonAni_Balance-SonicAniData
00014864 0000                       		dc.w SonAni_LookUp-SonicAniData
00014866 0000                       		dc.w SonAni_Duck-SonicAniData
00014868 0000                       		dc.w SonAni_Warp1-SonicAniData
0001486A 0000                       		dc.w SonAni_Warp2-SonicAniData
0001486C 0000                       		dc.w SonAni_Warp3-SonicAniData
0001486E 0000                       		dc.w SonAni_Warp4-SonicAniData
00014870 0000                       		dc.w SonAni_Stop-SonicAniData
00014872 0000                       		dc.w SonAni_Float1-SonicAniData
00014874 0000                       		dc.w SonAni_Float2-SonicAniData
00014876 0000                       		dc.w SonAni_Spring-SonicAniData
00014878 0000                       		dc.w SonAni_LZHang-SonicAniData
0001487A 0000                       		dc.w SonAni_Leap1-SonicAniData
0001487C 0000                       		dc.w SonAni_Leap2-SonicAniData
0001487E 0000                       		dc.w SonAni_Surf-SonicAniData
00014880 0000                       		dc.w SonAni_Bubble-SonicAniData
00014882 0000                       		dc.w SonAni_Death1-SonicAniData
00014884 0000                       		dc.w SonAni_Drown-SonicAniData
00014886 0000                       		dc.w SonAni_Death2-SonicAniData
00014888 0000                       		dc.w SonAni_Shrink-SonicAniData
0001488A 0000                       		dc.w SonAni_Hurt-SonicAniData
0001488C 0000                       		dc.w SonAni_LZSlide-SonicAniData
0001488E 0000                       		dc.w SonAni_Blank-SonicAniData
00014890 0000                       		dc.w SonAni_Float3-SonicAniData
00014892 0000                       		dc.w SonAni_Float4-SonicAniData
00014894 FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
0001489E FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
000148A6 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
000148AE FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
000148B6 FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
000148BE 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
000148D4 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
000148D8 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
000148DC 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
000148E0 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
000148E4 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
000148E8 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
000148EC 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
000148F0 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
000148F4 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
000148F8 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
00014900 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
00014904 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
00014908 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
0001490E 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
00014914 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00014918 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
00014920 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
00014924 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
00014928 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
0001492C 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
00014936 035B FF00                  SonAni_Hurt:	dc.b 3,	$5B, $FF, 0
0001493A 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
0001493E 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
00014942 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
0001494A 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
0001494E                            		even
0001494E                            		even
0001494E                            
0001494E                            ; ---------------------------------------------------------------------------
0001494E                            ; Sonic	pattern	loading	subroutine
0001494E                            ; ---------------------------------------------------------------------------
0001494E                            
0001494E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001494E                            Player_DPLC:
0001494E 0000 0000                  	dc.l	SonicDynPLC
00014952 0000 0000                  	dc.l	SonicDynPLC ; gronic
00014956 0000 0000                  	dc.l	SonicDynPLC ; anakama
0001495A 0000 0000                  	dc.l	SonicDynPLC ; LimitedSonic
0001495E                            	; add pointers for player dplc here
0001495E                            Player_Art:
0001495E 0000 0000                  	dc.l	Art_Sonic
00014962 0000 0000                  	dc.l	Art_Sonic ; gronic
00014966 0000 0000                  	dc.l	Art_Sonic ; anakama
0001496A 0000 0000                  	dc.l	Art_Sonic ; LimitedSonic
0001496E                            	; add pointers for player art here
0001496E                            
0001496E                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
0001496E 7000                       		moveq	#0,d0
00014970 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00014974 B038 F766                  		cmp.b	($FFFFF766).w,d0
00014978 6700                       		beq.s	locret_13C96
0001497A 11C0 F766                  		move.b	d0,($FFFFF766).w
0001497E                            		
0001497E 323C 0000                  		move.w	#0,d1
00014982 1238 FFE8                  		move.b	(v_character),d1
00014986 E549                       		lsl.w	#2,d1
00014988 45FA FFC4                  		lea 	Player_DPLC(pc),a2
0001498C                            
0001498C 2472 1000                  		movea.l	(a2,d1.w),a2	; load Sonic dplc
00014990                            		
00014990 D040                       		add.w	d0,d0
00014992 D4F2 0000                  		adda.w	(a2,d0.w),a2
00014996 7200                       		moveq	#0,d1
00014998 121A                       		move.b	(a2)+,d1	; read "number of entries" value
0001499A 5301                       		subq.b	#1,d1
0001499C 6B00                       		bmi.s	locret_13C96
0001499E 47F8 C800                  		lea	($FFFFC800).w,a3
000149A2 11FC 0001 F767             		move.b	#1,($FFFFF767).w
000149A8                            
000149A8                            SPLC_ReadEntry:
000149A8 303C 0000                  		move.w	#0,d0
000149AC 1038 FFE8                  		move.b	(v_character),d0
000149B0 E548                       		lsl.w	#2,d0
000149B2 43FA FFAA                  		lea 	Player_Art(pc),a1
000149B6                            
000149B6 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic art
000149BA                            
000149BA 7400                       		moveq	#0,d2
000149BC 141A                       		move.b	(a2)+,d2
000149BE 3002                       		move.w	d2,d0
000149C0 E808                       		lsr.b	#4,d0
000149C2 E14A                       		lsl.w	#8,d2
000149C4 141A                       		move.b	(a2)+,d2
000149C6 EB4A                       		lsl.w	#5,d2
000149C8 D3C2                       		adda.l	d2,a1
000149CA                            
000149CA                            SPLC_LoadTile:
000149CA 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
000149CE 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
000149D2 47EB 0020                  		lea	$20(a3),a3	; next tile
000149D6 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
000149DA                            
000149DA 51C9 FFCC                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
000149DE                            
000149DE                            locret_13C96:
000149DE 4E75                       		rts	
000149E0                            ; End of function LoadSonicDynPLC
000149E0                            
000149E0                            ; ===========================================================================
000149E0                            ; ---------------------------------------------------------------------------
000149E0                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
000149E0                            ; ---------------------------------------------------------------------------
000149E0                            
000149E0                            Obj0A:					; XREF: Obj_Index
000149E0 7000                       		moveq	#0,d0
000149E2 1028 0024                  		move.b	$24(a0),d0
000149E6 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
000149EA 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
000149EE                            ; ===========================================================================
000149EE 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
000149F2 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
000149F6 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
000149FA 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
000149FE 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00014A00                            ; ===========================================================================
00014A00                            
00014A00                            Obj0A_Main:				; XREF: Obj0A_Index
00014A00 5428 0024                  		addq.b	#2,$24(a0)
00014A04 217C 0001 3600 0004        		move.l	#Map_obj64,4(a0)
00014A0C 317C 8348 0002             		move.w	#$8348,2(a0)
00014A12 117C 0084 0001             		move.b	#$84,1(a0)
00014A18 117C 0010 0019             		move.b	#$10,$19(a0)
00014A1E 117C 0001 0018             		move.b	#1,$18(a0)
00014A24 1028 0028                  		move.b	$28(a0),d0
00014A28 6A00                       		bpl.s	loc_13D00
00014A2A 5028 0024                  		addq.b	#8,$24(a0)
00014A2E 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00014A36 317C 0440 0002             		move.w	#$440,2(a0)
00014A3C 0240 007F                  		andi.w	#$7F,d0
00014A40 1140 0033                  		move.b	d0,$33(a0)
00014A44 6000 0000                  		bra.w	Obj0A_Countdown
00014A48                            ; ===========================================================================
00014A48                            
00014A48                            loc_13D00:
00014A48 1140 001C                  		move.b	d0,$1C(a0)
00014A4C 3168 0008 0030             		move.w	8(a0),$30(a0)
00014A52 317C FF78 0012             		move.w	#-$88,$12(a0)
00014A58                            
00014A58                            Obj0A_Animate:				; XREF: Obj0A_Index
00014A58 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014A5E 4EB9 0000 B2FA             		jsr	AnimateSprite
00014A64                            
00014A64                            Obj0A_ChkWater:				; XREF: Obj0A_Index
00014A64 3038 F646                  		move.w	($FFFFF646).w,d0
00014A68 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00014A6C 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
00014A6E 117C 0006 0024             		move.b	#6,$24(a0)
00014A74 5E28 001C                  		addq.b	#7,$1C(a0)
00014A78 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00014A7E 6700                       		beq.s	Obj0A_Display
00014A80 6000                       		bra.s	Obj0A_Display
00014A82                            ; ===========================================================================
00014A82                            
00014A82                            Obj0A_Wobble:
00014A82 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00014A86 6700                       		beq.s	loc_13D44
00014A88 5868 0030                  		addq.w	#4,$30(a0)
00014A8C                            
00014A8C                            loc_13D44:
00014A8C 1028 0026                  		move.b	$26(a0),d0
00014A90 5228 0026                  		addq.b	#1,$26(a0)
00014A94 0240 007F                  		andi.w	#$7F,d0
00014A98 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00014A9E 1031 0000                  		move.b	(a1,d0.w),d0
00014AA2 4880                       		ext.w	d0
00014AA4 D068 0030                  		add.w	$30(a0),d0
00014AA8 3140 0008                  		move.w	d0,8(a0)
00014AAC 6100                       		bsr.s	Obj0A_ShowNumber
00014AAE 4EBA 97B8                  		jsr	SpeedToPos
00014AB2 4A28 0001                  		tst.b	1(a0)
00014AB6 6A00                       		bpl.s	Obj0A_Delete
00014AB8 4EFA 97E8                  		jmp	DisplaySprite
00014ABC                            ; ===========================================================================
00014ABC                            
00014ABC                            Obj0A_Delete:
00014ABC 4EFA 9820                  		jmp	DeleteObject
00014AC0                            ; ===========================================================================
00014AC0                            
00014AC0                            Obj0A_Display:				; XREF: Obj0A_Index
00014AC0 6100                       		bsr.s	Obj0A_ShowNumber
00014AC2 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014AC8 4EB9 0000 B2FA             		jsr	AnimateSprite
00014ACE 4EFA 97D2                  		jmp	DisplaySprite
00014AD2                            ; ===========================================================================
00014AD2                            
00014AD2                            Obj0A_Delete2:				; XREF: Obj0A_Index
00014AD2 4EFA 980A                  		jmp	DeleteObject
00014AD6                            ; ===========================================================================
00014AD6                            
00014AD6                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00014AD6 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00014ADC 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00014ADE 5368 0038                  		subq.w	#1,$38(a0)
00014AE2 6600                       		bne.s	Obj0A_Display2
00014AE4 117C 000E 0024             		move.b	#$E,$24(a0)
00014AEA 5E28 001C                  		addq.b	#7,$1C(a0)
00014AEE 60D0                       		bra.s	Obj0A_Display
00014AF0                            ; ===========================================================================
00014AF0                            
00014AF0                            Obj0A_Display2:
00014AF0 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014AF6 4EB9 0000 B2FA             		jsr	AnimateSprite
00014AFC 4A28 0001                  		tst.b	1(a0)
00014B00 6A00                       		bpl.s	Obj0A_Delete3
00014B02 4EFA 979E                  		jmp	DisplaySprite
00014B06                            ; ===========================================================================
00014B06                            
00014B06                            Obj0A_Delete3:
00014B06 4EFA 97D6                  		jmp	DeleteObject
00014B0A                            ; ===========================================================================
00014B0A                            
00014B0A                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00014B0A 4A68 0038                  		tst.w	$38(a0)
00014B0E 6700                       		beq.s	locret_13E1A
00014B10 5368 0038                  		subq.w	#1,$38(a0)
00014B14 6600                       		bne.s	locret_13E1A
00014B16 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00014B1C 6400                       		bcc.s	locret_13E1A
00014B1E 317C 000F 0038             		move.w	#$F,$38(a0)
00014B24 4268 0012                  		clr.w	$12(a0)
00014B28 117C 0080 0001             		move.b	#$80,1(a0)
00014B2E 3028 0008                  		move.w	8(a0),d0
00014B32 9078 F700                  		sub.w	($FFFFF700).w,d0
00014B36 0640 0080                  		addi.w	#$80,d0
00014B3A 3140 0008                  		move.w	d0,8(a0)
00014B3E 3028 000C                  		move.w	$C(a0),d0
00014B42 9078 F704                  		sub.w	($FFFFF704).w,d0
00014B46 0640 0080                  		addi.w	#$80,d0
00014B4A 3140 000A                  		move.w	d0,$A(a0)
00014B4E 117C 000C 0024             		move.b	#$C,$24(a0)
00014B54                            
00014B54                            locret_13E1A:
00014B54 4E75                       		rts	
00014B56                            ; ===========================================================================
00014B56                            Obj0A_WobbleData:
00014B56 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00014B67 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00014B78 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00014B89 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00014B99 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00014BA6 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014BB3 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014BC0 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00014BCD FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00014BD6                            ; ===========================================================================
00014BD6                            
00014BD6                            Obj0A_Countdown:			; XREF: Obj0A_Index
00014BD6 4A68 002C                  		tst.w	$2C(a0)
00014BDA 6600 0000                  		bne.w	loc_13F86
00014BDE 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00014BE4 6400 0000                  		bcc.w	locret_1408C
00014BE8 0838 0006 D022             		btst	#6,($FFFFD022).w
00014BEE 6700 0000                  		beq.w	locret_1408C
00014BF2 5368 0038                  		subq.w	#1,$38(a0)
00014BF6 6A00 0000                  		bpl.w	loc_13FAC
00014BFA 317C 003B 0038             		move.w	#59,$38(a0)
00014C00 317C 0001 0036             		move.w	#1,$36(a0)
00014C06 4EB9 0000 2D5A             		jsr	(RandomNumber).l
00014C0C 0240 0001                  		andi.w	#1,d0
00014C10 1140 0034                  		move.b	d0,$34(a0)
00014C14 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00014C18 0C40 0019                  		cmpi.w	#$19,d0
00014C1C 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00014C1E 0C40 0014                  		cmpi.w	#$14,d0
00014C22 6700                       		beq.s	Obj0A_WarnSound
00014C24 0C40 000F                  		cmpi.w	#$F,d0
00014C28 6700                       		beq.s	Obj0A_WarnSound
00014C2A 0C40 000C                  		cmpi.w	#$C,d0
00014C2E 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00014C30 6600                       		bne.s	loc_13F02
00014C32 303C 0092                  		move.w	#$92,d0
00014C36 4EB9 0000 15E0             		jsr	(PlaySound).l	; play countdown music
00014C3C                            
00014C3C                            loc_13F02:
00014C3C 5328 0032                  		subq.b	#1,$32(a0)
00014C40 6A00                       		bpl.s	Obj0A_ReduceAir
00014C42 1168 0033 0032             		move.b	$33(a0),$32(a0)
00014C48 08E8 0007 0036             		bset	#7,$36(a0)
00014C4E 6000                       		bra.s	Obj0A_ReduceAir
00014C50                            ; ===========================================================================
00014C50                            
00014C50                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
00014C50 303C 00C2                  		move.w	#$C2,d0
00014C54 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00014C5A                            
00014C5A                            Obj0A_ReduceAir:
00014C5A 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
00014C5E 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
00014C62 6100 0000                  		bsr.w	ResumeMusic
00014C66 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00014C6C 303C 00B2                  		move.w	#$B2,d0
00014C70 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play drowning sound
00014C76 117C 000A 0034             		move.b	#$A,$34(a0)
00014C7C 317C 0001 0036             		move.w	#1,$36(a0)
00014C82 317C 0078 002C             		move.w	#$78,$2C(a0)
00014C88 2F08                       		move.l	a0,-(sp)
00014C8A 41F8 D000                  		lea	($FFFFD000).w,a0
00014C8E 6100 F824                  		bsr.w	Sonic_ResetOnFloor
00014C92 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00014C98 08E8 0001 0022             		bset	#1,$22(a0)
00014C9E 08E8 0007 0002             		bset	#7,2(a0)
00014CA4 317C 0000 0012             		move.w	#0,$12(a0)
00014CAA 317C 0000 0010             		move.w	#0,$10(a0)
00014CB0 317C 0000 0014             		move.w	#0,$14(a0)
00014CB6 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00014CBC 205F                       		movea.l	(sp)+,a0
00014CBE 4E75                       		rts	
00014CC0                            ; ===========================================================================
00014CC0                            
00014CC0                            loc_13F86:
00014CC0 5368 002C                  		subq.w	#1,$2C(a0)
00014CC4 6600                       		bne.s	loc_13F94
00014CC6 11FC 0006 D024             		move.b	#6,($FFFFD024).w
00014CCC 4E75                       		rts	
00014CCE                            ; ===========================================================================
00014CCE                            
00014CCE                            loc_13F94:
00014CCE 2F08                       		move.l	a0,-(sp)
00014CD0 41F8 D000                  		lea	($FFFFD000).w,a0
00014CD4 7210                       		moveq	#$10,d1
00014CD6 4EBA 9530                  		jsr	ObjectFallCustom
00014CDA 205F                       		movea.l	(sp)+,a0
00014CDC 6000                       		bra.s	loc_13FAC
00014CDE                            ; ===========================================================================
00014CDE                            
00014CDE                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00014CDE 6000                       		bra.s	Obj0A_MakeItem
00014CE0                            ; ===========================================================================
00014CE0                            
00014CE0                            loc_13FAC:
00014CE0 4A68 0036                  		tst.w	$36(a0)
00014CE4 6700 0000                  		beq.w	locret_1408C
00014CE8 5368 003A                  		subq.w	#1,$3A(a0)
00014CEC 6A00 0000                  		bpl.w	locret_1408C
00014CF0                            
00014CF0                            Obj0A_MakeItem:
00014CF0 4EB9 0000 2D5A             		jsr	(RandomNumber).l
00014CF6 0240 000F                  		andi.w	#$F,d0
00014CFA 3140 003A                  		move.w	d0,$3A(a0)
00014CFE 4EBA 9A28                  		jsr	SingleObjLoad
00014D02 6600 0000                  		bne.w	locret_1408C
00014D06 12BC 000A                  		move.b	#$A,0(a1)	; load object
00014D0A 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00014D10 7006                       		moveq	#6,d0
00014D12 0838 0000 D022             		btst	#0,($FFFFD022).w
00014D18 6700                       		beq.s	loc_13FF2
00014D1A 4440                       		neg.w	d0
00014D1C 137C 0040 0026             		move.b	#$40,$26(a1)
00014D22                            
00014D22                            loc_13FF2:
00014D22 D169 0008                  		add.w	d0,8(a1)
00014D26 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00014D2C 137C 0006 0028             		move.b	#6,$28(a1)
00014D32 4A68 002C                  		tst.w	$2C(a0)
00014D36 6700 0000                  		beq.w	loc_1403E
00014D3A 0268 0007 003A             		andi.w	#7,$3A(a0)
00014D40 0668 0000 003A             		addi.w	#0,$3A(a0)
00014D46 3038 D00C                  		move.w	($FFFFD00C).w,d0
00014D4A 0440 000C                  		subi.w	#$C,d0
00014D4E 3340 000C                  		move.w	d0,$C(a1)
00014D52 4EB9 0000 2D5A             		jsr	(RandomNumber).l
00014D58 1340 0026                  		move.b	d0,$26(a1)
00014D5C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00014D60 0200 0003                  		andi.b	#3,d0
00014D64 6600                       		bne.s	loc_14082
00014D66 137C 000E 0028             		move.b	#$E,$28(a1)
00014D6C 6000                       		bra.s	loc_14082
00014D6E                            ; ===========================================================================
00014D6E                            
00014D6E                            loc_1403E:
00014D6E 0828 0007 0036             		btst	#7,$36(a0)
00014D74 6700                       		beq.s	loc_14082
00014D76 3438 FE14                  		move.w	($FFFFFE14).w,d2
00014D7A E24A                       		lsr.w	#1,d2
00014D7C 4EB9 0000 2D5A             		jsr	(RandomNumber).l
00014D82 0240 0003                  		andi.w	#3,d0
00014D86 6600                       		bne.s	loc_1406A
00014D88 08E8 0006 0036             		bset	#6,$36(a0)
00014D8E 6600                       		bne.s	loc_14082
00014D90 1342 0028                  		move.b	d2,$28(a1)
00014D94 337C 001C 0038             		move.w	#$1C,$38(a1)
00014D9A                            
00014D9A                            loc_1406A:
00014D9A 4A28 0034                  		tst.b	$34(a0)
00014D9E 6600                       		bne.s	loc_14082
00014DA0 08E8 0006 0036             		bset	#6,$36(a0)
00014DA6 6600                       		bne.s	loc_14082
00014DA8 1342 0028                  		move.b	d2,$28(a1)
00014DAC 337C 001C 0038             		move.w	#$1C,$38(a1)
00014DB2                            
00014DB2                            loc_14082:
00014DB2 5328 0034                  		subq.b	#1,$34(a0)
00014DB6 6A00                       		bpl.s	locret_1408C
00014DB8 4268 0036                  		clr.w	$36(a0)
00014DBC                            
00014DBC                            locret_1408C:
00014DBC 4E75                       		rts	
00014DBE                            
00014DBE                            ; ---------------------------------------------------------------------------
00014DBE                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00014DBE                            ; ---------------------------------------------------------------------------
00014DBE                            
00014DBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014DBE                            
00014DBE                            
00014DBE                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00014DBE 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00014DC4                             
00014DC4                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
00014DC4                             
00014DC4 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
00014DC8                             
00014DC8 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00014DCE 6600                       		bne.s	Air_GetBgm2	; if not, branch
00014DD0 43F9 0000 3DE2             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00014DD6 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014DD8                             
00014DD8                            Air_GetBgm2:
00014DD8 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00014DDE 6600                       		bne.s	Air_GetBgm3	; if not, branch
00014DE0 43F9 0000 3DEA             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00014DE6 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014DE8                             
00014DE8                            Air_GetBgm3:
00014DE8 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00014DEE 6600                       		bne.s	Air_GetBgm4	; if not, branch
00014DF0 43F9 0000 3DF2             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
00014DF6 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014DF8                             
00014DF8                            Air_GetBgm4:
00014DF8 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00014DFE 6600                       		bne.s	Air_PlayMusic	; if not, branch
00014E00 43F9 0000 3DFA             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00014E06                             
00014E06                            Air_PlayMusic:
00014E06 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
00014E0A                             
00014E0A                            loc_140A6:
00014E0A 4EB9 0000 15E0             		jsr	(PlaySound).l
00014E10                             
00014E10                            ; NineKode ends here
00014E10                            
00014E10                            loc_140AC:
00014E10 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00014E16 4238 D372                  		clr.b	($FFFFD372).w
00014E1A 4E75                       		rts	
00014E1C                            ; End of function ResumeMusic
00014E1C                            
00014E1C                            ; ===========================================================================
00014E1C                            Ani_obj0A:
00014E1C                            	include "_anim\obj0A.asm"
00014E1C                            ; ---------------------------------------------------------------------------
00014E1C                            ; Animation script - countdown numbers and bubbles (LZ)
00014E1C                            ; ---------------------------------------------------------------------------
00014E1C 0000                       		dc.w byte_140D6-Ani_obj0A
00014E1E 0000                       		dc.w byte_140E0-Ani_obj0A
00014E20 0000                       		dc.w byte_140EA-Ani_obj0A
00014E22 0000                       		dc.w byte_140F4-Ani_obj0A
00014E24 0000                       		dc.w byte_140FE-Ani_obj0A
00014E26 0000                       		dc.w byte_14108-Ani_obj0A
00014E28 0000                       		dc.w byte_14112-Ani_obj0A
00014E2A 0000                       		dc.w byte_14118-Ani_obj0A
00014E2C 0000                       		dc.w byte_14120-Ani_obj0A
00014E2E 0000                       		dc.w byte_14128-Ani_obj0A
00014E30 0000                       		dc.w byte_14130-Ani_obj0A
00014E32 0000                       		dc.w byte_14138-Ani_obj0A
00014E34 0000                       		dc.w byte_14140-Ani_obj0A
00014E36 0000                       		dc.w byte_14148-Ani_obj0A
00014E38 0000                       		dc.w byte_1414A-Ani_obj0A
00014E3A 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00014E44 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
00014E4E 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00014E58 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00014E62 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00014E6C 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00014E76 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00014E7C 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00014E84 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00014E8C 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00014E94 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00014E9C 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00014EA4 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00014EAC 0EFC                       byte_14148:	dc.b $E, $FC
00014EAE 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00014EB4                            		even
00014EB4                            		even
00014EB4                            
00014EB4                            ; ---------------------------------------------------------------------------
00014EB4                            ; Sprite mappings - drowning countdown numbers (LZ)
00014EB4                            ; ---------------------------------------------------------------------------
00014EB4                            Map_obj0A:
00014EB4                            	include "_maps\obj0A.asm"
00014EB4                            ; ---------------------------------------------------------------------------
00014EB4                            ; Sprite mappings - drowning countdown numbers (LZ)
00014EB4                            ; ---------------------------------------------------------------------------
00014EB4 0000                       		dc.w byte_14152-Map_obj0A
00014EB6 01                         byte_14152:	dc.b 1
00014EB7 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00014EBC                            		even
00014EBC                            		even
00014EBC                            
00014EBC                            ; ===========================================================================
00014EBC                            ; ---------------------------------------------------------------------------
00014EBC                            ; Object 38 - shield and invincibility stars
00014EBC                            ; ---------------------------------------------------------------------------
00014EBC                            
00014EBC                            Obj38:					; XREF: Obj_Index
00014EBC 7000                       		moveq	#0,d0
00014EBE 1028 0024                  		move.b	$24(a0),d0
00014EC2 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00014EC6 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00014ECA                            ; ===========================================================================
00014ECA 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00014ECC 0000                       		dc.w Obj38_Shield-Obj38_Index
00014ECE 0000                       		dc.w Obj38_Stars-Obj38_Index
00014ED0                            ; ===========================================================================
00014ED0                            
00014ED0                            Obj38_Main:				; XREF: Obj38_Index
00014ED0 5428 0024                  		addq.b	#2,$24(a0)
00014ED4 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00014EDC 117C 0004 0001             		move.b	#4,1(a0)
00014EE2 117C 0001 0018             		move.b	#1,$18(a0)
00014EE8 117C 0010 0019             		move.b	#$10,$19(a0)
00014EEE 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00014EF2 6600                       		bne.s	Obj38_DoStars	; if not, branch
00014EF4 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00014EFA 4E75                       		rts	
00014EFC                            ; ===========================================================================
00014EFC                            
00014EFC                            Obj38_DoStars:
00014EFC 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00014F00 317C 055C 0002             		move.w	#$55C,2(a0)
00014F06 4E75                       		rts	
00014F08                            ; ===========================================================================
00014F08                            
00014F08                            Obj38_Shield:				; XREF: Obj38_Index
00014F08 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014F0C 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00014F0E 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00014F12 6700                       		beq.s	Obj38_Delete	; if not, branch
00014F14 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014F1A 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014F20 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014F26 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014F2C 4EB9 0000 B2FA             		jsr	AnimateSprite
00014F32 4EFA 936E                  		jmp	DisplaySprite
00014F36                            ; ===========================================================================
00014F36                            
00014F36                            Obj38_RmvShield:
00014F36 4E75                       		rts	
00014F38                            ; ===========================================================================
00014F38                            
00014F38                            Obj38_Delete:
00014F38 4EFA 93A4                  		jmp	DeleteObject
00014F3C                            ; ===========================================================================
00014F3C                            
00014F3C                            Obj38_Stars:				; XREF: Obj38_Index
00014F3C 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014F40 6700                       		beq.s	Obj38_Delete2	; if not, branch
00014F42 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014F46 1228 001C                  		move.b	$1C(a0),d1
00014F4A 5301                       		subq.b	#1,d1
00014F4C 6000                       		bra.s	Obj38_StarTrail
00014F4E                            ; ===========================================================================
00014F4E E909                       		lsl.b	#4,d1
00014F50 5801                       		addq.b	#4,d1
00014F52 9001                       		sub.b	d1,d0
00014F54 1228 0030                  		move.b	$30(a0),d1
00014F58 9001                       		sub.b	d1,d0
00014F5A 5801                       		addq.b	#4,d1
00014F5C 0201 000F                  		andi.b	#$F,d1
00014F60 1141 0030                  		move.b	d1,$30(a0)
00014F64 6000                       		bra.s	Obj38_StarTrail2a
00014F66                            ; ===========================================================================
00014F66                            
00014F66                            Obj38_StarTrail:			; XREF: Obj38_Stars
00014F66 E709                       		lsl.b	#3,d1
00014F68 1401                       		move.b	d1,d2
00014F6A D201                       		add.b	d1,d1
00014F6C D202                       		add.b	d2,d1
00014F6E 5801                       		addq.b	#4,d1
00014F70 9001                       		sub.b	d1,d0
00014F72 1228 0030                  		move.b	$30(a0),d1
00014F76 9001                       		sub.b	d1,d0
00014F78 5801                       		addq.b	#4,d1
00014F7A 0C01 0018                  		cmpi.b	#$18,d1
00014F7E 6500                       		bcs.s	Obj38_StarTrail2
00014F80 7200                       		moveq	#0,d1
00014F82                            
00014F82                            Obj38_StarTrail2:
00014F82 1141 0030                  		move.b	d1,$30(a0)
00014F86                            
00014F86                            Obj38_StarTrail2a:
00014F86 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014F8A 43F1 0000                  		lea	(a1,d0.w),a1
00014F8E 3159 0008                  		move.w	(a1)+,8(a0)
00014F92 3159 000C                  		move.w	(a1)+,$C(a0)
00014F96 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014F9C 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014FA2 4EB9 0000 B2FA             		jsr	AnimateSprite
00014FA8 4EFA 92F8                  		jmp	DisplaySprite
00014FAC                            ; ===========================================================================
00014FAC                            
00014FAC                            Obj38_Delete2:				; XREF: Obj38_Stars
00014FAC 4EFA 9330                  		jmp	DeleteObject
00014FB0                            ; ===========================================================================
00014FB0                            ; ---------------------------------------------------------------------------
00014FB0                            ; Object 4A - special stage entry from beta
00014FB0                            ; ---------------------------------------------------------------------------
00014FB0                            
00014FB0                            Obj4A:					; XREF: Obj_Index
00014FB0 7000                       		moveq	#0,d0
00014FB2 1028 0024                  		move.b	$24(a0),d0
00014FB6 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00014FBA 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00014FBE                            ; ===========================================================================
00014FBE 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00014FC0 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00014FC2 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00014FC4                            ; ===========================================================================
00014FC4                            
00014FC4                            Obj4A_Main:				; XREF: Obj4A_Index
00014FC4 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00014FC8 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00014FCA 4E75                       		rts	
00014FCC                            ; ===========================================================================
00014FCC                            
00014FCC                            Obj4A_Main2:
00014FCC 5428 0024                  		addq.b	#2,$24(a0)
00014FD0 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00014FD8 117C 0004 0001             		move.b	#4,1(a0)
00014FDE 117C 0001 0018             		move.b	#1,$18(a0)
00014FE4 117C 0038 0019             		move.b	#$38,$19(a0)
00014FEA 317C 0541 0002             		move.w	#$541,2(a0)
00014FF0 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00014FF6                            
00014FF6                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00014FF6 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014FFC 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00015002 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00015008 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
0001500E 4EB9 0000 B2FA             		jsr	AnimateSprite
00015014 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001501A 6600                       		bne.s	Obj4A_Display
0001501C 4A38 D000                  		tst.b	($FFFFD000).w
00015020 6700                       		beq.s	Obj4A_Display
00015022 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
00015028 303C 00A8                  		move.w	#$A8,d0
0001502C 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
00015032                            
00015032                            Obj4A_Display:
00015032 4EFA 926E                  		jmp	DisplaySprite
00015036                            ; ===========================================================================
00015036                            
00015036                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
00015036 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0001503A 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
0001503C 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00015042 4EFA 929A                  		jmp	DeleteObject
00015046                            ; ===========================================================================
00015046                            
00015046                            Obj4A_Wait:
00015046 4E75                       		rts	
00015048                            ; ===========================================================================
00015048                            ; ---------------------------------------------------------------------------
00015048                            ; Object 08 - water splash (LZ)
00015048                            ; ---------------------------------------------------------------------------
00015048                            
00015048                            Obj08:					; XREF: Obj_Index
00015048 7000                       		moveq	#0,d0
0001504A 1028 0024                  		move.b	$24(a0),d0
0001504E 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00015052 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00015056                            ; ===========================================================================
00015056 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00015058 0000                       		dc.w Obj08_Display-Obj08_Index
0001505A 0000                       		dc.w Obj08_Delete-Obj08_Index
0001505C                            ; ===========================================================================
0001505C                            
0001505C                            Obj08_Main:				; XREF: Obj08_Index
0001505C 5428 0024                  		addq.b	#2,$24(a0)
00015060 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00015068 0028 0004 0001             		ori.b	#4,1(a0)
0001506E 117C 0001 0018             		move.b	#1,$18(a0)
00015074 117C 0010 0019             		move.b	#$10,$19(a0)
0001507A 317C 4259 0002             		move.w	#$4259,2(a0)
00015080 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00015086                            
00015086                            Obj08_Display:				; XREF: Obj08_Index
00015086 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
0001508C 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00015092 4EB9 0000 B2FA             		jsr	AnimateSprite
00015098 4EFA 9208                  		jmp	DisplaySprite
0001509C                            ; ===========================================================================
0001509C                            
0001509C                            Obj08_Delete:				; XREF: Obj08_Index
0001509C 4EFA 9240                  		jmp	DeleteObject	; delete when animation	is complete
000150A0                            ; ===========================================================================
000150A0                            Ani_obj38:
000150A0                            	include "_anim\obj38.asm"
000150A0                            ; ---------------------------------------------------------------------------
000150A0                            ; Animation script - shield and invincibility stars
000150A0                            ; ---------------------------------------------------------------------------
000150A0 0000                       		dc.w byte_14356-Ani_obj38
000150A2 0000                       		dc.w byte_1435E-Ani_obj38
000150A4 0000                       		dc.w byte_14364-Ani_obj38
000150A6 0000                       		dc.w byte_1437E-Ani_obj38
000150A8 0000                       		dc.w byte_14398-Ani_obj38
000150AA 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
000150B2 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
000150B8 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
000150C9 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
000150D2 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
000150E3 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
000150EC 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
000150FD 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00015106                            		even
00015106                            		even
00015106                            
00015106                            ; ---------------------------------------------------------------------------
00015106                            ; Sprite mappings - shield and invincibility stars
00015106                            ; ---------------------------------------------------------------------------
00015106                            Map_obj38:
00015106                            	include "_maps\obj38.asm"
00015106                            ; ---------------------------------------------------------------------------
00015106                            ; Sprite mappings - shield and invincibility stars
00015106                            ; ---------------------------------------------------------------------------
00015106 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
0001510A 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
0001510E 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00015112 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00015116 04                         byte_143C2:	dc.b 4
00015117 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
0001511C E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00015121 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00015126 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
0001512B 04                         byte_143D7:	dc.b 4
0001512C E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00015131 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00015136 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
0001513B 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00015140 04                         byte_143EC:	dc.b 4
00015141 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00015146 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
0001514B 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00015150 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00015155 04                         byte_14401:	dc.b 4
00015156 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
0001515B E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00015160 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00015165 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0001516A 04                         byte_14416:	dc.b 4
0001516B E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00015170 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00015175 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
0001517A 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
0001517F 04                         byte_1442B:	dc.b 4
00015180 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00015185 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
0001518A 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
0001518F 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00015194 04                         byte_14440:	dc.b 4
00015195 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
0001519A E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
0001519F 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
000151A4 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
000151AA 00                         		even
000151AA 00                         		even
000151AA                            
000151AA                            Ani_obj4A:
000151AA                            	include "_anim\obj4A.asm"
000151AA                            ; ---------------------------------------------------------------------------
000151AA                            ; Animation script - special stage entry effect from beta
000151AA                            ; ---------------------------------------------------------------------------
000151AA 0000                       		dc.w byte_14458-Ani_obj4A
000151AC 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
000151C0                            		even
000151C0                            		even
000151C0                            
000151C0                            ; ---------------------------------------------------------------------------
000151C0                            ; Sprite mappings - special stage entry	from beta
000151C0                            ; ---------------------------------------------------------------------------
000151C0                            Map_obj4A:
000151C0                            	include "_maps\obj4A.asm"
000151C0                            ; ---------------------------------------------------------------------------
000151C0                            ; Sprite mappings - special stage entry	from beta
000151C0                            ; ---------------------------------------------------------------------------
000151C0 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
000151C4 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
000151C8 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
000151CC 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
000151D0 03                         byte_1447C:	dc.b 3
000151D1 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
000151D6 0004 0001 00               		dc.b 0,	4, 0, 1, 0
000151DB 0800 1000 08               		dc.b 8,	0, $10,	0, 8
000151E0 03                         byte_1448C:	dc.b 3
000151E1 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
000151E6 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
000151EB 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
000151F0 05                         byte_1449C:	dc.b 5
000151F1 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
000151F6 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
000151FB FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00015200 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00015205 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
0001520A 09                         byte_144B6:	dc.b 9
0001520B F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00015210 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00015215 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
0001521A 0005 0034 10               		dc.b 0,	5, 0, $34, $10
0001521F F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00015224 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00015229 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
0001522E 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00015233 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00015238 12                         byte_144E4:	dc.b $12
00015239 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
0001523E F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00015243 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00015248 0000 0025 00               		dc.b 0,	0, 0, $25, 0
0001524D 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00015252 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00015257 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
0001525C F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00015261 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00015266 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
0001526B 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00015270 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00015275 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
0001527A F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
0001527F 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00015284 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00015289 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
0001528E F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00015293 11                         byte_1453F:	dc.b $11
00015294 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00015299 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
0001529E 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
000152A3 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
000152A8 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
000152AD F800 1825 20               		dc.b $F8, 0, $18, $25, $20
000152B2 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
000152B7 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
000152BC 0000 0025 30               		dc.b 0,	0, 0, $25, $30
000152C1 0800 0825 30               		dc.b 8,	0, 8, $25, $30
000152C6 0000 0826 38               		dc.b 0,	0, 8, $26, $38
000152CB 0800 0029 38               		dc.b 8,	0, 0, $29, $38
000152D0 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
000152D5 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
000152DA F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
000152DF 0000 0025 48               		dc.b 0,	0, 0, $25, $48
000152E4 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
000152E9 09                         byte_14595:	dc.b 9
000152EA FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
000152EF 0400 0825 28               		dc.b 4,	0, 8, $25, $28
000152F4 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
000152F9 0400 0826 40               		dc.b 4,	0, 8, $26, $40
000152FE FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00015303 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00015308 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
0001530D 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00015312 04                         		dc.b 4
00015313 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00015318                            		even
00015318                            		even
00015318                            
00015318                            Ani_obj08:
00015318                            	include "_anim\obj08.asm"
00015318                            ; ---------------------------------------------------------------------------
00015318                            ; Animation script - water splash (LZ)
00015318                            ; ---------------------------------------------------------------------------
00015318 0000                       		dc.w byte_145C6-Ani_obj08
0001531A 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00015320                            		even
00015320                            		even
00015320                            
00015320                            ; ---------------------------------------------------------------------------
00015320                            ; Sprite mappings - water splash (LZ)
00015320                            ; ---------------------------------------------------------------------------
00015320                            Map_obj08:
00015320                            	include "_maps\obj08.asm"
00015320                            ; ---------------------------------------------------------------------------
00015320                            ; Sprite mappings - water splash (LZ)
00015320                            ; ---------------------------------------------------------------------------
00015320 0000                       		dc.w byte_145D2-Map_obj08
00015322 0000                       		dc.w byte_145DD-Map_obj08
00015324 0000                       		dc.w byte_145E8-Map_obj08
00015326 02                         byte_145D2:	dc.b 2
00015327 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
0001532C FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00015331 02                         byte_145DD:	dc.b 2
00015332 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00015337 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
0001533C 01                         byte_145E8:	dc.b 1
0001533D E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00015342                            		even
00015342                            		even
00015342                            
00015342                            ; ---------------------------------------------------------------------------
00015342                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00015342                            ; ---------------------------------------------------------------------------
00015342                            
00015342                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015342                            
00015342                            
00015342                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00015342 0828 0003 0022             		btst	#3,$22(a0)
00015348 6700                       		beq.s	loc_14602
0001534A 7000                       		moveq	#0,d0
0001534C 11C0 F768                  		move.b	d0,($FFFFF768).w
00015350 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015354 4E75                       		rts	
00015356                            ; ===========================================================================
00015356                            
00015356                            loc_14602:
00015356 7003                       		moveq	#3,d0
00015358 11C0 F768                  		move.b	d0,($FFFFF768).w
0001535C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015360 1028 0026                  		move.b	$26(a0),d0
00015364 0600 0020                  		addi.b	#$20,d0
00015368 6A00                       		bpl.s	loc_14624
0001536A 1028 0026                  		move.b	$26(a0),d0
0001536E 6A00                       		bpl.s	loc_1461E
00015370 5300                       		subq.b	#1,d0
00015372                            
00015372                            loc_1461E:
00015372 0600 0020                  		addi.b	#$20,d0
00015376 6000                       		bra.s	loc_14630
00015378                            ; ===========================================================================
00015378                            
00015378                            loc_14624:
00015378 1028 0026                  		move.b	$26(a0),d0
0001537C 6A00                       		bpl.s	loc_1462C
0001537E 5200                       		addq.b	#1,d0
00015380                            
00015380                            loc_1462C:
00015380 0600 001F                  		addi.b	#$1F,d0
00015384                            
00015384                            loc_14630:
00015384 0200 00C0                  		andi.b	#$C0,d0
00015388 0C00 0040                  		cmpi.b	#$40,d0
0001538C 6700 0000                  		beq.w	Sonic_WalkVertL
00015390 0C00 0080                  		cmpi.b	#$80,d0
00015394 6700 0000                  		beq.w	Sonic_WalkCeiling
00015398 0C00 00C0                  		cmpi.b	#$C0,d0
0001539C 6700 0000                  		beq.w	Sonic_WalkVertR
000153A0 3428 000C                  		move.w	$C(a0),d2
000153A4 3628 0008                  		move.w	8(a0),d3
000153A8 7000                       		moveq	#0,d0
000153AA 1028 0016                  		move.b	$16(a0),d0
000153AE 4880                       		ext.w	d0
000153B0 D440                       		add.w	d0,d2
000153B2 1028 0017                  		move.b	$17(a0),d0
000153B6 4880                       		ext.w	d0
000153B8 D640                       		add.w	d0,d3
000153BA 49F8 F768                  		lea	($FFFFF768).w,a4
000153BE 367C 0010                  		movea.w	#$10,a3
000153C2 3C3C 0000                  		move.w	#0,d6
000153C6 7A0D                       		moveq	#$D,d5
000153C8 6100 0000                  		bsr.w	FindFloor
000153CC 3F01                       		move.w	d1,-(sp)
000153CE 3428 000C                  		move.w	$C(a0),d2
000153D2 3628 0008                  		move.w	8(a0),d3
000153D6 7000                       		moveq	#0,d0
000153D8 1028 0016                  		move.b	$16(a0),d0
000153DC 4880                       		ext.w	d0
000153DE D440                       		add.w	d0,d2
000153E0 1028 0017                  		move.b	$17(a0),d0
000153E4 4880                       		ext.w	d0
000153E6 4440                       		neg.w	d0
000153E8 D640                       		add.w	d0,d3
000153EA 49F8 F76A                  		lea	($FFFFF76A).w,a4
000153EE 367C 0010                  		movea.w	#$10,a3
000153F2 3C3C 0000                  		move.w	#0,d6
000153F6 7A0D                       		moveq	#$D,d5
000153F8 6100 0000                  		bsr.w	FindFloor
000153FC 301F                       		move.w	(sp)+,d0
000153FE 6100 0000                  		bsr.w	Sonic_Angle
00015402 4A41                       		tst.w	d1
00015404 6700                       		beq.s	locret_146BE
00015406 6A00                       		bpl.s	loc_146C0
00015408 0C41 FFF2                  		cmpi.w	#-$E,d1
0001540C 6D00                       		blt.s	locret_146E6
0001540E D368 000C                  		add.w	d1,$C(a0)
00015412                            
00015412                            locret_146BE:
00015412 4E75                       		rts	
00015414                            ; ===========================================================================
00015414                            
00015414                            loc_146C0:
00015414 0C41 000E                  		cmpi.w	#$E,d1
00015418 6E00                       		bgt.s	loc_146CC
0001541A                            
0001541A                            loc_146C6:
0001541A D368 000C                  		add.w	d1,$C(a0)
0001541E 4E75                       		rts	
00015420                            ; ===========================================================================
00015420                            
00015420                            loc_146CC:
00015420 4A28 0038                  		tst.b	$38(a0)
00015424 66F4                       		bne.s	loc_146C6
00015426 08E8 0001 0022             		bset	#1,$22(a0)
0001542C 08A8 0005 0022             		bclr	#5,$22(a0)
00015432 117C 0001 001D             		move.b	#1,$1D(a0)
00015438 4E75                       		rts	
0001543A                            ; ===========================================================================
0001543A                            
0001543A                            locret_146E6:
0001543A 4E75                       		rts	
0001543C                            ; End of function Sonic_AnglePos
0001543C                            
0001543C                            ; ===========================================================================
0001543C 2428 0008                  		move.l	8(a0),d2
00015440 3028 0010                  		move.w	$10(a0),d0
00015444 48C0                       		ext.l	d0
00015446 E180                       		asl.l	#8,d0
00015448 9480                       		sub.l	d0,d2
0001544A 2142 0008                  		move.l	d2,8(a0)
0001544E 303C 0038                  		move.w	#$38,d0
00015452 48C0                       		ext.l	d0
00015454 E180                       		asl.l	#8,d0
00015456 9680                       		sub.l	d0,d3
00015458 2143 000C                  		move.l	d3,$C(a0)
0001545C 4E75                       		rts	
0001545E                            ; ===========================================================================
0001545E                            
0001545E                            locret_1470A:
0001545E 4E75                       		rts	
00015460                            ; ===========================================================================
00015460 2628 000C                  		move.l	$C(a0),d3
00015464 3028 0012                  		move.w	$12(a0),d0
00015468 0440 0038                  		subi.w	#$38,d0
0001546C 3140 0012                  		move.w	d0,$12(a0)
00015470 48C0                       		ext.l	d0
00015472 E180                       		asl.l	#8,d0
00015474 9680                       		sub.l	d0,d3
00015476 2143 000C                  		move.l	d3,$C(a0)
0001547A 4E75                       		rts	
0001547C 4E75                       		rts	
0001547E                            ; ===========================================================================
0001547E 2428 0008                  		move.l	8(a0),d2
00015482 2628 000C                  		move.l	$C(a0),d3
00015486 3028 0010                  		move.w	$10(a0),d0
0001548A 48C0                       		ext.l	d0
0001548C E180                       		asl.l	#8,d0
0001548E 9480                       		sub.l	d0,d2
00015490 3028 0012                  		move.w	$12(a0),d0
00015494 48C0                       		ext.l	d0
00015496 E180                       		asl.l	#8,d0
00015498 9680                       		sub.l	d0,d3
0001549A 2142 0008                  		move.l	d2,8(a0)
0001549E 2143 000C                  		move.l	d3,$C(a0)
000154A2 4E75                       		rts	
000154A4                            
000154A4                            ; ---------------------------------------------------------------------------
000154A4                            ; Subroutine to	change Sonic's angle as he walks along the floor
000154A4                            ; ---------------------------------------------------------------------------
000154A4                            
000154A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154A4                            
000154A4                            
000154A4                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
000154A4 1438 F76A                  		move.b	($FFFFF76A).w,d2
000154A8 B240                       		cmp.w	d0,d1
000154AA 6F00                       		ble.s	loc_1475E
000154AC 1438 F768                  		move.b	($FFFFF768).w,d2
000154B0 3200                       		move.w	d0,d1
000154B2                            
000154B2                            loc_1475E:
000154B2 0802 0000                  		btst	#0,d2
000154B6 6600                       		bne.s	loc_1476A
000154B8 1142 0026                  		move.b	d2,$26(a0)
000154BC 4E75                       		rts	
000154BE                            ; ===========================================================================
000154BE                            
000154BE                            loc_1476A:
000154BE 1428 0026                  		move.b	$26(a0),d2
000154C2 0602 0020                  		addi.b	#$20,d2
000154C6 0202 00C0                  		andi.b	#$C0,d2
000154CA 1142 0026                  		move.b	d2,$26(a0)
000154CE 4E75                       		rts	
000154D0                            ; End of function Sonic_Angle
000154D0                            
000154D0                            ; ---------------------------------------------------------------------------
000154D0                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
000154D0                            ; ---------------------------------------------------------------------------
000154D0                            
000154D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154D0                            
000154D0                            
000154D0                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
000154D0 3428 000C                  		move.w	$C(a0),d2
000154D4 3628 0008                  		move.w	8(a0),d3
000154D8 7000                       		moveq	#0,d0
000154DA 1028 0017                  		move.b	$17(a0),d0
000154DE 4880                       		ext.w	d0
000154E0 4440                       		neg.w	d0
000154E2 D440                       		add.w	d0,d2
000154E4 1028 0016                  		move.b	$16(a0),d0
000154E8 4880                       		ext.w	d0
000154EA D640                       		add.w	d0,d3
000154EC 49F8 F768                  		lea	($FFFFF768).w,a4
000154F0 367C 0010                  		movea.w	#$10,a3
000154F4 3C3C 0000                  		move.w	#0,d6
000154F8 7A0D                       		moveq	#$D,d5
000154FA 6100 0000                  		bsr.w	FindWall
000154FE 3F01                       		move.w	d1,-(sp)
00015500 3428 000C                  		move.w	$C(a0),d2
00015504 3628 0008                  		move.w	8(a0),d3
00015508 7000                       		moveq	#0,d0
0001550A 1028 0017                  		move.b	$17(a0),d0
0001550E 4880                       		ext.w	d0
00015510 D440                       		add.w	d0,d2
00015512 1028 0016                  		move.b	$16(a0),d0
00015516 4880                       		ext.w	d0
00015518 D640                       		add.w	d0,d3
0001551A 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001551E 367C 0010                  		movea.w	#$10,a3
00015522 3C3C 0000                  		move.w	#0,d6
00015526 7A0D                       		moveq	#$D,d5
00015528 6100 0000                  		bsr.w	FindWall
0001552C 301F                       		move.w	(sp)+,d0
0001552E 6100 FF74                  		bsr.w	Sonic_Angle
00015532 4A41                       		tst.w	d1
00015534 6700                       		beq.s	locret_147F0
00015536 6A00                       		bpl.s	loc_147F2
00015538 0C41 FFF2                  		cmpi.w	#-$E,d1
0001553C 6D00 FF20                  		blt.w	locret_1470A
00015540 D368 0008                  		add.w	d1,8(a0)
00015544                            
00015544                            locret_147F0:
00015544 4E75                       		rts	
00015546                            ; ===========================================================================
00015546                            
00015546                            loc_147F2:
00015546 0C41 000E                  		cmpi.w	#$E,d1
0001554A 6E00                       		bgt.s	loc_147FE
0001554C                            
0001554C                            loc_147F8:
0001554C D368 0008                  		add.w	d1,8(a0)
00015550 4E75                       		rts	
00015552                            ; ===========================================================================
00015552                            
00015552                            loc_147FE:
00015552 4A28 0038                  		tst.b	$38(a0)
00015556 66F4                       		bne.s	loc_147F8
00015558 08E8 0001 0022             		bset	#1,$22(a0)
0001555E 08A8 0005 0022             		bclr	#5,$22(a0)
00015564 117C 0001 001D             		move.b	#1,$1D(a0)
0001556A 4E75                       		rts	
0001556C                            ; End of function Sonic_WalkVertR
0001556C                            
0001556C                            ; ---------------------------------------------------------------------------
0001556C                            ; Subroutine allowing Sonic to walk upside-down
0001556C                            ; ---------------------------------------------------------------------------
0001556C                            
0001556C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001556C                            
0001556C                            
0001556C                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
0001556C 3428 000C                  		move.w	$C(a0),d2
00015570 3628 0008                  		move.w	8(a0),d3
00015574 7000                       		moveq	#0,d0
00015576 1028 0016                  		move.b	$16(a0),d0
0001557A 4880                       		ext.w	d0
0001557C 9440                       		sub.w	d0,d2
0001557E 0A42 000F                  		eori.w	#$F,d2
00015582 1028 0017                  		move.b	$17(a0),d0
00015586 4880                       		ext.w	d0
00015588 D640                       		add.w	d0,d3
0001558A 49F8 F768                  		lea	($FFFFF768).w,a4
0001558E 367C FFF0                  		movea.w	#-$10,a3
00015592 3C3C 1000                  		move.w	#$1000,d6
00015596 7A0D                       		moveq	#$D,d5
00015598 6100 0000                  		bsr.w	FindFloor
0001559C 3F01                       		move.w	d1,-(sp)
0001559E 3428 000C                  		move.w	$C(a0),d2
000155A2 3628 0008                  		move.w	8(a0),d3
000155A6 7000                       		moveq	#0,d0
000155A8 1028 0016                  		move.b	$16(a0),d0
000155AC 4880                       		ext.w	d0
000155AE 9440                       		sub.w	d0,d2
000155B0 0A42 000F                  		eori.w	#$F,d2
000155B4 1028 0017                  		move.b	$17(a0),d0
000155B8 4880                       		ext.w	d0
000155BA 9640                       		sub.w	d0,d3
000155BC 49F8 F76A                  		lea	($FFFFF76A).w,a4
000155C0 367C FFF0                  		movea.w	#-$10,a3
000155C4 3C3C 1000                  		move.w	#$1000,d6
000155C8 7A0D                       		moveq	#$D,d5
000155CA 6100 0000                  		bsr.w	FindFloor
000155CE 301F                       		move.w	(sp)+,d0
000155D0 6100 FED2                  		bsr.w	Sonic_Angle
000155D4 4A41                       		tst.w	d1
000155D6 6700                       		beq.s	locret_14892
000155D8 6A00                       		bpl.s	loc_14894
000155DA 0C41 FFF2                  		cmpi.w	#-$E,d1
000155DE 6D00 FE5A                  		blt.w	locret_146E6
000155E2 9368 000C                  		sub.w	d1,$C(a0)
000155E6                            
000155E6                            locret_14892:
000155E6 4E75                       		rts	
000155E8                            ; ===========================================================================
000155E8                            
000155E8                            loc_14894:
000155E8 0C41 000E                  		cmpi.w	#$E,d1
000155EC 6E00                       		bgt.s	loc_148A0
000155EE                            
000155EE                            loc_1489A:
000155EE 9368 000C                  		sub.w	d1,$C(a0)
000155F2 4E75                       		rts	
000155F4                            ; ===========================================================================
000155F4                            
000155F4                            loc_148A0:
000155F4 4A28 0038                  		tst.b	$38(a0)
000155F8 66F4                       		bne.s	loc_1489A
000155FA 08E8 0001 0022             		bset	#1,$22(a0)
00015600 08A8 0005 0022             		bclr	#5,$22(a0)
00015606 117C 0001 001D             		move.b	#1,$1D(a0)
0001560C 4E75                       		rts	
0001560E                            ; End of function Sonic_WalkCeiling
0001560E                            
0001560E                            ; ---------------------------------------------------------------------------
0001560E                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
0001560E                            ; ---------------------------------------------------------------------------
0001560E                            
0001560E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001560E                            
0001560E                            
0001560E                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
0001560E 3428 000C                  		move.w	$C(a0),d2
00015612 3628 0008                  		move.w	8(a0),d3
00015616 7000                       		moveq	#0,d0
00015618 1028 0017                  		move.b	$17(a0),d0
0001561C 4880                       		ext.w	d0
0001561E 9440                       		sub.w	d0,d2
00015620 1028 0016                  		move.b	$16(a0),d0
00015624 4880                       		ext.w	d0
00015626 9640                       		sub.w	d0,d3
00015628 0A43 000F                  		eori.w	#$F,d3
0001562C 49F8 F768                  		lea	($FFFFF768).w,a4
00015630 367C FFF0                  		movea.w	#-$10,a3
00015634 3C3C 0800                  		move.w	#$800,d6
00015638 7A0D                       		moveq	#$D,d5
0001563A 6100 0000                  		bsr.w	FindWall
0001563E 3F01                       		move.w	d1,-(sp)
00015640 3428 000C                  		move.w	$C(a0),d2
00015644 3628 0008                  		move.w	8(a0),d3
00015648 7000                       		moveq	#0,d0
0001564A 1028 0017                  		move.b	$17(a0),d0
0001564E 4880                       		ext.w	d0
00015650 D440                       		add.w	d0,d2
00015652 1028 0016                  		move.b	$16(a0),d0
00015656 4880                       		ext.w	d0
00015658 9640                       		sub.w	d0,d3
0001565A 0A43 000F                  		eori.w	#$F,d3
0001565E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015662 367C FFF0                  		movea.w	#-$10,a3
00015666 3C3C 0800                  		move.w	#$800,d6
0001566A 7A0D                       		moveq	#$D,d5
0001566C 6100 0000                  		bsr.w	FindWall
00015670 301F                       		move.w	(sp)+,d0
00015672 6100 FE30                  		bsr.w	Sonic_Angle
00015676 4A41                       		tst.w	d1
00015678 6700                       		beq.s	locret_14934
0001567A 6A00                       		bpl.s	loc_14936
0001567C 0C41 FFF2                  		cmpi.w	#-$E,d1
00015680 6D00 FDDC                  		blt.w	locret_1470A
00015684 9368 0008                  		sub.w	d1,8(a0)
00015688                            
00015688                            locret_14934:
00015688 4E75                       		rts	
0001568A                            ; ===========================================================================
0001568A                            
0001568A                            loc_14936:
0001568A 0C41 000E                  		cmpi.w	#$E,d1
0001568E 6E00                       		bgt.s	loc_14942
00015690                            
00015690                            loc_1493C:
00015690 9368 0008                  		sub.w	d1,8(a0)
00015694 4E75                       		rts	
00015696                            ; ===========================================================================
00015696                            
00015696                            loc_14942:
00015696 4A28 0038                  		tst.b	$38(a0)
0001569A 66F4                       		bne.s	loc_1493C
0001569C 08E8 0001 0022             		bset	#1,$22(a0)
000156A2 08A8 0005 0022             		bclr	#5,$22(a0)
000156A8 117C 0001 001D             		move.b	#1,$1D(a0)
000156AE 4E75                       		rts	
000156B0                            ; End of function Sonic_WalkVertL
000156B0                            
000156B0                            ; ---------------------------------------------------------------------------
000156B0                            ; Subroutine to	find which tile	the object is standing on
000156B0                            ; ---------------------------------------------------------------------------
000156B0                            
000156B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156B0                            
000156B0                            
000156B0                            Floor_ChkTile:				; XREF: FindFloor; et al
000156B0 3002                       		move.w	d2,d0
000156B2 E248                       		lsr.w	#1,d0
000156B4 0240 0380                  		andi.w	#$380,d0
000156B8 3203                       		move.w	d3,d1
000156BA E049                       		lsr.w	#8,d1
000156BC 0241 007F                  		andi.w	#$7F,d1
000156C0 D041                       		add.w	d1,d0
000156C2 72FF                       		moveq	#-1,d1
000156C4 43F8 A400                  		lea	($FFFFA400).w,a1
000156C8 1231 0000                  		move.b	(a1,d0.w),d1
000156CC 6700                       		beq.s	loc_14996
000156CE 6B00                       		bmi.s	loc_1499A
000156D0 5301                       		subq.b	#1,d1
000156D2 4881                       		ext.w	d1
000156D4 EE59                       		ror.w	#7,d1
000156D6 3002                       		move.w	d2,d0
000156D8 D040                       		add.w	d0,d0
000156DA 0240 01E0                  		andi.w	#$1E0,d0
000156DE D240                       		add.w	d0,d1
000156E0 3003                       		move.w	d3,d0
000156E2 E648                       		lsr.w	#3,d0
000156E4 0240 001E                  		andi.w	#$1E,d0
000156E8 D240                       		add.w	d0,d1
000156EA                            
000156EA                            loc_14996:
000156EA 2241                       		movea.l	d1,a1
000156EC 4E75                       		rts	
000156EE                            ; ===========================================================================
000156EE                            
000156EE                            loc_1499A:
000156EE 0241 007F                  		andi.w	#$7F,d1
000156F2 0828 0006 0001             		btst	#6,1(a0)
000156F8 6700                       		beq.s	loc_149B2
000156FA 5241                       		addq.w	#1,d1
000156FC 0C41 0029                  		cmpi.w	#$29,d1
00015700 6600                       		bne.s	loc_149B2
00015702 323C 0051                  		move.w	#$51,d1
00015706                            
00015706                            loc_149B2:
00015706 5301                       		subq.b	#1,d1
00015708 EE59                       		ror.w	#7,d1
0001570A 3002                       		move.w	d2,d0
0001570C D040                       		add.w	d0,d0
0001570E 0240 01E0                  		andi.w	#$1E0,d0
00015712 D240                       		add.w	d0,d1
00015714 3003                       		move.w	d3,d0
00015716 E648                       		lsr.w	#3,d0
00015718 0240 001E                  		andi.w	#$1E,d0
0001571C D240                       		add.w	d0,d1
0001571E 2241                       		movea.l	d1,a1
00015720 4E75                       		rts	
00015722                            ; End of function Floor_ChkTile
00015722                            
00015722                            
00015722                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015722                            
00015722                            
00015722                            FindFloor:				; XREF: Sonic_AnglePos; et al
00015722 618C                       		bsr.s	Floor_ChkTile
00015724 3011                       		move.w	(a1),d0
00015726 3800                       		move.w	d0,d4
00015728 0240 07FF                  		andi.w	#$7FF,d0
0001572C 6700                       		beq.s	loc_149DE
0001572E 0B04                       		btst	d5,d4
00015730 6600                       		bne.s	loc_149EC
00015732                            
00015732                            loc_149DE:
00015732 D44B                       		add.w	a3,d2
00015734 6100 0000                  		bsr.w	FindFloor2
00015738 944B                       		sub.w	a3,d2
0001573A 0641 0010                  		addi.w	#$10,d1
0001573E 4E75                       		rts	
00015740                            ; ===========================================================================
00015740                            
00015740                            loc_149EC:
00015740 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00015744 1032 0000                  		move.b	(a2,d0.w),d0
00015748 0240 00FF                  		andi.w	#$FF,d0
0001574C 67E4                       		beq.s	loc_149DE
0001574E 45F9 0000 0000             		lea	(AngleMap).l,a2
00015754 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015758 E948                       		lsl.w	#4,d0
0001575A 3203                       		move.w	d3,d1
0001575C 0804 000B                  		btst	#$B,d4
00015760 6700                       		beq.s	loc_14A12
00015762 4641                       		not.w	d1
00015764 4414                       		neg.b	(a4)
00015766                            
00015766                            loc_14A12:
00015766 0804 000C                  		btst	#$C,d4
0001576A 6700                       		beq.s	loc_14A22
0001576C 0614 0040                  		addi.b	#$40,(a4)
00015770 4414                       		neg.b	(a4)
00015772 0414 0040                  		subi.b	#$40,(a4)
00015776                            
00015776                            loc_14A22:
00015776 0241 000F                  		andi.w	#$F,d1
0001577A D240                       		add.w	d0,d1
0001577C 45F9 0000 0000             		lea	(CollArray1).l,a2
00015782 1032 1000                  		move.b	(a2,d1.w),d0
00015786 4880                       		ext.w	d0
00015788 BD44                       		eor.w	d6,d4
0001578A 0804 000C                  		btst	#$C,d4
0001578E 6700                       		beq.s	loc_14A3E
00015790 4440                       		neg.w	d0
00015792                            
00015792                            loc_14A3E:
00015792 4A40                       		tst.w	d0
00015794 679C                       		beq.s	loc_149DE
00015796 6B00                       		bmi.s	loc_14A5A
00015798 0C00 0010                  		cmpi.b	#$10,d0
0001579C 6700                       		beq.s	loc_14A66
0001579E 3202                       		move.w	d2,d1
000157A0 0241 000F                  		andi.w	#$F,d1
000157A4 D041                       		add.w	d1,d0
000157A6 323C 000F                  		move.w	#$F,d1
000157AA 9240                       		sub.w	d0,d1
000157AC 4E75                       		rts	
000157AE                            ; ===========================================================================
000157AE                            
000157AE                            loc_14A5A:
000157AE 3202                       		move.w	d2,d1
000157B0 0241 000F                  		andi.w	#$F,d1
000157B4 D041                       		add.w	d1,d0
000157B6 6A00 FF7A                  		bpl.w	loc_149DE
000157BA                            
000157BA                            loc_14A66:
000157BA 944B                       		sub.w	a3,d2
000157BC 6100 0000                  		bsr.w	FindFloor2
000157C0 D44B                       		add.w	a3,d2
000157C2 0441 0010                  		subi.w	#$10,d1
000157C6 4E75                       		rts	
000157C8                            ; End of function FindFloor
000157C8                            
000157C8                            
000157C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157C8                            
000157C8                            
000157C8                            FindFloor2:				; XREF: FindFloor
000157C8 6100 FEE6                  		bsr.w	Floor_ChkTile
000157CC 3011                       		move.w	(a1),d0
000157CE 3800                       		move.w	d0,d4
000157D0 0240 07FF                  		andi.w	#$7FF,d0
000157D4 6700                       		beq.s	loc_14A86
000157D6 0B04                       		btst	d5,d4
000157D8 6600                       		bne.s	loc_14A94
000157DA                            
000157DA                            loc_14A86:
000157DA 323C 000F                  		move.w	#$F,d1
000157DE 3002                       		move.w	d2,d0
000157E0 0240 000F                  		andi.w	#$F,d0
000157E4 9240                       		sub.w	d0,d1
000157E6 4E75                       		rts	
000157E8                            ; ===========================================================================
000157E8                            
000157E8                            loc_14A94:
000157E8 2478 F796                  		movea.l	($FFFFF796).w,a2
000157EC 1032 0000                  		move.b	(a2,d0.w),d0
000157F0 0240 00FF                  		andi.w	#$FF,d0
000157F4 67E4                       		beq.s	loc_14A86
000157F6 45F9 0000 0000             		lea	(AngleMap).l,a2
000157FC 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015800 E948                       		lsl.w	#4,d0
00015802 3203                       		move.w	d3,d1
00015804 0804 000B                  		btst	#$B,d4
00015808 6700                       		beq.s	loc_14ABA
0001580A 4641                       		not.w	d1
0001580C 4414                       		neg.b	(a4)
0001580E                            
0001580E                            loc_14ABA:
0001580E 0804 000C                  		btst	#$C,d4
00015812 6700                       		beq.s	loc_14ACA
00015814 0614 0040                  		addi.b	#$40,(a4)
00015818 4414                       		neg.b	(a4)
0001581A 0414 0040                  		subi.b	#$40,(a4)
0001581E                            
0001581E                            loc_14ACA:
0001581E 0241 000F                  		andi.w	#$F,d1
00015822 D240                       		add.w	d0,d1
00015824 45F9 0000 0000             		lea	(CollArray1).l,a2
0001582A 1032 1000                  		move.b	(a2,d1.w),d0
0001582E 4880                       		ext.w	d0
00015830 BD44                       		eor.w	d6,d4
00015832 0804 000C                  		btst	#$C,d4
00015836 6700                       		beq.s	loc_14AE6
00015838 4440                       		neg.w	d0
0001583A                            
0001583A                            loc_14AE6:
0001583A 4A40                       		tst.w	d0
0001583C 679C                       		beq.s	loc_14A86
0001583E 6B00                       		bmi.s	loc_14AFC
00015840 3202                       		move.w	d2,d1
00015842 0241 000F                  		andi.w	#$F,d1
00015846 D041                       		add.w	d1,d0
00015848 323C 000F                  		move.w	#$F,d1
0001584C 9240                       		sub.w	d0,d1
0001584E 4E75                       		rts	
00015850                            ; ===========================================================================
00015850                            
00015850                            loc_14AFC:
00015850 3202                       		move.w	d2,d1
00015852 0241 000F                  		andi.w	#$F,d1
00015856 D041                       		add.w	d1,d0
00015858 6A00 FF80                  		bpl.w	loc_14A86
0001585C 4641                       		not.w	d1
0001585E 4E75                       		rts	
00015860                            ; End of function FindFloor2
00015860                            
00015860                            
00015860                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015860                            
00015860                            
00015860                            FindWall:				; XREF: Sonic_WalkVertR; et al
00015860 6100 FE4E                  		bsr.w	Floor_ChkTile
00015864 3011                       		move.w	(a1),d0
00015866 3800                       		move.w	d0,d4
00015868 0240 07FF                  		andi.w	#$7FF,d0
0001586C 6700                       		beq.s	loc_14B1E
0001586E 0B04                       		btst	d5,d4
00015870 6600                       		bne.s	loc_14B2C
00015872                            
00015872                            loc_14B1E:
00015872 D64B                       		add.w	a3,d3
00015874 6100 0000                  		bsr.w	FindWall2
00015878 964B                       		sub.w	a3,d3
0001587A 0641 0010                  		addi.w	#$10,d1
0001587E 4E75                       		rts	
00015880                            ; ===========================================================================
00015880                            
00015880                            loc_14B2C:
00015880 2478 F796                  		movea.l	($FFFFF796).w,a2
00015884 1032 0000                  		move.b	(a2,d0.w),d0
00015888 0240 00FF                  		andi.w	#$FF,d0
0001588C 67E4                       		beq.s	loc_14B1E
0001588E 45F9 0000 0000             		lea	(AngleMap).l,a2
00015894 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015898 E948                       		lsl.w	#4,d0
0001589A 3202                       		move.w	d2,d1
0001589C 0804 000C                  		btst	#$C,d4
000158A0 6700                       		beq.s	loc_14B5A
000158A2 4641                       		not.w	d1
000158A4 0614 0040                  		addi.b	#$40,(a4)
000158A8 4414                       		neg.b	(a4)
000158AA 0414 0040                  		subi.b	#$40,(a4)
000158AE                            
000158AE                            loc_14B5A:
000158AE 0804 000B                  		btst	#$B,d4
000158B2 6700                       		beq.s	loc_14B62
000158B4 4414                       		neg.b	(a4)
000158B6                            
000158B6                            loc_14B62:
000158B6 0241 000F                  		andi.w	#$F,d1
000158BA D240                       		add.w	d0,d1
000158BC 45F9 0000 0000             		lea	(CollArray2).l,a2
000158C2 1032 1000                  		move.b	(a2,d1.w),d0
000158C6 4880                       		ext.w	d0
000158C8 BD44                       		eor.w	d6,d4
000158CA 0804 000B                  		btst	#$B,d4
000158CE 6700                       		beq.s	loc_14B7E
000158D0 4440                       		neg.w	d0
000158D2                            
000158D2                            loc_14B7E:
000158D2 4A40                       		tst.w	d0
000158D4 679C                       		beq.s	loc_14B1E
000158D6 6B00                       		bmi.s	loc_14B9A
000158D8 0C00 0010                  		cmpi.b	#$10,d0
000158DC 6700                       		beq.s	loc_14BA6
000158DE 3203                       		move.w	d3,d1
000158E0 0241 000F                  		andi.w	#$F,d1
000158E4 D041                       		add.w	d1,d0
000158E6 323C 000F                  		move.w	#$F,d1
000158EA 9240                       		sub.w	d0,d1
000158EC 4E75                       		rts	
000158EE                            ; ===========================================================================
000158EE                            
000158EE                            loc_14B9A:
000158EE 3203                       		move.w	d3,d1
000158F0 0241 000F                  		andi.w	#$F,d1
000158F4 D041                       		add.w	d1,d0
000158F6 6A00 FF7A                  		bpl.w	loc_14B1E
000158FA                            
000158FA                            loc_14BA6:
000158FA 964B                       		sub.w	a3,d3
000158FC 6100 0000                  		bsr.w	FindWall2
00015900 D64B                       		add.w	a3,d3
00015902 0441 0010                  		subi.w	#$10,d1
00015906 4E75                       		rts	
00015908                            ; End of function FindWall
00015908                            
00015908                            
00015908                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015908                            
00015908                            
00015908                            FindWall2:				; XREF: FindWall
00015908 6100 FDA6                  		bsr.w	Floor_ChkTile
0001590C 3011                       		move.w	(a1),d0
0001590E 3800                       		move.w	d0,d4
00015910 0240 07FF                  		andi.w	#$7FF,d0
00015914 6700                       		beq.s	loc_14BC6
00015916 0B04                       		btst	d5,d4
00015918 6600                       		bne.s	loc_14BD4
0001591A                            
0001591A                            loc_14BC6:
0001591A 323C 000F                  		move.w	#$F,d1
0001591E 3003                       		move.w	d3,d0
00015920 0240 000F                  		andi.w	#$F,d0
00015924 9240                       		sub.w	d0,d1
00015926 4E75                       		rts	
00015928                            ; ===========================================================================
00015928                            
00015928                            loc_14BD4:
00015928 2478 F796                  		movea.l	($FFFFF796).w,a2
0001592C 1032 0000                  		move.b	(a2,d0.w),d0
00015930 0240 00FF                  		andi.w	#$FF,d0
00015934 67E4                       		beq.s	loc_14BC6
00015936 45F9 0000 0000             		lea	(AngleMap).l,a2
0001593C 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015940 E948                       		lsl.w	#4,d0
00015942 3202                       		move.w	d2,d1
00015944 0804 000C                  		btst	#$C,d4
00015948 6700                       		beq.s	loc_14C02
0001594A 4641                       		not.w	d1
0001594C 0614 0040                  		addi.b	#$40,(a4)
00015950 4414                       		neg.b	(a4)
00015952 0414 0040                  		subi.b	#$40,(a4)
00015956                            
00015956                            loc_14C02:
00015956 0804 000B                  		btst	#$B,d4
0001595A 6700                       		beq.s	loc_14C0A
0001595C 4414                       		neg.b	(a4)
0001595E                            
0001595E                            loc_14C0A:
0001595E 0241 000F                  		andi.w	#$F,d1
00015962 D240                       		add.w	d0,d1
00015964 45F9 0000 0000             		lea	(CollArray2).l,a2
0001596A 1032 1000                  		move.b	(a2,d1.w),d0
0001596E 4880                       		ext.w	d0
00015970 BD44                       		eor.w	d6,d4
00015972 0804 000B                  		btst	#$B,d4
00015976 6700                       		beq.s	loc_14C26
00015978 4440                       		neg.w	d0
0001597A                            
0001597A                            loc_14C26:
0001597A 4A40                       		tst.w	d0
0001597C 679C                       		beq.s	loc_14BC6
0001597E 6B00                       		bmi.s	loc_14C3C
00015980 3203                       		move.w	d3,d1
00015982 0241 000F                  		andi.w	#$F,d1
00015986 D041                       		add.w	d1,d0
00015988 323C 000F                  		move.w	#$F,d1
0001598C 9240                       		sub.w	d0,d1
0001598E 4E75                       		rts	
00015990                            ; ===========================================================================
00015990                            
00015990                            loc_14C3C:
00015990 3203                       		move.w	d3,d1
00015992 0241 000F                  		andi.w	#$F,d1
00015996 D041                       		add.w	d1,d0
00015998 6A00 FF80                  		bpl.w	loc_14BC6
0001599C 4641                       		not.w	d1
0001599E 4E75                       		rts	
000159A0                            ; End of function FindWall2
000159A0                            
000159A0                            ; ---------------------------------------------------------------------------
000159A0                            ; Unused floor/wall subroutine - logs something	to do with collision
000159A0                            ; ---------------------------------------------------------------------------
000159A0                            
000159A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159A0                            
000159A0                            
000159A0                            FloorLog_Unk:				; XREF: Level
000159A0 4E75                       		rts	
000159A2                            
000159A2 43F9 0000 0000             		lea	(CollArray1).l,a1
000159A8 45F9 0000 0000             		lea	(CollArray1).l,a2
000159AE 363C 00FF                  		move.w	#$FF,d3
000159B2                            
000159B2                            loc_14C5E:
000159B2 7A10                       		moveq	#$10,d5
000159B4 343C 000F                  		move.w	#$F,d2
000159B8                            
000159B8                            loc_14C64:
000159B8 7800                       		moveq	#0,d4
000159BA 323C 000F                  		move.w	#$F,d1
000159BE                            
000159BE                            loc_14C6A:
000159BE 3019                       		move.w	(a1)+,d0
000159C0 EAA8                       		lsr.l	d5,d0
000159C2 D944                       		addx.w	d4,d4
000159C4 51C9 FFF8                  		dbf	d1,loc_14C6A
000159C8                            
000159C8 34C4                       		move.w	d4,(a2)+
000159CA 92FC 0020                  		suba.w	#$20,a1
000159CE 5345                       		subq.w	#1,d5
000159D0 51CA FFE6                  		dbf	d2,loc_14C64
000159D4                            
000159D4 D2FC 0020                  		adda.w	#$20,a1
000159D8 51CB FFD8                  		dbf	d3,loc_14C5E
000159DC                            
000159DC 43F9 0000 0000             		lea	(CollArray1).l,a1
000159E2 45F9 0000 0000             		lea	(CollArray2).l,a2
000159E8 6100                       		bsr.s	FloorLog_Unk2
000159EA 43F9 0000 0000             		lea	(CollArray1).l,a1
000159F0 45F9 0000 0000             		lea	(CollArray1).l,a2
000159F6                            
000159F6                            ; End of function FloorLog_Unk
000159F6                            
000159F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159F6                            
000159F6                            
000159F6                            FloorLog_Unk2:				; XREF: FloorLog_Unk
000159F6 363C 0FFF                  		move.w	#$FFF,d3
000159FA                            
000159FA                            loc_14CA6:
000159FA 7400                       		moveq	#0,d2
000159FC 323C 000F                  		move.w	#$F,d1
00015A00 3019                       		move.w	(a1)+,d0
00015A02 6700                       		beq.s	loc_14CD4
00015A04 6B00                       		bmi.s	loc_14CBE
00015A06                            
00015A06                            loc_14CB2:
00015A06 E248                       		lsr.w	#1,d0
00015A08 6400                       		bcc.s	loc_14CB8
00015A0A 5202                       		addq.b	#1,d2
00015A0C                            
00015A0C                            loc_14CB8:
00015A0C 51C9 FFF8                  		dbf	d1,loc_14CB2
00015A10                            
00015A10 6000                       		bra.s	loc_14CD6
00015A12                            ; ===========================================================================
00015A12                            
00015A12                            loc_14CBE:
00015A12 0C40 FFFF                  		cmpi.w	#-1,d0
00015A16 6700                       		beq.s	loc_14CD0
00015A18                            
00015A18                            loc_14CC4:
00015A18 E348                       		lsl.w	#1,d0
00015A1A 6400                       		bcc.s	loc_14CCA
00015A1C 5302                       		subq.b	#1,d2
00015A1E                            
00015A1E                            loc_14CCA:
00015A1E 51C9 FFF8                  		dbf	d1,loc_14CC4
00015A22                            
00015A22 6000                       		bra.s	loc_14CD6
00015A24                            ; ===========================================================================
00015A24                            
00015A24                            loc_14CD0:
00015A24 303C 0010                  		move.w	#$10,d0
00015A28                            
00015A28                            loc_14CD4:
00015A28 3400                       		move.w	d0,d2
00015A2A                            
00015A2A                            loc_14CD6:
00015A2A 14C2                       		move.b	d2,(a2)+
00015A2C 51CB FFCC                  		dbf	d3,loc_14CA6
00015A30                            
00015A30 4E75                       		rts	
00015A32                            
00015A32                            ; End of function FloorLog_Unk2
00015A32                            
00015A32                            
00015A32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A32                            
00015A32                            
00015A32                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00015A32 2628 0008                  		move.l	8(a0),d3
00015A36 2428 000C                  		move.l	$C(a0),d2
00015A3A 3228 0010                  		move.w	$10(a0),d1
00015A3E 48C1                       		ext.l	d1
00015A40 E181                       		asl.l	#8,d1
00015A42 D681                       		add.l	d1,d3
00015A44 3228 0012                  		move.w	$12(a0),d1
00015A48 48C1                       		ext.l	d1
00015A4A E181                       		asl.l	#8,d1
00015A4C D481                       		add.l	d1,d2
00015A4E 4842                       		swap	d2
00015A50 4843                       		swap	d3
00015A52 11C0 F768                  		move.b	d0,($FFFFF768).w
00015A56 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015A5A 1200                       		move.b	d0,d1
00015A5C 0600 0020                  		addi.b	#$20,d0
00015A60 6A00                       		bpl.s	loc_14D1A
00015A62 1001                       		move.b	d1,d0
00015A64 6A00                       		bpl.s	loc_14D14
00015A66 5300                       		subq.b	#1,d0
00015A68                            
00015A68                            loc_14D14:
00015A68 0600 0020                  		addi.b	#$20,d0
00015A6C 6000                       		bra.s	loc_14D24
00015A6E                            ; ===========================================================================
00015A6E                            
00015A6E                            loc_14D1A:
00015A6E 1001                       		move.b	d1,d0
00015A70 6A00                       		bpl.s	loc_14D20
00015A72 5200                       		addq.b	#1,d0
00015A74                            
00015A74                            loc_14D20:
00015A74 0600 001F                  		addi.b	#$1F,d0
00015A78                            
00015A78                            loc_14D24:
00015A78 0200 00C0                  		andi.b	#$C0,d0
00015A7C 6700 0000                  		beq.w	loc_14DF0
00015A80 0C00 0080                  		cmpi.b	#$80,d0
00015A84 6700 0000                  		beq.w	loc_14F7C
00015A88 0201 0038                  		andi.b	#$38,d1
00015A8C 6600                       		bne.s	loc_14D3C
00015A8E 5042                       		addq.w	#8,d2
00015A90                            
00015A90                            loc_14D3C:
00015A90 0C00 0040                  		cmpi.b	#$40,d0
00015A94 6700 0000                  		beq.w	loc_1504A
00015A98 6000 0000                  		bra.w	loc_14EBC
00015A9C                            
00015A9C                            ; End of function Sonic_WalkSpeed
00015A9C                            
00015A9C                            
00015A9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A9C                            
00015A9C                            
00015A9C                            sub_14D48:				; XREF: Sonic_Jump
00015A9C 11C0 F768                  		move.b	d0,($FFFFF768).w
00015AA0 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015AA4 0600 0020                  		addi.b	#$20,d0
00015AA8 0200 00C0                  		andi.b	#$C0,d0
00015AAC 0C00 0040                  		cmpi.b	#$40,d0
00015AB0 6700 0000                  		beq.w	loc_14FD6
00015AB4 0C00 0080                  		cmpi.b	#$80,d0
00015AB8 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00015ABC 0C00 00C0                  		cmpi.b	#$C0,d0
00015AC0 6700 0000                  		beq.w	sub_14E50
00015AC4                            
00015AC4                            ; End of function sub_14D48
00015AC4                            
00015AC4                            ; ---------------------------------------------------------------------------
00015AC4                            ; Subroutine to	make Sonic land	on the floor after jumping
00015AC4                            ; ---------------------------------------------------------------------------
00015AC4                            
00015AC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015AC4                            
00015AC4                            
00015AC4                            Sonic_HitFloor:				; XREF: Sonic_Floor
00015AC4 3428 000C                  		move.w	$C(a0),d2
00015AC8 3628 0008                  		move.w	8(a0),d3
00015ACC 7000                       		moveq	#0,d0
00015ACE 1028 0016                  		move.b	$16(a0),d0
00015AD2 4880                       		ext.w	d0
00015AD4 D440                       		add.w	d0,d2
00015AD6 1028 0017                  		move.b	$17(a0),d0
00015ADA 4880                       		ext.w	d0
00015ADC D640                       		add.w	d0,d3
00015ADE 49F8 F768                  		lea	($FFFFF768).w,a4
00015AE2 367C 0010                  		movea.w	#$10,a3
00015AE6 3C3C 0000                  		move.w	#0,d6
00015AEA 7A0D                       		moveq	#$D,d5
00015AEC 6100 FC34                  		bsr.w	FindFloor
00015AF0 3F01                       		move.w	d1,-(sp)
00015AF2 3428 000C                  		move.w	$C(a0),d2
00015AF6 3628 0008                  		move.w	8(a0),d3
00015AFA 7000                       		moveq	#0,d0
00015AFC 1028 0016                  		move.b	$16(a0),d0
00015B00 4880                       		ext.w	d0
00015B02 D440                       		add.w	d0,d2
00015B04 1028 0017                  		move.b	$17(a0),d0
00015B08 4880                       		ext.w	d0
00015B0A 9640                       		sub.w	d0,d3
00015B0C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015B10 367C 0010                  		movea.w	#$10,a3
00015B14 3C3C 0000                  		move.w	#0,d6
00015B18 7A0D                       		moveq	#$D,d5
00015B1A 6100 FC06                  		bsr.w	FindFloor
00015B1E 301F                       		move.w	(sp)+,d0
00015B20 143C 0000                  		move.b	#0,d2
00015B24                            
00015B24                            loc_14DD0:
00015B24 1638 F76A                  		move.b	($FFFFF76A).w,d3
00015B28 B240                       		cmp.w	d0,d1
00015B2A 6F00                       		ble.s	loc_14DDE
00015B2C 1638 F768                  		move.b	($FFFFF768).w,d3
00015B30 C141                       		exg	d0,d1
00015B32                            
00015B32                            loc_14DDE:
00015B32 0803 0000                  		btst	#0,d3
00015B36 6700                       		beq.s	locret_14DE6
00015B38 1602                       		move.b	d2,d3
00015B3A                            
00015B3A                            locret_14DE6:
00015B3A 4E75                       		rts	
00015B3C                            
00015B3C                            ; End of function Sonic_HitFloor
00015B3C                            
00015B3C                            ; ===========================================================================
00015B3C 3428 000C                  		move.w	$C(a0),d2
00015B40 3628 0008                  		move.w	8(a0),d3
00015B44                            
00015B44                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00015B44 0642 000A                  		addi.w	#$A,d2
00015B48 49F8 F768                  		lea	($FFFFF768).w,a4
00015B4C 367C 0010                  		movea.w	#$10,a3
00015B50 3C3C 0000                  		move.w	#0,d6
00015B54 7A0E                       		moveq	#$E,d5
00015B56 6100 FBCA                  		bsr.w	FindFloor
00015B5A 143C 0000                  		move.b	#0,d2
00015B5E                            
00015B5E                            loc_14E0A:				; XREF: sub_14EB4
00015B5E 1638 F768                  		move.b	($FFFFF768).w,d3
00015B62 0803 0000                  		btst	#0,d3
00015B66 6700                       		beq.s	locret_14E16
00015B68 1602                       		move.b	d2,d3
00015B6A                            
00015B6A                            locret_14E16:
00015B6A 4E75                       		rts	
00015B6C                            
00015B6C                            ; ---------------------------------------------------------------------------
00015B6C                            ; Subroutine allowing objects to interact with the floor
00015B6C                            ; ---------------------------------------------------------------------------
00015B6C                            
00015B6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B6C                            
00015B6C                            
00015B6C                            ObjHitFloor:
00015B6C 3628 0008                  		move.w	8(a0),d3
00015B70                            
00015B70                            ; End of function ObjHitFloor
00015B70                            
00015B70                            
00015B70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B70                            
00015B70                            
00015B70                            ObjHitFloor2:
00015B70 3428 000C                  		move.w	$C(a0),d2
00015B74 7000                       		moveq	#0,d0
00015B76 1028 0016                  		move.b	$16(a0),d0
00015B7A 4880                       		ext.w	d0
00015B7C D440                       		add.w	d0,d2
00015B7E 49F8 F768                  		lea	($FFFFF768).w,a4
00015B82 18BC 0000                  		move.b	#0,(a4)
00015B86 367C 0010                  		movea.w	#$10,a3
00015B8A 3C3C 0000                  		move.w	#0,d6
00015B8E 7A0D                       		moveq	#$D,d5
00015B90 6100 FB90                  		bsr.w	FindFloor
00015B94 1638 F768                  		move.b	($FFFFF768).w,d3
00015B98 0803 0000                  		btst	#0,d3
00015B9C 6700                       		beq.s	locret_14E4E
00015B9E 163C 0000                  		move.b	#0,d3
00015BA2                            
00015BA2                            locret_14E4E:
00015BA2 4E75                       		rts	
00015BA4                            ; End of function ObjHitFloor2
00015BA4                            
00015BA4                            
00015BA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015BA4                            
00015BA4                            
00015BA4                            sub_14E50:				; XREF: sub_14D48
00015BA4 3428 000C                  		move.w	$C(a0),d2
00015BA8 3628 0008                  		move.w	8(a0),d3
00015BAC 7000                       		moveq	#0,d0
00015BAE 1028 0017                  		move.b	$17(a0),d0
00015BB2 4880                       		ext.w	d0
00015BB4 9440                       		sub.w	d0,d2
00015BB6 1028 0016                  		move.b	$16(a0),d0
00015BBA 4880                       		ext.w	d0
00015BBC D640                       		add.w	d0,d3
00015BBE 49F8 F768                  		lea	($FFFFF768).w,a4
00015BC2 367C 0010                  		movea.w	#$10,a3
00015BC6 3C3C 0000                  		move.w	#0,d6
00015BCA 7A0E                       		moveq	#$E,d5
00015BCC 6100 FC92                  		bsr.w	FindWall
00015BD0 3F01                       		move.w	d1,-(sp)
00015BD2 3428 000C                  		move.w	$C(a0),d2
00015BD6 3628 0008                  		move.w	8(a0),d3
00015BDA 7000                       		moveq	#0,d0
00015BDC 1028 0017                  		move.b	$17(a0),d0
00015BE0 4880                       		ext.w	d0
00015BE2 D440                       		add.w	d0,d2
00015BE4 1028 0016                  		move.b	$16(a0),d0
00015BE8 4880                       		ext.w	d0
00015BEA D640                       		add.w	d0,d3
00015BEC 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015BF0 367C 0010                  		movea.w	#$10,a3
00015BF4 3C3C 0000                  		move.w	#0,d6
00015BF8 7A0E                       		moveq	#$E,d5
00015BFA 6100 FC64                  		bsr.w	FindWall
00015BFE 301F                       		move.w	(sp)+,d0
00015C00 143C 00C0                  		move.b	#-$40,d2
00015C04 6000 FF1E                  		bra.w	loc_14DD0
00015C08                            
00015C08                            ; End of function sub_14E50
00015C08                            
00015C08                            
00015C08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015C08                            
00015C08                            
00015C08                            sub_14EB4:				; XREF: Sonic_Floor
00015C08 3428 000C                  		move.w	$C(a0),d2
00015C0C 3628 0008                  		move.w	8(a0),d3
00015C10                            
00015C10                            loc_14EBC:
00015C10 0643 000A                  		addi.w	#$A,d3
00015C14 49F8 F768                  		lea	($FFFFF768).w,a4
00015C18 367C 0010                  		movea.w	#$10,a3
00015C1C 3C3C 0000                  		move.w	#0,d6
00015C20 7A0E                       		moveq	#$E,d5
00015C22 6100 FC3C                  		bsr.w	FindWall
00015C26 143C 00C0                  		move.b	#-$40,d2
00015C2A 6000 FF32                  		bra.w	loc_14E0A
00015C2E                            
00015C2E                            ; End of function sub_14EB4
00015C2E                            
00015C2E                            ; ---------------------------------------------------------------------------
00015C2E                            ; Subroutine to	detect when an object hits a wall to its right
00015C2E                            ; ---------------------------------------------------------------------------
00015C2E                            
00015C2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015C2E                            
00015C2E                            
00015C2E                            ObjHitWallRight:
00015C2E D668 0008                  		add.w	8(a0),d3
00015C32 3428 000C                  		move.w	$C(a0),d2
00015C36 49F8 F768                  		lea	($FFFFF768).w,a4
00015C3A 18BC 0000                  		move.b	#0,(a4)
00015C3E 367C 0010                  		movea.w	#$10,a3
00015C42 3C3C 0000                  		move.w	#0,d6
00015C46 7A0E                       		moveq	#$E,d5
00015C48 6100 FC16                  		bsr.w	FindWall
00015C4C 1638 F768                  		move.b	($FFFFF768).w,d3
00015C50 0803 0000                  		btst	#0,d3
00015C54 6700                       		beq.s	locret_14F06
00015C56 163C 00C0                  		move.b	#-$40,d3
00015C5A                            
00015C5A                            locret_14F06:
00015C5A 4E75                       		rts	
00015C5C                            
00015C5C                            ; End of function ObjHitWallRight
00015C5C                            
00015C5C                            ; ---------------------------------------------------------------------------
00015C5C                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00015C5C                            ; touches them
00015C5C                            ; ---------------------------------------------------------------------------
00015C5C                            
00015C5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015C5C                            
00015C5C                            
00015C5C                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
00015C5C 3428 000C                  		move.w	$C(a0),d2
00015C60 3628 0008                  		move.w	8(a0),d3
00015C64 7000                       		moveq	#0,d0
00015C66 1028 0016                  		move.b	$16(a0),d0
00015C6A 4880                       		ext.w	d0
00015C6C 9440                       		sub.w	d0,d2
00015C6E 0A42 000F                  		eori.w	#$F,d2
00015C72 1028 0017                  		move.b	$17(a0),d0
00015C76 4880                       		ext.w	d0
00015C78 D640                       		add.w	d0,d3
00015C7A 49F8 F768                  		lea	($FFFFF768).w,a4
00015C7E 367C FFF0                  		movea.w	#-$10,a3
00015C82 3C3C 1000                  		move.w	#$1000,d6
00015C86 7A0E                       		moveq	#$E,d5
00015C88 6100 FA98                  		bsr.w	FindFloor
00015C8C 3F01                       		move.w	d1,-(sp)
00015C8E 3428 000C                  		move.w	$C(a0),d2
00015C92 3628 0008                  		move.w	8(a0),d3
00015C96 7000                       		moveq	#0,d0
00015C98 1028 0016                  		move.b	$16(a0),d0
00015C9C 4880                       		ext.w	d0
00015C9E 9440                       		sub.w	d0,d2
00015CA0 0A42 000F                  		eori.w	#$F,d2
00015CA4 1028 0017                  		move.b	$17(a0),d0
00015CA8 4880                       		ext.w	d0
00015CAA 9640                       		sub.w	d0,d3
00015CAC 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015CB0 367C FFF0                  		movea.w	#-$10,a3
00015CB4 3C3C 1000                  		move.w	#$1000,d6
00015CB8 7A0E                       		moveq	#$E,d5
00015CBA 6100 FA66                  		bsr.w	FindFloor
00015CBE 301F                       		move.w	(sp)+,d0
00015CC0 143C 0080                  		move.b	#-$80,d2
00015CC4 6000 FE5E                  		bra.w	loc_14DD0
00015CC8                            ; End of function Sonic_DontRunOnWalls
00015CC8                            
00015CC8                            ; ===========================================================================
00015CC8 3428 000C                  		move.w	$C(a0),d2
00015CCC 3628 0008                  		move.w	8(a0),d3
00015CD0                            
00015CD0                            loc_14F7C:
00015CD0 0442 000A                  		subi.w	#$A,d2
00015CD4 0A42 000F                  		eori.w	#$F,d2
00015CD8 49F8 F768                  		lea	($FFFFF768).w,a4
00015CDC 367C FFF0                  		movea.w	#-$10,a3
00015CE0 3C3C 1000                  		move.w	#$1000,d6
00015CE4 7A0E                       		moveq	#$E,d5
00015CE6 6100 FA3A                  		bsr.w	FindFloor
00015CEA 143C 0080                  		move.b	#-$80,d2
00015CEE 6000 FE6E                  		bra.w	loc_14E0A
00015CF2                            
00015CF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015CF2                            
00015CF2                            
00015CF2                            ObjHitCeiling:
00015CF2 3428 000C                  		move.w	$C(a0),d2
00015CF6 3628 0008                  		move.w	8(a0),d3
00015CFA 7000                       		moveq	#0,d0
00015CFC 1028 0016                  		move.b	$16(a0),d0
00015D00 4880                       		ext.w	d0
00015D02 9440                       		sub.w	d0,d2
00015D04 0A42 000F                  		eori.w	#$F,d2
00015D08 49F8 F768                  		lea	($FFFFF768).w,a4
00015D0C 367C FFF0                  		movea.w	#-$10,a3
00015D10 3C3C 1000                  		move.w	#$1000,d6
00015D14 7A0E                       		moveq	#$E,d5
00015D16 6100 FA0A                  		bsr.w	FindFloor
00015D1A 1638 F768                  		move.b	($FFFFF768).w,d3
00015D1E 0803 0000                  		btst	#0,d3
00015D22 6700                       		beq.s	locret_14FD4
00015D24 163C 0080                  		move.b	#-$80,d3
00015D28                            
00015D28                            locret_14FD4:
00015D28 4E75                       		rts	
00015D2A                            ; End of function ObjHitCeiling
00015D2A                            
00015D2A                            ; ===========================================================================
00015D2A                            
00015D2A                            loc_14FD6:				; XREF: sub_14D48
00015D2A 3428 000C                  		move.w	$C(a0),d2
00015D2E 3628 0008                  		move.w	8(a0),d3
00015D32 7000                       		moveq	#0,d0
00015D34 1028 0017                  		move.b	$17(a0),d0
00015D38 4880                       		ext.w	d0
00015D3A 9440                       		sub.w	d0,d2
00015D3C 1028 0016                  		move.b	$16(a0),d0
00015D40 4880                       		ext.w	d0
00015D42 9640                       		sub.w	d0,d3
00015D44 0A43 000F                  		eori.w	#$F,d3
00015D48 49F8 F768                  		lea	($FFFFF768).w,a4
00015D4C 367C FFF0                  		movea.w	#-$10,a3
00015D50 3C3C 0800                  		move.w	#$800,d6
00015D54 7A0E                       		moveq	#$E,d5
00015D56 6100 FB08                  		bsr.w	FindWall
00015D5A 3F01                       		move.w	d1,-(sp)
00015D5C 3428 000C                  		move.w	$C(a0),d2
00015D60 3628 0008                  		move.w	8(a0),d3
00015D64 7000                       		moveq	#0,d0
00015D66 1028 0017                  		move.b	$17(a0),d0
00015D6A 4880                       		ext.w	d0
00015D6C D440                       		add.w	d0,d2
00015D6E 1028 0016                  		move.b	$16(a0),d0
00015D72 4880                       		ext.w	d0
00015D74 9640                       		sub.w	d0,d3
00015D76 0A43 000F                  		eori.w	#$F,d3
00015D7A 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015D7E 367C FFF0                  		movea.w	#-$10,a3
00015D82 3C3C 0800                  		move.w	#$800,d6
00015D86 7A0E                       		moveq	#$E,d5
00015D88 6100 FAD6                  		bsr.w	FindWall
00015D8C 301F                       		move.w	(sp)+,d0
00015D8E 143C 0040                  		move.b	#$40,d2
00015D92 6000 FD90                  		bra.w	loc_14DD0
00015D96                            
00015D96                            ; ---------------------------------------------------------------------------
00015D96                            ; Subroutine to	stop Sonic when	he jumps at a wall
00015D96                            ; ---------------------------------------------------------------------------
00015D96                            
00015D96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D96                            
00015D96                            
00015D96                            Sonic_HitWall:				; XREF: Sonic_Floor
00015D96 3428 000C                  		move.w	$C(a0),d2
00015D9A 3628 0008                  		move.w	8(a0),d3
00015D9E                            
00015D9E                            loc_1504A:
00015D9E 0443 000A                  		subi.w	#$A,d3
00015DA2 0A43 000F                  		eori.w	#$F,d3
00015DA6 49F8 F768                  		lea	($FFFFF768).w,a4
00015DAA 367C FFF0                  		movea.w	#-$10,a3
00015DAE 3C3C 0800                  		move.w	#$800,d6
00015DB2 7A0E                       		moveq	#$E,d5
00015DB4 6100 FAAA                  		bsr.w	FindWall
00015DB8 143C 0040                  		move.b	#$40,d2
00015DBC 6000 FDA0                  		bra.w	loc_14E0A
00015DC0                            ; End of function Sonic_HitWall
00015DC0                            
00015DC0                            ; ---------------------------------------------------------------------------
00015DC0                            ; Subroutine to	detect when an object hits a wall to its left
00015DC0                            ; ---------------------------------------------------------------------------
00015DC0                            
00015DC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015DC0                            
00015DC0                            
00015DC0                            ObjHitWallLeft:
00015DC0 D668 0008                  		add.w	8(a0),d3
00015DC4 3428 000C                  		move.w	$C(a0),d2
00015DC8 49F8 F768                  		lea	($FFFFF768).w,a4
00015DCC 18BC 0000                  		move.b	#0,(a4)
00015DD0 367C FFF0                  		movea.w	#-$10,a3
00015DD4 3C3C 0800                  		move.w	#$800,d6
00015DD8 7A0E                       		moveq	#$E,d5
00015DDA 6100 FA84                  		bsr.w	FindWall
00015DDE 1638 F768                  		move.b	($FFFFF768).w,d3
00015DE2 0803 0000                  		btst	#0,d3
00015DE6 6700                       		beq.s	locret_15098
00015DE8 163C 0040                  		move.b	#$40,d3
00015DEC                            
00015DEC                            locret_15098:
00015DEC 4E75                       		rts	
00015DEE                            ; End of function ObjHitWallLeft
00015DEE                            
00015DEE                            ; ===========================================================================
00015DEE                            ; ---------------------------------------------------------------------------
00015DEE                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00015DEE                            ; ---------------------------------------------------------------------------
00015DEE                            
00015DEE                            Obj66:					; XREF: Obj_Index
00015DEE 7000                       		moveq	#0,d0
00015DF0 1028 0024                  		move.b	$24(a0),d0
00015DF4 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00015DF8 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00015DFC                            ; ===========================================================================
00015DFC 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00015DFE 0000                       		dc.w Obj66_Action-Obj66_Index
00015E00 0000                       		dc.w Obj66_Display-Obj66_Index
00015E02 0000                       		dc.w Obj66_Release-Obj66_Index
00015E04                            ; ===========================================================================
00015E04                            
00015E04                            Obj66_Main:				; XREF: Obj66_Index
00015E04 5428 0024                  		addq.b	#2,$24(a0)
00015E08 323C 0001                  		move.w	#1,d1
00015E0C 2248                       		movea.l	a0,a1
00015E0E 6000                       		bra.s	Obj66_MakeItem
00015E10                            ; ===========================================================================
00015E10                            
00015E10                            Obj66_Loop:
00015E10 6100 8916                  		bsr.w	SingleObjLoad
00015E14 6600                       		bne.s	loc_150FE
00015E16 12BC 0066                  		move.b	#$66,0(a1)
00015E1A 5829 0024                  		addq.b	#4,$24(a1)
00015E1E 3368 0008 0008             		move.w	8(a0),8(a1)
00015E24 3368 000C 000C             		move.w	$C(a0),$C(a1)
00015E2A 137C 0003 0018             		move.b	#3,$18(a1)
00015E30 137C 0010 001A             		move.b	#$10,$1A(a1)
00015E36                            
00015E36                            Obj66_MakeItem:				; XREF: Obj66_Main
00015E36 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00015E3E 337C 4348 0002             		move.w	#$4348,2(a1)
00015E44 0029 0004 0001             		ori.b	#4,1(a1)
00015E4A 137C 0038 0019             		move.b	#$38,$19(a1)
00015E50                            
00015E50                            loc_150FE:
00015E50 51C9 FFBE                  		dbf	d1,Obj66_Loop
00015E54                            
00015E54 117C 0030 0019             		move.b	#$30,$19(a0)
00015E5A 117C 0004 0018             		move.b	#4,$18(a0)
00015E60 317C 003C 0030             		move.w	#$3C,$30(a0)
00015E66 117C 0001 0034             		move.b	#1,$34(a0)
00015E6C 1168 0028 0038             		move.b	$28(a0),$38(a0)
00015E72                            
00015E72                            Obj66_Action:				; XREF: Obj66_Index
00015E72 6100 0000                  		bsr.w	Obj66_ChkSwitch
00015E76 4A28 0001                  		tst.b	1(a0)
00015E7A 6A00 0000                  		bpl.w	Obj66_Display
00015E7E 323C 0030                  		move.w	#$30,d1
00015E82 3401                       		move.w	d1,d2
00015E84 3602                       		move.w	d2,d3
00015E86 5243                       		addq.w	#1,d3
00015E88 3828 0008                  		move.w	8(a0),d4
00015E8C 6100 A7DE                  		bsr.w	SolidObject
00015E90 0828 0005 0022             		btst	#5,$22(a0)
00015E96 6700 0000                  		beq.w	Obj66_Display
00015E9A 43F8 D000                  		lea	($FFFFD000).w,a1
00015E9E 720E                       		moveq	#$E,d1
00015EA0 3029 0008                  		move.w	8(a1),d0
00015EA4 B068 0008                  		cmp.w	8(a0),d0
00015EA8 6500                       		bcs.s	Obj66_GrabSonic
00015EAA 7207                       		moveq	#7,d1
00015EAC                            
00015EAC                            Obj66_GrabSonic:
00015EAC B228 001A                  		cmp.b	$1A(a0),d1
00015EB0 6600                       		bne.s	Obj66_Display
00015EB2 1141 0032                  		move.b	d1,$32(a0)
00015EB6 5828 0024                  		addq.b	#4,$24(a0)
00015EBA 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00015EC0 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00015EC6 337C 0800 0014             		move.w	#$800,$14(a1)
00015ECC 337C 0000 0010             		move.w	#0,$10(a1)
00015ED2 337C 0000 0012             		move.w	#0,$12(a1)
00015ED8 08A8 0005 0022             		bclr	#5,$22(a0)
00015EDE 08A9 0005 0022             		bclr	#5,$22(a1)
00015EE4 08E9 0001 0022             		bset	#1,$22(a1)
00015EEA 3429 0008                  		move.w	8(a1),d2
00015EEE 3629 000C                  		move.w	$C(a1),d3
00015EF2 6100 0000                  		bsr.w	Obj66_ChgPos
00015EF6 D569 0008                  		add.w	d2,8(a1)
00015EFA D769 000C                  		add.w	d3,$C(a1)
00015EFE E0E9 0008                  		asr	8(a1)
00015F02 E0E9 000C                  		asr	$C(a1)
00015F06                            
00015F06                            Obj66_Display:				; XREF: Obj66_Index
00015F06 6000 A43C                  		bra.w	MarkObjGone
00015F0A                            ; ===========================================================================
00015F0A                            
00015F0A                            Obj66_Release:				; XREF: Obj66_Index
00015F0A 1028 001A                  		move.b	$1A(a0),d0
00015F0E 0C00 0004                  		cmpi.b	#4,d0
00015F12 6700                       		beq.s	loc_151C8
00015F14 0C00 0007                  		cmpi.b	#7,d0
00015F18 6600                       		bne.s	loc_151F8
00015F1A                            
00015F1A                            loc_151C8:
00015F1A B028 0032                  		cmp.b	$32(a0),d0
00015F1E 6700                       		beq.s	loc_151F8
00015F20 43F8 D000                  		lea	($FFFFD000).w,a1
00015F24 337C 0000 0010             		move.w	#0,$10(a1)
00015F2A 337C 0800 0012             		move.w	#$800,$12(a1)
00015F30 0C00 0004                  		cmpi.b	#4,d0
00015F34 6700                       		beq.s	loc_151F0
00015F36 337C 0800 0010             		move.w	#$800,$10(a1)
00015F3C 337C 0800 0012             		move.w	#$800,$12(a1)
00015F42                            
00015F42                            loc_151F0:
00015F42 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00015F46 5928 0024                  		subq.b	#4,$24(a0)
00015F4A                            
00015F4A                            loc_151F8:
00015F4A 6100                       		bsr.s	Obj66_ChkSwitch
00015F4C 6100                       		bsr.s	Obj66_ChgPos
00015F4E 6000 A3F4                  		bra.w	MarkObjGone
00015F52                            
00015F52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F52                            
00015F52                            
00015F52                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00015F52 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015F56 7000                       		moveq	#0,d0
00015F58 1028 0038                  		move.b	$38(a0),d0
00015F5C 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00015F62 6700                       		beq.s	loc_15224	; if not, branch
00015F64 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00015F68 6600                       		bne.s	Obj66_Animate	; if yes, branch
00015F6A 4428 0034                  		neg.b	$34(a0)
00015F6E 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00015F74 6000                       		bra.s	Obj66_Animate
00015F76                            ; ===========================================================================
00015F76                            
00015F76                            loc_15224:
00015F76 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00015F7A                            
00015F7A                            Obj66_Animate:
00015F7A 5328 001E                  		subq.b	#1,$1E(a0)
00015F7E 6A00                       		bpl.s	locret_15246
00015F80 117C 0007 001E             		move.b	#7,$1E(a0)
00015F86 1228 0034                  		move.b	$34(a0),d1
00015F8A 1028 001A                  		move.b	$1A(a0),d0
00015F8E D001                       		add.b	d1,d0
00015F90 0200 000F                  		andi.b	#$F,d0
00015F94 1140 001A                  		move.b	d0,$1A(a0)
00015F98                            
00015F98                            locret_15246:
00015F98 4E75                       		rts	
00015F9A                            ; End of function Obj66_ChkSwitch
00015F9A                            
00015F9A                            
00015F9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F9A                            
00015F9A                            
00015F9A                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00015F9A 43F8 D000                  		lea	($FFFFD000).w,a1
00015F9E 7000                       		moveq	#0,d0
00015FA0 1028 001A                  		move.b	$1A(a0),d0
00015FA4 D040                       		add.w	d0,d0
00015FA6 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015FAA 101A                       		move.b	(a2)+,d0
00015FAC 4880                       		ext.w	d0
00015FAE D068 0008                  		add.w	8(a0),d0
00015FB2 3340 0008                  		move.w	d0,8(a1)
00015FB6 101A                       		move.b	(a2)+,d0
00015FB8 4880                       		ext.w	d0
00015FBA D068 000C                  		add.w	$C(a0),d0
00015FBE 3340 000C                  		move.w	d0,$C(a1)
00015FC2 4E75                       		rts	
00015FC4                            ; End of function Obj66_ChgPos
00015FC4                            
00015FC4                            ; ===========================================================================
00015FC4 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015FC8 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015FCC 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00015FD0 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00015FD4 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015FD8 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00015FDC 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00015FE0 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00015FE4                            ; ---------------------------------------------------------------------------
00015FE4                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015FE4                            ; ---------------------------------------------------------------------------
00015FE4                            Map_obj66:
00015FE4                            	include "_maps\obj66.asm"
00015FE4                            ; ---------------------------------------------------------------------------
00015FE4                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015FE4                            ; ---------------------------------------------------------------------------
00015FE4 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00015FE8 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00015FEC 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00015FF0 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00015FF4 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00015FF8 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00015FFC 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00016000 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00016004 0000                       		dc.w byte_154A4-Map_obj66
00016006 06                         byte_152B4:	dc.b 6
00016007 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
0001600C 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00016011 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00016016 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
0001601B 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00016020 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00016025 06                         byte_152D3:	dc.b 6
00016026 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
0001602B 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00016030 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00016035 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
0001603A 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
0001603F 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00016044 06                         byte_152F2:	dc.b 6
00016045 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
0001604A 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
0001604F 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00016054 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00016059 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
0001605E 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00016063 06                         byte_15311:	dc.b 6
00016064 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00016069 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
0001606E 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00016073 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00016078 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
0001607D 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00016082 06                         byte_15330:	dc.b 6
00016083 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00016088 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
0001608D 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00016092 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00016097 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
0001609C 200A 1800 00               		dc.b $20, $A, $18, 0, 0
000160A1 06                         byte_1534F:	dc.b 6
000160A2 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
000160A7 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
000160AC 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
000160B1 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
000160B6 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
000160BB 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
000160C0 06                         byte_1536E:	dc.b 6
000160C1 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
000160C6 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
000160CB 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
000160D0 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
000160D5 180A 1000 00               		dc.b $18, $A, $10, 0, 0
000160DA 180A 1800 18               		dc.b $18, $A, $18, 0, $18
000160DF 06                         byte_1538D:	dc.b 6
000160E0 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
000160E5 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
000160EA F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
000160EF F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
000160F4 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
000160F9 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
000160FE 06                         byte_153AC:	dc.b 6
000160FF E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00016104 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00016109 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
0001610E E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00016113 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00016118 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
0001611D 06                         byte_153CB:	dc.b 6
0001611E D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00016123 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00016128 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
0001612D DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00016132 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00016137 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
0001613C 06                         byte_153EA:	dc.b 6
0001613D D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00016142 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00016147 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
0001614C D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00016151 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00016156 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
0001615B 06                         byte_15409:	dc.b 6
0001615C D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00016161 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00016166 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
0001616B CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00016170 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00016175 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
0001617A 06                         byte_15428:	dc.b 6
0001617B D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00016180 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00016185 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
0001618A C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
0001618F E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00016194 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00016199 06                         byte_15447:	dc.b 6
0001619A D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
0001619F D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
000161A4 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
000161A9 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
000161AE E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
000161B3 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
000161B8 06                         byte_15466:	dc.b 6
000161B9 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
000161BE D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
000161C3 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
000161C8 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
000161CD E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
000161D2 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
000161D7 06                         byte_15485:	dc.b 6
000161D8 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
000161DD D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
000161E2 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
000161E7 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
000161EC F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
000161F1 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
000161F6 0C                         byte_154A4:	dc.b $C
000161F7 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
000161FC D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00016201 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00016206 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
0001620B D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00016210 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00016215 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
0001621A 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
0001621F 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00016224 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00016229 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
0001622E 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00016234 00                         		even
00016234 00                         		even
00016234                            
00016234                            ; ===========================================================================
00016234                            ; ---------------------------------------------------------------------------
00016234                            ; Object 67 - disc that	you run	around (SBZ)
00016234                            ; ---------------------------------------------------------------------------
00016234                            
00016234                            Obj67:					; XREF: Obj_Index
00016234 7000                       		moveq	#0,d0
00016236 1028 0024                  		move.b	$24(a0),d0
0001623A 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
0001623E 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00016242                            ; ===========================================================================
00016242 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00016244 0000                       		dc.w Obj67_Action-Obj67_Index
00016246                            ; ===========================================================================
00016246                            
00016246                            Obj67_Main:				; XREF: Obj67_Index
00016246 5428 0024                  		addq.b	#2,$24(a0)
0001624A 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00016252 317C C344 0002             		move.w	#$C344,2(a0)
00016258 117C 0004 0001             		move.b	#4,1(a0)
0001625E 117C 0004 0018             		move.b	#4,$18(a0)
00016264 117C 0008 0019             		move.b	#8,$19(a0)
0001626A 3168 0008 0032             		move.w	8(a0),$32(a0)
00016270 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016276 117C 0018 0034             		move.b	#$18,$34(a0)
0001627C 117C 0048 0038             		move.b	#$48,$38(a0)
00016282 1228 0028                  		move.b	$28(a0),d1	; get object type
00016286 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
0001628A 6700                       		beq.s	loc_15546
0001628C 117C 0010 0034             		move.b	#$10,$34(a0)
00016292 117C 0038 0038             		move.b	#$38,$38(a0)
00016298                            
00016298                            loc_15546:
00016298 1228 0028                  		move.b	$28(a0),d1	; get object type
0001629C 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000162A0 4881                       		ext.w	d1
000162A2 E741                       		asl.w	#3,d1
000162A4 3141 0036                  		move.w	d1,$36(a0)
000162A8 1028 0022                  		move.b	$22(a0),d0
000162AC E418                       		ror.b	#2,d0
000162AE 0200 00C0                  		andi.b	#-$40,d0
000162B2 1140 0026                  		move.b	d0,$26(a0)
000162B6                            
000162B6                            Obj67_Action:				; XREF: Obj67_Index
000162B6 6100 0000                  		bsr.w	Obj67_MoveSonic
000162BA 6100 0000                  		bsr.w	Obj67_MoveSpot
000162BE 6000 0000                  		bra.w	Obj67_ChkDel
000162C2                            ; ===========================================================================
000162C2                            
000162C2                            Obj67_MoveSonic:			; XREF: Obj67_Action
000162C2 7400                       		moveq	#0,d2
000162C4 1428 0038                  		move.b	$38(a0),d2
000162C8 3602                       		move.w	d2,d3
000162CA D643                       		add.w	d3,d3
000162CC 43F8 D000                  		lea	($FFFFD000).w,a1
000162D0 3029 0008                  		move.w	8(a1),d0
000162D4 9068 0032                  		sub.w	$32(a0),d0
000162D8 D042                       		add.w	d2,d0
000162DA B043                       		cmp.w	d3,d0
000162DC 6400                       		bcc.s	loc_155A8
000162DE 3229 000C                  		move.w	$C(a1),d1
000162E2 9268 0030                  		sub.w	$30(a0),d1
000162E6 D242                       		add.w	d2,d1
000162E8 B243                       		cmp.w	d3,d1
000162EA 6400                       		bcc.s	loc_155A8
000162EC 0829 0001 0022             		btst	#1,$22(a1)
000162F2 6700                       		beq.s	loc_155B8
000162F4 4228 003A                  		clr.b	$3A(a0)
000162F8 4E75                       		rts	
000162FA                            ; ===========================================================================
000162FA                            
000162FA                            loc_155A8:
000162FA 4A28 003A                  		tst.b	$3A(a0)
000162FE 6700                       		beq.s	locret_155B6
00016300 4229 0038                  		clr.b	$38(a1)
00016304 4228 003A                  		clr.b	$3A(a0)
00016308                            
00016308                            locret_155B6:
00016308 4E75                       		rts	
0001630A                            ; ===========================================================================
0001630A                            
0001630A                            loc_155B8:
0001630A 4A28 003A                  		tst.b	$3A(a0)
0001630E 6600                       		bne.s	loc_155E2
00016310 117C 0001 003A             		move.b	#1,$3A(a0)
00016316 0829 0002 0022             		btst	#2,$22(a1)
0001631C 6600                       		bne.s	loc_155D0
0001631E 4229 001C                  		clr.b	$1C(a1)
00016322                            
00016322                            loc_155D0:
00016322 08A9 0005 0022             		bclr	#5,$22(a1)
00016328 137C 0001 001D             		move.b	#1,$1D(a1)
0001632E 137C 0001 0038             		move.b	#1,$38(a1)
00016334                            
00016334                            loc_155E2:
00016334 3029 0014                  		move.w	$14(a1),d0
00016338 4A68 0036                  		tst.w	$36(a0)
0001633C 6A00                       		bpl.s	loc_15608
0001633E 0C40 FC00                  		cmpi.w	#-$400,d0
00016342 6F00                       		ble.s	loc_155FA
00016344 337C FC00 0014             		move.w	#-$400,$14(a1)
0001634A 4E75                       		rts	
0001634C                            ; ===========================================================================
0001634C                            
0001634C                            loc_155FA:
0001634C 0C40 F100                  		cmpi.w	#-$F00,d0
00016350 6C00                       		bge.s	locret_15606
00016352 337C F100 0014             		move.w	#-$F00,$14(a1)
00016358                            
00016358                            locret_15606:
00016358 4E75                       		rts	
0001635A                            ; ===========================================================================
0001635A                            
0001635A                            loc_15608:
0001635A 0C40 0400                  		cmpi.w	#$400,d0
0001635E 6C00                       		bge.s	loc_15616
00016360 337C 0400 0014             		move.w	#$400,$14(a1)
00016366 4E75                       		rts	
00016368                            ; ===========================================================================
00016368                            
00016368                            loc_15616:
00016368 0C40 0F00                  		cmpi.w	#$F00,d0
0001636C 6F00                       		ble.s	locret_15622
0001636E 337C 0F00 0014             		move.w	#$F00,$14(a1)
00016374                            
00016374                            locret_15622:
00016374 4E75                       		rts	
00016376                            ; ===========================================================================
00016376                            
00016376                            Obj67_MoveSpot:				; XREF: Obj67_Action
00016376 3028 0036                  		move.w	$36(a0),d0
0001637A D168 0026                  		add.w	d0,$26(a0)
0001637E 1028 0026                  		move.b	$26(a0),d0
00016382 4EB9 0000 2D80             		jsr	(CalcSine).l
00016388 3428 0030                  		move.w	$30(a0),d2
0001638C 3628 0032                  		move.w	$32(a0),d3
00016390 7800                       		moveq	#0,d4
00016392 1828 0034                  		move.b	$34(a0),d4
00016396 E14C                       		lsl.w	#8,d4
00016398 2A04                       		move.l	d4,d5
0001639A C9C0                       		muls.w	d0,d4
0001639C 4844                       		swap	d4
0001639E CBC1                       		muls.w	d1,d5
000163A0 4845                       		swap	d5
000163A2 D842                       		add.w	d2,d4
000163A4 DA43                       		add.w	d3,d5
000163A6 3144 000C                  		move.w	d4,$C(a0)
000163AA 3145 0008                  		move.w	d5,8(a0)
000163AE 4E75                       		rts	
000163B0                            ; ===========================================================================
000163B0                            
000163B0                            Obj67_ChkDel:				; XREF: Obj67_Action
000163B0 3028 0032                  		move.w	$32(a0),d0
000163B4 0240 FF80                  		andi.w	#-$80,d0
000163B8 3238 F700                  		move.w	($FFFFF700).w,d1
000163BC 0441 0080                  		subi.w	#$80,d1
000163C0 0241 FF80                  		andi.w	#-$80,d1
000163C4 9041                       		sub.w	d1,d0
000163C6 0C40 0280                  		cmpi.w	#$280,d0
000163CA 6200                       		bhi.s	Obj67_Delete
000163CC 4EF9 0000 E2A2             		jmp	DisplaySprite
000163D2                            ; ===========================================================================
000163D2                            
000163D2                            Obj67_Delete:
000163D2 4EF9 0000 E2DE             		jmp	DeleteObject
000163D8                            ; ===========================================================================
000163D8                            ; ---------------------------------------------------------------------------
000163D8                            ; Sprite mappings - disc that you run around (SBZ)
000163D8                            ; (It's just a small blob that moves around in a circle. The disc itself is
000163D8                            ; part of the level tiles.)
000163D8                            ; ---------------------------------------------------------------------------
000163D8                            Map_obj67:
000163D8                            	include "_maps\obj67.asm"
000163D8                            ; ---------------------------------------------------------------------------
000163D8                            ; Sprite mappings - disc that you run around (SBZ)
000163D8                            ; (It's just a small blob that moves around in a circle. The disc itself is
000163D8                            ; part of the level tiles.)
000163D8                            ; ---------------------------------------------------------------------------
000163D8 0000                       		dc.w byte_15688-Map_obj67
000163DA 01                         byte_15688:	dc.b 1
000163DB F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000163E0                            		even
000163E0                            		even
000163E0                            
000163E0                            ; ===========================================================================
000163E0                            ; ---------------------------------------------------------------------------
000163E0                            ; Object 68 - conveyor belts (SBZ)
000163E0                            ; ---------------------------------------------------------------------------
000163E0                            
000163E0                            Obj68:					; XREF: Obj_Index
000163E0 7000                       		moveq	#0,d0
000163E2 1028 0024                  		move.b	$24(a0),d0
000163E6 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
000163EA 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
000163EE                            ; ===========================================================================
000163EE 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
000163F0 0000                       		dc.w Obj68_Action-Obj68_Index
000163F2                            ; ===========================================================================
000163F2                            
000163F2                            Obj68_Main:				; XREF: Obj68_Index
000163F2 5428 0024                  		addq.b	#2,$24(a0)
000163F6 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
000163FC 1228 0028                  		move.b	$28(a0),d1	; get object type
00016400 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00016404 6700                       		beq.s	loc_156BA	; if zero, branch
00016406 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
0001640C                            
0001640C                            loc_156BA:
0001640C 1228 0028                  		move.b	$28(a0),d1	; get object type
00016410 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00016414 4881                       		ext.w	d1
00016416 E841                       		asr.w	#4,d1
00016418 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
0001641C                            
0001641C                            Obj68_Action:				; XREF: Obj68_Index
0001641C 6100                       		bsr.s	Obj68_MoveSonic
0001641E 3028 0008                  		move.w	8(a0),d0
00016422 0240 FF80                  		andi.w	#$FF80,d0
00016426 3238 F700                  		move.w	($FFFFF700).w,d1
0001642A 0441 0080                  		subi.w	#$80,d1
0001642E 0241 FF80                  		andi.w	#$FF80,d1
00016432 9041                       		sub.w	d1,d0
00016434 0C40 0280                  		cmpi.w	#$280,d0
00016438 6200                       		bhi.s	Obj68_Delete
0001643A 4E75                       		rts	
0001643C                            ; ===========================================================================
0001643C                            
0001643C                            Obj68_Delete:
0001643C 4EF9 0000 E2DE             		jmp	DeleteObject
00016442                            ; ===========================================================================
00016442                            
00016442                            Obj68_MoveSonic:			; XREF: Obj68_Action
00016442 7400                       		moveq	#0,d2
00016444 1428 0038                  		move.b	$38(a0),d2
00016448 3602                       		move.w	d2,d3
0001644A D643                       		add.w	d3,d3
0001644C 43F8 D000                  		lea	($FFFFD000).w,a1
00016450 3029 0008                  		move.w	8(a1),d0
00016454 9068 0008                  		sub.w	8(a0),d0
00016458 D042                       		add.w	d2,d0
0001645A B043                       		cmp.w	d3,d0
0001645C 6400                       		bcc.s	locret_1572E
0001645E 3229 000C                  		move.w	$C(a1),d1
00016462 9268 000C                  		sub.w	$C(a0),d1
00016466 0641 0030                  		addi.w	#$30,d1
0001646A 0C41 0030                  		cmpi.w	#$30,d1
0001646E 6400                       		bcc.s	locret_1572E
00016470 0829 0001 0022             		btst	#1,$22(a1)
00016476 6600                       		bne.s	locret_1572E
00016478 3028 0036                  		move.w	$36(a0),d0
0001647C D169 0008                  		add.w	d0,8(a1)
00016480                            
00016480                            locret_1572E:
00016480 4E75                       		rts	
00016482                            
00016482                            ; ===========================================================================
00016482                            ; ---------------------------------------------------------------------------
00016482                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00016482                            ; ---------------------------------------------------------------------------
00016482                            
00016482                            Obj69:					; XREF: Obj_Index
00016482 7000                       		moveq	#0,d0
00016484 1028 0024                  		move.b	$24(a0),d0
00016488 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
0001648C 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00016490                            ; ===========================================================================
00016490 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00016492 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00016494 0000                       		dc.w Obj69_Spinner-Obj69_Index
00016496                            ; ===========================================================================
00016496                            
00016496                            Obj69_Main:				; XREF: Obj69_Index
00016496 5428 0024                  		addq.b	#2,$24(a0)
0001649A 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
000164A2 317C 4492 0002             		move.w	#$4492,2(a0)
000164A8 0028 0004 0001             		ori.b	#4,1(a0)
000164AE 117C 0080 0019             		move.b	#$80,$19(a0)
000164B4 7000                       		moveq	#0,d0
000164B6 1028 0028                  		move.b	$28(a0),d0
000164BA 0240 000F                  		andi.w	#$F,d0
000164BE C0FC 003C                  		mulu.w	#$3C,d0
000164C2 3140 0032                  		move.w	d0,$32(a0)
000164C6 4A28 0028                  		tst.b	$28(a0)
000164CA 6A00                       		bpl.s	Obj69_Trapdoor
000164CC 5428 0024                  		addq.b	#2,$24(a0)
000164D0 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
000164D8 317C 04DF 0002             		move.w	#$4DF,2(a0)
000164DE 117C 0010 0019             		move.b	#$10,$19(a0)
000164E4 117C 0002 001C             		move.b	#2,$1C(a0)
000164EA 7000                       		moveq	#0,d0
000164EC 1028 0028                  		move.b	$28(a0),d0	; get object type
000164F0 3200                       		move.w	d0,d1
000164F2 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000164F6 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
000164FA 3140 0030                  		move.w	d0,$30(a0)	; set time delay
000164FE 3140 0032                  		move.w	d0,$32(a0)
00016502 0241 0070                  		andi.w	#$70,d1
00016506 0641 0010                  		addi.w	#$10,d1
0001650A E549                       		lsl.w	#2,d1
0001650C 5341                       		subq.w	#1,d1
0001650E 3141 0036                  		move.w	d1,$36(a0)
00016512 6000                       		bra.s	Obj69_Spinner
00016514                            ; ===========================================================================
00016514                            
00016514                            Obj69_Trapdoor:				; XREF: Obj69_Index
00016514 5368 0030                  		subq.w	#1,$30(a0)
00016518 6A00                       		bpl.s	Obj69_Animate
0001651A 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016520 0868 0000 001C             		bchg	#0,$1C(a0)
00016526 4A28 0001                  		tst.b	1(a0)
0001652A 6A00                       		bpl.s	Obj69_Animate
0001652C 303C 00BB                  		move.w	#$BB,d0
00016530 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play door sound
00016536                            
00016536                            Obj69_Animate:
00016536 43F9 0000 0000             		lea	(Ani_obj69).l,a1
0001653C 4EB9 0000 B2FA             		jsr	AnimateSprite
00016542 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00016546 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00016548 323C 004B                  		move.w	#$4B,d1
0001654C 343C 000C                  		move.w	#$C,d2
00016550 3602                       		move.w	d2,d3
00016552 5243                       		addq.w	#1,d3
00016554 3828 0008                  		move.w	8(a0),d4
00016558 6100 A112                  		bsr.w	SolidObject
0001655C 6000 9DE6                  		bra.w	MarkObjGone
00016560                            ; ===========================================================================
00016560                            
00016560                            Obj69_NotSolid:
00016560 0828 0003 0022             		btst	#3,$22(a0)
00016566 6700                       		beq.s	Obj69_Display
00016568 43F8 D000                  		lea	($FFFFD000).w,a1
0001656C 08A9 0003 0022             		bclr	#3,$22(a1)
00016572 08A8 0003 0022             		bclr	#3,$22(a0)
00016578 4228 0025                  		clr.b	$25(a0)
0001657C                            
0001657C                            Obj69_Display:
0001657C 6000 9DC6                  		bra.w	MarkObjGone
00016580                            ; ===========================================================================
00016580                            
00016580                            Obj69_Spinner:				; XREF: Obj69_Index
00016580 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016584 C068 0036                  		and.w	$36(a0),d0
00016588 6600                       		bne.s	Obj69_Delay
0001658A 117C 0001 0034             		move.b	#1,$34(a0)
00016590                            
00016590                            Obj69_Delay:
00016590 4A28 0034                  		tst.b	$34(a0)
00016594 6700                       		beq.s	Obj69_Animate2
00016596 5368 0030                  		subq.w	#1,$30(a0)
0001659A 6A00                       		bpl.s	Obj69_Animate2
0001659C 3168 0032 0030             		move.w	$32(a0),$30(a0)
000165A2 4228 0034                  		clr.b	$34(a0)
000165A6 0868 0000 001C             		bchg	#0,$1C(a0)
000165AC                            
000165AC                            Obj69_Animate2:
000165AC 43F9 0000 0000             		lea	(Ani_obj69).l,a1
000165B2 4EB9 0000 B2FA             		jsr	AnimateSprite
000165B8 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
000165BC 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
000165BE 323C 001B                  		move.w	#$1B,d1
000165C2 343C 0007                  		move.w	#7,d2
000165C6 3602                       		move.w	d2,d3
000165C8 5243                       		addq.w	#1,d3
000165CA 3828 0008                  		move.w	8(a0),d4
000165CE 6100 A09C                  		bsr.w	SolidObject
000165D2 6000 9D70                  		bra.w	MarkObjGone
000165D6                            ; ===========================================================================
000165D6                            
000165D6                            Obj69_NotSolid2:
000165D6 0828 0003 0022             		btst	#3,$22(a0)
000165DC 6700                       		beq.s	Obj69_Display2
000165DE 43F8 D000                  		lea	($FFFFD000).w,a1
000165E2 08A9 0003 0022             		bclr	#3,$22(a1)
000165E8 08A8 0003 0022             		bclr	#3,$22(a0)
000165EE 4228 0025                  		clr.b	$25(a0)
000165F2                            
000165F2                            Obj69_Display2:
000165F2 6000 9D50                  		bra.w	MarkObjGone
000165F6                            ; ===========================================================================
000165F6                            Ani_obj69:
000165F6                            	include "_anim\obj69.asm"
000165F6                            ; ---------------------------------------------------------------------------
000165F6                            ; Animation script - trapdoor (SBZ)
000165F6                            ; ---------------------------------------------------------------------------
000165F6 0000                       		dc.w byte_158AC-Ani_obj69
000165F8 0000                       		dc.w byte_158B2-Ani_obj69
000165FA 0000                       		dc.w byte_158B8-Ani_obj69
000165FC 0000                       		dc.w byte_158CC-Ani_obj69
000165FE 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00016604 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
0001660A 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016617 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
0001661E 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0001662B 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00016632                            		even
00016632                            		even
00016632                            
00016632                            ; ---------------------------------------------------------------------------
00016632                            ; Sprite mappings - trapdoor (SBZ)
00016632                            ; ---------------------------------------------------------------------------
00016632                            Map_obj69:
00016632                            	include "_maps\obj69.asm"
00016632                            ; ---------------------------------------------------------------------------
00016632                            ; Sprite mappings - trapdoor (SBZ)
00016632                            ; ---------------------------------------------------------------------------
00016632 0000                       		dc.w byte_158E6-Map_obj69
00016634 0000                       		dc.w byte_158FB-Map_obj69
00016636 0000                       		dc.w byte_15924-Map_obj69
00016638 04                         byte_158E6:	dc.b 4
00016639 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
0001663E F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00016643 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00016648 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
0001664D 08                         byte_158FB:	dc.b 8
0001664E F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00016653 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00016658 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
0001665D 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00016662 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00016667 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
0001666C 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00016671 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00016676 04                         byte_15924:	dc.b 4
00016677 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
0001667C 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00016681 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00016686 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
0001668C 00                         		even
0001668C 00                         		even
0001668C                            
0001668C                            ; ---------------------------------------------------------------------------
0001668C                            ; Sprite mappings - spinning platforms (SBZ)
0001668C                            ; ---------------------------------------------------------------------------
0001668C                            Map_obj69a:
0001668C                            	include "_maps\obj69a.asm"
0001668C                            ; ---------------------------------------------------------------------------
0001668C                            ; Sprite mappings - spinning platforms (SBZ)
0001668C                            ; ---------------------------------------------------------------------------
0001668C 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00016690 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00016694 0000                       		dc.w byte_15970-Map_obj69a
00016696 02                         byte_15944:	dc.b 2
00016697 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0001669C F805 0800 00               		dc.b $F8, 5, 8,	0, 0
000166A1 02                         byte_1594F:	dc.b 2
000166A2 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
000166A7 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
000166AC 02                         byte_1595A:	dc.b 2
000166AD F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
000166B2 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
000166B7 02                         byte_15965:	dc.b 2
000166B8 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
000166BD 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
000166C2 02                         byte_15970:	dc.b 2
000166C3 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
000166C8 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
000166CE 00                         		even
000166CE 00                         		even
000166CE                            
000166CE                            ; ===========================================================================
000166CE                            ; ---------------------------------------------------------------------------
000166CE                            ; Object 6A - ground saws and pizza cutters (SBZ)
000166CE                            ; ---------------------------------------------------------------------------
000166CE                            
000166CE                            Obj6A:					; XREF: Obj_Index
000166CE 7000                       		moveq	#0,d0
000166D0 1028 0024                  		move.b	$24(a0),d0
000166D4 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
000166D8 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
000166DC                            ; ===========================================================================
000166DC 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
000166DE 0000                       		dc.w Obj6A_Action-Obj6A_Index
000166E0                            ; ===========================================================================
000166E0                            
000166E0                            Obj6A_Main:				; XREF: Obj6A_Index
000166E0 5428 0024                  		addq.b	#2,$24(a0)
000166E4 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
000166EC 317C 43B5 0002             		move.w	#$43B5,2(a0)
000166F2 117C 0004 0001             		move.b	#4,1(a0)
000166F8 117C 0004 0018             		move.b	#4,$18(a0)
000166FE 117C 0020 0019             		move.b	#$20,$19(a0)
00016704 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001670A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00016710 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00016716 6400                       		bcc.s	Obj6A_Action
00016718 117C 00A2 0020             		move.b	#$A2,$20(a0)
0001671E                            
0001671E                            Obj6A_Action:				; XREF: Obj6A_Index
0001671E 7000                       		moveq	#0,d0
00016720 1028 0028                  		move.b	$28(a0),d0
00016724 0240 0007                  		andi.w	#7,d0
00016728 D040                       		add.w	d0,d0
0001672A 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
0001672E 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00016732 3028 003A                  		move.w	$3A(a0),d0
00016736 0240 FF80                  		andi.w	#$FF80,d0
0001673A 3238 F700                  		move.w	($FFFFF700).w,d1
0001673E 0441 0080                  		subi.w	#$80,d1
00016742 0241 FF80                  		andi.w	#$FF80,d1
00016746 9041                       		sub.w	d1,d0
00016748 0C40 0280                  		cmpi.w	#$280,d0
0001674C 6200                       		bhi.s	Obj6A_Delete
0001674E 4EF9 0000 E2A2             		jmp	DisplaySprite
00016754                            ; ===========================================================================
00016754                            
00016754                            Obj6A_Delete:
00016754 4EF9 0000 E2DE             		jmp	DeleteObject
0001675A                            ; ===========================================================================
0001675A 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
0001675E 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00016762 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00016764                            ; ===========================================================================
00016764                            
00016764                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00016764 4E75                       		rts	
00016766                            ; ===========================================================================
00016766                            
00016766                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00016766 323C 0060                  		move.w	#$60,d1
0001676A 7000                       		moveq	#0,d0
0001676C 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00016770 0828 0000 0022             		btst	#0,$22(a0)
00016776 6700                       		beq.s	Obj6A_Animate01
00016778 4440                       		neg.w	d0
0001677A D041                       		add.w	d1,d0
0001677C                            
0001677C                            Obj6A_Animate01:
0001677C 3228 003A                  		move.w	$3A(a0),d1
00016780 9240                       		sub.w	d0,d1
00016782 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00016786 5328 001E                  		subq.b	#1,$1E(a0)
0001678A 6A00                       		bpl.s	loc_15A46
0001678C 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00016792 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00016798                            
00016798                            loc_15A46:
00016798 4A28 0001                  		tst.b	1(a0)
0001679C 6A00                       		bpl.s	locret_15A60
0001679E 3038 FE04                  		move.w	($FFFFFE04).w,d0
000167A2 0240 000F                  		andi.w	#$F,d0
000167A6 6600                       		bne.s	locret_15A60
000167A8 303C 00B0                  		move.w	#$B0,d0
000167AC 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play saw sound
000167B2                            
000167B2                            locret_15A60:
000167B2 4E75                       		rts	
000167B4                            ; ===========================================================================
000167B4                            
000167B4                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
000167B4 323C 0030                  		move.w	#$30,d1
000167B8 7000                       		moveq	#0,d0
000167BA 1038 FE64                  		move.b	($FFFFFE64).w,d0
000167BE 0828 0000 0022             		btst	#0,$22(a0)
000167C4 6700                       		beq.s	Obj6A_Animate02
000167C6 4440                       		neg.w	d0
000167C8 0640 0080                  		addi.w	#$80,d0
000167CC                            
000167CC                            Obj6A_Animate02:
000167CC 3228 0038                  		move.w	$38(a0),d1
000167D0 9240                       		sub.w	d0,d1
000167D2 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
000167D6 5328 001E                  		subq.b	#1,$1E(a0)
000167DA 6A00                       		bpl.s	loc_15A96
000167DC 117C 0002 001E             		move.b	#2,$1E(a0)
000167E2 0868 0000 001A             		bchg	#0,$1A(a0)
000167E8                            
000167E8                            loc_15A96:
000167E8 4A28 0001                  		tst.b	1(a0)
000167EC 6A00                       		bpl.s	locret_15AB0
000167EE 1038 FE64                  		move.b	($FFFFFE64).w,d0
000167F2 0C00 0018                  		cmpi.b	#$18,d0
000167F6 6600                       		bne.s	locret_15AB0
000167F8 303C 00B0                  		move.w	#$B0,d0
000167FC 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play saw sound
00016802                            
00016802                            locret_15AB0:
00016802 4E75                       		rts	
00016804                            ; ===========================================================================
00016804                            
00016804                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
00016804 4A28 003D                  		tst.b	$3D(a0)
00016808 6600                       		bne.s	Obj6A_Animate03
0001680A 3038 D008                  		move.w	($FFFFD008).w,d0
0001680E 0440 00C0                  		subi.w	#$C0,d0
00016812 6500                       		bcs.s	loc_15B02
00016814 9068 0008                  		sub.w	8(a0),d0
00016818 6500                       		bcs.s	loc_15B02
0001681A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001681E 0440 0080                  		subi.w	#$80,d0
00016822 B068 000C                  		cmp.w	$C(a0),d0
00016826 6400                       		bcc.s	locret_15B04
00016828 0640 0100                  		addi.w	#$100,d0
0001682C B068 000C                  		cmp.w	$C(a0),d0
00016830 6500                       		bcs.s	locret_15B04
00016832 117C 0001 003D             		move.b	#1,$3D(a0)
00016838 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
0001683E 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016844 117C 0002 001A             		move.b	#2,$1A(a0)
0001684A 303C 00B0                  		move.w	#$B0,d0
0001684E 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play saw sound
00016854                            
00016854                            loc_15B02:
00016854 588F                       		addq.l	#4,sp
00016856                            
00016856                            locret_15B04:
00016856 4E75                       		rts	
00016858                            ; ===========================================================================
00016858                            
00016858                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
00016858 4EB9 0000 E268             		jsr	SpeedToPos
0001685E 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016864 5328 001E                  		subq.b	#1,$1E(a0)
00016868 6A00                       		bpl.s	locret_15B24
0001686A 117C 0002 001E             		move.b	#2,$1E(a0)
00016870 0868 0000 001A             		bchg	#0,$1A(a0)
00016876                            
00016876                            locret_15B24:
00016876 4E75                       		rts	
00016878                            ; ===========================================================================
00016878                            
00016878                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00016878 4A28 003D                  		tst.b	$3D(a0)
0001687C 6600                       		bne.s	Obj6A_Animate04
0001687E 3038 D008                  		move.w	($FFFFD008).w,d0
00016882 0640 00E0                  		addi.w	#$E0,d0
00016886 9068 0008                  		sub.w	8(a0),d0
0001688A 6400                       		bcc.s	loc_15B74
0001688C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016890 0440 0080                  		subi.w	#$80,d0
00016894 B068 000C                  		cmp.w	$C(a0),d0
00016898 6400                       		bcc.s	locret_15B76
0001689A 0640 0100                  		addi.w	#$100,d0
0001689E B068 000C                  		cmp.w	$C(a0),d0
000168A2 6500                       		bcs.s	locret_15B76
000168A4 117C 0001 003D             		move.b	#1,$3D(a0)
000168AA 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
000168B0 117C 00A2 0020             		move.b	#$A2,$20(a0)
000168B6 117C 0002 001A             		move.b	#2,$1A(a0)
000168BC 303C 00B0                  		move.w	#$B0,d0
000168C0 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play saw sound
000168C6                            
000168C6                            loc_15B74:
000168C6 588F                       		addq.l	#4,sp
000168C8                            
000168C8                            locret_15B76:
000168C8 4E75                       		rts	
000168CA                            ; ===========================================================================
000168CA                            
000168CA                            Obj6A_Animate04:
000168CA 4EB9 0000 E268             		jsr	SpeedToPos
000168D0 3168 0008 003A             		move.w	8(a0),$3A(a0)
000168D6 5328 001E                  		subq.b	#1,$1E(a0)
000168DA 6A00                       		bpl.s	locret_15B96
000168DC 117C 0002 001E             		move.b	#2,$1E(a0)
000168E2 0868 0000 001A             		bchg	#0,$1A(a0)
000168E8                            
000168E8                            locret_15B96:
000168E8 4E75                       		rts	
000168EA                            ; ===========================================================================
000168EA                            ; ---------------------------------------------------------------------------
000168EA                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000168EA                            ; ---------------------------------------------------------------------------
000168EA                            Map_obj6A:
000168EA                            	include "_maps\obj6A.asm"
000168EA                            ; ---------------------------------------------------------------------------
000168EA                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000168EA                            ; ---------------------------------------------------------------------------
000168EA 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
000168EE 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
000168F2 07                         byte_15BA0:	dc.b 7
000168F3 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000168F8 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000168FD E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00016902 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00016907 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
0001690C 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00016911 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00016916 07                         byte_15BC4:	dc.b 7
00016917 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
0001691C D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016921 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00016926 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
0001692B E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00016930 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016935 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
0001693A 04                         byte_15BE8:	dc.b 4
0001693B E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00016940 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00016945 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
0001694A 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
0001694F 04                         byte_15BFD:	dc.b 4
00016950 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00016955 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
0001695A 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
0001695F 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016964                            		even
00016964                            		even
00016964                            
00016964                            ; ===========================================================================
00016964                            ; ---------------------------------------------------------------------------
00016964                            ; Object 6B - stomper (SBZ)
00016964                            ; ---------------------------------------------------------------------------
00016964                            
00016964                            Obj6B:					; XREF: Obj_Index
00016964 7000                       		moveq	#0,d0
00016966 1028 0024                  		move.b	$24(a0),d0
0001696A 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
0001696E 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00016972                            ; ===========================================================================
00016972 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00016974 0000                       		dc.w Obj6B_Action-Obj6B_Index
00016976                            
00016976 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
0001697A 1C20 3803                  		dc.b  $1C, $20,	$38,   3
0001697E 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00016982 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00016986 8040 0005                  		dc.b  $80, $40,	  0,   5
0001698A                            ; ===========================================================================
0001698A                            
0001698A                            Obj6B_Main:				; XREF: Obj6B_Index
0001698A 5428 0024                  		addq.b	#2,$24(a0)
0001698E 7000                       		moveq	#0,d0
00016990 1028 0028                  		move.b	$28(a0),d0
00016994 E448                       		lsr.w	#2,d0
00016996 0240 001C                  		andi.w	#$1C,d0
0001699A 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
0001699E 115B 0019                  		move.b	(a3)+,$19(a0)
000169A2 115B 0016                  		move.b	(a3)+,$16(a0)
000169A6 E448                       		lsr.w	#2,d0
000169A8 1140 001A                  		move.b	d0,$1A(a0)
000169AC 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
000169B4 317C 22C0 0002             		move.w	#$22C0,2(a0)
000169BA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
000169C0 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
000169C2 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
000169C8 6700                       		beq.s	Obj6B_SBZ3
000169CA                            
000169CA                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
000169CA 45F8 FC00                  		lea	($FFFFFC00).w,a2
000169CE 7000                       		moveq	#0,d0
000169D0 1028 0023                  		move.b	$23(a0),d0
000169D4 6700                       		beq.s	Obj6B_Delete
000169D6 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000169DC                            
000169DC                            Obj6B_Delete:
000169DC 4EF9 0000 E2DE             		jmp	DeleteObject
000169E2                            ; ===========================================================================
000169E2                            
000169E2                            Obj6B_SBZ3:				; XREF: Obj6B_Main
000169E2 317C 41F0 0002             		move.w	#$41F0,2(a0)
000169E8 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
000169EE 6600                       		bne.s	Obj6B_SBZ12
000169F0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000169F4 7000                       		moveq	#0,d0
000169F6 1028 0023                  		move.b	$23(a0),d0
000169FA 6700                       		beq.s	Obj6B_SBZ12
000169FC 0832 0000 0002             		btst	#0,2(a2,d0.w)
00016A02 6700                       		beq.s	Obj6B_SBZ12
00016A04 4238 F7CB                  		clr.b	($FFFFF7CB).w
00016A08 60C0                       		bra.s	Obj6B_ChkGone
00016A0A                            ; ===========================================================================
00016A0A                            
00016A0A                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00016A0A 0028 0004 0001             		ori.b	#4,1(a0)
00016A10 117C 0004 0018             		move.b	#4,$18(a0)
00016A16 3168 0008 0034             		move.w	8(a0),$34(a0)
00016A1C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016A22 7000                       		moveq	#0,d0
00016A24 101B                       		move.b	(a3)+,d0
00016A26 3140 003C                  		move.w	d0,$3C(a0)
00016A2A 7000                       		moveq	#0,d0
00016A2C 1028 0028                  		move.b	$28(a0),d0
00016A30 6A00                       		bpl.s	Obj6B_Action
00016A32 0200 000F                  		andi.b	#$F,d0
00016A36 1140 003E                  		move.b	d0,$3E(a0)
00016A3A 1153 0028                  		move.b	(a3),$28(a0)
00016A3E 0C13 0005                  		cmpi.b	#5,(a3)
00016A42 6600                       		bne.s	Obj6B_ChkGone2
00016A44 08E8 0004 0001             		bset	#4,1(a0)
00016A4A                            
00016A4A                            Obj6B_ChkGone2:
00016A4A 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016A4E 7000                       		moveq	#0,d0
00016A50 1028 0023                  		move.b	$23(a0),d0
00016A54 6700                       		beq.s	Obj6B_Action
00016A56 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016A5C                            
00016A5C                            Obj6B_Action:				; XREF: Obj6B_Index
00016A5C 3F28 0008                  		move.w	8(a0),-(sp)
00016A60 7000                       		moveq	#0,d0
00016A62 1028 0028                  		move.b	$28(a0),d0
00016A66 0240 000F                  		andi.w	#$F,d0
00016A6A D040                       		add.w	d0,d0
00016A6C 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00016A70 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00016A74 381F                       		move.w	(sp)+,d4
00016A76 4A28 0001                  		tst.b	1(a0)
00016A7A 6A00                       		bpl.s	Obj6B_ChkDel
00016A7C 7200                       		moveq	#0,d1
00016A7E 1228 0019                  		move.b	$19(a0),d1
00016A82 0641 000B                  		addi.w	#$B,d1
00016A86 7400                       		moveq	#0,d2
00016A88 1428 0016                  		move.b	$16(a0),d2
00016A8C 3602                       		move.w	d2,d3
00016A8E 5243                       		addq.w	#1,d3
00016A90 6100 9BDA                  		bsr.w	SolidObject
00016A94                            
00016A94                            Obj6B_ChkDel:
00016A94 3028 0034                  		move.w	$34(a0),d0
00016A98 0240 FF80                  		andi.w	#$FF80,d0
00016A9C 3238 F700                  		move.w	($FFFFF700).w,d1
00016AA0 0441 0080                  		subi.w	#$80,d1
00016AA4 0241 FF80                  		andi.w	#$FF80,d1
00016AA8 9041                       		sub.w	d1,d0
00016AAA 0C40 0280                  		cmpi.w	#$280,d0
00016AAE 6200                       		bhi.s	loc_15D64
00016AB0 4EF9 0000 E2A2             		jmp	DisplaySprite
00016AB6                            ; ===========================================================================
00016AB6                            
00016AB6                            loc_15D64:
00016AB6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00016ABC 6600                       		bne.s	Obj6B_Delete2
00016ABE 4238 F7CB                  		clr.b	($FFFFF7CB).w
00016AC2 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016AC6 7000                       		moveq	#0,d0
00016AC8 1028 0023                  		move.b	$23(a0),d0
00016ACC 6700                       		beq.s	Obj6B_Delete2
00016ACE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016AD4                            
00016AD4                            Obj6B_Delete2:
00016AD4 4EF9 0000 E2DE             		jmp	DeleteObject
00016ADA                            ; ===========================================================================
00016ADA 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00016ADE 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00016AE2 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00016AE6                            ; ===========================================================================
00016AE6                            
00016AE6                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00016AE6 4E75                       		rts	
00016AE8                            ; ===========================================================================
00016AE8                            
00016AE8                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00016AE8 4A28 0038                  		tst.b	$38(a0)
00016AEC 6600                       		bne.s	loc_15DB4
00016AEE 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016AF2 7000                       		moveq	#0,d0
00016AF4 1028 003E                  		move.b	$3E(a0),d0
00016AF8 0832 0000 0000             		btst	#0,(a2,d0.w)
00016AFE 6700                       		beq.s	loc_15DC2
00016B00 117C 0001 0038             		move.b	#1,$38(a0)
00016B06                            
00016B06                            loc_15DB4:
00016B06 3028 003C                  		move.w	$3C(a0),d0
00016B0A B068 003A                  		cmp.w	$3A(a0),d0
00016B0E 6700                       		beq.s	loc_15DE0
00016B10 5468 003A                  		addq.w	#2,$3A(a0)
00016B14                            
00016B14                            loc_15DC2:
00016B14 3028 003A                  		move.w	$3A(a0),d0
00016B18 0828 0000 0022             		btst	#0,$22(a0)
00016B1E 6700                       		beq.s	loc_15DD4
00016B20 4440                       		neg.w	d0
00016B22 0640 0080                  		addi.w	#$80,d0
00016B26                            
00016B26                            loc_15DD4:
00016B26 3228 0034                  		move.w	$34(a0),d1
00016B2A 9240                       		sub.w	d0,d1
00016B2C 3141 0008                  		move.w	d1,8(a0)
00016B30 4E75                       		rts	
00016B32                            ; ===========================================================================
00016B32                            
00016B32                            loc_15DE0:
00016B32 5228 0028                  		addq.b	#1,$28(a0)
00016B36 317C 00B4 0036             		move.w	#$B4,$36(a0)
00016B3C 4228 0038                  		clr.b	$38(a0)
00016B40 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016B44 7000                       		moveq	#0,d0
00016B46 1028 0023                  		move.b	$23(a0),d0
00016B4A 67C8                       		beq.s	loc_15DC2
00016B4C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016B52 60C0                       		bra.s	loc_15DC2
00016B54                            ; ===========================================================================
00016B54                            
00016B54                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00016B54 4A28 0038                  		tst.b	$38(a0)
00016B58 6600                       		bne.s	loc_15E14
00016B5A 5368 0036                  		subq.w	#1,$36(a0)
00016B5E 6600                       		bne.s	loc_15E1E
00016B60 117C 0001 0038             		move.b	#1,$38(a0)
00016B66                            
00016B66                            loc_15E14:
00016B66 4A68 003A                  		tst.w	$3A(a0)
00016B6A 6700                       		beq.s	loc_15E3C
00016B6C 5568 003A                  		subq.w	#2,$3A(a0)
00016B70                            
00016B70                            loc_15E1E:
00016B70 3028 003A                  		move.w	$3A(a0),d0
00016B74 0828 0000 0022             		btst	#0,$22(a0)
00016B7A 6700                       		beq.s	loc_15E30
00016B7C 4440                       		neg.w	d0
00016B7E 0640 0080                  		addi.w	#$80,d0
00016B82                            
00016B82                            loc_15E30:
00016B82 3228 0034                  		move.w	$34(a0),d1
00016B86 9240                       		sub.w	d0,d1
00016B88 3141 0008                  		move.w	d1,8(a0)
00016B8C 4E75                       		rts	
00016B8E                            ; ===========================================================================
00016B8E                            
00016B8E                            loc_15E3C:
00016B8E 5328 0028                  		subq.b	#1,$28(a0)
00016B92 4228 0038                  		clr.b	$38(a0)
00016B96 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016B9A 7000                       		moveq	#0,d0
00016B9C 1028 0023                  		move.b	$23(a0),d0
00016BA0 67CE                       		beq.s	loc_15E1E
00016BA2 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00016BA8 60C6                       		bra.s	loc_15E1E
00016BAA                            ; ===========================================================================
00016BAA                            
00016BAA                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00016BAA 4A28 0038                  		tst.b	$38(a0)
00016BAE 6600                       		bne.s	loc_15E7C
00016BB0 4A68 003A                  		tst.w	$3A(a0)
00016BB4 6700                       		beq.s	loc_15E6A
00016BB6 5368 003A                  		subq.w	#1,$3A(a0)
00016BBA 6000                       		bra.s	loc_15E8E
00016BBC                            ; ===========================================================================
00016BBC                            
00016BBC                            loc_15E6A:
00016BBC 5368 0036                  		subq.w	#1,$36(a0)
00016BC0 6A00                       		bpl.s	loc_15E8E
00016BC2 317C 003C 0036             		move.w	#$3C,$36(a0)
00016BC8 117C 0001 0038             		move.b	#1,$38(a0)
00016BCE                            
00016BCE                            loc_15E7C:
00016BCE 5068 003A                  		addq.w	#8,$3A(a0)
00016BD2 3028 003A                  		move.w	$3A(a0),d0
00016BD6 B068 003C                  		cmp.w	$3C(a0),d0
00016BDA 6600                       		bne.s	loc_15E8E
00016BDC 4228 0038                  		clr.b	$38(a0)
00016BE0                            
00016BE0                            loc_15E8E:
00016BE0 3028 003A                  		move.w	$3A(a0),d0
00016BE4 0828 0000 0022             		btst	#0,$22(a0)
00016BEA 6700                       		beq.s	loc_15EA0
00016BEC 4440                       		neg.w	d0
00016BEE 0640 0038                  		addi.w	#$38,d0
00016BF2                            
00016BF2                            loc_15EA0:
00016BF2 3228 0030                  		move.w	$30(a0),d1
00016BF6 D240                       		add.w	d0,d1
00016BF8 3141 000C                  		move.w	d1,$C(a0)
00016BFC 4E75                       		rts	
00016BFE                            ; ===========================================================================
00016BFE                            
00016BFE                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00016BFE 4A28 0038                  		tst.b	$38(a0)
00016C02 6600                       		bne.s	loc_15ED0
00016C04 4A68 003A                  		tst.w	$3A(a0)
00016C08 6700                       		beq.s	loc_15EBE
00016C0A 5168 003A                  		subq.w	#8,$3A(a0)
00016C0E 6000                       		bra.s	loc_15EF0
00016C10                            ; ===========================================================================
00016C10                            
00016C10                            loc_15EBE:
00016C10 5368 0036                  		subq.w	#1,$36(a0)
00016C14 6A00                       		bpl.s	loc_15EF0
00016C16 317C 003C 0036             		move.w	#$3C,$36(a0)
00016C1C 117C 0001 0038             		move.b	#1,$38(a0)
00016C22                            
00016C22                            loc_15ED0:
00016C22 3028 003A                  		move.w	$3A(a0),d0
00016C26 B068 003C                  		cmp.w	$3C(a0),d0
00016C2A 6700                       		beq.s	loc_15EE0
00016C2C 5068 003A                  		addq.w	#8,$3A(a0)
00016C30 6000                       		bra.s	loc_15EF0
00016C32                            ; ===========================================================================
00016C32                            
00016C32                            loc_15EE0:
00016C32 5368 0036                  		subq.w	#1,$36(a0)
00016C36 6A00                       		bpl.s	loc_15EF0
00016C38 317C 003C 0036             		move.w	#$3C,$36(a0)
00016C3E 4228 0038                  		clr.b	$38(a0)
00016C42                            
00016C42                            loc_15EF0:
00016C42 3028 003A                  		move.w	$3A(a0),d0
00016C46 0828 0000 0022             		btst	#0,$22(a0)
00016C4C 6700                       		beq.s	loc_15F02
00016C4E 4440                       		neg.w	d0
00016C50 0640 0038                  		addi.w	#$38,d0
00016C54                            
00016C54                            loc_15F02:
00016C54 3228 0030                  		move.w	$30(a0),d1
00016C58 D240                       		add.w	d0,d1
00016C5A 3141 000C                  		move.w	d1,$C(a0)
00016C5E 4E75                       		rts	
00016C60                            ; ===========================================================================
00016C60                            
00016C60                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00016C60 4A28 0038                  		tst.b	$38(a0)
00016C64 6600                       		bne.s	loc_15F3E
00016C66 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016C6A 7000                       		moveq	#0,d0
00016C6C 1028 003E                  		move.b	$3E(a0),d0
00016C70 0832 0000 0000             		btst	#0,(a2,d0.w)
00016C76 6700                       		beq.s	locret_15F5C
00016C78 117C 0001 0038             		move.b	#1,$38(a0)
00016C7E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016C82 7000                       		moveq	#0,d0
00016C84 1028 0023                  		move.b	$23(a0),d0
00016C88 6700                       		beq.s	loc_15F3E
00016C8A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016C90                            
00016C90                            loc_15F3E:
00016C90 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00016C98 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00016CA0 3168 0008 0034             		move.w	8(a0),$34(a0)
00016CA6 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00016CAC 6700                       		beq.s	loc_15F5E
00016CAE                            
00016CAE                            locret_15F5C:
00016CAE 4E75                       		rts	
00016CB0                            ; ===========================================================================
00016CB0                            
00016CB0                            loc_15F5E:
00016CB0 4228 0028                  		clr.b	$28(a0)
00016CB4 4228 0038                  		clr.b	$38(a0)
00016CB8 4E75                       		rts	
00016CBA                            ; ===========================================================================
00016CBA                            ; ---------------------------------------------------------------------------
00016CBA                            ; Sprite mappings - stomper and	platforms (SBZ)
00016CBA                            ; ---------------------------------------------------------------------------
00016CBA                            Map_obj6B:
00016CBA                            	include "_maps\obj6B.asm"
00016CBA                            ; ---------------------------------------------------------------------------
00016CBA                            ; Sprite mappings - stomper and	platforms (SBZ)
00016CBA                            ; ---------------------------------------------------------------------------
00016CBA 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00016CBE 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00016CC2 0000                       		dc.w byte_15FB0-Map_obj6B
00016CC4 04                         byte_15F72:	dc.b 4
00016CC5 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00016CCA F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00016CCF F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00016CD4 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00016CD9 08                         byte_15F87:	dc.b 8
00016CDA E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00016CDF E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00016CE4 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00016CE9 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00016CEE 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00016CF3 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00016CF8 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00016CFD 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00016D02 0E                         byte_15FB0:	dc.b $E
00016D03 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00016D08 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00016D0D C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00016D12 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00016D17 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00016D1C C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00016D21 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00016D26 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00016D2B E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00016D30 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00016D35 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00016D3A 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00016D3F 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00016D44 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00016D4A 00                         		even
00016D4A 00                         		even
00016D4A                            
00016D4A                            ; ===========================================================================
00016D4A                            ; ---------------------------------------------------------------------------
00016D4A                            ; Object 6C - vanishing	platforms (SBZ)
00016D4A                            ; ---------------------------------------------------------------------------
00016D4A                            
00016D4A                            Obj6C:					; XREF: Obj_Index
00016D4A 7000                       		moveq	#0,d0
00016D4C 1028 0024                  		move.b	$24(a0),d0
00016D50 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
00016D54 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
00016D58                            ; ===========================================================================
00016D58 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00016D5A 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016D5C 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016D5E 0000                       		dc.w loc_16068-Obj6C_Index
00016D60                            ; ===========================================================================
00016D60                            
00016D60                            Obj6C_Main:				; XREF: Obj6C_Index
00016D60 5C28 0024                  		addq.b	#6,$24(a0)
00016D64 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00016D6C 317C 44C3 0002             		move.w	#$44C3,2(a0)
00016D72 0028 0004 0001             		ori.b	#4,1(a0)
00016D78 117C 0010 0019             		move.b	#$10,$19(a0)
00016D7E 117C 0004 0018             		move.b	#4,$18(a0)
00016D84 7000                       		moveq	#0,d0
00016D86 1028 0028                  		move.b	$28(a0),d0	; get object type
00016D8A 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00016D8E 5240                       		addq.w	#1,d0		; add 1
00016D90 EF48                       		lsl.w	#7,d0		; multiply by $80
00016D92 3200                       		move.w	d0,d1
00016D94 5340                       		subq.w	#1,d0
00016D96 3140 0030                  		move.w	d0,$30(a0)
00016D9A 3140 0032                  		move.w	d0,$32(a0)
00016D9E 7000                       		moveq	#0,d0
00016DA0 1028 0028                  		move.b	$28(a0),d0	; get object type
00016DA4 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00016DA8 0641 0080                  		addi.w	#$80,d1
00016DAC C0C1                       		mulu.w	d1,d0
00016DAE E088                       		lsr.l	#8,d0
00016DB0 3140 0036                  		move.w	d0,$36(a0)
00016DB4 5341                       		subq.w	#1,d1
00016DB6 3141 0038                  		move.w	d1,$38(a0)
00016DBA                            
00016DBA                            loc_16068:				; XREF: Obj6C_Index
00016DBA 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016DBE 9068 0036                  		sub.w	$36(a0),d0
00016DC2 C068 0038                  		and.w	$38(a0),d0
00016DC6 6600                       		bne.s	Obj6C_Animate
00016DC8 5928 0024                  		subq.b	#4,$24(a0)
00016DCC 6000                       		bra.s	Obj6C_Vanish
00016DCE                            ; ===========================================================================
00016DCE                            
00016DCE                            Obj6C_Animate:
00016DCE 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016DD4 4EB9 0000 B2FA             		jsr	AnimateSprite
00016DDA 6000 9568                  		bra.w	MarkObjGone
00016DDE                            ; ===========================================================================
00016DDE                            
00016DDE                            Obj6C_Vanish:				; XREF: Obj6C_Index
00016DDE 5368 0030                  		subq.w	#1,$30(a0)
00016DE2 6A00                       		bpl.s	loc_160AA
00016DE4 317C 007F 0030             		move.w	#127,$30(a0)
00016DEA 4A28 001C                  		tst.b	$1C(a0)
00016DEE 6700                       		beq.s	loc_160A4
00016DF0 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016DF6                            
00016DF6                            loc_160A4:
00016DF6 0868 0000 001C             		bchg	#0,$1C(a0)
00016DFC                            
00016DFC                            loc_160AA:
00016DFC 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016E02 4EB9 0000 B2FA             		jsr	AnimateSprite
00016E08 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00016E0E 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00016E10 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00016E16 6600                       		bne.s	loc_160D6
00016E18 7200                       		moveq	#0,d1
00016E1A 1228 0019                  		move.b	$19(a0),d1
00016E1E 4EB9 0000 7EC8             		jsr	(PlatformObject).l
00016E24 6000 951E                  		bra.w	MarkObjGone
00016E28                            ; ===========================================================================
00016E28                            
00016E28                            loc_160D6:
00016E28 7200                       		moveq	#0,d1
00016E2A 1228 0019                  		move.b	$19(a0),d1
00016E2E 4EB9 0000 803C             		jsr	(ExitPlatform).l
00016E34 3428 0008                  		move.w	8(a0),d2
00016E38 4EB9 0000 85A6             		jsr	(MvSonicOnPtfm2).l
00016E3E 6000 9504                  		bra.w	MarkObjGone
00016E42                            ; ===========================================================================
00016E42                            
00016E42                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00016E42 0828 0003 0022             		btst	#3,$22(a0)
00016E48 6700                       		beq.s	Obj6C_Display
00016E4A 43F8 D000                  		lea	($FFFFD000).w,a1
00016E4E 08A9 0003 0022             		bclr	#3,$22(a1)
00016E54 08A8 0003 0022             		bclr	#3,$22(a0)
00016E5A 117C 0002 0024             		move.b	#2,$24(a0)
00016E60 4228 0025                  		clr.b	$25(a0)
00016E64                            
00016E64                            Obj6C_Display:
00016E64 6000 94DE                  		bra.w	MarkObjGone
00016E68                            ; ===========================================================================
00016E68                            Ani_obj6C:
00016E68                            	include "_anim\obj6C.asm"
00016E68                            ; ---------------------------------------------------------------------------
00016E68                            ; Animation script - vanishing platforms (SBZ)
00016E68                            ; ---------------------------------------------------------------------------
00016E68 0000                       		dc.w byte_1611A-Ani_obj6C
00016E6A 0000                       		dc.w byte_16122-Ani_obj6C
00016E6C 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00016E74 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00016E7C                            		even
00016E7C                            		even
00016E7C                            
00016E7C                            ; ---------------------------------------------------------------------------
00016E7C                            ; Sprite mappings - vanishing platforms	(SBZ)
00016E7C                            ; ---------------------------------------------------------------------------
00016E7C                            Map_obj6C:
00016E7C                            	include "_maps\obj6C.asm"
00016E7C                            ; ---------------------------------------------------------------------------
00016E7C                            ; Sprite mappings - vanishing platforms	(SBZ)
00016E7C                            ; ---------------------------------------------------------------------------
00016E7C 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00016E80 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00016E84 01                         byte_16132:	dc.b 1
00016E85 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00016E8A 01                         byte_16138:	dc.b 1
00016E8B F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00016E90 01                         byte_1613E:	dc.b 1
00016E91 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00016E96 00                         byte_16144:	dc.b 0
00016E98 00                         		even
00016E98 00                         		even
00016E98                            
00016E98                            ; ===========================================================================
00016E98                            ; ---------------------------------------------------------------------------
00016E98                            ; Object 6E - electrocution orbs (SBZ)
00016E98                            ; ---------------------------------------------------------------------------
00016E98                            
00016E98                            Obj6E:					; XREF: Obj_Index
00016E98 7000                       		moveq	#0,d0
00016E9A 1028 0024                  		move.b	$24(a0),d0
00016E9E 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00016EA2 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00016EA6                            ; ===========================================================================
00016EA6 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016EA8 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00016EAA                            ; ===========================================================================
00016EAA                            
00016EAA                            Obj6E_Main:				; XREF: Obj6E_Index
00016EAA 5428 0024                  		addq.b	#2,$24(a0)
00016EAE 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00016EB6 317C 047E 0002             		move.w	#$47E,2(a0)
00016EBC 0028 0004 0001             		ori.b	#4,1(a0)
00016EC2 117C 0028 0019             		move.b	#$28,$19(a0)
00016EC8 7000                       		moveq	#0,d0
00016ECA 1028 0028                  		move.b	$28(a0),d0	; read object type
00016ECE E948                       		lsl.w	#4,d0		; multiply by $10
00016ED0 5340                       		subq.w	#1,d0
00016ED2 3140 0034                  		move.w	d0,$34(a0)
00016ED6                            
00016ED6                            Obj6E_Shock:				; XREF: Obj6E_Index
00016ED6 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016EDA C068 0034                  		and.w	$34(a0),d0
00016EDE 6600                       		bne.s	Obj6E_Animate
00016EE0 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00016EE6 4A28 0001                  		tst.b	1(a0)
00016EEA 6A00                       		bpl.s	Obj6E_Animate
00016EEC 303C 00B1                  		move.w	#$B1,d0
00016EF0 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play electricity sound
00016EF6                            
00016EF6                            Obj6E_Animate:
00016EF6 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00016EFC 4EB9 0000 B2FA             		jsr	AnimateSprite
00016F02 117C 0000 0020             		move.b	#0,$20(a0)
00016F08 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00016F0E 6600                       		bne.s	Obj6E_Display	; if not, branch
00016F10 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00016F16                            
00016F16                            Obj6E_Display:
00016F16 6000 942C                  		bra.w	MarkObjGone
00016F1A                            ; ===========================================================================
00016F1A                            Ani_obj6E:
00016F1A                            	include "_anim\obj6E.asm"
00016F1A                            ; ---------------------------------------------------------------------------
00016F1A                            ; Animation script - electrocution orbs (SBZ)
00016F1A                            ; ---------------------------------------------------------------------------
00016F1A 0000                       		dc.w byte_161CC-Ani_obj6E
00016F1C 0000                       		dc.w byte_161D0-Ani_obj6E
00016F1E 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00016F22 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00016F32                            		even
00016F32                            		even
00016F32                            
00016F32                            ; ---------------------------------------------------------------------------
00016F32                            ; Sprite mappings - electrocution orbs (SBZ)
00016F32                            ; ---------------------------------------------------------------------------
00016F32                            Map_obj6E:
00016F32                            	include "_maps\obj6E.asm"
00016F32                            Map_26ed:
00016F32 0000                       Map_26ed_0: 	dc.w Map_26ed_C-Map_26ed
00016F34 0000                       Map_26ed_2: 	dc.w Map_26ed_12-Map_26ed
00016F36 0000                       Map_26ed_4: 	dc.w Map_26ed_1D-Map_26ed
00016F38 0000                       Map_26ed_6: 	dc.w Map_26ed_3C-Map_26ed
00016F3A 0000                       Map_26ed_8: 	dc.w Map_26ed_65-Map_26ed
00016F3C 0000                       Map_26ed_A: 	dc.w Map_26ed_84-Map_26ed
00016F3E 01                         Map_26ed_C: 	dc.b $1
00016F3F 0805 0000 F8               	dc.b $8, $5, $0, $0, $F8
00016F44 02                         Map_26ed_12: 	dc.b $2
00016F45 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016F4A 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016F4F 06                         Map_26ed_1D: 	dc.b $6
00016F50 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016F55 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016F5A F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016F5F F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016F64 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016F69 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016F6E 08                         Map_26ed_3C: 	dc.b $8
00016F6F F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016F74 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016F79 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016F7E F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016F83 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016F88 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016F8D F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016F92 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016F97 06                         Map_26ed_65: 	dc.b $6
00016F98 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016F9D 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016FA2 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016FA7 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016FAC F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016FB1 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016FB6 04                         Map_26ed_84: 	dc.b $4
00016FB7 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016FBC 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016FC1 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016FC6 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016FCC 00                         	even
00016FCC 00                         	even
00016FCC                            
00016FCC                            ; ===========================================================================
00016FCC                            ; ---------------------------------------------------------------------------
00016FCC                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016FCC                            ; ---------------------------------------------------------------------------
00016FCC                            
00016FCC                            Obj6F:					; XREF: Obj_Index
00016FCC 7000                       		moveq	#0,d0
00016FCE 1028 0024                  		move.b	$24(a0),d0
00016FD2 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00016FD6 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016FDA 3028 0030                  		move.w	$30(a0),d0
00016FDE 0240 FF80                  		andi.w	#$FF80,d0
00016FE2 3238 F700                  		move.w	($FFFFF700).w,d1
00016FE6 0441 0080                  		subi.w	#$80,d1
00016FEA 0241 FF80                  		andi.w	#$FF80,d1
00016FEE 9041                       		sub.w	d1,d0
00016FF0 0C40 0280                  		cmpi.w	#$280,d0
00016FF4 6200                       		bhi.s	loc_1629A
00016FF6                            
00016FF6                            Obj6F_Display:
00016FF6 4EF9 0000 E2A2             		jmp	DisplaySprite
00016FFC                            ; ===========================================================================
00016FFC                            
00016FFC                            loc_1629A:
00016FFC 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00017002 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00017004 0C40 FF80                  		cmpi.w	#-$80,d0
00017008 64EC                       		bcc.s	Obj6F_Display
0001700A                            
0001700A                            Obj6F_Act1or2:
0001700A 1028 002F                  		move.b	$2F(a0),d0
0001700E 6A00                       		bpl.s	Obj6F_Delete
00017010 0240 007F                  		andi.w	#$7F,d0
00017014 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00017018 08B2 0000 0000             		bclr	#0,(a2,d0.w)
0001701E                            
0001701E                            Obj6F_Delete:
0001701E 4EF9 0000 E2DE             		jmp	DeleteObject
00017024                            ; ===========================================================================
00017024 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00017026 0000                       		dc.w loc_163D8-Obj6F_Index
00017028                            ; ===========================================================================
00017028                            
00017028                            Obj6F_Main:				; XREF: Obj6F_Index
00017028 1028 0028                  		move.b	$28(a0),d0
0001702C 6B00 0000                  		bmi.w	loc_16380
00017030 5428 0024                  		addq.b	#2,$24(a0)
00017034 217C 0001 668C 0004        		move.l	#Map_obj69a,4(a0)
0001703C 317C 04DF 0002             		move.w	#$4DF,2(a0)
00017042 117C 0010 0019             		move.b	#$10,$19(a0)
00017048 0028 0004 0001             		ori.b	#4,1(a0)
0001704E 117C 0004 0018             		move.b	#4,$18(a0)
00017054 7000                       		moveq	#0,d0
00017056 1028 0028                  		move.b	$28(a0),d0
0001705A 3200                       		move.w	d0,d1
0001705C E648                       		lsr.w	#3,d0
0001705E 0240 001E                  		andi.w	#$1E,d0
00017062 45FA 0000                  		lea	off_164A6(pc),a2
00017066 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001706A 315A 0038                  		move.w	(a2)+,$38(a0)
0001706E 315A 0030                  		move.w	(a2)+,$30(a0)
00017072 214A 003C                  		move.l	a2,$3C(a0)
00017076 0241 000F                  		andi.w	#$F,d1
0001707A E549                       		lsl.w	#2,d1
0001707C 1141 0038                  		move.b	d1,$38(a0)
00017080 117C 0004 003A             		move.b	#4,$3A(a0)
00017086 4A38 F7C0                  		tst.b	($FFFFF7C0).w
0001708A 6700                       		beq.s	loc_16356
0001708C 117C 0001 003B             		move.b	#1,$3B(a0)
00017092 4428 003A                  		neg.b	$3A(a0)
00017096 7200                       		moveq	#0,d1
00017098 1228 0038                  		move.b	$38(a0),d1
0001709C D228 003A                  		add.b	$3A(a0),d1
000170A0 B228 0039                  		cmp.b	$39(a0),d1
000170A4 6500                       		bcs.s	loc_16352
000170A6 1001                       		move.b	d1,d0
000170A8 7200                       		moveq	#0,d1
000170AA 4A00                       		tst.b	d0
000170AC 6A00                       		bpl.s	loc_16352
000170AE 1228 0039                  		move.b	$39(a0),d1
000170B2 5901                       		subq.b	#4,d1
000170B4                            
000170B4                            loc_16352:
000170B4 1141 0038                  		move.b	d1,$38(a0)
000170B8                            
000170B8                            loc_16356:
000170B8 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000170BE 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000170C4 4A41                       		tst.w	d1
000170C6 6600                       		bne.s	loc_1636C
000170C8 117C 0001 001C             		move.b	#1,$1C(a0)
000170CE                            
000170CE                            loc_1636C:
000170CE 0C41 0008                  		cmpi.w	#8,d1
000170D2 6600                       		bne.s	loc_16378
000170D4 117C 0000 001C             		move.b	#0,$1C(a0)
000170DA                            
000170DA                            loc_16378:
000170DA 6100 C0D2                  		bsr.w	Obj63_ChangeDir
000170DE 6000 0000                  		bra.w	loc_163D8
000170E2                            ; ===========================================================================
000170E2                            
000170E2                            loc_16380:				; XREF: Obj6F_Main
000170E2 1140 002F                  		move.b	d0,$2F(a0)
000170E6 0240 007F                  		andi.w	#$7F,d0
000170EA 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000170EE 08F2 0000 0000             		bset	#0,(a2,d0.w)
000170F4 6700                       		beq.s	loc_1639A
000170F6 4EF9 0000 E2DE             		jmp	DeleteObject
000170FC                            ; ===========================================================================
000170FC                            
000170FC                            loc_1639A:
000170FC D040                       		add.w	d0,d0
000170FE 0240 001E                  		andi.w	#$1E,d0
00017102 45F9 0000 0000             		lea	(ObjPos_SBZ1pf_Index).l,a2
00017108 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001710C 321A                       		move.w	(a2)+,d1
0001710E 2248                       		movea.l	a0,a1
00017110 6000                       		bra.s	Obj6F_LoadPform
00017112                            ; ===========================================================================
00017112                            
00017112                            Obj6F_Loop:
00017112 4EB9 0000 E728             		jsr	SingleObjLoad
00017118 6600                       		bne.s	loc_163D0
0001711A                            
0001711A                            Obj6F_LoadPform:			; XREF: loc_1639A
0001711A 12BC 006F                  		move.b	#$6F,0(a1)
0001711E 335A 0008                  		move.w	(a2)+,8(a1)
00017122 335A 000C                  		move.w	(a2)+,$C(a1)
00017126 301A                       		move.w	(a2)+,d0
00017128 1340 0028                  		move.b	d0,$28(a1)
0001712C                            
0001712C                            loc_163D0:
0001712C 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00017130                            
00017130 588F                       		addq.l	#4,sp
00017132 4E75                       		rts	
00017134                            ; ===========================================================================
00017134                            
00017134                            loc_163D8:				; XREF: Obj6F_Index
00017134 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
0001713A 4EB9 0000 B2FA             		jsr	AnimateSprite
00017140 4A28 001A                  		tst.b	$1A(a0)
00017144 6600                       		bne.s	loc_16404
00017146 3F28 0008                  		move.w	8(a0),-(sp)
0001714A 6100 0000                  		bsr.w	loc_16424
0001714E 323C 001B                  		move.w	#$1B,d1
00017152 343C 0007                  		move.w	#7,d2
00017156 3602                       		move.w	d2,d3
00017158 5243                       		addq.w	#1,d3
0001715A 381F                       		move.w	(sp)+,d4
0001715C 6000 950E                  		bra.w	SolidObject
00017160                            ; ===========================================================================
00017160                            
00017160                            loc_16404:
00017160 0828 0003 0022             		btst	#3,$22(a0)
00017166 6700                       		beq.s	loc_16420
00017168 43F8 D000                  		lea	($FFFFD000).w,a1
0001716C 08A9 0003 0022             		bclr	#3,$22(a1)
00017172 08A8 0003 0022             		bclr	#3,$22(a0)
00017178 4228 0025                  		clr.b	$25(a0)
0001717C                            
0001717C                            loc_16420:
0001717C 6000 0002                  		bra.w	*+4
00017180                            
00017180                            loc_16424:
00017180 3028 0008                  		move.w	8(a0),d0
00017184 B068 0034                  		cmp.w	$34(a0),d0
00017188 6600                       		bne.s	loc_16484
0001718A 3028 000C                  		move.w	$C(a0),d0
0001718E B068 0036                  		cmp.w	$36(a0),d0
00017192 6600                       		bne.s	loc_16484
00017194 7200                       		moveq	#0,d1
00017196 1228 0038                  		move.b	$38(a0),d1
0001719A D228 003A                  		add.b	$3A(a0),d1
0001719E B228 0039                  		cmp.b	$39(a0),d1
000171A2 6500                       		bcs.s	loc_16456
000171A4 1001                       		move.b	d1,d0
000171A6 7200                       		moveq	#0,d1
000171A8 4A00                       		tst.b	d0
000171AA 6A00                       		bpl.s	loc_16456
000171AC 1228 0039                  		move.b	$39(a0),d1
000171B0 5901                       		subq.b	#4,d1
000171B2                            
000171B2                            loc_16456:
000171B2 1141 0038                  		move.b	d1,$38(a0)
000171B6 2268 003C                  		movea.l	$3C(a0),a1
000171BA 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000171C0 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000171C6 4A41                       		tst.w	d1
000171C8 6600                       		bne.s	loc_16474
000171CA 117C 0001 001C             		move.b	#1,$1C(a0)
000171D0                            
000171D0                            loc_16474:
000171D0 0C41 0008                  		cmpi.w	#8,d1
000171D4 6600                       		bne.s	loc_16480
000171D6 117C 0000 001C             		move.b	#0,$1C(a0)
000171DC                            
000171DC                            loc_16480:
000171DC 6100 BFD0                  		bsr.w	Obj63_ChangeDir
000171E0                            
000171E0                            loc_16484:
000171E0 4EF9 0000 E268             		jmp	SpeedToPos
000171E6                            ; ===========================================================================
000171E6                            Ani_obj6F:
000171E6                            	include "_anim\obj6F.asm"
000171E6                            ; ---------------------------------------------------------------------------
000171E6                            ; Animation script - platform on conveyor belt (SBZ)
000171E6                            ; ---------------------------------------------------------------------------
000171E6 0000                       		dc.w byte_1648E-Ani_obj6F
000171E8 0000                       		dc.w byte_164A2-Ani_obj6F
000171EA 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000171F7 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
000171FE 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00017202 00                         		even
00017202 00                         		even
00017202                            
00017202 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00017208 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
0001720E 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00017222 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00017236 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
0001724A 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
0001725E 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00017272 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00017286                            ; ===========================================================================
00017286                            ; ---------------------------------------------------------------------------
00017286                            ; Object 70 - large girder block (SBZ)
00017286                            ; ---------------------------------------------------------------------------
00017286                            
00017286                            Obj70:					; XREF: Obj_Index
00017286 7000                       		moveq	#0,d0
00017288 1028 0024                  		move.b	$24(a0),d0
0001728C 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00017290 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00017294                            ; ===========================================================================
00017294 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00017296 0000                       		dc.w Obj70_Action-Obj70_Index
00017298                            ; ===========================================================================
00017298                            
00017298                            Obj70_Main:				; XREF: Obj70_Index
00017298 5428 0024                  		addq.b	#2,$24(a0)
0001729C 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
000172A4 317C 42F0 0002             		move.w	#$42F0,2(a0)
000172AA 0028 0004 0001             		ori.b	#4,1(a0)
000172B0 117C 0004 0018             		move.b	#4,$18(a0)
000172B6 117C 0060 0019             		move.b	#$60,$19(a0)
000172BC 117C 0018 0016             		move.b	#$18,$16(a0)
000172C2 3168 0008 0032             		move.w	8(a0),$32(a0)
000172C8 3168 000C 0030             		move.w	$C(a0),$30(a0)
000172CE 6100 0000                  		bsr.w	Obj70_Move2
000172D2                            
000172D2                            Obj70_Action:				; XREF: Obj70_Index
000172D2 3F28 0008                  		move.w	8(a0),-(sp)
000172D6 4A68 003A                  		tst.w	$3A(a0)
000172DA 6700                       		beq.s	Obj70_Move
000172DC 5368 003A                  		subq.w	#1,$3A(a0)
000172E0 6600                       		bne.s	Obj70_Solid
000172E2                            
000172E2                            Obj70_Move:
000172E2 4EB9 0000 E268             		jsr	SpeedToPos
000172E8 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
000172EC 6600                       		bne.s	Obj70_Solid	; if time remains, branch
000172EE 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
000172F2                            
000172F2                            Obj70_Solid:
000172F2 381F                       		move.w	(sp)+,d4
000172F4 4A28 0001                  		tst.b	1(a0)
000172F8 6A00                       		bpl.s	Obj70_ChkDel
000172FA 7200                       		moveq	#0,d1
000172FC 1228 0019                  		move.b	$19(a0),d1
00017300 0641 000B                  		addi.w	#$B,d1
00017304 7400                       		moveq	#0,d2
00017306 1428 0016                  		move.b	$16(a0),d2
0001730A 3602                       		move.w	d2,d3
0001730C 5243                       		addq.w	#1,d3
0001730E 6100 935C                  		bsr.w	SolidObject
00017312                            
00017312                            Obj70_ChkDel:
00017312 3028 0032                  		move.w	$32(a0),d0
00017316 0240 FF80                  		andi.w	#$FF80,d0
0001731A 3238 F700                  		move.w	($FFFFF700).w,d1
0001731E 0441 0080                  		subi.w	#$80,d1
00017322 0241 FF80                  		andi.w	#$FF80,d1
00017326 9041                       		sub.w	d1,d0
00017328 0C40 0280                  		cmpi.w	#$280,d0
0001732C 6200                       		bhi.s	Obj70_Delete
0001732E 4EF9 0000 E2A2             		jmp	DisplaySprite
00017334                            ; ===========================================================================
00017334                            
00017334                            Obj70_Delete:
00017334 4EF9 0000 E2DE             		jmp	DeleteObject
0001733A                            ; ===========================================================================
0001733A                            
0001733A                            Obj70_Move2:				; XREF: Obj70_Main
0001733A 1028 0038                  		move.b	$38(a0),d0
0001733E 0240 0018                  		andi.w	#$18,d0
00017342 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00017348 43F1 0000                  		lea	(a1,d0.w),a1
0001734C 3159 0010                  		move.w	(a1)+,$10(a0)
00017350 3159 0012                  		move.w	(a1)+,$12(a0)
00017354 3159 0034                  		move.w	(a1)+,$34(a0)
00017358 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
0001735C 317C 0007 003A             		move.w	#7,$3A(a0)
00017362 4E75                       		rts	
00017364                            ; ===========================================================================
00017364 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
0001736C 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00017374 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
0001737C 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00017384                            ; ---------------------------------------------------------------------------
00017384                            ; Sprite mappings - large girder block (SBZ)
00017384                            ; ---------------------------------------------------------------------------
00017384                            Map_obj70:
00017384                            	include "_maps\obj70.asm"
00017384                            ; ---------------------------------------------------------------------------
00017384                            ; Sprite mappings - large girder block (SBZ)
00017384                            ; ---------------------------------------------------------------------------
00017384 0000                       		dc.w byte_1662A-Map_obj70
00017386 0C                         byte_1662A:	dc.b $C
00017387 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
0001738C 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00017391 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00017396 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
0001739B E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
000173A0 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
000173A5 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
000173AA 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
000173AF E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
000173B4 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
000173B9 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
000173BE 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
000173C4 00                         		even
000173C4 00                         		even
000173C4                            
000173C4                            ; ===========================================================================
000173C4                            ; ---------------------------------------------------------------------------
000173C4                            ; Object 72 - teleporter (SBZ)
000173C4                            ; ---------------------------------------------------------------------------
000173C4                            
000173C4                            Obj72:					; XREF: Obj_Index
000173C4 7000                       		moveq	#0,d0
000173C6 1028 0024                  		move.b	$24(a0),d0
000173CA 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
000173CE 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
000173D2 3028 0008                  		move.w	8(a0),d0
000173D6 0240 FF80                  		andi.w	#$FF80,d0
000173DA 3238 F700                  		move.w	($FFFFF700).w,d1
000173DE 0441 0080                  		subi.w	#$80,d1
000173E2 0241 FF80                  		andi.w	#$FF80,d1
000173E6 9041                       		sub.w	d1,d0
000173E8 0C40 0280                  		cmpi.w	#$280,d0
000173EC 6200                       		bhi.s	Obj72_Delete
000173EE 4E75                       		rts	
000173F0                            ; ===========================================================================
000173F0                            
000173F0                            Obj72_Delete:
000173F0 4EF9 0000 E2DE             		jmp	DeleteObject
000173F6                            ; ===========================================================================
000173F6 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
000173F8 0000                       		dc.w loc_166C8-Obj72_Index
000173FA 0000                       		dc.w loc_1675E-Obj72_Index
000173FC 0000                       		dc.w loc_16798-Obj72_Index
000173FE                            ; ===========================================================================
000173FE                            
000173FE                            Obj72_Main:				; XREF: Obj72_Index
000173FE 5428 0024                  		addq.b	#2,$24(a0)
00017402 1028 0028                  		move.b	$28(a0),d0
00017406 D040                       		add.w	d0,d0
00017408 0240 001E                  		andi.w	#$1E,d0
0001740C 45FA 0000                  		lea	Obj72_Data(pc),a2
00017410 D4F2 0000                  		adda.w	(a2,d0.w),a2
00017414 315A 003A                  		move.w	(a2)+,$3A(a0)
00017418 214A 003C                  		move.l	a2,$3C(a0)
0001741C 315A 0036                  		move.w	(a2)+,$36(a0)
00017420 315A 0038                  		move.w	(a2)+,$38(a0)
00017424                            
00017424                            loc_166C8:				; XREF: Obj72_Index
00017424 43F8 D000                  		lea	($FFFFD000).w,a1
00017428 3029 0008                  		move.w	8(a1),d0
0001742C 9068 0008                  		sub.w	8(a0),d0
00017430 0828 0000 0022             		btst	#0,$22(a0)
00017436 6700                       		beq.s	loc_166E0
00017438 0640 000F                  		addi.w	#$F,d0
0001743C                            
0001743C                            loc_166E0:
0001743C 0C40 0010                  		cmpi.w	#$10,d0
00017440 6400                       		bcc.s	locret_1675C
00017442 3229 000C                  		move.w	$C(a1),d1
00017446 9268 000C                  		sub.w	$C(a0),d1
0001744A 0641 0020                  		addi.w	#$20,d1
0001744E 0C41 0040                  		cmpi.w	#$40,d1
00017452 6400                       		bcc.s	locret_1675C
00017454 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00017458 6600                       		bne.s	locret_1675C
0001745A 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00017460 6600                       		bne.s	loc_1670E
00017462 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00017468 6500                       		bcs.s	locret_1675C
0001746A                            
0001746A                            loc_1670E:
0001746A 5428 0024                  		addq.b	#2,$24(a0)
0001746E 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00017474 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
0001747A 337C 0800 0014             		move.w	#$800,$14(a1)
00017480 337C 0000 0010             		move.w	#0,$10(a1)
00017486 337C 0000 0012             		move.w	#0,$12(a1)
0001748C 08A8 0005 0022             		bclr	#5,$22(a0)
00017492 08A9 0005 0022             		bclr	#5,$22(a1)
00017498 08E9 0001 0022             		bset	#1,$22(a1)
0001749E 3368 0008 0008             		move.w	8(a0),8(a1)
000174A4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000174AA 4228 0032                  		clr.b	$32(a0)
000174AE 303C 00BE                  		move.w	#$BE,d0
000174B2 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
000174B8                            
000174B8                            locret_1675C:
000174B8 4E75                       		rts	
000174BA                            ; ===========================================================================
000174BA                            
000174BA                            loc_1675E:				; XREF: Obj72_Index
000174BA 43F8 D000                  		lea	($FFFFD000).w,a1
000174BE 1028 0032                  		move.b	$32(a0),d0
000174C2 5428 0032                  		addq.b	#2,$32(a0)
000174C6 4EB9 0000 2D80             		jsr	(CalcSine).l
000174CC EA40                       		asr.w	#5,d0
000174CE 3428 000C                  		move.w	$C(a0),d2
000174D2 9440                       		sub.w	d0,d2
000174D4 3342 000C                  		move.w	d2,$C(a1)
000174D8 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
000174DE 6600                       		bne.s	locret_16796
000174E0 6100 0000                  		bsr.w	sub_1681C
000174E4 5428 0024                  		addq.b	#2,$24(a0)
000174E8 303C 00BC                  		move.w	#$BC,d0
000174EC 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play teleport sound
000174F2                            
000174F2                            locret_16796:
000174F2 4E75                       		rts	
000174F4                            ; ===========================================================================
000174F4                            
000174F4                            loc_16798:				; XREF: Obj72_Index
000174F4 588F                       		addq.l	#4,sp
000174F6 43F8 D000                  		lea	($FFFFD000).w,a1
000174FA 5328 002E                  		subq.b	#1,$2E(a0)
000174FE 6A00                       		bpl.s	loc_167DA
00017500 3368 0036 0008             		move.w	$36(a0),8(a1)
00017506 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001750C 7200                       		moveq	#0,d1
0001750E 1228 003A                  		move.b	$3A(a0),d1
00017512 5801                       		addq.b	#4,d1
00017514 B228 003B                  		cmp.b	$3B(a0),d1
00017518 6500                       		bcs.s	loc_167C2
0001751A 7200                       		moveq	#0,d1
0001751C 6000                       		bra.s	loc_16800
0001751E                            ; ===========================================================================
0001751E                            
0001751E                            loc_167C2:
0001751E 1141 003A                  		move.b	d1,$3A(a0)
00017522 2468 003C                  		movea.l	$3C(a0),a2
00017526 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
0001752C 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00017532 6000 0000                  		bra.w	sub_1681C
00017536                            ; ===========================================================================
00017536                            
00017536                            loc_167DA:
00017536 2429 0008                  		move.l	8(a1),d2
0001753A 2629 000C                  		move.l	$C(a1),d3
0001753E 3029 0010                  		move.w	$10(a1),d0
00017542 48C0                       		ext.l	d0
00017544 E180                       		asl.l	#8,d0
00017546 D480                       		add.l	d0,d2
00017548 3029 0012                  		move.w	$12(a1),d0
0001754C 48C0                       		ext.l	d0
0001754E E180                       		asl.l	#8,d0
00017550 D680                       		add.l	d0,d3
00017552 2342 0008                  		move.l	d2,8(a1)
00017556 2343 000C                  		move.l	d3,$C(a1)
0001755A 4E75                       		rts	
0001755C                            ; ===========================================================================
0001755C                            
0001755C                            loc_16800:
0001755C 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00017562 4228 0024                  		clr.b	$24(a0)
00017566 4238 F7C8                  		clr.b	($FFFFF7C8).w
0001756A 337C 0000 0010             		move.w	#0,$10(a1)
00017570 337C 0200 0012             		move.w	#$200,$12(a1)
00017576 4E75                       		rts	
00017578                            
00017578                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017578                            
00017578                            
00017578                            sub_1681C:
00017578 7000                       		moveq	#0,d0
0001757A 343C 1000                  		move.w	#$1000,d2
0001757E 3028 0036                  		move.w	$36(a0),d0
00017582 9069 0008                  		sub.w	8(a1),d0
00017586 6C00                       		bge.s	loc_16830
00017588 4440                       		neg.w	d0
0001758A 4442                       		neg.w	d2
0001758C                            
0001758C                            loc_16830:
0001758C 7200                       		moveq	#0,d1
0001758E 363C 1000                  		move.w	#$1000,d3
00017592 3228 0038                  		move.w	$38(a0),d1
00017596 9269 000C                  		sub.w	$C(a1),d1
0001759A 6C00                       		bge.s	loc_16844
0001759C 4441                       		neg.w	d1
0001759E 4443                       		neg.w	d3
000175A0                            
000175A0                            loc_16844:
000175A0 B240                       		cmp.w	d0,d1
000175A2 6500                       		bcs.s	loc_1687A
000175A4 7200                       		moveq	#0,d1
000175A6 3228 0038                  		move.w	$38(a0),d1
000175AA 9269 000C                  		sub.w	$C(a1),d1
000175AE 4841                       		swap	d1
000175B0 83C3                       		divs.w	d3,d1
000175B2 7000                       		moveq	#0,d0
000175B4 3028 0036                  		move.w	$36(a0),d0
000175B8 9069 0008                  		sub.w	8(a1),d0
000175BC 6700                       		beq.s	loc_16866
000175BE 4840                       		swap	d0
000175C0 81C1                       		divs.w	d1,d0
000175C2                            
000175C2                            loc_16866:
000175C2 3340 0010                  		move.w	d0,$10(a1)
000175C6 3343 0012                  		move.w	d3,$12(a1)
000175CA 4A41                       		tst.w	d1
000175CC 6A00                       		bpl.s	loc_16874
000175CE 4441                       		neg.w	d1
000175D0                            
000175D0                            loc_16874:
000175D0 3141 002E                  		move.w	d1,$2E(a0)
000175D4 4E75                       		rts	
000175D6                            ; ===========================================================================
000175D6                            
000175D6                            loc_1687A:
000175D6 7000                       		moveq	#0,d0
000175D8 3028 0036                  		move.w	$36(a0),d0
000175DC 9069 0008                  		sub.w	8(a1),d0
000175E0 4840                       		swap	d0
000175E2 81C2                       		divs.w	d2,d0
000175E4 7200                       		moveq	#0,d1
000175E6 3228 0038                  		move.w	$38(a0),d1
000175EA 9269 000C                  		sub.w	$C(a1),d1
000175EE 6700                       		beq.s	loc_16898
000175F0 4841                       		swap	d1
000175F2 83C0                       		divs.w	d0,d1
000175F4                            
000175F4                            loc_16898:
000175F4 3341 0012                  		move.w	d1,$12(a1)
000175F8 3342 0010                  		move.w	d2,$10(a1)
000175FC 4A40                       		tst.w	d0
000175FE 6A00                       		bpl.s	loc_168A6
00017600 4440                       		neg.w	d0
00017602                            
00017602                            loc_168A6:
00017602 3140 002E                  		move.w	d0,$2E(a0)
00017606 4E75                       		rts	
00017608                            ; End of function sub_1681C
00017608                            
00017608                            ; ===========================================================================
00017608 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
0001760E 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00017614 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00017618 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
0001761E 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00017624 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
0001762A 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00017630 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00017636 0884 0298 0894             		dc.w $884, $298, $894
0001763C 0270 0894 0190             		dc.w $270, $894, $190
00017642 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00017648 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
0001764E 1184 0498 1158             		dc.w $1184, $498, $1158
00017654 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
0001765A 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00017660 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00017666 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
0001766C 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00017672 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00017678 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
0001767E 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00017684 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
0001768A 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00017690                            ; ===========================================================================
00017690                            ; ---------------------------------------------------------------------------
00017690                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00017690                            ; ---------------------------------------------------------------------------
00017690                            
00017690                            Obj78:					; XREF: Obj_Index
00017690 7000                       		moveq	#0,d0
00017692 1028 0024                  		move.b	$24(a0),d0
00017696 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
0001769A 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
0001769E                            ; ===========================================================================
0001769E 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
000176A0 0000                       		dc.w Obj78_Action-Obj78_Index
000176A2 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000176A4 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
000176A6 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000176A8 0000                       		dc.w Obj78_Delete-Obj78_Index
000176AA 0000                       		dc.w loc_16CC0-Obj78_Index
000176AC                            ; ===========================================================================
000176AC                            
000176AC                            locret_16950:
000176AC 4E75                       		rts	
000176AE                            ; ===========================================================================
000176AE                            
000176AE                            Obj78_Main:				; XREF: Obj78_Index
000176AE 117C 0007 0016             		move.b	#7,$16(a0)
000176B4 117C 0008 0017             		move.b	#8,$17(a0)
000176BA 4EB9 0000 E206             		jsr	ObjectFall
000176C0 4EBA E4AA                  		jsr	ObjHitFloor
000176C4 4A41                       		tst.w	d1
000176C6 6AE4                       		bpl.s	locret_16950
000176C8 D368 000C                  		add.w	d1,$C(a0)
000176CC 4268 0012                  		clr.w	$12(a0)
000176D0 5428 0024                  		addq.b	#2,$24(a0)
000176D4 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
000176DC 317C 22B0 0002             		move.w	#$22B0,2(a0)
000176E2 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
000176E8 6700                       		beq.s	loc_16996
000176EA 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
000176F0                            
000176F0                            loc_16996:
000176F0 0228 0003 0001             		andi.b	#3,1(a0)
000176F6 0028 0004 0001             		ori.b	#4,1(a0)
000176FC 1168 0001 0022             		move.b	1(a0),$22(a0)
00017702 117C 0004 0018             		move.b	#4,$18(a0)
00017708 117C 0008 0019             		move.b	#8,$19(a0)
0001770E 117C 000B 0020             		move.b	#$B,$20(a0)
00017714 3428 0008                  		move.w	8(a0),d2
00017718 7A0C                       		moveq	#$C,d5
0001771A 0828 0000 0022             		btst	#0,$22(a0)
00017720 6700                       		beq.s	loc_169CA
00017722 4445                       		neg.w	d5
00017724                            
00017724                            loc_169CA:
00017724 1C3C 0004                  		move.b	#4,d6
00017728 7600                       		moveq	#0,d3
0001772A 7804                       		moveq	#4,d4
0001772C 2448                       		movea.l	a0,a2
0001772E 7202                       		moveq	#2,d1
00017730                            
00017730                            Obj78_LoadBody:
00017730 4EB9 0000 E73E             		jsr	SingleObjLoad2
00017736 6600                       		bne.s	Obj78_QuitLoad
00017738 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
0001773C 1346 0024                  		move.b	d6,$24(a1)
00017740 5406                       		addq.b	#2,d6
00017742 2368 0004 0004             		move.l	4(a0),4(a1)
00017748 3368 0002 0002             		move.w	2(a0),2(a1)
0001774E 137C 0005 0018             		move.b	#5,$18(a1)
00017754 137C 0008 0019             		move.b	#8,$19(a1)
0001775A 137C 00CB 0020             		move.b	#$CB,$20(a1)
00017760 D445                       		add.w	d5,d2
00017762 3342 0008                  		move.w	d2,8(a1)
00017766 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001776C 1368 0022 0022             		move.b	$22(a0),$22(a1)
00017772 1368 0022 0001             		move.b	$22(a0),1(a1)
00017778 137C 0008 001A             		move.b	#8,$1A(a1)
0001777E 234A 003C                  		move.l	a2,$3C(a1)
00017782 1344 003C                  		move.b	d4,$3C(a1)
00017786 5804                       		addq.b	#4,d4
00017788 2449                       		movea.l	a1,a2
0001778A                            
0001778A                            Obj78_QuitLoad:
0001778A 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
0001778E                            
0001778E 117C 0007 002A             		move.b	#7,$2A(a0)
00017794 4228 003C                  		clr.b	$3C(a0)
00017798                            
00017798                            Obj78_Action:				; XREF: Obj78_Index
00017798 4A28 0022                  		tst.b	$22(a0)
0001779C 6B00 0000                  		bmi.w	loc_16C96
000177A0 7000                       		moveq	#0,d0
000177A2 1028 0025                  		move.b	$25(a0),d0
000177A6 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
000177AA 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
000177AE 1228 002B                  		move.b	$2B(a0),d1
000177B2 6A00                       		bpl.s	Obj78_Display
000177B4 43F9 0000 0000             		lea	(Ani_obj78).l,a1
000177BA 1028 0026                  		move.b	$26(a0),d0
000177BE 0240 007F                  		andi.w	#$7F,d0
000177C2 5828 0026                  		addq.b	#4,$26(a0)
000177C6 1031 0000                  		move.b	(a1,d0.w),d0
000177CA 6A00                       		bpl.s	Obj78_AniHead
000177CC 08A8 0007 002B             		bclr	#7,$2B(a0)
000177D2 6000                       		bra.s	Obj78_Display
000177D4                            ; ===========================================================================
000177D4                            
000177D4                            Obj78_AniHead:
000177D4 0201 0010                  		andi.b	#$10,d1
000177D8 D001                       		add.b	d1,d0
000177DA 1140 001A                  		move.b	d0,$1A(a0)
000177DE                            
000177DE                            Obj78_Display:
000177DE 3028 0008                  		move.w	8(a0),d0
000177E2 0240 FF80                  		andi.w	#$FF80,d0
000177E6 3238 F700                  		move.w	($FFFFF700).w,d1
000177EA 0441 0080                  		subi.w	#$80,d1
000177EE 0241 FF80                  		andi.w	#$FF80,d1
000177F2 9041                       		sub.w	d1,d0
000177F4 0C40 0280                  		cmpi.w	#$280,d0
000177F8 6200 0000                  		bhi.w	Obj78_ChkGone
000177FC 4EF9 0000 E2A2             		jmp	DisplaySprite
00017802                            ; ===========================================================================
00017802                            
00017802                            Obj78_ChkGone:
00017802 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017806 7000                       		moveq	#0,d0
00017808 1028 0023                  		move.b	$23(a0),d0
0001780C 6700                       		beq.s	loc_16ABC
0001780E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017814                            
00017814                            loc_16ABC:
00017814 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
0001781A 4E75                       		rts	
0001781C                            ; ===========================================================================
0001781C                            
0001781C                            Obj78_Delete:				; XREF: Obj78_Index
0001781C 4EF9 0000 E2DE             		jmp	DeleteObject
00017822                            ; ===========================================================================
00017822 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00017824 0000                       		dc.w loc_16B02-Obj78_Index2
00017826                            ; ===========================================================================
00017826                            
00017826                            Obj78_Move:				; XREF: Obj78_Index2
00017826 5328 002A                  		subq.b	#1,$2A(a0)
0001782A 6B00                       		bmi.s	Obj78_Move2
0001782C 4E75                       		rts	
0001782E                            ; ===========================================================================
0001782E                            
0001782E                            Obj78_Move2:
0001782E 5428 0025                  		addq.b	#2,$25(a0)
00017832 117C 0010 002A             		move.b	#$10,$2A(a0)
00017838 317C FF40 0010             		move.w	#-$C0,$10(a0)
0001783E 317C 0040 0014             		move.w	#$40,$14(a0)
00017844 0868 0004 002B             		bchg	#4,$2B(a0)
0001784A 6600                       		bne.s	loc_16AFC
0001784C 4268 0010                  		clr.w	$10(a0)
00017850 4468 0014                  		neg.w	$14(a0)
00017854                            
00017854                            loc_16AFC:
00017854 08E8 0007 002B             		bset	#7,$2B(a0)
0001785A                            
0001785A                            loc_16B02:				; XREF: Obj78_Index2
0001785A 5328 002A                  		subq.b	#1,$2A(a0)
0001785E 6B00                       		bmi.s	loc_16B5E
00017860 2F28 0008                  		move.l	8(a0),-(sp)
00017864 2428 0008                  		move.l	8(a0),d2
00017868 3028 0010                  		move.w	$10(a0),d0
0001786C 0828 0000 0022             		btst	#0,$22(a0)
00017872 6700                       		beq.s	loc_16B1E
00017874 4440                       		neg.w	d0
00017876                            
00017876                            loc_16B1E:
00017876 48C0                       		ext.l	d0
00017878 E180                       		asl.l	#8,d0
0001787A D480                       		add.l	d0,d2
0001787C 2142 0008                  		move.l	d2,8(a0)
00017880 4EBA E2EA                  		jsr	ObjHitFloor
00017884 241F                       		move.l	(sp)+,d2
00017886 0C41 FFF8                  		cmpi.w	#-8,d1
0001788A 6D00                       		blt.s	loc_16B70
0001788C 0C41 000C                  		cmpi.w	#$C,d1
00017890 6C00                       		bge.s	loc_16B70
00017892 D368 000C                  		add.w	d1,$C(a0)
00017896 4842                       		swap	d2
00017898 B468 0008                  		cmp.w	8(a0),d2
0001789C 6700                       		beq.s	locret_16B5C
0001789E 7000                       		moveq	#0,d0
000178A0 1028 003C                  		move.b	$3C(a0),d0
000178A4 5228 003C                  		addq.b	#1,$3C(a0)
000178A8 0228 000F 003C             		andi.b	#$F,$3C(a0)
000178AE 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000178B2                            
000178B2                            locret_16B5C:
000178B2 4E75                       		rts	
000178B4                            ; ===========================================================================
000178B4                            
000178B4                            loc_16B5E:
000178B4 5528 0025                  		subq.b	#2,$25(a0)
000178B8 117C 0007 002A             		move.b	#7,$2A(a0)
000178BE 317C 0000 0010             		move.w	#0,$10(a0)
000178C4 4E75                       		rts	
000178C6                            ; ===========================================================================
000178C6                            
000178C6                            loc_16B70:
000178C6 2142 0008                  		move.l	d2,8(a0)
000178CA 0868 0000 0022             		bchg	#0,$22(a0)
000178D0 1168 0022 0001             		move.b	$22(a0),1(a0)
000178D6 7000                       		moveq	#0,d0
000178D8 1028 003C                  		move.b	$3C(a0),d0
000178DC 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
000178E2 5228 003C                  		addq.b	#1,$3C(a0)
000178E6 0228 000F 003C             		andi.b	#$F,$3C(a0)
000178EC 4E75                       		rts	
000178EE                            ; ===========================================================================
000178EE                            
000178EE                            Obj78_BodySeg2:				; XREF: Obj78_Index
000178EE 2268 003C                  		movea.l	$3C(a0),a1
000178F2 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000178F8 6A00                       		bpl.s	Obj78_BodySeg1
000178FA 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00017900 1028 0026                  		move.b	$26(a0),d0
00017904 0240 007F                  		andi.w	#$7F,d0
00017908 5828 0026                  		addq.b	#4,$26(a0)
0001790C 4A31 0004                  		tst.b	4(a1,d0.w)
00017910 6A00                       		bpl.s	Obj78_AniBody
00017912 5828 0026                  		addq.b	#4,$26(a0)
00017916                            
00017916                            Obj78_AniBody:
00017916 1031 0000                  		move.b	(a1,d0.w),d0
0001791A 5000                       		addq.b	#8,d0
0001791C 1140 001A                  		move.b	d0,$1A(a0)
00017920                            
00017920                            Obj78_BodySeg1:				; XREF: Obj78_Index
00017920 2268 003C                  		movea.l	$3C(a0),a1
00017924 4A28 0022                  		tst.b	$22(a0)
00017928 6B00 0000                  		bmi.w	loc_16C90
0001792C 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017932 1169 0025 0025             		move.b	$25(a1),$25(a0)
00017938 6700 0000                  		beq.w	loc_16C64
0001793C 3169 0014 0014             		move.w	$14(a1),$14(a0)
00017942 3029 0010                  		move.w	$10(a1),d0
00017946 D069 0014                  		add.w	$14(a1),d0
0001794A 3140 0010                  		move.w	d0,$10(a0)
0001794E 2428 0008                  		move.l	8(a0),d2
00017952 2602                       		move.l	d2,d3
00017954 3028 0010                  		move.w	$10(a0),d0
00017958 0828 0000 0022             		btst	#0,$22(a0)
0001795E 6700                       		beq.s	loc_16C0C
00017960 4440                       		neg.w	d0
00017962                            
00017962                            loc_16C0C:
00017962 48C0                       		ext.l	d0
00017964 E180                       		asl.l	#8,d0
00017966 D480                       		add.l	d0,d2
00017968 2142 0008                  		move.l	d2,8(a0)
0001796C 4843                       		swap	d3
0001796E B668 0008                  		cmp.w	8(a0),d3
00017972 6700                       		beq.s	loc_16C64
00017974 7000                       		moveq	#0,d0
00017976 1028 003C                  		move.b	$3C(a0),d0
0001797A 1231 002C                  		move.b	$2C(a1,d0.w),d1
0001797E 0C01 0080                  		cmpi.b	#-$80,d1
00017982 6600                       		bne.s	loc_16C50
00017984 4843                       		swap	d3
00017986 2143 0008                  		move.l	d3,8(a0)
0001798A 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001798E 0868 0000 0022             		bchg	#0,$22(a0)
00017994 1168 0022 0001             		move.b	$22(a0),1(a0)
0001799A 5228 003C                  		addq.b	#1,$3C(a0)
0001799E 0228 000F 003C             		andi.b	#$F,$3C(a0)
000179A4 6000                       		bra.s	loc_16C64
000179A6                            ; ===========================================================================
000179A6                            
000179A6                            loc_16C50:
000179A6 4881                       		ext.w	d1
000179A8 D368 000C                  		add.w	d1,$C(a0)
000179AC 5228 003C                  		addq.b	#1,$3C(a0)
000179B0 0228 000F 003C             		andi.b	#$F,$3C(a0)
000179B6 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000179BA                            
000179BA                            loc_16C64:
000179BA 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
000179C0 6700                       		beq.s	loc_16C90
000179C2 0C11 0027                  		cmpi.b	#$27,0(a1)
000179C6 6700                       		beq.s	loc_16C7C
000179C8 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
000179CE 6600                       		bne.s	loc_16C82
000179D0                            
000179D0                            loc_16C7C:
000179D0 117C 000A 0024             		move.b	#$A,$24(a0)
000179D6                            
000179D6                            loc_16C82:
000179D6 4EF9 0000 E2A2             		jmp	DisplaySprite
000179DC                            
000179DC                            ; ===========================================================================
000179DC FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
000179E4                            ; ===========================================================================
000179E4                            
000179E4                            loc_16C90:
000179E4 08E9 0007 0022             		bset	#7,$22(a1)
000179EA                            
000179EA                            loc_16C96:
000179EA 7000                       		moveq	#0,d0
000179EC 1028 0024                  		move.b	$24(a0),d0
000179F0 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
000179F4 0828 0000 0022             		btst	#0,$22(a0)
000179FA 6700                       		beq.s	loc_16CAA
000179FC 4440                       		neg.w	d0
000179FE                            
000179FE                            loc_16CAA:
000179FE 3140 0010                  		move.w	d0,$10(a0)
00017A02 317C FC00 0012             		move.w	#-$400,$12(a0)
00017A08 117C 000C 0024             		move.b	#$C,$24(a0)
00017A0E 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00017A14                            
00017A14                            loc_16CC0:				; XREF: Obj78_Index
00017A14 4EB9 0000 E206             		jsr	ObjectFall
00017A1A 4A68 0012                  		tst.w	$12(a0)
00017A1E 6B00                       		bmi.s	loc_16CE0
00017A20 4EBA E14A                  		jsr	ObjHitFloor
00017A24 4A41                       		tst.w	d1
00017A26 6A00                       		bpl.s	loc_16CE0
00017A28 D368 000C                  		add.w	d1,$C(a0)
00017A2C 317C FC00 0012             		move.w	#-$400,$12(a0)
00017A32                            
00017A32                            loc_16CE0:
00017A32 4A28 0001                  		tst.b	1(a0)
00017A36 6A00 FDCA                  		bpl.w	Obj78_ChkGone
00017A3A 4EF9 0000 E2A2             		jmp	DisplaySprite
00017A40                            ; ===========================================================================
00017A40                            Ani_obj78:
00017A40                            	include "_anim\obj78.asm"
00017A40                            ; ---------------------------------------------------------------------------
00017A40                            ; Animation script - Caterkiller enemy (uses non-standard format)
00017A40                            ; ---------------------------------------------------------------------------
00017A40 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00017A50 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00017A60 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00017A70 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00017A80 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00017A90 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00017AA0 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00017AB0 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00017AC0                            	even
00017AC0                            	even
00017AC0                            
00017AC0                            ; ---------------------------------------------------------------------------
00017AC0                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017AC0                            ; ---------------------------------------------------------------------------
00017AC0                            Map_obj78:
00017AC0                            	include "_maps\obj78.asm"
00017AC0                            ; ---------------------------------------------------------------------------
00017AC0                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017AC0                            ; ---------------------------------------------------------------------------
00017AC0 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00017AC4 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00017AC8 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00017ACC 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00017AD0 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00017AD4 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00017AD8 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00017ADC 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00017AE0 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00017AE4 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00017AE8 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00017AEC 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00017AF0 01                         byte_16D9E:	dc.b 1
00017AF1 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00017AF6 01                         byte_16DA4:	dc.b 1
00017AF7 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00017AFC 01                         byte_16DAA:	dc.b 1
00017AFD F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00017B02 01                         byte_16DB0:	dc.b 1
00017B03 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00017B08 01                         byte_16DB6:	dc.b 1
00017B09 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00017B0E 01                         byte_16DBC:	dc.b 1
00017B0F ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00017B14 01                         byte_16DC2:	dc.b 1
00017B15 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00017B1A 01                         byte_16DC8:	dc.b 1
00017B1B EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00017B20 01                         byte_16DCE:	dc.b 1
00017B21 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00017B26 01                         byte_16DD4:	dc.b 1
00017B27 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00017B2C 01                         byte_16DDA:	dc.b 1
00017B2D F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00017B32 01                         byte_16DE0:	dc.b 1
00017B33 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00017B38 01                         byte_16DE6:	dc.b 1
00017B39 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00017B3E 01                         byte_16DEC:	dc.b 1
00017B3F F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00017B44 01                         byte_16DF2:	dc.b 1
00017B45 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00017B4A 01                         byte_16DF8:	dc.b 1
00017B4B F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00017B50 01                         byte_16DFE:	dc.b 1
00017B51 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00017B56 01                         byte_16E04:	dc.b 1
00017B57 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00017B5C 01                         byte_16E0A:	dc.b 1
00017B5D F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00017B62 01                         byte_16E10:	dc.b 1
00017B63 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00017B68 01                         byte_16E16:	dc.b 1
00017B69 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00017B6E 01                         byte_16E1C:	dc.b 1
00017B6F ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00017B74 01                         byte_16E22:	dc.b 1
00017B75 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00017B7A 01                         byte_16E28:	dc.b 1
00017B7B EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00017B80                            		even
00017B80                            		even
00017B80                            
00017B80                            ; ===========================================================================
00017B80                            ; ---------------------------------------------------------------------------
00017B80                            ; Object 79 - lamppost
00017B80                            ; ---------------------------------------------------------------------------
00017B80                            
00017B80                            Obj79:					; XREF: Obj_Index
00017B80 7000                       		moveq	#0,d0
00017B82 1028 0024                  		move.b	$24(a0),d0
00017B86 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00017B8A 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00017B8E 4EFA 87B4                  		jmp	MarkObjGone
00017B92                            ; ===========================================================================
00017B92 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00017B94 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00017B96 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00017B98 0000                       		dc.w Obj79_Twirl-Obj79_Index
00017B9A                            ; ===========================================================================
00017B9A                            
00017B9A                            Obj79_Main:				; XREF: Obj79_Index
00017B9A 5428 0024                  		addq.b	#2,$24(a0)
00017B9E 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00017BA6 317C 07A0 0002             		move.w	#$7A0,2(a0)
00017BAC 117C 0004 0001             		move.b	#4,1(a0)
00017BB2 117C 0008 0019             		move.b	#8,$19(a0)
00017BB8 117C 0005 0018             		move.b	#5,$18(a0)
00017BBE 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017BC2 7000                       		moveq	#0,d0
00017BC4 1028 0023                  		move.b	$23(a0),d0
00017BC8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017BCE 0832 0000 0002             		btst	#0,2(a2,d0.w)
00017BD4 6600                       		bne.s	Obj79_RedLamp
00017BD6 1238 FE30                  		move.b	($FFFFFE30).w,d1
00017BDA 0201 007F                  		andi.b	#$7F,d1
00017BDE 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00017BE2 0202 007F                  		andi.b	#$7F,d2
00017BE6 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00017BE8 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00017BEA                            
00017BEA                            Obj79_RedLamp:
00017BEA 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017BF0 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00017BF6 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00017BFC 4E75                       		rts	
00017BFE                            ; ===========================================================================
00017BFE                            
00017BFE                            Obj79_BlueLamp:				; XREF: Obj79_Index
00017BFE 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00017C02 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00017C06 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00017C0A 6B00 0000                  		bmi.w	locret_16F90
00017C0E 1238 FE30                  		move.b	($FFFFFE30).w,d1
00017C12 0201 007F                  		andi.b	#$7F,d1
00017C16 1428 0028                  		move.b	$28(a0),d2
00017C1A 0202 007F                  		andi.b	#$7F,d2
00017C1E B202                       		cmp.b	d2,d1
00017C20 6500                       		bcs.s	Obj79_HitLamp
00017C22 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017C26 7000                       		moveq	#0,d0
00017C28 1028 0023                  		move.b	$23(a0),d0
00017C2C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017C32 117C 0004 0024             		move.b	#4,$24(a0)
00017C38 117C 0003 001A             		move.b	#3,$1A(a0)
00017C3E 6000 0000                  		bra.w	locret_16F90
00017C42                            ; ===========================================================================
00017C42                            
00017C42                            Obj79_HitLamp:
00017C42 3038 D008                  		move.w	($FFFFD008).w,d0
00017C46 9068 0008                  		sub.w	8(a0),d0
00017C4A 5040                       		addq.w	#8,d0
00017C4C 0C40 0010                  		cmpi.w	#$10,d0
00017C50 6400 0000                  		bcc.w	locret_16F90
00017C54 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017C58 9068 000C                  		sub.w	$C(a0),d0
00017C5C 0640 0040                  		addi.w	#$40,d0
00017C60 0C40 0068                  		cmpi.w	#$68,d0
00017C64 6400                       		bcc.s	locret_16F90
00017C66 303C 00A1                  		move.w	#$A1,d0
00017C6A 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play lamppost sound
00017C70 5428 0024                  		addq.b	#2,$24(a0)
00017C74 4EB9 0000 E728             		jsr	SingleObjLoad
00017C7A 6600                       		bne.s	loc_16F76
00017C7C 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00017C80 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00017C86 3368 0008 0030             		move.w	8(a0),$30(a1)
00017C8C 3368 000C 0032             		move.w	$C(a0),$32(a1)
00017C92 0469 0018 0032             		subi.w	#$18,$32(a1)
00017C98 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00017CA0 337C 07A0 0002             		move.w	#$7A0,2(a1)
00017CA6 137C 0004 0001             		move.b	#4,1(a1)
00017CAC 137C 0008 0019             		move.b	#8,$19(a1)
00017CB2 137C 0004 0018             		move.b	#4,$18(a1)
00017CB8 137C 0002 001A             		move.b	#2,$1A(a1)
00017CBE 337C 0020 0036             		move.w	#$20,$36(a1)
00017CC4                            
00017CC4                            loc_16F76:
00017CC4 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00017CCA 6100 0000                  		bsr.w	Obj79_StoreInfo
00017CCE 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017CD2 7000                       		moveq	#0,d0
00017CD4 1028 0023                  		move.b	$23(a0),d0
00017CD8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017CDE                            
00017CDE                            locret_16F90:
00017CDE 4E75                       		rts	
00017CE0                            ; ===========================================================================
00017CE0                            
00017CE0                            Obj79_AfterHit:				; XREF: Obj79_Index
00017CE0 4E75                       		rts	
00017CE2                            ; ===========================================================================
00017CE2                            
00017CE2                            Obj79_Twirl:				; XREF: Obj79_Index
00017CE2 5368 0036                  		subq.w	#1,$36(a0)
00017CE6 6A00                       		bpl.s	loc_16FA0
00017CE8 117C 0004 0024             		move.b	#4,$24(a0)
00017CEE                            
00017CEE                            loc_16FA0:
00017CEE 1028 0026                  		move.b	$26(a0),d0
00017CF2 0428 0010 0026             		subi.b	#$10,$26(a0)
00017CF8 0400 0040                  		subi.b	#$40,d0
00017CFC 4EB9 0000 2D80             		jsr	(CalcSine).l
00017D02 C3FC 0C00                  		muls.w	#$C00,d1
00017D06 4841                       		swap	d1
00017D08 D268 0030                  		add.w	$30(a0),d1
00017D0C 3141 0008                  		move.w	d1,8(a0)
00017D10 C1FC 0C00                  		muls.w	#$C00,d0
00017D14 4840                       		swap	d0
00017D16 D068 0032                  		add.w	$32(a0),d0
00017D1A 3140 000C                  		move.w	d0,$C(a0)
00017D1E 4E75                       		rts	
00017D20                            ; ===========================================================================
00017D20                            ; ---------------------------------------------------------------------------
00017D20                            ; Subroutine to	store information when you hit a lamppost
00017D20                            ; ---------------------------------------------------------------------------
00017D20                            
00017D20                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00017D20 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00017D26 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00017D2C 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
00017D32 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00017D38 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00017D3E 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00017D44 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
00017D4A 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00017D50 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00017D56 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00017D5C 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00017D62 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00017D68 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00017D6E 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00017D74 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00017D7A 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00017D80 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00017D86 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00017D8C 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00017D92 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00017D98 4E75                       		rts	
00017D9A                            
00017D9A                            ; ---------------------------------------------------------------------------
00017D9A                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00017D9A                            ; ---------------------------------------------------------------------------
00017D9A                            
00017D9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017D9A                            
00017D9A                            
00017D9A                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00017D9A 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00017DA0 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00017DA6 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00017DAC 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00017DB2 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00017DB8 4278 FE20                  		clr.w	($FFFFFE20).w
00017DBC 4238 FE1B                  		clr.b	($FFFFFE1B).w
00017DC0 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00017DC6 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00017DCC 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00017DD0 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00017DD6 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017DDC 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00017DE2 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00017DE8 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00017DEE 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00017DF4 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00017DFA 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00017E00 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00017E06 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00017E0C 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00017E12 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00017E18 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017E1E 6600                       		bne.s	loc_170E4
00017E20 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00017E26 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017E2C 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00017E32                            
00017E32                            loc_170E4:
00017E32 4A38 FE30                  		tst.b	($FFFFFE30).w
00017E36 6A00                       		bpl.s	locret_170F6
00017E38 3038 FE32                  		move.w	($FFFFFE32).w,d0
00017E3C 0440 00A0                  		subi.w	#$A0,d0
00017E40 31C0 F728                  		move.w	d0,($FFFFF728).w
00017E44                            
00017E44                            locret_170F6:
00017E44 4E75                       		rts	
00017E46                            ; End of function Obj79_LoadInfo
00017E46                            
00017E46                            ; ===========================================================================
00017E46                            ; ---------------------------------------------------------------------------
00017E46                            ; Sprite mappings - lamppost
00017E46                            ; ---------------------------------------------------------------------------
00017E46                            Map_obj79:
00017E46                            	include "_maps\obj79.asm"
00017E46                            ; ---------------------------------------------------------------------------
00017E46                            ; Sprite mappings - lamppost
00017E46                            ; ---------------------------------------------------------------------------
00017E46 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00017E4A 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00017E4E 06                         byte_17100:	dc.b 6
00017E4F E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017E54 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017E59 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017E5E F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017E63 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00017E68 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00017E6D 04                         byte_1711F:	dc.b 4
00017E6E E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017E73 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017E78 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017E7D F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017E82 02                         byte_17134:	dc.b 2
00017E83 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00017E88 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00017E8D 06                         byte_1713F:	dc.b 6
00017E8E E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017E93 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017E98 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017E9D F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017EA2 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00017EA7 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00017EAC                            		even
00017EAC                            		even
00017EAC                            
00017EAC                            ; ===========================================================================
00017EAC                            ; ---------------------------------------------------------------------------
00017EAC                            ; Object 7D - hidden points at the end of a level
00017EAC                            ; ---------------------------------------------------------------------------
00017EAC                            
00017EAC                            Obj7D:					; XREF: Obj_Index
00017EAC 7000                       		moveq	#0,d0
00017EAE 1028 0024                  		move.b	$24(a0),d0
00017EB2 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00017EB6 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00017EBA                            ; ===========================================================================
00017EBA 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00017EBC 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00017EBE                            ; ===========================================================================
00017EBE                            
00017EBE                            Obj7D_Main:				; XREF: Obj7D_Index
00017EBE 7410                       		moveq	#$10,d2
00017EC0 3602                       		move.w	d2,d3
00017EC2 D643                       		add.w	d3,d3
00017EC4 43F8 D000                  		lea	($FFFFD000).w,a1
00017EC8 3029 0008                  		move.w	8(a1),d0
00017ECC 9068 0008                  		sub.w	8(a0),d0
00017ED0 D042                       		add.w	d2,d0
00017ED2 B043                       		cmp.w	d3,d0
00017ED4 6400                       		bcc.s	Obj7D_ChkDel
00017ED6 3229 000C                  		move.w	$C(a1),d1
00017EDA 9268 000C                  		sub.w	$C(a0),d1
00017EDE D242                       		add.w	d2,d1
00017EE0 B243                       		cmp.w	d3,d1
00017EE2 6400                       		bcc.s	Obj7D_ChkDel
00017EE4 4A78 FE08                  		tst.w	($FFFFFE08).w
00017EE8 6600                       		bne.s	Obj7D_ChkDel
00017EEA 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00017EEE 6600                       		bne.s	Obj7D_ChkDel
00017EF0 5428 0024                  		addq.b	#2,$24(a0)
00017EF4 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00017EFC 317C 84B6 0002             		move.w	#$84B6,2(a0)
00017F02 0028 0004 0001             		ori.b	#4,1(a0)
00017F08 117C 0000 0018             		move.b	#0,$18(a0)
00017F0E 117C 0010 0019             		move.b	#$10,$19(a0)
00017F14 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00017F1A 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00017F20 303C 00C9                  		move.w	#$C9,d0
00017F24 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play bonus sound
00017F2A 7000                       		moveq	#0,d0
00017F2C 1028 0028                  		move.b	$28(a0),d0
00017F30 D040                       		add.w	d0,d0
00017F32 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00017F36 4EB9 0000 0000             		jsr	AddPoints
00017F3C                            
00017F3C                            Obj7D_ChkDel:
00017F3C 3028 0008                  		move.w	8(a0),d0
00017F40 0240 FF80                  		andi.w	#$FF80,d0
00017F44 3238 F700                  		move.w	($FFFFF700).w,d1
00017F48 0441 0080                  		subi.w	#$80,d1
00017F4C 0241 FF80                  		andi.w	#$FF80,d1
00017F50 9041                       		sub.w	d1,d0
00017F52 0C40 0280                  		cmpi.w	#$280,d0
00017F56 6200                       		bhi.s	Obj7D_Delete
00017F58 4E75                       		rts	
00017F5A                            ; ===========================================================================
00017F5A                            
00017F5A                            Obj7D_Delete:
00017F5A 4EF9 0000 E2DE             		jmp	DeleteObject
00017F60                            ; ===========================================================================
00017F60 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00017F62 03E8                       		dc.w 1000
00017F64 0064                       		dc.w 100
00017F66 0001                       		dc.w 1
00017F68                            ; ===========================================================================
00017F68                            
00017F68                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00017F68 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00017F6C 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00017F6E 3028 0008                  		move.w	8(a0),d0
00017F72 0240 FF80                  		andi.w	#-$80,d0
00017F76 3238 F700                  		move.w	($FFFFF700).w,d1
00017F7A 0441 0080                  		subi.w	#$80,d1
00017F7E 0241 FF80                  		andi.w	#-$80,d1
00017F82 9041                       		sub.w	d1,d0
00017F84 0C40 0280                  		cmpi.w	#$280,d0
00017F88 6200                       		bhi.s	Obj7D_Delete2
00017F8A 4EF9 0000 E2A2             		jmp	DisplaySprite
00017F90                            ; ===========================================================================
00017F90                            
00017F90                            Obj7D_Delete2:
00017F90 4EF9 0000 E2DE             		jmp	DeleteObject
00017F96                            ; ===========================================================================
00017F96                            ; ---------------------------------------------------------------------------
00017F96                            ; Sprite mappings - hidden points at the end of	a level
00017F96                            ; ---------------------------------------------------------------------------
00017F96                            Map_obj7D:
00017F96                            	include "_maps\obj7D.asm"
00017F96                            ; ---------------------------------------------------------------------------
00017F96                            ; Sprite mappings - hidden points at the end of	a level
00017F96                            ; ---------------------------------------------------------------------------
00017F96 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00017F9A 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00017F9E 00                         byte_17250:	dc.b 0
00017F9F 01                         byte_17251:	dc.b 1
00017FA0 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017FA5 01                         byte_17257:	dc.b 1
00017FA6 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00017FAB 01                         byte_1725D:	dc.b 1
00017FAC F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017FB2 00                         		even
00017FB2 00                         		even
00017FB2                            
00017FB2                            ; ===========================================================================
00017FB2                            ; ---------------------------------------------------------------------------
00017FB2                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017FB2                            ; ---------------------------------------------------------------------------
00017FB2                            
00017FB2                            Obj8A:					; XREF: Obj_Index
00017FB2 7000                       		moveq	#0,d0
00017FB4 1028 0024                  		move.b	$24(a0),d0
00017FB8 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00017FBC 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00017FC0                            ; ===========================================================================
00017FC0 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00017FC2 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017FC4                            ; ===========================================================================
00017FC4                            
00017FC4                            Obj8A_Main:				; XREF: Obj8A_Index
00017FC4 5428 0024                  		addq.b	#2,$24(a0)
00017FC8 317C 0120 0008             		move.w	#$120,8(a0)
00017FCE 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017FD4 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00017FDC 317C 05A0 0002             		move.w	#$5A0,2(a0)
00017FE2 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00017FE6 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00017FEA 117C 0000 0001             		move.b	#0,1(a0)
00017FF0 117C 0000 0018             		move.b	#0,$18(a0)
00017FF6 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00017FFC 6600                       		bne.s	Obj8A_Display	; if not, branch
00017FFE 317C 00A6 0002             		move.w	#$A6,2(a0)
00018004 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
0001800A 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
0001800E 6700                       		beq.s	Obj8A_Display	; if not, branch
00018010 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00018016 6600                       		bne.s	Obj8A_Display	; if not, branch
00018018 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
0001801E 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00018024 4EF9 0000 E2DE             		jmp	DeleteObject
0001802A                            ; ===========================================================================
0001802A                            
0001802A                            Obj8A_Display:				; XREF: Obj8A_Index
0001802A 4EF9 0000 E2A2             		jmp	DisplaySprite
00018030                            ; ===========================================================================
00018030                            ; ---------------------------------------------------------------------------
00018030                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00018030                            ; ---------------------------------------------------------------------------
00018030                            Map_obj8A:
00018030                            	include "_maps\obj8A.asm"
00018030                            Map_ca8f:
00018030 0000                       Map_ca8f_0: 	dc.w Map_ca8f_16-Map_ca8f
00018032 0000                       Map_ca8f_2: 	dc.w Map_ca8f_3F-Map_ca8f
00018034 0000                       Map_ca8f_4: 	dc.w Map_ca8f_90-Map_ca8f
00018036 0000                       Map_ca8f_6: 	dc.w Map_ca8f_C3-Map_ca8f
00018038 0000                       Map_ca8f_8: 	dc.w Map_ca8f_13C-Map_ca8f
0001803A 0000                       Map_ca8f_A: 	dc.w Map_ca8f_1A1-Map_ca8f
0001803C 0000                       Map_ca8f_C: 	dc.w Map_ca8f_224-Map_ca8f
0001803E 0000                       Map_ca8f_E: 	dc.w Map_ca8f_298-Map_ca8f
00018040 0000                       Map_ca8f_10: 	dc.w Map_ca8f_334-Map_ca8f
00018042 0000                       Map_ca8f_12: 	dc.w Map_ca8f_380-Map_ca8f
00018044 0000                       Map_ca8f_14: 	dc.w Map_ca8f_3A9-Map_ca8f
00018046 0000                       Map_ca8f_tm: 	dc.w Map_ca8f_tmss-Map_ca8f
00018048 08                         Map_ca8f_16: 	dc.b $8
00018049 CC05 803E BD               	dc.b $CC, $5, $80, $3E, $BD
0001804E E205 800E CD               	dc.b $E2, $5, $80, $E, $CD
00018053 F305 8004 DE               	dc.b $F3, $5, $80, $4, $DE
00018058 0409 8008 EF               	dc.b $4, $9, $80, $8, $EF
0001805D B205 000E E5               	dc.b $B2, $5, $0, $E, $E5
00018062 B205 0012 F5               	dc.b $B2, $5, $0, $12, $F5
00018067 B301 0016 08               	dc.b $B3, $1, $0, $16, $8
0001806C B309 001C 0A               	dc.b $B3, $9, $0, $1C, $A
00018071 10                         Map_ca8f_3F: 	dc.b $10
00018072 D805 0000 80               	dc.b $D8, $5, $0, $0, $80
00018077 D805 0004 90               	dc.b $D8, $5, $0, $4, $90
0001807C D809 0008 A0               	dc.b $D8, $9, $0, $8, $A0
00018081 D805 000E B4               	dc.b $D8, $5, $0, $E, $B4
00018086 D805 0012 D0               	dc.b $D8, $5, $0, $12, $D0
0001808B D805 0016 E0               	dc.b $D8, $5, $0, $16, $E0
00018090 D805 0004 F0               	dc.b $D8, $5, $0, $4, $F0
00018095 D805 001A 00               	dc.b $D8, $5, $0, $1A, $0
0001809A 0805 001E C8               	dc.b $8, $5, $0, $1E, $C8
0001809F 0805 0004 D8               	dc.b $8, $5, $0, $4, $D8
000180A4 0805 0022 E8               	dc.b $8, $5, $0, $22, $E8
000180A9 0805 0026 F8               	dc.b $8, $5, $0, $26, $F8
000180AE 0805 0016 08               	dc.b $8, $5, $0, $16, $8
000180B3 0805 002A 20               	dc.b $8, $5, $0, $2A, $20
000180B8 0805 0004 30               	dc.b $8, $5, $0, $4, $30
000180BD 0805 002E 44               	dc.b $8, $5, $0, $2E, $44
000180C2 0A                         Map_ca8f_90: 	dc.b $A
000180C3 D805 0012 80               	dc.b $D8, $5, $0, $12, $80
000180C8 D805 0022 90               	dc.b $D8, $5, $0, $22, $90
000180CD D805 0026 A0               	dc.b $D8, $5, $0, $26, $A0
000180D2 D805 0000 B0               	dc.b $D8, $5, $0, $0, $B0
000180D7 D805 0022 C0               	dc.b $D8, $5, $0, $22, $C0
000180DC D805 0004 D0               	dc.b $D8, $5, $0, $4, $D0
000180E1 D809 0008 E0               	dc.b $D8, $9, $0, $8, $E0
000180E6 0805 002A E8               	dc.b $8, $5, $0, $2A, $E8
000180EB 0805 0032 F8               	dc.b $8, $5, $0, $32, $F8
000180F0 0805 0036 08               	dc.b $8, $5, $0, $36, $8
000180F5 18                         Map_ca8f_C3: 	dc.b $18
000180F6 D805 001E 88               	dc.b $D8, $5, $0, $1E, $88
000180FB D805 003A 98               	dc.b $D8, $5, $0, $3A, $98
00018100 D805 0004 A8               	dc.b $D8, $5, $0, $4, $A8
00018105 D805 0022 B8               	dc.b $D8, $5, $0, $22, $B8
0001810A D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
0001810F D805 001E D8               	dc.b $D8, $5, $0, $1E, $D8
00018114 D805 003E E8               	dc.b $D8, $5, $0, $3E, $E8
00018119 D805 000E F8               	dc.b $D8, $5, $0, $E, $F8
0001811E D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00018123 D805 0042 20               	dc.b $D8, $5, $0, $42, $20
00018128 D805 000E 30               	dc.b $D8, $5, $0, $E, $30
0001812D D805 002E 40               	dc.b $D8, $5, $0, $2E, $40
00018132 D801 0046 50               	dc.b $D8, $1, $0, $46, $50
00018137 D805 0000 58               	dc.b $D8, $5, $0, $0, $58
0001813C D805 001A 68               	dc.b $D8, $5, $0, $1A, $68
00018141 0805 0048 C0               	dc.b $8, $5, $0, $48, $C0
00018146 0801 0046 D0               	dc.b $8, $1, $0, $46, $D0
0001814B 0805 0000 D8               	dc.b $8, $5, $0, $0, $D8
00018150 0801 0046 E8               	dc.b $8, $1, $0, $46, $E8
00018155 0805 002E F0               	dc.b $8, $5, $0, $2E, $F0
0001815A 0805 0016 00               	dc.b $8, $5, $0, $16, $0
0001815F 0805 0004 10               	dc.b $8, $5, $0, $4, $10
00018164 0805 001A 20               	dc.b $8, $5, $0, $1A, $20
00018169 0805 0042 30               	dc.b $8, $5, $0, $42, $30
0001816E 14                         Map_ca8f_13C: 	dc.b $14
0001816F D005 0042 A0               	dc.b $D0, $5, $0, $42, $A0
00018174 D005 000E B0               	dc.b $D0, $5, $0, $E, $B0
00018179 D005 002E C0               	dc.b $D0, $5, $0, $2E, $C0
0001817E D001 0046 D0               	dc.b $D0, $1, $0, $46, $D0
00018183 D005 0000 D8               	dc.b $D0, $5, $0, $0, $D8
00018188 D005 001A E8               	dc.b $D0, $5, $0, $1A, $E8
0001818D 0005 004C E8               	dc.b $0, $5, $0, $4C, $E8
00018192 0001 0046 F8               	dc.b $0, $1, $0, $46, $F8
00018197 0005 001A 04               	dc.b $0, $5, $0, $1A, $4
0001819C 0005 002A 14               	dc.b $0, $5, $0, $2A, $14
000181A1 0005 0004 24               	dc.b $0, $5, $0, $4, $24
000181A6 2005 0012 D0               	dc.b $20, $5, $0, $12, $D0
000181AB 2005 003A E0               	dc.b $20, $5, $0, $3A, $E0
000181B0 2005 000E F0               	dc.b $20, $5, $0, $E, $F0
000181B5 2005 001A 00               	dc.b $20, $5, $0, $1A, $0
000181BA 2001 0046 10               	dc.b $20, $1, $0, $46, $10
000181BF 2005 0050 18               	dc.b $20, $5, $0, $50, $18
000181C4 2005 0022 30               	dc.b $20, $5, $0, $22, $30
000181C9 2001 0046 40               	dc.b $20, $1, $0, $46, $40
000181CE 2005 000E 48               	dc.b $20, $5, $0, $E, $48
000181D3 1A                         Map_ca8f_1A1: 	dc.b $1A
000181D4 D805 002E 98               	dc.b $D8, $5, $0, $2E, $98
000181D9 D805 0026 A8               	dc.b $D8, $5, $0, $26, $A8
000181DE D805 0032 B8               	dc.b $D8, $5, $0, $32, $B8
000181E3 D805 001A C8               	dc.b $D8, $5, $0, $1A, $C8
000181E8 D805 0054 D8               	dc.b $D8, $5, $0, $54, $D8
000181ED D805 0012 F8               	dc.b $D8, $5, $0, $12, $F8
000181F2 D805 0022 08               	dc.b $D8, $5, $0, $22, $8
000181F7 D805 0026 18               	dc.b $D8, $5, $0, $26, $18
000181FC D805 0042 28               	dc.b $D8, $5, $0, $42, $28
00018201 D805 0032 38               	dc.b $D8, $5, $0, $32, $38
00018206 D805 001E 48               	dc.b $D8, $5, $0, $1E, $48
0001820B D805 000E 58               	dc.b $D8, $5, $0, $E, $58
00018210 0809 0008 88               	dc.b $8, $9, $0, $8, $88
00018215 0805 0004 9C               	dc.b $8, $5, $0, $4, $9C
0001821A 0805 002E AC               	dc.b $8, $5, $0, $2E, $AC
0001821F 0805 0004 BC               	dc.b $8, $5, $0, $4, $BC
00018224 0805 003E CC               	dc.b $8, $5, $0, $3E, $CC
00018229 0805 0026 DC               	dc.b $8, $5, $0, $26, $DC
0001822E 0805 001A F8               	dc.b $8, $5, $0, $1A, $F8
00018233 0805 0004 08               	dc.b $8, $5, $0, $4, $8
00018238 0805 0058 18               	dc.b $8, $5, $0, $58, $18
0001823D 0805 0004 28               	dc.b $8, $5, $0, $4, $28
00018242 0809 0008 38               	dc.b $8, $9, $0, $8, $38
00018247 0805 0032 4C               	dc.b $8, $5, $0, $32, $4C
0001824C 0805 0022 5C               	dc.b $8, $5, $0, $22, $5C
00018251 0805 0004 6C               	dc.b $8, $5, $0, $4, $6C
00018256 17                         Map_ca8f_224: 	dc.b $17
00018257 D005 002E 98               	dc.b $D0, $5, $0, $2E, $98
0001825C D005 0026 A8               	dc.b $D0, $5, $0, $26, $A8
00018261 D005 0032 B8               	dc.b $D0, $5, $0, $32, $B8
00018266 D005 001A C8               	dc.b $D0, $5, $0, $1A, $C8
0001826B D005 0054 D8               	dc.b $D0, $5, $0, $54, $D8
00018270 D005 0012 F8               	dc.b $D0, $5, $0, $12, $F8
00018275 D005 0022 08               	dc.b $D0, $5, $0, $22, $8
0001827A D005 0026 18               	dc.b $D0, $5, $0, $26, $18
0001827F D005 0000 28               	dc.b $D0, $5, $0, $0, $28
00018284 D005 0022 38               	dc.b $D0, $5, $0, $22, $38
00018289 D005 0004 48               	dc.b $D0, $5, $0, $4, $48
0001828E D009 0008 58               	dc.b $D0, $9, $0, $8, $58
00018293 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00018298 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
0001829D 0009 0008 E8               	dc.b $0, $9, $0, $8, $E8
000182A2 0001 0046 FC               	dc.b $0, $1, $0, $46, $FC
000182A7 0005 003E 04               	dc.b $0, $5, $0, $3E, $4
000182AC 0005 0004 14               	dc.b $0, $5, $0, $4, $14
000182B1 2009 0008 D0               	dc.b $20, $9, $0, $8, $D0
000182B6 2005 0004 E4               	dc.b $20, $5, $0, $4, $E4
000182BB 2005 001E F4               	dc.b $20, $5, $0, $1E, $F4
000182C0 2005 0058 04               	dc.b $20, $5, $0, $58, $4
000182C5 2005 002A 14               	dc.b $20, $5, $0, $2A, $14
000182CA 1F                         Map_ca8f_298: 	dc.b $1F
000182CB D805 002E 80               	dc.b $D8, $5, $0, $2E, $80
000182D0 D805 0012 90               	dc.b $D8, $5, $0, $12, $90
000182D5 D805 000E A0               	dc.b $D8, $5, $0, $E, $A0
000182DA D805 001E B0               	dc.b $D8, $5, $0, $1E, $B0
000182DF D801 0046 C0               	dc.b $D8, $1, $0, $46, $C0
000182E4 D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
000182E9 D805 0016 D8               	dc.b $D8, $5, $0, $16, $D8
000182EE D805 003E F8               	dc.b $D8, $5, $0, $3E, $F8
000182F3 D805 003A 08               	dc.b $D8, $5, $0, $3A, $8
000182F8 D805 0004 18               	dc.b $D8, $5, $0, $4, $18
000182FD D805 001A 28               	dc.b $D8, $5, $0, $1A, $28
00018302 D805 0058 38               	dc.b $D8, $5, $0, $58, $38
00018307 D805 002E 48               	dc.b $D8, $5, $0, $2E, $48
0001830C 0005 005C B0               	dc.b $0, $5, $0, $5C, $B0
00018311 0005 0032 C0               	dc.b $0, $5, $0, $32, $C0
00018316 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
0001831B 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00018320 0005 0026 E8               	dc.b $0, $5, $0, $26, $E8
00018325 0009 0008 00               	dc.b $0, $9, $0, $8, $0
0001832A 0001 0046 14               	dc.b $0, $1, $0, $46, $14
0001832F 0005 001A 1C               	dc.b $0, $5, $0, $1A, $1C
00018334 0005 000E 2C               	dc.b $0, $5, $0, $E, $2C
00018339 0005 0000 3C               	dc.b $0, $5, $0, $0, $3C
0001833E 0001 0046 4C               	dc.b $0, $1, $0, $46, $4C
00018343 0005 002E 54               	dc.b $0, $5, $0, $2E, $54
00018348 0005 003A 64               	dc.b $0, $5, $0, $3A, $64
0001834D 0001 0046 74               	dc.b $0, $1, $0, $46, $74
00018352 2005 0012 F8               	dc.b $20, $5, $0, $12, $F8
00018357 2005 0004 08               	dc.b $20, $5, $0, $4, $8
0001835C 2005 0012 18               	dc.b $20, $5, $0, $12, $18
00018361 2005 0004 28               	dc.b $20, $5, $0, $4, $28
00018366 0F                         Map_ca8f_334: 	dc.b $F
00018367 F805 0012 80               	dc.b $F8, $5, $0, $12, $80
0001836C F805 0022 90               	dc.b $F8, $5, $0, $22, $90
00018371 F805 000E A0               	dc.b $F8, $5, $0, $E, $A0
00018376 F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
0001837B F805 000E C0               	dc.b $F8, $5, $0, $E, $C0
00018380 F805 001A D0               	dc.b $F8, $5, $0, $1A, $D0
00018385 F805 003E E0               	dc.b $F8, $5, $0, $3E, $E0
0001838A F805 000E F0               	dc.b $F8, $5, $0, $E, $F0
0001838F F805 0042 00               	dc.b $F8, $5, $0, $42, $0
00018394 F805 0048 18               	dc.b $F8, $5, $0, $48, $18
00018399 F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
0001839E F805 002E 40               	dc.b $F8, $5, $0, $2E, $40
000183A3 F805 000E 50               	dc.b $F8, $5, $0, $E, $50
000183A8 F805 0000 60               	dc.b $F8, $5, $0, $0, $60
000183AD F805 0004 70               	dc.b $F8, $5, $0, $4, $70
000183B2 08                         Map_ca8f_380: 	dc.b $8
000183B3 3005 003E C0               	dc.b $30, $5, $0, $3E, $C0
000183B8 3005 0022 D0               	dc.b $30, $5, $0, $22, $D0
000183BD 3005 002A E0               	dc.b $30, $5, $0, $2A, $E0
000183C2 3005 0004 F8               	dc.b $30, $5, $0, $4, $F8
000183C7 3005 0000 08               	dc.b $30, $5, $0, $0, $8
000183CC 3005 0004 18               	dc.b $30, $5, $0, $4, $18
000183D1 3001 0046 28               	dc.b $30, $1, $0, $46, $28
000183D6 3005 001A 30               	dc.b $30, $5, $0, $1A, $30
000183DB 20                         Map_ca8f_3A9: 	dc.b $20
000183DC ED05 002E BF               	dc.b $ED, $5, $0, $2E, $BF
000183E1 ED05 0026 CD               	dc.b $ED, $5, $0, $26, $CD
000183E6 ED09 0008 DD               	dc.b $ED, $9, $0, $8, $DD
000183EB ED05 000E F1               	dc.b $ED, $5, $0, $E, $F1
000183F0 ED05 0026 00               	dc.b $ED, $5, $0, $26, $0
000183F5 ED05 001A 10               	dc.b $ED, $5, $0, $1A, $10
000183FA ED05 000E 1F               	dc.b $ED, $5, $0, $E, $1F
000183FF FD05 0012 BF               	dc.b $FD, $5, $0, $12, $BF
00018404 FD05 0016 CE               	dc.b $FD, $5, $0, $16, $CE
00018409 FD05 000E DD               	dc.b $FD, $5, $0, $E, $DD
0001840E FD05 0004 EC               	dc.b $FD, $5, $0, $4, $EC
00018413 FD05 002E FC               	dc.b $FD, $5, $0, $2E, $FC
00018418 FD05 000E 0A               	dc.b $FD, $5, $0, $E, $A
0001841D 0D05 0004 BE               	dc.b $D, $5, $0, $4, $BE
00018422 0D05 0054 CE               	dc.b $D, $5, $0, $54, $CE
00018427 0D05 0054 DD               	dc.b $D, $5, $0, $54, $DD
0001842C 0D05 0032 F2               	dc.b $D, $5, $0, $32, $F2
00018431 0D05 001A 02               	dc.b $D, $5, $0, $1A, $2
00018436 0D05 0054 11               	dc.b $D, $5, $0, $54, $11
0001843B 0D05 002A 20               	dc.b $D, $5, $0, $2A, $20
00018440 0D01 0046 30               	dc.b $D, $1, $0, $46, $30
00018445 0D05 001A 38               	dc.b $D, $5, $0, $1A, $38
0001844A 0D05 0000 47               	dc.b $D, $5, $0, $0, $47
0001844F 1D05 003E BE               	dc.b $1D, $5, $0, $3E, $BE
00018454 1D05 0026 CE               	dc.b $1D, $5, $0, $26, $CE
00018459 1D05 003E E4               	dc.b $1D, $5, $0, $3E, $E4
0001845E 1D05 003A F4               	dc.b $1D, $5, $0, $3A, $F4
00018463 1D05 000E 04               	dc.b $1D, $5, $0, $E, $4
00018468 1D05 000E 2A               	dc.b $1D, $5, $0, $E, $2A
0001846D 1D05 0022 1A               	dc.b $1D, $5, $0, $22, $1A
00018472 1D05 0012 39               	dc.b $1D, $5, $0, $12, $39
00018477 1D05 0026 48               	dc.b $1D, $5, $0, $26, $48
0001847C 1C                         Map_ca8f_tmss:	dc.b 28
0001850A 00                         	even
0001850A 00                         	even
0001850A                            
0001850A                            ; ===========================================================================
0001850A                            ; ---------------------------------------------------------------------------
0001850A                            ; Object 3D - matthew boss - modified by GK89
0001850A                            ; ---------------------------------------------------------------------------
0001850A                            
0001850A                            Obj3D:					; XREF: Obj_Index
0001850A 7000                       		moveq	#0,d0
0001850C 1028 0024                  		move.b	$24(a0),d0
00018510 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00018514 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00018518                            ; ===========================================================================
00018518 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
0001851A 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
0001851C 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
0001851E 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00018520                            
00018520 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00018522 0401                       		dc.b 4,	1
00018524 0607                       		dc.b 6,	7
00018526                            ; ===========================================================================
00018526                            
00018526                            Obj3D_Main:				; XREF: Obj3D_Index
00018526 45F9 0001 8520             		lea	(Obj3D_ObjData).l,a2
0001852C 2248                       		movea.l	a0,a1
0001852E 7202                       		moveq	#2,d1
00018530 6000                       		bra.s	Obj3D_LoadBoss
00018532                            ; ===========================================================================
00018532                            
00018532                            Obj3D_Loop:
00018532 4EB9 0000 E73E             		jsr	SingleObjLoad2
00018538 6600                       		bne.s	loc_17772
0001853A                            
0001853A                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
0001853A 135A 0024                  		move.b	(a2)+,$24(a1)
0001853E 12BC 003D                  		move.b	#$3D,0(a1)
00018542 3368 0008 0008             		move.w	8(a0),8(a1)
00018548 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001854E 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00018556 337C 0400 0002             		move.w	#$400,2(a1)
0001855C 137C 0004 0001             		move.b	#4,1(a1)
00018562 137C 0020 0019             		move.b	#$20,$19(a1)
00018568 137C 0003 0018             		move.b	#3,$18(a1)
0001856E 135A 001C                  		move.b	(a2)+,$1C(a1)
00018572 2348 0034                  		move.l	a0,$34(a1)
00018576 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
0001857A                            
0001857A                            loc_17772:
0001857A 3168 0008 0030             		move.w	8(a0),$30(a0)
00018580 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018586 117C 000F 0020             		move.b	#$F,$20(a0)
0001858C 117C 0028 0021             		move.b	#$28,$21(a0)	; set number of	hits to	8
00018592                            
00018592                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00018592 7000                       		moveq	#0,d0
00018594 1028 0025                  		move.b	$25(a0),d0
00018598 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
0001859C 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
000185A0 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000185A6 4EB9 0000 B2FA             		jsr	AnimateSprite
000185AC 1028 0022                  		move.b	$22(a0),d0
000185B0 0200 0003                  		andi.b	#3,d0
000185B4 0228 00FC 0001             		andi.b	#$FC,1(a0)
000185BA 8128 0001                  		or.b	d0,1(a0)
000185BE 4EF9 0000 E2A2             		jmp	DisplaySprite
000185C4                            ; ===========================================================================
000185C4 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
000185C6 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
000185C8 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
000185CA 0000                       		dc.w loc_17954-Obj3D_ShipIndex
000185CC 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
000185CE 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
000185D0 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
000185D2                            ; ===========================================================================
000185D2                            
000185D2                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
000185D2 4EB9 0000 0000             		jsr    Obj3D_ShipMove
000185D8 6100 0000                  		bsr.w	BossMove
000185DC 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
000185E2 6600                       		bne.s	loc_177E6
000185E4 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
000185EA 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
000185EE                            
000185EE                            loc_177E6:
000185EE 1028 003F                  		move.b	$3F(a0),d0
000185F2 4EB9 0000 2D80             		jsr	(CalcSine).l
000185F8 EC40                       		asr.w	#6,d0
000185FA D068 0038                  		add.w	$38(a0),d0
000185FE 3140 000C                  		move.w	d0,$C(a0)
00018602 3168 0030 0008             		move.w	$30(a0),8(a0)
00018608 5428 003F                  		addq.b	#2,$3F(a0)
0001860C 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00018612 6400                       		bcc.s	locret_1784A
00018614 4A28 0022                  		tst.b	$22(a0)
00018618 6B00                       		bmi.s	loc_1784C
0001861A 4A28 0020                  		tst.b	$20(a0)
0001861E 6600                       		bne.s	locret_1784A
00018620 4A28 003E                  		tst.b	$3E(a0)
00018624 6600                       		bne.s	Obj3D_ShipFlash
00018626 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001862C 303C 00AC                  		move.w	#$AC,d0
00018630 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018636                            
00018636                            Obj3D_ShipFlash:
00018636 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
0001863A 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001863C 4A51                       		tst.w	(a1)
0001863E 6600                       		bne.s	loc_1783C
00018640 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00018644                            
00018644                            loc_1783C:
00018644 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00018646 5328 003E                  		subq.b	#1,$3E(a0)
0001864A 6600                       		bne.s	locret_1784A
0001864C 117C 000F 0020             		move.b	#$F,$20(a0)
00018652                            
00018652                            locret_1784A:
00018652 4E75                       		rts	
00018654                            ; ===========================================================================
00018654                            
00018654                            loc_1784C:				; XREF: loc_177E6
00018654 7064                       		moveq	#100,d0
00018656 6100 0000                  		bsr.w	AddPoints
0001865A 117C 0008 0025             		move.b	#8,$25(a0)
00018660 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00018666 4E75                       		rts	
00018668                            
00018668                            ; ---------------------------------------------------------------------------
00018668                            ; Defeated boss	subroutine
00018668                            ; ---------------------------------------------------------------------------
00018668                            
00018668                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018668                            
00018668                            
00018668                            BossDefeated:
00018668 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001866C 0200 0007                  		andi.b	#7,d0
00018670 6600                       		bne.s	locret_178A2
00018672 4EB9 0000 E728             		jsr	SingleObjLoad
00018678 6600                       		bne.s	locret_178A2
0001867A 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001867E 3368 0008 0008             		move.w	8(a0),8(a1)
00018684 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001868A 4EB9 0000 2D5A             		jsr	(RandomNumber).l
00018690 3200                       		move.w	d0,d1
00018692 7200                       		moveq	#0,d1
00018694 1200                       		move.b	d0,d1
00018696 E409                       		lsr.b	#2,d1
00018698 0441 0020                  		subi.w	#$20,d1
0001869C D369 0008                  		add.w	d1,8(a1)
000186A0 E048                       		lsr.w	#8,d0
000186A2 E608                       		lsr.b	#3,d0
000186A4 D169 000C                  		add.w	d0,$C(a1)
000186A8                            
000186A8                            locret_178A2:
000186A8 4E75                       		rts	
000186AA                            ; End of function BossDefeated
000186AA                            
000186AA                            ; ---------------------------------------------------------------------------
000186AA                            ; Subroutine to	move a boss
000186AA                            ; ---------------------------------------------------------------------------
000186AA                            
000186AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000186AA                            
000186AA                            
000186AA                            BossMove:
000186AA 2428 0030                  		move.l	$30(a0),d2
000186AE 2628 0038                  		move.l	$38(a0),d3
000186B2 3028 0010                  		move.w	$10(a0),d0
000186B6 48C0                       		ext.l	d0
000186B8 E180                       		asl.l	#8,d0
000186BA D480                       		add.l	d0,d2
000186BC 3028 0012                  		move.w	$12(a0),d0
000186C0 48C0                       		ext.l	d0
000186C2 E180                       		asl.l	#8,d0
000186C4 D680                       		add.l	d0,d3
000186C6 2142 0030                  		move.l	d2,$30(a0)
000186CA 2143 0038                  		move.l	d3,$38(a0)
000186CE 4E75                       		rts	
000186D0                            ; End of function BossMove
000186D0                            
000186D0                            ; ===========================================================================
000186D0                            
000186D0                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex		
000186D0 6100 FFD8                  		bsr.w	BossMove
000186D4 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
000186DA 6600                       		bne.s	loc_17916
000186DC 317C 0000 0010             		move.w	#0,$10(a0)
000186E2 317C 0000 0012             		move.w	#0,$12(a0)
000186E8 5428 0025                  		addq.b	#2,$25(a0)
000186EC 4EB9 0000 E73E             		jsr	SingleObjLoad2
000186F2 6600                       		bne.s	loc_17910
000186F4 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
000186F8 3368 0030 0008             		move.w	$30(a0),8(a1)
000186FE 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018704 2348 0034                  		move.l	a0,$34(a1)
00018708                            
00018708                            loc_17910:
00018708 317C 0077 003C             		move.w	#$77,$3C(a0)
0001870E                            
0001870E                            loc_17916:
0001870E 6000 FEDE                  		bra.w	loc_177E6
00018712                            ; ===========================================================================
00018712                            
00018712                            Obj3D_ShipMove:				; XREF:  sonic follow move
00018712 5368 003C                  		subq.w	#1,$3C(a0)
00018716 4EB9 0000 0000             		jsr 	Obj3D_UpStuff
0001871C 5428 0025                  		addq.b	#2,$25(a0)
00018720 317C 003F 003C             		move.w	#$3F,$3C(a0)
00018726 3038 D008                  		move.w	($FFFFD008).w,d0	 
0001872A 9068 0008                  		sub.w	8(a0),d0		 
0001872E 6A00                       		bpl.s	Obj3D_left			 
00018730 08A8 0000 0022             		bclr	#0,$22(a0)		 
00018736 6000                       		bra.s	Obj3D_right		 
00018738 08A8 0005 0022             		bclr	#5,$22(a0)
0001873E 4EB9 0000 0000              		jsr     loc_17950
00018744 4E75                       		rts
00018746                            ; ===========================================================================
00018746                            
00018746                            Obj3D_right:
00018746 317C FF00 0010             		move.w	#-$100,$10(a0)	
0001874C 4E75                       		Rts
0001874E                            
0001874E                            Obj3D_left:
0001874E 317C 0100 0010             		move.w	#$100,$10(a0)	 
00018754 0828 0000 0022             		btst	#0,$22(a0)	; is matt facing	left?
0001875A 6600                       		bne.s	RTSboss  	; if not, branch
0001875C 0868 0000 0022              		bchg	#0,$22(a0)
00018762                            
00018762                            RTSboss:	    
00018762 4E75                       		rts
00018764                             ; ===========================================================================
00018764                            
00018764                            Obj3D_UpStuff:
00018764 3038 D00C                  		move.w	($FFFFD00C).w,d0	 
00018768 9068 000C                  		sub.w	$C(a0),d0		 
0001876C 6A00                       		bpl.s	Obj3D_down			 
0001876E 6000                        		bra.s	Obj3D_up		 
00018770 08A8 0005 0022             		bclr	#5,$22(a0)
00018776                             
00018776                            Obj3D_up:		
00018776 317C FEE0 0012             		move.w	#-$120,$12(a0)           ; Up	 
0001877C 4E75                        	    rts
0001877E                            
0001877E                            Obj3D_down:
0001877E 317C 0120 0012              		move.w	#$120, $12(a0)           ; Down
00018784                            
00018784                            loc_17950:
00018784 6000 FE68                  		bra.w	loc_177E6
00018788                            ; ===========================================================================
00018788                            
00018788                            loc_17954:				; XREF: Obj3D_ShipIndex
00018788 5368 003C                  		subq.w	#1,$3C(a0)
0001878C 6B00                       		bmi.s	loc_17960
0001878E 6100 FF1A                  		bsr.w	BossMove
00018792 6000                       		bra.s	loc_17976
00018794                            ; ===========================================================================
00018794                            
00018794                            loc_17960:
00018794 0868 0000 0022             		bchg	#0,$22(a0)
0001879A 317C 003F 003C             		move.w	#$3F,$3C(a0)
000187A0 5528 0025                  		subq.b	#2,$25(a0)
000187A4 317C 0000 0010             		move.w	#0,$10(a0)
000187AA                            
000187AA                            loc_17976:
000187AA 6000 FE42                  		bra.w	loc_177E6
000187AE                            ; ===========================================================================
000187AE                            
000187AE                            loc_1797A:				; XREF: Obj3D_ShipIndex
000187AE 5368 003C                  		subq.w	#1,$3C(a0)
000187B2 6B00                       		bmi.s	loc_17984
000187B4 6000 FEB2                  		bra.w	BossDefeated
000187B8                            ; ===========================================================================
000187B8                            
000187B8                            loc_17984:
000187B8 08E8 0000 0022             		bset	#0,$22(a0)
000187BE 08A8 0007 0022             		bclr	#7,$22(a0)
000187C4 4268 0010                  		clr.w	$10(a0)
000187C8 5428 0025                  		addq.b	#2,$25(a0)
000187CC 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000187D2 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000187D6 6600                       		bne.s	locret_179AA
000187D8 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000187DE 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000187E4 6000 FE82                  		bra.w	BossDefeated
000187E8                            
000187E8                            locret_179AA:
000187E8 4E75                       		rts	
000187EA                            ; ===========================================================================
000187EA                            
000187EA                            loc_179AC:				; XREF: Obj3D_ShipIndex
000187EA 4EB9 0000 E206             		jsr ObjectFall		
000187F0 5268 003C                  		addq.w	#1,$3C(a0)
000187F4 6700                       		beq.s	loc_179BC
000187F6 6A00                       		bpl.s	loc_179C2
000187F8 6000                       		bra.s	loc_179EE
000187FA                            ; ===========================================================================
000187FA                            
000187FA                            loc_179BC:
000187FA 4268 0012                  		clr.w	$12(a0)
000187FE 6000                       		bra.s	loc_179EE
00018800                            ; ===========================================================================
00018800                            
00018800                            loc_179C2:
00018800 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018806 6500                       		bcs.s	loc_179DA
00018808 6700                       		beq.s	loc_179E0
0001880A 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018810 6500                       		bcs.s	loc_179EE
00018812 5428 0025                  		addq.b	#2,$25(a0)
00018816 6000                       		bra.s	loc_179EE
00018818                            ; ===========================================================================
00018818                            
00018818                            loc_179DA:
00018818 5168 0012                  		subq.w	#8,$12(a0)
0001881C 6000                       		bra.s	loc_179EE
0001881E 6000 FE48                  		bra.w	BossDefeated
00018822                            ; ===========================================================================
00018822                            
00018822                            loc_179E0:
00018822 4268 0012                  		clr.w	$12(a0)
00018826 303C 0081                  		move.w	#$81,d0
0001882A 4EB9 0000 15E0             		jsr	(PlaySound).l	; play GHZ music
00018830                            
00018830                            loc_179EE:
00018830 6100 FE78                  		bsr.w	BossMove
00018834 6000 FDB8                  		bra.w	loc_177E6
00018838                            ; ===========================================================================
00018838                            
00018838                            loc_179F6:				; XREF: Obj3D_ShipIndex
00018838 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
0001883E 6700                       		beq.s	loc_17A10
00018840 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018844 6000                       		bra.s	loc_17A16
00018846                            ; ===========================================================================
00018846                            
00018846                            loc_17A10:
00018846 4A28 0001                  		tst.b	1(a0)
0001884A 6A00                       		bpl.s	Obj3D_ShipDel
0001884C                            
0001884C                            loc_17A16:
0001884C 6100 FE5C                  		bsr.w	BossMove
00018850 6000 FD9C                  		bra.w	loc_177E6
00018854                            ; ===========================================================================
00018854                            
00018854                            Obj3D_ShipDel:
00018854 4EF9 0000 E2DE             		jmp	DeleteObject
0001885A                            ; ===========================================================================
0001885A                            
0001885A                            Obj3D_FaceMain:				; XREF: Obj3D_Index
0001885A 7000                       		moveq	#0,d0
0001885C 7201                       		moveq	#1,d1
0001885E 2268 0034                  		movea.l	$34(a0),a1
00018862 1029 0025                  		move.b	$25(a1),d0
00018866 5900                       		subq.b	#4,d0
00018868 6600                       		bne.s	loc_17A3E
0001886A 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00018870 6600                       		bne.s	loc_17A46
00018872 7204                       		moveq	#4,d1
00018874                            
00018874                            loc_17A3E:
00018874 5D00                       		subq.b	#6,d0
00018876 6B00                       		bmi.s	loc_17A46
00018878 720A                       		moveq	#$A,d1
0001887A 6000                       		bra.s	loc_17A5A
0001887C                            ; ===========================================================================
0001887C                            
0001887C                            loc_17A46:
0001887C 4A29 0020                  		tst.b	$20(a1)
00018880 6600                       		bne.s	loc_17A50
00018882 7205                       		moveq	#5,d1
00018884 6000                       		bra.s	loc_17A5A
00018886                            ; ===========================================================================
00018886                            
00018886                            loc_17A50:
00018886 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001888C 6500                       		bcs.s	loc_17A5A
0001888E 7204                       		moveq	#4,d1
00018890                            
00018890                            loc_17A5A:
00018890 1141 001C                  		move.b	d1,$1C(a0)
00018894 5500                       		subq.b	#2,d0
00018896 6600                       		bne.s	Obj3D_FaceDisp
00018898 117C 0006 001C             		move.b	#6,$1C(a0)
0001889E 4A28 0001                  		tst.b	1(a0)
000188A2 6A00                       		bpl.s	Obj3D_FaceDel
000188A4                            
000188A4                            Obj3D_FaceDisp:
000188A4 6000                       		bra.s	Obj3D_Display
000188A6                            ; ===========================================================================
000188A6                            
000188A6                            Obj3D_FaceDel:
000188A6 4EF9 0000 E2DE             		jmp	DeleteObject
000188AC                            ; ===========================================================================
000188AC                            
000188AC                            Obj3D_FlameMain:			; XREF: Obj3D_Index
000188AC 117C 0007 001C             		move.b	#7,$1C(a0)
000188B2 2268 0034                  		movea.l	$34(a0),a1
000188B6 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
000188BC 6600                       		bne.s	loc_17A96
000188BE 117C 000B 001C             		move.b	#$B,$1C(a0)
000188C4 4A28 0001                  		tst.b	1(a0)
000188C8 6A00                       		bpl.s	Obj3D_FlameDel
000188CA 6000                       		bra.s	Obj3D_FlameDisp
000188CC                            ; ===========================================================================
000188CC                            
000188CC                            loc_17A96:
000188CC 3029 0010                  		move.w	$10(a1),d0
000188D0 6700                       		beq.s	Obj3D_FlameDisp
000188D2 117C 0008 001C             		move.b	#8,$1C(a0)
000188D8                            
000188D8                            Obj3D_FlameDisp:
000188D8 6000                       		bra.s	Obj3D_Display
000188DA                            ; ===========================================================================
000188DA                            
000188DA                            Obj3D_FlameDel:
000188DA 4EF9 0000 E2DE             		jmp	DeleteObject
000188E0                            ; ===========================================================================
000188E0                            
000188E0                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
000188E0 2268 0034                  		movea.l	$34(a0),a1
000188E4 3169 0008 0008             		move.w	8(a1),8(a0)
000188EA 3169 000C 000C             		move.w	$C(a1),$C(a0)
000188F0 1169 0022 0022             		move.b	$22(a1),$22(a0)
000188F6 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000188FC 4EB9 0000 B2FA             		jsr	AnimateSprite
00018902 1028 0022                  		move.b	$22(a0),d0
00018906 0200 0003                  		andi.b	#3,d0
0001890A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018910 8128 0001                  		or.b	d0,1(a0)
00018914 4EF9 0000 E2A2             		jmp	DisplaySprite
0001891A                            ; ===========================================================================
0001891A                            ; ---------------------------------------------------------------------------
0001891A                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001891A                            ; ---------------------------------------------------------------------------
0001891A                            
0001891A                            Obj48:					; XREF: Obj_Index
0001891A 7000                       		moveq	#0,d0
0001891C 1028 0024                  		move.b	$24(a0),d0
00018920 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00018924 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00018928                            ; ===========================================================================
00018928 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
0001892A 0000                       		dc.w Obj48_Base-Obj48_Index
0001892C 0000                       		dc.w Obj48_Display2-Obj48_Index
0001892E 0000                       		dc.w loc_17C68-Obj48_Index
00018930 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00018932                            ; ===========================================================================
00018932                            
00018932                            Obj48_Main:				; XREF: Obj48_Index
00018932 5428 0024                  		addq.b	#2,$24(a0)
00018936 317C 4080 0026             		move.w	#$4080,$26(a0)
0001893C 317C FE00 003E             		move.w	#-$200,$3E(a0)
00018942 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
0001894A 317C 046C 0002             		move.w	#$46C,2(a0)
00018950 45E8 0028                  		lea	$28(a0),a2
00018954 14FC 0000                  		move.b	#0,(a2)+
00018958 7205                       		moveq	#5,d1
0001895A 2248                       		movea.l	a0,a1
0001895C 6000                       		bra.s	loc_17B60
0001895E                            ; ===========================================================================
0001895E                            
0001895E                            Obj48_MakeLinks:
0001895E 4EB9 0000 E73E             		jsr	SingleObjLoad2
00018964 6600                       		bne.s	Obj48_MakeBall
00018966 3368 0008 0008             		move.w	8(a0),8(a1)
0001896C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018972 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00018976 137C 0006 0024             		move.b	#6,$24(a1)
0001897C 237C 0000 86C0 0004        		move.l	#Map_obj15,4(a1)
00018984 337C 0380 0002             		move.w	#$380,2(a1)
0001898A 137C 0001 001A             		move.b	#1,$1A(a1)
00018990 5228 0028                  		addq.b	#1,$28(a0)
00018994                            
00018994                            loc_17B60:				; XREF: Obj48_Main
00018994 3A09                       		move.w	a1,d5
00018996 0445 D000                  		subi.w	#$D000,d5
0001899A EC4D                       		lsr.w	#6,d5
0001899C 0245 007F                  		andi.w	#$7F,d5
000189A0 14C5                       		move.b	d5,(a2)+
000189A2 137C 0004 0001             		move.b	#4,1(a1)
000189A8 137C 0008 0019             		move.b	#8,$19(a1)
000189AE 137C 0006 0018             		move.b	#6,$18(a1)
000189B4 2368 0034 0034             		move.l	$34(a0),$34(a1)
000189BA 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
000189BE                            
000189BE                            Obj48_MakeBall:
000189BE 137C 0008 0024             		move.b	#8,$24(a1)
000189C4 237C 0000 8CB0 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
000189CC 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
000189D2 137C 0001 001A             		move.b	#1,$1A(a1)
000189D8 137C 0005 0018             		move.b	#5,$18(a1)
000189DE 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
000189E4 4E75                       		rts	
000189E6                            ; ===========================================================================
000189E6                            
000189E6 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
000189EC                            
000189EC                            ; ===========================================================================
000189EC                            
000189EC                            Obj48_Base:				; XREF: Obj48_Index
000189EC 47F9 0001 89E6             		lea	(Obj48_PosData).l,a3
000189F2 45E8 0028                  		lea	$28(a0),a2
000189F6 7C00                       		moveq	#0,d6
000189F8 1C1A                       		move.b	(a2)+,d6
000189FA                            
000189FA                            loc_17BC6:
000189FA 7800                       		moveq	#0,d4
000189FC 181A                       		move.b	(a2)+,d4
000189FE ED4C                       		lsl.w	#6,d4
00018A00 0684 00FF D000             		addi.l	#$FFD000,d4
00018A06 2244                       		movea.l	d4,a1
00018A08 101B                       		move.b	(a3)+,d0
00018A0A B029 003C                  		cmp.b	$3C(a1),d0
00018A0E 6700                       		beq.s	loc_17BE0
00018A10 5229 003C                  		addq.b	#1,$3C(a1)
00018A14                            
00018A14                            loc_17BE0:
00018A14 51CE FFE4                  		dbf	d6,loc_17BC6
00018A18                            
00018A18 B029 003C                  		cmp.b	$3C(a1),d0
00018A1C 6600                       		bne.s	loc_17BFA
00018A1E 2268 0034                  		movea.l	$34(a0),a1
00018A22 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00018A28 6600                       		bne.s	loc_17BFA
00018A2A 5428 0024                  		addq.b	#2,$24(a0)
00018A2E                            
00018A2E                            loc_17BFA:
00018A2E 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00018A34 6700                       		beq.s	Obj48_Display
00018A36 5268 0032                  		addq.w	#1,$32(a0)
00018A3A                            
00018A3A                            Obj48_Display:
00018A3A 6100 0000                  		bsr.w	sub_17C2A
00018A3E 1028 0026                  		move.b	$26(a0),d0
00018A42 4EB9 0000 8632             		jsr	(Obj15_Move2).l
00018A48 4EF9 0000 E2A2             		jmp	DisplaySprite
00018A4E                            ; ===========================================================================
00018A4E                            
00018A4E                            Obj48_Display2:				; XREF: Obj48_Index
00018A4E 6100 0000                  		bsr.w	sub_17C2A
00018A52 4EB9 0000 85F2             		jsr	(Obj48_Move).l
00018A58 4EF9 0000 E2A2             		jmp	DisplaySprite
00018A5E                            
00018A5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018A5E                            
00018A5E                            
00018A5E                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00018A5E 2268 0034                  		movea.l	$34(a0),a1
00018A62 0628 0020 001B             		addi.b	#$20,$1B(a0)
00018A68 6400                       		bcc.s	loc_17C3C
00018A6A 0868 0000 001A             		bchg	#0,$1A(a0)
00018A70                            
00018A70                            loc_17C3C:
00018A70 3169 0008 003A             		move.w	8(a1),$3A(a0)
00018A76 3029 000C                  		move.w	$C(a1),d0
00018A7A D068 0032                  		add.w	$32(a0),d0
00018A7E 3140 0038                  		move.w	d0,$38(a0)
00018A82 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018A88 4A29 0022                  		tst.b	$22(a1)
00018A8C 6A00                       		bpl.s	locret_17C66
00018A8E 10BC 003F                  		move.b	#$3F,0(a0)
00018A92 117C 0000 0024             		move.b	#0,$24(a0)
00018A98                            
00018A98                            locret_17C66:
00018A98 4E75                       		rts	
00018A9A                            ; End of function sub_17C2A
00018A9A                            
00018A9A                            ; ===========================================================================
00018A9A                            
00018A9A                            loc_17C68:				; XREF: Obj48_Index
00018A9A 2268 0034                  		movea.l	$34(a0),a1
00018A9E 4A29 0022                  		tst.b	$22(a1)
00018AA2 6A00                       		bpl.s	Obj48_Display3
00018AA4 10BC 003F                  		move.b	#$3F,0(a0)
00018AA8 117C 0000 0024             		move.b	#0,$24(a0)
00018AAE                            
00018AAE                            Obj48_Display3:
00018AAE 4EF9 0000 E2A2             		jmp	DisplaySprite
00018AB4                            ; ===========================================================================
00018AB4                            
00018AB4                            Obj48_ChkVanish:			; XREF: Obj48_Index
00018AB4 7000                       		moveq	#0,d0
00018AB6 4A28 001A                  		tst.b	$1A(a0)
00018ABA 6600                       		bne.s	Obj48_Vanish
00018ABC 5200                       		addq.b	#1,d0
00018ABE                            
00018ABE                            Obj48_Vanish:
00018ABE 1140 001A                  		move.b	d0,$1A(a0)
00018AC2 2268 0034                  		movea.l	$34(a0),a1
00018AC6 4A29 0022                  		tst.b	$22(a1)
00018ACA 6A00                       		bpl.s	Obj48_Display4
00018ACC 117C 0000 0020             		move.b	#0,$20(a0)
00018AD2 6100 FB94                  		bsr.w	BossDefeated
00018AD6 5328 003C                  		subq.b	#1,$3C(a0)
00018ADA 6A00                       		bpl.s	Obj48_Display4
00018ADC 10BC 003F                  		move.b	#$3F,(a0)
00018AE0 117C 0000 0024             		move.b	#0,$24(a0)
00018AE6                            
00018AE6                            Obj48_Display4:
00018AE6 4EF9 0000 E2A2             		jmp	DisplaySprite
00018AEC                            ; ===========================================================================
00018AEC                            Ani_Eggman:
00018AEC                            	include "_anim\Eggman.asm"
00018AEC                            ; ---------------------------------------------------------------------------
00018AEC                            ; Animation script - Eggman (bosses)
00018AEC                            ; ---------------------------------------------------------------------------
00018AEC 0000                       		dc.w byte_17CD4-Ani_Eggman
00018AEE 0000                       		dc.w byte_17CD8-Ani_Eggman
00018AF0 0000                       		dc.w byte_17CDC-Ani_Eggman
00018AF2 0000                       		dc.w byte_17CE0-Ani_Eggman
00018AF4 0000                       		dc.w byte_17CE4-Ani_Eggman
00018AF6 0000                       		dc.w byte_17CE8-Ani_Eggman
00018AF8 0000                       		dc.w byte_17CEC-Ani_Eggman
00018AFA 0000                       		dc.w byte_17CF0-Ani_Eggman
00018AFC 0000                       		dc.w byte_17CF4-Ani_Eggman
00018AFE 0000                       		dc.w byte_17CF8-Ani_Eggman
00018B00 0000                       		dc.w byte_17CFC-Ani_Eggman
00018B02 0000                       		dc.w byte_17D00-Ani_Eggman
00018B04 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00018B08 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00018B0C 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00018B10 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00018B14 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00018B18 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00018B1C 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00018B20 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00018B24 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00018B28 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00018B2C 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00018B30 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00018B3C                            		even
00018B3C                            		even
00018B3C                            Ani_TetoB:
00018B3C                            	include "_anim\TetoB.asm"
00018B3C                            ; ---------------------------------------------------------------------------
00018B3C                            ; Animation script - Eggman (bosses)
00018B3C                            ; ---------------------------------------------------------------------------
00018B3C 0000                       		dc.w spin-Ani_TetoB
00018B3E 0000                       		dc.w static-Ani_TetoB
00018B40 0000                       		dc.w static2-Ani_TetoB
00018B42 0400 0102 03FF 00          spin:	dc.b 4, 0, 1, 2, 3, $FF, 0
00018B49 0500 FF                    static:	dc.b 5,	0, $FF
00018B4C 0501 FF                    static2:	dc.b 5,	1, $FF
00018B50 00                         		even
00018B50 00                         		even
00018B50                            ; ---------------------------------------------------------------------------
00018B50                            ; Sprite mappings - Eggman (boss levels)
00018B50                            ; ---------------------------------------------------------------------------
00018B50                            Map_Eggman:
00018B50                            	include "_maps\Eggman.asm"
00018B50                            Map_dc7e:
00018B50 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
00018B52 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
00018B54 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
00018B56 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
00018B58 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
00018B5A 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
00018B5C 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
00018B5E 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
00018B60 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
00018B62 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
00018B64 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
00018B66 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
00018B68 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
00018B6A 06                         Map_dc7e_1A: 	dc.b $6
00018B6B EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
00018B70 EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
00018B75 FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
00018B7A FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
00018B7F 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
00018B84 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
00018B89 02                         Map_dc7e_39: 	dc.b $2
00018B8A E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018B8F EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
00018B94 02                         Map_dc7e_44: 	dc.b $2
00018B95 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018B9A EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00018B9F 03                         Map_dc7e_4F: 	dc.b $3
00018BA0 E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
00018BA5 EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
00018BAA EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
00018BAF 03                         Map_dc7e_5F: 	dc.b $3
00018BB0 E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
00018BB5 EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
00018BBA EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
00018BBF 03                         Map_dc7e_6F: 	dc.b $3
00018BC0 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
00018BC5 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
00018BCA EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00018BCF 03                         Map_dc7e_7F: 	dc.b $3
00018BD0 E404 0064 04               	dc.b $E4, $4, $0, $64, $4
00018BD5 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018BDA EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00018BDF 04                         Map_dc7e_8F: 	dc.b $4
00018BE0 E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
00018BE5 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
00018BEA EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
00018BEF EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00018BF4 01                         Map_dc7e_A4: 	dc.b $1
00018BF5 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
00018BFA 01                         Map_dc7e_AA: 	dc.b $1
00018BFB 0405 0031 22               	dc.b $4, $5, $0, $31, $22
00018C00 00                         Map_dc7e_B0: 	dc.b $0
00018C01 02                         Map_dc7e_B1: 	dc.b $2
00018C02 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
00018C07 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
00018C0C 02                         Map_dc7e_BC: 	dc.b $2
00018C0D F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
00018C12 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
00018C18 00                         	even
00018C18 00                         	even
00018C18                            
00018C18                            ; ---------------------------------------------------------------------------
00018C18                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018C18                            ; ---------------------------------------------------------------------------
00018C18                            Map_BossItems:
00018C18                            	include "_maps\Boss items.asm"
00018C18                            ; ---------------------------------------------------------------------------
00018C18                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018C18                            ; ---------------------------------------------------------------------------
00018C18 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00018C1C 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00018C20 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00018C24 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00018C28 01                         byte_17DE4:	dc.b 1
00018C29 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018C2E 02                         byte_17DEA:	dc.b 2
00018C2F FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00018C34 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018C39 00                         		dc.b 0
00018C3A 01                         byte_17DF6:	dc.b 1
00018C3B FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00018C40 01                         byte_17DFC:	dc.b 1
00018C41 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00018C46 01                         byte_17E02:	dc.b 1
00018C47 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00018C4C 04                         byte_17E08:	dc.b 4
00018C4D F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00018C52 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00018C57 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00018C5C 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
00018C61 00                         		dc.b 0
00018C62 02                         byte_17E1E:	dc.b 2
00018C63 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00018C68 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00018C6D 00                         		dc.b 0
00018C6E 02                         byte_17E2A:	dc.b 2
00018C6F 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00018C74 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00018C7A 00                         		even
00018C7A 00                         		even
00018C7A                            
00018C7A                            ; ===========================================================================
00018C7A                            ; ---------------------------------------------------------------------------
00018C7A                            ; Object 77 - Fatass teto boss fight in LZ -STDH
00018C7A                            ; ---------------------------------------------------------------------------
00018C7A                            
00018C7A                            
00018C7A                            obj77:					; XREF: Obj_Index
00018C7A 7000                       		moveq	#0,d0
00018C7C 1028 0024                  		move.b	$24(a0),d0
00018C80 323B 0000                  		move.w	obj77_Index(pc,d0.w),d1
00018C84 4EFB 1000                  		jmp	obj77_Index(pc,d1.w)
00018C88                            ; ===========================================================================
00018C88 0000                       obj77_Index:	dc.w obj77_Main-obj77_Index
00018C8A 0000                       		dc.w obj77_ShipMain-obj77_Index
00018C8C 0000                       		dc.w obj77_FaceMain-obj77_Index
00018C8E 0000                       		dc.w obj77_FlameMain-obj77_Index
00018C90                            
00018C90 0200                       obj77_ObjData:	dc.b 2,	0		; routine counter, animation
00018C92 0401                       		dc.b 4,	1
00018C94 0607                       		dc.b 6,	7
00018C96                            ; ===========================================================================
00018C96                            
00018C96                            obj77_Main:				; XREF: obj77_Index
00018C96 45F9 0001 8C90             		lea	(obj77_ObjData).l,a2
00018C9C 2248                       		movea.l	a0,a1
00018C9E 7202                       		moveq	#2,d1
00018CA0 6000                       		bra.s	obj77_LoadBoss
00018CA2                            ; ===========================================================================
00018CA2                            
00018CA2                            obj77_Loop:
00018CA2 4EB9 0000 E73E             		jsr	SingleObjLoad2
00018CA8 6600                       		bne.s	loc2_17772
00018CAA                            
00018CAA                            obj77_LoadBoss:				; XREF: obj77_Main
00018CAA 135A 0024                  		move.b	(a2)+,$24(a1)
00018CAE 12BC 0077                  		move.b	#$77,0(a1)
00018CB2 3368 0008 0008             		move.w	8(a0),8(a1)
00018CB8 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018CBE 237C 0000 0000 0004        		move.l	#Map_TetoBoss,4(a1)
00018CC6 337C 0400 0002             		move.w	#$400,2(a1)
00018CCC 137C 0004 0001             		move.b	#4,1(a1)
00018CD2 137C 0020 0019             		move.b	#$20,$19(a1)
00018CD8 137C 0003 0018             		move.b	#3,$18(a1)
00018CDE 135A 001C                  		move.b	(a2)+,$1C(a1)
00018CE2 2348 0034                  		move.l	a0,$34(a1)
00018CE6 51C9 FFBA                  		dbf	d1,obj77_Loop	; repeat sequence 2 more times
00018CEA                            
00018CEA                            loc2_17772:
00018CEA 3168 0008 0030             		move.w	8(a0),$30(a0)
00018CF0 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018CF6 117C 000F 0020             		move.b	#$F,$20(a0)
00018CFC 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018D02                            
00018D02                            obj77_ShipMain:				; XREF: obj77_Index
00018D02 7000                       		moveq	#0,d0
00018D04 1028 0025                  		move.b	$25(a0),d0
00018D08 323B 0000                  		move.w	obj77_ShipIndex(pc,d0.w),d1
00018D0C 4EBB 1000                  		jsr	obj77_ShipIndex(pc,d1.w)
00018D10 43F9 0001 8B3C             		lea	(Ani_TetoB).l,a1
00018D16 4EB9 0000 B2FA             		jsr	AnimateSprite
00018D1C 1028 0022                  		move.b	$22(a0),d0
00018D20 0200 0003                  		andi.b	#3,d0
00018D24 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018D2A 8128 0001                  		or.b	d0,1(a0)
00018D2E 4EF9 0000 E2A2             		jmp	DisplaySprite
00018D34                            ; ===========================================================================
00018D34 0000                       obj77_ShipIndex:dc.w obj77_ShipStart-obj77_ShipIndex
00018D36 0000                       		dc.w obj77_MakeBall-obj77_ShipIndex
00018D38 0000                       		dc.w obj77_ShipMove-obj77_ShipIndex
00018D3A 0000                       		dc.w loc2_17954-obj77_ShipIndex
00018D3C 0000                       		dc.w fatassruns-obj77_ShipIndex		
00018D3E 0000                       		dc.w loc2_1797A-obj77_ShipIndex
00018D40 0000                       		dc.w loc2_179AC-obj77_ShipIndex
00018D42 0000                       		dc.w loc2_179F6-obj77_ShipIndex
00018D44                            ; ===========================================================================
00018D44                            
00018D44                            obj77_ShipStart:			; XREF: obj77_ShipIndex
00018D44                            	;	move.w	#$100,$12(a0)	; move ship down
00018D44 6100 F964                  		bsr.w	BossMove
00018D48 0C68 06E0 0038             		cmpi.w	#$6E0,$38(a0)
00018D4E 6600                       		bne.s	loc2_177E6
00018D50 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00018D56 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00018D5A                            
00018D5A                            loc2_177E6:
00018D5A                            ;		move.b	$3F(a0),d0
00018D5A                            ;		jsr	(CalcSine).l
00018D5A EC40                       		asr.w	#6,d0
00018D5C D068 0038                  		add.w	$38(a0),d0
00018D60 3140 000C                  		move.w	d0,$C(a0)
00018D64 3168 0030 0008             		move.w	$30(a0),8(a0)
00018D6A 5428 003F                  		addq.b	#2,$3F(a0)
00018D6E 0C28 000A 0025             		cmpi.b	#$A,$25(a0)
00018D74 6400                       		bcc.s	locret_1784A2
00018D76 4A28 0022                  		tst.b	$22(a0)
00018D7A 6B00                       		bmi.s	loc2_1784C
00018D7C 4A28 0020                  		tst.b	$20(a0)
00018D80 6600                       		bne.s	locret_1784A2
00018D82 4A28 003E                  		tst.b	$3E(a0)
00018D86 6600                       		bne.s	obj77_ShipFlash
00018D88 117C 0060 003E             		move.b	#$60,$3E(a0)	; set number of	times for ship to flash
00018D8E 303C 00AC                  		move.w	#$AC,d0
00018D92 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018D98                            
00018D98                            obj77_ShipFlash:
00018D98 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00018D9C 7000                       		moveq	#0,d0		; move 0 (black) to d0
00018D9E 4A51                       		tst.w	(a1)
00018DA0 6600                       		bne.s	loc2_1783C
00018DA2 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00018DA6                            
00018DA6                            loc2_1783C:
00018DA6 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00018DA8 5328 003E                  		subq.b	#1,$3E(a0)
00018DAC 6600                       		bne.s	locret_1784A2
00018DAE 117C 000F 0020             		move.b	#$F,$20(a0)
00018DB4                            
00018DB4                            locret_1784A2:
00018DB4 4E75                       		rts	
00018DB6                            ; ===========================================================================
00018DB6                            
00018DB6                            loc2_1784C:				; XREF: loc2_177E6
00018DB6 7064                       		moveq	#100,d0
00018DB8 6100 0000                  		bsr.w	AddPoints
00018DBC 117C 000A 0025             		move.b	#$A,$25(a0)
00018DC2 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00018DC8 4E75                       		rts	
00018DCA                            ; ===========================================================================
00018DCA                            
00018DCA                            obj77_MakeBall:				; XREF: obj77_ShipIndex
00018DCA 317C FF00 0010             		move.w	#-$100,$10(a0)
00018DD0 117C 0001 001C             		move.b	#1,$1C(a0)	; it runs
00018DD6 6100 F8D2                  		bsr.w	BossMove
00018DDA 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0)
00018DE0 6600                       		bne.s	loc2_17916
00018DE2 317C 0000 0010             		move.w	#0,$10(a0)
00018DE8 117C 0002 001C             		move.b	#2,$1C(a0)	; stare
00018DEE 317C 0000 0012             		move.w	#0,$12(a0)
00018DF4 5428 0025                  		addq.b	#2,$25(a0)
00018DF8                            
00018DF8                            loc2_17910:
00018DF8 317C 0077 003C             		move.w	#$77,$3C(a0)
00018DFE                            
00018DFE                            loc2_17916:
00018DFE 6000 FF5A                  		bra.w	loc2_177E6
00018E02                            ; ===========================================================================
00018E02                            
00018E02                            obj77_ShipMove:				; XREF: obj77_ShipIndex
00018E02 6100 F8A6                  		bsr.w	BossMove
00018E06 5368 003C                  		subq.w	#1,$3C(a0)
00018E0A 6A00                       		bpl.s	loc2_17950 ; if time remains go here
00018E0C 117C 0000 001C             		move.b	#0,$1C(a0)	; make it spin
00018E12 117C 0087 0020             		move.b	#$87,$20(a0) ; the spinning hurts you
00018E18 317C FE00 0010             		move.w	#-$200,$10(a0)	; move the ship	sideways
00018E1E 0C68 1D10 0030             		cmpi.w	#$1D10,$30(a0) ; is teto here
00018E24 6600                       		bne.s	loc2_17950 ; if not branch
00018E26                            
00018E26                            fatass_attack:
00018E26 317C 0000 0010             		move.w	#0,$10(a0) ; stop her
00018E2C 317C FE00 0012             		move.w	#-$200,$12(a0) ; OH SHIT SHES GOING UP
00018E32 0C68 0680 0038              		cmpi.w	#$680,$38(a0) ; is she here
00018E38 6600                       		bne.s	loc2_17950    ; if not you know the drill
00018E3A 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
00018E3E 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
00018E44                            
00018E44                            loc2_17950:
00018E44 6000 FF14                  		bra.w	loc2_177E6
00018E48                            ; ===========================================================================
00018E48                            
00018E48                            loc2_17954:				; XREF: obj77_ShipIndex
00018E48 6100 F860                  		bsr.w	BossMove
00018E4C 317C 0400 0012             		move.w	#$400,$12(a0) ; RUN A EARTHQUAKE!!
00018E52                            		; i suck at programming
00018E52 0C68 06E0 0038              		cmpi.w	#$6E0,$38(a0) ; is she back to the ground
00018E58 6600                       		bne.s	loc2_17976    ; if not blah blah
00018E5A 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
00018E60 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
00018E64 303C 00B9                  		move.w	#$B9,d0
00018E68 4EB9 0000 15E0             		jsr	(PlaySound).l	; play the earthquake sound
00018E6E                            
00018E6E                            Peartobombs:	
00018E6E 4EB9 0000 E73E                		jsr	SingleObjLoad2
00018E74 6600                       		bne.s	secondone
00018E76 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb
00018E7A 337C 1D70 0008             		move.w	#$1D70,8(a1)
00018E80 337C 0670 000C             		move.w	#$670,$C(a1)
00018E86                            secondone:		
00018E86 4EB9 0000 E73E                		jsr	SingleObjLoad2
00018E8C 6600                       		bne.s	loc2_17976		
00018E8E 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 2
00018E92 337C 1D20 0008             		move.w	#$1D20,8(a1)
00018E98 337C 0670 000C             		move.w	#$670,$C(a1)
00018E9E                            lastone:
00018E9E 4EB9 0000 E73E                		jsr	SingleObjLoad2
00018EA4 6600                       		bne.s	loc2_17976		
00018EA6 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 3
00018EAA 337C 1E00 0008             		move.w	#$1E00,8(a1)
00018EB0 337C 0670 000C             		move.w	#$670,$C(a1)
00018EB6                            		
00018EB6                            loc2_17976:
00018EB6 6000 FEA2                  		bra.w	loc2_177E6
00018EBA                            		
00018EBA                            ; ===========================================================================
00018EBA                            Fatassruns:
00018EBA 6100 F7EE                   		bsr.w	BossMove
00018EBE 317C 0200 0010             		move.w	#$200,$10(a0)	; IT RUNS!!
00018EC4 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0) ; is she back here
00018ECA 6600                       		bne.s	processstuff ; is not go here
00018ECC 317C 0000 0010             		move.w	#0,$10(a0)	; stop'
00018ED2 117C 0002 001C             		move.b	#2,$1C(a0)	; stareeeee
00018ED8 5928 0025                  		subq.b	#4,$25(a0) ; make the boss loop
00018EDC 317C 0077 003C             		move.w	#$77,$3C(a0) ; timeerr
00018EE2 117C 000F 0020             		move.b	#$F,$20(a0) ; now you can hit her
00018EE8                            		
00018EE8                            		
00018EE8                            processstuff:
00018EE8 6000 FE70                  		bra.w	loc2_177E6
00018EEC                            ; ===========================================================================
00018EEC                            
00018EEC                            loc2_1797A:				; XREF: obj77_ShipIndex
00018EEC 5368 003C                  		subq.w	#1,$3C(a0)
00018EF0 6B00                       		bmi.s	loc2_17984
00018EF2 6000 F774                  		bra.w	BossDefeated
00018EF6                            ; ===========================================================================
00018EF6                            
00018EF6                            loc2_17984:
00018EF6 08E8 0000 0022             		bset	#0,$22(a0)
00018EFC 08A8 0007 0022             		bclr	#7,$22(a0)
00018F02 4268 0010                  		clr.w	$10(a0)
00018F06 5428 0025                  		addq.b	#2,$25(a0)
00018F0A 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018F10 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018F14 6600                       		bne.s	locret_179AA2
00018F16 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018F1C                            
00018F1C                            locret_179AA2:
00018F1C 4E75                       		rts	
00018F1E                            ; ===========================================================================
00018F1E                            
00018F1E                            loc2_179AC:				; XREF: obj77_ShipIndex
00018F1E 5268 003C                  		addq.w	#1,$3C(a0)
00018F22 6700                       		beq.s	loc2_179BC
00018F24 6A00                       		bpl.s	loc2_179C2
00018F26 0668 0018 0012             		addi.w	#$18,$12(a0)
00018F2C 6000                       		bra.s	loc2_179EE
00018F2E                            ; ===========================================================================
00018F2E                            
00018F2E                            loc2_179BC:
00018F2E 4268 0012                  		clr.w	$12(a0)
00018F32 6000                       		bra.s	loc2_179EE
00018F34                            ; ===========================================================================
00018F34                            
00018F34                            loc2_179C2:
00018F34 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018F3A 6500                       		bcs.s	loc2_179DA
00018F3C 6700                       		beq.s	loc2_179E0
00018F3E 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018F44 6500                       		bcs.s	loc2_179EE
00018F46 5428 0025                  		addq.b	#2,$25(a0)
00018F4A 6000                       		bra.s	loc2_179EE
00018F4C                            ; ===========================================================================
00018F4C                            
00018F4C                            loc2_179DA:
00018F4C 5168 0012                  		subq.w	#8,$12(a0)
00018F50 6000                       		bra.s	loc2_179EE
00018F52                            ; ===========================================================================
00018F52                            
00018F52                            loc2_179E0:
00018F52 4268 0012                  		clr.w	$12(a0)
00018F56 303C 0097                  		move.w	#$97,d0
00018F5A 4EB9 0000 15E0             		jsr	(PlaySound).l	; play lz3 music
00018F60                            
00018F60                            loc2_179EE:
00018F60 6100 F748                  		bsr.w	BossMove
00018F64 6000 FDF4                  		bra.w	loc2_177E6
00018F68                            ; ===========================================================================
00018F68                            
00018F68                            loc2_179F6:				; XREF: obj77_ShipIndex
00018F68 317C 0400 0010             		move.w	#$400,$10(a0)
00018F6E 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018F74 0C78 1F00 F72A             		cmpi.w	#$1F00,($FFFFF72A).w
00018F7A 6700                       		beq.s	loc2_17A10
00018F7C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018F80 6000                       		bra.s	loc2_17A16
00018F82                            ; ===========================================================================
00018F82                            
00018F82                            loc2_17A10:
00018F82 4A28 0001                  		tst.b	1(a0)
00018F86 6A00                       		bpl.s	obj77_ShipDel
00018F88                            
00018F88                            loc2_17A16:
00018F88 6100 F720                  		bsr.w	BossMove
00018F8C 6000 FDCC                  		bra.w	loc2_177E6
00018F90                            ; ===========================================================================
00018F90                            
00018F90                            obj77_ShipDel:
00018F90 4EF9 0000 E2DE             		jmp	DeleteObject
00018F96                            ; ===========================================================================
00018F96                            
00018F96                            obj77_FaceMain:				; XREF: obj77_Index
00018F96 4E75                       		rts
00018F98                            ; ===========================================================================
00018F98                            
00018F98                            obj77_FlameMain:			; XREF: obj77_Index
00018F98 4E75                       		rts
00018F9A                            ; ===========================================================================
00018F9A                            
00018F9A                            obj77_Display:				; XREF: obj77_FaceDisp; obj77_FlameDisp
00018F9A 43F9 0001 8B3C             		lea	(Ani_TetoB).l,a1
00018FA0 4EB9 0000 B2FA             		jsr	AnimateSprite
00018FA6 4EF9 0000 E2A2             		jmp	DisplaySprite
00018FAC                            ; ---------------------------------------------------------------------------
00018FAC                            ; Sprite mappings - Fatass teto boss
00018FAC                            ; ---------------------------------------------------------------------------
00018FAC                            Map_TetoBoss:
00018FAC                            	include "_maps\tetoboss.asm"
00018FAC                            Map_f09a:
00018FAC 0000                       Map_f09a_0: 	dc.w Map_f09a_8-Map_f09a
00018FAE 0000                       Map_f09a_2: 	dc.w Map_f09a_18-Map_f09a
00018FB0 0000                       Map_f09a_4: 	dc.w Map_f09a_37-Map_f09a
00018FB2 0000                       Map_f09a_6: 	dc.w Map_f09a_47-Map_f09a
00018FB4 03                         Map_f09a_8: 	dc.b $3
00018FB5 E50F 602B F0               	dc.b $E5, $F, $60, $2B, $F0
00018FBA 050E 603B F0               	dc.b $5, $E, $60, $3B, $F0
00018FBF DD00 6047 F8               	dc.b $DD, $0, $60, $47, $F8
00018FC4 06                         Map_f09a_18: 	dc.b $6
00018FC5 EC0E 6000 E4               	dc.b $EC, $E, $60, $0, $E4
00018FCA 040E 600C EC               	dc.b $4, $E, $60, $C, $EC
00018FCF E408 6018 F4               	dc.b $E4, $8, $60, $18, $F4
00018FD4 1C00 601B F4               	dc.b $1C, $0, $60, $1B, $F4
00018FD9 EC0A 601C 04               	dc.b $EC, $A, $60, $1C, $4
00018FDE 0406 6025 0C               	dc.b $4, $6, $60, $25, $C
00018FE3 03                         Map_f09a_37: 	dc.b $3
00018FE4 E50F 682B F0               	dc.b $E5, $F, $68, $2B, $F0
00018FE9 050E 683B F0               	dc.b $5, $E, $68, $3B, $F0
00018FEE DD00 6847 00               	dc.b $DD, $0, $68, $47, $0
00018FF3 06                         Map_f09a_47: 	dc.b $6
00018FF4 ED0E 6048 E4               	dc.b $ED, $E, $60, $48, $E4
00018FF9 050E 6054 EC               	dc.b $5, $E, $60, $54, $EC
00018FFE E508 6060 F4               	dc.b $E5, $8, $60, $60, $F4
00019003 DD00 6063 FC               	dc.b $DD, $0, $60, $63, $FC
00019008 ED0A 6064 04               	dc.b $ED, $A, $60, $64, $4
0001900D 0502 606D 0C               	dc.b $5, $2, $60, $6D, $C
00019012                            	even
00019012                            	even
00019012                            ; ===========================================================================
00019012                            ; ---------------------------------------------------------------------------
00019012                            ; Object 73 - Eggman (MZ)
00019012                            ; ---------------------------------------------------------------------------
00019012                            
00019012                            Obj73:					; XREF: Obj_Index
00019012 7000                       		moveq	#0,d0
00019014 1028 0024                  		move.b	$24(a0),d0
00019018 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001901C 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00019020                            ; ===========================================================================
00019020 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00019022 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00019024 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00019026 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00019028 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001902A                            
0001902A 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001902D 0401 04                    		dc.b 4,	1, 4
00019030 0607 04                    		dc.b 6,	7, 4
00019033 0800 03                    		dc.b 8,	0, 3
00019036                            ; ===========================================================================
00019036                            
00019036                            Obj73_Main:				; XREF: Obj73_Index
00019036 3168 0008 0030             		move.w	8(a0),$30(a0)
0001903C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019042 117C 000F 0020             		move.b	#$F,$20(a0)
00019048 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001904E 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00019052 2248                       		movea.l	a0,a1
00019054 7203                       		moveq	#3,d1
00019056 6000                       		bra.s	Obj73_LoadBoss
00019058                            ; ===========================================================================
00019058                            
00019058                            Obj73_Loop:
00019058 4EB9 0000 E73E             		jsr	SingleObjLoad2
0001905E 6600                       		bne.s	Obj73_ShipMain
00019060 12BC 0073                  		move.b	#$73,0(a1)
00019064 3368 0008 0008             		move.w	8(a0),8(a1)
0001906A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019070                            
00019070                            Obj73_LoadBoss:				; XREF: Obj73_Main
00019070 08A8 0000 0022             		bclr	#0,$22(a0)
00019076 4229 0025                  		clr.b	$25(a1)
0001907A 135A 0024                  		move.b	(a2)+,$24(a1)
0001907E 135A 001C                  		move.b	(a2)+,$1C(a1)
00019082 135A 0018                  		move.b	(a2)+,$18(a1)
00019086 237C 0001 8B50 0004        		move.l	#Map_Eggman,4(a1)
0001908E 337C 0400 0002             		move.w	#$400,2(a1)
00019094 137C 0004 0001             		move.b	#4,1(a1)
0001909A 137C 0020 0019             		move.b	#$20,$19(a1)
000190A0 2348 0034                  		move.l	a0,$34(a1)
000190A4 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
000190A8                            
000190A8                            Obj73_ShipMain:
000190A8 7000                       		moveq	#0,d0
000190AA 1028 0025                  		move.b	$25(a0),d0
000190AE 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
000190B2 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
000190B6 43F9 0001 8AEC             		lea	(Ani_Eggman).l,a1
000190BC 4EB9 0000 B2FA             		jsr	AnimateSprite
000190C2 7003                       		moveq	#3,d0
000190C4 C028 0022                  		and.b	$22(a0),d0
000190C8 0228 00FC 0001             		andi.b	#$FC,1(a0)
000190CE 8128 0001                  		or.b	d0,1(a0)
000190D2 4EF9 0000 E2A2             		jmp	DisplaySprite
000190D8                            ; ===========================================================================
000190D8 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
000190DA 0000                       		dc.w loc_183AA-Obj73_ShipIndex
000190DC 0000                       		dc.w loc_184F6-Obj73_ShipIndex
000190DE 0000                       		dc.w loc_1852C-Obj73_ShipIndex
000190E0 0000                       		dc.w loc_18582-Obj73_ShipIndex
000190E2                            ; ===========================================================================
000190E2                            
000190E2                            loc_18302:				; XREF: Obj73_ShipIndex
000190E2 1028 003F                  		move.b	$3F(a0),d0
000190E6 5428 003F                  		addq.b	#2,$3F(a0)
000190EA 4EB9 0000 2D80             		jsr	(CalcSine).l
000190F0 E440                       		asr.w	#2,d0
000190F2 3140 0012                  		move.w	d0,$12(a0)
000190F6 317C FF00 0010             		move.w	#-$100,$10(a0)
000190FC 6100 F5AC                  		bsr.w	BossMove
00019100 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00019106 6600                       		bne.s	loc_18334
00019108 5428 0025                  		addq.b	#2,$25(a0)
0001910C 4228 0028                  		clr.b	$28(a0)
00019110 42A8 0010                  		clr.l	$10(a0)
00019114                            
00019114                            loc_18334:
00019114 4EB9 0000 2D5A             		jsr	(RandomNumber).l
0001911A 1140 0034                  		move.b	d0,$34(a0)
0001911E                            
0001911E                            loc_1833E:
0001911E 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019124 3168 0030 0008             		move.w	$30(a0),8(a0)
0001912A 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00019130 6400                       		bcc.s	locret_18390
00019132 4A28 0022                  		tst.b	$22(a0)
00019136 6B00                       		bmi.s	loc_18392
00019138 4A28 0020                  		tst.b	$20(a0)
0001913C 6600                       		bne.s	locret_18390
0001913E 4A28 003E                  		tst.b	$3E(a0)
00019142 6600                       		bne.s	loc_18374
00019144 117C 0028 003E             		move.b	#$28,$3E(a0)
0001914A 303C 00AC                  		move.w	#$AC,d0
0001914E 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019154                            
00019154                            loc_18374:
00019154 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019158 7000                       		moveq	#0,d0
0001915A 4A51                       		tst.w	(a1)
0001915C 6600                       		bne.s	loc_18382
0001915E 303C 0EEE                  		move.w	#$EEE,d0
00019162                            
00019162                            loc_18382:
00019162 3280                       		move.w	d0,(a1)
00019164 5328 003E                  		subq.b	#1,$3E(a0)
00019168 6600                       		bne.s	locret_18390
0001916A 117C 000F 0020             		move.b	#$F,$20(a0)
00019170                            
00019170                            locret_18390:
00019170 4E75                       		rts	
00019172                            ; ===========================================================================
00019172                            
00019172                            loc_18392:				; XREF: loc_1833E
00019172 7064                       		moveq	#100,d0
00019174 6100 0000                  		bsr.w	AddPoints
00019178 117C 0004 0025             		move.b	#4,$25(a0)
0001917E 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019184 4268 0010                  		clr.w	$10(a0)
00019188 4E75                       		rts	
0001918A                            ; ===========================================================================
0001918A                            
0001918A                            loc_183AA:				; XREF: Obj73_ShipIndex
0001918A 7000                       		moveq	#0,d0
0001918C 1028 0028                  		move.b	$28(a0),d0
00019190 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00019194 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00019198 0228 0006 0028             		andi.b	#6,$28(a0)
0001919E 6000 FF7E                  		bra.w	loc_1833E
000191A2                            ; ===========================================================================
000191A2 0000                       off_183C2:	dc.w loc_183CA-off_183C2
000191A4 0000                       		dc.w Obj73_MakeLava2-off_183C2
000191A6 0000                       		dc.w loc_183CA-off_183C2
000191A8 0000                       		dc.w Obj73_MakeLava2-off_183C2
000191AA                            ; ===========================================================================
000191AA                            
000191AA                            loc_183CA:				; XREF: off_183C2
000191AA 4A68 0010                  		tst.w	$10(a0)
000191AE 6600                       		bne.s	loc_183FE
000191B0 7040                       		moveq	#$40,d0
000191B2 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
000191B8 6700                       		beq.s	loc_183E6
000191BA 6500                       		bcs.s	loc_183DE
000191BC 4440                       		neg.w	d0
000191BE                            
000191BE                            loc_183DE:
000191BE 3140 0012                  		move.w	d0,$12(a0)
000191C2 6000 F4E6                  		bra.w	BossMove
000191C6                            ; ===========================================================================
000191C6                            
000191C6                            loc_183E6:
000191C6 317C 0200 0010             		move.w	#$200,$10(a0)
000191CC 317C 0100 0012             		move.w	#$100,$12(a0)
000191D2 0828 0000 0022             		btst	#0,$22(a0)
000191D8 6600                       		bne.s	loc_183FE
000191DA 4468 0010                  		neg.w	$10(a0)
000191DE                            
000191DE                            loc_183FE:
000191DE 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
000191E4 6400                       		bcc.s	Obj73_MakeLava
000191E6 6100 F4C2                  		bsr.w	BossMove
000191EA 5968 0012                  		subq.w	#4,$12(a0)
000191EE                            
000191EE                            Obj73_MakeLava:
000191EE 5328 0034                  		subq.b	#1,$34(a0)
000191F2 6400                       		bcc.s	loc_1845C
000191F4 4EB9 0000 E728             		jsr	SingleObjLoad
000191FA 6600                       		bne.s	loc_1844A
000191FC 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00019200 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00019206 4EB9 0000 2D5A             		jsr	(RandomNumber).l
0001920C 0280 0000 FFFF             		andi.l	#$FFFF,d0
00019212 80FC 0050                  		divu.w	#$50,d0
00019216 4840                       		swap	d0
00019218 0640 1878                  		addi.w	#$1878,d0
0001921C 3340 0008                  		move.w	d0,8(a1)
00019220 EE09                       		lsr.b	#7,d1
00019222 337C 00FF 0028             		move.w	#$FF,$28(a1)
00019228                            
00019228                            loc_1844A:
00019228 4EB9 0000 2D5A             		jsr	(RandomNumber).l
0001922E 0200 001F                  		andi.b	#$1F,d0
00019232 0600 0040                  		addi.b	#$40,d0
00019236 1140 0034                  		move.b	d0,$34(a0)
0001923A                            
0001923A                            loc_1845C:
0001923A 0828 0000 0022             		btst	#0,$22(a0)
00019240 6700                       		beq.s	loc_18474
00019242 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00019248 6D00                       		blt.s	locret_1849C
0001924A 317C 1910 0030             		move.w	#$1910,$30(a0)
00019250 6000                       		bra.s	loc_18482
00019252                            ; ===========================================================================
00019252                            
00019252                            loc_18474:
00019252 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00019258 6E00                       		bgt.s	locret_1849C
0001925A 317C 1830 0030             		move.w	#$1830,$30(a0)
00019260                            
00019260                            loc_18482:
00019260 4268 0010                  		clr.w	$10(a0)
00019264 317C FE80 0012             		move.w	#-$180,$12(a0)
0001926A 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00019270 6400                       		bcc.s	loc_18498
00019272 4468 0012                  		neg.w	$12(a0)
00019276                            
00019276                            loc_18498:
00019276 5428 0028                  		addq.b	#2,$28(a0)
0001927A                            
0001927A                            locret_1849C:
0001927A 4E75                       		rts	
0001927C                            ; ===========================================================================
0001927C                            
0001927C                            Obj73_MakeLava2:			; XREF: off_183C2
0001927C 6100 F42C                  		bsr.w	BossMove
00019280 3028 0038                  		move.w	$38(a0),d0
00019284 0440 022C                  		subi.w	#$22C,d0
00019288 6E00                       		bgt.s	locret_184F4
0001928A 303C 022C                  		move.w	#$22C,d0
0001928E 4A68 0012                  		tst.w	$12(a0)
00019292 6700                       		beq.s	loc_184EA
00019294 4268 0012                  		clr.w	$12(a0)
00019298 317C 0050 003C             		move.w	#$50,$3C(a0)
0001929E 0868 0000 0022             		bchg	#0,$22(a0)
000192A4 4EB9 0000 E728             		jsr	SingleObjLoad
000192AA 6600                       		bne.s	loc_184EA
000192AC 3368 0030 0008             		move.w	$30(a0),8(a1)
000192B2 3368 0038 000C             		move.w	$38(a0),$C(a1)
000192B8 0669 0018 000C             		addi.w	#$18,$C(a1)
000192BE 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
000192C2 137C 0001 0028             		move.b	#1,$28(a1)
000192C8                            
000192C8                            loc_184EA:
000192C8 5368 003C                  		subq.w	#1,$3C(a0)
000192CC 6600                       		bne.s	locret_184F4
000192CE 5428 0028                  		addq.b	#2,$28(a0)
000192D2                            
000192D2                            locret_184F4:
000192D2 4E75                       		rts	
000192D4                            ; ===========================================================================
000192D4                            
000192D4                            loc_184F6:				; XREF: Obj73_ShipIndex
000192D4 5368 003C                  		subq.w	#1,$3C(a0)
000192D8 6B00                       		bmi.s	loc_18500
000192DA 6000 F38C                  		bra.w	BossDefeated
000192DE                            ; ===========================================================================
000192DE                            
000192DE                            loc_18500:
000192DE 08E8 0000 0022             		bset	#0,$22(a0)
000192E4 08A8 0007 0022             		bclr	#7,$22(a0)
000192EA 4268 0010                  		clr.w	$10(a0)
000192EE 5428 0025                  		addq.b	#2,$25(a0)
000192F2 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000192F8 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000192FC 6600                       		bne.s	locret_1852A
000192FE 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019304 4268 0012                  		clr.w	$12(a0)
00019308                            
00019308                            locret_1852A:
00019308 4E75                       		rts	
0001930A                            ; ===========================================================================
0001930A                            
0001930A                            loc_1852C:				; XREF: Obj73_ShipIndex
0001930A 5268 003C                  		addq.w	#1,$3C(a0)
0001930E 6700                       		beq.s	loc_18544
00019310 6A00                       		bpl.s	loc_1854E
00019312 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00019318 6400                       		bcc.s	loc_18544
0001931A 0668 0018 0012             		addi.w	#$18,$12(a0)
00019320 6000                       		bra.s	loc_1857A
00019322                            ; ===========================================================================
00019322                            
00019322                            loc_18544:
00019322 4268 0012                  		clr.w	$12(a0)
00019326 4268 003C                  		clr.w	$3C(a0)
0001932A 6000                       		bra.s	loc_1857A
0001932C                            ; ===========================================================================
0001932C                            
0001932C                            loc_1854E:
0001932C 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00019332 6500                       		bcs.s	loc_18566
00019334 6700                       		beq.s	loc_1856C
00019336 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001933C 6500                       		bcs.s	loc_1857A
0001933E 5428 0025                  		addq.b	#2,$25(a0)
00019342 6000                       		bra.s	loc_1857A
00019344                            ; ===========================================================================
00019344                            
00019344                            loc_18566:
00019344 5168 0012                  		subq.w	#8,$12(a0)
00019348 6000                       		bra.s	loc_1857A
0001934A                            ; ===========================================================================
0001934A                            
0001934A                            loc_1856C:
0001934A 4268 0012                  		clr.w	$12(a0)
0001934E 303C 0083                  		move.w	#$83,d0
00019352 4EB9 0000 15E0             		jsr	(PlaySound).l	; play MZ music
00019358                            
00019358                            loc_1857A:
00019358 6100 F350                  		bsr.w	BossMove
0001935C 6000 FDC0                  		bra.w	loc_1833E
00019360                            ; ===========================================================================
00019360                            
00019360                            loc_18582:				; XREF: Obj73_ShipIndex
00019360 317C 0500 0010             		move.w	#$500,$10(a0)
00019366 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001936C 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00019372 6400                       		bcc.s	loc_1859C
00019374 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019378 6000                       		bra.s	loc_185A2
0001937A                            ; ===========================================================================
0001937A                            
0001937A                            loc_1859C:
0001937A 4A28 0001                  		tst.b	1(a0)
0001937E 6A00                       		bpl.s	Obj73_ShipDel
00019380                            
00019380                            loc_185A2:
00019380 6100 F328                  		bsr.w	BossMove
00019384 6000 FD98                  		bra.w	loc_1833E
00019388                            ; ===========================================================================
00019388                            
00019388                            Obj73_ShipDel:
00019388 4EF9 0000 E2DE             		jmp	DeleteObject
0001938E                            ; ===========================================================================
0001938E                            
0001938E                            Obj73_FaceMain:				; XREF: Obj73_Index
0001938E 7000                       		moveq	#0,d0
00019390 7201                       		moveq	#1,d1
00019392 2268 0034                  		movea.l	$34(a0),a1
00019396 1029 0025                  		move.b	$25(a1),d0
0001939A 5540                       		subq.w	#2,d0
0001939C 6600                       		bne.s	loc_185D2
0001939E 0829 0001 0028             		btst	#1,$28(a1)
000193A4 6700                       		beq.s	loc_185DA
000193A6 4A69 0012                  		tst.w	$12(a1)
000193AA 6600                       		bne.s	loc_185DA
000193AC 7204                       		moveq	#4,d1
000193AE 6000                       		bra.s	loc_185EE
000193B0                            ; ===========================================================================
000193B0                            
000193B0                            loc_185D2:
000193B0 5500                       		subq.b	#2,d0
000193B2 6B00                       		bmi.s	loc_185DA
000193B4 720A                       		moveq	#$A,d1
000193B6 6000                       		bra.s	loc_185EE
000193B8                            ; ===========================================================================
000193B8                            
000193B8                            loc_185DA:
000193B8 4A29 0020                  		tst.b	$20(a1)
000193BC 6600                       		bne.s	loc_185E4
000193BE 7205                       		moveq	#5,d1
000193C0 6000                       		bra.s	loc_185EE
000193C2                            ; ===========================================================================
000193C2                            
000193C2                            loc_185E4:
000193C2 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000193C8 6500                       		bcs.s	loc_185EE
000193CA 7204                       		moveq	#4,d1
000193CC                            
000193CC                            loc_185EE:
000193CC 1141 001C                  		move.b	d1,$1C(a0)
000193D0 5900                       		subq.b	#4,d0
000193D2 6600                       		bne.s	loc_18602
000193D4 117C 0006 001C             		move.b	#6,$1C(a0)
000193DA 4A28 0001                  		tst.b	1(a0)
000193DE 6A00                       		bpl.s	Obj73_FaceDel
000193E0                            
000193E0                            loc_18602:
000193E0 6000                       		bra.s	Obj73_Display
000193E2                            ; ===========================================================================
000193E2                            
000193E2                            Obj73_FaceDel:
000193E2 4EF9 0000 E2DE             		jmp	DeleteObject
000193E8                            ; ===========================================================================
000193E8                            
000193E8                            Obj73_FlameMain:			; XREF: Obj73_Index
000193E8 117C 0007 001C             		move.b	#7,$1C(a0)
000193EE 2268 0034                  		movea.l	$34(a0),a1
000193F2 0C29 0008 0025             		cmpi.b	#8,$25(a1)
000193F8 6D00                       		blt.s	loc_1862A
000193FA 117C 000B 001C             		move.b	#$B,$1C(a0)
00019400 4A28 0001                  		tst.b	1(a0)
00019404 6A00                       		bpl.s	Obj73_FlameDel
00019406 6000                       		bra.s	loc_18636
00019408                            ; ===========================================================================
00019408                            
00019408                            loc_1862A:
00019408 4A69 0010                  		tst.w	$10(a1)
0001940C 6700                       		beq.s	loc_18636
0001940E 117C 0008 001C             		move.b	#8,$1C(a0)
00019414                            
00019414                            loc_18636:
00019414 6000                       		bra.s	Obj73_Display
00019416                            ; ===========================================================================
00019416                            
00019416                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00019416 4EF9 0000 E2DE             		jmp	DeleteObject
0001941C                            ; ===========================================================================
0001941C                            
0001941C                            Obj73_Display:
0001941C 43F9 0001 8AEC             		lea	(Ani_Eggman).l,a1
00019422 4EB9 0000 B2FA             		jsr	AnimateSprite
00019428                            
00019428                            loc_1864A:
00019428 2268 0034                  		movea.l	$34(a0),a1
0001942C 3169 0008 0008             		move.w	8(a1),8(a0)
00019432 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019438 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001943E 7003                       		moveq	#3,d0
00019440 C028 0022                  		and.b	$22(a0),d0
00019444 0228 00FC 0001             		andi.b	#-4,1(a0)
0001944A 8128 0001                  		or.b	d0,1(a0)
0001944E 4EF9 0000 E2A2             		jmp	DisplaySprite
00019454                            ; ===========================================================================
00019454                            
00019454                            Obj73_TubeMain:				; XREF: Obj73_Index
00019454 2268 0034                  		movea.l	$34(a0),a1
00019458 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001945E 6600                       		bne.s	loc_18688
00019460 4A28 0001                  		tst.b	1(a0)
00019464 6A00                       		bpl.s	Obj73_TubeDel
00019466                            
00019466                            loc_18688:
00019466 217C 0001 8C18 0004        		move.l	#Map_BossItems,4(a0)
0001946E 317C 246C 0002             		move.w	#$246C,2(a0)
00019474 117C 0004 001A             		move.b	#4,$1A(a0)
0001947A 60AC                       		bra.s	loc_1864A
0001947C                            ; ===========================================================================
0001947C                            
0001947C                            Obj73_TubeDel:
0001947C 4EF9 0000 E2DE             		jmp	DeleteObject
00019482                            ; ===========================================================================
00019482                            ; ---------------------------------------------------------------------------
00019482                            ; Object 74 - lava that	Eggman drops (MZ)
00019482                            ; ---------------------------------------------------------------------------
00019482                            
00019482                            Obj74:					; XREF: Obj_Index
00019482 7000                       		moveq	#0,d0
00019484 1028 0024                  		move.b	$24(a0),d0
00019488 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001948C 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
00019490 4EF9 0000 E2A2             		jmp	DisplaySprite
00019496                            ; ===========================================================================
00019496 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
00019498 0000                       		dc.w Obj74_Action-Obj74_Index
0001949A 0000                       		dc.w loc_18886-Obj74_Index
0001949C 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001949E                            ; ===========================================================================
0001949E                            
0001949E                            Obj74_Main:				; XREF: Obj74_Index
0001949E 117C 0008 0016             		move.b	#8,$16(a0)
000194A4 117C 0008 0017             		move.b	#8,$17(a0)
000194AA 217C 0000 BEF8 0004        		move.l	#Map_obj14,4(a0)
000194B2 317C 0345 0002             		move.w	#$345,2(a0)
000194B8 117C 0004 0001             		move.b	#4,1(a0)
000194BE 117C 0005 0018             		move.b	#5,$18(a0)
000194C4 3168 000C 0038             		move.w	$C(a0),$38(a0)
000194CA 117C 0008 0019             		move.b	#8,$19(a0)
000194D0 5428 0024                  		addq.b	#2,$24(a0)
000194D4 4A28 0028                  		tst.b	$28(a0)
000194D8 6600                       		bne.s	loc_1870A
000194DA 117C 008B 0020             		move.b	#$8B,$20(a0)
000194E0 5428 0024                  		addq.b	#2,$24(a0)
000194E4 6000 0000                  		bra.w	loc_18886
000194E8                            ; ===========================================================================
000194E8                            
000194E8                            loc_1870A:
000194E8 117C 001E 0029             		move.b	#$1E,$29(a0)
000194EE 303C 00AE                  		move.w	#$AE,d0
000194F2 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play lava sound
000194F8                            
000194F8                            Obj74_Action:				; XREF: Obj74_Index
000194F8 7000                       		moveq	#0,d0
000194FA 1028 0025                  		move.b	$25(a0),d0
000194FE 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00019502 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00019506 4EB9 0000 E268             		jsr	SpeedToPos
0001950C 43F9 0000 F15A             		lea	(Ani_obj14).l,a1
00019512 4EB9 0000 B2FA             		jsr	AnimateSprite
00019518 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
0001951E 6200                       		bhi.s	Obj74_Delete
00019520 4E75                       		rts	
00019522                            ; ===========================================================================
00019522                            
00019522                            Obj74_Delete:
00019522 4EF9 0000 E2DE             		jmp	DeleteObject
00019528                            ; ===========================================================================
00019528 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001952A 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001952C 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001952E 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00019530                            ; ===========================================================================
00019530                            
00019530                            Obj74_Drop:				; XREF: Obj74_Index2
00019530 08E8 0001 0022             		bset	#1,$22(a0)
00019536 5328 0029                  		subq.b	#1,$29(a0)
0001953A 6A00                       		bpl.s	locret_18780
0001953C 117C 008B 0020             		move.b	#$8B,$20(a0)
00019542 4228 0028                  		clr.b	$28(a0)
00019546 0668 0018 0012             		addi.w	#$18,$12(a0)
0001954C 08A8 0001 0022             		bclr	#1,$22(a0)
00019552 6100 C618                  		bsr.w	ObjHitFloor
00019556 4A41                       		tst.w	d1
00019558 6A00                       		bpl.s	locret_18780
0001955A 5428 0025                  		addq.b	#2,$25(a0)
0001955E                            
0001955E                            locret_18780:
0001955E 4E75                       		rts	
00019560                            ; ===========================================================================
00019560                            
00019560                            Obj74_MakeFlame:			; XREF: Obj74_Index2
00019560 5568 000C                  		subq.w	#2,$C(a0)
00019564 08E8 0007 0002             		bset	#7,2(a0)
0001956A 317C 00A0 0010             		move.w	#$A0,$10(a0)
00019570 4268 0012                  		clr.w	$12(a0)
00019574 3168 0008 0030             		move.w	8(a0),$30(a0)
0001957A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019580 117C 0003 0029             		move.b	#3,$29(a0)
00019586 4EB9 0000 E73E             		jsr	SingleObjLoad2
0001958C 6600                       		bne.s	loc_187CA
0001958E 47D1                       		lea	(a1),a3
00019590 45D0                       		lea	(a0),a2
00019592 7003                       		moveq	#3,d0
00019594                            
00019594                            Obj74_Loop:
00019594 26DA                       		move.l	(a2)+,(a3)+
00019596 26DA                       		move.l	(a2)+,(a3)+
00019598 26DA                       		move.l	(a2)+,(a3)+
0001959A 26DA                       		move.l	(a2)+,(a3)+
0001959C 51C8 FFF6                  		dbf	d0,Obj74_Loop
000195A0                            
000195A0 4469 0010                  		neg.w	$10(a1)
000195A4 5429 0025                  		addq.b	#2,$25(a1)
000195A8                            
000195A8                            loc_187CA:
000195A8 5428 0025                  		addq.b	#2,$25(a0)
000195AC 4E75                       		rts	
000195AE                            
000195AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000195AE                            
000195AE                            
000195AE                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
000195AE 4EB9 0000 E73E             		jsr	SingleObjLoad2
000195B4 6600                       		bne.s	locret_187EE
000195B6 3368 0008 0008             		move.w	8(a0),8(a1)
000195BC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000195C2 12BC 0074                  		move.b	#$74,(a1)
000195C6 337C 0067 0028             		move.w	#$67,$28(a1)
000195CC                            
000195CC                            locret_187EE:
000195CC 4E75                       		rts	
000195CE                            ; End of function Obj74_Duplicate2
000195CE                            
000195CE                            ; ===========================================================================
000195CE                            
000195CE                            Obj74_Duplicate:			; XREF: Obj74_Index2
000195CE 6100 C59C                  		bsr.w	ObjHitFloor
000195D2 4A41                       		tst.w	d1
000195D4 6A00                       		bpl.s	loc_18826
000195D6 3028 0008                  		move.w	8(a0),d0
000195DA 0C40 1940                  		cmpi.w	#$1940,d0
000195DE 6E00                       		bgt.s	loc_1882C
000195E0 3228 0030                  		move.w	$30(a0),d1
000195E4 B240                       		cmp.w	d0,d1
000195E6 6700                       		beq.s	loc_1881E
000195E8 0240 0010                  		andi.w	#$10,d0
000195EC 0241 0010                  		andi.w	#$10,d1
000195F0 B240                       		cmp.w	d0,d1
000195F2 6700                       		beq.s	loc_1881E
000195F4 61B8                       		bsr.s	Obj74_Duplicate2
000195F6 3168 0008 0032             		move.w	8(a0),$32(a0)
000195FC                            
000195FC                            loc_1881E:
000195FC 3168 0008 0030             		move.w	8(a0),$30(a0)
00019602 4E75                       		rts	
00019604                            ; ===========================================================================
00019604                            
00019604                            loc_18826:
00019604 5428 0025                  		addq.b	#2,$25(a0)
00019608 4E75                       		rts	
0001960A                            ; ===========================================================================
0001960A                            
0001960A                            loc_1882C:
0001960A 5428 0024                  		addq.b	#2,$24(a0)
0001960E 4E75                       		rts	
00019610                            ; ===========================================================================
00019610                            
00019610                            Obj74_FallEdge:				; XREF: Obj74_Index2
00019610 08A8 0001 0022             		bclr	#1,$22(a0)
00019616 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
0001961C 3028 0008                  		move.w	8(a0),d0
00019620 9068 0032                  		sub.w	$32(a0),d0
00019624 6A00                       		bpl.s	loc_1884A
00019626 4440                       		neg.w	d0
00019628                            
00019628                            loc_1884A:
00019628 0C40 0012                  		cmpi.w	#$12,d0
0001962C 6600                       		bne.s	loc_18856
0001962E 08A8 0007 0002             		bclr	#7,2(a0)
00019634                            
00019634                            loc_18856:
00019634 6100 C536                  		bsr.w	ObjHitFloor
00019638 4A41                       		tst.w	d1
0001963A 6A00                       		bpl.s	locret_1887E
0001963C 5328 0029                  		subq.b	#1,$29(a0)
00019640 6700                       		beq.s	Obj74_Delete2
00019642 4268 0012                  		clr.w	$12(a0)
00019646 3168 0032 0008             		move.w	$32(a0),8(a0)
0001964C 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019652 08E8 0007 0002             		bset	#7,2(a0)
00019658 5528 0025                  		subq.b	#2,$25(a0)
0001965C                            
0001965C                            locret_1887E:
0001965C 4E75                       		rts	
0001965E                            ; ===========================================================================
0001965E                            
0001965E                            Obj74_Delete2:
0001965E 4EF9 0000 E2DE             		jmp	DeleteObject
00019664                            ; ===========================================================================
00019664                            
00019664                            loc_18886:				; XREF: Obj74_Index
00019664 08E8 0007 0002             		bset	#7,2(a0)
0001966A 5328 0029                  		subq.b	#1,$29(a0)
0001966E 6600                       		bne.s	Obj74_Animate
00019670 117C 0001 001C             		move.b	#1,$1C(a0)
00019676 5968 000C                  		subq.w	#4,$C(a0)
0001967A 4228 0020                  		clr.b	$20(a0)
0001967E                            
0001967E                            Obj74_Animate:
0001967E 43F9 0000 F15A             		lea	(Ani_obj14).l,a1
00019684 4EF9 0000 B2FA             		jmp	AnimateSprite
0001968A                            ; ===========================================================================
0001968A                            
0001968A                            Obj74_Delete3:				; XREF: Obj74_Index
0001968A 4EF9 0000 E2DE             		jmp	DeleteObject
00019690                            ; ===========================================================================
00019690                            
00019690                            Obj7A_Delete:
00019690 4EF9 0000 E2DE             		jmp	DeleteObject
00019696                            ; ===========================================================================
00019696                            ; ---------------------------------------------------------------------------
00019696                            ; Object 7A - Eggman (SLZ)
00019696                            ; ---------------------------------------------------------------------------
00019696                            
00019696                            Obj7A:					; XREF: Obj_Index
00019696 7000                       		moveq	#0,d0
00019698 1028 0024                  		move.b	$24(a0),d0
0001969C 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
000196A0 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
000196A4                            ; ===========================================================================
000196A4 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
000196A6 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
000196A8 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
000196AA 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
000196AC 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
000196AE                            
000196AE 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
000196B1 0401 04                    		dc.b 4,	1, 4
000196B4 0607 04                    		dc.b 6,	7, 4
000196B7 0800 03                    		dc.b 8,	0, 3
000196BA                            ; ===========================================================================
000196BA                            
000196BA                            Obj7A_Main:				; XREF: Obj7A_Index
000196BA 317C 2188 0008             		move.w	#$2188,8(a0)
000196C0 317C 0228 000C             		move.w	#$228,$C(a0)
000196C6 3168 0008 0030             		move.w	8(a0),$30(a0)
000196CC 3168 000C 0038             		move.w	$C(a0),$38(a0)
000196D2 117C 000F 0020             		move.b	#$F,$20(a0)
000196D8 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000196DE 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
000196E2 2248                       		movea.l	a0,a1
000196E4 7203                       		moveq	#3,d1
000196E6 6000                       		bra.s	Obj7A_LoadBoss
000196E8                            ; ===========================================================================
000196E8                            
000196E8                            Obj7A_Loop:
000196E8 4EB9 0000 E73E             		jsr	SingleObjLoad2
000196EE 6600                       		bne.s	loc_1895C
000196F0 12BC 007A                  		move.b	#$7A,0(a1)
000196F4 3368 0008 0008             		move.w	8(a0),8(a1)
000196FA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019700                            
00019700                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
00019700 08A8 0000 0022             		bclr	#0,$22(a0)
00019706 4229 0025                  		clr.b	$25(a1)
0001970A 135A 0024                  		move.b	(a2)+,$24(a1)
0001970E 135A 001C                  		move.b	(a2)+,$1C(a1)
00019712 135A 0018                  		move.b	(a2)+,$18(a1)
00019716 237C 0001 8B50 0004        		move.l	#Map_Eggman,4(a1)
0001971E 337C 0400 0002             		move.w	#$400,2(a1)
00019724 137C 0004 0001             		move.b	#4,1(a1)
0001972A 137C 0020 0019             		move.b	#$20,$19(a1)
00019730 2348 0034                  		move.l	a0,$34(a1)
00019734 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00019738                            
00019738                            loc_1895C:
00019738 43F8 D040                  		lea	($FFFFD040).w,a1
0001973C 45E8 002A                  		lea	$2A(a0),a2
00019740 705E                       		moveq	#$5E,d0
00019742 723E                       		moveq	#$3E,d1
00019744                            
00019744                            loc_18968:
00019744 B011                       		cmp.b	(a1),d0
00019746 6600                       		bne.s	loc_18974
00019748 4A29 0028                  		tst.b	$28(a1)
0001974C 6700                       		beq.s	loc_18974
0001974E 34C9                       		move.w	a1,(a2)+
00019750                            
00019750                            loc_18974:
00019750 D2FC 0040                  		adda.w	#$40,a1
00019754 51C9 FFEE                  		dbf	d1,loc_18968
00019758                            
00019758                            Obj7A_ShipMain:				; XREF: Obj7A_Index
00019758 7000                       		moveq	#0,d0
0001975A 1028 0025                  		move.b	$25(a0),d0
0001975E 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
00019762 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00019766 43F9 0001 8AEC             		lea	(Ani_Eggman).l,a1
0001976C 4EB9 0000 B2FA             		jsr	AnimateSprite
00019772 7003                       		moveq	#3,d0
00019774 C028 0022                  		and.b	$22(a0),d0
00019778 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001977E 8128 0001                  		or.b	d0,1(a0)
00019782 4EF9 0000 E2A2             		jmp	DisplaySprite
00019788                            ; ===========================================================================
00019788 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001978A 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001978C 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001978E 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
00019790 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
00019792 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
00019794                            ; ===========================================================================
00019794                            
00019794                            loc_189B8:				; XREF: Obj7A_ShipIndex
00019794 317C FF00 0010             		move.w	#-$100,$10(a0)
0001979A 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
000197A0 6400                       		bcc.s	loc_189CA
000197A2 5428 0025                  		addq.b	#2,$25(a0)
000197A6                            
000197A6                            loc_189CA:
000197A6 6100 EF02                  		bsr.w	BossMove
000197AA 1028 003F                  		move.b	$3F(a0),d0
000197AE 5428 003F                  		addq.b	#2,$3F(a0)
000197B2 4EB9 0000 2D80             		jsr	(CalcSine).l
000197B8 EC40                       		asr.w	#6,d0
000197BA D068 0038                  		add.w	$38(a0),d0
000197BE 3140 000C                  		move.w	d0,$C(a0)
000197C2 3168 0030 0008             		move.w	$30(a0),8(a0)
000197C8 6000                       		bra.s	loc_189FE
000197CA                            ; ===========================================================================
000197CA                            
000197CA                            loc_189EE:
000197CA 6100 EEDE                  		bsr.w	BossMove
000197CE 3168 0038 000C             		move.w	$38(a0),$C(a0)
000197D4 3168 0030 0008             		move.w	$30(a0),8(a0)
000197DA                            
000197DA                            loc_189FE:
000197DA 0C28 0006 0025             		cmpi.b	#6,$25(a0)
000197E0 6400                       		bcc.s	locret_18A44
000197E2 4A28 0022                  		tst.b	$22(a0)
000197E6 6B00                       		bmi.s	loc_18A46
000197E8 4A28 0020                  		tst.b	$20(a0)
000197EC 6600                       		bne.s	locret_18A44
000197EE 4A28 003E                  		tst.b	$3E(a0)
000197F2 6600                       		bne.s	loc_18A28
000197F4 117C 0020 003E             		move.b	#$20,$3E(a0)
000197FA 303C 00AC                  		move.w	#$AC,d0
000197FE 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019804                            
00019804                            loc_18A28:
00019804 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019808 7000                       		moveq	#0,d0
0001980A 4A51                       		tst.w	(a1)
0001980C 6600                       		bne.s	loc_18A36
0001980E 303C 0EEE                  		move.w	#$EEE,d0
00019812                            
00019812                            loc_18A36:
00019812 3280                       		move.w	d0,(a1)
00019814 5328 003E                  		subq.b	#1,$3E(a0)
00019818 6600                       		bne.s	locret_18A44
0001981A 117C 000F 0020             		move.b	#$F,$20(a0)
00019820                            
00019820                            locret_18A44:
00019820 4E75                       		rts	
00019822                            ; ===========================================================================
00019822                            
00019822                            loc_18A46:
00019822 7064                       		moveq	#100,d0
00019824 6100 0000                  		bsr.w	AddPoints
00019828 117C 0006 0025             		move.b	#6,$25(a0)
0001982E 117C 0078 003C             		move.b	#$78,$3C(a0)
00019834 4268 0010                  		clr.w	$10(a0)
00019838 4E75                       		rts	
0001983A                            ; ===========================================================================
0001983A                            
0001983A                            loc_18A5E:				; XREF: Obj7A_ShipIndex
0001983A 3028 0030                  		move.w	$30(a0),d0
0001983E 317C 0200 0010             		move.w	#$200,$10(a0)
00019844 0828 0000 0022             		btst	#0,$22(a0)
0001984A 6600                       		bne.s	loc_18A7C
0001984C 4468 0010                  		neg.w	$10(a0)
00019850 0C40 2008                  		cmpi.w	#$2008,d0
00019854 6E00                       		bgt.s	loc_18A88
00019856 6000                       		bra.s	loc_18A82
00019858                            ; ===========================================================================
00019858                            
00019858                            loc_18A7C:
00019858 0C40 2138                  		cmpi.w	#$2138,d0
0001985C 6D00                       		blt.s	loc_18A88
0001985E                            
0001985E                            loc_18A82:
0001985E 0868 0000 0022             		bchg	#0,$22(a0)
00019864                            
00019864                            loc_18A88:
00019864 3028 0008                  		move.w	8(a0),d0
00019868 72FF                       		moveq	#-1,d1
0001986A 7402                       		moveq	#2,d2
0001986C 45E8 002A                  		lea	$2A(a0),a2
00019870 7828                       		moveq	#$28,d4
00019872 4A68 0010                  		tst.w	$10(a0)
00019876 6A00                       		bpl.s	loc_18A9E
00019878 4444                       		neg.w	d4
0001987A                            
0001987A                            loc_18A9E:
0001987A 321A                       		move.w	(a2)+,d1
0001987C 2641                       		movea.l	d1,a3
0001987E 082B 0003 0022             		btst	#3,$22(a3)
00019884 6600                       		bne.s	loc_18AB4
00019886 362B 0008                  		move.w	8(a3),d3
0001988A D644                       		add.w	d4,d3
0001988C 9640                       		sub.w	d0,d3
0001988E 6700                       		beq.s	loc_18AC0
00019890                            
00019890                            loc_18AB4:
00019890 51CA FFE8                  		dbf	d2,loc_18A9E
00019894                            
00019894 1142 0028                  		move.b	d2,$28(a0)
00019898 6000 FF0C                  		bra.w	loc_189CA
0001989C                            ; ===========================================================================
0001989C                            
0001989C                            loc_18AC0:
0001989C 1142 0028                  		move.b	d2,$28(a0)
000198A0 5428 0025                  		addq.b	#2,$25(a0)
000198A4 117C 0028 003C             		move.b	#$28,$3C(a0)
000198AA 6000 FEFA                  		bra.w	loc_189CA
000198AE                            ; ===========================================================================
000198AE                            
000198AE                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
000198AE 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
000198B4 6600                       		bne.s	loc_18B36
000198B6 70FF                       		moveq	#-1,d0
000198B8 1028 0028                  		move.b	$28(a0),d0
000198BC 4880                       		ext.w	d0
000198BE 6B00                       		bmi.s	loc_18B40
000198C0 5540                       		subq.w	#2,d0
000198C2 4440                       		neg.w	d0
000198C4 D040                       		add.w	d0,d0
000198C6 43E8 002A                  		lea	$2A(a0),a1
000198CA 3031 0000                  		move.w	(a1,d0.w),d0
000198CE 2440                       		movea.l	d0,a2
000198D0 43F8 D040                  		lea	($FFFFD040).w,a1
000198D4 723E                       		moveq	#$3E,d1
000198D6                            
000198D6                            loc_18AFA:
000198D6 B0A9 003C                  		cmp.l	$3C(a1),d0
000198DA 6700                       		beq.s	loc_18B40
000198DC D2FC 0040                  		adda.w	#$40,a1
000198E0 51C9 FFF4                  		dbf	d1,loc_18AFA
000198E4                            
000198E4 2F08                       		move.l	a0,-(sp)
000198E6 41D2                       		lea	(a2),a0
000198E8 4EB9 0000 E73E             		jsr	SingleObjLoad2
000198EE 205F                       		movea.l	(sp)+,a0
000198F0 6600                       		bne.s	loc_18B40
000198F2 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
000198F6 3368 0008 0008             		move.w	8(a0),8(a1)
000198FC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019902 0669 0020 000C             		addi.w	#$20,$C(a1)
00019908 136A 0022 0022             		move.b	$22(a2),$22(a1)
0001990E 234A 003C                  		move.l	a2,$3C(a1)
00019912                            
00019912                            loc_18B36:
00019912 5328 003C                  		subq.b	#1,$3C(a0)
00019916 6700                       		beq.s	loc_18B40
00019918 6000 FEC0                  		bra.w	loc_189FE
0001991C                            ; ===========================================================================
0001991C                            
0001991C                            loc_18B40:
0001991C 5528 0025                  		subq.b	#2,$25(a0)
00019920 6000 FE84                  		bra.w	loc_189CA
00019924                            ; ===========================================================================
00019924                            
00019924                            loc_18B48:				; XREF: Obj7A_ShipIndex
00019924 5328 003C                  		subq.b	#1,$3C(a0)
00019928 6B00                       		bmi.s	loc_18B52
0001992A 6000 ED3C                  		bra.w	BossDefeated
0001992E                            ; ===========================================================================
0001992E                            
0001992E                            loc_18B52:
0001992E 5428 0025                  		addq.b	#2,$25(a0)
00019932 4268 0012                  		clr.w	$12(a0)
00019936 08E8 0000 0022             		bset	#0,$22(a0)
0001993C 08A8 0007 0022             		bclr	#7,$22(a0)
00019942 4268 0010                  		clr.w	$10(a0)
00019946 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001994C 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019950 6600                       		bne.s	loc_18B7C
00019952 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019958                            
00019958                            loc_18B7C:
00019958 6000 FE80                  		bra.w	loc_189FE
0001995C                            ; ===========================================================================
0001995C                            
0001995C                            loc_18B80:				; XREF: Obj7A_ShipIndex
0001995C 5228 003C                  		addq.b	#1,$3C(a0)
00019960 6700                       		beq.s	loc_18B90
00019962 6A00                       		bpl.s	loc_18B96
00019964 0668 0018 0012             		addi.w	#$18,$12(a0)
0001996A 6000                       		bra.s	loc_18BC2
0001996C                            ; ===========================================================================
0001996C                            
0001996C                            loc_18B90:
0001996C 4268 0012                  		clr.w	$12(a0)
00019970 6000                       		bra.s	loc_18BC2
00019972                            ; ===========================================================================
00019972                            
00019972                            loc_18B96:
00019972 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
00019978 6500                       		bcs.s	loc_18BAE
0001997A 6700                       		beq.s	loc_18BB4
0001997C 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
00019982 6500                       		bcs.s	loc_18BC2
00019984 5428 0025                  		addq.b	#2,$25(a0)
00019988 6000                       		bra.s	loc_18BC2
0001998A                            ; ===========================================================================
0001998A                            
0001998A                            loc_18BAE:
0001998A 5168 0012                  		subq.w	#8,$12(a0)
0001998E 6000                       		bra.s	loc_18BC2
00019990                            ; ===========================================================================
00019990                            
00019990                            loc_18BB4:
00019990 4268 0012                  		clr.w	$12(a0)
00019994 303C 0084                  		move.w	#$84,d0
00019998 4EB9 0000 15E0             		jsr	(PlaySound).l	; play SLZ music
0001999E                            
0001999E                            loc_18BC2:
0001999E 6000 FE2A                  		bra.w	loc_189EE
000199A2                            ; ===========================================================================
000199A2                            
000199A2                            loc_18BC6:				; XREF: Obj7A_ShipIndex
000199A2 317C 0400 0010             		move.w	#$400,$10(a0)
000199A8 317C FFC0 0012             		move.w	#-$40,$12(a0)
000199AE 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
000199B4 6400                       		bcc.s	loc_18BE0
000199B6 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000199BA 6000                       		bra.s	loc_18BE8
000199BC                            ; ===========================================================================
000199BC                            
000199BC                            loc_18BE0:
000199BC 4A28 0001                  		tst.b	1(a0)
000199C0 6A00 FCCE                  		bpl.w	Obj7A_Delete
000199C4                            
000199C4                            loc_18BE8:
000199C4 6100 ECE4                  		bsr.w	BossMove
000199C8 6000 FDDC                  		bra.w	loc_189CA
000199CC                            ; ===========================================================================
000199CC                            
000199CC                            Obj7A_FaceMain:				; XREF: Obj7A_Index
000199CC 7000                       		moveq	#0,d0
000199CE 7201                       		moveq	#1,d1
000199D0 2268 0034                  		movea.l	$34(a0),a1
000199D4 1029 0025                  		move.b	$25(a1),d0
000199D8 0C00 0006                  		cmpi.b	#6,d0
000199DC 6B00                       		bmi.s	loc_18C06
000199DE 720A                       		moveq	#$A,d1
000199E0 6000                       		bra.s	loc_18C1A
000199E2                            ; ===========================================================================
000199E2                            
000199E2                            loc_18C06:
000199E2 4A29 0020                  		tst.b	$20(a1)
000199E6 6600                       		bne.s	loc_18C10
000199E8 7205                       		moveq	#5,d1
000199EA 6000                       		bra.s	loc_18C1A
000199EC                            ; ===========================================================================
000199EC                            
000199EC                            loc_18C10:
000199EC 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000199F2 6500                       		bcs.s	loc_18C1A
000199F4 7204                       		moveq	#4,d1
000199F6                            
000199F6                            loc_18C1A:
000199F6 1141 001C                  		move.b	d1,$1C(a0)
000199FA 0C00 000A                  		cmpi.b	#$A,d0
000199FE 6600                       		bne.s	loc_18C32
00019A00 117C 0006 001C             		move.b	#6,$1C(a0)
00019A06 4A28 0001                  		tst.b	1(a0)
00019A0A 6A00 FC84                  		bpl.w	Obj7A_Delete
00019A0E                            
00019A0E                            loc_18C32:
00019A0E 6000                       		bra.s	loc_18C6C
00019A10                            ; ===========================================================================
00019A10                            
00019A10                            Obj7A_FlameMain:			; XREF: Obj7A_Index
00019A10 117C 0008 001C             		move.b	#8,$1C(a0)
00019A16 2268 0034                  		movea.l	$34(a0),a1
00019A1A 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019A20 6600                       		bne.s	loc_18C56
00019A22 4A28 0001                  		tst.b	1(a0)
00019A26 6A00 FC68                  		bpl.w	Obj7A_Delete
00019A2A 117C 000B 001C             		move.b	#$B,$1C(a0)
00019A30 6000                       		bra.s	loc_18C6C
00019A32                            ; ===========================================================================
00019A32                            
00019A32                            loc_18C56:
00019A32 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019A38 6E00                       		bgt.s	loc_18C6C
00019A3A 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019A40 6D00                       		blt.s	loc_18C6C
00019A42 117C 0007 001C             		move.b	#7,$1C(a0)
00019A48                            
00019A48                            loc_18C6C:
00019A48 43F9 0001 8AEC             		lea	(Ani_Eggman).l,a1
00019A4E 4EB9 0000 B2FA             		jsr	AnimateSprite
00019A54                            
00019A54                            loc_18C78:
00019A54 2268 0034                  		movea.l	$34(a0),a1
00019A58 3169 0008 0008             		move.w	8(a1),8(a0)
00019A5E 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019A64 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019A6A 7003                       		moveq	#3,d0
00019A6C C028 0022                  		and.b	$22(a0),d0
00019A70 0228 00FC 0001             		andi.b	#-4,1(a0)
00019A76 8128 0001                  		or.b	d0,1(a0)
00019A7A 4EF9 0000 E2A2             		jmp	DisplaySprite
00019A80                            ; ===========================================================================
00019A80                            
00019A80                            Obj7A_TubeMain:				; XREF: Obj7A_Index
00019A80 2268 0034                  		movea.l	$34(a0),a1
00019A84 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019A8A 6600                       		bne.s	loc_18CB8
00019A8C 4A28 0001                  		tst.b	1(a0)
00019A90 6A00 FBFE                  		bpl.w	Obj7A_Delete
00019A94                            
00019A94                            loc_18CB8:
00019A94 217C 0001 8C18 0004        		move.l	#Map_BossItems,4(a0)
00019A9C 317C 246C 0002             		move.w	#$246C,2(a0)
00019AA2 117C 0003 001A             		move.b	#3,$1A(a0)
00019AA8 60AA                       		bra.s	loc_18C78
00019AAA                            ; ===========================================================================
00019AAA                            ; ---------------------------------------------------------------------------
00019AAA                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
00019AAA                            ; ---------------------------------------------------------------------------
00019AAA                            
00019AAA                            Obj7B:					; XREF: Obj_Index
00019AAA 7000                       		moveq	#0,d0
00019AAC 1028 0024                  		move.b	$24(a0),d0
00019AB0 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
00019AB4 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
00019AB8 3028 0030                  		move.w	$30(a0),d0
00019ABC 0240 FF80                  		andi.w	#$FF80,d0
00019AC0 3238 F700                  		move.w	($FFFFF700).w,d1
00019AC4 0441 0080                  		subi.w	#$80,d1
00019AC8 0241 FF80                  		andi.w	#$FF80,d1
00019ACC 9041                       		sub.w	d1,d0
00019ACE 6B00 FBC0                  		bmi.w	Obj7A_Delete
00019AD2 0C40 0280                  		cmpi.w	#$280,d0
00019AD6 6200 FBB8                  		bhi.w	Obj7A_Delete
00019ADA 4EF9 0000 E2A2             		jmp	DisplaySprite
00019AE0                            ; ===========================================================================
00019AE0 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
00019AE2 0000                       		dc.w Obj7B_Fall-Obj7B_Index
00019AE4 0000                       		dc.w loc_18DC6-Obj7B_Index
00019AE6 0000                       		dc.w loc_18EAA-Obj7B_Index
00019AE8 0000                       		dc.w Obj7B_Explode-Obj7B_Index
00019AEA 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
00019AEC                            ; ===========================================================================
00019AEC                            
00019AEC                            Obj7B_Main:				; XREF: Obj7B_Index
00019AEC 217C 0001 2644 0004        		move.l	#Map_obj5Ea,4(a0)
00019AF4 317C 0518 0002             		move.w	#$518,2(a0)
00019AFA 117C 0001 001A             		move.b	#1,$1A(a0)
00019B00 0028 0004 0001             		ori.b	#4,1(a0)
00019B06 117C 0004 0018             		move.b	#4,$18(a0)
00019B0C 117C 008B 0020             		move.b	#$8B,$20(a0)
00019B12 117C 000C 0019             		move.b	#$C,$19(a0)
00019B18 2268 003C                  		movea.l	$3C(a0),a1
00019B1C 3169 0008 0030             		move.w	8(a1),$30(a0)
00019B22 3169 000C 0034             		move.w	$C(a1),$34(a0)
00019B28 08E8 0000 0022             		bset	#0,$22(a0)
00019B2E 3028 0008                  		move.w	8(a0),d0
00019B32 B069 0008                  		cmp.w	8(a1),d0
00019B36 6E00                       		bgt.s	loc_18D68
00019B38 08A8 0000 0022             		bclr	#0,$22(a0)
00019B3E 117C 0002 003A             		move.b	#2,$3A(a0)
00019B44                            
00019B44                            loc_18D68:
00019B44 5428 0024                  		addq.b	#2,$24(a0)
00019B48                            
00019B48                            Obj7B_Fall:				; XREF: Obj7B_Index
00019B48 4EB9 0000 E206             		jsr	ObjectFall
00019B4E 2268 003C                  		movea.l	$3C(a0),a1
00019B52 45F9 0000 0000             		lea	(word_19018).l,a2
00019B58 7000                       		moveq	#0,d0
00019B5A 1029 001A                  		move.b	$1A(a1),d0
00019B5E 3228 0008                  		move.w	8(a0),d1
00019B62 9268 0030                  		sub.w	$30(a0),d1
00019B66 6400                       		bcc.s	loc_18D8E
00019B68 5440                       		addq.w	#2,d0
00019B6A                            
00019B6A                            loc_18D8E:
00019B6A D040                       		add.w	d0,d0
00019B6C 3228 0034                  		move.w	$34(a0),d1
00019B70 D272 0000                  		add.w	(a2,d0.w),d1
00019B74 B268 000C                  		cmp.w	$C(a0),d1
00019B78 6E00                       		bgt.s	locret_18DC4
00019B7A 2268 003C                  		movea.l	$3C(a0),a1
00019B7E 7202                       		moveq	#2,d1
00019B80 0828 0000 0022             		btst	#0,$22(a0)
00019B86 6700                       		beq.s	loc_18DAE
00019B88 7200                       		moveq	#0,d1
00019B8A                            
00019B8A                            loc_18DAE:
00019B8A 317C 00F0 0028             		move.w	#$F0,$28(a0)
00019B90 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
00019B96 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00019B9C 6000 0000                  		bra.w	loc_18FA2
00019BA0                            ; ===========================================================================
00019BA0                            
00019BA0                            locret_18DC4:
00019BA0 4E75                       		rts	
00019BA2                            ; ===========================================================================
00019BA2                            
00019BA2                            loc_18DC6:				; XREF: Obj7B_Index
00019BA2 2268 003C                  		movea.l	$3C(a0),a1
00019BA6 7000                       		moveq	#0,d0
00019BA8 1028 003A                  		move.b	$3A(a0),d0
00019BAC 9029 003A                  		sub.b	$3A(a1),d0
00019BB0 6700                       		beq.s	loc_18E2A
00019BB2 6400                       		bcc.s	loc_18DDA
00019BB4 4400                       		neg.b	d0
00019BB6                            
00019BB6                            loc_18DDA:
00019BB6 323C F7E8                  		move.w	#-$818,d1
00019BBA 343C FEEC                  		move.w	#-$114,d2
00019BBE 0C00 0001                  		cmpi.b	#1,d0
00019BC2 6700                       		beq.s	loc_18E00
00019BC4 323C F6A0                  		move.w	#-$960,d1
00019BC8 343C FF0C                  		move.w	#-$F4,d2
00019BCC 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
00019BD2 6D00                       		blt.s	loc_18E00
00019BD4 323C F5E0                  		move.w	#-$A20,d1
00019BD8 343C FF80                  		move.w	#-$80,d2
00019BDC                            
00019BDC                            loc_18E00:
00019BDC 3141 0012                  		move.w	d1,$12(a0)
00019BE0 3142 0010                  		move.w	d2,$10(a0)
00019BE4 3028 0008                  		move.w	8(a0),d0
00019BE8 9068 0030                  		sub.w	$30(a0),d0
00019BEC 6400                       		bcc.s	loc_18E16
00019BEE 4468 0010                  		neg.w	$10(a0)
00019BF2                            
00019BF2                            loc_18E16:
00019BF2 117C 0001 001A             		move.b	#1,$1A(a0)
00019BF8 317C 0020 0028             		move.w	#$20,$28(a0)
00019BFE 5428 0024                  		addq.b	#2,$24(a0)
00019C02 6000 0000                  		bra.w	loc_18EAA
00019C06                            ; ===========================================================================
00019C06                            
00019C06                            loc_18E2A:				; XREF: loc_18DC6
00019C06 45F9 0000 0000             		lea	(word_19018).l,a2
00019C0C 7000                       		moveq	#0,d0
00019C0E 1029 001A                  		move.b	$1A(a1),d0
00019C12 343C 0028                  		move.w	#$28,d2
00019C16 3228 0008                  		move.w	8(a0),d1
00019C1A 9268 0030                  		sub.w	$30(a0),d1
00019C1E 6400                       		bcc.s	loc_18E48
00019C20 4442                       		neg.w	d2
00019C22 5440                       		addq.w	#2,d0
00019C24                            
00019C24                            loc_18E48:
00019C24 D040                       		add.w	d0,d0
00019C26 3228 0034                  		move.w	$34(a0),d1
00019C2A D272 0000                  		add.w	(a2,d0.w),d1
00019C2E 3141 000C                  		move.w	d1,$C(a0)
00019C32 D468 0030                  		add.w	$30(a0),d2
00019C36 3142 0008                  		move.w	d2,8(a0)
00019C3A 4268 000E                  		clr.w	$E(a0)
00019C3E 4268 000A                  		clr.w	$A(a0)
00019C42 5368 0028                  		subq.w	#1,$28(a0)
00019C46 6600                       		bne.s	loc_18E7A
00019C48 317C 0020 0028             		move.w	#$20,$28(a0)
00019C4E 117C 0008 0024             		move.b	#8,$24(a0)
00019C54 4E75                       		rts	
00019C56                            ; ===========================================================================
00019C56                            
00019C56                            loc_18E7A:
00019C56 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
00019C5C 6600                       		bne.s	loc_18E88
00019C5E 117C 0005 001F             		move.b	#5,$1F(a0)
00019C64                            
00019C64                            loc_18E88:
00019C64 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
00019C6A 6600                       		bne.s	loc_18E96
00019C6C 117C 0002 001F             		move.b	#2,$1F(a0)
00019C72                            
00019C72                            loc_18E96:
00019C72 5328 001E                  		subq.b	#1,$1E(a0)
00019C76 6E00                       		bgt.s	locret_18EA8
00019C78 0868 0000 001A             		bchg	#0,$1A(a0)
00019C7E 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00019C84                            
00019C84                            locret_18EA8:
00019C84 4E75                       		rts	
00019C86                            ; ===========================================================================
00019C86                            
00019C86                            loc_18EAA:				; XREF: Obj7B_Index
00019C86 43F8 D040                  		lea	($FFFFD040).w,a1
00019C8A 707A                       		moveq	#$7A,d0
00019C8C 7240                       		moveq	#$40,d1
00019C8E 743E                       		moveq	#$3E,d2
00019C90                            
00019C90                            loc_18EB4:
00019C90 B011                       		cmp.b	(a1),d0
00019C92 6700                       		beq.s	loc_18EC0
00019C94 D2C1                       		adda.w	d1,a1
00019C96 51CA FFF8                  		dbf	d2,loc_18EB4
00019C9A                            
00019C9A 6000                       		bra.s	loc_18F38
00019C9C                            ; ===========================================================================
00019C9C                            
00019C9C                            loc_18EC0:
00019C9C 3029 0008                  		move.w	8(a1),d0
00019CA0 3229 000C                  		move.w	$C(a1),d1
00019CA4 3428 0008                  		move.w	8(a0),d2
00019CA8 3628 000C                  		move.w	$C(a0),d3
00019CAC 45FA 0000                  		lea	byte_19022(pc),a2
00019CB0 47FA 0000                  		lea	byte_19026(pc),a3
00019CB4 181A                       		move.b	(a2)+,d4
00019CB6 4884                       		ext.w	d4
00019CB8 D044                       		add.w	d4,d0
00019CBA 181B                       		move.b	(a3)+,d4
00019CBC 4884                       		ext.w	d4
00019CBE D444                       		add.w	d4,d2
00019CC0 B440                       		cmp.w	d0,d2
00019CC2 6500                       		bcs.s	loc_18F38
00019CC4 181A                       		move.b	(a2)+,d4
00019CC6 4884                       		ext.w	d4
00019CC8 D044                       		add.w	d4,d0
00019CCA 181B                       		move.b	(a3)+,d4
00019CCC 4884                       		ext.w	d4
00019CCE D444                       		add.w	d4,d2
00019CD0 B042                       		cmp.w	d2,d0
00019CD2 6500                       		bcs.s	loc_18F38
00019CD4 181A                       		move.b	(a2)+,d4
00019CD6 4884                       		ext.w	d4
00019CD8 D244                       		add.w	d4,d1
00019CDA 181B                       		move.b	(a3)+,d4
00019CDC 4884                       		ext.w	d4
00019CDE D644                       		add.w	d4,d3
00019CE0 B641                       		cmp.w	d1,d3
00019CE2 6500                       		bcs.s	loc_18F38
00019CE4 181A                       		move.b	(a2)+,d4
00019CE6 4884                       		ext.w	d4
00019CE8 D244                       		add.w	d4,d1
00019CEA 181B                       		move.b	(a3)+,d4
00019CEC 4884                       		ext.w	d4
00019CEE D644                       		add.w	d4,d3
00019CF0 B243                       		cmp.w	d3,d1
00019CF2 6500                       		bcs.s	loc_18F38
00019CF4 5428 0024                  		addq.b	#2,$24(a0)
00019CF8 4268 0028                  		clr.w	$28(a0)
00019CFC 4229 0020                  		clr.b	$20(a1)
00019D00 5329 0021                  		subq.b	#1,$21(a1)
00019D04 6600                       		bne.s	loc_18F38
00019D06 08E9 0007 0022             		bset	#7,$22(a1)
00019D0C 4268 0010                  		clr.w	$10(a0)
00019D10 4268 0012                  		clr.w	$12(a0)
00019D14                            
00019D14                            loc_18F38:
00019D14 4A68 0012                  		tst.w	$12(a0)
00019D18 6A00                       		bpl.s	loc_18F5C
00019D1A 4EB9 0000 E206             		jsr	ObjectFall
00019D20 3028 0034                  		move.w	$34(a0),d0
00019D24 0440 002F                  		subi.w	#$2F,d0
00019D28 B068 000C                  		cmp.w	$C(a0),d0
00019D2C 6E00                       		bgt.s	loc_18F58
00019D2E 4EB9 0000 E206             		jsr	ObjectFall
00019D34                            
00019D34                            loc_18F58:
00019D34 6000 FF20                  		bra.w	loc_18E7A
00019D38                            ; ===========================================================================
00019D38                            
00019D38                            loc_18F5C:
00019D38 4EB9 0000 E206             		jsr	ObjectFall
00019D3E 2268 003C                  		movea.l	$3C(a0),a1
00019D42 45F9 0000 0000             		lea	(word_19018).l,a2
00019D48 7000                       		moveq	#0,d0
00019D4A 1029 001A                  		move.b	$1A(a1),d0
00019D4E 3228 0008                  		move.w	8(a0),d1
00019D52 9268 0030                  		sub.w	$30(a0),d1
00019D56 6400                       		bcc.s	loc_18F7E
00019D58 5440                       		addq.w	#2,d0
00019D5A                            
00019D5A                            loc_18F7E:
00019D5A D040                       		add.w	d0,d0
00019D5C 3228 0034                  		move.w	$34(a0),d1
00019D60 D272 0000                  		add.w	(a2,d0.w),d1
00019D64 B268 000C                  		cmp.w	$C(a0),d1
00019D68 6ECA                       		bgt.s	loc_18F58
00019D6A 2268 003C                  		movea.l	$3C(a0),a1
00019D6E 7202                       		moveq	#2,d1
00019D70 4A68 0010                  		tst.w	$10(a0)
00019D74 6B00                       		bmi.s	loc_18F9C
00019D76 7200                       		moveq	#0,d1
00019D78                            
00019D78                            loc_18F9C:
00019D78 317C 0000 0028             		move.w	#0,$28(a0)
00019D7E                            
00019D7E                            loc_18FA2:
00019D7E 1341 003A                  		move.b	d1,$3A(a1)
00019D82 1141 003A                  		move.b	d1,$3A(a0)
00019D86 B229 001A                  		cmp.b	$1A(a1),d1
00019D8A 6700                       		beq.s	loc_19008
00019D8C 08A9 0003 0022             		bclr	#3,$22(a1)
00019D92 6700                       		beq.s	loc_19008
00019D94 4229 0025                  		clr.b	$25(a1)
00019D98 137C 0002 0024             		move.b	#2,$24(a1)
00019D9E 45F8 D000                  		lea	($FFFFD000).w,a2
00019DA2 3568 0012 0012             		move.w	$12(a0),$12(a2)
00019DA8 446A 0012                  		neg.w	$12(a2)
00019DAC 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
00019DB2 6600                       		bne.s	loc_18FDC
00019DB4 E0EA 0012                  		asr	$12(a2)
00019DB8                            
00019DB8                            loc_18FDC:
00019DB8 08EA 0001 0022             		bset	#1,$22(a2)
00019DBE 08AA 0003 0022             		bclr	#3,$22(a2)
00019DC4 422A 003C                  		clr.b	$3C(a2)
00019DC8 2F08                       		move.l	a0,-(sp)
00019DCA 41D2                       		lea	(a2),a0
00019DCC 4EBA A2EC                  		jsr	Obj01_ChkRoll
00019DD0 205F                       		movea.l	(sp)+,a0
00019DD2 157C 0002 0024             		move.b	#2,$24(a2)
00019DD8 303C 00CC                  		move.w	#$CC,d0
00019DDC 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play "spring" sound
00019DE2                            
00019DE2                            loc_19008:
00019DE2 4268 0010                  		clr.w	$10(a0)
00019DE6 4268 0012                  		clr.w	$12(a0)
00019DEA 5428 0024                  		addq.b	#2,$24(a0)
00019DEE 6000 FE66                  		bra.w	loc_18E7A
00019DF2                            ; ===========================================================================
00019DF2 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00019DFC                            		even
00019DFC E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
00019E00                            		even
00019E00 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
00019E04                            		even
00019E04                            ; ===========================================================================
00019E04                            
00019E04                            Obj7B_Explode:				; XREF: Obj7B_Index
00019E04 10BC 003F                  		move.b	#$3F,(a0)
00019E08 4228 0024                  		clr.b	$24(a0)
00019E0C 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
00019E12 6700                       		beq.s	Obj7B_MakeFrag
00019E14 4E75                       		rts	
00019E16                            ; ===========================================================================
00019E16                            
00019E16                            Obj7B_MakeFrag:
00019E16 3168 0034 000C             		move.w	$34(a0),$C(a0)
00019E1C 7203                       		moveq	#3,d1
00019E1E 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
00019E22                            
00019E22                            Obj7B_Loop:
00019E22 4EB9 0000 E728             		jsr	SingleObjLoad
00019E28 6600                       		bne.s	loc_1909A
00019E2A 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
00019E2E 137C 000A 0024             		move.b	#$A,$24(a1)
00019E34 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
00019E3C 137C 0003 0018             		move.b	#3,$18(a1)
00019E42 337C 0518 0002             		move.w	#$518,2(a1)
00019E48 3368 0008 0008             		move.w	8(a0),8(a1)
00019E4E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019E54 335A 0010                  		move.w	(a2)+,$10(a1)
00019E58 335A 0012                  		move.w	(a2)+,$12(a1)
00019E5C 137C 0098 0020             		move.b	#$98,$20(a1)
00019E62 0029 0004 0001             		ori.b	#4,1(a1)
00019E68 08E9 0007 0001             		bset	#7,1(a1)
00019E6E 137C 000C 0019             		move.b	#$C,$19(a1)
00019E74                            
00019E74                            loc_1909A:
00019E74 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
00019E78                            
00019E78 4E75                       		rts	
00019E7A                            ; ===========================================================================
00019E7A FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
00019E7E FF60 FDC0                  		dc.w $FF60, $FDC0
00019E82 0100 FCC0                  		dc.w $100, $FCC0
00019E86 00A0 FDC0                  		dc.w $A0, $FDC0
00019E8A                            ; ===========================================================================
00019E8A                            
00019E8A                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
00019E8A 4EB9 0000 E268             		jsr	SpeedToPos
00019E90 3168 0008 0030             		move.w	8(a0),$30(a0)
00019E96 3168 000C 0034             		move.w	$C(a0),$34(a0)
00019E9C 0668 0018 0012             		addi.w	#$18,$12(a0)
00019EA2 7004                       		moveq	#4,d0
00019EA4 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
00019EA8 E448                       		lsr.w	#2,d0
00019EAA 1140 001A                  		move.b	d0,$1A(a0)
00019EAE 4A28 0001                  		tst.b	1(a0)
00019EB2 6A00 F7DC                  		bpl.w	Obj7A_Delete
00019EB6 4E75                       		rts	
00019EB8                            ; ===========================================================================
00019EB8                            ; ---------------------------------------------------------------------------
00019EB8                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019EB8                            ; ---------------------------------------------------------------------------
00019EB8                            Map_obj7B:
00019EB8                            	include "_maps\obj7B.asm"
00019EB8                            ; ---------------------------------------------------------------------------
00019EB8                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019EB8                            ; ---------------------------------------------------------------------------
00019EB8 0000                       		dc.w byte_190E2-Map_obj7B
00019EBA 0000                       		dc.w byte_190E8-Map_obj7B
00019EBC 01                         byte_190E2:	dc.b 1
00019EBD FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00019EC2 01                         byte_190E8:	dc.b 1
00019EC3 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00019EC8                            		even
00019EC8                            		even
00019EC8                            
00019EC8                            ; ===========================================================================
00019EC8                            ; ---------------------------------------------------------------------------
00019EC8                            ; Object 75 - Eggman (SYZ)
00019EC8                            ; ---------------------------------------------------------------------------
00019EC8                            
00019EC8                            Obj75:					; XREF: Obj_Index
00019EC8 7000                       		moveq	#0,d0
00019ECA 1028 0024                  		move.b	$24(a0),d0
00019ECE 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
00019ED2 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
00019ED6                            ; ===========================================================================
00019ED6 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
00019ED8 0000                       		dc.w Obj75_ShipMain-Obj75_Index
00019EDA 0000                       		dc.w Obj75_FaceMain-Obj75_Index
00019EDC 0000                       		dc.w Obj75_FlameMain-Obj75_Index
00019EDE 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
00019EE0                            
00019EE0 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
00019EE3 0401 05                    		dc.b 4,	1, 5
00019EE6 0607 05                    		dc.b 6,	7, 5
00019EE9 0800 05                    		dc.b 8,	0, 5
00019EEC                            ; ===========================================================================
00019EEC                            
00019EEC                            Obj75_Main:				; XREF: Obj75_Index
00019EEC 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
00019EF2 317C 04DA 000C             		move.w	#$4DA,$C(a0)
00019EF8 3168 0008 0030             		move.w	8(a0),$30(a0)
00019EFE 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019F04 117C 000F 0020             		move.b	#$F,$20(a0)
00019F0A 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019F10 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
00019F14 2248                       		movea.l	a0,a1
00019F16 7203                       		moveq	#3,d1
00019F18 6000                       		bra.s	Obj75_LoadBoss
00019F1A                            ; ===========================================================================
00019F1A                            
00019F1A                            Obj75_Loop:
00019F1A 4EB9 0000 E73E             		jsr	SingleObjLoad2
00019F20 6600                       		bne.s	Obj75_ShipMain
00019F22 12BC 0075                  		move.b	#$75,(a1)
00019F26 3368 0008 0008             		move.w	8(a0),8(a1)
00019F2C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019F32                            
00019F32                            Obj75_LoadBoss:				; XREF: Obj75_Main
00019F32 08A8 0000 0022             		bclr	#0,$22(a0)
00019F38 4229 0025                  		clr.b	$25(a1)
00019F3C 135A 0024                  		move.b	(a2)+,$24(a1)
00019F40 135A 001C                  		move.b	(a2)+,$1C(a1)
00019F44 135A 0018                  		move.b	(a2)+,$18(a1)
00019F48 237C 0001 8B50 0004        		move.l	#Map_Eggman,4(a1)
00019F50 337C 0400 0002             		move.w	#$400,2(a1)
00019F56 137C 0004 0001             		move.b	#4,1(a1)
00019F5C 137C 0020 0019             		move.b	#$20,$19(a1)
00019F62 2348 0034                  		move.l	a0,$34(a1)
00019F66 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
00019F6A                            
00019F6A                            Obj75_ShipMain:				; XREF: Obj75_Index
00019F6A 7000                       		moveq	#0,d0
00019F6C 1028 0025                  		move.b	$25(a0),d0
00019F70 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
00019F74 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
00019F78 43F9 0001 8AEC             		lea	(Ani_Eggman).l,a1
00019F7E 4EB9 0000 B2FA             		jsr	AnimateSprite
00019F84 7003                       		moveq	#3,d0
00019F86 C028 0022                  		and.b	$22(a0),d0
00019F8A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019F90 8128 0001                  		or.b	d0,1(a0)
00019F94 4EF9 0000 E2A2             		jmp	DisplaySprite
00019F9A                            ; ===========================================================================
00019F9A 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
00019F9E 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
00019FA2 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
00019FA6                            ; ===========================================================================
00019FA6                            
00019FA6                            loc_191CC:				; XREF: Obj75_ShipIndex
00019FA6 317C FF00 0010             		move.w	#-$100,$10(a0)
00019FAC 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
00019FB2 6400                       		bcc.s	loc_191DE
00019FB4 5428 0025                  		addq.b	#2,$25(a0)
00019FB8                            
00019FB8                            loc_191DE:
00019FB8 1028 003F                  		move.b	$3F(a0),d0
00019FBC 5428 003F                  		addq.b	#2,$3F(a0)
00019FC0 4EB9 0000 2D80             		jsr	(CalcSine).l
00019FC6 E440                       		asr.w	#2,d0
00019FC8 3140 0012                  		move.w	d0,$12(a0)
00019FCC                            
00019FCC                            loc_191F2:
00019FCC 6100 E6DC                  		bsr.w	BossMove
00019FD0 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019FD6 3168 0030 0008             		move.w	$30(a0),8(a0)
00019FDC                            
00019FDC                            loc_19202:
00019FDC 3028 0008                  		move.w	8(a0),d0
00019FE0 0440 2C00                  		subi.w	#$2C00,d0
00019FE4 EA48                       		lsr.w	#5,d0
00019FE6 1140 0034                  		move.b	d0,$34(a0)
00019FEA 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019FF0 6400                       		bcc.s	locret_19256
00019FF2 4A28 0022                  		tst.b	$22(a0)
00019FF6 6B00                       		bmi.s	loc_19258
00019FF8 4A28 0020                  		tst.b	$20(a0)
00019FFC 6600                       		bne.s	locret_19256
00019FFE 4A28 003E                  		tst.b	$3E(a0)
0001A002 6600                       		bne.s	loc_1923A
0001A004 117C 0020 003E             		move.b	#$20,$3E(a0)
0001A00A 303C 00AC                  		move.w	#$AC,d0
0001A00E 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A014                            
0001A014                            loc_1923A:
0001A014 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001A018 7000                       		moveq	#0,d0
0001A01A 4A51                       		tst.w	(a1)
0001A01C 6600                       		bne.s	loc_19248
0001A01E 303C 0EEE                  		move.w	#$EEE,d0
0001A022                            
0001A022                            loc_19248:
0001A022 3280                       		move.w	d0,(a1)
0001A024 5328 003E                  		subq.b	#1,$3E(a0)
0001A028 6600                       		bne.s	locret_19256
0001A02A 117C 000F 0020             		move.b	#$F,$20(a0)
0001A030                            
0001A030                            locret_19256:
0001A030 4E75                       		rts	
0001A032                            ; ===========================================================================
0001A032                            
0001A032                            loc_19258:				; XREF: loc_19202
0001A032 7064                       		moveq	#100,d0
0001A034 6100 0000                  		bsr.w	AddPoints
0001A038 117C 0006 0025             		move.b	#6,$25(a0)
0001A03E 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001A044 4268 0010                  		clr.w	$10(a0)
0001A048 4E75                       		rts	
0001A04A                            ; ===========================================================================
0001A04A                            
0001A04A                            loc_19270:				; XREF: Obj75_ShipIndex
0001A04A 3028 0030                  		move.w	$30(a0),d0
0001A04E 317C 0140 0010             		move.w	#$140,$10(a0)
0001A054 0828 0000 0022             		btst	#0,$22(a0)
0001A05A 6600                       		bne.s	loc_1928E
0001A05C 4468 0010                  		neg.w	$10(a0)
0001A060 0C40 2C08                  		cmpi.w	#$2C08,d0
0001A064 6E00                       		bgt.s	loc_1929E
0001A066 6000                       		bra.s	loc_19294
0001A068                            ; ===========================================================================
0001A068                            
0001A068                            loc_1928E:
0001A068 0C40 2D38                  		cmpi.w	#$2D38,d0
0001A06C 6D00                       		blt.s	loc_1929E
0001A06E                            
0001A06E                            loc_19294:
0001A06E 0868 0000 0022             		bchg	#0,$22(a0)
0001A074 4228 003D                  		clr.b	$3D(a0)
0001A078                            
0001A078                            loc_1929E:
0001A078 0440 2C10                  		subi.w	#$2C10,d0
0001A07C 0240 001F                  		andi.w	#$1F,d0
0001A080 0440 001F                  		subi.w	#$1F,d0
0001A084 6A00                       		bpl.s	loc_192AE
0001A086 4440                       		neg.w	d0
0001A088                            
0001A088                            loc_192AE:
0001A088 5340                       		subq.w	#1,d0
0001A08A 6E00                       		bgt.s	loc_192E8
0001A08C 4A28 003D                  		tst.b	$3D(a0)
0001A090 6600                       		bne.s	loc_192E8
0001A092 3238 D008                  		move.w	($FFFFD008).w,d1
0001A096 0441 2C00                  		subi.w	#$2C00,d1
0001A09A EA41                       		asr.w	#5,d1
0001A09C B228 0034                  		cmp.b	$34(a0),d1
0001A0A0 6600                       		bne.s	loc_192E8
0001A0A2 7000                       		moveq	#0,d0
0001A0A4 1028 0034                  		move.b	$34(a0),d0
0001A0A8 EB40                       		asl.w	#5,d0
0001A0AA 0640 2C10                  		addi.w	#$2C10,d0
0001A0AE 3140 0030                  		move.w	d0,$30(a0)
0001A0B2 6100 0000                  		bsr.w	Obj75_FindBlocks
0001A0B6 5428 0025                  		addq.b	#2,$25(a0)
0001A0BA 4268 0028                  		clr.w	$28(a0)
0001A0BE 4268 0010                  		clr.w	$10(a0)
0001A0C2                            
0001A0C2                            loc_192E8:
0001A0C2 6000 FEF4                  		bra.w	loc_191DE
0001A0C6                            ; ===========================================================================
0001A0C6                            
0001A0C6                            loc_192EC:				; XREF: Obj75_ShipIndex
0001A0C6 7000                       		moveq	#0,d0
0001A0C8 1028 0028                  		move.b	$28(a0),d0
0001A0CC 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001A0D0 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001A0D4                            ; ===========================================================================
0001A0D4 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001A0D6 0000                       		dc.w loc_19348-off_192FA
0001A0D8 0000                       		dc.w loc_1938E-off_192FA
0001A0DA 0000                       		dc.w loc_193D0-off_192FA
0001A0DC                            ; ===========================================================================
0001A0DC                            
0001A0DC                            loc_19302:				; XREF: off_192FA
0001A0DC 317C 0180 0012             		move.w	#$180,$12(a0)
0001A0E2 3028 0038                  		move.w	$38(a0),d0
0001A0E6 0C40 0556                  		cmpi.w	#$556,d0
0001A0EA 6500                       		bcs.s	loc_19344
0001A0EC 317C 0556 0038             		move.w	#$556,$38(a0)
0001A0F2 4268 003C                  		clr.w	$3C(a0)
0001A0F6 70FF                       		moveq	#-1,d0
0001A0F8 3028 0036                  		move.w	$36(a0),d0
0001A0FC 6700                       		beq.s	loc_1933C
0001A0FE 2240                       		movea.l	d0,a1
0001A100 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A106 117C 00FF 0029             		move.b	#-1,$29(a0)
0001A10C 2348 0034                  		move.l	a0,$34(a1)
0001A110 317C 0032 003C             		move.w	#$32,$3C(a0)
0001A116                            
0001A116                            loc_1933C:
0001A116 4268 0012                  		clr.w	$12(a0)
0001A11A 5428 0028                  		addq.b	#2,$28(a0)
0001A11E                            
0001A11E                            loc_19344:
0001A11E 6000 FEAC                  		bra.w	loc_191F2
0001A122                            ; ===========================================================================
0001A122                            
0001A122                            loc_19348:				; XREF: off_192FA
0001A122 5368 003C                  		subq.w	#1,$3C(a0)
0001A126 6A00                       		bpl.s	loc_19366
0001A128 5428 0028                  		addq.b	#2,$28(a0)
0001A12C 317C F800 0012             		move.w	#-$800,$12(a0)
0001A132 4A68 0036                  		tst.w	$36(a0)
0001A136 6600                       		bne.s	loc_19362
0001A138 E0E8 0012                  		asr	$12(a0)
0001A13C                            
0001A13C                            loc_19362:
0001A13C 7000                       		moveq	#0,d0
0001A13E 6000                       		bra.s	loc_1937C
0001A140                            ; ===========================================================================
0001A140                            
0001A140                            loc_19366:
0001A140 7000                       		moveq	#0,d0
0001A142 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001A148 6E00                       		bgt.s	loc_1937C
0001A14A 7002                       		moveq	#2,d0
0001A14C 0828 0001 003D             		btst	#1,$3D(a0)
0001A152 6700                       		beq.s	loc_1937C
0001A154 4440                       		neg.w	d0
0001A156                            
0001A156                            loc_1937C:
0001A156 D068 0038                  		add.w	$38(a0),d0
0001A15A 3140 000C                  		move.w	d0,$C(a0)
0001A15E 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A164 6000 FE76                  		bra.w	loc_19202
0001A168                            ; ===========================================================================
0001A168                            
0001A168                            loc_1938E:				; XREF: off_192FA
0001A168 303C 04DA                  		move.w	#$4DA,d0
0001A16C 4A68 0036                  		tst.w	$36(a0)
0001A170 6700                       		beq.s	loc_1939C
0001A172 0440 0018                  		subi.w	#$18,d0
0001A176                            
0001A176                            loc_1939C:
0001A176 B068 0038                  		cmp.w	$38(a0),d0
0001A17A 6D00                       		blt.s	loc_193BE
0001A17C 317C 0008 003C             		move.w	#8,$3C(a0)
0001A182 4A68 0036                  		tst.w	$36(a0)
0001A186 6700                       		beq.s	loc_193B4
0001A188 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001A18E                            
0001A18E                            loc_193B4:
0001A18E 5428 0028                  		addq.b	#2,$28(a0)
0001A192 4268 0012                  		clr.w	$12(a0)
0001A196 6000                       		bra.s	loc_193CC
0001A198                            ; ===========================================================================
0001A198                            
0001A198                            loc_193BE:
0001A198 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
0001A19E 6C00                       		bge.s	loc_193CC
0001A1A0 0668 000C 0012             		addi.w	#$C,$12(a0)
0001A1A6                            
0001A1A6                            loc_193CC:
0001A1A6 6000 FE24                  		bra.w	loc_191F2
0001A1AA                            ; ===========================================================================
0001A1AA                            
0001A1AA                            loc_193D0:				; XREF: off_192FA
0001A1AA 5368 003C                  		subq.w	#1,$3C(a0)
0001A1AE 6E00                       		bgt.s	loc_19406
0001A1B0 6B00                       		bmi.s	loc_193EE
0001A1B2 70FF                       		moveq	#-1,d0
0001A1B4 3028 0036                  		move.w	$36(a0),d0
0001A1B8 6700                       		beq.s	loc_193E8
0001A1BA 2240                       		movea.l	d0,a1
0001A1BC 137C 000A 0029             		move.b	#$A,$29(a1)
0001A1C2                            
0001A1C2                            loc_193E8:
0001A1C2 4268 0036                  		clr.w	$36(a0)
0001A1C6 6000                       		bra.s	loc_19406
0001A1C8                            ; ===========================================================================
0001A1C8                            
0001A1C8                            loc_193EE:
0001A1C8 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001A1CE 6600                       		bne.s	loc_19406
0001A1D0 4228 0029                  		clr.b	$29(a0)
0001A1D4 5528 0025                  		subq.b	#2,$25(a0)
0001A1D8 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001A1DE 6000                       		bra.s	loc_19446
0001A1E0                            ; ===========================================================================
0001A1E0                            
0001A1E0                            loc_19406:
0001A1E0 7001                       		moveq	#1,d0
0001A1E2 4A68 0036                  		tst.w	$36(a0)
0001A1E6 6700                       		beq.s	loc_19410
0001A1E8 7002                       		moveq	#2,d0
0001A1EA                            
0001A1EA                            loc_19410:
0001A1EA 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001A1F0 6700                       		beq.s	loc_19424
0001A1F2 6D00                       		blt.s	loc_1941C
0001A1F4 4440                       		neg.w	d0
0001A1F6                            
0001A1F6                            loc_1941C:
0001A1F6 4A68 0036                  		tst.w	$36(a0)
0001A1FA D168 0038                  		add.w	d0,$38(a0)
0001A1FE                            
0001A1FE                            loc_19424:
0001A1FE 7000                       		moveq	#0,d0
0001A200 4A68 0036                  		tst.w	$36(a0)
0001A204 6700                       		beq.s	loc_19438
0001A206 7002                       		moveq	#2,d0
0001A208 0828 0000 003D             		btst	#0,$3D(a0)
0001A20E 6700                       		beq.s	loc_19438
0001A210 4440                       		neg.w	d0
0001A212                            
0001A212                            loc_19438:
0001A212 D068 0038                  		add.w	$38(a0),d0
0001A216 3140 000C                  		move.w	d0,$C(a0)
0001A21A 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A220                            
0001A220                            loc_19446:
0001A220 6000 FDBA                  		bra.w	loc_19202
0001A224                            
0001A224                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A224                            
0001A224                            
0001A224                            Obj75_FindBlocks:			; XREF: loc_192AE
0001A224 4268 0036                  		clr.w	$36(a0)
0001A228 43F8 D040                  		lea	($FFFFD040).w,a1
0001A22C 703E                       		moveq	#$3E,d0
0001A22E 7276                       		moveq	#$76,d1
0001A230 1428 0034                  		move.b	$34(a0),d2
0001A234                            
0001A234                            Obj75_FindLoop:
0001A234 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001A236 6600                       		bne.s	loc_1946A	; if not, branch
0001A238 B429 0028                  		cmp.b	$28(a1),d2
0001A23C 6600                       		bne.s	loc_1946A
0001A23E 3149 0036                  		move.w	a1,$36(a0)
0001A242 6000                       		bra.s	locret_19472
0001A244                            ; ===========================================================================
0001A244                            
0001A244                            loc_1946A:
0001A244 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001A248 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001A24C                            
0001A24C                            locret_19472:
0001A24C 4E75                       		rts	
0001A24E                            ; End of function Obj75_FindBlocks
0001A24E                            
0001A24E                            ; ===========================================================================
0001A24E                            
0001A24E                            loc_19474:				; XREF: Obj75_ShipIndex
0001A24E 5368 003C                  		subq.w	#1,$3C(a0)
0001A252 6B00                       		bmi.s	loc_1947E
0001A254 6000 E412                  		bra.w	BossDefeated
0001A258                            ; ===========================================================================
0001A258                            
0001A258                            loc_1947E:
0001A258 5428 0025                  		addq.b	#2,$25(a0)
0001A25C 4268 0012                  		clr.w	$12(a0)
0001A260 08E8 0000 0022             		bset	#0,$22(a0)
0001A266 08A8 0007 0022             		bclr	#7,$22(a0)
0001A26C 4268 0010                  		clr.w	$10(a0)
0001A270 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001A276 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001A27A 6600                       		bne.s	loc_194A8
0001A27C 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001A282                            
0001A282                            loc_194A8:
0001A282 6000 FD58                  		bra.w	loc_19202
0001A286                            ; ===========================================================================
0001A286                            
0001A286                            loc_194AC:				; XREF: Obj75_ShipIndex
0001A286 5268 003C                  		addq.w	#1,$3C(a0)
0001A28A 6700                       		beq.s	loc_194BC
0001A28C 6A00                       		bpl.s	loc_194C2
0001A28E 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A294 6000                       		bra.s	loc_194EE
0001A296                            ; ===========================================================================
0001A296                            
0001A296                            loc_194BC:
0001A296 4268 0012                  		clr.w	$12(a0)
0001A29A 6000                       		bra.s	loc_194EE
0001A29C                            ; ===========================================================================
0001A29C                            
0001A29C                            loc_194C2:
0001A29C 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001A2A2 6500                       		bcs.s	loc_194DA
0001A2A4 6700                       		beq.s	loc_194E0
0001A2A6 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001A2AC 6500                       		bcs.s	loc_194EE
0001A2AE 5428 0025                  		addq.b	#2,$25(a0)
0001A2B2 6000                       		bra.s	loc_194EE
0001A2B4                            ; ===========================================================================
0001A2B4                            
0001A2B4                            loc_194DA:
0001A2B4 5168 0012                  		subq.w	#8,$12(a0)
0001A2B8 6000                       		bra.s	loc_194EE
0001A2BA                            ; ===========================================================================
0001A2BA                            
0001A2BA                            loc_194E0:
0001A2BA 4268 0012                  		clr.w	$12(a0)
0001A2BE 303C 0085                  		move.w	#$85,d0
0001A2C2 4EB9 0000 15E0             		jsr	(PlaySound).l	; play SYZ music
0001A2C8                            
0001A2C8                            loc_194EE:
0001A2C8 6000 FD02                  		bra.w	loc_191F2
0001A2CC                            ; ===========================================================================
0001A2CC                            
0001A2CC                            loc_194F2:				; XREF: Obj75_ShipIndex
0001A2CC 317C 0400 0010             		move.w	#$400,$10(a0)
0001A2D2 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A2D8 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
0001A2DE 6400                       		bcc.s	loc_1950C
0001A2E0 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A2E4 6000                       		bra.s	loc_19512
0001A2E6                            ; ===========================================================================
0001A2E6                            
0001A2E6                            loc_1950C:
0001A2E6 4A28 0001                  		tst.b	1(a0)
0001A2EA 6A00                       		bpl.s	Obj75_ShipDelete
0001A2EC                            
0001A2EC                            loc_19512:
0001A2EC 6100 E3BC                  		bsr.w	BossMove
0001A2F0 6000 FCC6                  		bra.w	loc_191DE
0001A2F4                            ; ===========================================================================
0001A2F4                            
0001A2F4                            Obj75_ShipDelete:
0001A2F4 4EF9 0000 E2DE             		jmp	DeleteObject
0001A2FA                            ; ===========================================================================
0001A2FA                            
0001A2FA                            Obj75_FaceMain:				; XREF: Obj75_Index
0001A2FA 7201                       		moveq	#1,d1
0001A2FC 2268 0034                  		movea.l	$34(a0),a1
0001A300 7000                       		moveq	#0,d0
0001A302 1029 0025                  		move.b	$25(a1),d0
0001A306 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001A30A 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001A30E 1141 001C                  		move.b	d1,$1C(a0)
0001A312 1010                       		move.b	(a0),d0
0001A314 B011                       		cmp.b	(a1),d0
0001A316 6600                       		bne.s	Obj75_FaceDelete
0001A318 6000                       		bra.s	loc_195BE
0001A31A                            ; ===========================================================================
0001A31A                            
0001A31A                            Obj75_FaceDelete:
0001A31A 4EF9 0000 E2DE             		jmp	DeleteObject
0001A320                            ; ===========================================================================
0001A320 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001A324 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001A328 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001A32C                            ; ===========================================================================
0001A32C                            
0001A32C                            loc_19552:				; XREF: off_19546
0001A32C 720A                       		moveq	#$A,d1
0001A32E 4E75                       		rts	
0001A330                            ; ===========================================================================
0001A330                            
0001A330                            loc_19556:				; XREF: off_19546
0001A330 7206                       		moveq	#6,d1
0001A332 4E75                       		rts	
0001A334                            ; ===========================================================================
0001A334                            
0001A334                            loc_1955A:				; XREF: off_19546
0001A334 7000                       		moveq	#0,d0
0001A336 1029 0028                  		move.b	$28(a1),d0
0001A33A 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001A33E 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001A342                            ; ===========================================================================
0001A342 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001A346 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001A34A                            ; ===========================================================================
0001A34A                            
0001A34A                            loc_19570:				; XREF: off_19568
0001A34A 6000                       		bra.s	loc_19574
0001A34C                            ; ===========================================================================
0001A34C                            
0001A34C                            loc_19572:				; XREF: off_19568
0001A34C 7206                       		moveq	#6,d1
0001A34E                            
0001A34E                            loc_19574:				; XREF: off_19546
0001A34E 4A29 0020                  		tst.b	$20(a1)
0001A352 6600                       		bne.s	loc_1957E
0001A354 7205                       		moveq	#5,d1
0001A356 4E75                       		rts	
0001A358                            ; ===========================================================================
0001A358                            
0001A358                            loc_1957E:
0001A358 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A35E 6500                       		bcs.s	locret_19588
0001A360 7204                       		moveq	#4,d1
0001A362                            
0001A362                            locret_19588:
0001A362 4E75                       		rts	
0001A364                            ; ===========================================================================
0001A364                            
0001A364                            Obj75_FlameMain:			; XREF: Obj75_Index
0001A364 117C 0007 001C             		move.b	#7,$1C(a0)
0001A36A 2268 0034                  		movea.l	$34(a0),a1
0001A36E 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A374 6600                       		bne.s	loc_195AA
0001A376 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A37C 4A28 0001                  		tst.b	1(a0)
0001A380 6A00                       		bpl.s	Obj75_FlameDelete
0001A382 6000                       		bra.s	loc_195B6
0001A384                            ; ===========================================================================
0001A384                            
0001A384                            loc_195AA:
0001A384 4A69 0010                  		tst.w	$10(a1)
0001A388 6700                       		beq.s	loc_195B6
0001A38A 117C 0008 001C             		move.b	#8,$1C(a0)
0001A390                            
0001A390                            loc_195B6:
0001A390 6000                       		bra.s	loc_195BE
0001A392                            ; ===========================================================================
0001A392                            
0001A392                            Obj75_FlameDelete:
0001A392 4EF9 0000 E2DE             		jmp	DeleteObject
0001A398                            ; ===========================================================================
0001A398                            
0001A398                            loc_195BE:
0001A398 43F9 0001 8AEC             		lea	(Ani_Eggman).l,a1
0001A39E 4EB9 0000 B2FA             		jsr	AnimateSprite
0001A3A4 2268 0034                  		movea.l	$34(a0),a1
0001A3A8 3169 0008 0008             		move.w	8(a1),8(a0)
0001A3AE 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A3B4                            
0001A3B4                            loc_195DA:
0001A3B4 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A3BA 7003                       		moveq	#3,d0
0001A3BC C028 0022                  		and.b	$22(a0),d0
0001A3C0 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A3C6 8128 0001                  		or.b	d0,1(a0)
0001A3CA 4EF9 0000 E2A2             		jmp	DisplaySprite
0001A3D0                            ; ===========================================================================
0001A3D0                            
0001A3D0                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001A3D0 217C 0001 8C18 0004        		move.l	#Map_BossItems,4(a0)
0001A3D8 317C 246C 0002             		move.w	#$246C,2(a0)
0001A3DE 117C 0005 001A             		move.b	#5,$1A(a0)
0001A3E4 2268 0034                  		movea.l	$34(a0),a1
0001A3E8 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A3EE 6600                       		bne.s	loc_1961C
0001A3F0 4A28 0001                  		tst.b	1(a0)
0001A3F4 6A00                       		bpl.s	Obj75_SpikeDelete
0001A3F6                            
0001A3F6                            loc_1961C:
0001A3F6 3169 0008 0008             		move.w	8(a1),8(a0)
0001A3FC 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A402 3028 003C                  		move.w	$3C(a0),d0
0001A406 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001A40C 6600                       		bne.s	loc_19652
0001A40E 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001A414 6700                       		beq.s	loc_1964C
0001A416 4A29 0028                  		tst.b	$28(a1)
0001A41A 6600                       		bne.s	loc_19658
0001A41C 0C40 0094                  		cmpi.w	#$94,d0
0001A420 6C00                       		bge.s	loc_19658
0001A422 5E40                       		addq.w	#7,d0
0001A424 6000                       		bra.s	loc_19658
0001A426                            ; ===========================================================================
0001A426                            
0001A426                            loc_1964C:
0001A426 4A69 003C                  		tst.w	$3C(a1)
0001A42A 6A00                       		bpl.s	loc_19658
0001A42C                            
0001A42C                            loc_19652:
0001A42C 4A40                       		tst.w	d0
0001A42E 6F00                       		ble.s	loc_19658
0001A430 5B40                       		subq.w	#5,d0
0001A432                            
0001A432                            loc_19658:
0001A432 3140 003C                  		move.w	d0,$3C(a0)
0001A436 E440                       		asr.w	#2,d0
0001A438 D168 000C                  		add.w	d0,$C(a0)
0001A43C 117C 0008 0019             		move.b	#8,$19(a0)
0001A442 117C 000C 0016             		move.b	#$C,$16(a0)
0001A448 4228 0020                  		clr.b	$20(a0)
0001A44C 2268 0034                  		movea.l	$34(a0),a1
0001A450 4A29 0020                  		tst.b	$20(a1)
0001A454 6700                       		beq.s	loc_19688
0001A456 4A29 0029                  		tst.b	$29(a1)
0001A45A 6600                       		bne.s	loc_19688
0001A45C 117C 0084 0020             		move.b	#$84,$20(a0)
0001A462                            
0001A462                            loc_19688:
0001A462 6000 FF50                  		bra.w	loc_195DA
0001A466                            ; ===========================================================================
0001A466                            
0001A466                            Obj75_SpikeDelete:
0001A466 4EF9 0000 E2DE             		jmp	DeleteObject
0001A46C                            ; ===========================================================================
0001A46C                            ; ---------------------------------------------------------------------------
0001A46C                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001A46C                            ; ---------------------------------------------------------------------------
0001A46C                            
0001A46C                            Obj76:					; XREF: Obj_Index
0001A46C 7000                       		moveq	#0,d0
0001A46E 1028 0024                  		move.b	$24(a0),d0
0001A472 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001A476 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001A47A                            ; ===========================================================================
0001A47A 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001A47C 0000                       		dc.w Obj76_Action-Obj76_Index
0001A47E 0000                       		dc.w loc_19762-Obj76_Index
0001A480                            ; ===========================================================================
0001A480                            
0001A480                            Obj76_Main:				; XREF: Obj76_Index
0001A480 7800                       		moveq	#0,d4
0001A482 3A3C 2C10                  		move.w	#$2C10,d5
0001A486 7C09                       		moveq	#9,d6
0001A488 43D0                       		lea	(a0),a1
0001A48A 6000                       		bra.s	Obj76_MakeBlock
0001A48C                            ; ===========================================================================
0001A48C                            
0001A48C                            Obj76_Loop:
0001A48C 4EB9 0000 E728             		jsr	SingleObjLoad
0001A492 6600                       		bne.s	Obj76_ExitLoop
0001A494                            
0001A494                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001A494 12BC 0076                  		move.b	#$76,(a1)
0001A498 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001A4A0 337C 4000 0002             		move.w	#$4000,2(a1)
0001A4A6 137C 0004 0001             		move.b	#4,1(a1)
0001A4AC 137C 0010 0019             		move.b	#$10,$19(a1)
0001A4B2 137C 0010 0016             		move.b	#$10,$16(a1)
0001A4B8 137C 0003 0018             		move.b	#3,$18(a1)
0001A4BE 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001A4C2 337C 0582 000C             		move.w	#$582,$C(a1)
0001A4C8 3344 0028                  		move.w	d4,$28(a1)
0001A4CC 0644 0101                  		addi.w	#$101,d4
0001A4D0 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001A4D4 5429 0024                  		addq.b	#2,$24(a1)
0001A4D8 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001A4DC                            
0001A4DC                            Obj76_ExitLoop:
0001A4DC 4E75                       		rts	
0001A4DE                            ; ===========================================================================
0001A4DE                            
0001A4DE                            Obj76_Action:				; XREF: Obj76_Index
0001A4DE 1028 0029                  		move.b	$29(a0),d0
0001A4E2 B028 0028                  		cmp.b	$28(a0),d0
0001A4E6 6700                       		beq.s	Obj76_Solid
0001A4E8 4A00                       		tst.b	d0
0001A4EA 6B00                       		bmi.s	loc_19718
0001A4EC                            
0001A4EC                            loc_19712:
0001A4EC 6100 0000                  		bsr.w	Obj76_Break
0001A4F0 6000                       		bra.s	Obj76_Display
0001A4F2                            ; ===========================================================================
0001A4F2                            
0001A4F2                            loc_19718:
0001A4F2 2268 0034                  		movea.l	$34(a0),a1
0001A4F6 4A29 0021                  		tst.b	$21(a1)
0001A4FA 67F0                       		beq.s	loc_19712
0001A4FC 3169 0008 0008             		move.w	8(a1),8(a0)
0001A502 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A508 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001A50E B2C8                       		cmpa.w	a0,a1
0001A510 6500                       		bcs.s	Obj76_Display
0001A512 3029 0012                  		move.w	$12(a1),d0
0001A516 48C0                       		ext.l	d0
0001A518 E080                       		asr.l	#8,d0
0001A51A D168 000C                  		add.w	d0,$C(a0)
0001A51E 6000                       		bra.s	Obj76_Display
0001A520                            ; ===========================================================================
0001A520                            
0001A520                            Obj76_Solid:				; XREF: Obj76_Action
0001A520 323C 001B                  		move.w	#$1B,d1
0001A524 343C 0010                  		move.w	#$10,d2
0001A528 363C 0011                  		move.w	#$11,d3
0001A52C 3828 0008                  		move.w	8(a0),d4
0001A530 4EB9 0001 066C             		jsr	SolidObject
0001A536                            
0001A536                            Obj76_Display:				; XREF: Obj76_Action
0001A536 4EF9 0000 E2A2             		jmp	DisplaySprite
0001A53C                            ; ===========================================================================
0001A53C                            
0001A53C                            loc_19762:				; XREF: Obj76_Index
0001A53C 4A28 0001                  		tst.b	1(a0)
0001A540 6A00                       		bpl.s	Obj76_Delete
0001A542 4EB9 0000 E206             		jsr	ObjectFall
0001A548 4EF9 0000 E2A2             		jmp	DisplaySprite
0001A54E                            ; ===========================================================================
0001A54E                            
0001A54E                            Obj76_Delete:
0001A54E 4EF9 0000 E2DE             		jmp	DeleteObject
0001A554                            
0001A554                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A554                            
0001A554                            
0001A554                            Obj76_Break:				; XREF: Obj76_Action
0001A554 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001A558 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001A55C 7801                       		moveq	#1,d4
0001A55E 7203                       		moveq	#3,d1
0001A560 7438                       		moveq	#$38,d2
0001A562 5428 0024                  		addq.b	#2,$24(a0)
0001A566 117C 0008 0019             		move.b	#8,$19(a0)
0001A56C 117C 0008 0016             		move.b	#8,$16(a0)
0001A572 43D0                       		lea	(a0),a1
0001A574 6000                       		bra.s	Obj76_MakeFrag
0001A576                            ; ===========================================================================
0001A576                            
0001A576                            Obj76_LoopFrag:
0001A576 4EB9 0000 E73E             		jsr	SingleObjLoad2
0001A57C 6600                       		bne.s	loc_197D4
0001A57E                            
0001A57E                            Obj76_MakeFrag:
0001A57E 45D0                       		lea	(a0),a2
0001A580 47D1                       		lea	(a1),a3
0001A582 7603                       		moveq	#3,d3
0001A584                            
0001A584                            loc_197AA:
0001A584 26DA                       		move.l	(a2)+,(a3)+
0001A586 26DA                       		move.l	(a2)+,(a3)+
0001A588 26DA                       		move.l	(a2)+,(a3)+
0001A58A 26DA                       		move.l	(a2)+,(a3)+
0001A58C 51CB FFF6                  		dbf	d3,loc_197AA
0001A590                            
0001A590 335C 0010                  		move.w	(a4)+,$10(a1)
0001A594 335C 0012                  		move.w	(a4)+,$12(a1)
0001A598 361D                       		move.w	(a5)+,d3
0001A59A D769 0008                  		add.w	d3,8(a1)
0001A59E 361D                       		move.w	(a5)+,d3
0001A5A0 D769 000C                  		add.w	d3,$C(a1)
0001A5A4 1344 001A                  		move.b	d4,$1A(a1)
0001A5A8 5244                       		addq.w	#1,d4
0001A5AA 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001A5AE                            
0001A5AE                            loc_197D4:
0001A5AE 303C 00CB                  		move.w	#$CB,d0
0001A5B2 4EF9 0000 15E6             		jmp	(PlaySound_Special).l ;	play smashing sound
0001A5B8                            ; End of function Obj76_Break
0001A5B8                            
0001A5B8                            ; ===========================================================================
0001A5B8 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001A5BC 0180 FE00                  		dc.w $180, $FE00
0001A5C0 FF00 FF00                  		dc.w $FF00, $FF00
0001A5C4 0100 FF00                  		dc.w $100, $FF00
0001A5C8 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001A5CC 0010 0000                  		dc.w $10, 0
0001A5D0 0000 0010                  		dc.w 0,	$10
0001A5D4 0010 0010                  		dc.w $10, $10
0001A5D8                            ; ---------------------------------------------------------------------------
0001A5D8                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001A5D8                            ; ---------------------------------------------------------------------------
0001A5D8                            Map_obj76:
0001A5D8                            	include "_maps\obj76.asm"
0001A5D8                            ; ---------------------------------------------------------------------------
0001A5D8                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001A5D8                            ; ---------------------------------------------------------------------------
0001A5D8 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001A5DC 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001A5E0 0000                       		dc.w byte_19826-Map_obj76
0001A5E2 02                         byte_19808:	dc.b 2
0001A5E3 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001A5E8 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001A5ED 00                         		dc.b 0
0001A5EE 01                         byte_19814:	dc.b 1
0001A5EF F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001A5F4 01                         byte_1981A:	dc.b 1
0001A5F5 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001A5FA 01                         byte_19820:	dc.b 1
0001A5FB F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001A600 01                         byte_19826:	dc.b 1
0001A601 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001A606                            		even
0001A606                            		even
0001A606                            
0001A606                            ; ===========================================================================
0001A606                            
0001A606                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001A606 4EF9 0000 E2DE             		jmp	DeleteObject
0001A60C                            ; ===========================================================================
0001A60C                            ; ---------------------------------------------------------------------------
0001A60C                            ; Object 82 - Eggman (SBZ2)
0001A60C                            ; ---------------------------------------------------------------------------
0001A60C                            
0001A60C                            Obj82:					; XREF: Obj_Index
0001A60C 7000                       		moveq	#0,d0
0001A60E 1028 0024                  		move.b	$24(a0),d0
0001A612 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001A616 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001A61A                            ; ===========================================================================
0001A61A 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001A61C 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001A61E 0000                       		dc.w Obj82_Switch-Obj82_Index
0001A620                            
0001A620 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001A623 0400 03                    		dc.b 4,	0, 3
0001A626                            ; ===========================================================================
0001A626                            
0001A626                            Obj82_Main:				; XREF: Obj82_Index
0001A626 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001A62A 317C 2160 0008             		move.w	#$2160,8(a0)
0001A630 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001A636 117C 000F 0020             		move.b	#$F,$20(a0)
0001A63C 117C 0010 0021             		move.b	#$10,$21(a0)
0001A642 08A8 0000 0022             		bclr	#0,$22(a0)
0001A648 4228 0025                  		clr.b	$25(a0)
0001A64C 115A 0024                  		move.b	(a2)+,$24(a0)
0001A650 115A 001C                  		move.b	(a2)+,$1C(a0)
0001A654 115A 0018                  		move.b	(a2)+,$18(a0)
0001A658 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001A660 317C 0400 0002             		move.w	#$400,2(a0)
0001A666 117C 0004 0001             		move.b	#4,1(a0)
0001A66C 08E8 0007 0001             		bset	#7,1(a0)
0001A672 117C 0020 0019             		move.b	#$20,$19(a0)
0001A678 4EB9 0000 E73E             		jsr	SingleObjLoad2
0001A67E 6600                       		bne.s	Obj82_Eggman
0001A680 2348 0034                  		move.l	a0,$34(a1)
0001A684 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001A688 337C 2130 0008             		move.w	#$2130,8(a1)
0001A68E 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001A694 4228 0025                  		clr.b	$25(a0)
0001A698 135A 0024                  		move.b	(a2)+,$24(a1)
0001A69C 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A6A0 135A 0018                  		move.b	(a2)+,$18(a1)
0001A6A4 237C 0000 CA2E 0004        		move.l	#Map_obj32,4(a1)
0001A6AC 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001A6B2 137C 0004 0001             		move.b	#4,1(a1)
0001A6B8 08E9 0007 0001             		bset	#7,1(a1)
0001A6BE 137C 0010 0019             		move.b	#$10,$19(a1)
0001A6C4 137C 0000 001A             		move.b	#0,$1A(a1)
0001A6CA                            
0001A6CA                            Obj82_Eggman:				; XREF: Obj82_Index
0001A6CA 7000                       		moveq	#0,d0
0001A6CC 1028 0025                  		move.b	$25(a0),d0
0001A6D0 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001A6D4 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001A6D8 43FA 0000                  		lea	Ani_obj82(pc),a1
0001A6DC 4EB9 0000 B2FA             		jsr	AnimateSprite
0001A6E2 4EF9 0000 E2A2             		jmp	DisplaySprite
0001A6E8                            ; ===========================================================================
0001A6E8 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001A6EA 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001A6EC 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001A6EE 0000                       		dc.w loc_19934-Obj82_EggIndex
0001A6F0                            ; ===========================================================================
0001A6F0                            
0001A6F0                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001A6F0 3028 0008                  		move.w	8(a0),d0
0001A6F4 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A6F8 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001A6FC 6400                       		bcc.s	loc_19934	; if not, branch
0001A6FE 5428 0025                  		addq.b	#2,$25(a0)
0001A702 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001A708 117C 0001 001C             		move.b	#1,$1C(a0)
0001A70E                            
0001A70E                            loc_19934:				; XREF: Obj82_EggIndex
0001A70E 4EF9 0000 E268             		jmp	SpeedToPos
0001A714                            ; ===========================================================================
0001A714                            
0001A714                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001A714 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001A718 6600                       		bne.s	loc_19954	; if time remains, branch
0001A71A 5428 0025                  		addq.b	#2,$25(a0)
0001A71E 117C 0002 001C             		move.b	#2,$1C(a0)
0001A724 5868 000C                  		addq.w	#4,$C(a0)
0001A728 317C 000F 003C             		move.w	#15,$3C(a0)
0001A72E                            
0001A72E                            loc_19954:
0001A72E 60DE                       		bra.s	loc_19934
0001A730                            ; ===========================================================================
0001A730                            
0001A730                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001A730 5368 003C                  		subq.w	#1,$3C(a0)
0001A734 6E00                       		bgt.s	loc_199D0
0001A736 6600                       		bne.s	loc_1996A
0001A738 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001A73E 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001A744                            
0001A744                            loc_1996A:
0001A744 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001A74A 6E00                       		bgt.s	loc_19976
0001A74C 4268 0010                  		clr.w	$10(a0)
0001A750                            
0001A750                            loc_19976:
0001A750 0668 0024 0012             		addi.w	#$24,$12(a0)
0001A756 4A68 0012                  		tst.w	$12(a0)
0001A75A 6B00                       		bmi.s	Obj82_FindBlocks
0001A75C 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001A762 6500                       		bcs.s	Obj82_FindBlocks
0001A764 317C 5357 0028             		move.w	#$5357,$28(a0)
0001A76A 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001A770 6500                       		bcs.s	Obj82_FindBlocks
0001A772 317C 059B 000C             		move.w	#$59B,$C(a0)
0001A778 4268 0012                  		clr.w	$12(a0)
0001A77C                            
0001A77C                            Obj82_FindBlocks:
0001A77C 3028 0010                  		move.w	$10(a0),d0
0001A780 8068 0012                  		or.w	$12(a0),d0
0001A784 6600                       		bne.s	loc_199D0
0001A786 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001A78A 703E                       		moveq	#$3E,d0
0001A78C 7240                       		moveq	#$40,d1
0001A78E                            
0001A78E                            Obj82_FindLoop:	
0001A78E D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001A790 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001A794 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001A798                            
0001A798 6600                       		bne.s	loc_199D0
0001A79A 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001A7A0 5428 0025                  		addq.b	#2,$25(a0)
0001A7A4 117C 0001 001C             		move.b	#1,$1C(a0)
0001A7AA                            
0001A7AA                            loc_199D0:
0001A7AA 6000 FF62                  		bra.w	loc_19934
0001A7AE                            ; ===========================================================================
0001A7AE                            
0001A7AE                            Obj82_Switch:				; XREF: Obj82_Index
0001A7AE 7000                       		moveq	#0,d0
0001A7B0 1028 0025                  		move.b	$25(a0),d0
0001A7B4 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001A7B8 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001A7BC                            ; ===========================================================================
0001A7BC 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001A7BE 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001A7C0                            ; ===========================================================================
0001A7C0                            
0001A7C0                            loc_199E6:				; XREF: Obj82_SwIndex
0001A7C0 2268 0034                  		movea.l	$34(a0),a1
0001A7C4 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001A7CA 6600                       		bne.s	Obj82_SwDisplay
0001A7CC 117C 0001 001A             		move.b	#1,$1A(a0)
0001A7D2 5428 0025                  		addq.b	#2,$25(a0)
0001A7D6                            
0001A7D6                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001A7D6 4EF9 0000 E2A2             		jmp	DisplaySprite
0001A7DC                            ; ===========================================================================
0001A7DC                            Ani_obj82:
0001A7DC                            	include "_anim\obj82.asm"
0001A7DC                            ; ---------------------------------------------------------------------------
0001A7DC                            ; Animation script - Eggman (SBZ2)
0001A7DC                            ; ---------------------------------------------------------------------------
0001A7DC 0000                       		dc.w byte_19A10-Ani_obj82
0001A7DE 0000                       		dc.w byte_19A14-Ani_obj82
0001A7E0 0000                       		dc.w byte_19A18-Ani_obj82
0001A7E2 0000                       		dc.w byte_19A20-Ani_obj82
0001A7E4 0000                       		dc.w byte_19A24-Ani_obj82
0001A7E6 0000                       		dc.w byte_19A2A-Ani_obj82
0001A7E8 0000                       		dc.w byte_19A30-Ani_obj82
0001A7EA 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001A7EE 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001A7F2 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001A7FA 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001A7FE 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001A804 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001A80A 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001A80E                            		even
0001A80E                            		even
0001A80E                            
0001A80E                            ; ---------------------------------------------------------------------------
0001A80E                            ; Sprite mappings - Eggman (SBZ2)
0001A80E                            ; ---------------------------------------------------------------------------
0001A80E                            Map_obj82:
0001A80E                            	include "_maps\obj82.asm"
0001A80E                            ; ================================================================================
0001A80E                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
0001A80E                            ; ================================================================================
0001A80E                            
0001A80E                            DATAA16Z12RYSAF:
0001A80E 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001A812 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001A816 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001A81A 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001A81E 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001A822 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001A824 03                         DATAA16Z12RYSAF_0: dc.b $3
0001A825 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A82A E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A82F 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A834 04                         DATAA16Z12RYSAF_1: dc.b $4
0001A835 E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001A83A E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A83F 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A844 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A849 04                         DATAA16Z12RYSAF_2: dc.b $4
0001A84A E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001A84F E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001A854 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001A859 FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001A85E 03                         DATAA16Z12RYSAF_3: dc.b $3
0001A85F E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001A864 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001A869 F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001A86E 04                         DATAA16Z12RYSAF_4: dc.b $4
0001A86F E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001A874 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001A879 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001A87E E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001A883 04                         DATAA16Z12RYSAF_5: dc.b $4
0001A884 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A889 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A88E E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A893 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A898 07                         DATAA16Z12RYSAF_6: dc.b $7
0001A899 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A89E E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A8A3 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001A8A8 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001A8AD F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001A8B2 F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001A8B7 F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001A8BC 04                         DATAA16Z12RYSAF_7: dc.b $4
0001A8BD 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001A8C2 E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001A8C7 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001A8CC F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001A8D1 05                         DATAA16Z12RYSAF_8: dc.b $5
0001A8D2 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001A8D7 E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001A8DC 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001A8E1 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001A8E6 EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001A8EB 08                         DATAA16Z12RYSAF_9: dc.b $8
0001A8EC E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A8F1 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A8F6 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A8FB 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A900 E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001A905 F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001A90A 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001A90F 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001A914 03                         DATAA16Z12RYSAF_A: dc.b $3
0001A915 EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001A91A F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001A91F EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001A924                            	even
0001A924                            	even
0001A924                            
0001A924                            ; ===========================================================================
0001A924                            ; ---------------------------------------------------------------------------
0001A924                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A924                            ; ---------------------------------------------------------------------------
0001A924                            
0001A924                            Obj83:					; XREF: Obj_Index
0001A924 7000                       		moveq	#0,d0
0001A926 1028 0024                  		move.b	$24(a0),d0
0001A92A 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001A92E 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001A932                            ; ===========================================================================
0001A932 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001A934 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001A936 0000                       		dc.w loc_19C36-Obj83_Index
0001A938 0000                       		dc.w loc_19C62-Obj83_Index
0001A93A 0000                       		dc.w loc_19C72-Obj83_Index
0001A93C 0000                       		dc.w loc_19C80-Obj83_Index
0001A93E                            ; ===========================================================================
0001A93E                            
0001A93E                            Obj83_Main:				; XREF: Obj83_Index
0001A93E 317C 2080 0008             		move.w	#$2080,8(a0)
0001A944 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001A94A 117C 0080 0019             		move.b	#$80,$19(a0)
0001A950 117C 0010 0016             		move.b	#$10,$16(a0)
0001A956 117C 0004 0001             		move.b	#4,1(a0)
0001A95C 08E8 0007 0001             		bset	#7,1(a0)
0001A962 7800                       		moveq	#0,d4
0001A964 3A3C 2010                  		move.w	#$2010,d5
0001A968 7C07                       		moveq	#7,d6
0001A96A 45E8 0030                  		lea	$30(a0),a2
0001A96E                            
0001A96E                            Obj83_MakeBlock:
0001A96E 4EB9 0000 E728             		jsr	SingleObjLoad
0001A974 6600                       		bne.s	Obj83_ExitMake
0001A976 34C9                       		move.w	a1,(a2)+
0001A978 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A97C 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A984 337C 4518 0002             		move.w	#$4518,2(a1)
0001A98A 137C 0004 0001             		move.b	#4,1(a1)
0001A990 137C 0010 0019             		move.b	#$10,$19(a1)
0001A996 137C 0010 0016             		move.b	#$10,$16(a1)
0001A99C 137C 0003 0018             		move.b	#3,$18(a1)
0001A9A2 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A9A6 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A9AC 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A9B0 137C 0008 0024             		move.b	#8,$24(a1)
0001A9B6 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A9BA                            
0001A9BA                            Obj83_ExitMake:
0001A9BA 5428 0024                  		addq.b	#2,$24(a0)
0001A9BE 4E75                       		rts	
0001A9C0                            ; ===========================================================================
0001A9C0                            
0001A9C0                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A9C0 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A9C6 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A9C8 4228 001A                  		clr.b	$1A(a0)
0001A9CC 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A9D0                            
0001A9D0                            Obj83_Solid:
0001A9D0 7000                       		moveq	#0,d0
0001A9D2 1028 001A                  		move.b	$1A(a0),d0
0001A9D6 4400                       		neg.b	d0
0001A9D8 4880                       		ext.w	d0
0001A9DA 5040                       		addq.w	#8,d0
0001A9DC E940                       		asl.w	#4,d0
0001A9DE 383C 2100                  		move.w	#$2100,d4
0001A9E2 9840                       		sub.w	d0,d4
0001A9E4 1140 0019                  		move.b	d0,$19(a0)
0001A9E8 3144 0008                  		move.w	d4,8(a0)
0001A9EC 720B                       		moveq	#$B,d1
0001A9EE D240                       		add.w	d0,d1
0001A9F0 7410                       		moveq	#$10,d2
0001A9F2 7611                       		moveq	#$11,d3
0001A9F4 4EF9 0001 066C             		jmp	SolidObject
0001A9FA                            ; ===========================================================================
0001A9FA                            
0001A9FA                            loc_19C36:				; XREF: Obj83_Index
0001A9FA 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001AA00 6400                       		bcc.s	Obj83_Solid2
0001AA02 70FF                       		moveq	#-1,d0
0001AA04 1028 001A                  		move.b	$1A(a0),d0
0001AA08 4880                       		ext.w	d0
0001AA0A D040                       		add.w	d0,d0
0001AA0C 3030 0030                  		move.w	$30(a0,d0.w),d0
0001AA10 2240                       		movea.l	d0,a1
0001AA12 337C 474F 0028             		move.w	#$474F,$28(a1)
0001AA18 5228 001A                  		addq.b	#1,$1A(a0)
0001AA1C 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001AA22 6700                       		beq.s	loc_19C62
0001AA24                            
0001AA24                            Obj83_Solid2:
0001AA24 60AA                       		bra.s	Obj83_Solid
0001AA26                            ; ===========================================================================
0001AA26                            
0001AA26                            loc_19C62:				; XREF: Obj83_Index
0001AA26 08A8 0003 0022             		bclr	#3,$22(a0)
0001AA2C 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001AA32 6000 FBD2                  		bra.w	loc_1982C
0001AA36                            ; ===========================================================================
0001AA36                            
0001AA36                            loc_19C72:				; XREF: Obj83_Index
0001AA36 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001AA3C 6700                       		beq.s	Obj83_Break	; if yes, branch
0001AA3E 4EF9 0000 E2A2             		jmp	DisplaySprite
0001AA44                            ; ===========================================================================
0001AA44                            
0001AA44                            loc_19C80:				; XREF: Obj83_Index
0001AA44 4A28 0001                  		tst.b	1(a0)
0001AA48 6A00 FBBC                  		bpl.w	loc_1982C
0001AA4C 4EB9 0000 E206             		jsr	ObjectFall
0001AA52 4EF9 0000 E2A2             		jmp	DisplaySprite
0001AA58                            ; ===========================================================================
0001AA58                            
0001AA58                            Obj83_Break:				; XREF: loc_19C72
0001AA58 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001AA5C 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001AA60 7801                       		moveq	#1,d4
0001AA62 7203                       		moveq	#3,d1
0001AA64 7438                       		moveq	#$38,d2
0001AA66 5428 0024                  		addq.b	#2,$24(a0)
0001AA6A 117C 0008 0019             		move.b	#8,$19(a0)
0001AA70 117C 0008 0016             		move.b	#8,$16(a0)
0001AA76 43D0                       		lea	(a0),a1
0001AA78 6000                       		bra.s	Obj83_MakeFrag
0001AA7A                            ; ===========================================================================
0001AA7A                            
0001AA7A                            Obj83_LoopFrag:
0001AA7A 4EB9 0000 E73E             		jsr	SingleObjLoad2
0001AA80 6600                       		bne.s	Obj83_BreakSnd
0001AA82                            
0001AA82                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001AA82 45D0                       		lea	(a0),a2
0001AA84 47D1                       		lea	(a1),a3
0001AA86 7603                       		moveq	#3,d3
0001AA88                            
0001AA88                            loc_19CC4:
0001AA88 26DA                       		move.l	(a2)+,(a3)+
0001AA8A 26DA                       		move.l	(a2)+,(a3)+
0001AA8C 26DA                       		move.l	(a2)+,(a3)+
0001AA8E 26DA                       		move.l	(a2)+,(a3)+
0001AA90 51CB FFF6                  		dbf	d3,loc_19CC4
0001AA94                            
0001AA94 335C 0012                  		move.w	(a4)+,$12(a1)
0001AA98 361D                       		move.w	(a5)+,d3
0001AA9A D769 0008                  		add.w	d3,8(a1)
0001AA9E 361D                       		move.w	(a5)+,d3
0001AAA0 D769 000C                  		add.w	d3,$C(a1)
0001AAA4 1344 001A                  		move.b	d4,$1A(a1)
0001AAA8 5244                       		addq.w	#1,d4
0001AAAA 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001AAAE                            
0001AAAE                            Obj83_BreakSnd:
0001AAAE 303C 00CB                  		move.w	#$CB,d0
0001AAB2 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play smashing sound
0001AAB8 4EF9 0000 E2A2             		jmp	DisplaySprite
0001AABE                            ; ===========================================================================
0001AABE 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001AAC2 0120 00C0                  		dc.w $120, $C0
0001AAC6 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001AACA 0010 0000                  		dc.w $10, 0
0001AACE 0000 0010                  		dc.w 0,	$10
0001AAD2 0010 0010                  		dc.w $10, $10
0001AAD6                            ; ---------------------------------------------------------------------------
0001AAD6                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001AAD6                            ; ---------------------------------------------------------------------------
0001AAD6                            Map_obj83:
0001AAD6                            	include "_maps\obj83.asm"
0001AAD6                            ; ---------------------------------------------------------------------------
0001AAD6                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001AAD6                            ; ---------------------------------------------------------------------------
0001AAD6 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001AADA 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001AADE 0000                       		dc.w byte_19D46-Map_obj83
0001AAE0 01                         byte_19D1C:	dc.b 1
0001AAE1 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001AAE6 02                         byte_19D22:	dc.b 2
0001AAE7 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001AAEC F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001AAF1 00                         		dc.b 0
0001AAF2 02                         byte_19D2E:	dc.b 2
0001AAF3 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001AAF8 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001AAFD 00                         		dc.b 0
0001AAFE 02                         byte_19D3A:	dc.b 2
0001AAFF F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001AB04 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001AB09 00                         		dc.b 0
0001AB0A 02                         byte_19D46:	dc.b 2
0001AB0B F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001AB10 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001AB16 00                         		even
0001AB16 00                         		even
0001AB16                            
0001AB16                            ; ===========================================================================
0001AB16                            ; ---------------------------------------------------------------------------
0001AB16                            ; Object 85 - Eggman (FZ)
0001AB16                            ; ---------------------------------------------------------------------------
0001AB16                            
0001AB16                            Obj85_Delete:
0001AB16 4EF9 0000 E2DE             		jmp	DeleteObject
0001AB1C                            ; ===========================================================================
0001AB1C                            
0001AB1C                            Obj85:					; XREF: Obj_Index
0001AB1C 7000                       		moveq	#0,d0
0001AB1E 1028 0024                  		move.b	$24(a0),d0
0001AB22 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001AB26 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001AB2A                            ; ===========================================================================
0001AB2A 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001AB2C 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001AB2E 0000                       		dc.w loc_1A38E-Obj85_Index
0001AB30 0000                       		dc.w loc_1A346-Obj85_Index
0001AB32 0000                       		dc.w loc_1A2C6-Obj85_Index
0001AB34 0000                       		dc.w loc_1A3AC-Obj85_Index
0001AB36 0000                       		dc.w loc_1A264-Obj85_Index
0001AB38                            
0001AB38 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001AB3E 0001 A80E                  		dc.l Map_obj82		; mappings pointer
0001AB42 25B0 0590 0300             		dc.w $25B0, $590, $300
0001AB48 0000 0000                  		dc.l Map_obj84
0001AB4C 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001AB52 0000 0000                  		dc.l Map_FZBoss
0001AB56 26E0 0596 0470             		dc.w $26E0, $596, $470
0001AB5C 0001 A80E                  		dc.l Map_obj82
0001AB60 26E0 0596 0400             		dc.w $26E0, $596, $400
0001AB66 0001 8B50                  		dc.l Map_Eggman
0001AB6A 26E0 0596 0400             		dc.w $26E0, $596, $400
0001AB70 0001 8B50                  		dc.l Map_Eggman
0001AB74                            
0001AB74 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001AB79 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001AB7E 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001AB83 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001AB88 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001AB8D 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001AB92                            ; ===========================================================================
0001AB92                            
0001AB92                            Obj85_Main:				; XREF: Obj85_Index
0001AB92 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001AB96 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001AB9A 2248                       		movea.l	a0,a1
0001AB9C 7205                       		moveq	#5,d1
0001AB9E 6000                       		bra.s	Obj85_LoadBoss
0001ABA0                            ; ===========================================================================
0001ABA0                            
0001ABA0                            Obj85_Loop:
0001ABA0 4EB9 0000 E73E             		jsr	SingleObjLoad2
0001ABA6 6600                       		bne.s	loc_19E20
0001ABA8                            
0001ABA8                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001ABA8 12BC 0085                  		move.b	#$85,(a1)
0001ABAC 335A 0008                  		move.w	(a2)+,8(a1)
0001ABB0 335A 000C                  		move.w	(a2)+,$C(a1)
0001ABB4 335A 0002                  		move.w	(a2)+,2(a1)
0001ABB8 235A 0004                  		move.l	(a2)+,4(a1)
0001ABBC 135B 0024                  		move.b	(a3)+,$24(a1)
0001ABC0 135B 001C                  		move.b	(a3)+,$1C(a1)
0001ABC4 135B 0018                  		move.b	(a3)+,$18(a1)
0001ABC8 135B 0017                  		move.b	(a3)+,$17(a1)
0001ABCC 135B 0016                  		move.b	(a3)+,$16(a1)
0001ABD0 137C 0004 0001             		move.b	#4,1(a1)
0001ABD6 08E8 0007 0001             		bset	#7,1(a0)
0001ABDC 2348 0034                  		move.l	a0,$34(a1)
0001ABE0 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001ABE4                            
0001ABE4                            loc_19E20:
0001ABE4 45E8 0036                  		lea	$36(a0),a2
0001ABE8 4EB9 0000 E728             		jsr	SingleObjLoad
0001ABEE 6600                       		bne.s	loc_19E5A
0001ABF0 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001ABF4 3489                       		move.w	a1,(a2)
0001ABF6 2348 0034                  		move.l	a0,$34(a1)
0001ABFA 45E8 0038                  		lea	$38(a0),a2
0001ABFE 7400                       		moveq	#0,d2
0001AC00 7203                       		moveq	#3,d1
0001AC02                            
0001AC02                            loc_19E3E:
0001AC02 4EB9 0000 E73E             		jsr	SingleObjLoad2
0001AC08 6600                       		bne.s	loc_19E5A
0001AC0A 34C9                       		move.w	a1,(a2)+
0001AC0C 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001AC10 2348 0034                  		move.l	a0,$34(a1)
0001AC14 1342 0028                  		move.b	d2,$28(a1)
0001AC18 5442                       		addq.w	#2,d2
0001AC1A 51C9 FFE6                  		dbf	d1,loc_19E3E
0001AC1E                            
0001AC1E                            loc_19E5A:
0001AC1E 317C 0000 0034             		move.w	#0,$34(a0)
0001AC24 4EB8 2D5A                  		jsr	RandomNumber	; get a number between 0 and 250
0001AC28 4240                       		clr.w	d0
0001AC2A 4840                       		swap	d0
0001AC2C 80FC 00FB                  		divu.w	#251,d0
0001AC30 4840                       		swap	d0
0001AC32 0640 0118                  		add.w	#280,d0		; add 280
0001AC36 33C0 00FF 7FFE             		move.w	d0,($FF7FFE).l	; that's the number of hits
0001AC3C 317C FFFF 0030             		move.w	#-1,$30(a0)
0001AC42                            
0001AC42                            Obj85_Eggman:				; XREF: Obj85_Index
0001AC42 7000                       		moveq	#0,d0
0001AC44 1028 0034                  		move.b	$34(a0),d0
0001AC48 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001AC4C 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001AC50 4EF9 0000 E2A2             		jmp	DisplaySprite
0001AC56                            ; ===========================================================================
0001AC56 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001AC5A 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001AC5E 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001AC62 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001AC66                            ; ===========================================================================
0001AC66                            
0001AC66                            loc_19E90:				; XREF: off_19E80
0001AC66 4AB8 F680                  		tst.l	($FFFFF680).w
0001AC6A 6600                       		bne.s	loc_19EA2
0001AC6C 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001AC72 6500                       		blo.s	loc_19EA2
0001AC74 5428 0034                  		addq.b	#2,$34(a0)
0001AC78 103C 0081                  		move.b	#$81,d0
0001AC7C 4EB8 15E6                  		jsr	PlaySound_Special
0001AC80                            loc_19EA2:
0001AC80 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001AC84 4E75                       		rts	
0001AC86                            ; ===========================================================================
0001AC86                            
0001AC86                            loc_19EA8:				; XREF: off_19E80
0001AC86 4A68 0030                  		tst.w	$30(a0)
0001AC8A 6A00                       		bpl.s	loc_19F10
0001AC8C 4268 0030                  		clr.w	$30(a0)
0001AC90 4EB9 0000 2D5A             		jsr	(RandomNumber).l
0001AC96 0240 000C                  		andi.w	#$C,d0
0001AC9A 3200                       		move.w	d0,d1
0001AC9C 5441                       		addq.w	#2,d1
0001AC9E 4A80                       		tst.l	d0
0001ACA0 6A00                       		bpl.s	loc_19EC6
0001ACA2 C141                       		exg	d1,d0
0001ACA4                            
0001ACA4                            loc_19EC6:
0001ACA4 43FA 0000                  		lea	word_19FD6(pc),a1
0001ACA8 3031 0000                  		move.w	(a1,d0.w),d0
0001ACAC 3231 1000                  		move.w	(a1,d1.w),d1
0001ACB0 3140 0030                  		move.w	d0,$30(a0)
0001ACB4 74FF                       		moveq	#-1,d2
0001ACB6 3430 0038                  		move.w	$38(a0,d0.w),d2
0001ACBA 2242                       		movea.l	d2,a1
0001ACBC 137C 00FF 0029             		move.b	#-1,$29(a1)
0001ACC2 337C FFFF 0030             		move.w	#-1,$30(a1)
0001ACC8 3430 1038                  		move.w	$38(a0,d1.w),d2
0001ACCC 2242                       		movea.l	d2,a1
0001ACCE 137C 0001 0029             		move.b	#1,$29(a1)
0001ACD4 337C 0000 0030             		move.w	#0,$30(a1)
0001ACDA 317C 0001 0032             		move.w	#1,$32(a0)
0001ACE0 4228 0035                  		clr.b	$35(a0)
0001ACE4 303C 00B7                  		move.w	#$B7,d0
0001ACE8 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001ACEE                            
0001ACEE                            loc_19F10:
0001ACEE 4A68 0032                  		tst.w	$32(a0)
0001ACF2 6B00 0000                  		bmi.w	loc_19FA6
0001ACF6 08A8 0000 0022             		bclr	#0,$22(a0)
0001ACFC 3038 D008                  		move.w	($FFFFD008).w,d0
0001AD00 9068 0008                  		sub.w	8(a0),d0
0001AD04 6500                       		bcs.s	loc_19F2E
0001AD06 08E8 0000 0022             		bset	#0,$22(a0)
0001AD0C                            
0001AD0C                            loc_19F2E:
0001AD0C 323C 002B                  		move.w	#$2B,d1
0001AD10 343C 0014                  		move.w	#$14,d2
0001AD14 363C 0014                  		move.w	#$14,d3
0001AD18 3828 0008                  		move.w	8(a0),d4
0001AD1C 4EB9 0001 066C             		jsr	SolidObject
0001AD22 4A44                       		tst.w	d4
0001AD24 6E00                       		bgt.s	loc_19F50
0001AD26                            
0001AD26                            loc_19F48:
0001AD26 4A28 0035                  		tst.b	$35(a0)
0001AD2A 6600                       		bne.s	loc_19F88
0001AD2C 6000                       		bra.s	loc_19F96
0001AD2E                            ; ===========================================================================
0001AD2E                            
0001AD2E                            loc_19F50:
0001AD2E 5E78 F636                  		addq.w	#7,($FFFFF636).w	; add 7 to... the rng seed?
0001AD32                            ;		cmpi.b	#2,($FFFFD01C).w	; check if player is in ball form (nah)
0001AD32                            ;		bne.s	loc_19F48
0001AD32                            ;		move.w	#$300,d0		; knock player back (nah)
0001AD32                            ;		btst	#0,$22(a0)
0001AD32                            ;		bne.s	loc_19F6A
0001AD32                            ;		neg.w	d0
0001AD32                            ;
0001AD32                            ;loc_19F6A:
0001AD32                            ;		move.w	d0,($FFFFD010).w
0001AD32 4A28 0035                  		tst.b	$35(a0)
0001AD36 6600                       		bne.s	loc_19F88
0001AD38 5379 00FF 7FFE             		subq.w	#1,($FF7FFE).l		; no overflowing! dumbass glitch finish the boss again looking ass
0001AD3E 6400                       		bcc.s	@notoverflown
0001AD40 4279 00FF 7FFE             		clr.w	($FF7FFE).l
0001AD46                            @notoverflown:
0001AD46 117C 0001 0035             		move.b	#1,$35(a0)		; eye-frame timer
0001AD4C 303C 00AC                  		move.w	#$AC,d0
0001AD50 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001AD56                            
0001AD56                            loc_19F88:
0001AD56 5328 0035                  		subq.b	#1,$35(a0)
0001AD5A 6700                       		beq.s	loc_19F96
0001AD5C 117C 0003 001C             		move.b	#3,$1C(a0)
0001AD62 6000                       		bra.s	loc_19F9C
0001AD64                            ; ===========================================================================
0001AD64                            
0001AD64                            loc_19F96:
0001AD64 117C 0001 001C             		move.b	#1,$1C(a0)
0001AD6A                            
0001AD6A                            loc_19F9C:
0001AD6A 43FA FA70                  		lea	Ani_obj82(pc),a1
0001AD6E 4EF9 0000 B2FA             		jmp	AnimateSprite
0001AD74                            ; ===========================================================================
0001AD74                            
0001AD74                            loc_19FA6:
0001AD74 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001AD7A 6700                       		beq.s	loc_19FBC
0001AD7C 5428 0034                  		addq.b	#2,$34(a0)
0001AD80 317C FFFF 0030             		move.w	#-1,$30(a0)
0001AD86 4268 0032                  		clr.w	$32(a0)
0001AD8A 4E75                       		rts	
0001AD8C                            ; ===========================================================================
0001AD8C                            
0001AD8C                            loc_19FBC:
0001AD8C 117C 0006 0034             		move.b	#6,$34(a0)
0001AD92 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001AD98 317C 053C 000C             		move.w	#$53C,$C(a0)
0001AD9E 117C 0014 0016             		move.b	#$14,$16(a0)
0001ADA4 4E75                       		rts	
0001ADA6                            ; ===========================================================================
0001ADA6 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001ADB6                            ; ===========================================================================
0001ADB6                            
0001ADB6                            loc_19FE6:				; XREF: off_19E80
0001ADB6 70FF                       		moveq	#-1,d0
0001ADB8 3028 0036                  		move.w	$36(a0),d0
0001ADBC 2240                       		movea.l	d0,a1
0001ADBE 4A68 0030                  		tst.w	$30(a0)
0001ADC2 6A00                       		bpl.s	loc_1A000
0001ADC4 4268 0030                  		clr.w	$30(a0)
0001ADC8 137C 00FF 0029             		move.b	#-1,$29(a1)
0001ADCE 6100                       		bsr.s	loc_1A020
0001ADD0                            
0001ADD0                            loc_1A000:
0001ADD0 700F                       		moveq	#$F,d0
0001ADD2 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001ADD6 6600                       		bne.s	loc_1A00A
0001ADD8 6100                       		bsr.s	loc_1A020
0001ADDA                            
0001ADDA                            loc_1A00A:
0001ADDA 4A68 0032                  		tst.w	$32(a0)
0001ADDE 6700                       		beq.s	locret_1A01E
0001ADE0 5528 0034                  		subq.b	#2,$34(a0)
0001ADE4 317C FFFF 0030             		move.w	#-1,$30(a0)
0001ADEA 4268 0032                  		clr.w	$32(a0)
0001ADEE                            
0001ADEE                            locret_1A01E:
0001ADEE 4E75                       		rts	
0001ADF0                            ; ===========================================================================
0001ADF0                            
0001ADF0                            loc_1A020:
0001ADF0 303C 00B1                  		move.w	#$B1,d0
0001ADF4 4EF9 0000 15E6             		jmp	(PlaySound_Special).l ;	play electricity sound
0001ADFA                            ; ===========================================================================
0001ADFA                            
0001ADFA                            loc_1A02A:				; XREF: off_19E80
0001ADFA 117C 0030 0017             		move.b	#$30,$17(a0)
0001AE00 08E8 0000 0022             		bset	#0,$22(a0)
0001AE06 7210                       		moveq	#$10,d1
0001AE08 4EB9 0000 E208             		jsr	ObjectFallCustom
0001AE0E 117C 0006 001A             		move.b	#6,$1A(a0)
0001AE14 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001AE1A 6500                       		bcs.s	loc_1A070
0001AE1C 317C 059C 000C             		move.w	#$59C,$C(a0)
0001AE22 5428 0034                  		addq.b	#2,$34(a0)
0001AE26 117C 0020 0017             		move.b	#$20,$17(a0)
0001AE2C 317C 0100 0010             		move.w	#$100,$10(a0)
0001AE32 317C FF00 0012             		move.w	#-$100,$12(a0)
0001AE38 5438 F742                  		addq.b	#2,($FFFFF742).w
0001AE3C                            
0001AE3C                            loc_1A070:
0001AE3C 6000 0000                  		bra.w	loc_1A166
0001AE40                            ; ===========================================================================
0001AE40                            
0001AE40                            loc_1A074:				; XREF: off_19E80
0001AE40 08E8 0000 0022             		bset	#0,$22(a0)
0001AE46 117C 0004 001C             		move.b	#4,$1C(a0)
0001AE4C 7210                       		moveq	#$10,d1
0001AE4E 4EB9 0000 E208             		jsr	ObjectFallCustom
0001AE54 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001AE5A 6500                       		bcs.s	loc_1A09A
0001AE5C 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001AE62                            
0001AE62                            loc_1A09A:
0001AE62 317C 0400 0010             		move.w	#$400,$10(a0)
0001AE68 3028 0008                  		move.w	8(a0),d0
0001AE6C 9078 D008                  		sub.w	($FFFFD008).w,d0
0001AE70 6A00                       		bpl.s	loc_1A0B4
0001AE72 317C 0500 0010             		move.w	#$500,$10(a0)
0001AE78 6000 0000                  		bra.w	loc_1A0F2
0001AE7C                            ; ===========================================================================
0001AE7C                            
0001AE7C                            loc_1A0B4:
0001AE7C 0440 0070                  		subi.w	#$70,d0
0001AE80 6500                       		bcs.s	loc_1A0F2
0001AE82 0468 0100 0010             		subi.w	#$100,$10(a0)
0001AE88 5140                       		subq.w	#8,d0
0001AE8A 6500                       		bcs.s	loc_1A0F2
0001AE8C 0468 0100 0010             		subi.w	#$100,$10(a0)
0001AE92 5140                       		subq.w	#8,d0
0001AE94 6500                       		bcs.s	loc_1A0F2
0001AE96 0468 0080 0010             		subi.w	#$80,$10(a0)
0001AE9C 5140                       		subq.w	#8,d0
0001AE9E 6500                       		bcs.s	loc_1A0F2
0001AEA0 0468 0080 0010             		subi.w	#$80,$10(a0)
0001AEA6 5140                       		subq.w	#8,d0
0001AEA8 6500                       		bcs.s	loc_1A0F2
0001AEAA 0468 0080 0010             		subi.w	#$80,$10(a0)
0001AEB0 0440 0038                  		subi.w	#$38,d0
0001AEB4 6500                       		bcs.s	loc_1A0F2
0001AEB6 4268 0010                  		clr.w	$10(a0)
0001AEBA                            
0001AEBA                            loc_1A0F2:
0001AEBA 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001AEC0 6500                       		bcs.s	loc_1A110
0001AEC2 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001AEC8 317C 0240 0010             		move.w	#$240,$10(a0)
0001AECE 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001AED4 5428 0034                  		addq.b	#2,$34(a0)
0001AED8                            
0001AED8                            loc_1A110:
0001AED8 6000                       		bra.s	loc_1A15C
0001AEDA                            ; ===========================================================================
0001AEDA                            
0001AEDA                            loc_1A112:				; XREF: off_19E80
0001AEDA 4EB9 0000 E268             		jsr	SpeedToPos
0001AEE0 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001AEE6 6500                       		bcs.s	loc_1A124
0001AEE8 4268 0010                  		clr.w	$10(a0)
0001AEEC                            
0001AEEC                            loc_1A124:
0001AEEC 0668 0034 0012             		addi.w	#$34,$12(a0)
0001AEF2 4A68 0012                  		tst.w	$12(a0)
0001AEF6 6B00                       		bmi.s	loc_1A142
0001AEF8 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001AEFE 6500                       		bcs.s	loc_1A142
0001AF00 317C 0592 000C             		move.w	#$592,$C(a0)
0001AF06 4268 0012                  		clr.w	$12(a0)
0001AF0A                            
0001AF0A                            loc_1A142:
0001AF0A 3028 0010                  		move.w	$10(a0),d0
0001AF0E 8068 0012                  		or.w	$12(a0),d0
0001AF12 6600                       		bne.s	loc_1A15C
0001AF14 5428 0034                  		addq.b	#2,$34(a0)
0001AF18 317C FE80 0012             		move.w	#-$180,$12(a0)
0001AF1E 117C 0001 0021             		move.b	#1,$21(a0)
0001AF24                            
0001AF24                            loc_1A15C:
0001AF24 43FA F8B6                  		lea	Ani_obj82(pc),a1
0001AF28 4EB9 0000 B2FA             		jsr	AnimateSprite
0001AF2E                            
0001AF2E                            loc_1A166:
0001AF2E 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001AF34 6C00                       		bge.s	loc_1A172
0001AF36 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001AF3A                            
0001AF3A                            loc_1A172:
0001AF3A 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001AF40 6C00                       		bge.s	locret_1A190
0001AF42 323C 001B                  		move.w	#$1B,d1
0001AF46 343C 0070                  		move.w	#$70,d2
0001AF4A 363C 0071                  		move.w	#$71,d3
0001AF4E 3828 0008                  		move.w	8(a0),d4
0001AF52 4EF9 0001 066C             		jmp	SolidObject
0001AF58                            ; ===========================================================================
0001AF58                            
0001AF58                            locret_1A190:
0001AF58 4E75                       		rts	
0001AF5A                            ; ===========================================================================
0001AF5A                            
0001AF5A                            loc_1A192:				; XREF: off_19E80
0001AF5A 217C 0001 8B50 0004        		move.l	#Map_Eggman,4(a0)
0001AF62 317C 0400 0002             		move.w	#$400,2(a0)
0001AF68 117C 0000 001C             		move.b	#0,$1C(a0)
0001AF6E 08E8 0000 0022             		bset	#0,$22(a0)
0001AF74 4EB9 0000 E268             		jsr	SpeedToPos
0001AF7A 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001AF80 6400                       		bcc.s	loc_1A1D0
0001AF82 317C 0180 0010             		move.w	#$180,$10(a0)
0001AF88 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001AF8E 117C 000F 0020             		move.b	#$F,$20(a0)
0001AF94 5428 0034                  		addq.b	#2,$34(a0)
0001AF98                            
0001AF98                            loc_1A1D0:
0001AF98 6000 FF8A                  		bra.w	loc_1A15C
0001AF9C                            ; ===========================================================================
0001AF9C                            
0001AF9C                            loc_1A1D4:				; XREF: off_19E80
0001AF9C 08E8 0000 0022             		bset	#0,$22(a0)
0001AFA2 4EB9 0000 E268             		jsr	SpeedToPos
0001AFA8 4A68 0030                  		tst.w	$30(a0)
0001AFAC 6600                       		bne.s	loc_1A1FC
0001AFAE 4A28 0020                  		tst.b	$20(a0)
0001AFB2 6600                       		bne.s	loc_1A216
0001AFB4 317C 001E 0030             		move.w	#$1E,$30(a0)
0001AFBA 303C 00AC                  		move.w	#$AC,d0
0001AFBE 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001AFC4                            
0001AFC4                            loc_1A1FC:
0001AFC4 5368 0030                  		subq.w	#1,$30(a0)
0001AFC8 6600                       		bne.s	loc_1A216
0001AFCA 4A28 0022                  		tst.b	$22(a0)
0001AFCE 6A00                       		bpl.s	loc_1A210
0001AFD0 317C 0060 0012             		move.w	#$60,$12(a0)
0001AFD6 6000                       		bra.s	loc_1A216
0001AFD8                            ; ===========================================================================
0001AFD8                            
0001AFD8                            loc_1A210:
0001AFD8 117C 000F 0020             		move.b	#$F,$20(a0)
0001AFDE                            
0001AFDE                            loc_1A216:
0001AFDE 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001AFE4 6D00                       		blt.s	loc_1A23A
0001AFE6 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001AFEC 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001AFF2 4278 D014                  		clr.w	($FFFFD014).w
0001AFF6 4A68 0012                  		tst.w	$12(a0)
0001AFFA 6A00                       		bpl.s	loc_1A248
0001AFFC 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001B002                            
0001B002                            loc_1A23A:
0001B002 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001B008 6D00                       		blt.s	loc_1A248
0001B00A 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001B010                            
0001B010                            loc_1A248:
0001B010 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001B016 6500                       		bcs.s	loc_1A260
0001B018 4A28 0001                  		tst.b	1(a0)
0001B01C 6B00                       		bmi.s	loc_1A260
0001B01E 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001B024 6000 FAF0                  		bra.w	Obj85_Delete
0001B028                            ; ===========================================================================
0001B028                            
0001B028                            loc_1A260:
0001B028 6000 FEFA                  		bra.w	loc_1A15C
0001B02C                            ; ===========================================================================
0001B02C                            
0001B02C                            loc_1A264:				; XREF: Obj85_Index
0001B02C 2268 0034                  		movea.l	$34(a0),a1
0001B030 1011                       		move.b	(a1),d0
0001B032 B010                       		cmp.b	(a0),d0
0001B034 6600 FAE0                  		bne.w	Obj85_Delete
0001B038 117C 0007 001C             		move.b	#7,$1C(a0)
0001B03E 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001B044 6C00                       		bge.s	loc_1A280
0001B046 6000                       		bra.s	loc_1A2A6
0001B048                            ; ===========================================================================
0001B048                            
0001B048                            loc_1A280:
0001B048 4A69 0010                  		tst.w	$10(a1)
0001B04C 6700                       		beq.s	loc_1A28C
0001B04E 117C 000B 001C             		move.b	#$B,$1C(a0)
0001B054                            
0001B054                            loc_1A28C:
0001B054 43FA DA96                  		lea	Ani_Eggman(pc),a1
0001B058 4EB9 0000 B2FA             		jsr	AnimateSprite
0001B05E                            
0001B05E                            loc_1A296:
0001B05E 2268 0034                  		movea.l	$34(a0),a1
0001B062 3169 0008 0008             		move.w	8(a1),8(a0)
0001B068 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B06E                            
0001B06E                            loc_1A2A6:
0001B06E 2268 0034                  		movea.l	$34(a0),a1
0001B072 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001B078 7003                       		moveq	#3,d0
0001B07A C028 0022                  		and.b	$22(a0),d0
0001B07E 0228 00FC 0001             		andi.b	#-4,1(a0)
0001B084 8128 0001                  		or.b	d0,1(a0)
0001B088 4EF9 0000 E2A2             		jmp	DisplaySprite
0001B08E                            ; ===========================================================================
0001B08E                            
0001B08E                            loc_1A2C6:				; XREF: Obj85_Index
0001B08E 2268 0034                  		movea.l	$34(a0),a1
0001B092 1011                       		move.b	(a1),d0
0001B094 B010                       		cmp.b	(a0),d0
0001B096 6600 FA7E                  		bne.w	Obj85_Delete
0001B09A 0CA9 0001 8B50 0004        		cmpi.l	#Map_Eggman,4(a1)
0001B0A2 6700                       		beq.s	loc_1A2E4
0001B0A4 117C 000A 001A             		move.b	#$A,$1A(a0)
0001B0AA 60C2                       		bra.s	loc_1A2A6
0001B0AC                            ; ===========================================================================
0001B0AC                            
0001B0AC                            loc_1A2E4:
0001B0AC 117C 0001 001C             		move.b	#1,$1C(a0)
0001B0B2 4A29 0021                  		tst.b	$21(a1)
0001B0B6 6F00                       		ble.s	loc_1A312
0001B0B8 117C 0006 001C             		move.b	#6,$1C(a0)
0001B0BE 217C 0001 8B50 0004        		move.l	#Map_Eggman,4(a0)
0001B0C6 317C 0400 0002             		move.w	#$400,2(a0)
0001B0CC 43FA DA1E                  		lea	Ani_Eggman(pc),a1
0001B0D0 4EB9 0000 B2FA             		jsr	AnimateSprite
0001B0D6 6000 FF86                  		bra.w	loc_1A296
0001B0DA                            ; ===========================================================================
0001B0DA                            
0001B0DA                            loc_1A312:
0001B0DA 4A28 0001                  		tst.b	1(a0)
0001B0DE 6A00 FA36                  		bpl.w	Obj85_Delete
0001B0E2 6100 D584                  		bsr.w	BossDefeated
0001B0E6 117C 0002 0018             		move.b	#2,$18(a0)
0001B0EC 117C 0000 001C             		move.b	#0,$1C(a0)
0001B0F2 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001B0FA 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001B100 43FA 0000                  		lea	Ani_obj85(pc),a1
0001B104 4EB9 0000 B2FA             		jsr	AnimateSprite
0001B10A 6000 FF52                  		bra.w	loc_1A296
0001B10E                            ; ===========================================================================
0001B10E                            
0001B10E                            loc_1A346:				; XREF: Obj85_Index
0001B10E 08E8 0000 0022             		bset	#0,$22(a0)
0001B114 2268 0034                  		movea.l	$34(a0),a1
0001B118 0CA9 0001 8B50 0004        		cmpi.l	#Map_Eggman,4(a1)
0001B120 6700                       		beq.s	loc_1A35E
0001B122 6000 FF4A                  		bra.w	loc_1A2A6
0001B126                            ; ===========================================================================
0001B126                            
0001B126                            loc_1A35E:
0001B126 3169 0008 0008             		move.w	8(a1),8(a0)
0001B12C 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B132 4A28 001E                  		tst.b	$1E(a0)
0001B136 6600                       		bne.s	loc_1A376
0001B138 117C 0014 001E             		move.b	#$14,$1E(a0)
0001B13E                            
0001B13E                            loc_1A376:
0001B13E 5328 001E                  		subq.b	#1,$1E(a0)
0001B142 6E00                       		bgt.s	loc_1A38A
0001B144 5228 001A                  		addq.b	#1,$1A(a0)
0001B148 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001B14E 6E00 F9C6                  		bgt.w	Obj85_Delete
0001B152                            
0001B152                            loc_1A38A:
0001B152 6000 FF0A                  		bra.w	loc_1A296
0001B156                            ; ===========================================================================
0001B156                            
0001B156                            loc_1A38E:				; XREF: Obj85_Index
0001B156 117C 000B 001A             		move.b	#$B,$1A(a0)
0001B15C 3038 D008                  		move.w	($FFFFD008).w,d0
0001B160 9068 0008                  		sub.w	8(a0),d0
0001B164 6500                       		bcs.s	loc_1A3A6
0001B166 4A28 0001                  		tst.b	1(a0)
0001B16A 6A00 F9AA                  		bpl.w	Obj85_Delete
0001B16E                            
0001B16E                            loc_1A3A6:
0001B16E 4EF9 0000 E2A2             		jmp	DisplaySprite
0001B174                            ; ===========================================================================
0001B174                            
0001B174                            loc_1A3AC:				; XREF: Obj85_Index
0001B174 117C 0000 001A             		move.b	#0,$1A(a0)
0001B17A 08E8 0000 0022             		bset	#0,$22(a0)
0001B180 2268 0034                  		movea.l	$34(a0),a1
0001B184 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001B18A 6600                       		bne.s	loc_1A3D0
0001B18C 0CA9 0001 8B50 0004        		cmpi.l	#Map_Eggman,4(a1)
0001B194 6700 F980                  		beq.w	Obj85_Delete
0001B198                            
0001B198                            loc_1A3D0:
0001B198 6000 FED4                  		bra.w	loc_1A2A6
0001B19C                            ; ===========================================================================
0001B19C                            Ani_obj85:
0001B19C                            	include "_anim\obj85.asm"
0001B19C                            ; ---------------------------------------------------------------------------
0001B19C                            ; Animation script - Eggman (FZ)
0001B19C                            ; ---------------------------------------------------------------------------
0001B19C 0000                       		dc.w byte_1A3D6-Ani_obj85
0001B19E 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001B1A2                            		even
0001B1A2                            		even
0001B1A2                            
0001B1A2                            Map_Eggman2:
0001B1A2                            	include "_maps\Eggman2.asm"
0001B1A2                            ; ---------------------------------------------------------------------------
0001B1A2                            ; Sprite mappings - Eggman (FZ)
0001B1A2                            ; ---------------------------------------------------------------------------
0001B1A2 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001B1A4 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001B1A6 06                         byte_1A3DE:	dc.b 6
0001B1A7 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001B1AC EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001B1B1 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001B1B6 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001B1BB FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001B1C0 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001B1C5 06                         byte_1A3FD:	dc.b 6
0001B1C6 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001B1CB EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001B1D0 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001B1D5 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001B1DA FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001B1DF 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001B1E4                            		even
0001B1E4                            		even
0001B1E4                            
0001B1E4                            Map_FZBoss:
0001B1E4                            	include "_maps\FZ boss.asm"
0001B1E4                            ; ---------------------------------------------------------------------------
0001B1E4                            ; Sprite mappings - boss (FZ)
0001B1E4                            ; ---------------------------------------------------------------------------
0001B1E4 0000                       		dc.w byte_1A422-Map_FZBoss
0001B1E6 0000                       		dc.w byte_1A42D-Map_FZBoss
0001B1E8 0000                       		dc.w byte_1A43D-Map_FZBoss
0001B1EA 02                         byte_1A422:	dc.b 2
0001B1EB 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001B1F0 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001B1F5 03                         byte_1A42D:	dc.b 3
0001B1F6 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001B1FB 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001B200 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001B205 02                         byte_1A43D:	dc.b 2
0001B206 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001B20B 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001B210                            		even
0001B210                            		even
0001B210                            
0001B210                            ; ===========================================================================
0001B210                            
0001B210                            Obj84_Delete:
0001B210 4EF9 0000 E2DE             		jmp	DeleteObject
0001B216                            ; ===========================================================================
0001B216                            ; ---------------------------------------------------------------------------
0001B216                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001B216                            ; ---------------------------------------------------------------------------
0001B216                            
0001B216                            Obj84:					; XREF: Obj_Index
0001B216 7000                       		moveq	#0,d0
0001B218 1028 0024                  		move.b	$24(a0),d0
0001B21C 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001B220 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001B224                            ; ===========================================================================
0001B224 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001B226 0000                       		dc.w loc_1A4CE-Obj84_Index
0001B228 0000                       		dc.w loc_1A57E-Obj84_Index
0001B22A                            
0001B22A 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001B22E 2550 0620                  		dc.w $2550, $620
0001B232 2490 04C0                  		dc.w $2490, $4C0
0001B236 2510 04C0                  		dc.w $2510, $4C0
0001B23A                            ; ===========================================================================
0001B23A                            
0001B23A                            Obj84_Main:				; XREF: Obj84_Index
0001B23A 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001B23E 7000                       		moveq	#0,d0
0001B240 1028 0028                  		move.b	$28(a0),d0
0001B244 D040                       		add.w	d0,d0
0001B246 D2C0                       		adda.w	d0,a1
0001B248 117C 0004 0001             		move.b	#4,1(a0)
0001B24E 08E8 0007 0001             		bset	#7,1(a0)
0001B254 08E8 0004 0001             		bset	#4,1(a0)
0001B25A 317C 0300 0002             		move.w	#$300,2(a0)
0001B260 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001B268 3159 0008                  		move.w	(a1)+,8(a0)
0001B26C 3151 000C                  		move.w	(a1),$C(a0)
0001B270 3159 0038                  		move.w	(a1)+,$38(a0)
0001B274 117C 0020 0016             		move.b	#$20,$16(a0)
0001B27A 117C 0060 0017             		move.b	#$60,$17(a0)
0001B280 117C 0020 0019             		move.b	#$20,$19(a0)
0001B286 117C 0060 0016             		move.b	#$60,$16(a0)
0001B28C 117C 0003 0018             		move.b	#3,$18(a0)
0001B292 5428 0024                  		addq.b	#2,$24(a0)
0001B296                            
0001B296                            loc_1A4CE:				; XREF: Obj84_Index
0001B296 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001B29C 6F00                       		ble.s	loc_1A4DC
0001B29E 08E8 0001 0001             		bset	#1,1(a0)
0001B2A4                            
0001B2A4                            loc_1A4DC:
0001B2A4 42A8 003C                  		clr.l	$3C(a0)
0001B2A8 4A28 0029                  		tst.b	$29(a0)
0001B2AC 6700                       		beq.s	loc_1A4EA
0001B2AE 5428 0024                  		addq.b	#2,$24(a0)
0001B2B2                            
0001B2B2                            loc_1A4EA:
0001B2B2 2028 003C                  		move.l	$3C(a0),d0
0001B2B6 2228 0038                  		move.l	$38(a0),d1
0001B2BA D280                       		add.l	d0,d1
0001B2BC 4841                       		swap	d1
0001B2BE 3141 000C                  		move.w	d1,$C(a0)
0001B2C2 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001B2C8 6600                       		bne.s	loc_1A524
0001B2CA 4A68 0030                  		tst.w	$30(a0)
0001B2CE 6A00                       		bpl.s	loc_1A524
0001B2D0 70F6                       		moveq	#-$A,d0
0001B2D2 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001B2D8 6F00                       		ble.s	loc_1A514
0001B2DA 700E                       		moveq	#$E,d0
0001B2DC                            
0001B2DC                            loc_1A514:
0001B2DC D240                       		add.w	d0,d1
0001B2DE 2268 0034                  		movea.l	$34(a0),a1
0001B2E2 3341 000C                  		move.w	d1,$C(a1)
0001B2E6 3368 0008 0008             		move.w	8(a0),8(a1)
0001B2EC                            
0001B2EC                            loc_1A524:
0001B2EC 323C 002B                  		move.w	#$2B,d1
0001B2F0 343C 0060                  		move.w	#$60,d2
0001B2F4 363C 0061                  		move.w	#$61,d3
0001B2F8 3828 0008                  		move.w	8(a0),d4
0001B2FC 4EB9 0001 066C             		jsr	SolidObject
0001B302 7000                       		moveq	#0,d0
0001B304 3228 003C                  		move.w	$3C(a0),d1
0001B308 6A00                       		bpl.s	loc_1A550
0001B30A 4441                       		neg.w	d1
0001B30C 5141                       		subq.w	#8,d1
0001B30E 6500                       		bcs.s	loc_1A55C
0001B310 5200                       		addq.b	#1,d0
0001B312 E841                       		asr.w	#4,d1
0001B314 D041                       		add.w	d1,d0
0001B316 6000                       		bra.s	loc_1A55C
0001B318                            ; ===========================================================================
0001B318                            
0001B318                            loc_1A550:
0001B318 0441 0027                  		subi.w	#$27,d1
0001B31C 6500                       		bcs.s	loc_1A55C
0001B31E 5200                       		addq.b	#1,d0
0001B320 E841                       		asr.w	#4,d1
0001B322 D041                       		add.w	d1,d0
0001B324                            
0001B324                            loc_1A55C:
0001B324 1140 001A                  		move.b	d0,$1A(a0)
0001B328 3038 D008                  		move.w	($FFFFD008).w,d0
0001B32C 9068 0008                  		sub.w	8(a0),d0
0001B330 6B00                       		bmi.s	loc_1A578
0001B332 0440 0140                  		subi.w	#$140,d0
0001B336 6B00                       		bmi.s	loc_1A578
0001B338 4A28 0001                  		tst.b	1(a0)
0001B33C 6A00 FED2                  		bpl.w	Obj84_Delete
0001B340                            
0001B340                            loc_1A578:
0001B340 4EF9 0000 E2A2             		jmp	DisplaySprite
0001B346                            ; ===========================================================================
0001B346                            
0001B346                            loc_1A57E:				; XREF: Obj84_Index
0001B346 7000                       		moveq	#0,d0
0001B348 1028 0028                  		move.b	$28(a0),d0
0001B34C 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001B350 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001B354 6000 FF5C                  		bra.w	loc_1A4EA
0001B358                            ; ===========================================================================
0001B358 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001B35A 0000                       		dc.w loc_1A598-off_1A590
0001B35C 0000                       		dc.w loc_1A604-off_1A590
0001B35E 0000                       		dc.w loc_1A604-off_1A590
0001B360                            ; ===========================================================================
0001B360                            
0001B360                            loc_1A598:				; XREF: off_1A590
0001B360 4A28 0029                  		tst.b	$29(a0)
0001B364 6600                       		bne.s	loc_1A5D4
0001B366 2268 0034                  		movea.l	$34(a0),a1
0001B36A 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001B370 6600                       		bne.s	loc_1A5B4
0001B372 6100 D2F4                  		bsr.w	BossDefeated
0001B376 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001B37E                            
0001B37E                            loc_1A5B4:
0001B37E 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001B386 6400                       		bcc.s	locret_1A602
0001B388 42A8 003C                  		clr.l	$3C(a0)
0001B38C 2268 0034                  		movea.l	$34(a0),a1
0001B390 5369 0032                  		subq.w	#1,$32(a1)
0001B394 4269 0030                  		clr.w	$30(a1)
0001B398 5528 0024                  		subq.b	#2,$24(a0)
0001B39C 4E75                       		rts	
0001B39E                            ; ===========================================================================
0001B39E                            
0001B39E                            loc_1A5D4:
0001B39E 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001B3A4 6C00                       		bge.s	loc_1A5E4
0001B3A6 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001B3AE                            
0001B3AE                            loc_1A5E4:
0001B3AE 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001B3B6 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001B3BC 6E00                       		bgt.s	locret_1A602
0001B3BE 4268 003E                  		clr.w	$3E(a0)
0001B3C2 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001B3C8 4228 0029                  		clr.b	$29(a0)
0001B3CC                            
0001B3CC                            locret_1A602:
0001B3CC 4E75                       		rts	
0001B3CE                            ; ===========================================================================
0001B3CE                            
0001B3CE                            loc_1A604:				; XREF: off_1A590
0001B3CE 08E8 0001 0001             		bset	#1,1(a0)
0001B3D4 4A28 0029                  		tst.b	$29(a0)
0001B3D8 6600                       		bne.s	loc_1A646
0001B3DA 2268 0034                  		movea.l	$34(a0),a1
0001B3DE 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001B3E4 6600                       		bne.s	loc_1A626
0001B3E6 6100 D280                  		bsr.w	BossDefeated
0001B3EA 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001B3F2                            
0001B3F2                            loc_1A626:
0001B3F2 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001B3FA 6400                       		bcc.s	locret_1A674
0001B3FC 42A8 003C                  		clr.l	$3C(a0)
0001B400 2268 0034                  		movea.l	$34(a0),a1
0001B404 5369 0032                  		subq.w	#1,$32(a1)
0001B408 4269 0030                  		clr.w	$30(a1)
0001B40C 5528 0024                  		subq.b	#2,$24(a0)
0001B410 4E75                       		rts	
0001B412                            ; ===========================================================================
0001B412                            
0001B412                            loc_1A646:
0001B412 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001B418 6D00                       		blt.s	loc_1A656
0001B41A 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001B422                            
0001B422                            loc_1A656:
0001B422 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001B42A 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001B430 6D00                       		blt.s	locret_1A674
0001B432 4268 003E                  		clr.w	$3E(a0)
0001B436 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001B43C 4228 0029                  		clr.b	$29(a0)
0001B440                            
0001B440                            locret_1A674:
0001B440 4E75                       		rts	
0001B442                            ; ===========================================================================
0001B442                            ; ---------------------------------------------------------------------------
0001B442                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001B442                            ; ---------------------------------------------------------------------------
0001B442                            Map_obj84:
0001B442                            	include "_maps\obj84.asm"
0001B442                            ; ---------------------------------------------------------------------------
0001B442                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001B442                            ; ---------------------------------------------------------------------------
0001B442 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001B446 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001B44A 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001B44E 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001B452 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001B456 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001B45A 06                         byte_1A68E:	dc.b 6
0001B45B A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B460 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B465 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B46A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B46F B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B474 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B479 08                         byte_1A6AD:	dc.b 8
0001B47A A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B47F A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B484 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B489 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B48E B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B493 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B498 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B49D D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B4A2 0A                         byte_1A6D6:	dc.b $A
0001B4A3 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B4A8 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B4AD B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B4B2 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B4B7 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B4BC B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B4C1 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B4C6 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B4CB F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B4D0 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B4D5 0C                         byte_1A709:	dc.b $C
0001B4D6 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B4DB A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B4E0 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B4E5 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B4EA B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B4EF B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B4F4 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B4F9 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B4FE F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B503 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B508 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B50D 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B512 0D                         byte_1A746:	dc.b $D
0001B513 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B518 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B51D B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B522 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B527 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B52C B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B531 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B536 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B53B F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B540 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B545 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B54A 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B54F 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B554 0E                         byte_1A788:	dc.b $E
0001B555 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B55A A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B55F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B564 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B569 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B56E B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B573 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B578 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B57D F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B582 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B587 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B58C 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B591 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B596 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001B59B 02                         byte_1A7CF:	dc.b 2
0001B59C F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001B5A1 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001B5A6                            		even
0001B5A6                            		even
0001B5A6                            
0001B5A6                            ; ===========================================================================
0001B5A6                            ; ---------------------------------------------------------------------------
0001B5A6                            ; Object 86 - energy balls (FZ)
0001B5A6                            ; ---------------------------------------------------------------------------
0001B5A6                            
0001B5A6                            Obj86:					; XREF: Obj_Index
0001B5A6 7000                       		moveq	#0,d0
0001B5A8 1028 0024                  		move.b	$24(a0),d0
0001B5AC 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001B5B0 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001B5B4                            ; ===========================================================================
0001B5B4 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001B5B6 0000                       		dc.w Obj86_Generator-Obj86_Index
0001B5B8 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001B5BA 0000                       		dc.w loc_1A962-Obj86_Index
0001B5BC 0000                       		dc.w loc_1A982-Obj86_Index
0001B5BE                            ; ===========================================================================
0001B5BE                            
0001B5BE                            Obj86_Main:				; XREF: Obj86_Index
0001B5BE 317C 2588 0008             		move.w	#$2588,8(a0)
0001B5C4 317C 053C 000C             		move.w	#$53C,$C(a0)
0001B5CA 317C 0300 0002             		move.w	#$300,2(a0)
0001B5D0 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001B5D8 117C 0000 001C             		move.b	#0,$1C(a0)
0001B5DE 117C 0003 0018             		move.b	#3,$18(a0)
0001B5E4 117C 0008 0017             		move.b	#8,$17(a0)
0001B5EA 117C 0008 0016             		move.b	#8,$16(a0)
0001B5F0 117C 0004 0001             		move.b	#4,1(a0)
0001B5F6 08E8 0007 0001             		bset	#7,1(a0)
0001B5FC 5428 0024                  		addq.b	#2,$24(a0)
0001B600                            
0001B600                            Obj86_Generator:			; XREF: Obj86_Index
0001B600 2268 0034                  		movea.l	$34(a0),a1
0001B604 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001B60A 6600                       		bne.s	loc_1A850
0001B60C 10BC 003F                  		move.b	#$3F,(a0)
0001B610 117C 0000 0024             		move.b	#0,$24(a0)
0001B616 4EF9 0000 E2A2             		jmp	DisplaySprite
0001B61C                            ; ===========================================================================
0001B61C                            
0001B61C                            loc_1A850:
0001B61C 117C 0000 001C             		move.b	#0,$1C(a0)
0001B622 4A28 0029                  		tst.b	$29(a0)
0001B626 6700                       		beq.s	loc_1A86C
0001B628 5428 0024                  		addq.b	#2,$24(a0)
0001B62C 117C 0001 001C             		move.b	#1,$1C(a0)
0001B632 117C 003E 0028             		move.b	#$3E,$28(a0)
0001B638                            
0001B638                            loc_1A86C:
0001B638 323C 0013                  		move.w	#$13,d1
0001B63C 343C 0008                  		move.w	#8,d2
0001B640 363C 0011                  		move.w	#$11,d3
0001B644 3828 0008                  		move.w	8(a0),d4
0001B648 4EB9 0001 066C             		jsr	SolidObject
0001B64E 3038 D008                  		move.w	($FFFFD008).w,d0
0001B652 9068 0008                  		sub.w	8(a0),d0
0001B656 6B00                       		bmi.s	loc_1A89A
0001B658 0440 0140                  		subi.w	#$140,d0
0001B65C 6B00                       		bmi.s	loc_1A89A
0001B65E 4A28 0001                  		tst.b	1(a0)
0001B662 6A00 FBAC                  		bpl.w	Obj84_Delete
0001B666                            
0001B666                            loc_1A89A:
0001B666 43FA 0000                  		lea	Ani_obj86(pc),a1
0001B66A 4EB9 0000 B2FA             		jsr	AnimateSprite
0001B670 4EF9 0000 E2A2             		jmp	DisplaySprite
0001B676                            ; ===========================================================================
0001B676                            
0001B676                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001B676 4A28 0029                  		tst.b	$29(a0)
0001B67A 6700 0000                  		beq.w	loc_1A954
0001B67E 4228 0029                  		clr.b	$29(a0)
0001B682 D068 0030                  		add.w	$30(a0),d0
0001B686 0240 001E                  		andi.w	#$1E,d0
0001B68A D4C0                       		adda.w	d0,a2
0001B68C 5868 0030                  		addq.w	#4,$30(a0)
0001B690 4268 0032                  		clr.w	$32(a0)
0001B694 7403                       		moveq	#3,d2
0001B696                            
0001B696                            Obj86_Loop:
0001B696 4EB9 0000 E73E             		jsr	SingleObjLoad2
0001B69C 6600 0000                  		bne.w	loc_1A954
0001B6A0 12BC 0086                  		move.b	#$86,(a1)
0001B6A4 3368 0008 0008             		move.w	8(a0),8(a1)
0001B6AA 337C 053C 000C             		move.w	#$53C,$C(a1)
0001B6B0 137C 0008 0024             		move.b	#8,$24(a1)
0001B6B6 337C 2300 0002             		move.w	#$2300,2(a1)
0001B6BC 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001B6C4 137C 000C 0016             		move.b	#$C,$16(a1)
0001B6CA 137C 000C 0017             		move.b	#$C,$17(a1)
0001B6D0 137C 0000 0020             		move.b	#0,$20(a1)
0001B6D6 137C 0003 0018             		move.b	#3,$18(a1)
0001B6DC 337C 003E 0028             		move.w	#$3E,$28(a1)
0001B6E2 137C 0004 0001             		move.b	#4,1(a1)
0001B6E8 08E9 0007 0001             		bset	#7,1(a1)
0001B6EE 2348 0034                  		move.l	a0,$34(a1)
0001B6F2 4EB9 0000 2D5A             		jsr	(RandomNumber).l
0001B6F8 3228 0032                  		move.w	$32(a0),d1
0001B6FC C3FC FFB1                  		muls.w	#-$4F,d1
0001B700 0641 2578                  		addi.w	#$2578,d1
0001B704 0240 001F                  		andi.w	#$1F,d0
0001B708 0440 0010                  		subi.w	#$10,d0
0001B70C D041                       		add.w	d1,d0
0001B70E 3340 0030                  		move.w	d0,$30(a1)
0001B712 5268 0032                  		addq.w	#1,$32(a0)
0001B716 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001B71C 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001B720                            
0001B720                            loc_1A954:
0001B720 4A68 0032                  		tst.w	$32(a0)
0001B724 6600                       		bne.s	loc_1A95E
0001B726 5428 0024                  		addq.b	#2,$24(a0)
0001B72A                            
0001B72A                            loc_1A95E:
0001B72A 6000 FF0C                  		bra.w	loc_1A86C
0001B72E                            ; ===========================================================================
0001B72E                            
0001B72E                            loc_1A962:				; XREF: Obj86_Index
0001B72E 117C 0002 001C             		move.b	#2,$1C(a0)
0001B734 4A68 0038                  		tst.w	$38(a0)
0001B738 6600                       		bne.s	loc_1A97E
0001B73A 117C 0002 0024             		move.b	#2,$24(a0)
0001B740 2268 0034                  		movea.l	$34(a0),a1
0001B744 337C FFFF 0032             		move.w	#-1,$32(a1)
0001B74A                            
0001B74A                            loc_1A97E:
0001B74A 6000 FEEC                  		bra.w	loc_1A86C
0001B74E                            ; ===========================================================================
0001B74E                            
0001B74E                            loc_1A982:				; XREF: Obj86_Index
0001B74E 7000                       		moveq	#0,d0
0001B750 1028 0025                  		move.b	$25(a0),d0
0001B754 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001B758 4EFB 0000                  		jmp	Obj86_Index2(pc,d0.w)
0001B75C                            ; ===========================================================================
0001B75C 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001B75E 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001B760 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2	; orb random 1
0001B762 0000                       		dc.w Obj86_Ball_Sine-Obj86_Index2	; rob random 2
0001B764 0000                       		dc.w Obj86_Ball_Explode-Obj86_Index2	; orb random 3
0001B766 0000                       		dc.w Obj86_Ball_Speed-Obj86_Index2	; yeah you get it
0001B768 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2
0001B76A 0000                       		dc.w Obj86_Ball_Homing-Obj86_Index2
0001B76C 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2
0001B76E 0000                       		dc.w Obj86_Ball_Static-Obj86_Index2
0001B770                            ; ===========================================================================
0001B770                            
0001B770                            loc_1A9A6:				; XREF: Obj86_Index2
0001B770 3028 0030                  		move.w	$30(a0),d0
0001B774 9068 0008                  		sub.w	8(a0),d0
0001B778 E940                       		asl.w	#4,d0
0001B77A 3140 0010                  		move.w	d0,$10(a0)
0001B77E 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B784 5428 0025                  		addq.b	#2,$25(a0)
0001B788                            
0001B788                            Obj86_Ball_Animate:
0001B788 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001B78C 4EB9 0000 B2FA             		jsr	AnimateSprite
0001B792 4EF9 0000 E2A2             		jmp	DisplaySprite
0001B798                            ; ===========================================================================
0001B798                            
0001B798                            loc_1A9C0:				; XREF: Obj86_Index2
0001B798 4A68 0010                  		tst.w	$10(a0)
0001B79C 6700                       		beq.s	loc_1A9E6
0001B79E 4EB9 0000 E268             		jsr	SpeedToPos
0001B7A4 3028 0008                  		move.w	8(a0),d0
0001B7A8 9068 0030                  		sub.w	$30(a0),d0
0001B7AC 6400                       		bcc.s	loc_1A9E6
0001B7AE 4268 0010                  		clr.w	$10(a0)
0001B7B2 D168 0008                  		add.w	d0,8(a0)
0001B7B6 2268 0034                  		movea.l	$34(a0),a1
0001B7BA 5369 0032                  		subq.w	#1,$32(a1)
0001B7BE                            
0001B7BE                            loc_1A9E6:
0001B7BE 117C 0000 001C             		move.b	#0,$1C(a0)
0001B7C4 5368 0028                  		subq.w	#1,$28(a0)
0001B7C8 6600                       		bne.s	locret_1AA1C
0001B7CA 4EB8 2D5A                  		jsr	RandomNumber
0001B7CE 0240 000E                  		and.w	#7*2,d0
0001B7D2 5840                       		addq.w	#2*2,d0
0001B7D4 1140 0025                  		move.b	d0,$25(a0)	; set routine
0001B7D8 4840                       		swap	d0
0001B7DA 3140 0028                  		move.w	d0,$28(a0)	; set other number
0001B7DE 117C 0001 001C             		move.b	#1,$1C(a0)
0001B7E4 117C 009A 0020             		move.b	#$9A,$20(a0)
0001B7EA 3038 D008                  		move.w	($FFFFD008).w,d0
0001B7EE 9068 0008                  		sub.w	8(a0),d0
0001B7F2 3140 0010                  		move.w	d0,$10(a0)
0001B7F6 317C 0140 0012             		move.w	#$140,$12(a0)
0001B7FC                            
0001B7FC                            locret_1AA1C:
0001B7FC 6000 FF8A                  		bra.w	Obj86_Ball_Animate
0001B800                            ; ===========================================================================
0001B800                            
0001B800                            Obj86_Ball_Explode:
0001B800 5328 0028                  		subq.b	#1,$28(a0)
0001B804 6A00 FF82                  		bpl.w	Obj86_Ball_Animate
0001B808 2268 0034                  		movea.l	$34(a0),a1
0001B80C 5369 0038                  		subq.w	#1,$38(a1)
0001B810 2248                       		move.l	a0,a1
0001B812 7400                       		moveq	#0,d2	; GMZ
0001B814 720F                       		moveq	#16-1,d1	; GMZ: Amount of explosion objects
0001B816 6000                       		bra.s	@start
0001B818                            @loop:
0001B818 4EB9 0000 E728             		jsr	SingleObjLoad
0001B81E 6600                       		bne.s	@exit
0001B820 3368 0008 0008             		move.w	8(a0),8(a1)
0001B826 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B82C                            @start:
0001B82C 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B830 137C 0002 0024             		move.b	#2,$24(a1)	; ML: no animal
0001B836 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype:
0001B83A 5802                       		addq.b	#4,d2
0001B83C 51C9 FFDA                  		dbf	d1,@loop
0001B840                            @exit:
0001B840 6000 FF46                  		bra.w	Obj86_Ball_Animate
0001B844                            ; ===========================================================================
0001B844                            
0001B844                            Obj86_Ball_Sine:
0001B844 1028 0028                  		move.b	$28(a0),d0
0001B848 5828 0028                  		addq.b	#4,$28(a0)
0001B84C 4EB8 2D80                  		jsr	CalcSine
0001B850 C1FC 0002                  		muls.w	#2,d0
0001B854 3140 0010                  		move.w	d0,$10(a0)
0001B858                            
0001B858 1028 0029                  		move.b	$29(a0),d0
0001B85C 5828 0029                  		addq.b	#4,$29(a0)
0001B860 4EB8 2D80                  		jsr	CalcSine
0001B864 4A40                       		tst.w	d0
0001B866 6B00                       		bmi.s	@upwards
0001B868 E548                       		lsl.w	#2,d0		; x4 go down faster
0001B86A                            @upwards:
0001B86A 3140 0012                  		move.w	d0,$12(a0)
0001B86E 6000 0000                  		bra.w	loc_1AA1E
0001B872                            ; ===========================================================================
0001B872                            
0001B872                            Obj86_Ball_Homing:
0001B872 0C28 00F0 0028             		cmp.b	#$F0,$28(a0)
0001B878 6400                       		bhs.s	@homer
0001B87A 0C28 00E0 0028             		cmp.b	#$E0,$28(a0)
0001B880 6400                       		bhs.s	Obj86_Ball_Vanish
0001B882 5328 0028                  		subq.b	#1,$28(a0)
0001B886 6400                       		bcc.s	@nomorehoming
0001B888 3038 D008                  		move.w	($FFFFD008).w,d0
0001B88C 9068 0008                  		sub.w	8(a0),d0
0001B890 D168 0010                  		add.w	d0,$10(a0)
0001B894 D168 0010                  		add.w	d0,$10(a0)
0001B898                            @nomorehoming:
0001B898 6000 0000                  		bra.w	loc_1AA1E
0001B89C                            @homer:
0001B89C 0C28 00DF 0028             		cmp.b	#$DF,$28(a0)
0001B8A2 60F4                       		bra.s	@nomorehoming	; next frame ig
0001B8A4                            ; ===========================================================================
0001B8A4                            
0001B8A4                            Obj86_Ball_Speed:
0001B8A4 4268 0010                  		clr.w	$10(a0)
0001B8A8 7000                       		moveq	#0,d0
0001B8AA 1028 0028                  		move.b	$28(a0),d0
0001B8AE E448                       		lsr.w	#2,d0
0001B8B0 D168 0012                  		add.w	d0,$12(a0)
0001B8B4 1028 0029                  		move.b	$29(a0),d0
0001B8B8 D128 0028                  		add.b	d0,$28(a0)
0001B8BC 6000 0000                  		bra.w	loc_1AA1E
0001B8C0                            ; ===========================================================================
0001B8C0                            
0001B8C0                            Obj86_Ball_Vanish:
0001B8C0 303C 00E1                  		move.w	#$E1,d0
0001B8C4 4EB9 0000 15E6             		jsr	(PlaySound_Special).l
0001B8CA 6000 0000                  		bra.w	loc_1AA34
0001B8CE                            ; ===========================================================================
0001B8CE                            
0001B8CE                            Obj86_Ball_Static:
0001B8CE 4268 0010                  		clr.w	$10(a0)
0001B8D2 7000                       		moveq	#0,d0
0001B8D4 7200                       		moveq	#0,d1
0001B8D6 1028 0028                  		move.b	$28(a0),d0
0001B8DA 1228 0029                  		move.b	$29(a0),d1
0001B8DE D041                       		add.w	d1,d0
0001B8E0 3140 0012                  		move.w	d0,$12(a0)
0001B8E4 6000 0000                  		bra.w	loc_1AA1E
0001B8E8                            ; ===========================================================================
0001B8E8                            
0001B8E8                            Obj86_Ball_Standard:
0001B8E8                            loc_1AA1E:
0001B8E8 4EB9 0000 E268             		jsr	SpeedToPos
0001B8EE 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001B8F4 6500 FE92                  		blo.w	Obj86_Ball_Animate
0001B8F8                            loc_1AA34:
0001B8F8 2268 0034                  		movea.l	$34(a0),a1
0001B8FC 5369 0038                  		subq.w	#1,$38(a1)
0001B900 6000 F90E                  		bra.w	Obj84_Delete
0001B904                            ; ===========================================================================
0001B904                            Ani_obj86:
0001B904                            	include "_anim\obj86.asm"
0001B904                            ; ---------------------------------------------------------------------------
0001B904                            ; Animation script - energy ball launcher (FZ)
0001B904                            ; ---------------------------------------------------------------------------
0001B904 0000                       		dc.w byte_1AA46-Ani_obj86
0001B906 0000                       		dc.w byte_1AA4A-Ani_obj86
0001B908 0000                       		dc.w byte_1AA50-Ani_obj86
0001B90A 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001B90E 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001B914 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001B91A                            		even
0001B91A                            		even
0001B91A                            
0001B91A                            ; ---------------------------------------------------------------------------
0001B91A                            ; Sprite mappings - energy ball	launcher (FZ)
0001B91A                            ; ---------------------------------------------------------------------------
0001B91A                            Map_obj86:
0001B91A                            	include "_maps\obj86.asm"
0001B91A                            ; ---------------------------------------------------------------------------
0001B91A                            ; Sprite mappings - energy ball	launcher (FZ)
0001B91A                            ; ---------------------------------------------------------------------------
0001B91A 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001B91E 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001B922 01                         byte_1AA5E:	dc.b 1
0001B923 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001B928 01                         byte_1AA64:	dc.b 1
0001B929 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001B92E 01                         byte_1AA6A:	dc.b 1
0001B92F F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B934 01                         byte_1AA70:	dc.b 1
0001B935 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B93A                            		even
0001B93A                            		even
0001B93A                            
0001B93A                            Ani_obj86a:
0001B93A                            	include "_anim\obj86a.asm"
0001B93A                            ; ---------------------------------------------------------------------------
0001B93A                            ; Animation script - energy balls (FZ)
0001B93A                            ; ---------------------------------------------------------------------------
0001B93A 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001B93C 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001B93E 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B94D 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B95C 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001B960 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001B96A                            		even
0001B96A                            		even
0001B96A                            
0001B96A                            ; ---------------------------------------------------------------------------
0001B96A                            ; Sprite mappings - energy balls (FZ)
0001B96A                            ; ---------------------------------------------------------------------------
0001B96A                            Map_obj86a:
0001B96A                            	include "_maps\obj86a.asm"
0001B96A                            ; ---------------------------------------------------------------------------
0001B96A                            ; Sprite mappings - energy balls (FZ)
0001B96A                            ; ---------------------------------------------------------------------------
0001B96A 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001B96E 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001B972 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001B976 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001B97A 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001B97E 0000                       		dc.w byte_1AB20-Map_obj86a
0001B980 02                         byte_1AABC:	dc.b 2
0001B981 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B986 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B98B 02                         byte_1AAC7:	dc.b 2
0001B98C F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B991 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B996 02                         byte_1AAD2:	dc.b 2
0001B997 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B99C 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B9A1 02                         byte_1AADD:	dc.b 2
0001B9A2 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B9A7 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B9AC 02                         byte_1AAE8:	dc.b 2
0001B9AD F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B9B2 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B9B7 02                         byte_1AAF3:	dc.b 2
0001B9B8 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B9BD F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B9C2 01                         byte_1AAFE:	dc.b 1
0001B9C3 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B9C8 01                         byte_1AB04:	dc.b 1
0001B9C9 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B9CE 02                         byte_1AB0A:	dc.b 2
0001B9CF F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B9D4 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B9D9 02                         byte_1AB15:	dc.b 2
0001B9DA F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B9DF F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B9E4 00                         byte_1AB20:	dc.b 0
0001B9E6 00                         		even
0001B9E6 00                         		even
0001B9E6                            
0001B9E6                            ; ===========================================================================
0001B9E6                            ; ---------------------------------------------------------------------------
0001B9E6                            ; Object 3E - prison capsule
0001B9E6                            ; ---------------------------------------------------------------------------
0001B9E6                            
0001B9E6                            Obj3E:					; XREF: Obj_Index
0001B9E6 7000                       		moveq	#0,d0
0001B9E8 1028 0024                  		move.b	$24(a0),d0
0001B9EC 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001B9F0 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001B9F4 3028 0008                  		move.w	8(a0),d0
0001B9F8 0240 FF80                  		andi.w	#$FF80,d0
0001B9FC 3238 F700                  		move.w	($FFFFF700).w,d1
0001BA00 0441 0080                  		subi.w	#$80,d1
0001BA04 0241 FF80                  		andi.w	#$FF80,d1
0001BA08 9041                       		sub.w	d1,d0
0001BA0A 0C40 0280                  		cmpi.w	#$280,d0
0001BA0E 6200                       		bhi.s	Obj3E_Delete
0001BA10 4EF9 0000 E2A2             		jmp	DisplaySprite
0001BA16                            ; ===========================================================================
0001BA16                            
0001BA16                            Obj3E_Delete:
0001BA16 4EF9 0000 E2DE             		jmp	DeleteObject
0001BA1C                            ; ===========================================================================
0001BA1C 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001BA1E 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001BA20 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001BA22 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001BA24 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001BA26 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001BA28 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001BA2A 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001BA2C                            
0001BA2C 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001BA30 040C 0501                  		dc.b 4,	$C, 5, 1
0001BA34 0610 0403                  		dc.b 6,	$10, 4,	3
0001BA38 0810 0305                  		dc.b 8,	$10, 3,	5
0001BA3C                            ; ===========================================================================
0001BA3C                            
0001BA3C                            Obj3E_Main:				; XREF: Obj3E_Index
0001BA3C 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001BA44 317C 049D 0002             		move.w	#$49D,2(a0)
0001BA4A 117C 0004 0001             		move.b	#4,1(a0)
0001BA50 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001BA56 7000                       		moveq	#0,d0
0001BA58 1028 0028                  		move.b	$28(a0),d0
0001BA5C E548                       		lsl.w	#2,d0
0001BA5E 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001BA62 1159 0024                  		move.b	(a1)+,$24(a0)
0001BA66 1159 0019                  		move.b	(a1)+,$19(a0)
0001BA6A 1159 0018                  		move.b	(a1)+,$18(a0)
0001BA6E 1159 001A                  		move.b	(a1)+,$1A(a0)
0001BA72 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001BA76 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001BA78 117C 0006 0020             		move.b	#6,$20(a0)
0001BA7E 117C 0008 0021             		move.b	#8,$21(a0)
0001BA84                            
0001BA84                            Obj3E_Not02:
0001BA84 4E75                       		rts	
0001BA86                            ; ===========================================================================
0001BA86                            
0001BA86                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001BA86 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001BA8C 6700                       		beq.s	Obj3E_ChkOpened
0001BA8E 323C 002B                  		move.w	#$2B,d1
0001BA92 343C 0018                  		move.w	#$18,d2
0001BA96 363C 0018                  		move.w	#$18,d3
0001BA9A 3828 0008                  		move.w	8(a0),d4
0001BA9E 4EF9 0001 066C             		jmp	SolidObject
0001BAA4                            ; ===========================================================================
0001BAA4                            
0001BAA4                            Obj3E_ChkOpened:
0001BAA4 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001BAA8 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001BAAA 4228 0025                  		clr.b	$25(a0)
0001BAAE 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001BAB4 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001BABA                            
0001BABA                            Obj3E_DoOpen:
0001BABA 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001BAC0 4E75                       		rts	
0001BAC2                            ; ===========================================================================
0001BAC2                            
0001BAC2                            Obj3E_Switched:				; XREF: Obj3E_Index
0001BAC2 323C 0017                  		move.w	#$17,d1
0001BAC6 343C 0008                  		move.w	#8,d2
0001BACA 363C 0008                  		move.w	#8,d3
0001BACE 3828 0008                  		move.w	8(a0),d4
0001BAD2 4EB9 0001 066C             		jsr	SolidObject
0001BAD8 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001BADE 4EB9 0000 B2FA             		jsr	AnimateSprite
0001BAE4 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001BAEA 4A28 0025                  		tst.b	$25(a0)
0001BAEE 6700                       		beq.s	locret_1AC60
0001BAF0 5068 000C                  		addq.w	#8,$C(a0)
0001BAF4 117C 000A 0024             		move.b	#$A,$24(a0)
0001BAFA 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001BB00 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001BB04 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001BB08 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001BB0E 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001BB14 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001BB16 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001BB1C 6000                       		bra.s	Obj3E_ContinueCode
0001BB1E                            
0001BB1E                            Obj3E_MoveLeft:
0001BB1E 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001BB24                            
0001BB24                            Obj3E_ContinueCode:
0001BB24 4228 0025                  		clr.b	$25(a0)
0001BB28 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001BB2E 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001BB34                            
0001BB34                            locret_1AC60:
0001BB34 4E75                       		rts	
0001BB36                            ; ===========================================================================
0001BB36                            
0001BB36                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001BB36 7007                       		moveq	#7,d0
0001BB38 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001BB3C 6600                       		bne.s	loc_1ACA0
0001BB3E 4EB9 0000 E728             		jsr	SingleObjLoad
0001BB44 6600                       		bne.s	loc_1ACA0
0001BB46 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001BB4A 3368 0008 0008             		move.w	8(a0),8(a1)
0001BB50 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BB56 4EB9 0000 2D5A             		jsr	(RandomNumber).l
0001BB5C 7200                       		moveq	#0,d1
0001BB5E 1200                       		move.b	d0,d1
0001BB60 E409                       		lsr.b	#2,d1
0001BB62 0441 0020                  		subi.w	#$20,d1
0001BB66 D369 0008                  		add.w	d1,8(a1)
0001BB6A E048                       		lsr.w	#8,d0
0001BB6C E608                       		lsr.b	#3,d0
0001BB6E D169 000C                  		add.w	d0,$C(a1)
0001BB72                            
0001BB72                            loc_1ACA0:
0001BB72 5368 001E                  		subq.w	#1,$1E(a0)
0001BB76 6700                       		beq.s	Obj3E_MakeAnimal
0001BB78 4E75                       		rts	
0001BB7A                            ; ===========================================================================
0001BB7A                            
0001BB7A                            Obj3E_MakeAnimal:
0001BB7A 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001BB80 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001BB86 117C 0006 001A             		move.b	#6,$1A(a0)
0001BB8C 317C 0096 001E             		move.w	#$96,$1E(a0)
0001BB92 0668 0020 000C             		addi.w	#$20,$C(a0)
0001BB98 7C07                       		moveq	#7,d6
0001BB9A 3A3C 009A                  		move.w	#$9A,d5
0001BB9E 78E4                       		moveq	#-$1C,d4
0001BBA0                            
0001BBA0                            Obj3E_Loop:
0001BBA0 4EB9 0000 E728             		jsr	SingleObjLoad
0001BBA6 6600                       		bne.s	locret_1ACF8
0001BBA8 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001BBAC 3368 0008 0008             		move.w	8(a0),8(a1)
0001BBB2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BBB8 D969 0008                  		add.w	d4,8(a1)
0001BBBC 5E44                       		addq.w	#7,d4
0001BBBE 3345 0036                  		move.w	d5,$36(a1)
0001BBC2 5145                       		subq.w	#8,d5
0001BBC4 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001BBC8                            
0001BBC8                            locret_1ACF8:
0001BBC8 4E75                       		rts	
0001BBCA                            ; ===========================================================================
0001BBCA                            
0001BBCA                            Obj3E_Animals:				; XREF: Obj3E_Index
0001BBCA 7007                       		moveq	#7,d0
0001BBCC C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001BBD0 6600                       		bne.s	loc_1AD38
0001BBD2 4EB9 0000 E728             		jsr	SingleObjLoad
0001BBD8 6600                       		bne.s	loc_1AD38
0001BBDA 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001BBDE 3368 0008 0008             		move.w	8(a0),8(a1)
0001BBE4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BBEA 4EB9 0000 2D5A             		jsr	(RandomNumber).l
0001BBF0 0240 001F                  		andi.w	#$1F,d0
0001BBF4 5D40                       		subq.w	#6,d0
0001BBF6 4A41                       		tst.w	d1
0001BBF8 6A00                       		bpl.s	loc_1AD2E
0001BBFA 4440                       		neg.w	d0
0001BBFC                            
0001BBFC                            loc_1AD2E:
0001BBFC D169 0008                  		add.w	d0,8(a1)
0001BC00 337C 000C 0036             		move.w	#$C,$36(a1)
0001BC06                            
0001BC06                            loc_1AD38:
0001BC06 5368 001E                  		subq.w	#1,$1E(a0)
0001BC0A 6600                       		bne.s	locret_1AD48
0001BC0C 5428 0024                  		addq.b	#2,$24(a0)
0001BC10 317C 00B4 001E             		move.w	#180,$1E(a0)
0001BC16                            
0001BC16                            locret_1AD48:
0001BC16 4E75                       		rts	
0001BC18                            ; ===========================================================================
0001BC18                            
0001BC18                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001BC18 703E                       		moveq	#$3E,d0
0001BC1A 7228                       		moveq	#$28,d1
0001BC1C 7440                       		moveq	#$40,d2
0001BC1E 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001BC22                            
0001BC22                            Obj3E_FindObj28:
0001BC22 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001BC24 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001BC26 D2C2                       		adda.w	d2,a1		; next object RAM
0001BC28 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001BC2C                            
0001BC2C 4EB9 0000 F928             		jsr	GotThroughAct
0001BC32 4EF9 0000 E2DE             		jmp	DeleteObject
0001BC38                            ; ===========================================================================
0001BC38                            
0001BC38                            Obj3E_Obj28Found:
0001BC38 4E75                       		rts	
0001BC3A                            ; ===========================================================================
0001BC3A                            Ani_obj3E:
0001BC3A                            	include "_anim\obj3E.asm"
0001BC3A                            ; ---------------------------------------------------------------------------
0001BC3A                            ; Animation script - prison capsule
0001BC3A                            ; ---------------------------------------------------------------------------
0001BC3A 0000                       		dc.w byte_1AD70-Ani_obj3E
0001BC3C 0000                       		dc.w byte_1AD70-Ani_obj3E
0001BC3E 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001BC42                            		even
0001BC42                            		even
0001BC42                            
0001BC42                            ; ---------------------------------------------------------------------------
0001BC42                            ; Sprite mappings - prison capsule
0001BC42                            ; ---------------------------------------------------------------------------
0001BC42                            Map_obj3E:
0001BC42                            	include "_maps\obj3E.asm"
0001BC42                            ; ---------------------------------------------------------------------------
0001BC42                            ; Sprite mappings - prison capsule
0001BC42                            ; ---------------------------------------------------------------------------
0001BC42 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001BC46 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001BC4A 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001BC4E 0000                       		dc.w byte_1ADE2-Map_obj3E
0001BC50 07                         byte_1AD82:	dc.b 7
0001BC51 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001BC56 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001BC5B E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001BC60 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001BC65 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001BC6A 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001BC6F 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001BC74 01                         byte_1ADA6:	dc.b 1
0001BC75 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001BC7A 06                         byte_1ADAC:	dc.b 6
0001BC7B 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001BC80 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001BC85 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001BC8A 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001BC8F 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001BC94 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001BC99 01                         byte_1ADCB:	dc.b 1
0001BC9A F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001BC9F 02                         byte_1ADD1:	dc.b 2
0001BCA0 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001BCA5 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001BCAA 01                         byte_1ADDC:	dc.b 1
0001BCAB F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001BCB0 00                         byte_1ADE2:	dc.b 0
0001BCB2 00                         		even
0001BCB2 00                         		even
0001BCB2                            
0001BCB2                            ; ---------------------------------------------------------------------------
0001BCB2                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001BCB2                            ; ---------------------------------------------------------------------------
0001BCB2                            
0001BCB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BCB2                            
0001BCB2                            
0001BCB2                            TouchResponse:				; XREF: Obj01
0001BCB2 4E71                       		nop	
0001BCB4 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001BCB8 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001BCBC 5142                       		subq.w	#8,d2
0001BCBE 7A00                       		moveq	#0,d5
0001BCC0 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001BCC4 5705                       		subq.b	#3,d5
0001BCC6 9645                       		sub.w	d5,d3
0001BCC8 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001BCCE 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001BCD0 0643 000C                  		addi.w	#$C,d3
0001BCD4 7A0A                       		moveq	#$A,d5
0001BCD6                            
0001BCD6                            Touch_NoDuck:
0001BCD6 383C 0010                  		move.w	#$10,d4
0001BCDA DA45                       		add.w	d5,d5
0001BCDC 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001BCE0 3C3C 005F                  		move.w	#$5F,d6
0001BCE4                            
0001BCE4                            Touch_Loop:
0001BCE4 4A29 0001                  		tst.b	1(a1)
0001BCE8 6A00                       		bpl.s	Touch_NextObj
0001BCEA 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001BCEE 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001BCF0                            
0001BCF0                            Touch_NextObj:
0001BCF0 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001BCF4 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001BCF8                            
0001BCF8 7000                       		moveq	#0,d0
0001BCFA 4E75                       		rts	
0001BCFC                            ; ===========================================================================
0001BCFC 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001BCFE 0C14                       		dc.b   $C, $14
0001BD00 140C                       		dc.b  $14,  $C
0001BD02 0410                       		dc.b	4, $10
0001BD04 0C12                       		dc.b   $C, $12
0001BD06 1010                       		dc.b  $10, $10
0001BD08 0606                       		dc.b	6,   6
0001BD0A 180C                       		dc.b  $18,  $C
0001BD0C 0C10                       		dc.b   $C, $10
0001BD0E 100C                       		dc.b  $10,  $C
0001BD10 0808                       		dc.b	8,   8
0001BD12 1410                       		dc.b  $14, $10
0001BD14 1408                       		dc.b  $14,   8
0001BD16 0E0E                       		dc.b   $E,  $E
0001BD18 1818                       		dc.b  $18, $18
0001BD1A 2810                       		dc.b  $28, $10
0001BD1C 1018                       		dc.b  $10, $18
0001BD1E 0810                       		dc.b	8, $10
0001BD20 2070                       		dc.b  $20, $70
0001BD22 4020                       		dc.b  $40, $20
0001BD24 8020                       		dc.b  $80, $20
0001BD26 2020                       		dc.b  $20, $20
0001BD28 0808                       		dc.b	8,   8
0001BD2A 0404                       		dc.b	4,   4
0001BD2C 2008                       		dc.b  $20,   8
0001BD2E 0C0C                       		dc.b   $C,  $C
0001BD30 0804                       		dc.b	8,   4
0001BD32 1804                       		dc.b  $18,   4
0001BD34 2804                       		dc.b  $28,   4
0001BD36 0408                       		dc.b	4,   8
0001BD38 0418                       		dc.b	4, $18
0001BD3A 0428                       		dc.b	4, $28
0001BD3C 0420                       		dc.b	4, $20
0001BD3E 1818                       		dc.b  $18, $18
0001BD40 0C18                       		dc.b   $C, $18
0001BD42 4808                       		dc.b  $48,   8
0001BD44                            ; ===========================================================================
0001BD44                            
0001BD44                            Touch_Height:				; XREF: TouchResponse
0001BD44 0240 003F                  		andi.w	#$3F,d0
0001BD48 D040                       		add.w	d0,d0
0001BD4A 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001BD4E 7200                       		moveq	#0,d1
0001BD50 121A                       		move.b	(a2)+,d1
0001BD52 3029 0008                  		move.w	8(a1),d0
0001BD56 9041                       		sub.w	d1,d0
0001BD58 9042                       		sub.w	d2,d0
0001BD5A 6400                       		bcc.s	loc_1AE98
0001BD5C D241                       		add.w	d1,d1
0001BD5E D041                       		add.w	d1,d0
0001BD60 6500                       		bcs.s	Touch_Width
0001BD62 6000 FF8C                  		bra.w	Touch_NextObj
0001BD66                            ; ===========================================================================
0001BD66                            
0001BD66                            loc_1AE98:
0001BD66 B044                       		cmp.w	d4,d0
0001BD68 6200 FF86                  		bhi.w	Touch_NextObj
0001BD6C                            
0001BD6C                            Touch_Width:
0001BD6C 7200                       		moveq	#0,d1
0001BD6E 121A                       		move.b	(a2)+,d1
0001BD70 3029 000C                  		move.w	$C(a1),d0
0001BD74 9041                       		sub.w	d1,d0
0001BD76 9043                       		sub.w	d3,d0
0001BD78 6400                       		bcc.s	loc_1AEB6
0001BD7A D241                       		add.w	d1,d1
0001BD7C D240                       		add.w	d0,d1
0001BD7E 6500                       		bcs.s	Touch_ChkValue
0001BD80 6000 FF6E                  		bra.w	Touch_NextObj
0001BD84                            ; ===========================================================================
0001BD84                            
0001BD84                            loc_1AEB6:
0001BD84 B045                       		cmp.w	d5,d0
0001BD86 6200 FF68                  		bhi.w	Touch_NextObj
0001BD8A                            
0001BD8A                            Touch_ChkValue:
0001BD8A 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001BD8E 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001BD92 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001BD96 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001BD9A 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001BD9E 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001BDA0 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001BDA4                            
0001BDA4                            ; touch	response is $40-$7F
0001BDA4                            
0001BDA4 1029 0020                  		move.b	$20(a1),d0
0001BDA8 0200 003F                  		andi.b	#$3F,d0
0001BDAC 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001BDB0 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001BDB2 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001BDB8 6400 0000                  		bcc.w	locret_1AEF2
0001BDBC 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001BDC0                            
0001BDC0                            locret_1AEF2:
0001BDC0 4E75                       		rts	
0001BDC2                            ; ===========================================================================
0001BDC2                            
0001BDC2                            Touch_Monitor:
0001BDC2 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001BDC6 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001BDC8 3028 000C                  		move.w	$C(a0),d0
0001BDCC 0440 0010                  		subi.w	#$10,d0
0001BDD0 B069 000C                  		cmp.w	$C(a1),d0
0001BDD4 6500                       		bcs.s	locret_1AF2E
0001BDD6 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001BDDA 337C FE80 0012             		move.w	#-$180,$12(a1)
0001BDE0 4A29 0025                  		tst.b	$25(a1)
0001BDE4 6600                       		bne.s	locret_1AF2E
0001BDE6 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001BDEA 4E75                       		rts	
0001BDEC                            ; ===========================================================================
0001BDEC                            
0001BDEC                            loc_1AF1E:
0001BDEC 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001BDF2 6600                       		bne.s	locret_1AF2E
0001BDF4 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001BDF8 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001BDFC                            
0001BDFC                            locret_1AF2E:
0001BDFC 4E75                       		rts	
0001BDFE                            ; ===========================================================================
0001BDFE                            
0001BDFE                            Touch_Enemy:				; XREF: Touch_ChkValue
0001BDFE 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001BE02 6600                       		bne.s	loc_1AF40	; if yes, branch
0001BE04 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001BE0A 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001BE0E                            
0001BE0E                            loc_1AF40:
0001BE0E 4A29 0021                  		tst.b	$21(a1)
0001BE12 6700                       		beq.s	Touch_KillEnemy
0001BE14 4468 0010                  		neg.w	$10(a0)
0001BE18 4468 0012                  		neg.w	$12(a0)
0001BE1C E0E8 0010                  		asr	$10(a0)
0001BE20 E0E8 0012                  		asr	$12(a0)
0001BE24 137C 0000 0020             		move.b	#0,$20(a1)
0001BE2A 5329 0021                  		subq.b	#1,$21(a1)
0001BE2E 6600                       		bne.s	locret_1AF68
0001BE30 08E9 0007 0022             		bset	#7,$22(a1)
0001BE36                            
0001BE36                            locret_1AF68:
0001BE36 4E75                       		rts	
0001BE38                            ; ===========================================================================
0001BE38                            
0001BE38                            Touch_KillEnemy:
0001BE38 08E9 0007 0022             		bset	#7,$22(a1)
0001BE3E 7000                       		moveq	#0,d0
0001BE40 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001BE44 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001BE48 0C40 0006                  		cmpi.w	#6,d0
0001BE4C 6500                       		bcs.s	loc_1AF82
0001BE4E 7006                       		moveq	#6,d0
0001BE50                            
0001BE50                            loc_1AF82:
0001BE50 3340 003E                  		move.w	d0,$3E(a1)
0001BE54 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001BE58 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001BE5E 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001BE60 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001BE64 337C 000A 003E             		move.w	#$A,$3E(a1)
0001BE6A                            
0001BE6A                            loc_1AF9C:
0001BE6A 6100 0000                  		bsr.w	AddPoints
0001BE6E 7400                       		moveq	#0,d2	; GMZ
0001BE70 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001BE72 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001BE74                            
0001BE74                            TouchKE_Explode:
0001BE74 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001BE78 137C 0000 0024             		move.b	#0,$24(a1)
0001BE7E 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001BE82                            
0001BE82                            TouchKE_NextExplosion:
0001BE82 5802                       		addq.b	#4,d2
0001BE84 4EB9 0000 E728             		jsr	SingleObjLoad
0001BE8A 6600                       		bne.s	TouchKE_NoExplosion
0001BE8C 336A 0008 0008             		move.w	8(a2),8(a1)
0001BE92 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001BE98 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001BE9C                            
0001BE9C                            TouchKE_NoExplosion:
0001BE9C 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001BE9E 4A68 0012                  		tst.w	$12(a0)
0001BEA2 6B00                       		bmi.s	loc_1AFC2
0001BEA4 3028 000C                  		move.w	$C(a0),d0
0001BEA8 B069 000C                  		cmp.w	$C(a1),d0
0001BEAC 6400                       		bcc.s	loc_1AFCA
0001BEAE 4468 0012                  		neg.w	$12(a0)
0001BEB2 4E75                       		rts	
0001BEB4                            ; ===========================================================================
0001BEB4                            
0001BEB4                            loc_1AFC2:
0001BEB4 0668 0100 0012             		addi.w	#$100,$12(a0)
0001BEBA 4E75                       		rts	
0001BEBC                            ; ===========================================================================
0001BEBC                            
0001BEBC                            loc_1AFCA:
0001BEBC 0468 0100 0012             		subi.w	#$100,$12(a0)
0001BEC2 4E75                       		rts	
0001BEC4                            ; ===========================================================================
0001BEC4 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001BECC                            ; ===========================================================================
0001BECC                            
0001BECC                            loc_1AFDA:				; XREF: Touch_CatKiller
0001BECC 08E9 0007 0022             		bset	#7,$22(a1)
0001BED2                            
0001BED2                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001BED2 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001BED6 6700                       		beq.s	Touch_Hurt	; if not, branch
0001BED8                            
0001BED8                            loc_1AFE6:				; XREF: Touch_Hurt
0001BED8 70FF                       		moveq	#-1,d0
0001BEDA 4E75                       		rts	
0001BEDC                            ; ===========================================================================
0001BEDC                            
0001BEDC                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001BEDC 4E71                       		nop	
0001BEDE 4A68 0030                  		tst.w	$30(a0)
0001BEE2 66F4                       		bne.s	loc_1AFE6
0001BEE4 2449                       		movea.l	a1,a2
0001BEE6                            
0001BEE6                            ; End of function TouchResponse
0001BEE6                            ; continue straight to HurtSonic
0001BEE6                            
0001BEE6                            ; ---------------------------------------------------------------------------
0001BEE6                            ; Hurting Sonic	subroutine
0001BEE6                            ; ---------------------------------------------------------------------------
0001BEE6                            
0001BEE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BEE6                            
0001BEE6                            
0001BEE6                            HurtSonic:
0001BEE6 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001BEEA 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001BEEC 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001BEF0 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001BEF4 4EB9 0000 E728             		jsr	SingleObjLoad
0001BEFA 6600                       		bne.s	Hurt_Shield
0001BEFC 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001BF00 3368 0008 0008             		move.w	8(a0),8(a1)
0001BF06 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BF0C                            
0001BF0C                            Hurt_Shield:
0001BF0C 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001BF12 117C 0004 0024             		move.b	#4,$24(a0)
0001BF18 6100 859A                  		bsr.w	Sonic_ResetOnFloor
0001BF1C 08E8 0001 0022             		bset	#1,$22(a0)
0001BF22 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001BF28 317C FE00 0010             		move.w	#-$200,$10(a0)
0001BF2E 0828 0006 0022             		btst	#6,$22(a0)
0001BF34 6700                       		beq.s	Hurt_Reverse
0001BF36 317C FE00 0012             		move.w	#-$200,$12(a0)
0001BF3C 317C FF00 0010             		move.w	#-$100,$10(a0)
0001BF42                            
0001BF42                            Hurt_Reverse:
0001BF42 3028 0008                  		move.w	8(a0),d0
0001BF46 B06A 0008                  		cmp.w	8(a2),d0
0001BF4A 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001BF4C 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001BF50                            
0001BF50                            Hurt_ChkSpikes:
0001BF50 317C 0000 0014             		move.w	#0,$14(a0)
0001BF56 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001BF5C 317C 0078 0030             		move.w	#$78,$30(a0)
0001BF62 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001BF66 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001BF6A 6600                       		bne.s	Hurt_Sound	; if not, branch
0001BF6C 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001BF70 6600                       		bne.s	Hurt_Sound	; if not, branch
0001BF72 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001BF76                            
0001BF76                            Hurt_Sound:
0001BF76 4EB9 0000 15E6             		jsr	(PlaySound_Special).l
0001BF7C 70FF                       		moveq	#-1,d0
0001BF7E 4E75                       		rts	
0001BF80                            ; ===========================================================================
0001BF80                            
0001BF80                            Hurt_NoRings:
0001BF80 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001BF84 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001BF88                            ; End of function HurtSonic
0001BF88                            
0001BF88                            ; ---------------------------------------------------------------------------
0001BF88                            ; Subroutine to	kill Sonic
0001BF88                            ; ---------------------------------------------------------------------------
0001BF88                            
0001BF88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BF88                            
0001BF88                            
0001BF88                            KillSonic:
0001BF88 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001BF8C 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001BF8E 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001BF94 117C 0006 0024             		move.b	#6,$24(a0)
0001BF9A 6100 8518                  		bsr.w	Sonic_ResetOnFloor
0001BF9E 08E8 0001 0022             		bset	#1,$22(a0)
0001BFA4 317C F900 0012             		move.w	#-$700,$12(a0)
0001BFAA 317C 0000 0010             		move.w	#0,$10(a0)
0001BFB0 317C 0000 0014             		move.w	#0,$14(a0)
0001BFB6 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001BFBC 117C 0018 001C             		move.b	#$18,$1C(a0)
0001BFC2 08E8 0007 0002             		bset	#7,2(a0)
0001BFC8 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001BFCC 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001BFD0 6600                       		bne.s	Kill_Sound
0001BFD2 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001BFD6                            
0001BFD6                            Kill_Sound:
0001BFD6 4EB9 0000 15E6             		jsr	(PlaySound_Special).l
0001BFDC                            
0001BFDC                            Kill_NoDeath:
0001BFDC 70FF                       		moveq	#-1,d0
0001BFDE 4E75                       		rts	
0001BFE0                            ; End of function KillSonic
0001BFE0                            
0001BFE0                            
0001BFE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BFE0                            
0001BFE0                            
0001BFE0                            Touch_Special:				; XREF: Touch_ChkValue
0001BFE0 1229 0020                  		move.b	$20(a1),d1
0001BFE4 0201 003F                  		andi.b	#$3F,d1
0001BFE8 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001BFEC 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001BFEE 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001BFF2 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001BFF4 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001BFF8 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001BFFA 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001BFFE 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001C000 4E75                       		rts	
0001C002                            ; ===========================================================================
0001C002                            
0001C002                            Touch_CatKiller:			; XREF: Touch_Special
0001C002 6000 FEC8                  		bra.w	loc_1AFDA
0001C006                            ; ===========================================================================
0001C006                            
0001C006                            Touch_Yadrin:				; XREF: Touch_Special
0001C006 9A40                       		sub.w	d0,d5
0001C008 0C45 0008                  		cmpi.w	#8,d5
0001C00C 6400                       		bcc.s	loc_1B144
0001C00E 3029 0008                  		move.w	8(a1),d0
0001C012 5940                       		subq.w	#4,d0
0001C014 0829 0000 0022             		btst	#0,$22(a1)
0001C01A 6700                       		beq.s	loc_1B130
0001C01C 0440 0010                  		subi.w	#$10,d0
0001C020                            
0001C020                            loc_1B130:
0001C020 9042                       		sub.w	d2,d0
0001C022 6400                       		bcc.s	loc_1B13C
0001C024 0640 0018                  		addi.w	#$18,d0
0001C028 6500                       		bcs.s	loc_1B140
0001C02A 6000                       		bra.s	loc_1B144
0001C02C                            ; ===========================================================================
0001C02C                            
0001C02C                            loc_1B13C:
0001C02C B044                       		cmp.w	d4,d0
0001C02E 6200                       		bhi.s	loc_1B144
0001C030                            
0001C030                            loc_1B140:
0001C030 6000 FEA0                  		bra.w	Touch_ChkHurt
0001C034                            ; ===========================================================================
0001C034                            
0001C034                            loc_1B144:
0001C034 6000 FDC8                  		bra.w	Touch_Enemy
0001C038                            ; ===========================================================================
0001C038                            
0001C038                            Touch_D7orE1:				; XREF: Touch_Special
0001C038 5229 0021                  		addq.b	#1,$21(a1)
0001C03C 4E75                       		rts	
0001C03E                            ; End of function Touch_Special
0001C03E                            
0001C03E                            ; ---------------------------------------------------------------------------
0001C03E                            ; Subroutine to	show the special stage layout
0001C03E                            ; ---------------------------------------------------------------------------
0001C03E                            
0001C03E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C03E                            
0001C03E                            
0001C03E                            SS_ShowLayout:				; XREF: SpecialStage
0001C03E 6100 0000                  		bsr.w	SS_AniWallsRings
0001C042 6100 0000                  		bsr.w	SS_AniItems
0001C046 3F05                       		move.w	d5,-(sp)
0001C048 43F8 8000                  		lea	($FFFF8000).w,a1
0001C04C 1038 F780                  		move.b	($FFFFF780).w,d0
0001C050 0200 00FC                  		andi.b	#$FC,d0
0001C054 4EB9 0000 2D80             		jsr	(CalcSine).l
0001C05A 3800                       		move.w	d0,d4
0001C05C 3A01                       		move.w	d1,d5
0001C05E C9FC 0018                  		muls.w	#$18,d4
0001C062 CBFC 0018                  		muls.w	#$18,d5
0001C066 7400                       		moveq	#0,d2
0001C068 3438 F700                  		move.w	($FFFFF700).w,d2
0001C06C 84FC 0018                  		divu.w	#$18,d2
0001C070 4842                       		swap	d2
0001C072 4442                       		neg.w	d2
0001C074 0642 FF4C                  		addi.w	#-$B4,d2
0001C078 7600                       		moveq	#0,d3
0001C07A 3638 F704                  		move.w	($FFFFF704).w,d3
0001C07E 86FC 0018                  		divu.w	#$18,d3
0001C082 4843                       		swap	d3
0001C084 4443                       		neg.w	d3
0001C086 0643 FF4C                  		addi.w	#-$B4,d3
0001C08A 3E3C 000F                  		move.w	#$F,d7
0001C08E                            
0001C08E                            loc_1B19E:
0001C08E 48A7 E000                  		movem.w	d0-d2,-(sp)
0001C092 48A7 C000                  		movem.w	d0-d1,-(sp)
0001C096 4440                       		neg.w	d0
0001C098 C3C2                       		muls.w	d2,d1
0001C09A C1C3                       		muls.w	d3,d0
0001C09C 2C00                       		move.l	d0,d6
0001C09E DC81                       		add.l	d1,d6
0001C0A0 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001C0A4 C1C2                       		muls.w	d2,d0
0001C0A6 C3C3                       		muls.w	d3,d1
0001C0A8 D280                       		add.l	d0,d1
0001C0AA 2406                       		move.l	d6,d2
0001C0AC 3C3C 000F                  		move.w	#$F,d6
0001C0B0                            
0001C0B0                            loc_1B1C0:
0001C0B0 2002                       		move.l	d2,d0
0001C0B2 E080                       		asr.l	#8,d0
0001C0B4 32C0                       		move.w	d0,(a1)+
0001C0B6 2001                       		move.l	d1,d0
0001C0B8 E080                       		asr.l	#8,d0
0001C0BA 32C0                       		move.w	d0,(a1)+
0001C0BC D485                       		add.l	d5,d2
0001C0BE D284                       		add.l	d4,d1
0001C0C0 51CE FFEE                  		dbf	d6,loc_1B1C0
0001C0C4                            
0001C0C4 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001C0C8 0643 0018                  		addi.w	#$18,d3
0001C0CC 51CF FFC0                  		dbf	d7,loc_1B19E
0001C0D0                            
0001C0D0 3A1F                       		move.w	(sp)+,d5
0001C0D2 41F9 00FF 0000             		lea	($FF0000).l,a0
0001C0D8 7000                       		moveq	#0,d0
0001C0DA 3038 F704                  		move.w	($FFFFF704).w,d0
0001C0DE 80FC 0018                  		divu.w	#$18,d0
0001C0E2 C0FC 0080                  		mulu.w	#$80,d0
0001C0E6 D1C0                       		adda.l	d0,a0
0001C0E8 7000                       		moveq	#0,d0
0001C0EA 3038 F700                  		move.w	($FFFFF700).w,d0
0001C0EE 80FC 0018                  		divu.w	#$18,d0
0001C0F2 D0C0                       		adda.w	d0,a0
0001C0F4 49F8 8000                  		lea	($FFFF8000).w,a4
0001C0F8 3E3C 000F                  		move.w	#$F,d7
0001C0FC                            
0001C0FC                            loc_1B20C:
0001C0FC 3C3C 000F                  		move.w	#$F,d6
0001C100                            
0001C100                            loc_1B210:
0001C100 7000                       		moveq	#0,d0
0001C102 1018                       		move.b	(a0)+,d0
0001C104 6700                       		beq.s	loc_1B268
0001C106 0C00 004E                  		cmpi.b	#$4E,d0
0001C10A 6200                       		bhi.s	loc_1B268
0001C10C 3614                       		move.w	(a4),d3
0001C10E 0643 0120                  		addi.w	#$120,d3
0001C112 0C43 0070                  		cmpi.w	#$70,d3
0001C116 6500                       		bcs.s	loc_1B268
0001C118 0C43 01D0                  		cmpi.w	#$1D0,d3
0001C11C 6400                       		bcc.s	loc_1B268
0001C11E 342C 0002                  		move.w	2(a4),d2
0001C122 0642 00F0                  		addi.w	#$F0,d2
0001C126 0C42 0070                  		cmpi.w	#$70,d2
0001C12A 6500                       		bcs.s	loc_1B268
0001C12C 0C42 0170                  		cmpi.w	#$170,d2
0001C130 6400                       		bcc.s	loc_1B268
0001C132 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001C138 E748                       		lsl.w	#3,d0
0001C13A 4BF5 0000                  		lea	(a5,d0.w),a5
0001C13E 225D                       		movea.l	(a5)+,a1
0001C140 321D                       		move.w	(a5)+,d1
0001C142 D241                       		add.w	d1,d1
0001C144 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001C148 365D                       		movea.w	(a5)+,a3
0001C14A 7200                       		moveq	#0,d1
0001C14C 1219                       		move.b	(a1)+,d1
0001C14E 5301                       		subq.b	#1,d1
0001C150 6B00                       		bmi.s	loc_1B268
0001C152 4EB9 0000 E400             		jsr	sub_D762
0001C158                            
0001C158                            loc_1B268:
0001C158 584C                       		addq.w	#4,a4
0001C15A 51CE FFA4                  		dbf	d6,loc_1B210
0001C15E                            
0001C15E 41E8 0070                  		lea	$70(a0),a0
0001C162 51CF FF98                  		dbf	d7,loc_1B20C
0001C166                            
0001C166 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001C16A 0C05 0050                  		cmpi.b	#$50,d5
0001C16E 6700                       		beq.s	loc_1B288
0001C170 24BC 0000 0000             		move.l	#0,(a2)
0001C176 4E75                       		rts	
0001C178                            ; ===========================================================================
0001C178                            
0001C178                            loc_1B288:
0001C178 157C 0000 FFFB             		move.b	#0,-5(a2)
0001C17E 4E75                       		rts	
0001C180                            ; End of function SS_ShowLayout
0001C180                            
0001C180                            ; ---------------------------------------------------------------------------
0001C180                            ; Subroutine to	animate	walls and rings	in the special stage
0001C180                            ; ---------------------------------------------------------------------------
0001C180                            
0001C180                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C180                            
0001C180                            
0001C180                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001C180 43F9 00FF 400C             		lea	($FF400C).l,a1
0001C186 7000                       		moveq	#0,d0
0001C188 1038 F780                  		move.b	($FFFFF780).w,d0
0001C18C E408                       		lsr.b	#2,d0
0001C18E 0240 000F                  		andi.w	#$F,d0
0001C192 7223                       		moveq	#$23,d1
0001C194                            
0001C194                            loc_1B2A4:
0001C194 3280                       		move.w	d0,(a1)
0001C196 5049                       		addq.w	#8,a1
0001C198 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001C19C                            
0001C19C 43F9 00FF 4005             		lea	($FF4005).l,a1
0001C1A2 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001C1A6 6A00                       		bpl.s	loc_1B2C8
0001C1A8 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001C1AE 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001C1B2 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001C1B8                            
0001C1B8                            loc_1B2C8:
0001C1B8 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001C1BE 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001C1C2 6A00                       		bpl.s	loc_1B2E4
0001C1C4 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001C1CA 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001C1CE 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001C1D4                            
0001C1D4                            loc_1B2E4:
0001C1D4 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001C1D8 1340 0138                  		move.b	d0,$138(a1)
0001C1DC 1340 0160                  		move.b	d0,$160(a1)
0001C1E0 1340 0148                  		move.b	d0,$148(a1)
0001C1E4 1340 0150                  		move.b	d0,$150(a1)
0001C1E8 1340 01D8                  		move.b	d0,$1D8(a1)
0001C1EC 1340 01E0                  		move.b	d0,$1E0(a1)
0001C1F0 1340 01E8                  		move.b	d0,$1E8(a1)
0001C1F4 1340 01F0                  		move.b	d0,$1F0(a1)
0001C1F8 1340 01F8                  		move.b	d0,$1F8(a1)
0001C1FC 1340 0200                  		move.b	d0,$200(a1)
0001C200 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001C204 6A00                       		bpl.s	loc_1B326
0001C206 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001C20C 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001C210 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001C216                            
0001C216                            loc_1B326:
0001C216 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001C21A 1340 0168                  		move.b	d0,$168(a1)
0001C21E 1340 0170                  		move.b	d0,$170(a1)
0001C222 1340 0178                  		move.b	d0,$178(a1)
0001C226 1340 0180                  		move.b	d0,$180(a1)
0001C22A 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001C22E 6A00                       		bpl.s	loc_1B350
0001C230 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001C236 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001C23A 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001C240                            
0001C240                            loc_1B350:
0001C240 43F9 00FF 4016             		lea	($FF4016).l,a1
0001C246 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001C24C 7000                       		moveq	#0,d0
0001C24E 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001C252 D040                       		add.w	d0,d0
0001C254 41F0 0000                  		lea	(a0,d0.w),a0
0001C258 3290                       		move.w	(a0),(a1)
0001C25A 3368 0002 0008             		move.w	2(a0),8(a1)
0001C260 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C266 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C26C 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C272 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C278 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C27E 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C284 D0FC 0020                  		adda.w	#$20,a0
0001C288 D2FC 0048                  		adda.w	#$48,a1
0001C28C 3290                       		move.w	(a0),(a1)
0001C28E 3368 0002 0008             		move.w	2(a0),8(a1)
0001C294 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C29A 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C2A0 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C2A6 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C2AC 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C2B2 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C2B8 D0FC 0020                  		adda.w	#$20,a0
0001C2BC D2FC 0048                  		adda.w	#$48,a1
0001C2C0 3290                       		move.w	(a0),(a1)
0001C2C2 3368 0002 0008             		move.w	2(a0),8(a1)
0001C2C8 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C2CE 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C2D4 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C2DA 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C2E0 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C2E6 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C2EC D0FC 0020                  		adda.w	#$20,a0
0001C2F0 D2FC 0048                  		adda.w	#$48,a1
0001C2F4 3290                       		move.w	(a0),(a1)
0001C2F6 3368 0002 0008             		move.w	2(a0),8(a1)
0001C2FC 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C302 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C308 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C30E 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C314 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C31A 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C320 D0FC 0020                  		adda.w	#$20,a0
0001C324 D2FC 0048                  		adda.w	#$48,a1
0001C328 4E75                       		rts	
0001C32A                            ; End of function SS_AniWallsRings
0001C32A                            
0001C32A                            ; ===========================================================================
0001C32A 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001C33A 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001C34A 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001C35A 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001C36A 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001C37A 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001C38A 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001C39A 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001C3AA                            ; ---------------------------------------------------------------------------
0001C3AA                            ; Subroutine to	remove items when you collect them in the special stage
0001C3AA                            ; ---------------------------------------------------------------------------
0001C3AA                            
0001C3AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C3AA                            
0001C3AA                            
0001C3AA                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001C3AA 45F9 00FF 4400             		lea	($FF4400).l,a2
0001C3B0 303C 001F                  		move.w	#$1F,d0
0001C3B4                            
0001C3B4                            loc_1B4C4:
0001C3B4 4A12                       		tst.b	(a2)
0001C3B6 6700                       		beq.s	locret_1B4CE
0001C3B8 504A                       		addq.w	#8,a2
0001C3BA 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001C3BE                            
0001C3BE                            locret_1B4CE:
0001C3BE 4E75                       		rts	
0001C3C0                            ; End of function SS_RemoveCollectedItem
0001C3C0                            
0001C3C0                            ; ---------------------------------------------------------------------------
0001C3C0                            ; Subroutine to	animate	special	stage items when you touch them
0001C3C0                            ; ---------------------------------------------------------------------------
0001C3C0                            
0001C3C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C3C0                            
0001C3C0                            
0001C3C0                            SS_AniItems:				; XREF: SS_ShowLayout
0001C3C0 41F9 00FF 4400             		lea	($FF4400).l,a0
0001C3C6 3E3C 001F                  		move.w	#$1F,d7
0001C3CA                            
0001C3CA                            loc_1B4DA:
0001C3CA 7000                       		moveq	#0,d0
0001C3CC 1010                       		move.b	(a0),d0
0001C3CE 6700                       		beq.s	loc_1B4E8
0001C3D0 E548                       		lsl.w	#2,d0
0001C3D2 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001C3D6 4E91                       		jsr	(a1)
0001C3D8                            
0001C3D8                            loc_1B4E8:
0001C3D8 5048                       		addq.w	#8,a0
0001C3DA                            
0001C3DA                            loc_1B4EA:
0001C3DA 51CF FFEE                  		dbf	d7,loc_1B4DA
0001C3DE                            
0001C3DE 4E75                       		rts	
0001C3E0                            ; End of function SS_AniItems
0001C3E0                            
0001C3E0                            ; ===========================================================================
0001C3E0 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001C3E4 0000 0000                  		dc.l SS_AniBumper
0001C3E8 0000 0000                  		dc.l SS_Ani1Up
0001C3EC 0000 0000                  		dc.l SS_AniReverse
0001C3F0 0000 0000                  		dc.l SS_AniEmeraldSparks
0001C3F4 0000 0000                  		dc.l SS_AniGlassBlock
0001C3F8                            ; ===========================================================================
0001C3F8                            
0001C3F8                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001C3F8 5328 0002                  		subq.b	#1,2(a0)
0001C3FC 6A00                       		bpl.s	locret_1B530
0001C3FE 117C 0005 0002             		move.b	#5,2(a0)
0001C404 7000                       		moveq	#0,d0
0001C406 1028 0003                  		move.b	3(a0),d0
0001C40A 5228 0003                  		addq.b	#1,3(a0)
0001C40E 2268 0004                  		movea.l	4(a0),a1
0001C412 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001C416 1280                       		move.b	d0,(a1)
0001C418 6600                       		bne.s	locret_1B530
0001C41A 4290                       		clr.l	(a0)
0001C41C 42A8 0004                  		clr.l	4(a0)
0001C420                            
0001C420                            locret_1B530:
0001C420 4E75                       		rts	
0001C422                            ; ===========================================================================
0001C422 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001C428                            ; ===========================================================================
0001C428                            
0001C428                            SS_AniBumper:				; XREF: SS_AniIndex
0001C428 5328 0002                  		subq.b	#1,2(a0)
0001C42C 6A00                       		bpl.s	locret_1B566
0001C42E 117C 0007 0002             		move.b	#7,2(a0)
0001C434 7000                       		moveq	#0,d0
0001C436 1028 0003                  		move.b	3(a0),d0
0001C43A 5228 0003                  		addq.b	#1,3(a0)
0001C43E 2268 0004                  		movea.l	4(a0),a1
0001C442 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001C446 6600                       		bne.s	loc_1B564
0001C448 4290                       		clr.l	(a0)
0001C44A 42A8 0004                  		clr.l	4(a0)
0001C44E 12BC 0025                  		move.b	#$25,(a1)
0001C452 4E75                       		rts	
0001C454                            ; ===========================================================================
0001C454                            
0001C454                            loc_1B564:
0001C454 1280                       		move.b	d0,(a1)
0001C456                            
0001C456                            locret_1B566:
0001C456 4E75                       		rts	
0001C458                            ; ===========================================================================
0001C458 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001C45E                            ; ===========================================================================
0001C45E                            
0001C45E                            SS_Ani1Up:				; XREF: SS_AniIndex
0001C45E 5328 0002                  		subq.b	#1,2(a0)
0001C462 6A00                       		bpl.s	locret_1B596
0001C464 117C 0005 0002             		move.b	#5,2(a0)
0001C46A 7000                       		moveq	#0,d0
0001C46C 1028 0003                  		move.b	3(a0),d0
0001C470 5228 0003                  		addq.b	#1,3(a0)
0001C474 2268 0004                  		movea.l	4(a0),a1
0001C478 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001C47C 1280                       		move.b	d0,(a1)
0001C47E 6600                       		bne.s	locret_1B596
0001C480 4290                       		clr.l	(a0)
0001C482 42A8 0004                  		clr.l	4(a0)
0001C486                            
0001C486                            locret_1B596:
0001C486 4E75                       		rts	
0001C488                            ; ===========================================================================
0001C488 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001C48E                            ; ===========================================================================
0001C48E                            
0001C48E                            SS_AniReverse:				; XREF: SS_AniIndex
0001C48E 5328 0002                  		subq.b	#1,2(a0)
0001C492 6A00                       		bpl.s	locret_1B5CC
0001C494 117C 0007 0002             		move.b	#7,2(a0)
0001C49A 7000                       		moveq	#0,d0
0001C49C 1028 0003                  		move.b	3(a0),d0
0001C4A0 5228 0003                  		addq.b	#1,3(a0)
0001C4A4 2268 0004                  		movea.l	4(a0),a1
0001C4A8 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001C4AC 6600                       		bne.s	loc_1B5CA
0001C4AE 4290                       		clr.l	(a0)
0001C4B0 42A8 0004                  		clr.l	4(a0)
0001C4B4 12BC 002B                  		move.b	#$2B,(a1)
0001C4B8 4E75                       		rts	
0001C4BA                            ; ===========================================================================
0001C4BA                            
0001C4BA                            loc_1B5CA:
0001C4BA 1280                       		move.b	d0,(a1)
0001C4BC                            
0001C4BC                            locret_1B5CC:
0001C4BC 4E75                       		rts	
0001C4BE                            ; ===========================================================================
0001C4BE 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001C4C4                            ; ===========================================================================
0001C4C4                            
0001C4C4                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001C4C4 5328 0002                  		subq.b	#1,2(a0)
0001C4C8 6A00                       		bpl.s	locret_1B60C
0001C4CA 117C 0005 0002             		move.b	#5,2(a0)
0001C4D0 7000                       		moveq	#0,d0
0001C4D2 1028 0003                  		move.b	3(a0),d0
0001C4D6 5228 0003                  		addq.b	#1,3(a0)
0001C4DA 2268 0004                  		movea.l	4(a0),a1
0001C4DE 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001C4E2 1280                       		move.b	d0,(a1)
0001C4E4 6600                       		bne.s	locret_1B60C
0001C4E6 4290                       		clr.l	(a0)
0001C4E8 42A8 0004                  		clr.l	4(a0)
0001C4EC 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001C4F2 303C 00A8                  		move.w	#$A8,d0
0001C4F6 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001C4FC                            
0001C4FC                            locret_1B60C:
0001C4FC 4E75                       		rts	
0001C4FE                            ; ===========================================================================
0001C4FE 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001C504                            ; ===========================================================================
0001C504                            
0001C504                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001C504 5328 0002                  		subq.b	#1,2(a0)
0001C508 6A00                       		bpl.s	locret_1B640
0001C50A 117C 0001 0002             		move.b	#1,2(a0)
0001C510 7000                       		moveq	#0,d0
0001C512 1028 0003                  		move.b	3(a0),d0
0001C516 5228 0003                  		addq.b	#1,3(a0)
0001C51A 2268 0004                  		movea.l	4(a0),a1
0001C51E 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001C522 1280                       		move.b	d0,(a1)
0001C524 6600                       		bne.s	locret_1B640
0001C526 12A8 0004                  		move.b	4(a0),(a1)
0001C52A 4290                       		clr.l	(a0)
0001C52C 42A8 0004                  		clr.l	4(a0)
0001C530                            
0001C530                            locret_1B640:
0001C530 4E75                       		rts	
0001C532                            ; ===========================================================================
0001C532 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001C53C                            ; ---------------------------------------------------------------------------
0001C53C                            ; Special stage	layout pointers
0001C53C                            ; ---------------------------------------------------------------------------
0001C53C                            SS_LayoutIndex:
0001C53C                            	include "_inc\Special stage layout pointers.asm"
0001C53C                            ; ---------------------------------------------------------------------------
0001C53C                            ; Special stage	layout pointers
0001C53C                            ; ---------------------------------------------------------------------------
0001C53C 0000 0000                  	dc.l SS_1
0001C540 0000 0000                  	dc.l SS_2
0001C544 0000 0000                  	dc.l SS_3
0001C548 0000 0000                  	dc.l SS_4
0001C54C 0000 0000                  	dc.l SS_5
0001C550 0000 0000                  	dc.l SS_6
0001C554                            	even
0001C554                            	even
0001C554                            
0001C554                            ; ---------------------------------------------------------------------------
0001C554                            ; Special stage	start locations
0001C554                            ; ---------------------------------------------------------------------------
0001C554                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001C56C                            		even
0001C56C                            
0001C56C                            ; ---------------------------------------------------------------------------
0001C56C                            ; Subroutine to	load special stage layout
0001C56C                            ; ---------------------------------------------------------------------------
0001C56C                            
0001C56C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C56C                            
0001C56C                            
0001C56C                            SS_Load:				; XREF: SpecialStage
0001C56C 7000                       		moveq	#0,d0
0001C56E 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001C572 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001C576 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001C57C 6500                       		bcs.s	SS_ChkEmldNum
0001C57E 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001C584                            
0001C584                            SS_ChkEmldNum:
0001C584 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001C58A 6700                       		beq.s	SS_LoadData	; if yes, branch
0001C58C 7200                       		moveq	#0,d1
0001C58E 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001C592 5301                       		subq.b	#1,d1
0001C594 6500                       		bcs.s	SS_LoadData
0001C596 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001C59A                            
0001C59A                            SS_ChkEmldLoop:	
0001C59A B033 1000                  		cmp.b	(a3,d1.w),d0
0001C59E 6600                       		bne.s	SS_ChkEmldRepeat
0001C5A0 60CA                       		bra.s	SS_Load
0001C5A2                            ; ===========================================================================
0001C5A2                            
0001C5A2                            SS_ChkEmldRepeat:
0001C5A2 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001C5A6                            
0001C5A6                            SS_LoadData:
0001C5A6 E548                       		lsl.w	#2,d0
0001C5A8 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001C5AC 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001C5B0 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001C5B4 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001C5B8 43F9 00FF 4000             		lea	($FF4000).l,a1
0001C5BE 303C 0000                  		move.w	#0,d0
0001C5C2 4EB9 0000 1968             		jsr	(EniDec).l
0001C5C8 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C5CE 303C 0FFF                  		move.w	#$FFF,d0
0001C5D2                            
0001C5D2                            SS_ClrRAM3:
0001C5D2 4299                       		clr.l	(a1)+
0001C5D4 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001C5D8                            
0001C5D8 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C5DE 41F9 00FF 4000             		lea	($FF4000).l,a0
0001C5E4 723F                       		moveq	#$3F,d1
0001C5E6                            
0001C5E6                            loc_1B6F6:
0001C5E6 743F                       		moveq	#$3F,d2
0001C5E8                            
0001C5E8                            loc_1B6F8:
0001C5E8 12D8                       		move.b	(a0)+,(a1)+
0001C5EA 51CA FFFC                  		dbf	d2,loc_1B6F8
0001C5EE                            
0001C5EE 43E9 0040                  		lea	$40(a1),a1
0001C5F2 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001C5F6                            
0001C5F6 43F9 00FF 4008             		lea	($FF4008).l,a1
0001C5FC 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001C602 724D                       		moveq	#$4D,d1
0001C604                            
0001C604                            loc_1B714:
0001C604 22D8                       		move.l	(a0)+,(a1)+
0001C606 32FC 0000                  		move.w	#0,(a1)+
0001C60A 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001C610 32D8                       		move.w	(a0)+,(a1)+
0001C612 51C9 FFF0                  		dbf	d1,loc_1B714
0001C616                            
0001C616 43F9 00FF 4400             		lea	($FF4400).l,a1
0001C61C 323C 003F                  		move.w	#$3F,d1
0001C620                            
0001C620                            loc_1B730:
0001C620                            
0001C620 4299                       		clr.l	(a1)+
0001C622 51C9 FFFC                  		dbf	d1,loc_1B730
0001C626                            
0001C626 4E75                       		rts	
0001C628                            ; End of function SS_Load
0001C628                            
0001C628                            ; ===========================================================================
0001C628                            ; ---------------------------------------------------------------------------
0001C628                            ; Special stage	mappings and VRAM pointers
0001C628                            ; ---------------------------------------------------------------------------
0001C628                            SS_MapIndex:
0001C628                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001C628                            ; ---------------------------------------------------------------------------
0001C628                            ; Special stage	mappings and VRAM pointers
0001C628                            ; ---------------------------------------------------------------------------
0001C628 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001C62C 0142                       	dc.w $142		; VRAM setting
0001C62E 0000 0000                  	dc.l Map_SSWalls
0001C632 0142                       	dc.w $142
0001C634 0000 0000                  	dc.l Map_SSWalls
0001C638 0142                       	dc.w $142
0001C63A 0000 0000                  	dc.l Map_SSWalls
0001C63E 0142                       	dc.w $142
0001C640 0000 0000                  	dc.l Map_SSWalls
0001C644 0142                       	dc.w $142
0001C646 0000 0000                  	dc.l Map_SSWalls
0001C64A 0142                       	dc.w $142
0001C64C 0000 0000                  	dc.l Map_SSWalls
0001C650 0142                       	dc.w $142
0001C652 0000 0000                  	dc.l Map_SSWalls
0001C656 0142                       	dc.w $142
0001C658 0000 0000                  	dc.l Map_SSWalls
0001C65C 0142                       	dc.w $142
0001C65E 0000 0000                  	dc.l Map_SSWalls
0001C662 2142                       	dc.w $2142
0001C664 0000 0000                  	dc.l Map_SSWalls
0001C668 2142                       	dc.w $2142
0001C66A 0000 0000                  	dc.l Map_SSWalls
0001C66E 2142                       	dc.w $2142
0001C670 0000 0000                  	dc.l Map_SSWalls
0001C674 2142                       	dc.w $2142
0001C676 0000 0000                  	dc.l Map_SSWalls
0001C67A 2142                       	dc.w $2142
0001C67C 0000 0000                  	dc.l Map_SSWalls
0001C680 2142                       	dc.w $2142
0001C682 0000 0000                  	dc.l Map_SSWalls
0001C686 2142                       	dc.w $2142
0001C688 0000 0000                  	dc.l Map_SSWalls
0001C68C 2142                       	dc.w $2142
0001C68E 0000 0000                  	dc.l Map_SSWalls
0001C692 2142                       	dc.w $2142
0001C694 0000 0000                  	dc.l Map_SSWalls
0001C698 4142                       	dc.w $4142
0001C69A 0000 0000                  	dc.l Map_SSWalls
0001C69E 4142                       	dc.w $4142
0001C6A0 0000 0000                  	dc.l Map_SSWalls
0001C6A4 4142                       	dc.w $4142
0001C6A6 0000 0000                  	dc.l Map_SSWalls
0001C6AA 4142                       	dc.w $4142
0001C6AC 0000 0000                  	dc.l Map_SSWalls
0001C6B0 4142                       	dc.w $4142
0001C6B2 0000 0000                  	dc.l Map_SSWalls
0001C6B6 4142                       	dc.w $4142
0001C6B8 0000 0000                  	dc.l Map_SSWalls
0001C6BC 4142                       	dc.w $4142
0001C6BE 0000 0000                  	dc.l Map_SSWalls
0001C6C2 4142                       	dc.w $4142
0001C6C4 0000 0000                  	dc.l Map_SSWalls
0001C6C8 4142                       	dc.w $4142
0001C6CA 0000 0000                  	dc.l Map_SSWalls
0001C6CE 6142                       	dc.w $6142
0001C6D0 0000 0000                  	dc.l Map_SSWalls
0001C6D4 6142                       	dc.w $6142
0001C6D6 0000 0000                  	dc.l Map_SSWalls
0001C6DA 6142                       	dc.w $6142
0001C6DC 0000 0000                  	dc.l Map_SSWalls
0001C6E0 6142                       	dc.w $6142
0001C6E2 0000 0000                  	dc.l Map_SSWalls
0001C6E6 6142                       	dc.w $6142
0001C6E8 0000 0000                  	dc.l Map_SSWalls
0001C6EC 6142                       	dc.w $6142
0001C6EE 0000 0000                  	dc.l Map_SSWalls
0001C6F2 6142                       	dc.w $6142
0001C6F4 0000 0000                  	dc.l Map_SSWalls
0001C6F8 6142                       	dc.w $6142
0001C6FA 0000 0000                  	dc.l Map_SSWalls
0001C6FE 6142                       	dc.w $6142
0001C700 0000 F790                  	dc.l Map_obj47
0001C704 023B                       	dc.w $23B
0001C706 0000 0000                  	dc.l Map_SS_R
0001C70A 0570                       	dc.w $570
0001C70C 0000 0000                  	dc.l Map_SS_R
0001C710 0251                       	dc.w $251
0001C712 0000 0000                  	dc.l Map_SS_R
0001C716 0370                       	dc.w $370
0001C718 0000 0000                  	dc.l Map_SS_Up
0001C71C 0263                       	dc.w $263
0001C71E 0000 0000                  	dc.l Map_SS_Down
0001C722 0263                       	dc.w $263
0001C724 0000 0000                  	dc.l Map_SS_R
0001C728 22F0                       	dc.w $22F0
0001C72A 0000 0000                  	dc.l Map_SS_Glass
0001C72E 0470                       	dc.w $470
0001C730 0000 0000                  	dc.l Map_SS_Glass
0001C734 05F0                       	dc.w $5F0
0001C736 0000 0000                  	dc.l Map_SS_Glass
0001C73A 65F0                       	dc.w $65F0
0001C73C 0000 0000                  	dc.l Map_SS_Glass
0001C740 25F0                       	dc.w $25F0
0001C742 0000 0000                  	dc.l Map_SS_Glass
0001C746 45F0                       	dc.w $45F0
0001C748 0000 0000                  	dc.l Map_SS_R
0001C74C 02F0                       	dc.w $2F0
0001C74E 0100 F790                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001C752 023B                       	dc.w $23B
0001C754 0200 F790                  	dc.l Map_obj47+$2000000
0001C758 023B                       	dc.w $23B
0001C75A 0000 0000                  	dc.l Map_SS_R
0001C75E 0797                       	dc.w $797
0001C760 0000 0000                  	dc.l Map_SS_R
0001C764 07A0                       	dc.w $7A0
0001C766 0000 0000                  	dc.l Map_SS_R
0001C76A 07A9                       	dc.w $7A9
0001C76C 0000 0000                  	dc.l Map_SS_R
0001C770 0797                       	dc.w $797
0001C772 0000 0000                  	dc.l Map_SS_R
0001C776 07A0                       	dc.w $7A0
0001C778 0000 0000                  	dc.l Map_SS_R
0001C77C 07A9                       	dc.w $7A9
0001C77E 0000 AA9C                  	dc.l Map_obj25
0001C782 27B2                       	dc.w $27B2
0001C784 0000 0000                  	dc.l Map_SS_Chaos3
0001C788 0770                       	dc.w $770
0001C78A 0000 0000                  	dc.l Map_SS_Chaos3
0001C78E 2770                       	dc.w $2770
0001C790 0000 0000                  	dc.l Map_SS_Chaos3
0001C794 4770                       	dc.w $4770
0001C796 0000 0000                  	dc.l Map_SS_Chaos3
0001C79A 6770                       	dc.w $6770
0001C79C 0000 0000                  	dc.l Map_SS_Chaos1
0001C7A0 0770                       	dc.w $770
0001C7A2 0000 0000                  	dc.l Map_SS_Chaos2
0001C7A6 0770                       	dc.w $770
0001C7A8 0000 0000                  	dc.l Map_SS_R
0001C7AC 04F0                       	dc.w $4F0
0001C7AE 0400 AA9C                  	dc.l Map_obj25+$4000000
0001C7B2 27B2                       	dc.w $27B2
0001C7B4 0500 AA9C                  	dc.l Map_obj25+$5000000
0001C7B8 27B2                       	dc.w $27B2
0001C7BA 0600 AA9C                  	dc.l Map_obj25+$6000000
0001C7BE 27B2                       	dc.w $27B2
0001C7C0 0700 AA9C                  	dc.l Map_obj25+$7000000
0001C7C4 27B2                       	dc.w $27B2
0001C7C6 0000 0000                  	dc.l Map_SS_Glass
0001C7CA 23F0                       	dc.w $23F0
0001C7CC 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001C7D0 23F0                       	dc.w $23F0
0001C7D2 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001C7D6 23F0                       	dc.w $23F0
0001C7D8 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001C7DC 23F0                       	dc.w $23F0
0001C7DE 0000 0000                  	dc.l Map_SS_R+$2000000
0001C7E2 04F0                       	dc.w $4F0
0001C7E4 0000 0000                  	dc.l Map_SS_Glass
0001C7E8 05F0                       	dc.w $5F0
0001C7EA 0000 0000                  	dc.l Map_SS_Glass
0001C7EE 65F0                       	dc.w $65F0
0001C7F0 0000 0000                  	dc.l Map_SS_Glass
0001C7F4 25F0                       	dc.w $25F0
0001C7F6 0000 0000                  	dc.l Map_SS_Glass
0001C7FA 45F0                       	dc.w $45F0
0001C7FA 45F0                       	dc.w $45F0
0001C7FC                            
0001C7FC                            ; ---------------------------------------------------------------------------
0001C7FC                            ; Sprite mappings - special stage "R" block
0001C7FC                            ; ---------------------------------------------------------------------------
0001C7FC                            Map_SS_R:
0001C7FC                            	include "_maps\SSRblock.asm"
0001C7FC                            ; ---------------------------------------------------------------------------
0001C7FC                            ; Sprite mappings - special stage "R" block
0001C7FC                            ; ---------------------------------------------------------------------------
0001C7FC 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001C800 0000                       		dc.w byte_1B91E-Map_SS_R
0001C802 01                         byte_1B912:	dc.b 1
0001C803 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C808 01                         byte_1B918:	dc.b 1
0001C809 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C80E 00                         byte_1B91E:	dc.b 0
0001C810 00                         		even
0001C810 00                         		even
0001C810                            
0001C810                            ; ---------------------------------------------------------------------------
0001C810                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C810                            ; ---------------------------------------------------------------------------
0001C810                            Map_SS_Glass:
0001C810                            	include "_maps\SSglassblock.asm"
0001C810                            ; ---------------------------------------------------------------------------
0001C810                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C810                            ; ---------------------------------------------------------------------------
0001C810 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001C814 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001C818 01                         byte_1B928:	dc.b 1
0001C819 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C81E 01                         byte_1B92E:	dc.b 1
0001C81F F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001C824 01                         byte_1B934:	dc.b 1
0001C825 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001C82A 01                         byte_1B93A:	dc.b 1
0001C82B F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001C830                            		even
0001C830                            		even
0001C830                            
0001C830                            ; ---------------------------------------------------------------------------
0001C830                            ; Sprite mappings - special stage "UP" block
0001C830                            ; ---------------------------------------------------------------------------
0001C830                            Map_SS_Up:
0001C830                            	include "_maps\SSUPblock.asm"
0001C830                            ; ---------------------------------------------------------------------------
0001C830                            ; Sprite mappings - special stage "UP" block
0001C830                            ; ---------------------------------------------------------------------------
0001C830 0000                       		dc.w byte_1B944-Map_SS_Up
0001C832 0000                       		dc.w byte_1B94A-Map_SS_Up
0001C834 01                         byte_1B944:	dc.b 1
0001C835 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C83A 01                         byte_1B94A:	dc.b 1
0001C83B F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C840                            		even
0001C840                            		even
0001C840                            
0001C840                            ; ---------------------------------------------------------------------------
0001C840                            ; Sprite mappings - special stage "DOWN" block
0001C840                            ; ---------------------------------------------------------------------------
0001C840                            Map_SS_Down:
0001C840                            	include "_maps\SSDOWNblock.asm"
0001C840                            ; ---------------------------------------------------------------------------
0001C840                            ; Sprite mappings - special stage "DOWN" block
0001C840                            ; ---------------------------------------------------------------------------
0001C840 0000                       		dc.w byte_1B954-Map_SS_Down
0001C842 0000                       		dc.w byte_1B95A-Map_SS_Down
0001C844 01                         byte_1B954:	dc.b 1
0001C845 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C84A 01                         byte_1B95A:	dc.b 1
0001C84B F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C850                            		even
0001C850                            		even
0001C850                            
0001C850                            ; ---------------------------------------------------------------------------
0001C850                            ; Sprite mappings - special stage chaos	emeralds
0001C850                            ; ---------------------------------------------------------------------------
0001C850 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001C852 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001C854 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001C856 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001C858 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001C85A 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001C85C 01                         byte_1B96C:	dc.b 1
0001C85D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001C862 01                         byte_1B972:	dc.b 1
0001C863 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001C868 01                         byte_1B978:	dc.b 1
0001C869 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001C86E 01                         byte_1B97E:	dc.b 1
0001C86F F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001C874                            		even
0001C874                            ; ===========================================================================
0001C874                            ; ---------------------------------------------------------------------------
0001C874                            ; Object 09 - Sonic (special stage)
0001C874                            ; ---------------------------------------------------------------------------
0001C874                            
0001C874                            Obj09:					; XREF: Obj_Index
0001C874                            ;		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001C874                            ;		beq.s	Obj09_Normal	; if not, branch
0001C874 6100 0000                  		bsr.w	SS_FixCamera
0001C878                            ;		bra.w	DebugMode
0001C878                            ; ===========================================================================
0001C878                            
0001C878                            Obj09_Normal:
0001C878 7000                       		moveq	#0,d0
0001C87A 1028 0024                  		move.b	$24(a0),d0
0001C87E 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001C882 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001C886                            ; ===========================================================================
0001C886 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001C888 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001C88A 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001C88C 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001C88E                            ; ===========================================================================
0001C88E                            
0001C88E                            Obj09_Main:				; XREF: Obj09_Index
0001C88E 5428 0024                  		addq.b	#2,$24(a0)
0001C892 117C 000E 0016             		move.b	#$E,$16(a0)
0001C898 117C 0007 0017             		move.b	#7,$17(a0)
0001C89E 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001C8A6 317C 0780 0002             		move.w	#$780,2(a0)
0001C8AC 117C 0004 0001             		move.b	#4,1(a0)
0001C8B2 117C 0000 0018             		move.b	#0,$18(a0)
0001C8B8 117C 0002 001C             		move.b	#2,$1C(a0)
0001C8BE 08E8 0002 0022             		bset	#2,$22(a0)
0001C8C4 08E8 0001 0022             		bset	#1,$22(a0)
0001C8CA                            
0001C8CA                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001C8CA                            ;		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001C8CA                            ;		beq.s	Obj09_NoDebug	; if not, branch
0001C8CA                            ;		btst	#4,($FFFFF605).w ; is button B pressed?
0001C8CA                            ;		beq.s	Obj09_NoDebug	; if not, branch
0001C8CA                            ;		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001C8CA                            
0001C8CA                            Obj09_NoDebug:
0001C8CA 117C 0000 0030             		move.b	#0,$30(a0)
0001C8D0 7000                       		moveq	#0,d0
0001C8D2 1028 0022                  		move.b	$22(a0),d0
0001C8D6 0240 0002                  		andi.w	#2,d0
0001C8DA 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001C8DE 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001C8E2 4EBA 808A                  		jsr	LoadSonicDynPLC
0001C8E6 4EF9 0000 E2A2             		jmp	DisplaySprite
0001C8EC                            ; ===========================================================================
0001C8EC 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001C8EE 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001C8F0                            ; ===========================================================================
0001C8F0                            
0001C8F0                            Obj09_OnWall:				; XREF: Obj09_Modes
0001C8F0 6100 0000                  		bsr.w	Obj09_Rise
0001C8F4 6100 0000                  		bsr.w	Obj09_Move
0001C8F8 6100 0000                  		bsr.w	Obj09_Fall
0001C8FC 6000                       		bra.s	Obj09_Display
0001C8FE                            ; ===========================================================================
0001C8FE                            
0001C8FE                            Obj09_InAir:				; XREF: Obj09_Modes
0001C8FE 6100 0000                  		bsr.w	Obj09_Rise
0001C902 6100 0000                  		bsr.w	Obj09_Move
0001C906 6100 0000                  		bsr.w	Obj09_Fall
0001C90A                            
0001C90A                            Obj09_Display:				; XREF: Obj09_OnWall
0001C90A 6100 0000                  		bsr.w	Obj09_ChkItems
0001C90E 6100 0000                  		bsr.w	Obj09_ChkItems2
0001C912 4EB9 0000 E268             		jsr	SpeedToPos
0001C918 6100 0000                  		bsr.w	SS_FixCamera
0001C91C 3038 F780                  		move.w	($FFFFF780).w,d0
0001C920 D078 F782                  		add.w	($FFFFF782).w,d0
0001C924 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C928 4EB9 0001 46C8             		jsr	Sonic_Animate
0001C92E 4E75                       		rts	
0001C930                            
0001C930                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C930                            
0001C930                            
0001C930                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001C930 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C936 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C938 4A78 F784                          tst.w   ($FFFFF784).w
0001C93C 6600                               bne.s   @corereverse1
0001C93E 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C942 6000                               bra.s   Obj09_ChkRight          
0001C944                            
0001C944                            @corereverse1:
0001C944 6100 0000                          bsr.w	Obj09_MoveRight
0001C948                            
0001C948                            Obj09_ChkRight:
0001C948 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C94E 6700                       		beq.s	Obj09_MoveSpeed	; if not, branch
0001C950 4A78 F784                          tst.w   ($FFFFF784).w
0001C954 6600                               bne.s   @corereverse2
0001C956 6100 0000                  		bsr.w	Obj09_MoveRight
0001C95A 6000                               bra.s   Obj09_MoveSpeed 
0001C95C                            
0001C95C                            @corereverse2:
0001C95C 6100 0000                  		bsr.w	Obj09_MoveLeft			;	branch to right movement subroutine
0001C960                            
0001C960                            Obj09_MoveSpeed:
0001C960 1038 F602                  		move.b	($FFFFF602).w,d0
0001C964 0200 000C                  		andi.b	#$C,d0
0001C968 6600                       		bne.s	Obj09_MoveCollision
0001C96A 3028 0010                  		move.w	$10(a0),d0
0001C96E 6700                       		beq.s	Obj09_MoveCollision
0001C970 317C 0000 0010             		move.w	#0,$10(a0)
0001C976                            
0001C976                            Obj09_MoveCollision:
0001C976 1038 F780                  		move.b	($FFFFF780).w,d0
0001C97A 0600 0020                  		addi.b	#$20,d0
0001C97E 0200 00C0                  		andi.b	#$C0,d0
0001C982 4400                       		neg.b	d0
0001C984 4EB9 0000 2D80             		jsr	(CalcSine).l
0001C98A C3E8 0010                  		muls.w	$10(a0),d1
0001C98E D3A8 0008                  		add.l	d1,8(a0)
0001C992 C1E8 0012                  		muls.w	$12(a0),d0
0001C996 D1A8 000C                  		add.l	d0,$C(a0)
0001C99A 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C99E 2428 000C                  		move.l	$C(a0),d2
0001C9A2 2628 0008                  		move.l	8(a0),d3
0001C9A6 6100 0000                  		bsr.w	sub_1BCE8
0001C9AA 6700                       		beq.s	loc_1BAF2
0001C9AC 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C9B0 93A8 0008                  		sub.l	d1,8(a0)
0001C9B4 91A8 000C                  		sub.l	d0,$C(a0)
0001C9B8 317C 0000 0010             		move.w	#0,$10(a0)
0001C9BE 4E75                       		rts	
0001C9C0                            ; ===========================================================================
0001C9C0                            
0001C9C0                            loc_1BAF2:
0001C9C0 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C9C4 4E75                       		rts	
0001C9C6                            ; End of function Obj09_Move
0001C9C6                            
0001C9C6                            
0001C9C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C9C6                            
0001C9C6                            
0001C9C6                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001C9C6 08E8 0000 0022             		bset	#0,$22(a0)
0001C9CC 4240                               clr.w   d0
0001C9CE 3038 F786                          move.w  ($FFFFF786).w,d0
0001C9D2 D040                               add.w   d0,d0
0001C9D4 317B 0000 0010                     move.w	SS_XSpdIndex(pc,d0.w),$10(a0)
0001C9DA 4468 0010                          neg.w   $10(a0)
0001C9DE 4E75                               rts
0001C9E0                            
0001C9E0                            ; End of function Obj09_MoveLeft
0001C9E0                            
0001C9E0                            
0001C9E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C9E0                            
0001C9E0                            
0001C9E0                            Obj09_MoveRight:
0001C9E0 08A8 0000 0022             		bclr	#0,$22(a0)
0001C9E6 4240                               clr.w   d0
0001C9E8 3038 F786                          move.w  ($FFFFF786).w,d0
0001C9EC D040                               add.w   d0,d0
0001C9EE 317B 0000 0010                     move.w	SS_XSpdIndex(pc,d0.w),$10(a0)
0001C9F4 4E75                       		rts
0001C9F6                            
0001C9F6                            ; End of function Obj09_MoveRight
0001C9F6                            
0001C9F6                            ; ---------------------------------------------------------------------------
0001C9F6                            
0001C9F6                            SS_XSpdIndex:
0001C9F6 0032                       		dc.w 50
0001C9F8 0064                       		dc.w 100
0001C9FA 0096                       		dc.w 150
0001C9FC 00C8                       		dc.w 200
0001C9FE 00FA                       		dc.w 250
0001CA00                            
0001CA00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA00                            
0001CA00                            
0001CA00                            Obj09_Rise:				; XREF: Obj09_OnWall
0001CA00 0838 0000 F602             		btst	#0,($FFFFF602).w
0001CA06 6700                       		beq.s	Obj09_NoRise	; if not, branch
0001CA08 4A78 F784                          tst.w   ($FFFFF784).w
0001CA0C 6600 0000                          bne.w   @corereverse1
0001CA10 6100 0000                  		bsr.w	Obj09_MoveUp
0001CA14 6000                               bra.s   Obj09_NoRise
0001CA16                            
0001CA16                            @corereverse1:
0001CA16 6100 0000                  		bsr.w	Obj09_Falling 
0001CA1A                                    
0001CA1A                            Obj09_NoRise:
0001CA1A 0838 0001 F602             		btst	#1,($FFFFF602).w	;	is Dn Pressed?
0001CA20 6700                       		beq.s	Obj09_MoveYSpeed		;	
0001CA22 4A78 F784                          tst.w   ($FFFFF784).w
0001CA26 6600 0000                          bne.w   @corereverse2
0001CA2A 6100 0000                  		bsr.w	Obj09_Falling			;	
0001CA2E 6000                               bra.s   Obj09_MoveYSpeed
0001CA30                            
0001CA30                            @corereverse2:
0001CA30 6100 0000                  		bsr.w	Obj09_MoveUp
0001CA34                            		
0001CA34                            Obj09_MoveYSpeed:
0001CA34 1038 F602                  		move.b	($FFFFF602).w,d0
0001CA38 0200 0003                  		andi.b	#3,d0
0001CA3C 6600                       		bne.s	Obj09_MoveYCollision
0001CA3E 3028 0012                  		move.w	$12(a0),d0
0001CA42 6700                       		beq.s	Obj09_MoveYCollision
0001CA44 317C 0000 0012             		move.w	#0,$12(a0)
0001CA4A                            
0001CA4A                            Obj09_MoveYCollision:		;	CODE TO CHECK STAGE COLLISION ON X-AXIS
0001CA4A 1038 F780                  		move.b	($FFFFF780).w,d0		;	check the Special Stage Angle
0001CA4E 0600 0020                  		addi.b	#$20,d0					;	?
0001CA52 0200 00C0                  		andi.b	#$C0,d0					;	
0001CA56 4400                       		neg.b	d0						;	?
0001CA58 4EB9 0000 2D80             		jsr	(CalcSine).l				;	load speed trajectory algorithms
0001CA5E C3E8 0010                  		muls.w	$10(a0),d1			;	calculate x-speed trajectory
0001CA62 D3A8 0008                  		add.l	d1,8(a0)				;	calculate Sonic's next x position
0001CA66 C1E8 0012                  		muls.w	$12(a0),d0			;	calculate y-speed trajectory
0001CA6A D1A8 000C                  		add.l	d0,$C(a0)				;	calculate Sonic's next y position
0001CA6E 48E7 C000                  		movem.l	d0-d1,-(sp)				;	save trajectory values
0001CA72 2428 000C                  		move.l	$C(a0),d2				;	move sonic's next y-position into d2
0001CA76 2628 0008                  		move.l	8(a0),d3				;	move sonic's next x-position into d3
0001CA7A 6100 0000                  		bsr.w	sub_1BCE8				;	branch to the collision detection routine
0001CA7E 6700 FF40                  		beq.w	loc_1BAF2				;	if Sonic's not colliding with anything branch
0001CA82 4CDF 0003                  		movem.l	(sp)+,d0-d1				;	remove x and y speed trajectory from the stack
0001CA86 93A8 0008                  		sub.l	d1,8(a0)				;	cancel out Sonic's next x-position
0001CA8A 91A8 000C                  		sub.l	d0,$C(a0)				;	cancel out Sonic's next y-position
0001CA8E 317C 0000 0012             		move.w	#0,$12(a0)           ;	Make Sonic Stop
0001CA94 4E75                       		rts								;	end routine
0001CA96                            
0001CA96                            Obj09_MoveUp:
0001CA96 4240                               clr.w   d0
0001CA98 3038 F786                          move.w  ($FFFFF786).w,d0
0001CA9C D040                               add.w   d0,d0
0001CA9E 317B 0000 0012                     move.w	SS_YSpdIndex(pc,d0.w),$12(a0)
0001CAA4 4468 0012                          neg.w   $12(a0)
0001CAA8 4E75                               rts
0001CAAA                            
0001CAAA                            Obj09_Falling:
0001CAAA 4240                               clr.w   d0
0001CAAC 3038 F786                          move.w  ($FFFFF786).w,d0
0001CAB0 D040                               add.w   d0,d0
0001CAB2 317B 0000 0012                     move.w	SS_YSpdIndex(pc,d0.w),$12(a0)
0001CAB8 4E75                       		rts
0001CABA                            ; End of function Obj09_Jump
0001CABA                            
0001CABA                            ; ---------------------------------------------------------------------------
0001CABA                            SS_YSpdIndex:
0001CABA 0080                       		dc.w $80
0001CABC 0100                       		dc.w $100
0001CABE 0180                       		dc.w $180
0001CAC0 0200                       		dc.w $200
0001CAC2 0280                       		dc.w $280
0001CAC4                            
0001CAC4                            
0001CAC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CAC4                            
0001CAC4                            
0001CAC4                            nullsub_2:				; XREF: Obj09_InAir
0001CAC4 4E75                       		rts	
0001CAC6                            ; End of function nullsub_2
0001CAC6                            
0001CAC6                            ; ===========================================================================
0001CAC6                            ; ---------------------------------------------------------------------------
0001CAC6                            ; unused subroutine to limit Sonic's upward vertical speed
0001CAC6                            ; ---------------------------------------------------------------------------
0001CAC6 323C FC00                  		move.w	#-$400,d1
0001CACA B268 0012                  		cmp.w	$12(a0),d1
0001CACE 6F00                       		ble.s	locret_1BBB4
0001CAD0 1038 F602                  		move.b	($FFFFF602).w,d0
0001CAD4 0200 0070                  		andi.b	#$70,d0
0001CAD8 6600                       		bne.s	locret_1BBB4
0001CADA 3141 0012                  		move.w	d1,$12(a0)
0001CADE                            
0001CADE                            locret_1BBB4:
0001CADE 4E75                       		rts	
0001CAE0                            ; ---------------------------------------------------------------------------
0001CAE0                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001CAE0                            ; ---------------------------------------------------------------------------
0001CAE0                            
0001CAE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CAE0                            
0001CAE0                            
0001CAE0                            SS_FixCamera:				; XREF: Obj09
0001CAE0 3428 000C                  		move.w	$C(a0),d2
0001CAE4 3628 0008                  		move.w	8(a0),d3
0001CAE8 3038 F700                  		move.w	($FFFFF700).w,d0
0001CAEC 0443 00A0                  		subi.w	#$A0,d3
0001CAF0 6500                       		bcs.s	loc_1BBCE
0001CAF2 9043                       		sub.w	d3,d0
0001CAF4 9178 F700                  		sub.w	d0,($FFFFF700).w
0001CAF8                            
0001CAF8                            loc_1BBCE:
0001CAF8 3038 F704                  		move.w	($FFFFF704).w,d0
0001CAFC 0442 0070                  		subi.w	#$70,d2
0001CB00 6500                       		bcs.s	locret_1BBDE
0001CB02 9042                       		sub.w	d2,d0
0001CB04 9178 F704                  		sub.w	d0,($FFFFF704).w
0001CB08                            
0001CB08                            locret_1BBDE:
0001CB08 4E75                       		rts	
0001CB0A                            ; End of function SS_FixCamera
0001CB0A                            
0001CB0A                            ; ===========================================================================
0001CB0A                            
0001CB0A                            Obj09_ExitStage:			; XREF: Obj09_Index
0001CB0A 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001CB10 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001CB16 6600                       		bne.s	loc_1BBF4
0001CB18 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001CB1E                            
0001CB1E                            loc_1BBF4:
0001CB1E 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001CB24 6D00                       		blt.s	loc_1BC12
0001CB26 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001CB2C                            ;		move.w	#$4000,($FFFFF780).w
0001CB2C 5428 0024                  		addq.b	#2,$24(a0)
0001CB30 317C 003C 0038             		move.w	#$3C,$38(a0)
0001CB36                            
0001CB36                            loc_1BC12:
0001CB36                            ;		move.w	($FFFFF780).w,d0
0001CB36                            ;		add.w	($FFFFF782).w,d0
0001CB36                            ;		move.w	d0,($FFFFF780).w
0001CB36 4EB9 0001 46C8             		jsr	Sonic_Animate
0001CB3C 4EB9 0001 496E             		jsr	LoadSonicDynPLC
0001CB42 6100 FF9C                  		bsr.w	SS_FixCamera
0001CB46 4EF9 0000 E2A2             		jmp	DisplaySprite
0001CB4C                            ; ===========================================================================
0001CB4C                            
0001CB4C                            Obj09_Exit2:				; XREF: Obj09_Index
0001CB4C 5368 0038                  		subq.w	#1,$38(a0)
0001CB50 6600                       		bne.s	loc_1BC40
0001CB52 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001CB58                            
0001CB58                            loc_1BC40:
0001CB58 4EB9 0001 46C8             		jsr	Sonic_Animate
0001CB5E 4EB9 0001 496E             		jsr	LoadSonicDynPLC
0001CB64 6100 FF7A                  		bsr.w	SS_FixCamera
0001CB68 4EF9 0000 E2A2             		jmp	DisplaySprite
0001CB6E                            
0001CB6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CB6E                            
0001CB6E                            
0001CB6E                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001CB6E 2428 000C                  		move.l	$C(a0),d2
0001CB72 2628 0008                  		move.l	8(a0),d3
0001CB76 1038 F780                  		move.b	($FFFFF780).w,d0
0001CB7A 0200 00FC                  		andi.b	#$FC,d0
0001CB7E 4EB9 0000 2D80             		jsr	(CalcSine).l
0001CB84 3828 0010                  		move.w	$10(a0),d4
0001CB88 48C4                       		ext.l	d4
0001CB8A E184                       		asl.l	#8,d4
0001CB8C C1FC 002A                  		muls.w	#$2A,d0
0001CB90 D084                       		add.l	d4,d0
0001CB92 3828 0012                  		move.w	$12(a0),d4
0001CB96 48C4                       		ext.l	d4
0001CB98 E184                       		asl.l	#8,d4
0001CB9A C3FC 002A                  		muls.w	#$2A,d1
0001CB9E D284                       		add.l	d4,d1
0001CBA0 7A00                       		moveq	#0,d5
0001CBA2 3A28 0010                  		move.w	$10(a0),d5
0001CBA6 6700                       		beq.s	Obj09_NoXFall
0001CBA8 D680                       		add.l	d0,d3
0001CBAA 6100 0000                  		bsr.w	sub_1BCE8
0001CBAE 6700                       		beq.s	loc_1BCB0
0001CBB0 9680                       		sub.l	d0,d3
0001CBB2 7000                       		moveq	#0,d0
0001CBB4 3140 0010                  		move.w	d0,$10(a0)
0001CBB8 08A8 0001 0022             		bclr	#1,$22(a0)
0001CBBE                            
0001CBBE                            Obj09_NoXFall
0001CBBE 7C00                       		moveq	#0,d6
0001CBC0 3C28 0012                  		move.w	$12(a0),d6
0001CBC4 6700                       		beq.s	Obj09_NoYFall
0001CBC6 D481                       		add.l	d1,d2
0001CBC8 6100 0000                  		bsr.w	sub_1BCE8
0001CBCC 6700                       		beq.s	loc_1BCC6
0001CBCE 9481                       		sub.l	d1,d2
0001CBD0 7200                       		moveq	#0,d1
0001CBD2 3141 0012                  		move.w	d1,$12(a0)
0001CBD6 4E75                       		rts	
0001CBD8                            ; ===========================================================================
0001CBD8                            
0001CBD8                            loc_1BCB0:
0001CBD8 7C00                       		moveq	#0,d6
0001CBDA 3C28 0012                  		move.w	$12(a0),d6
0001CBDE 6700                       		beq.s	Obj09_NoYFall
0001CBE0 D481                       		add.l	d1,d2
0001CBE2 6100 0000                  		bsr.w	sub_1BCE8
0001CBE6 6700                       		beq.s	loc_1BCD4
0001CBE8 9481                       		sub.l	d1,d2
0001CBEA 7200                       		moveq	#0,d1
0001CBEC 3141 0012                  		move.w	d1,$12(a0)
0001CBF0 08A8 0001 0022             		bclr	#1,$22(a0)
0001CBF6                            
0001CBF6                            loc_1BCC6:
0001CBF6 E080                       		asr.l	#8,d0
0001CBF8 E081                       		asr.l	#8,d1
0001CBFA 3140 0010                  		move.w	d0,$10(a0)
0001CBFE 3141 0012                  		move.w	d1,$12(a0)
0001CC02 4E75                       		rts	
0001CC04                            ; ===========================================================================
0001CC04                            
0001CC04                            loc_1BCD4:
0001CC04 E080                       		asr.l	#8,d0
0001CC06 E081                       		asr.l	#8,d1
0001CC08 3140 0010                  		move.w	d0,$10(a0)
0001CC0C 3141 0012                  		move.w	d1,$12(a0)
0001CC10 08E8 0001 0022             		bset	#1,$22(a0)
0001CC16 4E75                       		rts	
0001CC18                            
0001CC18                            Obj09_NoYFall:
0001CC18 4E75                       		rts
0001CC1A                            ; End of function Obj09_Fall
0001CC1A                            
0001CC1A                            
0001CC1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC1A                            
0001CC1A                            
0001CC1A                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001CC1A 43F9 00FF 0000             		lea	($FF0000).l,a1
0001CC20 7800                       		moveq	#0,d4
0001CC22 4842                       		swap	d2
0001CC24 3802                       		move.w	d2,d4
0001CC26 4842                       		swap	d2
0001CC28 0644 0044                  		addi.w	#$44,d4
0001CC2C 88FC 0018                  		divu.w	#$18,d4
0001CC30 C8FC 0080                  		mulu.w	#$80,d4
0001CC34 D3C4                       		adda.l	d4,a1
0001CC36 7800                       		moveq	#0,d4
0001CC38 4843                       		swap	d3
0001CC3A 3803                       		move.w	d3,d4
0001CC3C 4843                       		swap	d3
0001CC3E 0644 0014                  		addi.w	#$14,d4
0001CC42 88FC 0018                  		divu.w	#$18,d4
0001CC46 D2C4                       		adda.w	d4,a1
0001CC48 7A00                       		moveq	#0,d5
0001CC4A 1819                       		move.b	(a1)+,d4
0001CC4C 6100                       		bsr.s	sub_1BD30
0001CC4E 1819                       		move.b	(a1)+,d4
0001CC50 6100                       		bsr.s	sub_1BD30
0001CC52 D2FC 007E                  		adda.w	#$7E,a1
0001CC56 1819                       		move.b	(a1)+,d4
0001CC58 6100                       		bsr.s	sub_1BD30
0001CC5A 1819                       		move.b	(a1)+,d4
0001CC5C 6100                       		bsr.s	sub_1BD30
0001CC5E 4A05                       		tst.b	d5
0001CC60 4E75                       		rts	
0001CC62                            ; End of function sub_1BCE8
0001CC62                            
0001CC62                            
0001CC62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC62                            
0001CC62                            
0001CC62                            sub_1BD30:				; XREF: sub_1BCE8
0001CC62 6700                       		beq.s	locret_1BD44
0001CC64 0C04 0028                  		cmpi.b	#$28,d4
0001CC68 6500                       		blo.s	loc_1BD46
0001CC6A 0C04 004B                  		cmpi.b	#$4B,d4
0001CC6E 6400                       		bhs.s	loc_1BD46
0001CC70 0C04 003A                  		cmpi.b	#$3A,d4
0001CC74 6400                       		bhs.s	locret_1BD44
0001CC76 0C04 002C                  		cmpi.b	#$2C,d4
0001CC7A 6400                       		bhs.s	loc_1BD46
0001CC7C                            
0001CC7C                            locret_1BD44:
0001CC7C 4E75                       		rts	
0001CC7E                            ; ===========================================================================
0001CC7E                            
0001CC7E                            loc_1BD46:
0001CC7E 1144 0030                  		move.b	d4,$30(a0)
0001CC82 2149 0032                  		move.l	a1,$32(a0)
0001CC86 7AFF                       		moveq	#-1,d5
0001CC88 4E75                       		rts	
0001CC8A                            ; End of function sub_1BD30
0001CC8A                            
0001CC8A                            
0001CC8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC8A                            
0001CC8A                            
0001CC8A                            Obj09_ChkItems:				; XREF: Obj09_Display
0001CC8A 43F9 00FF 0000             		lea	($FF0000).l,a1
0001CC90 7800                       		moveq	#0,d4
0001CC92 3828 000C                  		move.w	$C(a0),d4
0001CC96 0644 0050                  		addi.w	#$50,d4
0001CC9A 88FC 0018                  		divu.w	#$18,d4
0001CC9E C8FC 0080                  		mulu.w	#$80,d4
0001CCA2 D3C4                       		adda.l	d4,a1
0001CCA4 7800                       		moveq	#0,d4
0001CCA6 3828 0008                  		move.w	8(a0),d4
0001CCAA 0644 0020                  		addi.w	#$20,d4
0001CCAE 88FC 0018                  		divu.w	#$18,d4
0001CCB2 D2C4                       		adda.w	d4,a1
0001CCB4 1811                       		move.b	(a1),d4
0001CCB6 6600                       		bne.s	Obj09_ChkCont
0001CCB8 4A28 003A                  		tst.b	$3A(a0)
0001CCBC 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001CCC0 7800                       		moveq	#0,d4
0001CCC2 4E75                       		rts	
0001CCC4                            ; ===========================================================================
0001CCC4                            
0001CCC4                            Obj09_ChkCont:
0001CCC4 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001CCC8 6600                       		bne.s	Obj09_Chk1Up
0001CCCA 6100 F6DE                  		bsr.w	SS_RemoveCollectedItem
0001CCCE 6600                       		bne.s	Obj09_GetCont
0001CCD0 14BC 0001                  		move.b	#1,(a2)
0001CCD4 2549 0004                  		move.l	a1,4(a2)
0001CCD8                            
0001CCD8                            Obj09_GetCont:
0001CCD8 4EB9 0000 A782             		jsr	CollectRing
0001CCDE 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001CCE4 6500                       		bcs.s	Obj09_NoCont
0001CCE6 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001CCEC 6600                       		bne.s	Obj09_NoCont
0001CCEE 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001CCF2 303C 00BF                  		move.w	#$BF,d0
0001CCF6 4EB9 0000 15E0             		jsr	(PlaySound).l	; play extra continue sound
0001CCFC                            
0001CCFC                            Obj09_NoCont:
0001CCFC 7800                       		moveq	#0,d4
0001CCFE 4E75                       		rts	
0001CD00                            ; ===========================================================================
0001CD00                            
0001CD00                            Obj09_Chk1Up:
0001CD00 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001CD04 6600                       		bne.s	Obj09_ChkEmer
0001CD06 6100 F6A2                  		bsr.w	SS_RemoveCollectedItem
0001CD0A 6600                       		bne.s	Obj09_Get1Up
0001CD0C 14BC 0003                  		move.b	#3,(a2)
0001CD10 2549 0004                  		move.l	a1,4(a2)
0001CD14                            
0001CD14                            Obj09_Get1Up:
0001CD14 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001CD18 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001CD1C 303C 0088                  		move.w	#$88,d0
0001CD20 4EB9 0000 15E0             		jsr	(PlaySound).l	; play extra life music
0001CD26 7800                       		moveq	#0,d4
0001CD28 4E75                       		rts	
0001CD2A                            ; ===========================================================================
0001CD2A                            
0001CD2A                            Obj09_ChkEmer:
0001CD2A 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001CD2E 6500                       		bcs.s	Obj09_UPblock
0001CD30 0C04 0040                  		cmpi.b	#$40,d4
0001CD34 6200                       		bhi.s	Obj09_UPblock
0001CD36 6100 F672                  		bsr.w	SS_RemoveCollectedItem
0001CD3A 6600                       		bne.s	Obj09_GetEmer
0001CD3C 14BC 0005                  		move.b	#5,(a2)
0001CD40 2549 0004                  		move.l	a1,4(a2)
0001CD44                            
0001CD44                            Obj09_GetEmer:
0001CD44 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001CD4A 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001CD4C 0404 003B                  		subi.b	#$3B,d4
0001CD50 7000                       		moveq	#0,d0
0001CD52 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001CD56 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001CD5A 1584 0000                  		move.b	d4,(a2,d0.w)
0001CD5E 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001CD62                            
0001CD62                            Obj09_NoEmer:
0001CD62 303C 0093                  		move.w	#$93,d0
0001CD66 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play emerald music
0001CD6C 7800                       		moveq	#0,d4
0001CD6E 4E75                       		rts	
0001CD70                            
0001CD70                            ; ===========================================================================
0001CD70                            
0001CD70                            Obj09_UPblock:
0001CD70 0C04 0029                  		cmpi.b	#$29,d4		; is the item an "UP" block?
0001CD74 6600                       		bne.s	Obj09_DOWNblock
0001CD76 6100 F632                  		bsr.w	SS_RemoveCollectedItem
0001CD7A 6600                       		bne.s	Obj09_SpeedUp
0001CD7C 14BC 0001                  		move.b	#1,(a2)
0001CD80 2549 0004                  		move.l	a1,4(a2)
0001CD84                            
0001CD84                            Obj09_SpeedUp:
0001CD84 0C78 0004 F786             		cmpi.w	#4,($FFFFF786).w
0001CD8A 6400                       		bhs.s	Obj09_UPsnd
0001CD8C 5278 F786                  		addi.w	#1,($FFFFF786).w	; increase stage rotation speed
0001CD90                            
0001CD90                            Obj09_UPsnd:
0001CD90 303C 00A9                  		move.w	#$A9,d0
0001CD94 4EB9 0000 15E6             		jsr	(PlaySound_Special).l	; play up/down sound
0001CD9A 7800                       		moveq	#0,d4
0001CD9C 4E75                       		rts	
0001CD9E                            ; ===========================================================================
0001CD9E                            
0001CD9E                            Obj09_DOWNblock:
0001CD9E 0C04 002A                  		cmpi.b	#$2A,d4		; is the item a	"DOWN" block?
0001CDA2 6600                       		bne.s	Obj09_Rblock
0001CDA4 6100 F604                  		bsr.w	SS_RemoveCollectedItem
0001CDA8 6600                       		bne.s	Obj09_SpeedDown
0001CDAA 14BC 0001                  		move.b	#1,(a2)
0001CDAE 2549 0004                  		move.l	a1,4(a2)
0001CDB2                            
0001CDB2                            Obj09_SpeedDown:
0001CDB2 4A78 F786                  		tst.w 	($FFFFF786).w
0001CDB6 6700                       		beq.s	Obj09_DOWNsnd
0001CDB8 5378 F786                  		subi.w	#1,($FFFFF786).w	; reduce stage rotation speed
0001CDBC                            
0001CDBC                            Obj09_DOWNsnd:
0001CDBC 303C 00A9                  		move.w	#$A9,d0
0001CDC0 4EB9 0000 15E6             		jsr	(PlaySound_Special).l	; play up/down sound
0001CDC6 7800                       		moveq	#0,d4
0001CDC8 4E75                       		rts	
0001CDCA                            ; ===========================================================================
0001CDCA                            
0001CDCA                            Obj09_Rblock:
0001CDCA 0C04 002B                  		cmpi.b	#$2B,d4		; is the item an "R" block?
0001CDCE 6600                       		bne.s	Obj09_ChkGhost
0001CDD0 6100 F5D8                  		bsr.w	SS_RemoveCollectedItem
0001CDD4 6600                       		bne.s	Obj09_RevStage
0001CDD6 14BC 0001                  		move.b	#1,(a2)
0001CDDA 2549 0004                  		move.l	a1,4(a2)
0001CDDE                            
0001CDDE                            Obj09_RevStage:
0001CDDE 31FC 012C F784                     move.w  #300,($FFFFF784).w
0001CDE4 103C 00A9                  		move.b	#$A9,d0
0001CDE8 4EB9 0000 15E6             		jsr	(PlaySound_Special).l	; play sound
0001CDEE 7800                       		moveq	#0,d4
0001CDF0 4E75                       		rts	
0001CDF2                            
0001CDF2                            ; ===========================================================================
0001CDF2                            
0001CDF2                            Obj09_ChkGhost:
0001CDF2 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001CDF6 6600                       		bne.s	Obj09_ChkGhostTag
0001CDF8 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001CDFE                            
0001CDFE                            Obj09_ChkGhostTag:
0001CDFE 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001CE02 6600                       		bne.s	Obj09_NoGhost
0001CE04 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001CE0A 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001CE0C 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001CE12                            
0001CE12                            Obj09_NoGhost:
0001CE12 78FF                       		moveq	#-1,d4
0001CE14 4E75                       		rts	
0001CE16                            ; ===========================================================================
0001CE16                            
0001CE16                            Obj09_MakeGhostSolid:
0001CE16 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001CE1C 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001CE1E 43F9 00FF 1020             		lea	($FF1020).l,a1
0001CE24 723F                       		moveq	#$3F,d1
0001CE26                            
0001CE26                            Obj09_GhostLoop2:
0001CE26 743F                       		moveq	#$3F,d2
0001CE28                            
0001CE28                            Obj09_GhostLoop:
0001CE28 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001CE2C 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001CE2E 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001CE32                            
0001CE32                            Obj09_NoReplace:
0001CE32 5249                       		addq.w	#1,a1
0001CE34 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001CE38 43E9 0040                  		lea	$40(a1),a1
0001CE3C 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001CE40                            
0001CE40                            Obj09_GhostNotSolid:
0001CE40 4228 003A                  		clr.b	$3A(a0)
0001CE44 7800                       		moveq	#0,d4
0001CE46 4E75                       		rts	
0001CE48                            ; End of function Obj09_ChkItems
0001CE48                            
0001CE48                            
0001CE48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE48                            
0001CE48                            
0001CE48                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001CE48 1028 0030                  		move.b	$30(a0),d0
0001CE4C 6600                       		bne.s	Obj09_GOAL
0001CE4E 5328 0036                  		subq.b	#1,$36(a0)
0001CE52 6A00                       		bpl.s	loc_1BEA0
0001CE54 117C 0000 0036             		move.b	#0,$36(a0)
0001CE5A                            
0001CE5A                            loc_1BEA0:
0001CE5A 5328 0037                  		subq.b	#1,$37(a0)
0001CE5E 6A00                       		bpl.s	locret_1BEAC
0001CE60 117C 0000 0037             		move.b	#0,$37(a0)
0001CE66                            
0001CE66                            locret_1BEAC:
0001CE66 4E75                       		rts	
0001CE68                            ; ===========================================================================
0001CE68                            
0001CE68                            ; ===========================================================================
0001CE68                            
0001CE68                            Obj09_GOAL:
0001CE68 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001CE6C 6600                       		bne.s	Obj09_ChkGlass
0001CE6E 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001CE72 303C 00A8                  		move.w	#$A8,d0		; change item
0001CE76 4EB9 0000 15E6             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001CE7C 4E75                       		rts	
0001CE7E                            ; ===========================================================================
0001CE7E                            
0001CE7E                            ; ===========================================================================
0001CE7E                            
0001CE7E                            Obj09_ChkGlass:
0001CE7E 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001CE82 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001CE84 0C00 002E                  		cmpi.b	#$2E,d0
0001CE88 6700                       		beq.s	Obj09_Glass
0001CE8A 0C00 002F                  		cmpi.b	#$2F,d0
0001CE8E 6700                       		beq.s	Obj09_Glass
0001CE90 0C00 0030                  		cmpi.b	#$30,d0
0001CE94 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001CE96                            
0001CE96                            Obj09_Glass:
0001CE96 6100 F512                  		bsr.w	SS_RemoveCollectedItem
0001CE9A 6600                       		bne.s	Obj09_GlassSnd
0001CE9C 14BC 0006                  		move.b	#6,(a2)
0001CEA0 2268 0032                  		movea.l	$32(a0),a1
0001CEA4 5389                       		subq.l	#1,a1
0001CEA6 2549 0004                  		move.l	a1,4(a2)
0001CEAA 1011                       		move.b	(a1),d0
0001CEAC 5200                       		addq.b	#1,d0		; change glass type when touched
0001CEAE 0C00 0030                  		cmpi.b	#$30,d0
0001CEB2 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001CEB4 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001CEB6                            
0001CEB6                            Obj09_GlassUpdate:
0001CEB6 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001CEBA                            
0001CEBA                            Obj09_GlassSnd:
0001CEBA 303C 00BA                  		move.w	#$BA,d0
0001CEBE 4EF9 0000 15E6             		jmp	(PlaySound_Special).l ;	play glass block sound
0001CEC4                            ; ===========================================================================
0001CEC4                            
0001CEC4                            Obj09_NoGlass:
0001CEC4 4E75                       		rts	
0001CEC6                            ; End of function Obj09_ChkItems2
0001CEC6                            
0001CEC6                            ; ===========================================================================
0001CEC6                            ; ---------------------------------------------------------------------------
0001CEC6                            ; Object 10 - blank
0001CEC6                            ; ---------------------------------------------------------------------------
0001CEC6                            
0001CEC6                            Obj10:					; XREF: Obj_Index
0001CEC6 4E75                       		rts	
0001CEC8                            ; ---------------------------------------------------------------------------
0001CEC8                            ; Subroutine to	animate	level graphics
0001CEC8                            ; ---------------------------------------------------------------------------
0001CEC8                            
0001CEC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CEC8                            
0001CEC8                            
0001CEC8                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001CEC8 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001CECC 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001CECE 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CED4 6100 0000                  		bsr.w	AniArt_GiantRing
0001CED8 7000                       		moveq	#0,d0
0001CEDA 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001CEDE D040                       		add.w	d0,d0
0001CEE0 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001CEE4 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001CEE8                            ; ===========================================================================
0001CEE8                            
0001CEE8                            AniArt_Pause:
0001CEE8 4E75                       		rts	
0001CEEA                            ; End of function AniArt_Load
0001CEEA                            
0001CEEA                            ; ===========================================================================
0001CEEA 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001CEEE 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001CEF2 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001CEF6 0000 0000                  		dc.w AniArt_Ending-AniArt_Index, AniArt_GHZ-AniArt_Index
0001CEFA                            ; ===========================================================================
0001CEFA                            ; ---------------------------------------------------------------------------
0001CEFA                            ; Animated pattern routine - Green Hill
0001CEFA                            ; ---------------------------------------------------------------------------
0001CEFA                            
0001CEFA                            AniArt_GHZ:				; XREF: AniArt_Index
0001CEFA 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CEFE 6A00                       		bpl.s	loc_1C08A
0001CF00 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001CF06 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001CF0C 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CF10 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001CF14 0240 0001                  		andi.w	#1,d0
0001CF18 6700                       		beq.s	loc_1C078
0001CF1A 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001CF1E                            
0001CF1E                            loc_1C078:
0001CF1E 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001CF28 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001CF2C 6000 0000                  		bra.w	LoadTiles
0001CF30                            ; ===========================================================================
0001CF30                            
0001CF30                            loc_1C08A:
0001CF30 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CF34 6A00                       		bpl.s	loc_1C0C0
0001CF36 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001CF3C 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CF42 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CF46 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CF4A 0240 0001                  		andi.w	#1,d0
0001CF4E 6700                       		beq.s	loc_1C0AE
0001CF50 43E9 0200                  		lea	$200(a1),a1
0001CF54                            
0001CF54                            loc_1C0AE:
0001CF54 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CF5E 323C 000F                  		move.w	#$F,d1
0001CF62 6000 0000                  		bra.w	LoadTiles
0001CF66                            ; ===========================================================================
0001CF66                            
0001CF66                            loc_1C0C0:
0001CF66 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CF6A 6A00                       		bpl.s	locret_1C10C
0001CF6C 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CF72 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CF76 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CF7A 0240 0003                  		andi.w	#3,d0
0001CF7E 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001CF82 0800 0000                  		btst	#0,d0
0001CF86 6600                       		bne.s	loc_1C0E8
0001CF88 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001CF8E                            
0001CF8E                            loc_1C0E8:
0001CF8E EF48                       		lsl.w	#7,d0
0001CF90 3200                       		move.w	d0,d1
0001CF92 D040                       		add.w	d0,d0
0001CF94 D041                       		add.w	d1,d0
0001CF96 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CFA0 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CFA6 43F1 0000                  		lea	(a1,d0.w),a1
0001CFAA 323C 000B                  		move.w	#$B,d1
0001CFAE 6100 0000                  		bsr.w	LoadTiles
0001CFB2                            
0001CFB2                            locret_1C10C:
0001CFB2 4E75                       		rts	
0001CFB4                            ; ===========================================================================
0001CFB4 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001CFB8                            ; ===========================================================================
0001CFB8                            ; ---------------------------------------------------------------------------
0001CFB8                            ; Animated pattern routine - Marble
0001CFB8                            ; ---------------------------------------------------------------------------
0001CFB8                            
0001CFB8                            AniArt_MZ:				; XREF: AniArt_Index
0001CFB8 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CFBC 6A00                       		bpl.s	loc_1C150
0001CFBE 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001CFC4 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001CFCA 7000                       		moveq	#0,d0
0001CFCC 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CFD0 5200                       		addq.b	#1,d0
0001CFD2 0C00 0003                  		cmpi.b	#3,d0
0001CFD6 6600                       		bne.s	loc_1C134
0001CFD8 7000                       		moveq	#0,d0
0001CFDA                            
0001CFDA                            loc_1C134:
0001CFDA 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001CFDE C0FC 0100                  		mulu.w	#$100,d0
0001CFE2 D2C0                       		adda.w	d0,a1
0001CFE4 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001CFEE 323C 0007                  		move.w	#7,d1
0001CFF2 6100 0000                  		bsr.w	LoadTiles
0001CFF6                            
0001CFF6                            loc_1C150:
0001CFF6 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CFFA 6A00                       		bpl.s	loc_1C1AE
0001CFFC 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001D002 7000                       		moveq	#0,d0
0001D004 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001D008 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001D00E EE58                       		ror.w	#7,d0
0001D010 D8C0                       		adda.w	d0,a4
0001D012 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001D01C 7600                       		moveq	#0,d3
0001D01E 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001D022 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001D026 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001D02A 343C 0003                  		move.w	#3,d2
0001D02E                            
0001D02E                            loc_1C188:
0001D02E 3003                       		move.w	d3,d0
0001D030 D040                       		add.w	d0,d0
0001D032 0240 001E                  		andi.w	#$1E,d0
0001D036 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001D03C 3033 0000                  		move.w	(a3,d0.w),d0
0001D040 47F3 0000                  		lea	(a3,d0.w),a3
0001D044 224C                       		movea.l	a4,a1
0001D046 323C 001F                  		move.w	#$1F,d1
0001D04A 4E93                       		jsr	(a3)
0001D04C 5843                       		addq.w	#4,d3
0001D04E 51CA FFDE                  		dbf	d2,loc_1C188
0001D052 4E75                       		rts	
0001D054                            ; ===========================================================================
0001D054                            
0001D054                            loc_1C1AE:
0001D054 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001D058 6A00 0000                  		bpl.w	locret_1C1EA
0001D05C 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001D062 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001D068 7000                       		moveq	#0,d0
0001D06A 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001D06E 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001D072 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001D078 C0FC 00C0                  		mulu.w	#$C0,d0
0001D07C D2C0                       		adda.w	d0,a1
0001D07E 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001D088 323C 0005                  		move.w	#5,d1
0001D08C 6000 0000                  		bra.w	LoadTiles
0001D090                            ; ===========================================================================
0001D090                            
0001D090                            locret_1C1EA:
0001D090 4E75                       		rts	
0001D092                            ; ===========================================================================
0001D092                            ; ---------------------------------------------------------------------------
0001D092                            ; Animated pattern routine - Scrap Brain
0001D092                            ; ---------------------------------------------------------------------------
0001D092                            
0001D092                            AniArt_SBZ:				; XREF: AniArt_Index
0001D092 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001D096 6700                       		beq.s	loc_1C1F8
0001D098 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001D09C 6000                       		bra.s	loc_1C250
0001D09E                            ; ===========================================================================
0001D09E                            
0001D09E                            loc_1C1F8:
0001D09E 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001D0A2 6A00                       		bpl.s	loc_1C250
0001D0A4 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001D0AA 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001D0B0 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001D0BA 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001D0BE 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001D0C2 0240 0007                  		andi.w	#7,d0
0001D0C6 6700                       		beq.s	loc_1C234
0001D0C8 5340                       		subq.w	#1,d0
0001D0CA C0FC 0180                  		mulu.w	#$180,d0
0001D0CE 43F1 0000                  		lea	(a1,d0.w),a1
0001D0D2 323C 000B                  		move.w	#$B,d1
0001D0D6 6000 0000                  		bra.w	LoadTiles
0001D0DA                            ; ===========================================================================
0001D0DA                            
0001D0DA                            loc_1C234:
0001D0DA 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001D0E0                            
0001D0E0                            loc_1C23A:
0001D0E0 323C 0005                  		move.w	#5,d1
0001D0E4 6100 0000                  		bsr.w	LoadTiles
0001D0E8 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001D0EE 323C 0005                  		move.w	#5,d1
0001D0F2 6000 0000                  		bra.w	LoadTiles
0001D0F6                            ; ===========================================================================
0001D0F6                            
0001D0F6                            loc_1C250:
0001D0F6 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001D0FA 6700                       		beq.s	loc_1C25C
0001D0FC 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001D100 6000                       		bra.s	locret_1C2A0
0001D102                            ; ===========================================================================
0001D102                            
0001D102                            loc_1C25C:
0001D102 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001D106 6A00                       		bpl.s	locret_1C2A0
0001D108 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001D10E 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001D114 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001D11E 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001D122 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001D126 0240 0007                  		andi.w	#7,d0
0001D12A 6700                       		beq.s	loc_1C298
0001D12C 5340                       		subq.w	#1,d0
0001D12E C0FC 0180                  		mulu.w	#$180,d0
0001D132 43F1 0000                  		lea	(a1,d0.w),a1
0001D136 323C 000B                  		move.w	#$B,d1
0001D13A 6000 0000                  		bra.w	LoadTiles
0001D13E                            ; ===========================================================================
0001D13E                            
0001D13E                            loc_1C298:
0001D13E 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001D144 609A                       		bra.s	loc_1C23A
0001D146                            ; ===========================================================================
0001D146                            
0001D146                            locret_1C2A0:
0001D146 4E75                       		rts	
0001D148                            ; ===========================================================================
0001D148                            ; ---------------------------------------------------------------------------
0001D148                            ; Animated pattern routine - ending sequence
0001D148                            ; ---------------------------------------------------------------------------
0001D148                            
0001D148                            AniArt_Ending:				; XREF: AniArt_Index
0001D148 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001D14C 6A00                       		bpl.s	loc_1C2F4
0001D14E 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001D154 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001D15A 45F8 9400                  		lea	($FFFF9400).w,a2
0001D15E 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001D162 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001D166 0240 0001                  		andi.w	#1,d0
0001D16A 6700                       		beq.s	loc_1C2CE
0001D16C 43E9 0200                  		lea	$200(a1),a1
0001D170 45EA 0200                  		lea	$200(a2),a2
0001D174                            
0001D174                            loc_1C2CE:
0001D174 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001D17E 323C 000F                  		move.w	#$F,d1
0001D182 6100 0000                  		bsr.w	LoadTiles
0001D186 224A                       		movea.l	a2,a1
0001D188 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001D192 323C 000F                  		move.w	#$F,d1
0001D196 6000 0000                  		bra.w	LoadTiles
0001D19A                            ; ===========================================================================
0001D19A                            
0001D19A                            loc_1C2F4:
0001D19A 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001D19E 6A00                       		bpl.s	loc_1C33C
0001D1A0 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001D1A6 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001D1AA 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001D1AE 0240 0007                  		andi.w	#7,d0
0001D1B2 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001D1B6 EF48                       		lsl.w	#7,d0
0001D1B8 3200                       		move.w	d0,d1
0001D1BA D040                       		add.w	d0,d0
0001D1BC D041                       		add.w	d1,d0
0001D1BE 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001D1C8 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001D1CE 43F1 0000                  		lea	(a1,d0.w),a1
0001D1D2 323C 000B                  		move.w	#$B,d1
0001D1D6 6000 0000                  		bra.w	LoadTiles
0001D1DA                            ; ===========================================================================
0001D1DA 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001D1E2                            ; ===========================================================================
0001D1E2                            
0001D1E2                            loc_1C33C:
0001D1E2 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001D1E6 6A00                       		bpl.s	loc_1C37A
0001D1E8 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001D1EE 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001D1F2 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001D1F6 0240 0003                  		andi.w	#3,d0
0001D1FA 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001D1FE E148                       		lsl.w	#8,d0
0001D200 D040                       		add.w	d0,d0
0001D202 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001D20C 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001D210 43F1 0000                  		lea	(a1,d0.w),a1
0001D214 323C 000F                  		move.w	#$F,d1
0001D218 6000 0000                  		bra.w	LoadTiles
0001D21C                            ; ===========================================================================
0001D21C 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001D220                            ; ===========================================================================
0001D220                            
0001D220                            loc_1C37A:
0001D220 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001D224 6A00                       		bpl.s	locret_1C3B4
0001D226 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001D22C 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001D230 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001D234 0240 0003                  		andi.w	#3,d0
0001D238 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001D23C E148                       		lsl.w	#8,d0
0001D23E D040                       		add.w	d0,d0
0001D240 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001D24A 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001D24E 43F1 0000                  		lea	(a1,d0.w),a1
0001D252 323C 000F                  		move.w	#$F,d1
0001D256 6000 0000                  		bra.w	LoadTiles
0001D25A                            ; ===========================================================================
0001D25A                            
0001D25A                            locret_1C3B4:
0001D25A 4E75                       		rts	
0001D25C                            ; ===========================================================================
0001D25C                            
0001D25C                            AniArt_none:				; XREF: AniArt_Index
0001D25C 4E75                       		rts	
0001D25E                            
0001D25E                            ; ---------------------------------------------------------------------------
0001D25E                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001D25E                            ; ---------------------------------------------------------------------------
0001D25E                            
0001D25E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D25E                            
0001D25E                            
0001D25E                            LoadTiles:
0001D25E 2C99                       		move.l	(a1)+,(a6)
0001D260 2C99                       		move.l	(a1)+,(a6)
0001D262 2C99                       		move.l	(a1)+,(a6)
0001D264 2C99                       		move.l	(a1)+,(a6)
0001D266 2C99                       		move.l	(a1)+,(a6)
0001D268 2C99                       		move.l	(a1)+,(a6)
0001D26A 2C99                       		move.l	(a1)+,(a6)
0001D26C 2C99                       		move.l	(a1)+,(a6)
0001D26E 51C9 FFEE                  		dbf	d1,LoadTiles
0001D272 4E75                       		rts	
0001D274                            ; End of function LoadTiles
0001D274                            
0001D274                            ; ===========================================================================
0001D274                            ; ---------------------------------------------------------------------------
0001D274                            ; Animated pattern routine - more Marble Zone
0001D274                            ; ---------------------------------------------------------------------------
0001D274 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001D278 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001D27C 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001D280 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001D284 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001D288 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001D28C 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001D290 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001D294                            ; ===========================================================================
0001D294                            
0001D294                            loc_1C3EE:				; XREF: AniArt_MZextra
0001D294 2C91                       		move.l	(a1),(a6)
0001D296 43E9 0010                  		lea	$10(a1),a1
0001D29A 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001D29E 4E75                       		rts	
0001D2A0                            ; ===========================================================================
0001D2A0                            
0001D2A0                            loc_1C3FA:				; XREF: AniArt_MZextra
0001D2A0 2029 0002                  		move.l	2(a1),d0
0001D2A4 1029 0001                  		move.b	1(a1),d0
0001D2A8 E098                       		ror.l	#8,d0
0001D2AA 2C80                       		move.l	d0,(a6)
0001D2AC 43E9 0010                  		lea	$10(a1),a1
0001D2B0 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001D2B4 4E75                       		rts	
0001D2B6                            ; ===========================================================================
0001D2B6                            
0001D2B6                            loc_1C410:				; XREF: AniArt_MZextra
0001D2B6 2CA9 0002                  		move.l	2(a1),(a6)
0001D2BA 43E9 0010                  		lea	$10(a1),a1
0001D2BE 51C9 FFF6                  		dbf	d1,loc_1C410
0001D2C2 4E75                       		rts	
0001D2C4                            ; ===========================================================================
0001D2C4                            
0001D2C4                            loc_1C41E:				; XREF: AniArt_MZextra
0001D2C4 2029 0004                  		move.l	4(a1),d0
0001D2C8 1029 0003                  		move.b	3(a1),d0
0001D2CC E098                       		ror.l	#8,d0
0001D2CE 2C80                       		move.l	d0,(a6)
0001D2D0 43E9 0010                  		lea	$10(a1),a1
0001D2D4 51C9 FFEE                  		dbf	d1,loc_1C41E
0001D2D8 4E75                       		rts	
0001D2DA                            ; ===========================================================================
0001D2DA                            
0001D2DA                            loc_1C434:				; XREF: AniArt_MZextra
0001D2DA 2CA9 0004                  		move.l	4(a1),(a6)
0001D2DE 43E9 0010                  		lea	$10(a1),a1
0001D2E2 51C9 FFF6                  		dbf	d1,loc_1C434
0001D2E6 4E75                       		rts	
0001D2E8                            ; ===========================================================================
0001D2E8                            
0001D2E8                            loc_1C442:				; XREF: AniArt_MZextra
0001D2E8 2029 0006                  		move.l	6(a1),d0
0001D2EC 1029 0005                  		move.b	5(a1),d0
0001D2F0 E098                       		ror.l	#8,d0
0001D2F2 2C80                       		move.l	d0,(a6)
0001D2F4 43E9 0010                  		lea	$10(a1),a1
0001D2F8 51C9 FFEE                  		dbf	d1,loc_1C442
0001D2FC 4E75                       		rts	
0001D2FE                            ; ===========================================================================
0001D2FE                            
0001D2FE                            loc_1C458:				; XREF: AniArt_MZextra
0001D2FE 2CA9 0006                  		move.l	6(a1),(a6)
0001D302 43E9 0010                  		lea	$10(a1),a1
0001D306 51C9 FFF6                  		dbf	d1,loc_1C458
0001D30A 4E75                       		rts	
0001D30C                            ; ===========================================================================
0001D30C                            
0001D30C                            loc_1C466:				; XREF: AniArt_MZextra
0001D30C 2029 0008                  		move.l	8(a1),d0
0001D310 1029 0007                  		move.b	7(a1),d0
0001D314 E098                       		ror.l	#8,d0
0001D316 2C80                       		move.l	d0,(a6)
0001D318 43E9 0010                  		lea	$10(a1),a1
0001D31C 51C9 FFEE                  		dbf	d1,loc_1C466
0001D320 4E75                       		rts	
0001D322                            ; ===========================================================================
0001D322                            
0001D322                            loc_1C47C:				; XREF: AniArt_MZextra
0001D322 2CA9 0008                  		move.l	8(a1),(a6)
0001D326 43E9 0010                  		lea	$10(a1),a1
0001D32A 51C9 FFF6                  		dbf	d1,loc_1C47C
0001D32E 4E75                       		rts	
0001D330                            ; ===========================================================================
0001D330                            
0001D330                            loc_1C48A:				; XREF: AniArt_MZextra
0001D330 2029 000A                  		move.l	$A(a1),d0
0001D334 1029 0009                  		move.b	9(a1),d0
0001D338 E098                       		ror.l	#8,d0
0001D33A 2C80                       		move.l	d0,(a6)
0001D33C 43E9 0010                  		lea	$10(a1),a1
0001D340 51C9 FFEE                  		dbf	d1,loc_1C48A
0001D344 4E75                       		rts	
0001D346                            ; ===========================================================================
0001D346                            
0001D346                            loc_1C4A0:				; XREF: AniArt_MZextra
0001D346 2CA9 000A                  		move.l	$A(a1),(a6)
0001D34A 43E9 0010                  		lea	$10(a1),a1
0001D34E 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001D352 4E75                       		rts	
0001D354                            ; ===========================================================================
0001D354                            
0001D354                            loc_1C4AE:				; XREF: AniArt_MZextra
0001D354 2029 000C                  		move.l	$C(a1),d0
0001D358 1029 000B                  		move.b	$B(a1),d0
0001D35C E098                       		ror.l	#8,d0
0001D35E 2C80                       		move.l	d0,(a6)
0001D360 43E9 0010                  		lea	$10(a1),a1
0001D364 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001D368 4E75                       		rts	
0001D36A                            ; ===========================================================================
0001D36A                            
0001D36A                            loc_1C4C4:				; XREF: AniArt_MZextra
0001D36A 2CA9 000C                  		move.l	$C(a1),(a6)
0001D36E 43E9 0010                  		lea	$10(a1),a1
0001D372 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001D376 4E75                       		rts	
0001D378                            ; ===========================================================================
0001D378                            
0001D378                            loc_1C4D2:				; XREF: AniArt_MZextra
0001D378 2029 000C                  		move.l	$C(a1),d0
0001D37C E198                       		rol.l	#8,d0
0001D37E 1011                       		move.b	0(a1),d0
0001D380 2C80                       		move.l	d0,(a6)
0001D382 43E9 0010                  		lea	$10(a1),a1
0001D386 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001D38A 4E75                       		rts	
0001D38C                            ; ===========================================================================
0001D38C                            
0001D38C                            loc_1C4E8:				; XREF: AniArt_MZextra
0001D38C 3CA9 000E                  		move.w	$E(a1),(a6)
0001D390 3C91                       		move.w	0(a1),(a6)
0001D392 43E9 0010                  		lea	$10(a1),a1
0001D396 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001D39A 4E75                       		rts	
0001D39C                            ; ===========================================================================
0001D39C                            
0001D39C                            loc_1C4FA:				; XREF: AniArt_MZextra
0001D39C 2011                       		move.l	0(a1),d0
0001D39E 1029 000F                  		move.b	$F(a1),d0
0001D3A2 E098                       		ror.l	#8,d0
0001D3A4 2C80                       		move.l	d0,(a6)
0001D3A6 43E9 0010                  		lea	$10(a1),a1
0001D3AA 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001D3AE 4E75                       		rts	
0001D3B0                            
0001D3B0                            ; ---------------------------------------------------------------------------
0001D3B0                            ; Animated pattern routine - giant ring
0001D3B0                            ; ---------------------------------------------------------------------------
0001D3B0                            
0001D3B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D3B0                            
0001D3B0                            
0001D3B0                            AniArt_GiantRing:			; XREF: AniArt_Load
0001D3B0 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001D3B4 6600                       		bne.s	loc_1C518
0001D3B6 4E75                       		rts	
0001D3B8                            ; ===========================================================================
0001D3B8                            
0001D3B8                            loc_1C518:
0001D3B8 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001D3BE 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001D3C4 7000                       		moveq	#0,d0
0001D3C6 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001D3CA 43F1 0000                  		lea	(a1,d0.w),a1
0001D3CE 0640 8000                  		addi.w	#$8000,d0
0001D3D2 E588                       		lsl.l	#2,d0
0001D3D4 E448                       		lsr.w	#2,d0
0001D3D6 0040 4000                  		ori.w	#$4000,d0
0001D3DA 4840                       		swap	d0
0001D3DC 2D40 0004                  		move.l	d0,4(a6)
0001D3E0 323C 000D                  		move.w	#$D,d1
0001D3E4 6000 FE78                  		bra.w	LoadTiles
0001D3E8                            ; End of function AniArt_GiantRing
0001D3E8                            
0001D3E8                            ; ===========================================================================
0001D3E8                            ; ---------------------------------------------------------------------------
0001D3E8                            ; Object 21 - SCORE, TIME, RINGS
0001D3E8                            ; ---------------------------------------------------------------------------
0001D3E8                            
0001D3E8                            Obj21:					; XREF: Obj_Index
0001D3E8 7000                       		moveq	#0,d0
0001D3EA 1028 0024                  		move.b	$24(a0),d0
0001D3EE 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001D3F2 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001D3F6                            ; ===========================================================================
0001D3F6 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001D3F8 0000                       		dc.w Obj21_Flash-Obj21_Index
0001D3FA                            ; ===========================================================================
0001D3FA                            
0001D3FA                            Obj21_Main:				; XREF: Obj21_Main
0001D3FA 5428 0024                  		addq.b	#2,$24(a0)
0001D3FE 317C 0090 0008             		move.w	#$90,8(a0)
0001D404 317C 0108 000A             		move.w	#$108,$A(a0)
0001D40A 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001D412 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001D418 117C 0000 0001             		move.b	#0,1(a0)
0001D41E 117C 0000 0018             		move.b	#0,$18(a0)
0001D424                            
0001D424                            Obj21_Flash:				; XREF: Obj21_Main
0001D424 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001D428 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001D42A 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001D42E 4EF9 0000 E2A2             		jmp	DisplaySprite
0001D434                            ; ===========================================================================
0001D434                            
0001D434                            Obj21_Flash2:
0001D434 7000                       		moveq	#0,d0
0001D436 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001D43C 6600                       		bne.s	Obj21_Display
0001D43E 5240                       		addq.w	#1,d0		; make ring counter flash red
0001D440 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001D446 6600                       		bne.s	Obj21_Display	; if not, branch
0001D448 5440                       		addq.w	#2,d0		; make time counter flash red
0001D44A                            
0001D44A                            Obj21_Display:
0001D44A 1140 001A                  		move.b	d0,$1A(a0)
0001D44E 4EF9 0000 E2A2             		jmp	DisplaySprite
0001D454                            ; ===========================================================================
0001D454                            ; ---------------------------------------------------------------------------
0001D454                            ; Sprite mappings - SCORE, TIME, RINGS
0001D454                            ; ---------------------------------------------------------------------------
0001D454                            Map_obj21:
0001D454                            	include "_maps\obj21.asm"
0001D454                            Map_549d:
0001D454 0000                       Map_549d_0: 	dc.w Map_549d_8-Map_549d
0001D456 0000                       Map_549d_2: 	dc.w Map_549d_36-Map_549d
0001D458 0000                       Map_549d_4: 	dc.w Map_549d_64-Map_549d
0001D45A 0000                       Map_549d_6: 	dc.w Map_549d_92-Map_549d
0001D45C 09                         Map_549d_8: 	dc.b $9
0001D45D 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001D462 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001D467 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001D46C 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001D471 A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001D476 A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001D47B 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001D480 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001D485 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001D48A 09                         Map_549d_36: 	dc.b $9
0001D48B 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001D490 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001D495 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001D49A 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001D49F A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001D4A4 A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001D4A9 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001D4AE 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001D4B3 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001D4B8 09                         Map_549d_64: 	dc.b $9
0001D4B9 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001D4BE 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001D4C3 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001D4C8 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001D4CD A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001D4D2 A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001D4D7 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001D4DC 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001D4E1 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001D4E6 09                         Map_549d_92: 	dc.b $9
0001D4E7 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001D4EC 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001D4F1 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001D4F6 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001D4FB A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001D500 A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001D505 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001D50A 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001D50F 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001D514                            	even
0001D514                            	even
0001D514                            
0001D514                            ; ---------------------------------------------------------------------------
0001D514                            ; Add points subroutine
0001D514                            ; ---------------------------------------------------------------------------
0001D514                            
0001D514                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D514                            
0001D514                            
0001D514                            AddPoints:
0001D514 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001D51A 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001D51E 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001D522 D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001D524 223C 000F 423F             		move.l	#999999,d1
0001D52A B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001D52C 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001D530 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001D532 2481                       		move.l	d1,(a2)
0001D534                            
0001D534                            loc_1C6AC:
0001D534 2013                       		move.l	(a3),d0
0001D536 B092                       		cmp.l	(a2),d0
0001D538 6500 0000                  		bcs.w	locret_1C6B6
0001D53C 2480                       		move.l	d0,(a2)
0001D53E                            
0001D53E                            locret_1C6B6:
0001D53E 4E75                       		rts	
0001D540                            ; End of function AddPoints
0001D540                            
0001D540                            ; ---------------------------------------------------------------------------
0001D540                            ; Subroutine to	update the HUD
0001D540                            ; ---------------------------------------------------------------------------
0001D540                            
0001D540                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D540                            
0001D540                            
0001D540                            HudUpdate:
0001D540 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001D544 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001D548 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001D54C 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001D54E 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001D552 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001D558 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001D55C 6100 0000                  		bsr.w	Hud_Score
0001D560                            
0001D560                            Hud_ChkRings:
0001D560 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D564 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001D566 6A00                       		bpl.s	loc_1C6E4
0001D568 6100 0000                  		bsr.w	Hud_LoadZero
0001D56C                            
0001D56C                            loc_1C6E4:
0001D56C 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D570 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D576 7200                       		moveq	#0,d1
0001D578 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D57C 6100 0000                  		bsr.w	Hud_Rings
0001D580                            
0001D580                            Hud_ChkTime:
0001D580 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001D584 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001D586 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001D58A 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001D58C 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001D590 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001D596 6700                       		beq.s	TimeOver	; if yes, branch
0001D598 5221                       		addq.b	#1,-(a1)
0001D59A 0C11 003C                  		cmpi.b	#60,(a1)
0001D59E 6500                       		bcs.s	Hud_ChkLives
0001D5A0 12BC 0000                  		move.b	#0,(a1)
0001D5A4 5221                       		addq.b	#1,-(a1)
0001D5A6 0C11 003C                  		cmpi.b	#60,(a1)
0001D5AA 6500                       		bcs.s	loc_1C734
0001D5AC 12BC 0000                  		move.b	#0,(a1)
0001D5B0 5221                       		addq.b	#1,-(a1)
0001D5B2 0C11 0009                  		cmpi.b	#9,(a1)
0001D5B6 6500                       		bcs.s	loc_1C734
0001D5B8 12BC 0009                  		move.b	#9,(a1)
0001D5BC                            
0001D5BC                            loc_1C734:
0001D5BC 203C 5E40 0003             		move.l	#$5E400003,d0
0001D5C2 7200                       		moveq	#0,d1
0001D5C4 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001D5C8 6100 0000                  		bsr.w	Hud_Mins
0001D5CC 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001D5D2 7200                       		moveq	#0,d1
0001D5D4 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001D5D8 6100 0000                  		bsr.w	Hud_Secs
0001D5DC                            
0001D5DC                            Hud_ChkLives:
0001D5DC 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D5E0 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001D5E2 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D5E6 6100 0000                  		bsr.w	Hud_Lives
0001D5EA                            
0001D5EA                            Hud_ChkBonus:
0001D5EA 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001D5EE 6700                       		beq.s	Hud_End		; if not, branch
0001D5F0 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D5F4 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001D5FE 7200                       		moveq	#0,d1
0001D600 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D604 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D608 7200                       		moveq	#0,d1
0001D60A 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D60E 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D612                            
0001D612                            Hud_End:
0001D612 4E75                       		rts	
0001D614                            ; ===========================================================================
0001D614                            
0001D614                            TimeOver:				; XREF: Hud_ChkTime
0001D614 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001D618 41F8 D000                  		lea	($FFFFD000).w,a0
0001D61C 2448                       		movea.l	a0,a2
0001D61E 6100 E968                  		bsr.w	KillSonic
0001D622 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001D628 4E75                       		rts	
0001D62A                            ; ===========================================================================
0001D62A                            
0001D62A                            HudDebug:				; XREF: HudUpdate
0001D62A 6100 0000                  		bsr.w	HudDb_XY
0001D62E 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D632 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001D634 6A00                       		bpl.s	HudDb_Rings
0001D636 6100 0000                  		bsr.w	Hud_LoadZero
0001D63A                            
0001D63A                            HudDb_Rings:
0001D63A 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D63E 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D644 7200                       		moveq	#0,d1
0001D646 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D64A 6100 0000                  		bsr.w	Hud_Rings
0001D64E                            
0001D64E                            HudDb_ObjCount:
0001D64E 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001D654 7200                       		moveq	#0,d1
0001D656 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001D65A 6100 0000                  		bsr.w	Hud_Secs
0001D65E 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D662 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001D664 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D668 6100 0000                  		bsr.w	Hud_Lives
0001D66C                            
0001D66C                            HudDb_ChkBonus:
0001D66C 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001D670 6700                       		beq.s	HudDb_End	; if not, branch
0001D672 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D676 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001D680 7200                       		moveq	#0,d1
0001D682 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D686 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D68A 7200                       		moveq	#0,d1
0001D68C 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D690 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D694                            
0001D694                            HudDb_End:
0001D694 4E75                       		rts	
0001D696                            ; End of function HudUpdate
0001D696                            
0001D696                            ; ---------------------------------------------------------------------------
0001D696                            ; Subroutine to	load "0" on the	HUD
0001D696                            ; ---------------------------------------------------------------------------
0001D696                            
0001D696                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D696                            
0001D696                            
0001D696                            Hud_LoadZero:				; XREF: HudUpdate
0001D696 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001D6A0 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001D6A4 343C 0002                  		move.w	#2,d2
0001D6A8 6000                       		bra.s	loc_1C83E
0001D6AA                            ; End of function Hud_LoadZero
0001D6AA                            
0001D6AA                            ; ---------------------------------------------------------------------------
0001D6AA                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001D6AA                            ; ---------------------------------------------------------------------------
0001D6AA                            
0001D6AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D6AA                            
0001D6AA                            
0001D6AA                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001D6AA 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D6B0 6100 0000                  		bsr.w	Hud_Lives
0001D6B4 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001D6BE 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001D6C2 343C 000E                  		move.w	#$E,d2
0001D6C6                            
0001D6C6                            loc_1C83E:				; XREF: Hud_LoadZero
0001D6C6 43FA 0000                  		lea	Art_Hud(pc),a1
0001D6CA                            
0001D6CA                            loc_1C842:
0001D6CA 323C 000F                  		move.w	#$F,d1
0001D6CE 101A                       		move.b	(a2)+,d0
0001D6D0 6B00                       		bmi.s	loc_1C85E
0001D6D2 4880                       		ext.w	d0
0001D6D4 EB48                       		lsl.w	#5,d0
0001D6D6 47F1 0000                  		lea	(a1,d0.w),a3
0001D6DA                            
0001D6DA                            loc_1C852:
0001D6DA 2C9B                       		move.l	(a3)+,(a6)
0001D6DC 51C9 FFFC                  		dbf	d1,loc_1C852
0001D6E0                            
0001D6E0                            loc_1C858:
0001D6E0 51CA FFE8                  		dbf	d2,loc_1C842
0001D6E4                            
0001D6E4 4E75                       		rts	
0001D6E6                            ; ===========================================================================
0001D6E6                            
0001D6E6                            loc_1C85E:
0001D6E6 2CBC 0000 0000             		move.l	#0,(a6)
0001D6EC 51C9 FFF8                  		dbf	d1,loc_1C85E
0001D6F0                            
0001D6F0 60EE                       		bra.s	loc_1C858
0001D6F2                            ; End of function Hud_Base
0001D6F2                            
0001D6F2                            ; ===========================================================================
0001D6F2 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001D6FE FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001D702                            ; ---------------------------------------------------------------------------
0001D702                            ; Subroutine to	load debug mode	numbers	patterns
0001D702                            ; ---------------------------------------------------------------------------
0001D702                            
0001D702                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D702                            
0001D702                            
0001D702                            HudDb_XY:				; XREF: HudDebug
0001D702 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001D70C 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001D710 4841                       		swap	d1
0001D712 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001D716 6100                       		bsr.s	HudDb_XY2
0001D718 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001D71C 4841                       		swap	d1
0001D71E 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001D722                            ; End of function HudDb_XY
0001D722                            
0001D722                            
0001D722                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D722                            
0001D722                            
0001D722                            HudDb_XY2:
0001D722 7C07                       		moveq	#7,d6
0001D724 43F9 0000 0608             		lea	(Art_Text).l,a1
0001D72A                            
0001D72A                            HudDb_XYLoop:
0001D72A E959                       		rol.w	#4,d1
0001D72C 3401                       		move.w	d1,d2
0001D72E 0242 000F                  		andi.w	#$F,d2
0001D732 0C42 000A                  		cmpi.w	#$A,d2
0001D736 6500                       		bcs.s	loc_1C8B2
0001D738 5E42                       		addq.w	#7,d2
0001D73A                            
0001D73A                            loc_1C8B2:
0001D73A EB4A                       		lsl.w	#5,d2
0001D73C 47F1 2000                  		lea	(a1,d2.w),a3
0001D740 2C9B                       		move.l	(a3)+,(a6)
0001D742 2C9B                       		move.l	(a3)+,(a6)
0001D744 2C9B                       		move.l	(a3)+,(a6)
0001D746 2C9B                       		move.l	(a3)+,(a6)
0001D748 2C9B                       		move.l	(a3)+,(a6)
0001D74A 2C9B                       		move.l	(a3)+,(a6)
0001D74C 2C9B                       		move.l	(a3)+,(a6)
0001D74E 2C9B                       		move.l	(a3)+,(a6)
0001D750 4841                       		swap	d1
0001D752 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001D756                            
0001D756 4E75                       		rts	
0001D758                            ; End of function HudDb_XY2
0001D758                            
0001D758                            ; ---------------------------------------------------------------------------
0001D758                            ; Subroutine to	load rings numbers patterns
0001D758                            ; ---------------------------------------------------------------------------
0001D758                            
0001D758                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D758                            
0001D758                            
0001D758                            Hud_Rings:				; XREF: HudUpdate
0001D758 45F9 0000 0000             		lea	(Hud_100).l,a2
0001D75E 7C02                       		moveq	#2,d6
0001D760 6000                       		bra.s	Hud_LoadArt
0001D762                            ; End of function Hud_Rings
0001D762                            
0001D762                            ; ---------------------------------------------------------------------------
0001D762                            ; Subroutine to	load score numbers patterns
0001D762                            ; ---------------------------------------------------------------------------
0001D762                            
0001D762                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D762                            
0001D762                            
0001D762                            Hud_Score:				; XREF: HudUpdate
0001D762 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001D768 7C05                       		moveq	#5,d6
0001D76A                            
0001D76A                            Hud_LoadArt:
0001D76A 7800                       		moveq	#0,d4
0001D76C 43FA 0000                  		lea	Art_Hud(pc),a1
0001D770                            
0001D770                            Hud_ScoreLoop:
0001D770 7400                       		moveq	#0,d2
0001D772 261A                       		move.l	(a2)+,d3
0001D774                            
0001D774                            loc_1C8EC:
0001D774 9283                       		sub.l	d3,d1
0001D776 6500                       		bcs.s	loc_1C8F4
0001D778 5242                       		addq.w	#1,d2
0001D77A 60F8                       		bra.s	loc_1C8EC
0001D77C                            ; ===========================================================================
0001D77C                            
0001D77C                            loc_1C8F4:
0001D77C D283                       		add.l	d3,d1
0001D77E 4A42                       		tst.w	d2
0001D780 6700                       		beq.s	loc_1C8FE
0001D782 383C 0001                  		move.w	#1,d4
0001D786                            
0001D786                            loc_1C8FE:
0001D786 4A44                       		tst.w	d4
0001D788 6700                       		beq.s	loc_1C92C
0001D78A ED4A                       		lsl.w	#6,d2
0001D78C 2D40 0004                  		move.l	d0,4(a6)
0001D790 47F1 2000                  		lea	(a1,d2.w),a3
0001D794 2C9B                       		move.l	(a3)+,(a6)
0001D796 2C9B                       		move.l	(a3)+,(a6)
0001D798 2C9B                       		move.l	(a3)+,(a6)
0001D79A 2C9B                       		move.l	(a3)+,(a6)
0001D79C 2C9B                       		move.l	(a3)+,(a6)
0001D79E 2C9B                       		move.l	(a3)+,(a6)
0001D7A0 2C9B                       		move.l	(a3)+,(a6)
0001D7A2 2C9B                       		move.l	(a3)+,(a6)
0001D7A4 2C9B                       		move.l	(a3)+,(a6)
0001D7A6 2C9B                       		move.l	(a3)+,(a6)
0001D7A8 2C9B                       		move.l	(a3)+,(a6)
0001D7AA 2C9B                       		move.l	(a3)+,(a6)
0001D7AC 2C9B                       		move.l	(a3)+,(a6)
0001D7AE 2C9B                       		move.l	(a3)+,(a6)
0001D7B0 2C9B                       		move.l	(a3)+,(a6)
0001D7B2 2C9B                       		move.l	(a3)+,(a6)
0001D7B4                            
0001D7B4                            loc_1C92C:
0001D7B4 0680 0040 0000             		addi.l	#$400000,d0
0001D7BA 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001D7BE                            
0001D7BE 4E75                       		rts	
0001D7C0                            ; End of function Hud_Score
0001D7C0                            
0001D7C0                            ; ---------------------------------------------------------------------------
0001D7C0                            ; Subroutine to	load countdown numbers on the continue screen
0001D7C0                            ; ---------------------------------------------------------------------------
0001D7C0                            
0001D7C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D7C0                            
0001D7C0                            
0001D7C0                            ContScrCounter:				; XREF: ContinueScreen
0001D7C0 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001D7CA 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D7D0 45F9 0000 0000             		lea	(Hud_10).l,a2
0001D7D6 7C01                       		moveq	#1,d6
0001D7D8 7800                       		moveq	#0,d4
0001D7DA 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001D7DE                            
0001D7DE                            ContScr_Loop:
0001D7DE 7400                       		moveq	#0,d2
0001D7E0 261A                       		move.l	(a2)+,d3
0001D7E2                            
0001D7E2                            loc_1C95A:
0001D7E2 9283                       		sub.l	d3,d1
0001D7E4 6500                       		bcs.s	loc_1C962
0001D7E6 5242                       		addq.w	#1,d2
0001D7E8 60F8                       		bra.s	loc_1C95A
0001D7EA                            ; ===========================================================================
0001D7EA                            
0001D7EA                            loc_1C962:
0001D7EA D283                       		add.l	d3,d1
0001D7EC ED4A                       		lsl.w	#6,d2
0001D7EE 47F1 2000                  		lea	(a1,d2.w),a3
0001D7F2 2C9B                       		move.l	(a3)+,(a6)
0001D7F4 2C9B                       		move.l	(a3)+,(a6)
0001D7F6 2C9B                       		move.l	(a3)+,(a6)
0001D7F8 2C9B                       		move.l	(a3)+,(a6)
0001D7FA 2C9B                       		move.l	(a3)+,(a6)
0001D7FC 2C9B                       		move.l	(a3)+,(a6)
0001D7FE 2C9B                       		move.l	(a3)+,(a6)
0001D800 2C9B                       		move.l	(a3)+,(a6)
0001D802 2C9B                       		move.l	(a3)+,(a6)
0001D804 2C9B                       		move.l	(a3)+,(a6)
0001D806 2C9B                       		move.l	(a3)+,(a6)
0001D808 2C9B                       		move.l	(a3)+,(a6)
0001D80A 2C9B                       		move.l	(a3)+,(a6)
0001D80C 2C9B                       		move.l	(a3)+,(a6)
0001D80E 2C9B                       		move.l	(a3)+,(a6)
0001D810 2C9B                       		move.l	(a3)+,(a6)
0001D812 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001D816                            
0001D816 4E75                       		rts	
0001D818                            ; End of function ContScrCounter
0001D818                            
0001D818                            ; ===========================================================================
0001D818                            ; ---------------------------------------------------------------------------
0001D818                            ; HUD counter sizes
0001D818                            ; ---------------------------------------------------------------------------
0001D818 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001D81C 0000 2710                  Hud_10000:	dc.l 10000
0001D820 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001D824 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001D828 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001D82C 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001D830                            
0001D830                            ; ---------------------------------------------------------------------------
0001D830                            ; Subroutine to	load time numbers patterns
0001D830                            ; ---------------------------------------------------------------------------
0001D830                            
0001D830                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D830                            
0001D830                            
0001D830                            Hud_Mins:				; XREF: Hud_ChkTime
0001D830 45F9 0001 D82C             		lea	(Hud_1).l,a2
0001D836 7C00                       		moveq	#0,d6
0001D838 6000                       		bra.s	loc_1C9BA
0001D83A                            ; End of function Hud_Mins
0001D83A                            
0001D83A                            
0001D83A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D83A                            
0001D83A                            
0001D83A                            Hud_Secs:				; XREF: Hud_ChkTime
0001D83A 45F9 0001 D828             		lea	(Hud_10).l,a2
0001D840 7C01                       		moveq	#1,d6
0001D842                            
0001D842                            loc_1C9BA:
0001D842 7800                       		moveq	#0,d4
0001D844 43FA 0000                  		lea	Art_Hud(pc),a1
0001D848                            
0001D848                            Hud_TimeLoop:
0001D848 7400                       		moveq	#0,d2
0001D84A 261A                       		move.l	(a2)+,d3
0001D84C                            
0001D84C                            loc_1C9C4:
0001D84C 9283                       		sub.l	d3,d1
0001D84E 6500                       		bcs.s	loc_1C9CC
0001D850 5242                       		addq.w	#1,d2
0001D852 60F8                       		bra.s	loc_1C9C4
0001D854                            ; ===========================================================================
0001D854                            
0001D854                            loc_1C9CC:
0001D854 D283                       		add.l	d3,d1
0001D856 4A42                       		tst.w	d2
0001D858 6700                       		beq.s	loc_1C9D6
0001D85A 383C 0001                  		move.w	#1,d4
0001D85E                            
0001D85E                            loc_1C9D6:
0001D85E ED4A                       		lsl.w	#6,d2
0001D860 2D40 0004                  		move.l	d0,4(a6)
0001D864 47F1 2000                  		lea	(a1,d2.w),a3
0001D868 2C9B                       		move.l	(a3)+,(a6)
0001D86A 2C9B                       		move.l	(a3)+,(a6)
0001D86C 2C9B                       		move.l	(a3)+,(a6)
0001D86E 2C9B                       		move.l	(a3)+,(a6)
0001D870 2C9B                       		move.l	(a3)+,(a6)
0001D872 2C9B                       		move.l	(a3)+,(a6)
0001D874 2C9B                       		move.l	(a3)+,(a6)
0001D876 2C9B                       		move.l	(a3)+,(a6)
0001D878 2C9B                       		move.l	(a3)+,(a6)
0001D87A 2C9B                       		move.l	(a3)+,(a6)
0001D87C 2C9B                       		move.l	(a3)+,(a6)
0001D87E 2C9B                       		move.l	(a3)+,(a6)
0001D880 2C9B                       		move.l	(a3)+,(a6)
0001D882 2C9B                       		move.l	(a3)+,(a6)
0001D884 2C9B                       		move.l	(a3)+,(a6)
0001D886 2C9B                       		move.l	(a3)+,(a6)
0001D888 0680 0040 0000             		addi.l	#$400000,d0
0001D88E 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001D892                            
0001D892 4E75                       		rts	
0001D894                            ; End of function Hud_Secs
0001D894                            
0001D894                            ; ---------------------------------------------------------------------------
0001D894                            ; Subroutine to	load time/ring bonus numbers patterns
0001D894                            ; ---------------------------------------------------------------------------
0001D894                            
0001D894                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D894                            
0001D894                            
0001D894                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001D894 45F9 0001 D820             		lea	(Hud_1000).l,a2
0001D89A 7C03                       		moveq	#3,d6
0001D89C 7800                       		moveq	#0,d4
0001D89E 43FA 0000                  		lea	Art_Hud(pc),a1
0001D8A2                            
0001D8A2                            Hud_BonusLoop:
0001D8A2 7400                       		moveq	#0,d2
0001D8A4 261A                       		move.l	(a2)+,d3
0001D8A6                            
0001D8A6                            loc_1CA1E:
0001D8A6 9283                       		sub.l	d3,d1
0001D8A8 6500                       		bcs.s	loc_1CA26
0001D8AA 5242                       		addq.w	#1,d2
0001D8AC 60F8                       		bra.s	loc_1CA1E
0001D8AE                            ; ===========================================================================
0001D8AE                            
0001D8AE                            loc_1CA26:
0001D8AE D283                       		add.l	d3,d1
0001D8B0 4A42                       		tst.w	d2
0001D8B2 6700                       		beq.s	loc_1CA30
0001D8B4 383C 0001                  		move.w	#1,d4
0001D8B8                            
0001D8B8                            loc_1CA30:
0001D8B8 4A44                       		tst.w	d4
0001D8BA 6700                       		beq.s	Hud_ClrBonus
0001D8BC ED4A                       		lsl.w	#6,d2
0001D8BE 47F1 2000                  		lea	(a1,d2.w),a3
0001D8C2 2C9B                       		move.l	(a3)+,(a6)
0001D8C4 2C9B                       		move.l	(a3)+,(a6)
0001D8C6 2C9B                       		move.l	(a3)+,(a6)
0001D8C8 2C9B                       		move.l	(a3)+,(a6)
0001D8CA 2C9B                       		move.l	(a3)+,(a6)
0001D8CC 2C9B                       		move.l	(a3)+,(a6)
0001D8CE 2C9B                       		move.l	(a3)+,(a6)
0001D8D0 2C9B                       		move.l	(a3)+,(a6)
0001D8D2 2C9B                       		move.l	(a3)+,(a6)
0001D8D4 2C9B                       		move.l	(a3)+,(a6)
0001D8D6 2C9B                       		move.l	(a3)+,(a6)
0001D8D8 2C9B                       		move.l	(a3)+,(a6)
0001D8DA 2C9B                       		move.l	(a3)+,(a6)
0001D8DC 2C9B                       		move.l	(a3)+,(a6)
0001D8DE 2C9B                       		move.l	(a3)+,(a6)
0001D8E0 2C9B                       		move.l	(a3)+,(a6)
0001D8E2                            
0001D8E2                            loc_1CA5A:
0001D8E2 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001D8E6                            
0001D8E6 4E75                       		rts	
0001D8E8                            ; ===========================================================================
0001D8E8                            
0001D8E8                            Hud_ClrBonus:
0001D8E8 7A0F                       		moveq	#$F,d5
0001D8EA                            
0001D8EA                            Hud_ClrBonusLoop:
0001D8EA 2CBC 0000 0000             		move.l	#0,(a6)
0001D8F0 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001D8F4                            
0001D8F4 60EC                       		bra.s	loc_1CA5A
0001D8F6                            ; End of function Hud_TimeRingBonus
0001D8F6                            
0001D8F6                            ; ---------------------------------------------------------------------------
0001D8F6                            ; Subroutine to	load uncompressed lives	counter	patterns
0001D8F6                            ; ---------------------------------------------------------------------------
0001D8F6                            
0001D8F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D8F6                            
0001D8F6                            
0001D8F6                            Hud_Lives:				; XREF: Hud_ChkLives
0001D8F6 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001D8FC 7200                       		moveq	#0,d1
0001D8FE 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001D902 45F9 0001 D828             		lea	(Hud_10).l,a2
0001D908 7C01                       		moveq	#1,d6
0001D90A 7800                       		moveq	#0,d4
0001D90C 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001D910                            
0001D910                            Hud_LivesLoop:
0001D910 2D40 0004                  		move.l	d0,4(a6)
0001D914 7400                       		moveq	#0,d2
0001D916 261A                       		move.l	(a2)+,d3
0001D918                            
0001D918                            loc_1CA90:
0001D918 9283                       		sub.l	d3,d1
0001D91A 6500                       		bcs.s	loc_1CA98
0001D91C 5242                       		addq.w	#1,d2
0001D91E 60F8                       		bra.s	loc_1CA90
0001D920                            ; ===========================================================================
0001D920                            
0001D920                            loc_1CA98:
0001D920 D283                       		add.l	d3,d1
0001D922 4A42                       		tst.w	d2
0001D924 6700                       		beq.s	loc_1CAA2
0001D926 383C 0001                  		move.w	#1,d4
0001D92A                            
0001D92A                            loc_1CAA2:
0001D92A 4A44                       		tst.w	d4
0001D92C 6700                       		beq.s	Hud_ClrLives
0001D92E                            
0001D92E                            loc_1CAA6:
0001D92E EB4A                       		lsl.w	#5,d2
0001D930 47F1 2000                  		lea	(a1,d2.w),a3
0001D934 2C9B                       		move.l	(a3)+,(a6)
0001D936 2C9B                       		move.l	(a3)+,(a6)
0001D938 2C9B                       		move.l	(a3)+,(a6)
0001D93A 2C9B                       		move.l	(a3)+,(a6)
0001D93C 2C9B                       		move.l	(a3)+,(a6)
0001D93E 2C9B                       		move.l	(a3)+,(a6)
0001D940 2C9B                       		move.l	(a3)+,(a6)
0001D942 2C9B                       		move.l	(a3)+,(a6)
0001D944                            
0001D944                            loc_1CABC:
0001D944 0680 0040 0000             		addi.l	#$400000,d0
0001D94A 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001D94E                            
0001D94E 4E75                       		rts	
0001D950                            ; ===========================================================================
0001D950                            
0001D950                            Hud_ClrLives:
0001D950 4A46                       		tst.w	d6
0001D952 67DA                       		beq.s	loc_1CAA6
0001D954 7A07                       		moveq	#7,d5
0001D956                            
0001D956                            Hud_ClrLivesLoop:
0001D956 2CBC 0000 0000             		move.l	#0,(a6)
0001D95C 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001D960 60E2                       		bra.s	loc_1CABC
0001D962                            ; End of function Hud_Lives
0001D962                            
0001D962                            ; ===========================================================================
0001D962                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001DC62                            		even
0001DC62                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001DDA2                            		even
0001DDA2                            ; ===========================================================================
0001DDA2                            ; ---------------------------------------------------------------------------
0001DDA2                            ; When debug mode is currently in use
0001DDA2                            ; ---------------------------------------------------------------------------
0001DDA2                            
0001DDA2                            DebugMode:				; XREF: Obj01; Obj09
0001DDA2 7000                       		moveq	#0,d0
0001DDA4 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001DDA8 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001DDAC 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001DDB0                            ; ===========================================================================
0001DDB0 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001DDB2 0000                       		dc.w Debug_Skip-Debug_Index
0001DDB4                            ; ===========================================================================
0001DDB4                            
0001DDB4                            Debug_Main:				; XREF: Debug_Index
0001DDB4 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001DDB8 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001DDBE 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001DDC4 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001DDCA 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001DDD0 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001DDD6 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001DDDC 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001DDE2 117C 0000 001A             		move.b	#0,$1A(a0)
0001DDE8 117C 0000 001C             		move.b	#0,$1C(a0)
0001DDEE 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001DDF4 6600                       		bne.s	Debug_Zone	; if not, branch
0001DDF6 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001DDFC 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001DE02 7006                       		moveq	#6,d0		; use 6th debug	item list
0001DE04 6000                       		bra.s	Debug_UseList
0001DE06                            ; ===========================================================================
0001DE06                            
0001DE06                            Debug_Zone:
0001DE06 7000                       		moveq	#0,d0
0001DE08 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001DE0C                            
0001DE0C                            Debug_UseList:
0001DE0C 45F9 0000 0000             		lea	(DebugList).l,a2
0001DE12 D040                       		add.w	d0,d0
0001DE14 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001DE18 3C1A                       		move.w	(a2)+,d6
0001DE1A BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001DE1E 6200                       		bhi.s	loc_1CF9E
0001DE20 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001DE26                            
0001DE26                            loc_1CF9E:
0001DE26 6100 0000                  		bsr.w	Debug_ShowItem
0001DE2A 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001DE30 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001DE36                            
0001DE36                            Debug_Skip:				; XREF: Debug_Index
0001DE36 7006                       		moveq	#6,d0
0001DE38 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001DE3E 6700                       		beq.s	loc_1CFBE
0001DE40 7000                       		moveq	#0,d0
0001DE42 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001DE46                            
0001DE46                            loc_1CFBE:
0001DE46 45F9 0000 0000             		lea	(DebugList).l,a2
0001DE4C D040                       		add.w	d0,d0
0001DE4E D4F2 0000                  		adda.w	(a2,d0.w),a2
0001DE52 3C1A                       		move.w	(a2)+,d6
0001DE54 6100 0000                  		bsr.w	Debug_Control
0001DE58 4EF9 0000 E2A2             		jmp	DisplaySprite
0001DE5E                            
0001DE5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DE5E                            
0001DE5E                            
0001DE5E                            Debug_Control:
0001DE5E 7800                       		moveq	#0,d4
0001DE60 323C 0001                  		move.w	#1,d1
0001DE64 1838 F605                  		move.b	($FFFFF605).w,d4
0001DE68 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001DE6C 6600                       		bne.s	loc_1D018	; if yes, branch
0001DE6E 1038 F604                  		move.b	($FFFFF604).w,d0
0001DE72 0240 000F                  		andi.w	#$F,d0
0001DE76 6600                       		bne.s	loc_1D000
0001DE78 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001DE7E 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001DE84 6000 0000                  		bra.w	Debug_BackItem
0001DE88                            ; ===========================================================================
0001DE88                            
0001DE88                            loc_1D000:
0001DE88 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001DE8C 6600                       		bne.s	loc_1D01C
0001DE8E 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001DE94 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001DE98 6600                       		bne.s	loc_1D018
0001DE9A 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001DEA0                            
0001DEA0                            loc_1D018:
0001DEA0 1838 F604                  		move.b	($FFFFF604).w,d4
0001DEA4                            
0001DEA4                            loc_1D01C:
0001DEA4 7200                       		moveq	#0,d1
0001DEA6 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001DEAA 5241                       		addq.w	#1,d1
0001DEAC 4841                       		swap	d1
0001DEAE E881                       		asr.l	#4,d1
0001DEB0 2428 000C                  		move.l	$C(a0),d2
0001DEB4 2628 0008                  		move.l	8(a0),d3
0001DEB8 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001DEBC 6700                       		beq.s	loc_1D03C	; if not, branch
0001DEBE 9481                       		sub.l	d1,d2
0001DEC0 6400                       		bcc.s	loc_1D03C
0001DEC2 7400                       		moveq	#0,d2
0001DEC4                            
0001DEC4                            loc_1D03C:
0001DEC4 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001DEC8 6700                       		beq.s	loc_1D052	; if not, branch
0001DECA D481                       		add.l	d1,d2
0001DECC 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001DED2 6500                       		bcs.s	loc_1D052
0001DED4 243C 07FF 0000             		move.l	#$7FF0000,d2
0001DEDA                            
0001DEDA                            loc_1D052:
0001DEDA 0804 0002                  		btst	#2,d4
0001DEDE 6700                       		beq.s	loc_1D05E
0001DEE0 9681                       		sub.l	d1,d3
0001DEE2 6400                       		bcc.s	loc_1D05E
0001DEE4 7600                       		moveq	#0,d3
0001DEE6                            
0001DEE6                            loc_1D05E:
0001DEE6 0804 0003                  		btst	#3,d4
0001DEEA 6700                       		beq.s	loc_1D066
0001DEEC D681                       		add.l	d1,d3
0001DEEE                            
0001DEEE                            loc_1D066:
0001DEEE 2142 000C                  		move.l	d2,$C(a0)
0001DEF2 2143 0008                  		move.l	d3,8(a0)
0001DEF6                            
0001DEF6                            Debug_BackItem:
0001DEF6 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001DEFC 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001DEFE 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001DF04 6700                       		beq.s	Debug_NextItem	; if not, branch
0001DF06 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001DF0A 6400                       		bcc.s	Debug_NoLoop
0001DF0C DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001DF10 6000                       		bra.s	Debug_NoLoop
0001DF12                            ; ===========================================================================
0001DF12                            
0001DF12                            Debug_NextItem:
0001DF12 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001DF18 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001DF1A 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001DF1E BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001DF22 6200                       		bhi.s	Debug_NoLoop
0001DF24 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001DF2A                            
0001DF2A                            Debug_NoLoop:
0001DF2A 6000 0000                  		bra.w	Debug_ShowItem
0001DF2E                            ; ===========================================================================
0001DF2E                            
0001DF2E                            Debug_MakeItem:
0001DF2E 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001DF34 6700                       		beq.s	Debug_Exit	; if not, branch
0001DF36 4EB9 0000 E728             		jsr	SingleObjLoad
0001DF3C 6600                       		bne.s	Debug_Exit
0001DF3E 3368 0008 0008             		move.w	8(a0),8(a1)
0001DF44 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001DF4A 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001DF4E 1368 0001 0001             		move.b	1(a0),1(a1)
0001DF54 1368 0001 0022             		move.b	1(a0),$22(a1)
0001DF5A 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001DF60 7000                       		moveq	#0,d0
0001DF62 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001DF66 E748                       		lsl.w	#3,d0
0001DF68 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001DF6E 4E75                       		rts	
0001DF70                            ; ===========================================================================
0001DF70                            
0001DF70                            Debug_Exit:
0001DF70 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001DF76 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001DF78 7000                       		moveq	#0,d0
0001DF7A 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001DF7E 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001DF86 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001DF8C 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001DF90 3140 000A                  		move.w	d0,$A(a0)
0001DF94 3140 000E                  		move.w	d0,$E(a0)
0001DF98 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001DF9E 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001DFA4 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001DFAA 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001DFAC 4278 F780                  		clr.w	($FFFFF780).w
0001DFB0 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001DFB6 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001DFBE 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001DFC4 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001DFCA 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001DFD0 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001DFD6                            
0001DFD6                            Debug_DoNothing:
0001DFD6 4E75                       		rts	
0001DFD8                            ; End of function Debug_Control
0001DFD8                            
0001DFD8                            
0001DFD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DFD8                            
0001DFD8                            
0001DFD8                            Debug_ShowItem:				; XREF: Debug_Main
0001DFD8 7000                       		moveq	#0,d0
0001DFDA 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001DFDE E748                       		lsl.w	#3,d0
0001DFE0 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001DFE6 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001DFEC 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001DFF2 4E75                       		rts	
0001DFF4                            ; End of function Debug_ShowItem
0001DFF4                            
0001DFF4                            ; ===========================================================================
0001DFF4                            ; ---------------------------------------------------------------------------
0001DFF4                            ; Debug	list pointers
0001DFF4                            ; ---------------------------------------------------------------------------
0001DFF4                            DebugList:
0001DFF4                            	include "_inc\Debug list pointers.asm"
0001DFF4                            ; ---------------------------------------------------------------------------
0001DFF4                            ; Debug	list pointers
0001DFF4                            ; ---------------------------------------------------------------------------
0001DFF4 0000                       	dc.w Debug_GHZ-DebugList
0001DFF6 0000                       	dc.w Debug_LZ-DebugList
0001DFF8 0000                       	dc.w Debug_MZ-DebugList
0001DFFA 0000                       	dc.w Debug_SLZ-DebugList
0001DFFC 0000                       	dc.w Debug_SYZ-DebugList
0001DFFE 0000                       	dc.w Debug_SBZ-DebugList
0001E000 0000                       	dc.w Debug_Ending-DebugList
0001E002 0000                       	dc.w Debug_GHZ-DebugList
0001E002 0000                       	dc.w Debug_GHZ-DebugList
0001E004                            
0001E004                            ; ---------------------------------------------------------------------------
0001E004                            ; Debug	list - Green Hill
0001E004                            ; ---------------------------------------------------------------------------
0001E004                            Debug_GHZ:
0001E004                            	include "_inc\Debug list - GHZ.asm"
0001E004                            ; ---------------------------------------------------------------------------
0001E004                            ; Debug	list - Green Hill
0001E004                            ; ---------------------------------------------------------------------------
0001E004 0010                       	dc.w $10			; number of items in list
0001E006 2500 AA9C                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001E00A 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001E00E 2600 B09E                  	dc.l Map_obj26+$26000000
0001E012 0000 0680                  	dc.b 0,	0, 6, $80
0001E016 1F00 A292                  	dc.l Map_obj1F+$1F000000
0001E01A 0000 0400                  	dc.b 0,	0, 4, 0
0001E01E 2200 A54E                  	dc.l Map_obj22+$22000000
0001E022 0000 0444                  	dc.b 0,	0, 4, $44
0001E026 2B00 B710                  	dc.l Map_obj2B+$2B000000
0001E02A 0000 047B                  	dc.b 0,	0, 4, $7B
0001E02E 3600 DC44                  	dc.l Map_obj36+$36000000
0001E032 0000 051B                  	dc.b 0,	0, 5, $1B
0001E036 1800 8BB0                  	dc.l Map_obj18+$18000000
0001E03A 0000 4000                  	dc.b 0,	0, $40,	0
0001E03E 3B00 DD6A                  	dc.l Map_obj3B+$3B000000
0001E042 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001E046 4001 0436                  	dc.l Map_obj40+$40000000
0001E04A 0000 04F0                  	dc.b 0,	0, 4, $F0
0001E04E 4100 E9B6                  	dc.l Map_obj41+$41000000
0001E052 0000 0523                  	dc.b 0,	0, 5, $23
0001E056 4200 EBDA                  	dc.l Map_obj42+$42000000
0001E05A 0000 249B                  	dc.b 0,	0, $24,	$9B
0001E05E 4400 EEE8                  	dc.l Map_obj44+$44000000
0001E062 0000 434C                  	dc.b 0,	0, $43,	$4C
0001E066 1900 8CB0                  	dc.l Map_obj48+$19000000
0001E06A 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001E06E 7901 7E46                  	dc.l Map_obj79+$79000000
0001E072 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E076 4B00 AADC                  	dc.l Map_obj4B+$4B000000
0001E07A 0000 2400                  	dc.b 0,	0, $24,	0
0001E07E 7D01 7F96                  	dc.l Map_obj7D+$7D000000
0001E082 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001E086                            	even
0001E086                            	even
0001E086                            
0001E086                            ; ---------------------------------------------------------------------------
0001E086                            ; Debug	list - Labyrinth
0001E086                            ; ---------------------------------------------------------------------------
0001E086                            Debug_LZ:
0001E086                            	include "_inc\Debug list - LZ.asm"
0001E086                            ; ---------------------------------------------------------------------------
0001E086                            ; Debug	list - Labyrinth
0001E086                            ; ---------------------------------------------------------------------------
0001E086 0019                       	dc.w $19
0001E088 2500 AA9C                  	dc.l Map_obj25+$25000000
0001E08C 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E090 2600 B09E                  	dc.l Map_obj26+$26000000
0001E094 0000 0680                  	dc.b 0,	0, 6, $80
0001E098 4100 E9B6                  	dc.l Map_obj41+$41000000
0001E09C 0000 0523                  	dc.b 0,	0, 5, $23
0001E0A0 2C00 B7C0                  	dc.l Map_obj2C+$2C000000
0001E0A4 0800 2486                  	dc.b 8,	0, $24,	$86
0001E0A8 2D00 B9B6                  	dc.l Map_obj2D+$2D000000
0001E0AC 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001E0B0 1601 2BE4                  	dc.l Map_obj16+$16000000
0001E0B4 0000 03CC                  	dc.b 0,	0, 3, $CC
0001E0B8 1601 2BE4                  	dc.l Map_obj16+$16000000
0001E0BC 0203 03CC                  	dc.b 2,	3, 3, $CC
0001E0C0 3300 CE6C                  	dc.l Map_obj33+$33000000
0001E0C4 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001E0C8 3200 CA2E                  	dc.l Map_obj32+$32000000
0001E0CC 0000 0513                  	dc.b 0,	0, 5, $13
0001E0D0 3600 DC44                  	dc.l Map_obj36+$36000000
0001E0D4 0000 051B                  	dc.b 0,	0, 5, $1B
0001E0D8 5201 0D28                  	dc.l Map_obj52a+$52000000
0001E0DC 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001E0E0 6101 2E08                  	dc.l Map_obj61+$61000000
0001E0E4 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001E0E8 6101 2E08                  	dc.l Map_obj61+$61000000
0001E0EC 1301 43E6                  	dc.b $13, 1, $43, $E6
0001E0F0 6101 2E08                  	dc.l Map_obj61+$61000000
0001E0F4 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001E0F8 6201 2F5C                  	dc.l Map_obj62+$62000000
0001E0FC 0000 443E                  	dc.b 0,	0, $44,	$3E
0001E100 6101 2E08                  	dc.l Map_obj61+$61000000
0001E104 2702 43E6                  	dc.b $27, 2, $43, $E6
0001E108 6101 2E08                  	dc.l Map_obj61+$61000000
0001E10C 3003 43E6                  	dc.b $30, 3, $43, $E6
0001E110 6301 32BA                  	dc.l Map_obj63+$63000000
0001E114 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001E118 6001 2B2E                  	dc.l Map_obj60+$60000000
0001E11C 0000 0467                  	dc.b 0,	0, 4, $67
0001E120 6401 3600                  	dc.l Map_obj64+$64000000
0001E124 8413 8348                  	dc.b $84, $13, $83, $48
0001E128 6501 3788                  	dc.l Map_obj65+$65000000
0001E12C 0202 C259                  	dc.b 2,	2, $C2,	$59
0001E130 6501 3788                  	dc.l Map_obj65+$65000000
0001E134 0909 C259                  	dc.b 9,	9, $C2,	$59
0001E138 0B01 1F86                  	dc.l Map_obj0B+$B000000
0001E13C 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001E140 0C01 2056                  	dc.l Map_obj0C+$C000000
0001E144 0200 4328                  	dc.b 2,	0, $43,	$28
0001E148 7901 7E46                  	dc.l Map_obj79+$79000000
0001E14C 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E150                            	even
0001E150                            	even
0001E150                            
0001E150                            ; ---------------------------------------------------------------------------
0001E150                            ; Debug	list - Marble
0001E150                            ; ---------------------------------------------------------------------------
0001E150                            Debug_MZ:
0001E150                            	include "_inc\Debug list - MZ.asm"
0001E150                            ; ---------------------------------------------------------------------------
0001E150                            ; Debug	list - Marble
0001E150                            ; ---------------------------------------------------------------------------
0001E150 0012                       	dc.w $12
0001E152 2500 AA9C                  	dc.l Map_obj25+$25000000
0001E156 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E15A 2600 B09E                  	dc.l Map_obj26+$26000000
0001E15E 0000 0680                  	dc.b 0,	0, 6, $80
0001E162 2200 A54E                  	dc.l Map_obj22+$22000000
0001E166 0000 0444                  	dc.b 0,	0, 4, $44
0001E16A 3600 DC44                  	dc.l Map_obj36+$36000000
0001E16E 0000 051B                  	dc.b 0,	0, 5, $1B
0001E172 4100 E9B6                  	dc.l Map_obj41+$41000000
0001E176 0000 0523                  	dc.b 0,	0, 5, $23
0001E17A 1300 BEF8                  	dc.l Map_obj14+$13000000
0001E17E 0000 0345                  	dc.b 0,	0, 3, $45
0001E182 4600 F596                  	dc.l Map_obj46+$46000000
0001E186 0000 4000                  	dc.b 0,	0, $40,	0
0001E18A 4C00 FEE2                  	dc.l Map_obj4C+$4C000000
0001E18E 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001E192 4E01 01C6                  	dc.l Map_obj4E+$4E000000
0001E196 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001E19A 3300 CE6C                  	dc.l Map_obj33+$33000000
0001E19E 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001E1A2 5001 05C4                  	dc.l Map_obj50+$50000000
0001E1A6 0000 247B                  	dc.b 0,	0, $24,	$7B
0001E1AA 5101 0A60                  	dc.l Map_obj51+$51000000
0001E1AE 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001E1B2 5201 0CD2                  	dc.l Map_obj52+$52000000
0001E1B6 0000 02B8                  	dc.b 0,	0, 2, $B8
0001E1BA 5300 9248                  	dc.l Map_obj53+$53000000
0001E1BE 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001E1C2 5400 FEA8                  	dc.l Map_obj54+$54000000
0001E1C6 0000 8680                  	dc.b 0,	0, $86,	$80
0001E1CA 5501 0EAC                  	dc.l Map_obj55+$55000000
0001E1CE 0000 04B8                  	dc.b 0,	0, 4, $B8
0001E1D2 7801 7AC0                  	dc.l Map_obj78+$78000000
0001E1D6 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001E1DA 7901 7E46                  	dc.l Map_obj79+$79000000
0001E1DE 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E1E2                            	even
0001E1E2                            	even
0001E1E2                            
0001E1E2                            ; ---------------------------------------------------------------------------
0001E1E2                            ; Debug	list - Star Light
0001E1E2                            ; ---------------------------------------------------------------------------
0001E1E2                            Debug_SLZ:
0001E1E2                            	include "_inc\Debug list - SLZ.asm"
0001E1E2                            ; ---------------------------------------------------------------------------
0001E1E2                            ; Debug	list - Star Light
0001E1E2                            ; ---------------------------------------------------------------------------
0001E1E2 000F                       	dc.w $F
0001E1E4 2500 AA9C                  	dc.l Map_obj25+$25000000
0001E1E8 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E1EC 2600 B09E                  	dc.l Map_obj26+$26000000
0001E1F0 0000 0680                  	dc.b 0,	0, 6, $80
0001E1F4 5901 19AE                  	dc.l Map_obj59+$59000000
0001E1F8 0000 4000                  	dc.b 0,	0, $40,	0
0001E1FC 5300 9248                  	dc.l Map_obj53+$53000000
0001E200 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001E204 1800 8C0E                  	dc.l Map_obj18b+$18000000
0001E208 0000 4000                  	dc.b 0,	0, $40,	0
0001E20C 5A01 1AE8                  	dc.l Map_obj5A+$5A000000
0001E210 0000 4000                  	dc.b 0,	0, $40,	0
0001E214 5B01 1CA0                  	dc.l Map_obj5B+$5B000000
0001E218 0000 4000                  	dc.b 0,	0, $40,	0
0001E21C 5D01 2270                  	dc.l Map_obj5D+$5D000000
0001E220 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001E224 5E01 2602                  	dc.l Map_obj5E+$5E000000
0001E228 0000 0374                  	dc.b 0,	0, 3, $74
0001E22C 4100 E9B6                  	dc.l Map_obj41+$41000000
0001E230 0000 0523                  	dc.b 0,	0, 5, $23
0001E234 1300 BEF8                  	dc.l Map_obj14+$13000000
0001E238 0000 0480                  	dc.b 0,	0, 4, $80
0001E23C 1C00 9358                  	dc.l Map_obj1C+$1C000000
0001E240 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001E244 5F01 2878                  	dc.l Map_obj5F+$5F000000
0001E248 0000 0400                  	dc.b 0,	0, 4, 0
0001E24C 6001 2B2E                  	dc.l Map_obj60+$60000000
0001E250 0000 2429                  	dc.b 0,	0, $24,	$29
0001E254 7901 7E46                  	dc.l Map_obj79+$79000000
0001E258 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E25C                            	even
0001E25C                            	even
0001E25C                            
0001E25C                            ; ---------------------------------------------------------------------------
0001E25C                            ; Debug	list - Spring Yard
0001E25C                            ; ---------------------------------------------------------------------------
0001E25C                            Debug_SYZ:
0001E25C                            	include "_inc\Debug list - SYZ.asm"
0001E25C                            ; ---------------------------------------------------------------------------
0001E25C                            ; Debug	list - Spring Yard
0001E25C                            ; ---------------------------------------------------------------------------
0001E25C 000F                       	dc.w $F
0001E25E 2500 AA9C                  	dc.l Map_obj25+$25000000
0001E262 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E266 2600 B09E                  	dc.l Map_obj26+$26000000
0001E26A 0000 0680                  	dc.b 0,	0, 6, $80
0001E26E 3600 DC44                  	dc.l Map_obj36+$36000000
0001E272 0000 051B                  	dc.b 0,	0, 5, $1B
0001E276 4100 E9B6                  	dc.l Map_obj41+$41000000
0001E27A 0000 0523                  	dc.b 0,	0, 5, $23
0001E27E 4300 EE3A                  	dc.l Map_obj43+$43000000
0001E282 0000 04B8                  	dc.b 0,	0, 4, $B8
0001E286 1200 F614                  	dc.l Map_obj12+$12000000
0001E28A 0000 0000                  	dc.b 0,	0, 0, 0
0001E28E 4700 F790                  	dc.l Map_obj47+$47000000
0001E292 0000 0380                  	dc.b 0,	0, 3, $80
0001E296 1F00 A292                  	dc.l Map_obj1F+$1F000000
0001E29A 0000 0400                  	dc.b 0,	0, 4, 0
0001E29E 2200 A54E                  	dc.l Map_obj22+$22000000
0001E2A2 0000 0444                  	dc.b 0,	0, 4, $44
0001E2A6 5001 05C4                  	dc.l Map_obj50+$50000000
0001E2AA 0000 247B                  	dc.b 0,	0, $24,	$7B
0001E2AE 1800 8BFC                  	dc.l Map_obj18a+$18000000
0001E2B2 0000 4000                  	dc.b 0,	0, $40,	0
0001E2B6 5601 136E                  	dc.l Map_obj56+$56000000
0001E2BA 0000 4000                  	dc.b 0,	0, $40,	0
0001E2BE 3200 CA2E                  	dc.l Map_obj32+$32000000
0001E2C2 0000 0513                  	dc.b 0,	0, 5, $13
0001E2C6 7801 7AC0                  	dc.l Map_obj78+$78000000
0001E2CA 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001E2CE 7901 7E46                  	dc.l Map_obj79+$79000000
0001E2D2 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E2D6                            	even
0001E2D6                            	even
0001E2D6                            
0001E2D6                            ; ---------------------------------------------------------------------------
0001E2D6                            ; Debug	list - Scrap Brain
0001E2D6                            ; ---------------------------------------------------------------------------
0001E2D6                            Debug_SBZ:
0001E2D6                            	include "_inc\Debug list - SBZ.asm"
0001E2D6                            ; ---------------------------------------------------------------------------
0001E2D6                            ; Debug	list - Scrap Brain
0001E2D6                            ; ---------------------------------------------------------------------------
0001E2D6 001D                       	dc.w $1D
0001E2D8 2500 AA9C                  	dc.l Map_obj25+$25000000
0001E2DC 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E2E0 2600 B09E                  	dc.l Map_obj26+$26000000
0001E2E4 0000 0680                  	dc.b 0,	0, 6, $80
0001E2E8 5F01 2878                  	dc.l Map_obj5F+$5F000000
0001E2EC 0000 0400                  	dc.b 0,	0, 4, 0
0001E2F0 6001 2B2E                  	dc.l Map_obj60+$60000000
0001E2F4 0000 0429                  	dc.b 0,	0, 4, $29
0001E2F8 7801 7AC0                  	dc.l Map_obj78+$78000000
0001E2FC 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001E300 1501 170A                  	dc.l Map_obj15b+$15000000
0001E304 0702 4391                  	dc.b 7,	2, $43,	$91
0001E308 6701 63D8                  	dc.l Map_obj67+$67000000
0001E30C E000 C344                  	dc.b $E0, 0, $C3, $44
0001E310 5201 0CD2                  	dc.l Map_obj52+$52000000
0001E314 2802 22C0                  	dc.b $28, 2, $22, $C0
0001E318 3200 CA2E                  	dc.l Map_obj32+$32000000
0001E31C 0000 0513                  	dc.b 0,	0, 5, $13
0001E320 6901 6632                  	dc.l Map_obj69+$69000000
0001E324 0300 4492                  	dc.b 3,	0, $44,	$92
0001E328 6901 668C                  	dc.l Map_obj69a+$69000000
0001E32C 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001E330 6A01 68EA                  	dc.l Map_obj6A+$6A000000
0001E334 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001E338 5300 9248                  	dc.l Map_obj53+$53000000
0001E33C 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001E340 5201 0CD2                  	dc.l Map_obj52+$52000000
0001E344 3903 4460                  	dc.b $39, 3, $44, $60
0001E348 6B01 6CBA                  	dc.l Map_obj6B+$6B000000
0001E34C 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001E350 2A00 94EE                  	dc.l Map_obj2A+$2A000000
0001E354 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001E358 6B01 6CBA                  	dc.l Map_obj6B+$6B000000
0001E35C 1301 22C0                  	dc.b $13, 1, $22, $C0
0001E360 6A01 68EA                  	dc.l Map_obj6A+$6A000000
0001E364 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001E368 6B01 6CBA                  	dc.l Map_obj6B+$6B000000
0001E36C 2401 22C0                  	dc.b $24, 1, $22, $C0
0001E370 6A01 68EA                  	dc.l Map_obj6A+$6A000000
0001E374 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001E378 6B01 6CBA                  	dc.l Map_obj6B+$6B000000
0001E37C 3401 22C0                  	dc.b $34, 1, $22, $C0
0001E380 6C01 6E7C                  	dc.l Map_obj6C+$6C000000
0001E384 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001E388 6D00 F28A                  	dc.l Map_obj6D+$6D000000
0001E38C 6400 83D9                  	dc.b $64, 0, $83, $D9
0001E390 6D00 F28A                  	dc.l Map_obj6D+$6D000000
0001E394 640B 83D9                  	dc.b $64, $B, $83, $D9
0001E398 6E01 6F32                  	dc.l Map_obj6E+$6E000000
0001E39C 0400 047E                  	dc.b 4,	0, 4, $7E
0001E3A0 7001 7384                  	dc.l Map_obj70+$70000000
0001E3A4 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001E3A8 7101 2116                  	dc.l Map_obj71+$71000000
0001E3AC 1100 8680                  	dc.b $11, 0, $86, $80
0001E3B0 1E00 99A6                  	dc.l Map_obj1E+$1E000000
0001E3B4 0400 2302                  	dc.b 4,	0, $23,	2
0001E3B8 7901 7E46                  	dc.l Map_obj79+$79000000
0001E3BC 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E3C0                            	even
0001E3C0                            	even
0001E3C0                            
0001E3C0                            ; ---------------------------------------------------------------------------
0001E3C0                            ; Debug	list - ending sequence / special stage
0001E3C0                            ; ---------------------------------------------------------------------------
0001E3C0                            Debug_Ending:
0001E3C0                            	include "_inc\Debug list - Ending and SS.asm"
0001E3C0                            ; ---------------------------------------------------------------------------
0001E3C0                            ; Debug	list - ending sequence / special stage
0001E3C0                            ; ---------------------------------------------------------------------------
0001E3C0 000D                       	dc.w $D
0001E3C2 2500 AA9C                  	dc.l Map_obj25+$25000000
0001E3C6 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E3CA 4700 F790                  	dc.l Map_obj47+$47000000
0001E3CE 0000 0380                  	dc.b 0,	0, 3, $80
0001E3D2 2800 9FC4                  	dc.l Map_obj28a+$28000000
0001E3D6 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001E3DA 2800 9FC4                  	dc.l Map_obj28a+$28000000
0001E3DE 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001E3E2 2800 9FC4                  	dc.l Map_obj28a+$28000000
0001E3E6 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001E3EA 2800 9FAC                  	dc.l Map_obj28+$28000000
0001E3EE 0D00 0553                  	dc.b $D, 0, 5, $53
0001E3F2 2800 9FAC                  	dc.l Map_obj28+$28000000
0001E3F6 0E00 0553                  	dc.b $E, 0, 5, $53
0001E3FA 2800 9FAC                  	dc.l Map_obj28+$28000000
0001E3FE 0F00 0573                  	dc.b $F, 0, 5, $73
0001E402 2800 9FAC                  	dc.l Map_obj28+$28000000
0001E406 1000 0573                  	dc.b $10, 0, 5,	$73
0001E40A 2800 9FC4                  	dc.l Map_obj28a+$28000000
0001E40E 1100 0585                  	dc.b $11, 0, 5,	$85
0001E412 2800 9FDC                  	dc.l Map_obj28b+$28000000
0001E416 1200 0593                  	dc.b $12, 0, 5,	$93
0001E41A 2800 9FC4                  	dc.l Map_obj28a+$28000000
0001E41E 1300 0565                  	dc.b $13, 0, 5,	$65
0001E422 2800 9FDC                  	dc.l Map_obj28b+$28000000
0001E426 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001E42A                            	even
0001E42A                            	even
0001E42A                            
0001E42A                            ; ---------------------------------------------------------------------------
0001E42A                            ; Main level load blocks
0001E42A                            ; ---------------------------------------------------------------------------
0001E42A                            MainLoadBlocks:
0001E42A                            	include "_inc\Main level load blocks.asm"
0001E42A                            ; ---------------------------------------------------------------------------
0001E42A                            ; Main level load blocks
0001E42A                            ;
0001E42A                            ; ===FORMAT===
0001E42A                            ; level	patterns + (1st	PLC num	* 10^6)
0001E42A                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001E42A                            ; 256x256 mappings
0001E42A                            ; blank, music (unused), pal index (unused), pal index
0001E42A                            ; ---------------------------------------------------------------------------
0001E42A 0000 0000                  	dc.l Nem_GHZ_2nd|4<<24
0001E42E 0000 0000                  	dc.l Blk16_GHZ|5<<24
0001E432 0000 0000                  	dc.l Blk256_GHZ
0001E436 0081 0404                  	dc.b 0,	$81, 4,	4
0001E43A 0000 0000                  	dc.l Nem_LZ|6<<24
0001E43E 0000 0000                  	dc.l Blk16_LZ|7<<24
0001E442 0000 0000                  	dc.l Blk256_LZ
0001E446 0082 0505                  	dc.b 0,	$82, 5,	5
0001E44A 0000 0000                  	dc.l Nem_MZ|8<<24
0001E44E 0000 0000                  	dc.l Blk16_MZ|9<<24
0001E452 0000 0000                  	dc.l Blk256_MZ
0001E456 0083 0606                  	dc.b 0,	$83, 6,	6
0001E45A 0000 0000                  	dc.l Nem_SLZ|$A<<24
0001E45E 0000 0000                  	dc.l Blk16_SLZ|$B<<24
0001E462 0000 0000                  	dc.l Blk256_SLZ
0001E466 0084 0707                  	dc.b 0,	$84, 7,	7
0001E46A 0000 0000                  	dc.l Nem_SYZ|$C<<24
0001E46E 0000 0000                  	dc.l Blk16_SYZ|$D<<24
0001E472 0000 0000                  	dc.l Blk256_SYZ
0001E476 0085 0808                  	dc.b 0,	$85, 8,	8
0001E47A 0000 0000                  	dc.l Nem_SBZ|$E<<24
0001E47E 0000 0000                  	dc.l Blk16_SBZ|$F<<24
0001E482 0000 0000                  	dc.l Blk256_SBZ
0001E486 0086 0909                  	dc.b 0,	$86, 9,	9
0001E48A 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001E48E 0000 0000                  	dc.l Blk16_GHZ
0001E492 0000 0000                  	dc.l Blk256_GHZ
0001E496 0086 1313                  	dc.b 0,	$86, $13, $13
0001E49A                            ; there you go lol
0001E49A 0000 0000                  	dc.l Nem_BHZ_2nd|$20<<24 ; MAKOTO ZONE
0001E49E 0000 0000                  	dc.l Blk16_BHZ|$21<<24
0001E4A2 0000 0000                  	dc.l Blk256_BHZ
0001E4A6 009E 1515                  	dc.b 0,	$9E, $15, $15
0001E4AA                            	even
0001E4AA                            	even
0001E4AA                            
0001E4AA                            ; ---------------------------------------------------------------------------
0001E4AA                            ; Pattern load cues
0001E4AA                            ; ---------------------------------------------------------------------------
0001E4AA                            ArtLoadCues:
0001E4AA                            	include "_inc\Pattern load cues.asm"
0001E4AA                            ; ---------------------------------------------------------------------------
0001E4AA                            ; Pattern load cues - index
0001E4AA                            ; ---------------------------------------------------------------------------
0001E4AA 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues	; 0
0001E4AE 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues	; 2
0001E4B2 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues		; 4
0001E4B6 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001E4BA 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001E4BE 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001E4C2 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001E4C6 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001E4CA 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues	; $10
0001E4CE 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001E4D2 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001E4D6 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001E4DA 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001E4DE 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001E4E2 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001E4E6 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001E4EA                            
0001E4EA 0000 0000                  	dc.w PLC_BHZ-ArtLoadCues, PLC_BHZ2-ArtLoadCues		; $20
0001E4EE 0000                       	dc.w Plc_TetoBoss-ArtLoadCues
0001E4F0                            ; ---------------------------------------------------------------------------
0001E4F0                            ; Pattern load cues - standard block 1
0001E4F0                            ; ---------------------------------------------------------------------------
0001E4F0 0004                       PLC_Main:	dc.w 4
0001E4F2 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001E4F6 F400                       		dc.w $F400
0001E4F8 0000 0000                  		dc.l Nem_Hud		; HUD
0001E4FC D940                       		dc.w $D940
0001E4FE 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001E502 FA80                       		dc.w $FA80
0001E504 0000 0000                  		dc.l Nem_Ring		; rings
0001E508 F640                       		dc.w $F640
0001E50A 0000 0000                  		dc.l Nem_Points		; points from enemy
0001E50E F2E0                       		dc.w $F2E0
0001E510                            ; ---------------------------------------------------------------------------
0001E510                            ; Pattern load cues - standard block 2
0001E510                            ; ---------------------------------------------------------------------------
0001E510 0002                       PLC_Main2:	dc.w 2
0001E512 0000 0000                  		dc.l Nem_Monitors	; monitors
0001E516 D000                       		dc.w $D000
0001E518 0000 0000                  		dc.l Nem_Shield		; shield
0001E51C A820                       		dc.w $A820
0001E51E 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001E522 AB80                       		dc.w $AB80
0001E524                            ; ---------------------------------------------------------------------------
0001E524                            ; Pattern load cues - explosion
0001E524                            ; ---------------------------------------------------------------------------
0001E524 0000                       PLC_Explode:	dc.w 0
0001E526 0000 0000                  		dc.l Nem_Explode	; explosion
0001E52A B400                       		dc.w $B400
0001E52C                            ; ---------------------------------------------------------------------------
0001E52C                            ; Pattern load cues - game/time	over
0001E52C                            ; ---------------------------------------------------------------------------
0001E52C 0000                       PLC_GameOver:	dc.w 0
0001E52E 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001E532 ABC0                       		dc.w $ABC0
0001E534                            ; ---------------------------------------------------------------------------
0001E534                            ; Pattern load cues - Green Hill
0001E534                            ; ---------------------------------------------------------------------------
0001E534 000B                       PLC_GHZ:	dc.w $B
0001E536 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E53A 0000                       		dc.w 0
0001E53C 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E540 39A0                       		dc.w $39A0
0001E542 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E546 6B00                       		dc.w $6B00
0001E548 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001E54C 7A00                       		dc.w $7A00
0001E54E 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E552 8000                       		dc.w $8000
0001E554 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E558 8880                       		dc.w $8880
0001E55A 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001E55E 8F60                       		dc.w $8F60
0001E560 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001E564 9360                       		dc.w $9360
0001E566 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001E56A 9E00                       		dc.w $9E00
0001E56C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E570 A360                       		dc.w $A360
0001E572 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E576 A460                       		dc.w $A460
0001E578 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E57C A660                       		dc.w $A660
0001E57E 0005                       PLC_GHZ2:	dc.w 5
0001E580 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E584 7000                       		dc.w $7000
0001E586 0000 0000                  		dc.l Nem_Bridge		; bridge
0001E58A 71C0                       		dc.w $71C0
0001E58C 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001E590 7300                       		dc.w $7300
0001E592 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001E596 7540                       		dc.w $7540
0001E598 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001E59C A1E0                       		dc.w $A1E0
0001E59E 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001E5A2 6980                       		dc.w $6980
0001E5A4                            ; ---------------------------------------------------------------------------
0001E5A4                            ; Pattern load cues - Labyrinth
0001E5A4                            ; ---------------------------------------------------------------------------
0001E5A4 000B                       PLC_LZ:		dc.w $B
0001E5A6 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001E5AA 0000                       		dc.w 0
0001E5AC 0000 0000                  		dc.l Nem_LzBlock1	; block
0001E5B0 3C00                       		dc.w $3C00
0001E5B2 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001E5B6 3E00                       		dc.w $3E00
0001E5B8 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001E5BC 4B20                       		dc.w $4B20
0001E5BE 0000 0000                  		dc.l Nem_Water		; water	surface
0001E5C2 6000                       		dc.w $6000
0001E5C4 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001E5C8 6200                       		dc.w $6200
0001E5CA 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001E5CE 6500                       		dc.w $6500
0001E5D0 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001E5D4 6900                       		dc.w $6900
0001E5D6 0000 0000                  		dc.l Nem_LzBlock3	; block
0001E5DA 7780                       		dc.w $7780
0001E5DC 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001E5E0 7880                       		dc.w $7880
0001E5E2 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001E5E6 7980                       		dc.w $7980
0001E5E8 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001E5EC 94C0                       		dc.w $94C0
0001E5EE 000C                       PLC_LZ2:	dc.w $C
0001E5F0 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001E5F4 7BC0                       		dc.w $7BC0
0001E5F6 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001E5FA 7CC0                       		dc.w $7CC0
0001E5FC 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001E600 7EC0                       		dc.w $7EC0
0001E602 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001E606 5D20                       		dc.w $5D20
0001E608 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001E60C 8800                       		dc.w $8800
0001E60E 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001E612 89E0                       		dc.w $89E0
0001E614 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E618 8CE0                       		dc.w $8CE0
0001E61A 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001E61E 90C0                       		dc.w $90C0
0001E620 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E624 A1E0                       		dc.w $A1E0
0001E626 0000 0000                  		dc.l Nem_Cork		; cork block
0001E62A A000                       		dc.w $A000
0001E62C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E630 A360                       		dc.w $A360
0001E632 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E636 A460                       		dc.w $A460
0001E638 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E63C A660                       		dc.w $A660
0001E63E                            ; ---------------------------------------------------------------------------
0001E63E                            ; Pattern load cues - Marble
0001E63E                            ; ---------------------------------------------------------------------------
0001E63E 0009                       PLC_MZ:		dc.w 9
0001E640 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001E644 0000                       		dc.w 0
0001E646 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001E64A 6000                       		dc.w $6000
0001E64C 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E650 68A0                       		dc.w $68A0
0001E652 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E656 7000                       		dc.w $7000
0001E658 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001E65C 71C0                       		dc.w $71C0
0001E65E 0000 0000                  		dc.l Nem_Lava		; lava
0001E662 7500                       		dc.w $7500
0001E664 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E668 8880                       		dc.w $8880
0001E66A 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E66E 8F60                       		dc.w $8F60
0001E670 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001E674 9700                       		dc.w $9700
0001E676 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E67A 9FE0                       		dc.w $9FE0
0001E67C 0004                       PLC_MZ2:	dc.w 4
0001E67E 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001E682 A260                       		dc.w $A260
0001E684 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E688 A360                       		dc.w $A360
0001E68A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E68E A460                       		dc.w $A460
0001E690 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E694 A660                       		dc.w $A660
0001E696 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001E69A 5700                       		dc.w $5700
0001E69C                            ; ---------------------------------------------------------------------------
0001E69C                            ; Pattern load cues - Star Light
0001E69C                            ; ---------------------------------------------------------------------------
0001E69C 0008                       PLC_SLZ:	dc.w 8
0001E69E 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001E6A2 0000                       		dc.w 0
0001E6A4 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E6A8 8000                       		dc.w $8000
0001E6AA 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E6AE 8520                       		dc.w $8520
0001E6B0 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E6B4 9000                       		dc.w $9000
0001E6B6 0000 0000                  		dc.l Nem_SlzBlock	; block
0001E6BA 9C00                       		dc.w $9C00
0001E6BC 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001E6C0 A260                       		dc.w $A260
0001E6C2 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E6C6 A360                       		dc.w $A360
0001E6C8 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E6CC A460                       		dc.w $A460
0001E6CE 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E6D2 A660                       		dc.w $A660
0001E6D4 0005                       PLC_SLZ2:	dc.w 5
0001E6D6 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001E6DA 6E80                       		dc.w $6E80
0001E6DC 0000 0000                  		dc.l Nem_Fan		; fan
0001E6E0 7400                       		dc.w $7400
0001E6E2 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001E6E6 7980                       		dc.w $7980
0001E6E8 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001E6EC 7B80                       		dc.w $7B80
0001E6EE 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001E6F2 9B00                       		dc.w $9B00
0001E6F4 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001E6F8 9E00                       		dc.w $9E00
0001E6FA                            ; ---------------------------------------------------------------------------
0001E6FA                            ; Pattern load cues - Spring Yard
0001E6FA                            ; ---------------------------------------------------------------------------
0001E6FA 0004                       PLC_SYZ:	dc.w 4
0001E6FC 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001E700 0000                       		dc.w 0
0001E702 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E706 8000                       		dc.w $8000
0001E708 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E70C 8880                       		dc.w $8880
0001E70E 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E712 8F60                       		dc.w $8F60
0001E714 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001E718 9700                       		dc.w $9700
0001E71A 0007                       PLC_SYZ2:	dc.w 7
0001E71C 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E720 7000                       		dc.w $7000
0001E722 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E726 72C0                       		dc.w $72C0
0001E728 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001E72C 7740                       		dc.w $7740
0001E72E 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E732 9FE0                       		dc.w $9FE0
0001E734 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E738 A1E0                       		dc.w $A1E0
0001E73A 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E73E A360                       		dc.w $A360
0001E740 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E744 A460                       		dc.w $A460
0001E746 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E74A A660                       		dc.w $A660
0001E74C                            ; ---------------------------------------------------------------------------
0001E74C                            ; Pattern load cues - Scrap Brain
0001E74C                            ; ---------------------------------------------------------------------------
0001E74C 000B                       PLC_SBZ:	dc.w $B
0001E74E 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001E752 0000                       		dc.w 0
0001E754 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001E758 5800                       		dc.w $5800
0001E75A 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001E75E 5D00                       		dc.w $5D00
0001E760 0000 0000                  		dc.l Nem_Girder		; girder
0001E764 5E00                       		dc.w $5E00
0001E766 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001E76A 6040                       		dc.w $6040
0001E76C 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001E770 6880                       		dc.w $6880
0001E772 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001E776 6900                       		dc.w $6900
0001E778 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E77C 7220                       		dc.w $7220
0001E77E 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001E782 76A0                       		dc.w $76A0
0001E784 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001E788 7B20                       		dc.w $7B20
0001E78A 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E78E 7EA0                       		dc.w $7EA0
0001E790 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001E794 9860                       		dc.w $9860
0001E796 000C                       PLC_SBZ2:	dc.w $C
0001E798 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E79C 5600                       		dc.w $5600
0001E79E 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E7A2 8000                       		dc.w $8000
0001E7A4 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E7A8 8520                       		dc.w $8520
0001E7AA 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001E7AE 8C00                       		dc.w $8C00
0001E7B0 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001E7B4 8DE0                       		dc.w $8DE0
0001E7B6 0000 0000                  		dc.l Nem_Electric	; electric orb
0001E7BA 8FC0                       		dc.w $8FC0
0001E7BC 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001E7C0 9240                       		dc.w $9240
0001E7C2 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E7C6 7F20                       		dc.w $7F20
0001E7C8 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001E7CC 9BE0                       		dc.w $9BE0
0001E7CE 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E7D2 A1E0                       		dc.w $A1E0
0001E7D4 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E7D8 A360                       		dc.w $A360
0001E7DA 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E7DE A460                       		dc.w $A460
0001E7E0 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E7E4 A660                       		dc.w $A660
0001E7E6                            ; ---------------------------------------------------------------------------
0001E7E6                            ; Pattern load cues - DR. Breen Hill
0001E7E6                            ; ---------------------------------------------------------------------------
0001E7E6 000B                       PLC_BHZ:	dc.w $B
0001E7E8 0000 0000                  		dc.l Nem_BHZ_1st	; GHZ main patterns
0001E7EC 0000                       		dc.w 0
0001E7EE 0000 0000                  		dc.l Nem_BHZ_2nd	; GHZ secondary	patterns
0001E7F2 39A0                       		dc.w $39A0
0001E7F4 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E7F8 6B00                       		dc.w $6B00
0001E7FA 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001E7FE 7A00                       		dc.w $7A00
0001E800 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E804 8000                       		dc.w $8000
0001E806 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E80A 8880                       		dc.w $8880
0001E80C 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001E810 8F60                       		dc.w $8F60
0001E812 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001E816 9360                       		dc.w $9360
0001E818 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001E81C 9E00                       		dc.w $9E00
0001E81E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E822 A360                       		dc.w $A360
0001E824 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E828 A460                       		dc.w $A460
0001E82A 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E82E A660                       		dc.w $A660
0001E830 0005                       PLC_BHZ2:	dc.w 5
0001E832 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E836 7000                       		dc.w $7000
0001E838 0000 0000                  		dc.l Nem_Bridge		; bridge
0001E83C 71C0                       		dc.w $71C0
0001E83E 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001E842 7300                       		dc.w $7300
0001E844 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001E848 7540                       		dc.w $7540
0001E84A 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001E84E A1E0                       		dc.w $A1E0
0001E850 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001E854 6980                       		dc.w $6980
0001E856                            ; ---------------------------------------------------------------------------
0001E856                            ; Pattern load cues - title card
0001E856                            ; ---------------------------------------------------------------------------
0001E856 0000                       PLC_TitleCard:	dc.w 0
0001E858 0000 0000                  		dc.l Nem_TitleCard
0001E85C B000                       		dc.w $B000
0001E85E                            ; ---------------------------------------------------------------------------
0001E85E                            ; Pattern load cues - act 3 boss
0001E85E                            ; ---------------------------------------------------------------------------
0001E85E 0005                       PLC_Boss:	dc.w 5
0001E860 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E864 8000                       		dc.w $8000
0001E866 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001E86A 8D80                       		dc.w $8D80
0001E86C 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E870 93A0                       		dc.w $93A0
0001E872 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001E876 A300                       		dc.w $A300
0001E878 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001E87C A300                       		dc.w $A300
0001E87E 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E882 A540                       		dc.w $A540
0001E884                            ; ---------------------------------------------------------------------------
0001E884                            ; Pattern load cues - act 1/2 signpost
0001E884                            ; ---------------------------------------------------------------------------
0001E884 0002                       PLC_Signpost:	dc.w 2
0001E886 0000 0000                  		dc.l Nem_SignPost	; signpost
0001E88A D000                       		dc.w $D000
0001E88C 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001E890 96C0                       		dc.w $96C0
0001E892 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001E896 8C40                       		dc.w $8C40
0001E898                            ; ---------------------------------------------------------------------------
0001E898                            ; Pattern load cues - beta special stage warp effect
0001E898                            ; ---------------------------------------------------------------------------
0001E898 0000                       PLC_Warp:	dc.w 0
0001E89A 0000 0000                  		dc.l Nem_Warp
0001E89E A820                       		dc.w $A820
0001E8A0                            ; ---------------------------------------------------------------------------
0001E8A0                            ; Pattern load cues - special stage
0001E8A0                            ; ---------------------------------------------------------------------------
0001E8A0 0010                       PLC_SpeStage:	dc.w $10
0001E8A2 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001E8A6 0000                       		dc.w 0
0001E8A8 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001E8AC 0A20                       		dc.w $A20
0001E8AE 0000 0000                  		dc.l Nem_SSWalls	; walls
0001E8B2 2840                       		dc.w $2840
0001E8B4 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E8B8 4760                       		dc.w $4760
0001E8BA 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001E8BE 4A20                       		dc.w $4A20
0001E8C0 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001E8C4 4C60                       		dc.w $4C60
0001E8C6 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001E8CA 5E00                       		dc.w $5E00
0001E8CC 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001E8D0 6E00                       		dc.w $6E00
0001E8D2 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001E8D6 7E00                       		dc.w $7E00
0001E8D8 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001E8DC 8E00                       		dc.w $8E00
0001E8DE 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001E8E2 9E00                       		dc.w $9E00
0001E8E4 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001E8E8 AE00                       		dc.w $AE00
0001E8EA 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001E8EE BE00                       		dc.w $BE00
0001E8F0 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001E8F4 EE00                       		dc.w $EE00
0001E8F6 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001E8FA F2E0                       		dc.w $F2E0
0001E8FC 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001E900 F400                       		dc.w $F400
0001E902 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001E906 F520                       		dc.w $F520
0001E908 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001E90C F2E0                       		dc.w $F2E0
0001E90E 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001E912 F400                       		dc.w $F400
0001E914 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001E918 F520                       		dc.w $F520
0001E91A                            ; ---------------------------------------------------------------------------
0001E91A                            ; Pattern load cues - GHZ animals
0001E91A                            ; ---------------------------------------------------------------------------
0001E91A 0001                       PLC_GHZAnimals:	dc.w 1
0001E91C 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E920 B000                       		dc.w $B000
0001E922 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E926 B240                       		dc.w $B240
0001E928                            ; ---------------------------------------------------------------------------
0001E928                            ; Pattern load cues - LZ animals
0001E928                            ; ---------------------------------------------------------------------------
0001E928 0001                       PLC_LZAnimals:	dc.w 1
0001E92A 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E92E B000                       		dc.w $B000
0001E930 0000 0000                  		dc.l Nem_Seal		; seal
0001E934 B240                       		dc.w $B240
0001E936                            ; ---------------------------------------------------------------------------
0001E936                            ; Pattern load cues - MZ animals
0001E936                            ; ---------------------------------------------------------------------------
0001E936 0001                       PLC_MZAnimals:	dc.w 1
0001E938 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E93C B000                       		dc.w $B000
0001E93E 0000 0000                  		dc.l Nem_Seal		; seal
0001E942 B240                       		dc.w $B240
0001E944                            ; ---------------------------------------------------------------------------
0001E944                            ; Pattern load cues - SLZ animals
0001E944                            ; ---------------------------------------------------------------------------
0001E944 0001                       PLC_SLZAnimals:	dc.w 1
0001E946 0000 0000                  		dc.l Nem_Pig		; pig
0001E94A B000                       		dc.w $B000
0001E94C 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E950 B240                       		dc.w $B240
0001E952                            ; ---------------------------------------------------------------------------
0001E952                            ; Pattern load cues - SYZ animals
0001E952                            ; ---------------------------------------------------------------------------
0001E952 0001                       PLC_SYZAnimals:	dc.w 1
0001E954 0000 0000                  		dc.l Nem_Pig		; pig
0001E958 B000                       		dc.w $B000
0001E95A 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E95E B240                       		dc.w $B240
0001E960                            ; ---------------------------------------------------------------------------
0001E960                            ; Pattern load cues - SBZ animals
0001E960                            ; ---------------------------------------------------------------------------
0001E960 0001                       PLC_SBZAnimals:	dc.w 1
0001E962 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E966 B000                       		dc.w $B000
0001E968 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E96C B240                       		dc.w $B240
0001E96E                            ; ---------------------------------------------------------------------------
0001E96E                            ; Pattern load cues - special stage results screen
0001E96E                            ; ---------------------------------------------------------------------------
0001E96E 0001                       PLC_SpeStResult:dc.w 1
0001E970 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001E974 A820                       		dc.w $A820
0001E976 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001E97A AA20                       		dc.w $AA20
0001E97C                            ; ---------------------------------------------------------------------------
0001E97C                            ; Pattern load cues - ending sequence
0001E97C                            ; ---------------------------------------------------------------------------
0001E97C 000E                       PLC_Ending:	dc.w $E
0001E97E 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E982 0000                       		dc.w 0
0001E984 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E988 39A0                       		dc.w $39A0
0001E98A 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E98E 6B00                       		dc.w $6B00
0001E990 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001E994 7400                       		dc.w $7400
0001E996 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E99A 78A0                       		dc.w $78A0
0001E99C 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001E9A0 7C20                       		dc.w $7C20
0001E9A2 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001E9A6 A480                       		dc.w $A480
0001E9A8 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E9AC AA60                       		dc.w $AA60
0001E9AE 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E9B2 ACA0                       		dc.w $ACA0
0001E9B4 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E9B8 AE60                       		dc.w $AE60
0001E9BA 0000 0000                  		dc.l Nem_Seal		; seal
0001E9BE B0A0                       		dc.w $B0A0
0001E9C0 0000 0000                  		dc.l Nem_Pig		; pig
0001E9C4 B260                       		dc.w $B260
0001E9C6 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E9CA B4A0                       		dc.w $B4A0
0001E9CC 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E9D0 B660                       		dc.w $B660
0001E9D2 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001E9D6 B8A0                       		dc.w $B8A0
0001E9D8                            ; ---------------------------------------------------------------------------
0001E9D8                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001E9D8                            ; ---------------------------------------------------------------------------
0001E9D8 0002                       PLC_TryAgain:	dc.w 2
0001E9DA 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E9DE 78A0                       		dc.w $78A0
0001E9E0 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001E9E4 7C20                       		dc.w $7C20
0001E9E6 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001E9EA B400                       		dc.w $B400
0001E9EC                            ; ---------------------------------------------------------------------------
0001E9EC                            ; Pattern load cues - Eggman on SBZ 2
0001E9EC                            ; ---------------------------------------------------------------------------
0001E9EC 0002                       PLC_EggmanSBZ2:	dc.w 2
0001E9EE 0000 0000                  		dc.l Nem_SbzBlock	; block
0001E9F2 A300                       		dc.w $A300
0001E9F4 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001E9F8 8000                       		dc.w $8000
0001E9FA 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E9FE 9400                       		dc.w $9400
0001EA00                            ; ---------------------------------------------------------------------------
0001EA00                            ; Pattern load cues - final boss
0001EA00                            ; ---------------------------------------------------------------------------
0001EA00 0004                       PLC_FZBoss:	dc.w 4
0001EA02 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001EA06 7400                       		dc.w $7400
0001EA08 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001EA0C 6000                       		dc.w $6000
0001EA0E 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001EA12 8000                       		dc.w $8000
0001EA14 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001EA18 8E00                       		dc.w $8E00
0001EA1A 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001EA1E A540                       		dc.w $A540
0001EA20                            ; ---------------------------------------------------------------------------
0001EA20                            ; Pattern load cues - Teto boss
0001EA20                            ; ---------------------------------------------------------------------------
0001EA20 0002                       PLC_TetoBoss:	dc.w 2
0001EA22 0000 0000                  		dc.l Nem_Tetoboss		; Eggman main patterns
0001EA26 8000                       		dc.w $8000
0001EA28 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001EA2C 93A0                       		dc.w $93A0
0001EA2E 0000 0000                  		dc.l Nem_Peartobomb		; bomb enemy (gets overwritten)
0001EA32 9000                       		dc.w $9000
0001EA34                            		even
0001EA34                            		even
0001EA34                            
0001EA34                            		incbin	misc\padding.bin
0001EB22                            		even
0001EB22                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001EF78                            		even
0001EF78                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001F010                            		even
0001F010                            Nem_Gomer:	incbin	artnem\gomer.bin
0001F152                            		even
0001F152                            Eni_Gomer:	incbin	mapeni\gomer.bin
0001F1A0                            		even
0001F1A0                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001F2B4                            		even
0001F2B4                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0002017E                            		even
0002017E                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00024284                            		even
00024284                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
000242B8                            		even
000242B8                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00024376                            		even
00024376                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
0002481E                            		even
0002481E                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
0002487C                            		even
0002487C                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
00025482                            		even
00025482                            ; ---------------------------------------------------------------------------
00025482                            ; Sprite mappings - Sonic
00025482                            ; ---------------------------------------------------------------------------
00025482                            Map_Sonic:
00025482                            	include "_maps\Sonic.asm"
00025482                            Map_a933:
00025482 0000                       Map_a933_0: 	dc.w Map_a933_E0-Map_a933
00025484 0000                       Map_a933_2: 	dc.w Map_a933_E1-Map_a933
00025486 0000                       Map_a933_4: 	dc.w Map_a933_EC-Map_a933
00025488 0000                       Map_a933_6: 	dc.w Map_a933_FC-Map_a933
0002548A 0000                       Map_a933_8: 	dc.w Map_a933_10C-Map_a933
0002548C 0000                       Map_a933_A: 	dc.w Map_a933_11C-Map_a933
0002548E 0000                       Map_a933_C: 	dc.w Map_a933_12C-Map_a933
00025490 0000                       Map_a933_E: 	dc.w Map_a933_141-Map_a933
00025492 0000                       Map_a933_10: 	dc.w Map_a933_14C-Map_a933
00025494 0000                       Map_a933_12: 	dc.w Map_a933_157-Map_a933
00025496 0000                       Map_a933_14: 	dc.w Map_a933_16C-Map_a933
00025498 0000                       Map_a933_16: 	dc.w Map_a933_177-Map_a933
0002549A 0000                       Map_a933_18: 	dc.w Map_a933_187-Map_a933
0002549C 0000                       Map_a933_1A: 	dc.w Map_a933_1A1-Map_a933
0002549E 0000                       Map_a933_1C: 	dc.w Map_a933_1C0-Map_a933
000254A0 0000                       Map_a933_1E: 	dc.w Map_a933_1D5-Map_a933
000254A2 0000                       Map_a933_20: 	dc.w Map_a933_1EF-Map_a933
000254A4 0000                       Map_a933_22: 	dc.w Map_a933_204-Map_a933
000254A6 0000                       Map_a933_24: 	dc.w Map_a933_21E-Map_a933
000254A8 0000                       Map_a933_26: 	dc.w Map_a933_233-Map_a933
000254AA 0000                       Map_a933_28: 	dc.w Map_a933_23E-Map_a933
000254AC 0000                       Map_a933_2A: 	dc.w Map_a933_249-Map_a933
000254AE 0000                       Map_a933_2C: 	dc.w Map_a933_25E-Map_a933
000254B0 0000                       Map_a933_2E: 	dc.w Map_a933_269-Map_a933
000254B2 0000                       Map_a933_30: 	dc.w Map_a933_279-Map_a933
000254B4 0000                       Map_a933_32: 	dc.w Map_a933_298-Map_a933
000254B6 0000                       Map_a933_34: 	dc.w Map_a933_2B7-Map_a933
000254B8 0000                       Map_a933_36: 	dc.w Map_a933_2CC-Map_a933
000254BA 0000                       Map_a933_38: 	dc.w Map_a933_2E6-Map_a933
000254BC 0000                       Map_a933_3A: 	dc.w Map_a933_2FB-Map_a933
000254BE 0000                       Map_a933_3C: 	dc.w Map_a933_315-Map_a933
000254C0 0000                       Map_a933_3E: 	dc.w Map_a933_320-Map_a933
000254C2 0000                       Map_a933_40: 	dc.w Map_a933_32B-Map_a933
000254C4 0000                       Map_a933_42: 	dc.w Map_a933_336-Map_a933
000254C6 0000                       Map_a933_44: 	dc.w Map_a933_341-Map_a933
000254C8 0000                       Map_a933_46: 	dc.w Map_a933_356-Map_a933
000254CA 0000                       Map_a933_48: 	dc.w Map_a933_366-Map_a933
000254CC 0000                       Map_a933_4A: 	dc.w Map_a933_37B-Map_a933
000254CE 0000                       Map_a933_4C: 	dc.w Map_a933_38B-Map_a933
000254D0 0000                       Map_a933_4E: 	dc.w Map_a933_396-Map_a933
000254D2 0000                       Map_a933_50: 	dc.w Map_a933_3A1-Map_a933
000254D4 0000                       Map_a933_52: 	dc.w Map_a933_3AC-Map_a933
000254D6 0000                       Map_a933_54: 	dc.w Map_a933_3B7-Map_a933
000254D8 0000                       Map_a933_56: 	dc.w Map_a933_3CC-Map_a933
000254DA 0000                       Map_a933_58: 	dc.w Map_a933_3D7-Map_a933
000254DC 0000                       Map_a933_5A: 	dc.w Map_a933_3EC-Map_a933
000254DE 0000                       Map_a933_5C: 	dc.w Map_a933_3F7-Map_a933
000254E0 0000                       Map_a933_5E: 	dc.w Map_a933_3FD-Map_a933
000254E2 0000                       Map_a933_60: 	dc.w Map_a933_403-Map_a933
000254E4 0000                       Map_a933_62: 	dc.w Map_a933_409-Map_a933
000254E6 0000                       Map_a933_64: 	dc.w Map_a933_40F-Map_a933
000254E8 0000                       Map_a933_66: 	dc.w Map_a933_415-Map_a933
000254EA 0000                       Map_a933_68: 	dc.w Map_a933_420-Map_a933
000254EC 0000                       Map_a933_6A: 	dc.w Map_a933_426-Map_a933
000254EE 0000                       Map_a933_6C: 	dc.w Map_a933_431-Map_a933
000254F0 0000                       Map_a933_6E: 	dc.w Map_a933_437-Map_a933
000254F2 0000                       Map_a933_70: 	dc.w Map_a933_442-Map_a933
000254F4 0000                       Map_a933_72: 	dc.w Map_a933_457-Map_a933
000254F6 0000                       Map_a933_74: 	dc.w Map_a933_476-Map_a933
000254F8 0000                       Map_a933_76: 	dc.w Map_a933_481-Map_a933
000254FA 0000                       Map_a933_78: 	dc.w Map_a933_48C-Map_a933
000254FC 0000                       Map_a933_7A: 	dc.w Map_a933_4A1-Map_a933
000254FE 0000                       Map_a933_7C: 	dc.w Map_a933_4AC-Map_a933
00025500 0000                       Map_a933_7E: 	dc.w Map_a933_4BC-Map_a933
00025502 0000                       Map_a933_80: 	dc.w Map_a933_4D1-Map_a933
00025504 0000                       Map_a933_82: 	dc.w Map_a933_4DC-Map_a933
00025506 0000                       Map_a933_84: 	dc.w Map_a933_4F1-Map_a933
00025508 0000                       Map_a933_86: 	dc.w Map_a933_506-Map_a933
0002550A 0000                       Map_a933_88: 	dc.w Map_a933_520-Map_a933
0002550C 0000                       Map_a933_8A: 	dc.w Map_a933_53A-Map_a933
0002550E 0000                       Map_a933_8C: 	dc.w Map_a933_545-Map_a933
00025510 0000                       Map_a933_8E: 	dc.w Map_a933_555-Map_a933
00025512 0000                       Map_a933_90: 	dc.w Map_a933_560-Map_a933
00025514 0000                       Map_a933_92: 	dc.w Map_a933_570-Map_a933
00025516 0000                       Map_a933_94: 	dc.w Map_a933_57B-Map_a933
00025518 0000                       Map_a933_96: 	dc.w Map_a933_58B-Map_a933
0002551A 0000                       Map_a933_98: 	dc.w Map_a933_59B-Map_a933
0002551C 0000                       Map_a933_9A: 	dc.w Map_a933_5B5-Map_a933
0002551E 0000                       Map_a933_9C: 	dc.w Map_a933_5CF-Map_a933
00025520 0000                       Map_a933_9E: 	dc.w Map_a933_5DA-Map_a933
00025522 0000                       Map_a933_A0: 	dc.w Map_a933_5EA-Map_a933
00025524 0000                       Map_a933_A2: 	dc.w Map_a933_5F0-Map_a933
00025526 0000                       Map_a933_A4: 	dc.w Map_a933_5F6-Map_a933
00025528 0000                       Map_a933_A6: 	dc.w Map_a933_5FC-Map_a933
0002552A 0000                       Map_a933_A8: 	dc.w Map_a933_611-Map_a933
0002552C 0000                       Map_a933_AA: 	dc.w Map_a933_621-Map_a933
0002552E 0000                       Map_a933_AC: 	dc.w Map_a933_631-Map_a933
00025530 0000                       Map_a933_AE: 	dc.w Map_a933_641-Map_a933
00025532 0000                       Map_a933_B0: 	dc.w Map_a933_64C-Map_a933
00025534 0000                       Map_a933_B2: 	dc.w Map_a933_657-Map_a933
00025536 0000                       Map_a933_B4: 	dc.w Map_a933_667-Map_a933
00025538 0000                       Map_a933_B6: 	dc.w Map_a933_672-Map_a933
0002553A 0000                       Map_a933_B8: 	dc.w Map_a933_687-Map_a933
0002553C 0000                       Map_a933_BA: 	dc.w Map_a933_688-Map_a933
0002553E 0000                       Map_a933_BC: 	dc.w Map_a933_689-Map_a933
00025540 0000                       Map_a933_BE: 	dc.w Map_a933_68A-Map_a933
00025542 0000                       Map_a933_C0: 	dc.w Map_a933_68B-Map_a933
00025544 0000                       Map_a933_C2: 	dc.w Map_a933_696-Map_a933
00025546 0000                       Map_a933_C4: 	dc.w Map_a933_697-Map_a933
00025548 0000                       Map_a933_C6: 	dc.w Map_a933_6A2-Map_a933
0002554A 0000                       Map_a933_C8: 	dc.w Map_a933_6A3-Map_a933
0002554C 0000                       Map_a933_CA: 	dc.w Map_a933_6A4-Map_a933
0002554E 0000                       Map_a933_CC: 	dc.w Map_a933_6A5-Map_a933
00025550 0000                       Map_a933_CE: 	dc.w Map_a933_6B0-Map_a933
00025552 0000                       Map_a933_D0: 	dc.w Map_a933_6B1-Map_a933
00025554 0000                       Map_a933_D2: 	dc.w Map_a933_6BC-Map_a933
00025556 0000                       Map_a933_D4: 	dc.w Map_a933_6BD-Map_a933
00025558 0000                       Map_a933_D6: 	dc.w Map_a933_6BE-Map_a933
0002555A 0000                       Map_a933_D8: 	dc.w Map_a933_6BF-Map_a933
0002555C 0000                       Map_a933_DA: 	dc.w Map_a933_6CA-Map_a933
0002555E 0000                       Map_a933_DC: 	dc.w Map_a933_6CB-Map_a933
00025560 0000                       Map_a933_DE: 	dc.w Map_a933_6D6-Map_a933
00025562 00                         Map_a933_E0: 	dc.b $0
00025563 02                         Map_a933_E1: 	dc.b $2
00025564 ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
00025569 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
0002556E 03                         Map_a933_EC: 	dc.b $3
0002556F EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00025574 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00025579 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
0002557E 03                         Map_a933_FC: 	dc.b $3
0002557F EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00025584 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00025589 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
0002558E 03                         Map_a933_10C: 	dc.b $3
0002558F EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00025594 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00025599 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
0002559E 03                         Map_a933_11C: 	dc.b $3
0002559F EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
000255A4 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
000255A9 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000255AE 04                         Map_a933_12C: 	dc.b $4
000255AF EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
000255B4 FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
000255B9 FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
000255BE 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
000255C3 02                         Map_a933_141: 	dc.b $2
000255C4 EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
000255C9 FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
000255CE 02                         Map_a933_14C: 	dc.b $2
000255CF ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
000255D4 FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
000255D9 04                         Map_a933_157: 	dc.b $4
000255DA EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
000255DF FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
000255E4 FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
000255E9 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
000255EE 02                         Map_a933_16C: 	dc.b $2
000255EF FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
000255F4 EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
000255F9 03                         Map_a933_177: 	dc.b $3
000255FA ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
000255FF FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
00025604 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
00025609 05                         Map_a933_187: 	dc.b $5
0002560A EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
0002560F EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
00025614 FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
00025619 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
0002561E 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
00025623 06                         Map_a933_1A1: 	dc.b $6
00025624 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00025629 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
0002562E FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
00025633 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
00025638 FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
0002563D F400 0016 14               	dc.b $F4, $0, $0, $16, $14
00025642 04                         Map_a933_1C0: 	dc.b $4
00025643 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00025648 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
0002564D FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
00025652 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
00025657 05                         Map_a933_1D5: 	dc.b $5
00025658 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
0002565D EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
00025662 FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
00025667 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
0002566C 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
00025671 04                         Map_a933_1EF: 	dc.b $4
00025672 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00025677 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
0002567C FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
00025681 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
00025686 05                         Map_a933_204: 	dc.b $5
00025687 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
0002568C ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00025691 FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
00025696 FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
0002569B 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
000256A0 04                         Map_a933_21E: 	dc.b $4
000256A1 F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
000256A6 EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
000256AB FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
000256B0 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
000256B5 02                         Map_a933_233: 	dc.b $2
000256B6 F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
000256BB EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
000256C0 02                         Map_a933_23E: 	dc.b $2
000256C1 F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
000256C6 F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
000256CB 04                         Map_a933_249: 	dc.b $4
000256CC F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
000256D1 EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
000256D6 FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
000256DB 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
000256E0 02                         Map_a933_25E: 	dc.b $2
000256E1 F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
000256E6 F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
000256EB 03                         Map_a933_269: 	dc.b $3
000256EC F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
000256F1 EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
000256F6 F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
000256FB 06                         Map_a933_279: 	dc.b $6
000256FC FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00025701 ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
00025706 F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
0002570B F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
00025710 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
00025715 FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
0002571A 06                         Map_a933_298: 	dc.b $6
0002571B FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00025720 E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
00025725 EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
0002572A F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
0002572F F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
00025734 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
00025739 04                         Map_a933_2B7: 	dc.b $4
0002573A FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
0002573F F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
00025744 EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
00025749 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
0002574E 05                         Map_a933_2CC: 	dc.b $5
0002574F FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00025754 ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
00025759 F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
0002575E F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
00025763 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
00025768 04                         Map_a933_2E6: 	dc.b $4
00025769 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
0002576E F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
00025773 EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
00025778 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
0002577D 05                         Map_a933_2FB: 	dc.b $5
0002577E FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00025783 EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
00025788 F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
0002578D 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00025792 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
00025797 02                         Map_a933_315: 	dc.b $2
00025798 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
0002579D FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000257A2 02                         Map_a933_320: 	dc.b $2
000257A3 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000257A8 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000257AD 02                         Map_a933_32B: 	dc.b $2
000257AE EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000257B3 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000257B8 02                         Map_a933_336: 	dc.b $2
000257B9 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000257BE FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000257C3 04                         Map_a933_341: 	dc.b $4
000257C4 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000257C9 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000257CE FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000257D3 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
000257D8 03                         Map_a933_356: 	dc.b $3
000257D9 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000257DE EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000257E3 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000257E8 04                         Map_a933_366: 	dc.b $4
000257E9 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000257EE EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000257F3 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000257F8 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
000257FD 03                         Map_a933_37B: 	dc.b $3
000257FE EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025803 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00025808 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
0002580D 02                         Map_a933_38B: 	dc.b $2
0002580E F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025813 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025818 02                         Map_a933_396: 	dc.b $2
00025819 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002581E F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025823 02                         Map_a933_3A1: 	dc.b $2
00025824 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025829 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002582E 02                         Map_a933_3AC: 	dc.b $2
0002582F F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025834 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025839 04                         Map_a933_3B7: 	dc.b $4
0002583A FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
0002583F F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00025844 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00025849 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
0002584E 02                         Map_a933_3CC: 	dc.b $2
0002584F F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00025854 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00025859 04                         Map_a933_3D7: 	dc.b $4
0002585A FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
0002585F F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00025864 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00025869 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
0002586E 02                         Map_a933_3EC: 	dc.b $2
0002586F F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00025874 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00025879 01                         Map_a933_3F7: 	dc.b $1
0002587A F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002587F 01                         Map_a933_3FD: 	dc.b $1
00025880 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025885 01                         Map_a933_403: 	dc.b $1
00025886 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002588B 01                         Map_a933_409: 	dc.b $1
0002588C F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025891 01                         Map_a933_40F: 	dc.b $1
00025892 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025897 02                         Map_a933_415: 	dc.b $2
00025898 F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
0002589D F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
000258A2 01                         Map_a933_420: 	dc.b $1
000258A3 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000258A8 02                         Map_a933_426: 	dc.b $2
000258A9 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
000258AE 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
000258B3 01                         Map_a933_431: 	dc.b $1
000258B4 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000258B9 02                         Map_a933_437: 	dc.b $2
000258BA ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000258BF FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
000258C4 04                         Map_a933_442: 	dc.b $4
000258C5 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000258CA FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
000258CF 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
000258D4 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
000258D9 06                         Map_a933_457: 	dc.b $6
000258DA F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
000258DF FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
000258E4 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
000258E9 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
000258EE FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
000258F3 F400 0011 04               	dc.b $F4, $0, $0, $11, $4
000258F8 02                         Map_a933_476: 	dc.b $2
000258F9 040D 0000 E4               	dc.b $4, $D, $0, $0, $E4
000258FE EC0A 0008 EC               	dc.b $EC, $A, $0, $8, $EC
00025903 02                         Map_a933_481: 	dc.b $2
00025904 040D 0000 E3               	dc.b $4, $D, $0, $0, $E3
00025909 EC0A 0008 EB               	dc.b $EC, $A, $0, $8, $EB
0002590E 04                         Map_a933_48C: 	dc.b $4
0002590F F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00025914 F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
00025919 0408 000C 03               	dc.b $4, $8, $0, $C, $3
0002591E 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
00025923 02                         Map_a933_4A1: 	dc.b $2
00025924 F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
00025929 F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
0002592E 03                         Map_a933_4AC: 	dc.b $3
0002592F F40D 0000 EB               	dc.b $F4, $D, $0, $0, $EB
00025934 FC00 0008 0B               	dc.b $FC, $0, $0, $8, $B
00025939 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
0002593E 04                         Map_a933_4BC: 	dc.b $4
0002593F F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00025944 F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
00025949 0408 000C 02               	dc.b $4, $8, $0, $C, $2
0002594E 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
00025953 02                         Map_a933_4D1: 	dc.b $2
00025954 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
00025959 0C04 000C F4               	dc.b $C, $4, $0, $C, $F4
0002595E 04                         Map_a933_4DC: 	dc.b $4
0002595F F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00025964 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00025969 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
0002596E F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00025973 04                         Map_a933_4F1: 	dc.b $4
00025974 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00025979 0005 000C 08               	dc.b $0, $5, $0, $C, $8
0002597E F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00025983 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00025988 05                         Map_a933_506: 	dc.b $5
00025989 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
0002598E F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
00025993 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00025998 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
0002599D 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000259A2 05                         Map_a933_520: 	dc.b $5
000259A3 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000259A8 E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
000259AD 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000259B2 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000259B7 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000259BC 02                         Map_a933_53A: 	dc.b $2
000259BD ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000259C2 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000259C7 03                         Map_a933_545: 	dc.b $3
000259C8 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000259CD 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000259D2 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000259D7 02                         Map_a933_555: 	dc.b $2
000259D8 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000259DD 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000259E2 03                         Map_a933_560: 	dc.b $3
000259E3 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000259E8 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000259ED 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000259F2 02                         Map_a933_570: 	dc.b $2
000259F3 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000259F8 FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
000259FD 03                         Map_a933_57B: 	dc.b $3
000259FE EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00025A03 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
00025A08 E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
00025A0D 03                         Map_a933_58B: 	dc.b $3
00025A0E E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025A13 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025A18 F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
00025A1D 05                         Map_a933_59B: 	dc.b $5
00025A1E E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025A23 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025A28 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00025A2D 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00025A32 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00025A37 05                         Map_a933_5B5: 	dc.b $5
00025A38 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025A3D E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025A42 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00025A47 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00025A4C 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00025A51 02                         Map_a933_5CF: 	dc.b $2
00025A52 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00025A57 F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
00025A5C 03                         Map_a933_5DA: 	dc.b $3
00025A5D EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00025A62 F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
00025A67 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
00025A6C 01                         Map_a933_5EA: 	dc.b $1
00025A6D F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
00025A72 01                         Map_a933_5F0: 	dc.b $1
00025A73 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
00025A78 01                         Map_a933_5F6: 	dc.b $1
00025A79 F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
00025A7E 04                         Map_a933_5FC: 	dc.b $4
00025A7F F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
00025A84 F705 0808 04               	dc.b $F7, $5, $8, $8, $4
00025A89 0408 080C E5               	dc.b $4, $8, $8, $C, $E5
00025A8E 0700 080F 0C               	dc.b $7, $0, $8, $F, $C
00025A93 03                         Map_a933_611: 	dc.b $3
00025A94 F40D 0800 F5               	dc.b $F4, $D, $8, $0, $F5
00025A99 FC00 0808 ED               	dc.b $FC, $0, $8, $8, $ED
00025A9E 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
00025AA3 03                         Map_a933_621: 	dc.b $3
00025AA4 F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
00025AA9 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
00025AAE 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
00025AB3 03                         Map_a933_631: 	dc.b $3
00025AB4 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00025AB9 FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
00025ABE 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
00025AC3 02                         Map_a933_641: 	dc.b $2
00025AC4 F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
00025AC9 F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
00025ACE 02                         Map_a933_64C: 	dc.b $2
00025ACF F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025AD4 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025AD9 03                         Map_a933_657: 	dc.b $3
00025ADA ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
00025ADF 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
00025AE4 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
00025AE9 02                         Map_a933_667: 	dc.b $2
00025AEA F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
00025AEF EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
00025AF4 04                         Map_a933_672: 	dc.b $4
00025AF5 ED08 0000 F3               	dc.b $ED, $8, $0, $0, $F3
00025AFA F50E 0003 EB               	dc.b $F5, $E, $0, $3, $EB
00025AFF F503 000F 0B               	dc.b $F5, $3, $0, $F, $B
00025B04 0D08 0013 F3               	dc.b $D, $8, $0, $13, $F3
00025B09 00                         Map_a933_687: 	dc.b $0
00025B0A 00                         Map_a933_688: 	dc.b $0
00025B0B 00                         Map_a933_689: 	dc.b $0
00025B0C 00                         Map_a933_68A: 	dc.b $0
00025B0D 02                         Map_a933_68B: 	dc.b $2
00025B0E F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025B13 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025B18 00                         Map_a933_696: 	dc.b $0
00025B19 02                         Map_a933_697: 	dc.b $2
00025B1A F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025B1F EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025B24 00                         Map_a933_6A2: 	dc.b $0
00025B25 00                         Map_a933_6A3: 	dc.b $0
00025B26 00                         Map_a933_6A4: 	dc.b $0
00025B27 02                         Map_a933_6A5: 	dc.b $2
00025B28 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025B2D EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025B32 00                         Map_a933_6B0: 	dc.b $0
00025B33 02                         Map_a933_6B1: 	dc.b $2
00025B34 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025B39 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025B3E 00                         Map_a933_6BC: 	dc.b $0
00025B3F 00                         Map_a933_6BD: 	dc.b $0
00025B40 00                         Map_a933_6BE: 	dc.b $0
00025B41 02                         Map_a933_6BF: 	dc.b $2
00025B42 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025B47 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025B4C 00                         Map_a933_6CA: 	dc.b $0
00025B4D 02                         Map_a933_6CB: 	dc.b $2
00025B4E F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025B53 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025B58 00                         Map_a933_6D6: 	dc.b $0
00025B5A 00                         	even
00025B5A 00                         	even
00025B5A                            
00025B5A                            ; ---------------------------------------------------------------------------
00025B5A                            ; Uncompressed graphics	loading	array for Sonic
00025B5A                            ; ---------------------------------------------------------------------------
00025B5A                            SonicDynPLC:
00025B5A                            	include "_inc\Sonic dynamic pattern load cues.asm"
00025B5A                            DPLC_33c5:
00025B5A 0000                       DPLC_33c5_0: 	dc.w DPLC_33c5_E0-DPLC_33c5
00025B5C 0000                       DPLC_33c5_2: 	dc.w DPLC_33c5_E1-DPLC_33c5
00025B5E 0000                       DPLC_33c5_4: 	dc.w DPLC_33c5_E6-DPLC_33c5
00025B60 0000                       DPLC_33c5_6: 	dc.w DPLC_33c5_ED-DPLC_33c5
00025B62 0000                       DPLC_33c5_8: 	dc.w DPLC_33c5_F4-DPLC_33c5
00025B64 0000                       DPLC_33c5_A: 	dc.w DPLC_33c5_FB-DPLC_33c5
00025B66 0000                       DPLC_33c5_C: 	dc.w DPLC_33c5_102-DPLC_33c5
00025B68 0000                       DPLC_33c5_E: 	dc.w DPLC_33c5_10B-DPLC_33c5
00025B6A 0000                       DPLC_33c5_10: 	dc.w DPLC_33c5_110-DPLC_33c5
00025B6C 0000                       DPLC_33c5_12: 	dc.w DPLC_33c5_115-DPLC_33c5
00025B6E 0000                       DPLC_33c5_14: 	dc.w DPLC_33c5_11E-DPLC_33c5
00025B70 0000                       DPLC_33c5_16: 	dc.w DPLC_33c5_123-DPLC_33c5
00025B72 0000                       DPLC_33c5_18: 	dc.w DPLC_33c5_12A-DPLC_33c5
00025B74 0000                       DPLC_33c5_1A: 	dc.w DPLC_33c5_135-DPLC_33c5
00025B76 0000                       DPLC_33c5_1C: 	dc.w DPLC_33c5_142-DPLC_33c5
00025B78 0000                       DPLC_33c5_1E: 	dc.w DPLC_33c5_14B-DPLC_33c5
00025B7A 0000                       DPLC_33c5_20: 	dc.w DPLC_33c5_156-DPLC_33c5
00025B7C 0000                       DPLC_33c5_22: 	dc.w DPLC_33c5_15F-DPLC_33c5
00025B7E 0000                       DPLC_33c5_24: 	dc.w DPLC_33c5_16A-DPLC_33c5
00025B80 0000                       DPLC_33c5_26: 	dc.w DPLC_33c5_173-DPLC_33c5
00025B82 0000                       DPLC_33c5_28: 	dc.w DPLC_33c5_178-DPLC_33c5
00025B84 0000                       DPLC_33c5_2A: 	dc.w DPLC_33c5_17D-DPLC_33c5
00025B86 0000                       DPLC_33c5_2C: 	dc.w DPLC_33c5_186-DPLC_33c5
00025B88 0000                       DPLC_33c5_2E: 	dc.w DPLC_33c5_18B-DPLC_33c5
00025B8A 0000                       DPLC_33c5_30: 	dc.w DPLC_33c5_192-DPLC_33c5
00025B8C 0000                       DPLC_33c5_32: 	dc.w DPLC_33c5_19F-DPLC_33c5
00025B8E 0000                       DPLC_33c5_34: 	dc.w DPLC_33c5_1AC-DPLC_33c5
00025B90 0000                       DPLC_33c5_36: 	dc.w DPLC_33c5_1B5-DPLC_33c5
00025B92 0000                       DPLC_33c5_38: 	dc.w DPLC_33c5_1C0-DPLC_33c5
00025B94 0000                       DPLC_33c5_3A: 	dc.w DPLC_33c5_1C9-DPLC_33c5
00025B96 0000                       DPLC_33c5_3C: 	dc.w DPLC_33c5_1D4-DPLC_33c5
00025B98 0000                       DPLC_33c5_3E: 	dc.w DPLC_33c5_1D9-DPLC_33c5
00025B9A 0000                       DPLC_33c5_40: 	dc.w DPLC_33c5_1DE-DPLC_33c5
00025B9C 0000                       DPLC_33c5_42: 	dc.w DPLC_33c5_1E3-DPLC_33c5
00025B9E 0000                       DPLC_33c5_44: 	dc.w DPLC_33c5_1E8-DPLC_33c5
00025BA0 0000                       DPLC_33c5_46: 	dc.w DPLC_33c5_1F1-DPLC_33c5
00025BA2 0000                       DPLC_33c5_48: 	dc.w DPLC_33c5_1F8-DPLC_33c5
00025BA4 0000                       DPLC_33c5_4A: 	dc.w DPLC_33c5_201-DPLC_33c5
00025BA6 0000                       DPLC_33c5_4C: 	dc.w DPLC_33c5_208-DPLC_33c5
00025BA8 0000                       DPLC_33c5_4E: 	dc.w DPLC_33c5_20D-DPLC_33c5
00025BAA 0000                       DPLC_33c5_50: 	dc.w DPLC_33c5_212-DPLC_33c5
00025BAC 0000                       DPLC_33c5_52: 	dc.w DPLC_33c5_217-DPLC_33c5
00025BAE 0000                       DPLC_33c5_54: 	dc.w DPLC_33c5_21C-DPLC_33c5
00025BB0 0000                       DPLC_33c5_56: 	dc.w DPLC_33c5_225-DPLC_33c5
00025BB2 0000                       DPLC_33c5_58: 	dc.w DPLC_33c5_22A-DPLC_33c5
00025BB4 0000                       DPLC_33c5_5A: 	dc.w DPLC_33c5_233-DPLC_33c5
00025BB6 0000                       DPLC_33c5_5C: 	dc.w DPLC_33c5_238-DPLC_33c5
00025BB8 0000                       DPLC_33c5_5E: 	dc.w DPLC_33c5_23B-DPLC_33c5
00025BBA 0000                       DPLC_33c5_60: 	dc.w DPLC_33c5_23E-DPLC_33c5
00025BBC 0000                       DPLC_33c5_62: 	dc.w DPLC_33c5_241-DPLC_33c5
00025BBE 0000                       DPLC_33c5_64: 	dc.w DPLC_33c5_244-DPLC_33c5
00025BC0 0000                       DPLC_33c5_66: 	dc.w DPLC_33c5_247-DPLC_33c5
00025BC2 0000                       DPLC_33c5_68: 	dc.w DPLC_33c5_24C-DPLC_33c5
00025BC4 0000                       DPLC_33c5_6A: 	dc.w DPLC_33c5_24F-DPLC_33c5
00025BC6 0000                       DPLC_33c5_6C: 	dc.w DPLC_33c5_254-DPLC_33c5
00025BC8 0000                       DPLC_33c5_6E: 	dc.w DPLC_33c5_257-DPLC_33c5
00025BCA 0000                       DPLC_33c5_70: 	dc.w DPLC_33c5_25C-DPLC_33c5
00025BCC 0000                       DPLC_33c5_72: 	dc.w DPLC_33c5_265-DPLC_33c5
00025BCE 0000                       DPLC_33c5_74: 	dc.w DPLC_33c5_26A-DPLC_33c5
00025BD0 0000                       DPLC_33c5_76: 	dc.w DPLC_33c5_26F-DPLC_33c5
00025BD2 0000                       DPLC_33c5_78: 	dc.w DPLC_33c5_274-DPLC_33c5
00025BD4 0000                       DPLC_33c5_7A: 	dc.w DPLC_33c5_279-DPLC_33c5
00025BD6 0000                       DPLC_33c5_7C: 	dc.w DPLC_33c5_27C-DPLC_33c5
00025BD8 0000                       DPLC_33c5_7E: 	dc.w DPLC_33c5_283-DPLC_33c5
00025BDA 0000                       DPLC_33c5_80: 	dc.w DPLC_33c5_288-DPLC_33c5
00025BDC 0000                       DPLC_33c5_82: 	dc.w DPLC_33c5_28B-DPLC_33c5
00025BDE 0000                       DPLC_33c5_84: 	dc.w DPLC_33c5_294-DPLC_33c5
00025BE0 0000                       DPLC_33c5_86: 	dc.w DPLC_33c5_29D-DPLC_33c5
00025BE2 0000                       DPLC_33c5_88: 	dc.w DPLC_33c5_2A8-DPLC_33c5
00025BE4 0000                       DPLC_33c5_8A: 	dc.w DPLC_33c5_2B3-DPLC_33c5
00025BE6 0000                       DPLC_33c5_8C: 	dc.w DPLC_33c5_2B8-DPLC_33c5
00025BE8 0000                       DPLC_33c5_8E: 	dc.w DPLC_33c5_2BF-DPLC_33c5
00025BEA 0000                       DPLC_33c5_90: 	dc.w DPLC_33c5_2C4-DPLC_33c5
00025BEC 0000                       DPLC_33c5_92: 	dc.w DPLC_33c5_2CB-DPLC_33c5
00025BEE 0000                       DPLC_33c5_94: 	dc.w DPLC_33c5_2D0-DPLC_33c5
00025BF0 0000                       DPLC_33c5_96: 	dc.w DPLC_33c5_2D7-DPLC_33c5
00025BF2 0000                       DPLC_33c5_98: 	dc.w DPLC_33c5_2DE-DPLC_33c5
00025BF4 0000                       DPLC_33c5_9A: 	dc.w DPLC_33c5_2E9-DPLC_33c5
00025BF6 0000                       DPLC_33c5_9C: 	dc.w DPLC_33c5_2F4-DPLC_33c5
00025BF8 0000                       DPLC_33c5_9E: 	dc.w DPLC_33c5_2F9-DPLC_33c5
00025BFA 0000                       DPLC_33c5_A0: 	dc.w DPLC_33c5_300-DPLC_33c5
00025BFC 0000                       DPLC_33c5_A2: 	dc.w DPLC_33c5_303-DPLC_33c5
00025BFE 0000                       DPLC_33c5_A4: 	dc.w DPLC_33c5_306-DPLC_33c5
00025C00 0000                       DPLC_33c5_A6: 	dc.w DPLC_33c5_309-DPLC_33c5
00025C02 0000                       DPLC_33c5_A8: 	dc.w DPLC_33c5_30E-DPLC_33c5
00025C04 0000                       DPLC_33c5_AA: 	dc.w DPLC_33c5_315-DPLC_33c5
00025C06 0000                       DPLC_33c5_AC: 	dc.w DPLC_33c5_31C-DPLC_33c5
00025C08 0000                       DPLC_33c5_AE: 	dc.w DPLC_33c5_323-DPLC_33c5
00025C0A 0000                       DPLC_33c5_B0: 	dc.w DPLC_33c5_328-DPLC_33c5
00025C0C 0000                       DPLC_33c5_B2: 	dc.w DPLC_33c5_32D-DPLC_33c5
00025C0E 0000                       DPLC_33c5_B4: 	dc.w DPLC_33c5_332-DPLC_33c5
00025C10 0000                       DPLC_33c5_B6: 	dc.w DPLC_33c5_337-DPLC_33c5
00025C12 0000                       DPLC_33c5_B8: 	dc.w DPLC_33c5_33C-DPLC_33c5
00025C14 0000                       DPLC_33c5_BA: 	dc.w DPLC_33c5_33D-DPLC_33c5
00025C16 0000                       DPLC_33c5_BC: 	dc.w DPLC_33c5_33E-DPLC_33c5
00025C18 0000                       DPLC_33c5_BE: 	dc.w DPLC_33c5_33F-DPLC_33c5
00025C1A 0000                       DPLC_33c5_C0: 	dc.w DPLC_33c5_340-DPLC_33c5
00025C1C 0000                       DPLC_33c5_C2: 	dc.w DPLC_33c5_345-DPLC_33c5
00025C1E 0000                       DPLC_33c5_C4: 	dc.w DPLC_33c5_346-DPLC_33c5
00025C20 0000                       DPLC_33c5_C6: 	dc.w DPLC_33c5_34B-DPLC_33c5
00025C22 0000                       DPLC_33c5_C8: 	dc.w DPLC_33c5_34C-DPLC_33c5
00025C24 0000                       DPLC_33c5_CA: 	dc.w DPLC_33c5_34D-DPLC_33c5
00025C26 0000                       DPLC_33c5_CC: 	dc.w DPLC_33c5_34E-DPLC_33c5
00025C28 0000                       DPLC_33c5_CE: 	dc.w DPLC_33c5_353-DPLC_33c5
00025C2A 0000                       DPLC_33c5_D0: 	dc.w DPLC_33c5_354-DPLC_33c5
00025C2C 0000                       DPLC_33c5_D2: 	dc.w DPLC_33c5_359-DPLC_33c5
00025C2E 0000                       DPLC_33c5_D4: 	dc.w DPLC_33c5_35A-DPLC_33c5
00025C30 0000                       DPLC_33c5_D6: 	dc.w DPLC_33c5_35B-DPLC_33c5
00025C32 0000                       DPLC_33c5_D8: 	dc.w DPLC_33c5_35C-DPLC_33c5
00025C34 0000                       DPLC_33c5_DA: 	dc.w DPLC_33c5_361-DPLC_33c5
00025C36 0000                       DPLC_33c5_DC: 	dc.w DPLC_33c5_362-DPLC_33c5
00025C38 0000                       DPLC_33c5_DE: 	dc.w DPLC_33c5_367-DPLC_33c5
00025C3A 00                         DPLC_33c5_E0: 	dc.b $0
00025C3B 02                         DPLC_33c5_E1: 	dc.b $2
00025C3C F000                       	dc.b $F0, $0
00025C3E 1010                       	dc.b $10, $10
00025C40 03                         DPLC_33c5_E6: 	dc.b $3
00025C41 5012                       	dc.b $50, $12
00025C43 5018                       	dc.b $50, $18
00025C45 201E                       	dc.b $20, $1E
00025C47 03                         DPLC_33c5_ED: 	dc.b $3
00025C48 5021                       	dc.b $50, $21
00025C4A 5018                       	dc.b $50, $18
00025C4C 201E                       	dc.b $20, $1E
00025C4E 03                         DPLC_33c5_F4: 	dc.b $3
00025C4F 5021                       	dc.b $50, $21
00025C51 5018                       	dc.b $50, $18
00025C53 2027                       	dc.b $20, $27
00025C55 03                         DPLC_33c5_FB: 	dc.b $3
00025C56 802A                       	dc.b $80, $2A
00025C58 2033                       	dc.b $20, $33
00025C5A 2036                       	dc.b $20, $36
00025C5C 04                         DPLC_33c5_102: 	dc.b $4
00025C5D 7039                       	dc.b $70, $39
00025C5F 5041                       	dc.b $50, $41
00025C61 5047                       	dc.b $50, $47
00025C63 104D                       	dc.b $10, $4D
00025C65 02                         DPLC_33c5_10B: 	dc.b $2
00025C66 7039                       	dc.b $70, $39
00025C68 B04F                       	dc.b $B0, $4F
00025C6A 02                         DPLC_33c5_110: 	dc.b $2
00025C6B 505B                       	dc.b $50, $5B
00025C6D 8061                       	dc.b $80, $61
00025C6F 04                         DPLC_33c5_115: 	dc.b $4
00025C70 505B                       	dc.b $50, $5B
00025C72 506A                       	dc.b $50, $6A
00025C74 5070                       	dc.b $50, $70
00025C76 1076                       	dc.b $10, $76
00025C78 02                         DPLC_33c5_11E: 	dc.b $2
00025C79 F4F0                       	dc.b $F4, $F0
00025C7B 1500                       	dc.b $15, $0
00025C7D 03                         DPLC_33c5_123: 	dc.b $3
00025C7E 7039                       	dc.b $70, $39
00025C80 3078                       	dc.b $30, $78
00025C82 507C                       	dc.b $50, $7C
00025C84 05                         DPLC_33c5_12A: 	dc.b $5
00025C85 5082                       	dc.b $50, $82
00025C87 5088                       	dc.b $50, $88
00025C89 208E                       	dc.b $20, $8E
00025C8B 5091                       	dc.b $50, $91
00025C8D 0097                       	dc.b $0, $97
00025C8F 06                         DPLC_33c5_135: 	dc.b $6
00025C90 5082                       	dc.b $50, $82
00025C92 1098                       	dc.b $10, $98
00025C94 309A                       	dc.b $30, $9A
00025C96 509E                       	dc.b $50, $9E
00025C98 30A4                       	dc.b $30, $A4
00025C9A 00A8                       	dc.b $0, $A8
00025C9C 04                         DPLC_33c5_142: 	dc.b $4
00025C9D 50A9                       	dc.b $50, $A9
00025C9F 10AF                       	dc.b $10, $AF
00025CA1 70B1                       	dc.b $70, $B1
00025CA3 20B9                       	dc.b $20, $B9
00025CA5 05                         DPLC_33c5_14B: 	dc.b $5
00025CA6 50BC                       	dc.b $50, $BC
00025CA8 30C2                       	dc.b $30, $C2
00025CAA 70C6                       	dc.b $70, $C6
00025CAC 20CE                       	dc.b $20, $CE
00025CAE 10D1                       	dc.b $10, $D1
00025CB0 04                         DPLC_33c5_156: 	dc.b $4
00025CB1 50BC                       	dc.b $50, $BC
00025CB3 10D3                       	dc.b $10, $D3
00025CB5 70D5                       	dc.b $70, $D5
00025CB7 20DD                       	dc.b $20, $DD
00025CB9 05                         DPLC_33c5_15F: 	dc.b $5
00025CBA 5082                       	dc.b $50, $82
00025CBC 1098                       	dc.b $10, $98
00025CBE 008E                       	dc.b $0, $8E
00025CC0 70E0                       	dc.b $70, $E0
00025CC2 20E8                       	dc.b $20, $E8
00025CC4 04                         DPLC_33c5_16A: 	dc.b $4
00025CC5 70EB                       	dc.b $70, $EB
00025CC7 50F3                       	dc.b $50, $F3
00025CC9 10F9                       	dc.b $10, $F9
00025CCB 50FB                       	dc.b $50, $FB
00025CCD 02                         DPLC_33c5_173: 	dc.b $2
00025CCE 70EB                       	dc.b $70, $EB
00025CD0 B101                       	dc.b $B1, $1
00025CD2 02                         DPLC_33c5_178: 	dc.b $2
00025CD3 510D                       	dc.b $51, $D
00025CD5 8113                       	dc.b $81, $13
00025CD7 04                         DPLC_33c5_17D: 	dc.b $4
00025CD8 510D                       	dc.b $51, $D
00025CDA 511C                       	dc.b $51, $1C
00025CDC 1122                       	dc.b $11, $22
00025CDE 5124                       	dc.b $51, $24
00025CE0 02                         DPLC_33c5_186: 	dc.b $2
00025CE1 510D                       	dc.b $51, $D
00025CE3 B12A                       	dc.b $B1, $2A
00025CE5 03                         DPLC_33c5_18B: 	dc.b $3
00025CE6 70EB                       	dc.b $70, $EB
00025CE8 0101                       	dc.b $1, $1
00025CEA 8136                       	dc.b $81, $36
00025CEC 06                         DPLC_33c5_192: 	dc.b $6
00025CED 513F                       	dc.b $51, $3F
00025CEF 1145                       	dc.b $11, $45
00025CF1 1147                       	dc.b $11, $47
00025CF3 8149                       	dc.b $81, $49
00025CF5 0152                       	dc.b $1, $52
00025CF7 0153                       	dc.b $1, $53
00025CF9 06                         DPLC_33c5_19F: 	dc.b $6
00025CFA 513F                       	dc.b $51, $3F
00025CFC 2154                       	dc.b $21, $54
00025CFE 1157                       	dc.b $11, $57
00025D00 1159                       	dc.b $11, $59
00025D02 815B                       	dc.b $81, $5B
00025D04 0152                       	dc.b $1, $52
00025D06 04                         DPLC_33c5_1AC: 	dc.b $4
00025D07 5164                       	dc.b $51, $64
00025D09 116A                       	dc.b $11, $6A
00025D0B 816C                       	dc.b $81, $6C
00025D0D 1175                       	dc.b $11, $75
00025D0F 05                         DPLC_33c5_1B5: 	dc.b $5
00025D10 5177                       	dc.b $51, $77
00025D12 217D                       	dc.b $21, $7D
00025D14 1180                       	dc.b $11, $80
00025D16 7182                       	dc.b $71, $82
00025D18 218A                       	dc.b $21, $8A
00025D1A 04                         DPLC_33c5_1C0: 	dc.b $4
00025D1B 5177                       	dc.b $51, $77
00025D1D 118D                       	dc.b $11, $8D
00025D1F 818F                       	dc.b $81, $8F
00025D21 1198                       	dc.b $11, $98
00025D23 05                         DPLC_33c5_1C9: 	dc.b $5
00025D24 513F                       	dc.b $51, $3F
00025D26 819A                       	dc.b $81, $9A
00025D28 1159                       	dc.b $11, $59
00025D2A 11A3                       	dc.b $11, $A3
00025D2C 0152                       	dc.b $1, $52
00025D2E 02                         DPLC_33c5_1D4: 	dc.b $2
00025D2F 51A5                       	dc.b $51, $A5
00025D31 B1AB                       	dc.b $B1, $AB
00025D33 02                         DPLC_33c5_1D9: 	dc.b $2
00025D34 505B                       	dc.b $50, $5B
00025D36 B1B7                       	dc.b $B1, $B7
00025D38 02                         DPLC_33c5_1DE: 	dc.b $2
00025D39 51A5                       	dc.b $51, $A5
00025D3B B1C3                       	dc.b $B1, $C3
00025D3D 02                         DPLC_33c5_1E3: 	dc.b $2
00025D3E 505B                       	dc.b $50, $5B
00025D40 B1CF                       	dc.b $B1, $CF
00025D42 04                         DPLC_33c5_1E8: 	dc.b $4
00025D43 51DB                       	dc.b $51, $DB
00025D45 11E1                       	dc.b $11, $E1
00025D47 B1E3                       	dc.b $B1, $E3
00025D49 01EF                       	dc.b $1, $EF
00025D4B 03                         DPLC_33c5_1F1: 	dc.b $3
00025D4C 51F0                       	dc.b $51, $F0
00025D4E 11F6                       	dc.b $11, $F6
00025D50 B1F8                       	dc.b $B1, $F8
00025D52 04                         DPLC_33c5_1F8: 	dc.b $4
00025D53 51DB                       	dc.b $51, $DB
00025D55 1204                       	dc.b $12, $4
00025D57 B206                       	dc.b $B2, $6
00025D59 01EF                       	dc.b $1, $EF
00025D5B 03                         DPLC_33c5_201: 	dc.b $3
00025D5C 51F0                       	dc.b $51, $F0
00025D5E 11F6                       	dc.b $11, $F6
00025D60 B212                       	dc.b $B2, $12
00025D62 02                         DPLC_33c5_208: 	dc.b $2
00025D63 521E                       	dc.b $52, $1E
00025D65 B224                       	dc.b $B2, $24
00025D67 02                         DPLC_33c5_20D: 	dc.b $2
00025D68 510D                       	dc.b $51, $D
00025D6A B230                       	dc.b $B2, $30
00025D6C 02                         DPLC_33c5_212: 	dc.b $2
00025D6D 521E                       	dc.b $52, $1E
00025D6F B23C                       	dc.b $B2, $3C
00025D71 02                         DPLC_33c5_217: 	dc.b $2
00025D72 510D                       	dc.b $51, $D
00025D74 B248                       	dc.b $B2, $48
00025D76 04                         DPLC_33c5_21C: 	dc.b $4
00025D77 5254                       	dc.b $52, $54
00025D79 125A                       	dc.b $12, $5A
00025D7B B25C                       	dc.b $B2, $5C
00025D7D 0268                       	dc.b $2, $68
00025D7F 02                         DPLC_33c5_225: 	dc.b $2
00025D80 7269                       	dc.b $72, $69
00025D82 B271                       	dc.b $B2, $71
00025D84 04                         DPLC_33c5_22A: 	dc.b $4
00025D85 5254                       	dc.b $52, $54
00025D87 127D                       	dc.b $12, $7D
00025D89 B27F                       	dc.b $B2, $7F
00025D8B 0268                       	dc.b $2, $68
00025D8D 02                         DPLC_33c5_233: 	dc.b $2
00025D8E 7269                       	dc.b $72, $69
00025D90 B28B                       	dc.b $B2, $8B
00025D92 01                         DPLC_33c5_238: 	dc.b $1
00025D93 F297                       	dc.b $F2, $97
00025D95 01                         DPLC_33c5_23B: 	dc.b $1
00025D96 F2A7                       	dc.b $F2, $A7
00025D98 01                         DPLC_33c5_23E: 	dc.b $1
00025D99 F2B7                       	dc.b $F2, $B7
00025D9B 01                         DPLC_33c5_241: 	dc.b $1
00025D9C F2C7                       	dc.b $F2, $C7
00025D9E 01                         DPLC_33c5_244: 	dc.b $1
00025D9F F2D7                       	dc.b $F2, $D7
00025DA1 02                         DPLC_33c5_247: 	dc.b $2
00025DA2 B2E7                       	dc.b $B2, $E7
00025DA4 22F3                       	dc.b $22, $F3
00025DA6 01                         DPLC_33c5_24C: 	dc.b $1
00025DA7 F2F6                       	dc.b $F2, $F6
00025DA9 02                         DPLC_33c5_24F: 	dc.b $2
00025DAA B306                       	dc.b $B3, $6
00025DAC 2312                       	dc.b $23, $12
00025DAE 01                         DPLC_33c5_254: 	dc.b $1
00025DAF F315                       	dc.b $F3, $15
00025DB1 02                         DPLC_33c5_257: 	dc.b $2
00025DB2 5325                       	dc.b $53, $25
00025DB4 B32B                       	dc.b $B3, $2B
00025DB6 04                         DPLC_33c5_25C: 	dc.b $4
00025DB7 5337                       	dc.b $53, $37
00025DB9 733D                       	dc.b $73, $3D
00025DBB 1345                       	dc.b $13, $45
00025DBD 0347                       	dc.b $3, $47
00025DBF 02                         DPLC_33c5_265: 	dc.b $2
00025DC0 D348                       	dc.b $D3, $48
00025DC2 34EC                       	dc.b $34, $EC
00025DC4 02                         DPLC_33c5_26A: 	dc.b $2
00025DC5 F528                       	dc.b $F5, $28
00025DC7 0538                       	dc.b $5, $38
00025DC9 02                         DPLC_33c5_26F: 	dc.b $2
00025DCA F539                       	dc.b $F5, $39
00025DCC 0549                       	dc.b $5, $49
00025DCE 02                         DPLC_33c5_274: 	dc.b $2
00025DCF E356                       	dc.b $E3, $56
00025DD1 054A                       	dc.b $5, $4A
00025DD3 01                         DPLC_33c5_279: 	dc.b $1
00025DD4 8365                       	dc.b $83, $65
00025DD6 03                         DPLC_33c5_27C: 	dc.b $3
00025DD7 736E                       	dc.b $73, $6E
00025DD9 0376                       	dc.b $3, $76
00025DDB 3377                       	dc.b $33, $77
00025DDD 02                         DPLC_33c5_283: 	dc.b $2
00025DDE E37B                       	dc.b $E3, $7B
00025DE0 054A                       	dc.b $5, $4A
00025DE2 01                         DPLC_33c5_288: 	dc.b $1
00025DE3 D561                       	dc.b $D5, $61
00025DE5 04                         DPLC_33c5_28B: 	dc.b $4
00025DE6 B399                       	dc.b $B3, $99
00025DE8 33A5                       	dc.b $33, $A5
00025DEA 03A9                       	dc.b $3, $A9
00025DEC 03AA                       	dc.b $3, $AA
00025DEE 04                         DPLC_33c5_294: 	dc.b $4
00025DEF B3AB                       	dc.b $B3, $AB
00025DF1 33B7                       	dc.b $33, $B7
00025DF3 03BB                       	dc.b $3, $BB
00025DF5 03BC                       	dc.b $3, $BC
00025DF7 05                         DPLC_33c5_29D: 	dc.b $5
00025DF8 83BD                       	dc.b $83, $BD
00025DFA 13C6                       	dc.b $13, $C6
00025DFC 53C8                       	dc.b $53, $C8
00025DFE 13CE                       	dc.b $13, $CE
00025E00 03D0                       	dc.b $3, $D0
00025E02 05                         DPLC_33c5_2A8: 	dc.b $5
00025E03 83D1                       	dc.b $83, $D1
00025E05 13DA                       	dc.b $13, $DA
00025E07 53C8                       	dc.b $53, $C8
00025E09 13CE                       	dc.b $13, $CE
00025E0B 03D0                       	dc.b $3, $D0
00025E0D 02                         DPLC_33c5_2B3: 	dc.b $2
00025E0E 83DC                       	dc.b $83, $DC
00025E10 73E5                       	dc.b $73, $E5
00025E12 03                         DPLC_33c5_2B8: 	dc.b $3
00025E13 83ED                       	dc.b $83, $ED
00025E15 23F6                       	dc.b $23, $F6
00025E17 13F9                       	dc.b $13, $F9
00025E19 02                         DPLC_33c5_2BF: 	dc.b $2
00025E1A 83FB                       	dc.b $83, $FB
00025E1C 7404                       	dc.b $74, $4
00025E1E 03                         DPLC_33c5_2C4: 	dc.b $3
00025E1F 83ED                       	dc.b $83, $ED
00025E21 240C                       	dc.b $24, $C
00025E23 140F                       	dc.b $14, $F
00025E25 02                         DPLC_33c5_2CB: 	dc.b $2
00025E26 5411                       	dc.b $54, $11
00025E28 B417                       	dc.b $B4, $17
00025E2A 03                         DPLC_33c5_2D0: 	dc.b $3
00025E2B 8423                       	dc.b $84, $23
00025E2D 342C                       	dc.b $34, $2C
00025E2F 0430                       	dc.b $4, $30
00025E31 03                         DPLC_33c5_2D7: 	dc.b $3
00025E32 7431                       	dc.b $74, $31
00025E34 1439                       	dc.b $14, $39
00025E36 B43B                       	dc.b $B4, $3B
00025E38 05                         DPLC_33c5_2DE: 	dc.b $5
00025E39 7447                       	dc.b $74, $47
00025E3B 144F                       	dc.b $14, $4F
00025E3D 5451                       	dc.b $54, $51
00025E3F 3457                       	dc.b $34, $57
00025E41 045B                       	dc.b $4, $5B
00025E43 05                         DPLC_33c5_2E9: 	dc.b $5
00025E44 745C                       	dc.b $74, $5C
00025E46 144F                       	dc.b $14, $4F
00025E48 5464                       	dc.b $54, $64
00025E4A 3457                       	dc.b $34, $57
00025E4C 045B                       	dc.b $4, $5B
00025E4E 02                         DPLC_33c5_2F4: 	dc.b $2
00025E4F 246A                       	dc.b $24, $6A
00025E51 F46D                       	dc.b $F4, $6D
00025E53 03                         DPLC_33c5_2F9: 	dc.b $3
00025E54 247D                       	dc.b $24, $7D
00025E56 B480                       	dc.b $B4, $80
00025E58 248C                       	dc.b $24, $8C
00025E5A 01                         DPLC_33c5_300: 	dc.b $1
00025E5B B48F                       	dc.b $B4, $8F
00025E5D 01                         DPLC_33c5_303: 	dc.b $1
00025E5E 549B                       	dc.b $54, $9B
00025E60 01                         DPLC_33c5_306: 	dc.b $1
00025E61 14A1                       	dc.b $14, $A1
00025E63 02                         DPLC_33c5_309: 	dc.b $2
00025E64 E356                       	dc.b $E3, $56
00025E66 054A                       	dc.b $5, $4A
00025E68 03                         DPLC_33c5_30E: 	dc.b $3
00025E69 736E                       	dc.b $73, $6E
00025E6B 0376                       	dc.b $3, $76
00025E6D 3377                       	dc.b $33, $77
00025E6F 03                         DPLC_33c5_315: 	dc.b $3
00025E70 B4A3                       	dc.b $B4, $A3
00025E72 14AF                       	dc.b $14, $AF
00025E74 34B1                       	dc.b $34, $B1
00025E76 03                         DPLC_33c5_31C: 	dc.b $3
00025E77 54B5                       	dc.b $54, $B5
00025E79 B4BB                       	dc.b $B4, $BB
00025E7B 1074                       	dc.b $10, $74
00025E7D 02                         DPLC_33c5_323: 	dc.b $2
00025E7E F4C7                       	dc.b $F4, $C7
00025E80 24D7                       	dc.b $24, $D7
00025E82 02                         DPLC_33c5_328: 	dc.b $2
00025E83 F4DA                       	dc.b $F4, $DA
00025E85 14EA                       	dc.b $14, $EA
00025E87 02                         DPLC_33c5_32D: 	dc.b $2
00025E88 F502                       	dc.b $F5, $2
00025E8A 2512                       	dc.b $25, $12
00025E8C 02                         DPLC_33c5_332: 	dc.b $2
00025E8D F515                       	dc.b $F5, $15
00025E8F 2525                       	dc.b $25, $25
00025E91 02                         DPLC_33c5_337: 	dc.b $2
00025E92 F54B                       	dc.b $F5, $4B
00025E94 755B                       	dc.b $75, $5B
00025E96 00                         DPLC_33c5_33C: 	dc.b $0
00025E97 00                         DPLC_33c5_33D: 	dc.b $0
00025E98 00                         DPLC_33c5_33E: 	dc.b $0
00025E99 00                         DPLC_33c5_33F: 	dc.b $0
00025E9A 02                         DPLC_33c5_340: 	dc.b $2
00025E9B F4DA                       	dc.b $F4, $DA
00025E9D 14EA                       	dc.b $14, $EA
00025E9F 00                         DPLC_33c5_345: 	dc.b $0
00025EA0 02                         DPLC_33c5_346: 	dc.b $2
00025EA1 F4DA                       	dc.b $F4, $DA
00025EA3 14EA                       	dc.b $14, $EA
00025EA5 00                         DPLC_33c5_34B: 	dc.b $0
00025EA6 00                         DPLC_33c5_34C: 	dc.b $0
00025EA7 00                         DPLC_33c5_34D: 	dc.b $0
00025EA8 02                         DPLC_33c5_34E: 	dc.b $2
00025EA9 F4DA                       	dc.b $F4, $DA
00025EAB 14EA                       	dc.b $14, $EA
00025EAD 00                         DPLC_33c5_353: 	dc.b $0
00025EAE 02                         DPLC_33c5_354: 	dc.b $2
00025EAF F4DA                       	dc.b $F4, $DA
00025EB1 14EA                       	dc.b $14, $EA
00025EB3 00                         DPLC_33c5_359: 	dc.b $0
00025EB4 00                         DPLC_33c5_35A: 	dc.b $0
00025EB5 00                         DPLC_33c5_35B: 	dc.b $0
00025EB6 02                         DPLC_33c5_35C: 	dc.b $2
00025EB7 F4DA                       	dc.b $F4, $DA
00025EB9 14EA                       	dc.b $14, $EA
00025EBB 00                         DPLC_33c5_361: 	dc.b $0
00025EBC 02                         DPLC_33c5_362: 	dc.b $2
00025EBD F4DA                       	dc.b $F4, $DA
00025EBF 14EA                       	dc.b $14, $EA
00025EC1 00                         DPLC_33c5_367: 	dc.b $0
00025EC2                            	even
00025EC2                            	even
00025EC2                            
00025EC2                            ; ---------------------------------------------------------------------------
00025EC2                            ; Uncompressed graphics	- Sonic
00025EC2                            ; ---------------------------------------------------------------------------
00025EC2                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
00030CA2                            		even
00030CA2                            ; ---------------------------------------------------------------------------
00030CA2                            ; Compressed graphics - various
00030CA2                            ; ---------------------------------------------------------------------------
00030CA2                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
00030DA6                            		even
00030DA6                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
00030DE0                            		even
00030DE0                            Nem_Shield:	incbin	artnem\shield.bin	; shield
00030F76                            		even
00030F76                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
000310BE                            		even
000310BE                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
000311C8                            		even
000311C8                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
0003121A                            		even
0003121A                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
00031462                            		even
00031462                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
000315E8                            		even
000315E8                            ; ---------------------------------------------------------------------------
000315E8                            ; Sprite mappings - walls of the special stage
000315E8                            ; ---------------------------------------------------------------------------
000315E8                            Map_SSWalls:
000315E8                            	include "_maps\SSwalls.asm"
000315E8                            ; ---------------------------------------------------------------------------
000315E8                            ; Sprite mappings - walls of the special stage
000315E8                            ; ---------------------------------------------------------------------------
000315E8 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
000315EC 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
000315F0 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
000315F4 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
000315F8 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
000315FC 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
00031600 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
00031604 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
00031608 01                         byte_2C584:	dc.b 1
00031609 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0003160E 01                         byte_2C58A:	dc.b 1
0003160F F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
00031614 01                         byte_2C590:	dc.b 1
00031615 F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0003161A 01                         byte_2C596:	dc.b 1
0003161B F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
00031620 01                         byte_2C59C:	dc.b 1
00031621 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
00031626 01                         byte_2C5A2:	dc.b 1
00031627 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0003162C 01                         byte_2C5A8:	dc.b 1
0003162D F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
00031632 01                         byte_2C5AE:	dc.b 1
00031633 F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
00031638 01                         byte_2C5B4:	dc.b 1
00031639 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0003163E 01                         byte_2C5BA:	dc.b 1
0003163F F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
00031644 01                         byte_2C5C0:	dc.b 1
00031645 F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0003164A 01                         byte_2C5C6:	dc.b 1
0003164B F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
00031650 01                         byte_2C5CC:	dc.b 1
00031651 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
00031656 01                         byte_2C5D2:	dc.b 1
00031657 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0003165C 01                         byte_2C5D8:	dc.b 1
0003165D F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
00031662 01                         byte_2C5DE:	dc.b 1
00031663 F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
00031668                            		even
00031668                            		even
00031668                            ; ---------------------------------------------------------------------------
00031668                            ; Compressed graphics - special stage
00031668                            ; ---------------------------------------------------------------------------
00031668                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
00031FA0                            		even
00031FA0                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
000320EE                            		even
000320EE                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
00033580                            		even
00033580                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
00033880                            		even
00033880                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
00033D74                            		even
00033D74                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
00033E62                            		even
00033E62                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
00033F32                            		even
00033F32                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
00034028                            		even
00034028                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00034086                            		even
00034086                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00034118                            		even
00034118                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
000341DA                            		even
000341DA                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
000342A8                            		even
000342A8                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00034374                            		even
00034374                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
0003443C                            		even
0003443C                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00034506                            		even
00034506                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
000345D6                            		even
000345D6                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
000347CA                            		even
000347CA                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00034932                            		even
00034932                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
000349E2                            		even
000349E2                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
00034ABC                            		even
00034ABC                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
00034B40                            		even
00034B40                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
00034CBE                            		even
00034CBE                            ; ---------------------------------------------------------------------------
00034CBE                            ; Compressed graphics - GHZ stuff
00034CBE                            ; ---------------------------------------------------------------------------
00034CBE                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00034D08                            		even
00034D08                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
00034E22                            		even
00034E22                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00034F0E                            		even
00034F0E                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00034F56                            		even
00034F56                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
000350F4                            		even
000350F4                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
000351B0                            		even
000351B0                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
000353C4                            		even
000353C4                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
000354F0                            		even
000354F0                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
0003561E                            		even
0003561E                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
000356BC                            		even
000356BC                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
0003571C                            		even
0003571C                            ; ---------------------------------------------------------------------------
0003571C                            ; Compressed graphics - LZ stuff
0003571C                            ; ---------------------------------------------------------------------------
0003571C                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00035840                            		even
00035840                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00036034                            		even
00036034                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
000361B4                            		even
000361B4                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
0003631E                            		even
0003631E                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
00036974                            		even
00036974                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00036A2A                            		even
00036A2A                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
00036ACC                            		even
00036ACC                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00036C28                            		even
00036C28                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
00036C8C                            		even
00036C8C                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
00036DDE                            		even
00036DDE                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
000372C0                            		even
000372C0                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00037430                            		even
00037430                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
000376E8                            		even
000376E8                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00037820                            		even
00037820                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
0003794A                            		even
0003794A                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00037A5A                            		even
00037A5A                            ; ---------------------------------------------------------------------------
00037A5A                            ; Compressed graphics - MZ stuff
00037A5A                            ; ---------------------------------------------------------------------------
00037A5A                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00037CE8                            		even
00037CE8                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00037DA6                            		even
00037DA6                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00037E5E                            		even
00037E5E                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00037EB2                            		even
00037EB2                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00038184 00                         		even
00038184                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
00038A9A                            		even
00038A9A                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
00038BFE                            		even
00038BFE                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
00038C86                            		even
00038C86                            ; ---------------------------------------------------------------------------
00038C86                            ; Compressed graphics - SLZ stuff
00038C86                            ; ---------------------------------------------------------------------------
00038C86                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
00038EC2                            		even
00038EC2                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00039008                            		even
00039008                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
0003924C                            		even
0003924C                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
000392AE                            		even
000392AE                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00039390                            		even
00039390                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00039572                            		even
00039572                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
0003967E                            		even
0003967E                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00039722                            		even
00039722                            ; ---------------------------------------------------------------------------
00039722                            ; Compressed graphics - SYZ stuff
00039722                            ; ---------------------------------------------------------------------------
00039722                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
0003988C                            		even
0003988C                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
000398EE                            		even
000398EE                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
000399D0                            		even
000399D0                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
00039C5E                            		even
00039C5E                            ; ---------------------------------------------------------------------------
00039C5E                            ; Compressed graphics - SBZ stuff
00039C5E                            ; ---------------------------------------------------------------------------
00039C5E                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
00039CB2                            		even
00039CB2                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00039F4E                            		even
00039F4E                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
0003A152                            		even
0003A152                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
0003A2F0                            		even
0003A2F0                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
0003A620                            		even
0003A620                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
0003A7FE                            		even
0003A7FE                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
0003A856                            		even
0003A856                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0003AA20 00                         		even
0003AA20                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003AB1E                            		even
0003AB1E                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0003ACAA                            		even
0003ACAA                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003ACFA                            		even
0003ACFA                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003AD52                            		even
0003AD52                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003AE4E                            		even
0003AE4E                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003AF64                            		even
0003AF64                            ; ---------------------------------------------------------------------------
0003AF64                            ; Compressed graphics - enemies
0003AF64                            ; ---------------------------------------------------------------------------
0003AF64                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003B3D2 00                         		even
0003B3D2                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003B57C 00                         		even
0003B57C                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003B93E 00                         		even
0003B93E                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003BB26                            		even
0003BB26                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003BCDE 00                         		even
0003BCDE                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003BE28                            		even
0003BE28                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003C0B2                            		even
0003C0B2                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003C6D6                            		even
0003C6D6                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003C8CC                            		even
0003C8CC                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003CEEA                            		even
0003CEEA                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003D2EA 00                         		even
0003D2EA                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003D5E6                            		even
0003D5E6                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003D82E                            		even
0003D82E                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003DAC6                            		even
0003DAC6                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003DCA4                            		even
0003DCA4                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003DE32                            		even
0003DE32                            ; ---------------------------------------------------------------------------
0003DE32                            ; Compressed graphics - various
0003DE32                            ; ---------------------------------------------------------------------------
0003DE32                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003E362                            		even
0003E362                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003E458                            		even
0003E458                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003E55E                            		even
0003E55E                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003E652                            		even
0003E652                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003EB96                            		even
0003EB96                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003F1FC                            		even
0003F1FC                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003F2AC                            		even
0003F2AC                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003F43E                            		even
0003F43E                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003F552                            		even
0003F552                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003F624                            		even
0003F624                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003FAA0                            		even
0003FAA0                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003FB60                            		even
0003FB60                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003FCD4                            		even
0003FCD4                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003FFD6                            		even
0003FFD6                            ; ---------------------------------------------------------------------------
0003FFD6                            ; Compressed graphics - continue screen
0003FFD6                            ; ---------------------------------------------------------------------------
0003FFD6                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
00040286                            		even
00040286                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
000404C0                            		even
000404C0                            ; ---------------------------------------------------------------------------
000404C0                            ; Compressed graphics - animals
000404C0                            ; ---------------------------------------------------------------------------
000404C0                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
00040618                            		even
00040618                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
00040774                            		even
00040774                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
000408F0                            		even
000408F0                            Nem_Seal:	incbin	artnem\seal.bin		; seal
00040A0C                            		even
00040A0C                            Nem_Pig:	incbin	artnem\pig.bin		; pig
00040B42                            		even
00040B42                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
00040C7C                            		even
00040C7C                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
00040DD8                            		even
00040DD8                            ; ---------------------------------------------------------------------------
00040DD8                            ; Compressed graphics - primary patterns and block mappings
00040DD8                            ; ---------------------------------------------------------------------------
00040DD8                            Blk16_GHZ:	incbin	map16\ghz.bin
000416EC                            		even
000416EC                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
00042FFA                            		even
00042FFA                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
0004437A                            		even
0004437A                            Blk256_GHZ:	incbin	map256\ghz.bin
000467B4                            		even
000467B4                            Blk16_LZ:	incbin	map16\lz.bin
00046EEE                            		even
00046EEE                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00049342                            		even
00049342                            Blk256_LZ:	incbin	map256\lz.bin
0004BCC2                            		even
0004BCC2                            Blk16_MZ:	incbin	map16\mz.bin
0004C42A                            		even
0004C42A                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004ED66                            		even
0004ED66                            Blk256_MZ:	incbin	map256\mz.bin
0005057C                            		even
0005057C                            Blk16_SLZ:	incbin	map16\slz.bin
00050C46                            		even
00050C46                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
00052B9A                            		even
00052B9A                            Blk256_SLZ:	incbin	map256\slz.bin
00053214                            		even
00053214                            Blk16_SYZ:	incbin	map16\syz.bin
00053E3A                            		even
00053E3A                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
000583CC                            		even
000583CC                            Blk256_SYZ:	incbin	map256\syz.bin
0005A428                            		even
0005A428                            Blk16_SBZ:	incbin	map16\sbz.bin
0005B370                            		even
0005B370                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005DD34                            		even
0005DD34                            Blk256_SBZ:	incbin	map256\sbz.bin
0006082A                            		even
0006082A                            Blk16_BHZ:	incbin	map16\bhz.bin
0006113E                            		even
0006113E                            Nem_BHZ_1st:	incbin	artnem\8x8bhz1.bin	; GHZ primary patterns
00062750                            		even
00062750                            Nem_BHZ_2nd:	incbin	artnem\8x8bhz2.bin	; GHZ secondary patterns
00063AE4                            		even
00063AE4                            Blk256_BHZ:	incbin	map256\bhz.bin
00065C34                            		even
00065C34                            ; ---------------------------------------------------------------------------
00065C34                            ; Compressed graphics - bosses and ending sequence
00065C34                            ; ---------------------------------------------------------------------------
00065C34                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
0006644E 00                         		even
0006644E                            Nem_Tetoboss:	incbin	artnem\TetoBoss.bin	; boss main patterns
00066A9C                            		even
00066A9C                            Nem_Peartobomb:	incbin	artnem\peartobomb.bin	; boss main patterns
00066B16                            		even
00066B16                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
00066E00                            		even
00066E00                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
00067684                            		even
00067684                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
000683DA 00                         		even
000683DA                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
00068B42                            		even
00068B42                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
000690C2                            		even
000690C2                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
000691E2                            		even
000691E2                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
000693E0                            		even
000693E0                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
0006A5BE                            		even
0006A5BE                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
0006AF02                            		even
0006AF02                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
0006B2D8                            		even
0006B2D8                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
0006B868                            		even
0006B868                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
0006BAF0                            		even
0006BAF0                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
0006C0DE 00                         		even
0006C0DE                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
0006C366                            		even
0006C366                            		incbin	misc\padding2.bin
0006C46A                            		even
0006C46A                            ; ---------------------------------------------------------------------------
0006C46A                            ; Collision data
0006C46A                            ; ---------------------------------------------------------------------------
0006C46A                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
0006C56A                            		even
0006C56A                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
0006D56A                            		even
0006D56A                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
0006E56A                            		even
0006E56A                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
0006E722 00                         		even
0006E722                            Col_LZ:		incbin	collide\lz.bin		; LZ index
0006E88A                            		even
0006E88A                            Col_MZ:		incbin	collide\mz.bin		; MZ index
0006EA1A 00                         		even
0006EA1A                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
0006EC0E                            		even
0006EC0E                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
0006EE14                            		even
0006EE14                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
0006F0B2                            		even
0006F0B2                            Col_BHZ:	incbin	collide\bhz.bin		; GHZ index
0006F26A 00                         		even
0006F26A                            ; ---------------------------------------------------------------------------
0006F26A                            ; Special layouts
0006F26A                            ; ---------------------------------------------------------------------------
0006F26A                            SS_1:		incbin	sslayout\1.bin
0006F4B2                            		even
0006F4B2                            SS_2:		incbin	sslayout\2.bin
0006F86A                            		even
0006F86A                            SS_3:		incbin	sslayout\3.bin
0006FBC6                            		even
0006FBC6                            SS_4:		incbin	sslayout\4.bin
000700A0                            		even
000700A0                            SS_5:		incbin	sslayout\5.bin
00070550                            		even
00070550                            SS_6:		incbin	sslayout\6.bin
00070842                            		even
00070842                            ; ---------------------------------------------------------------------------
00070842                            ; Animated uncompressed graphics
00070842                            ; ---------------------------------------------------------------------------
00070842                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
00070A42                            		even
00070A42                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
00070E42                            		even
00070E42                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
000712C2                            		even
000712C2                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
000715C2                            		even
000715C2                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
00071BC2                            		even
00071BC2                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
00071EC2                            		even
00071EC2                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
00072942                            		even
00072942                            
00072942                            ; ---------------------------------------------------------------------------
00072942                            ; Level	layout index
00072942                            ; ---------------------------------------------------------------------------
00072942 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
00072948 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0007294E 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
00072954 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0007295A 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
00072960 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
00072966 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0007296C 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
00072972 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
00072978 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0007297E 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
00072984 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0007298A 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00072990 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00072996 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007299C 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
000729A2 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
000729A8 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
000729AE 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
000729B4 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
000729BA 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
000729C0 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
000729C6 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
000729CC 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
000729D2 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
000729D8 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
000729DE 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
000729E4 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
000729EA 0000 0000 0000             		dc.w Level_BHZ1-Level_Index, Level_BHZbg-Level_Index, byte_68D70-Level_Index
000729F0 0000 0000 0000             		dc.w Level_BHZ2-Level_Index, Level_BHZbg-Level_Index, byte_68E3C-Level_Index
000729F6 0000 0000 0000             		dc.w Level_BHZ3-Level_Index, Level_BHZbg-Level_Index, byte_68F84-Level_Index
000729FC 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
00072A02                            
00072A02                            Level_GHZ1:	incbin	levels\ghz1.bin
00072AF4                            		even
00072AF4 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
00072AF8                            Level_GHZ2:	incbin	levels\ghz2.bin
00072BC0                            		even
00072BC0 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
00072BC4                            Level_GHZ3:	incbin	levels\ghz3.bin
00072CE6                            		even
00072CE6                            Level_GHZbg:	incbin	levels\ghzbg.bin
00072D08                            		even
00072D08 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
00072D0C 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
00072D10                            
00072D10                            Level_LZ1:	incbin	levels\lz1.bin
00072E12                            		even
00072E12                            Level_LZbg:	incbin	levels\lzbg.bin
00072F14                            		even
00072F14 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
00072F18                            Level_LZ2:	incbin	levels\lz2.bin
00072FB2                            		even
00072FB2 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
00072FB6                            Level_LZ3:	incbin	levels\lz3.bin
000730D0                            		even
000730D0 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
000730D4                            Level_SBZ3:	incbin	levels\sbz3.bin
0007318E                            		even
0007318E 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
00073192                            
00073192                            Level_MZ1:	incbin	levels\mz1.bin
00073230                            		even
00073230                            Level_MZ1bg:	incbin	levels\mz1bg.bin
000732AA                            		even
000732AA                            Level_MZ2:	incbin	levels\mz2.bin
0007334E                            		even
0007334E                            Level_MZ2bg:	incbin	levels\mz2bg.bin
000733E0                            		even
000733E0 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
000733E4                            Level_MZ3:	incbin	levels\mz3.bin
000734C6                            		even
000734C6                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0007356A 00                         		even
0007356A 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0007356E 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
00073572                            
00073572                            Level_SLZ1:	incbin	levels\slz1.bin
00073684                            		even
00073684                            Level_SLZbg:	incbin	levels\slzbg.bin
0007369E                            		even
0007369E                            Level_SLZ2:	incbin	levels\slz2.bin
0007378E                            		even
0007378E                            Level_SLZ3:	incbin	levels\slz3.bin
000738A8                            		even
000738A8 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
000738AC                            
000738AC                            Level_SYZ1:	incbin	levels\syz1.bin
00073968 00                         		even
00073968                            Level_SYZbg:	incbin	levels\syzbg.bin
000739A2                            		even
000739A2 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
000739A6                            Level_SYZ2:	incbin	levels\syz2.bin
00073AAA                            		even
00073AAA 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
00073AAE                            Level_SYZ3:	incbin	levels\syz3.bin
00073C08 00                         		even
00073C08 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
00073C0C 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
00073C10                            
00073C10                            Level_SBZ1:	incbin	levels\sbz1.bin
00073D32                            		even
00073D32                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
00073D70                            		even
00073D70                            Level_SBZ2:	incbin	levels\sbz2.bin
00073EB2                            		even
00073EB2                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0007401C                            		even
0007401C 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
00074020 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
00074024                            Level_End:	incbin	levels\ending.bin
00074054 00                         		even
00074054 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
00074058                            Level_BHZ1:	incbin	levels\bhz1.bin
0007414A                            		even
0007414A                            
0007414A                            Level_BHZ2:	incbin	levels\bhz2.bin
00074212                            		even
00074212                            
00074212                            Level_BHZ3:	incbin	levels\bhz3.bin
00074334                            		even
00074334                            Level_BHZbg:	incbin	levels\bhzbg.bin
00074356                            		even
00074356                            ; ---------------------------------------------------------------------------
00074356                            ; Animated uncompressed giant ring graphics
00074356                            ; ---------------------------------------------------------------------------
00074356                            Art_BigRing:	incbin	artunc\bigring.bin
00074F96                            		even
00074F96                            
00074F96                            		incbin	misc\padding3.bin
00075032                            		even
00075032                            
00075032                            ; ---------------------------------------------------------------------------
00075032                            ; Sprite locations index
00075032                            ; ---------------------------------------------------------------------------
00075032 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00075036 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007503A 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007503E 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00075042 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00075046 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007504A 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007504E 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00075052 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00075056 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007505A 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007505E 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00075062 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00075066 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007506A 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007506E 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00075072 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00075076 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007507A 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007507E 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00075082 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00075086 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007508A 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007508E 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00075092 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00075096 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007509A 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007509E 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
000750A2 0000 0000                  		dc.w ObjPos_BHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000750A6 0000 0000                  		dc.w ObjPos_BHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000750AA 0000 0000                  		dc.w ObjPos_BHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000750AE 0000 0000                  		dc.w ObjPos_BHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000750B2                            ObjPos_LZxpf_Index:
000750B2 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_LZxpf_Index, ObjPos_LZ1pf2-ObjPos_LZxpf_Index
000750B6 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_LZxpf_Index, ObjPos_LZ2pf2-ObjPos_LZxpf_Index
000750BA 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_LZxpf_Index, ObjPos_LZ3pf2-ObjPos_LZxpf_Index
000750BE 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_LZxpf_Index, ObjPos_LZ1pf2-ObjPos_LZxpf_Index
000750C2                            
000750C2                            ObjPos_SBZ1pf_Index:
000750C2 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf2-ObjPos_SBZ1pf_Index
000750C6 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf4-ObjPos_SBZ1pf_Index
000750CA 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf6-ObjPos_SBZ1pf_Index
000750CE 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf2-ObjPos_SBZ1pf_Index
000750D2 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
000750D8                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0007597E                            		even
0007597E                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
00075C48                            		even
00075C48                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
00076614                            		even
00076614                            ObjPos_LZ1:	incbin	objpos\lz1.bin
000769BC                            		even
000769BC                            ObjPos_LZ2:	incbin	objpos\lz2.bin
00076CF2                            		even
00076CF2                            ObjPos_LZ3:	incbin	objpos\lz3.bin
00077208                            		even
00077208                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
000776A0                            		even
000776A0                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
000776D2                            		even
000776D2                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
00077704                            		even
00077704                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
00077736                            		even
00077736                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
00077768                            		even
00077768                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
000777B2                            		even
000777B2                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
000777F0                            		even
000777F0                            ObjPos_MZ1:	incbin	objpos\mz1.bin
00077AEA                            		even
00077AEA                            ObjPos_MZ2:	incbin	objpos\mz2.bin
00077F94                            		even
00077F94                            ObjPos_MZ3:	incbin	objpos\mz3.bin
0007850A                            		even
0007850A                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
00078534                            		even
00078534                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
0007899C                            		even
0007899C                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
00078F7E                            		even
00078F7E                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
000795F0                            		even
000795F0                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
00079B5A                            		even
00079B5A                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
0007A160                            		even
0007A160                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
0007A89E                            		even
0007A89E                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
0007AF7C                            		even
0007AF7C                            ObjPos_FZ:	incbin	objpos\fz.bin
0007AFC4                            		even
0007AFC4                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
0007AFF6                            		even
0007AFF6                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
0007B028                            		even
0007B028                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
0007B05A                            		even
0007B05A                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
0007B08C                            		even
0007B08C                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
0007B0BE                            		even
0007B0BE                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
0007B0F6                            		even
0007B0F6                            ObjPos_End:	incbin	objpos\ending.bin
0007B252                            		even
0007B252                            ObjPos_BHZ1:	incbin	objpos\bhz1.bin
0007B864                            		even
0007B864                            ObjPos_BHZ2:	incbin	objpos\bhz2.bin
0007BE28                            		even
0007BE28                            ObjPos_BHZ3:	incbin	objpos\bhz3.bin
0007C4E2                            		even
0007C4E2 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
0007C4E8                            ; ---------------------------------------------------------------------------
0007C4E8                            		incbin	misc\padding4.bin
0007CB12                            		even
0007CB12                            
0007CB12 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
0007CB16 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
0007CB1A 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
0007CB1E 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
0007CB22 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
0007CB26 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
0007CB2A                            ; ---------------------------------------------------------------------------
0007CB2A                            ; PSG instruments used in music
0007CB2A                            ; ---------------------------------------------------------------------------
0007CB2A 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
0007CB36 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0007CB42 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0007CB4E                            
0007CB4E 0000 0001 0101 0202 0203+  PSG1:		dc.b    0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5
0007CB5E 0505 0606 0607 80                      dc.b    5, 5, 6, 6, 6, 7, $80
0007CB65                            
0007CB65 0002 0406 0810 80          PSG2:		dc.b    0, 2, 4, 6, 8, $10, $80
0007CB6C                            
0007CB6C 0000 0101 0202 0303 0404+  PSG3:		dc.b    0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7
0007CB7C 80                                     dc.b    $80
0007CB7D                            
0007CB7D 0000 0203 0404 0505 0506+  PSG4:		dc.b    0, 0, 2, 3, 4, 4, 5, 5, 5, 6, $80
0007CB88                            
0007CB88 0000 0000 0000 0000 0000+  PSG5:		dc.b    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1
0007CB98 0101 0101 0101 0101 0202+              dc.b    1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2
0007CBA8 0303 0303 0303 0303 0480               dc.b    3, 3, 3, 3, 3, 3, 3, 3, 4, $80
0007CBB2                            
0007CBB2 0303 0302 0202 0201 0101+  PSG6:		dc.b    3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, $80
0007CBC1                            
0007CBC1 0000 0000 0000 0101 0101+  PSG7:		dc.b    0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
0007CBD1 0303 0304 0404 0505 0506+              dc.b    3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7, $80
0007CBDD                            
0007CBDD 0000 0000 0001 0101 0101+  PSG8:		dc.b    0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2
0007CBED 0303 0303 0304 0404 0404+              dc.b    3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6
0007CBFD 0606 0606 0707 0780                    dc.b    6, 6, 6, 6, 7, 7, 7, $80
0007CC05                            
0007CC05 0001 0203 0405 0607 0809+  PSG9:		dc.b    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, $A, $B, $C, $D, $E, $F
0007CC15 80                                     dc.b    $80
0007CC16                            
0007CC16 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
0007CC1E                            ; ---------------------------------------------------------------------------
0007CC1E                            ; Music	Pointers
0007CC1E                            ; ---------------------------------------------------------------------------
0007CC1E 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
0007CC26 0000 0000 0000 0000        		dc.l Music83, Music84
0007CC2E 0000 0000 0000 0000        		dc.l Music85, Music86
0007CC36 0000 0000 0000 0000        		dc.l Music87, Music88
0007CC3E 0000 0000 0000 0000        		dc.l Music89, Music8A
0007CC46 0000 0000 0000 0000        		dc.l Music8B, Music8C
0007CC4E 0000 0000 0000 0000        		dc.l Music8D, Music8E
0007CC56 0000 0000 0000 0000        		dc.l Music8F, Music90
0007CC5E 0000 0000 0000 0000        		dc.l Music91, Music92
0007CC66 0000 0000 0000 0000        		dc.l Music93, Music94
0007CC6E 0000 0000 0000 0000        		dc.l Music95, Music96
0007CC76 0000 0000 0000 0000        		dc.l Music97, Music98
0007CC7E 0000 0000 0000 0000        		dc.l Music99, Music9A
0007CC86 0000 0000 0000 0000        		dc.l Music9B, Music9C
0007CC8E 0000 0000 0000 0000        		dc.l Music9D, Music9E
0007CC96 0000 0000                  		dc.l Music9F
0007CC9A                            ; ---------------------------------------------------------------------------
0007CC9A                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
0007CC9A                            ; ---------------------------------------------------------------------------
0007CC9A 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
0007CCAA 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
0007CCBA 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
0007CCCA 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
0007CCDA 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
0007CCEA 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
0007CCFA 9090 9090                  		dc.b $90, $90, $90, $90
0007CCFE                            
0007CCFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CCFE                            
0007CCFE                            
0007CCFE                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
0007CCFE                            ; every 5th frame, update a second time (same technique as most SMPS versions, but more scuffed)
0007CCFE 4A38 FFF8                  		tst.b	($FFFFFFF8).w		; if in 60hz mode, branch
0007CD02 6A00                       		bpl.s	@main
0007CD04 7000                       		moveq	#0,d0			; PAL song timer "optimization"
0007CD06 3038 FE0E                  		move.w	($FFFFFE0E).w,d0	; TODO: proper timer, this is prone to overflow and cause slight variations
0007CD0A 80FC 0005                  		divu.w	#5,d0			;       also divisions are generally slow
0007CD0E 4840                       		swap	d0
0007CD10 4A40                       		tst.w	d0
0007CD12 6600                       		bne.s	@main
0007CD14 6100 0000                  		bsr.w	@main
0007CD18                            @main:
0007CD18 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0007CD20 4E71                       		nop
0007CD22 4E71                       		nop
0007CD24 4E71                       		nop
0007CD26                            ; loc_71B5A:
0007CD26                            @wait:
0007CD26 0839 0000 00A1 1100        		btst	#0,($A11100).l
0007CD2E 66F6                       		bne.s	@wait
0007CD30                            
0007CD30 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
0007CD38 6700                       		beq.s	loc_71B82
0007CD3A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0007CD42 4E71                       		nop
0007CD44 4E71                       		nop
0007CD46 4E71                       		nop
0007CD48 4E71                       		nop
0007CD4A 4E71                       		nop
0007CD4C 60CA                       		bra.s	@main		; if you want really funky sound, use sub_71B4C instead ;)
0007CD4E                            ; ===========================================================================
0007CD4E                            
0007CD4E                            loc_71B82:
0007CD4E 4DF9 00FF F000             		lea	($FFF000).l,a6
0007CD54 422E 000E                  		clr.b	$E(a6)
0007CD58 4A2E 0003                  		tst.b	3(a6)		; is music paused?
0007CD5C 6600 0000                  		bne.w	loc_71E50	; if yes, branch
0007CD60 532E 0001                  		subq.b	#1,1(a6)
0007CD64 6600                       		bne.s	loc_71B9E
0007CD66 4EBA 0000                  		jsr	sub_7260C(pc)
0007CD6A                            
0007CD6A                            loc_71B9E:
0007CD6A 102E 0004                  		move.b	4(a6),d0
0007CD6E 6700                       		beq.s	loc_71BA8
0007CD70 4EBA 0000                  		jsr	sub_72504(pc)
0007CD74                            
0007CD74                            loc_71BA8:
0007CD74 4A2E 0024                  		tst.b	$24(a6)
0007CD78 6700                       		beq.s	loc_71BB2
0007CD7A 4EBA 0000                  		jsr	sub_7267C(pc)
0007CD7E                            
0007CD7E                            loc_71BB2:
0007CD7E 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
0007CD82 6700                       		beq.s	loc_71BBC	; if not, branch
0007CD84 4EBA 0000                  		jsr	Sound_Play(pc)
0007CD88                            
0007CD88                            loc_71BBC:
0007CD88 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0007CD8E 6700                       		beq.s	loc_71BC8
0007CD90 4EBA 0000                  		jsr	Sound_ChkValue(pc)
0007CD94                            
0007CD94                            loc_71BC8:
0007CD94 4BEE 0040                  		lea	$40(a6),a5
0007CD98 4A15                       		tst.b	(a5)
0007CD9A 6A00                       		bpl.s	loc_71BD4
0007CD9C 4EBA 0000                  		jsr	sub_71C4E(pc)
0007CDA0                            
0007CDA0                            loc_71BD4:
0007CDA0 422E 0008                  		clr.b	8(a6)
0007CDA4 7E05                       		moveq	#5,d7
0007CDA6                            
0007CDA6                            loc_71BDA:
0007CDA6 DAFC 0030                  		adda.w	#$30,a5
0007CDAA 4A15                       		tst.b	(a5)
0007CDAC 6A00                       		bpl.s	loc_71BE6
0007CDAE 4EBA 0000                  		jsr	sub_71CCA(pc)
0007CDB2                            
0007CDB2                            loc_71BE6:
0007CDB2 51CF FFF2                  		dbf	d7,loc_71BDA
0007CDB6                            
0007CDB6 7E02                       		moveq	#2,d7
0007CDB8                            
0007CDB8                            loc_71BEC:
0007CDB8 DAFC 0030                  		adda.w	#$30,a5
0007CDBC 4A15                       		tst.b	(a5)
0007CDBE 6A00                       		bpl.s	loc_71BF8
0007CDC0 4EBA 0000                  		jsr	sub_72850(pc)
0007CDC4                            
0007CDC4                            loc_71BF8:
0007CDC4 51CF FFF2                  		dbf	d7,loc_71BEC
0007CDC8                            
0007CDC8 1D7C 0080 000E             		move.b	#$80,$E(a6)
0007CDCE 7E02                       		moveq	#2,d7
0007CDD0                            
0007CDD0                            loc_71C04:
0007CDD0 DAFC 0030                  		adda.w	#$30,a5
0007CDD4 4A15                       		tst.b	(a5)
0007CDD6 6A00                       		bpl.s	loc_71C10
0007CDD8 4EBA 0000                  		jsr	sub_71CCA(pc)
0007CDDC                            
0007CDDC                            loc_71C10:
0007CDDC 51CF FFF2                  		dbf	d7,loc_71C04
0007CDE0                            
0007CDE0 7E02                       		moveq	#2,d7
0007CDE2                            
0007CDE2                            loc_71C16:
0007CDE2 DAFC 0030                  		adda.w	#$30,a5
0007CDE6 4A15                       		tst.b	(a5)
0007CDE8 6A00                       		bpl.s	loc_71C22
0007CDEA 4EBA 0000                  		jsr	sub_72850(pc)
0007CDEE                            
0007CDEE                            loc_71C22:
0007CDEE 51CF FFF2                  		dbf	d7,loc_71C16
0007CDF2 1D7C 0040 000E             		move.b	#$40,$E(a6)
0007CDF8 DAFC 0030                  		adda.w	#$30,a5
0007CDFC 4A15                       		tst.b	(a5)
0007CDFE 6A00                       		bpl.s	loc_71C38
0007CE00 4EBA 0000                  		jsr	sub_71CCA(pc)
0007CE04                            
0007CE04                            loc_71C38:
0007CE04 DAFC 0030                  		adda.w	#$30,a5
0007CE08 4A15                       		tst.b	(a5)
0007CE0A 6A00                       		bpl.s	loc_71C44
0007CE0C 4EBA 0000                  		jsr	sub_72850(pc)
0007CE10                            
0007CE10                            loc_71C44:
0007CE10 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0007CE18 4E75                       		rts	
0007CE1A                            ; End of function sub_71B4C
0007CE1A                            
0007CE1A                            
0007CE1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CE1A                            
0007CE1A                            
0007CE1A                            sub_71C4E:				; XREF: sub_71B4C
0007CE1A 532D 000E                  		subq.b	#1,$E(a5)
0007CE1E 6600                       		bne.s	locret_71CAA
0007CE20 1D7C 0080 0008             		move.b	#$80,8(a6)
0007CE26 286D 0004                  		movea.l	4(a5),a4
0007CE2A                            
0007CE2A                            loc_71C5E:
0007CE2A 7A00                       		moveq	#0,d5
0007CE2C 1A1C                       		move.b	(a4)+,d5
0007CE2E 0C05 00E0                  		cmpi.b	#-$20,d5
0007CE32 6500                       		bcs.s	loc_71C6E
0007CE34 4EBA 0000                  		jsr	sub_72A5A(pc)
0007CE38 60F0                       		bra.s	loc_71C5E
0007CE3A                            ; ===========================================================================
0007CE3A                            
0007CE3A                            loc_71C6E:
0007CE3A 4A05                       		tst.b	d5
0007CE3C 6A00                       		bpl.s	loc_71C84
0007CE3E 1B45 0010                  		move.b	d5,$10(a5)
0007CE42 1A1C                       		move.b	(a4)+,d5
0007CE44 6A00                       		bpl.s	loc_71C84
0007CE46 534C                       		subq.w	#1,a4
0007CE48 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0007CE4E 6000                       		bra.s	loc_71C88
0007CE50                            ; ===========================================================================
0007CE50                            
0007CE50                            loc_71C84:
0007CE50 4EBA 0000                  		jsr	sub_71D40(pc)
0007CE54                            
0007CE54                            loc_71C88:
0007CE54 2B4C 0004                  		move.l	a4,4(a5)
0007CE58 0815 0002                  		btst	#2,(a5)
0007CE5C 6600                       		bne.s	locret_71CAA
0007CE5E 7000                       		moveq	#0,d0
0007CE60 102D 0010                  		move.b	$10(a5),d0
0007CE64 0C00 0080                  		cmpi.b	#$80,d0
0007CE68 6700                       		beq.s	locret_71CAA
0007CE6A 0800 0003                  		btst	#3,d0
0007CE6E 6600                       		bne.s	loc_71CAC
0007CE70 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
0007CE76                            
0007CE76                            locret_71CAA:
0007CE76 4E75                       		rts	
0007CE78                            ; ===========================================================================
0007CE78                            
0007CE78                            loc_71CAC:
0007CE78 0400 0088                  		subi.b	#$88,d0
0007CE7C 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
0007CE80 13C0 00A0 00EA             		move.b	d0,($A000EA).l
0007CE86 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
0007CE8E 4E75                       		rts	
0007CE90                            ; End of function sub_71C4E
0007CE90                            
0007CE90                            ; ===========================================================================
0007CE90 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
0007CE96                            
0007CE96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CE96                            
0007CE96                            
0007CE96                            sub_71CCA:				; XREF: sub_71B4C
0007CE96 532D 000E                  		subq.b	#1,$E(a5)
0007CE9A 6600                       		bne.s	loc_71CE0
0007CE9C 0895 0004                  		bclr	#4,(a5)
0007CEA0 4EBA 0000                  		jsr	sub_71CEC(pc)
0007CEA4 4EBA 0000                  		jsr	sub_71E18(pc)
0007CEA8 6000 0000                  		bra.w	loc_726E2
0007CEAC                            ; ===========================================================================
0007CEAC                            
0007CEAC                            loc_71CE0:
0007CEAC 4EBA 0000                  		jsr	sub_71D9E(pc)
0007CEB0 4EBA 0000                  		jsr	sub_71DC6(pc)
0007CEB4 6000 0000                  		bra.w	loc_71E24
0007CEB8                            ; End of function sub_71CCA
0007CEB8                            
0007CEB8                            
0007CEB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CEB8                            
0007CEB8                            
0007CEB8                            sub_71CEC:				; XREF: sub_71CCA
0007CEB8 286D 0004                  		movea.l	4(a5),a4
0007CEBC 0895 0001                  		bclr	#1,(a5)
0007CEC0                            
0007CEC0                            loc_71CF4:
0007CEC0 7A00                       		moveq	#0,d5
0007CEC2 1A1C                       		move.b	(a4)+,d5
0007CEC4 0C05 00E0                  		cmpi.b	#-$20,d5
0007CEC8 6500                       		bcs.s	loc_71D04
0007CECA 4EBA 0000                  		jsr	sub_72A5A(pc)
0007CECE 60F0                       		bra.s	loc_71CF4
0007CED0                            ; ===========================================================================
0007CED0                            
0007CED0                            loc_71D04:
0007CED0 4EBA 0000                  		jsr	sub_726FE(pc)
0007CED4 4A05                       		tst.b	d5
0007CED6 6A00                       		bpl.s	loc_71D1A
0007CED8 4EBA 0000                  		jsr	sub_71D22(pc)
0007CEDC 1A1C                       		move.b	(a4)+,d5
0007CEDE 6A00                       		bpl.s	loc_71D1A
0007CEE0 534C                       		subq.w	#1,a4
0007CEE2 6000 0000                  		bra.w	sub_71D60
0007CEE6                            ; ===========================================================================
0007CEE6                            
0007CEE6                            loc_71D1A:
0007CEE6 4EBA 0000                  		jsr	sub_71D40(pc)
0007CEEA 6000 0000                  		bra.w	sub_71D60
0007CEEE                            ; End of function sub_71CEC
0007CEEE                            
0007CEEE                            
0007CEEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CEEE                            
0007CEEE                            
0007CEEE                            sub_71D22:				; XREF: sub_71CEC
0007CEEE 0405 0080                  		subi.b	#$80,d5
0007CEF2 6700                       		beq.s	loc_71D58
0007CEF4 DA2D 0008                  		add.b	8(a5),d5
0007CEF8 0245 007F                  		andi.w	#$7F,d5
0007CEFC E34D                       		lsl.w	#1,d5
0007CEFE 41FA 0000                  		lea	word_72790(pc),a0
0007CF02 3C30 5000                  		move.w	(a0,d5.w),d6
0007CF06 3B46 0010                  		move.w	d6,$10(a5)
0007CF0A 4E75                       		rts	
0007CF0C                            ; End of function sub_71D22
0007CF0C                            
0007CF0C                            
0007CF0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CF0C                            
0007CF0C                            
0007CF0C                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0007CF0C 1005                       		move.b	d5,d0
0007CF0E 122D 0002                  		move.b	2(a5),d1
0007CF12                            
0007CF12                            loc_71D46:
0007CF12 5301                       		subq.b	#1,d1
0007CF14 6700                       		beq.s	loc_71D4E
0007CF16 D005                       		add.b	d5,d0
0007CF18 60F8                       		bra.s	loc_71D46
0007CF1A                            ; ===========================================================================
0007CF1A                            
0007CF1A                            loc_71D4E:
0007CF1A 1B40 000F                  		move.b	d0,$F(a5)
0007CF1E 1B40 000E                  		move.b	d0,$E(a5)
0007CF22 4E75                       		rts	
0007CF24                            ; End of function sub_71D40
0007CF24                            
0007CF24                            ; ===========================================================================
0007CF24                            
0007CF24                            loc_71D58:				; XREF: sub_71D22
0007CF24 08D5 0001                  		bset	#1,(a5)
0007CF28 426D 0010                  		clr.w	$10(a5)
0007CF2C                            
0007CF2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CF2C                            
0007CF2C                            
0007CF2C                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
0007CF2C 2B4C 0004                  		move.l	a4,4(a5)
0007CF30 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0007CF36 0815 0004                  		btst	#4,(a5)
0007CF3A 6600                       		bne.s	locret_71D9C
0007CF3C 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
0007CF42 422D 000C                  		clr.b	$C(a5)
0007CF46 0815 0003                  		btst	#3,(a5)
0007CF4A 6700                       		beq.s	locret_71D9C
0007CF4C 206D 0014                  		movea.l	$14(a5),a0
0007CF50 1B58 0018                  		move.b	(a0)+,$18(a5)
0007CF54 1B58 0019                  		move.b	(a0)+,$19(a5)
0007CF58 1B58 001A                  		move.b	(a0)+,$1A(a5)
0007CF5C 1018                       		move.b	(a0)+,d0
0007CF5E E208                       		lsr.b	#1,d0
0007CF60 1B40 001B                  		move.b	d0,$1B(a5)
0007CF64 426D 001C                  		clr.w	$1C(a5)
0007CF68                            
0007CF68                            locret_71D9C:
0007CF68 4E75                       		rts	
0007CF6A                            ; End of function sub_71D60
0007CF6A                            
0007CF6A                            
0007CF6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CF6A                            
0007CF6A                            
0007CF6A                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
0007CF6A 4A2D 0012                  		tst.b	$12(a5)
0007CF6E 6700                       		beq.s	locret_71DC4
0007CF70 532D 0012                  		subq.b	#1,$12(a5)
0007CF74 6600                       		bne.s	locret_71DC4
0007CF76 08D5 0001                  		bset	#1,(a5)
0007CF7A 4A2D 0001                  		tst.b	1(a5)
0007CF7E 6B00 0000                  		bmi.w	loc_71DBE
0007CF82 4EBA 0000                  		jsr	sub_726FE(pc)
0007CF86 584F                       		addq.w	#4,sp
0007CF88 4E75                       		rts	
0007CF8A                            ; ===========================================================================
0007CF8A                            
0007CF8A                            loc_71DBE:
0007CF8A 4EBA 0000                  		jsr	sub_729A0(pc)
0007CF8E 584F                       		addq.w	#4,sp
0007CF90                            
0007CF90                            locret_71DC4:
0007CF90 4E75                       		rts	
0007CF92                            ; End of function sub_71D9E
0007CF92                            
0007CF92                            
0007CF92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CF92                            
0007CF92                            
0007CF92                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
0007CF92 584F                       		addq.w	#4,sp
0007CF94 0815 0003                  		btst	#3,(a5)
0007CF98 6700                       		beq.s	locret_71E16
0007CF9A 4A2D 0018                  		tst.b	$18(a5)
0007CF9E 6700                       		beq.s	loc_71DDA
0007CFA0 532D 0018                  		subq.b	#1,$18(a5)
0007CFA4 4E75                       		rts	
0007CFA6                            ; ===========================================================================
0007CFA6                            
0007CFA6                            loc_71DDA:
0007CFA6 532D 0019                  		subq.b	#1,$19(a5)
0007CFAA 6700                       		beq.s	loc_71DE2
0007CFAC 4E75                       		rts	
0007CFAE                            ; ===========================================================================
0007CFAE                            
0007CFAE                            loc_71DE2:
0007CFAE 206D 0014                  		movea.l	$14(a5),a0
0007CFB2 1B68 0001 0019             		move.b	1(a0),$19(a5)
0007CFB8 4A2D 001B                  		tst.b	$1B(a5)
0007CFBC 6600                       		bne.s	loc_71DFE
0007CFBE 1B68 0003 001B             		move.b	3(a0),$1B(a5)
0007CFC4 442D 001A                  		neg.b	$1A(a5)
0007CFC8 4E75                       		rts	
0007CFCA                            ; ===========================================================================
0007CFCA                            
0007CFCA                            loc_71DFE:
0007CFCA 532D 001B                  		subq.b	#1,$1B(a5)
0007CFCE 1C2D 001A                  		move.b	$1A(a5),d6
0007CFD2 4886                       		ext.w	d6
0007CFD4 DC6D 001C                  		add.w	$1C(a5),d6
0007CFD8 3B46 001C                  		move.w	d6,$1C(a5)
0007CFDC DC6D 0010                  		add.w	$10(a5),d6
0007CFE0 594F                       		subq.w	#4,sp
0007CFE2                            
0007CFE2                            locret_71E16:
0007CFE2 4E75                       		rts	
0007CFE4                            ; End of function sub_71DC6
0007CFE4                            
0007CFE4                            
0007CFE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CFE4                            
0007CFE4                            
0007CFE4                            sub_71E18:				; XREF: sub_71CCA
0007CFE4 0815 0001                  		btst	#1,(a5)
0007CFE8 6600                       		bne.s	locret_71E48
0007CFEA 3C2D 0010                  		move.w	$10(a5),d6
0007CFEE 6700                       		beq.s	loc_71E4A
0007CFF0                            
0007CFF0                            loc_71E24:				; XREF: sub_71CCA
0007CFF0 102D 001E                  		move.b	$1E(a5),d0
0007CFF4 4880                       		ext.w	d0
0007CFF6 DC40                       		add.w	d0,d6
0007CFF8 0815 0002                  		btst	#2,(a5)
0007CFFC 6600                       		bne.s	locret_71E48
0007CFFE 3206                       		move.w	d6,d1
0007D000 E049                       		lsr.w	#8,d1
0007D002 103C 00A4                  		move.b	#-$5C,d0
0007D006 4EBA 0000                  		jsr	sub_72722(pc)
0007D00A 1206                       		move.b	d6,d1
0007D00C 103C 00A0                  		move.b	#-$60,d0
0007D010 4EBA 0000                  		jsr	sub_72722(pc)
0007D014                            
0007D014                            locret_71E48:
0007D014 4E75                       		rts	
0007D016                            ; ===========================================================================
0007D016                            
0007D016                            loc_71E4A:
0007D016 08D5 0001                  		bset	#1,(a5)
0007D01A 4E75                       		rts	
0007D01C                            ; End of function sub_71E18
0007D01C                            
0007D01C                            ; ===========================================================================
0007D01C                            
0007D01C                            loc_71E50:				; XREF: sub_71B4C
0007D01C 6B00                       		bmi.s	loc_71E94
0007D01E 0C2E 0002 0003             		cmpi.b	#2,3(a6)
0007D024 6700 0000                  		beq.w	loc_71EFE
0007D028 1D7C 0002 0003             		move.b	#2,3(a6)
0007D02E 7602                       		moveq	#2,d3
0007D030 103C 00B4                  		move.b	#-$4C,d0
0007D034 7200                       		moveq	#0,d1
0007D036                            
0007D036                            loc_71E6A:
0007D036 4EBA 0000                  		jsr	sub_7272E(pc)
0007D03A 4EBA 0000                  		jsr	sub_72764(pc)
0007D03E 5200                       		addq.b	#1,d0
0007D040 51CB FFF4                  		dbf	d3,loc_71E6A
0007D044                            
0007D044 7602                       		moveq	#2,d3
0007D046 7028                       		moveq	#$28,d0
0007D048                            
0007D048                            loc_71E7C:
0007D048 1203                       		move.b	d3,d1
0007D04A 4EBA 0000                  		jsr	sub_7272E(pc)
0007D04E 5801                       		addq.b	#4,d1
0007D050 4EBA 0000                  		jsr	sub_7272E(pc)
0007D054 51CB FFF2                  		dbf	d3,loc_71E7C
0007D058                            
0007D058 4EBA 0000                  		jsr	sub_729B6(pc)
0007D05C 6000 FDB2                  		bra.w	loc_71C44
0007D060                            ; ===========================================================================
0007D060                            
0007D060                            loc_71E94:				; XREF: loc_71E50
0007D060 422E 0003                  		clr.b	3(a6)
0007D064 7630                       		moveq	#$30,d3
0007D066 4BEE 0040                  		lea	$40(a6),a5
0007D06A 7806                       		moveq	#6,d4
0007D06C                            
0007D06C                            loc_71EA0:
0007D06C 0815 0007                  		btst	#7,(a5)
0007D070 6700                       		beq.s	loc_71EB8
0007D072 0815 0002                  		btst	#2,(a5)
0007D076 6600                       		bne.s	loc_71EB8
0007D078 103C 00B4                  		move.b	#-$4C,d0
0007D07C 122D 000A                  		move.b	$A(a5),d1
0007D080 4EBA 0000                  		jsr	sub_72722(pc)
0007D084                            
0007D084                            loc_71EB8:
0007D084 DAC3                       		adda.w	d3,a5
0007D086 51CC FFE4                  		dbf	d4,loc_71EA0
0007D08A                            
0007D08A 4BEE 0220                  		lea	$220(a6),a5
0007D08E 7802                       		moveq	#2,d4
0007D090                            
0007D090                            loc_71EC4:
0007D090 0815 0007                  		btst	#7,(a5)
0007D094 6700                       		beq.s	loc_71EDC
0007D096 0815 0002                  		btst	#2,(a5)
0007D09A 6600                       		bne.s	loc_71EDC
0007D09C 103C 00B4                  		move.b	#-$4C,d0
0007D0A0 122D 000A                  		move.b	$A(a5),d1
0007D0A4 4EBA 0000                  		jsr	sub_72722(pc)
0007D0A8                            
0007D0A8                            loc_71EDC:
0007D0A8 DAC3                       		adda.w	d3,a5
0007D0AA 51CC FFE4                  		dbf	d4,loc_71EC4
0007D0AE                            
0007D0AE 4BEE 0340                  		lea	$340(a6),a5
0007D0B2 0815 0007                  		btst	#7,(a5)
0007D0B6 6700                       		beq.s	loc_71EFE
0007D0B8 0815 0002                  		btst	#2,(a5)
0007D0BC 6600                       		bne.s	loc_71EFE
0007D0BE 103C 00B4                  		move.b	#-$4C,d0
0007D0C2 122D 000A                  		move.b	$A(a5),d1
0007D0C6 4EBA 0000                  		jsr	sub_72722(pc)
0007D0CA                            
0007D0CA                            loc_71EFE:
0007D0CA 6000 FD44                  		bra.w	loc_71C44
0007D0CE                            
0007D0CE                            ; ---------------------------------------------------------------------------
0007D0CE                            ; Subroutine to	play a sound or	music track
0007D0CE                            ; ---------------------------------------------------------------------------
0007D0CE                            
0007D0CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D0CE                            
0007D0CE                            
0007D0CE                            Sound_Play:				; XREF: sub_71B4C
0007D0CE 2079 0007 CB12             		movea.l	(Go_SoundTypes).l,a0
0007D0D4 43EE 000A                  		lea	$A(a6),a1	; load music track number
0007D0D8 1616                       		move.b	0(a6),d3
0007D0DA 7802                       		moveq	#2,d4
0007D0DC                            
0007D0DC                            loc_71F12:
0007D0DC 1011                       		move.b	(a1),d0		; move track number to d0
0007D0DE 1200                       		move.b	d0,d1
0007D0E0 4219                       		clr.b	(a1)+
0007D0E2 0400 0081                  		subi.b	#$81,d0
0007D0E6 6500                       		bcs.s	loc_71F3E
0007D0E8 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0007D0EE 6700                       		beq.s	loc_71F2C
0007D0F0 1D41 000A                  		move.b	d1,$A(a6)
0007D0F4 6000                       		bra.s	loc_71F3E
0007D0F6                            ; ===========================================================================
0007D0F6                            
0007D0F6                            loc_71F2C:
0007D0F6 0240 007F                  		andi.w	#$7F,d0
0007D0FA 1430 0000                  		move.b	(a0,d0.w),d2
0007D0FE B403                       		cmp.b	d3,d2
0007D100 6500                       		bcs.s	loc_71F3E
0007D102 1602                       		move.b	d2,d3
0007D104 1D41 0009                  		move.b	d1,9(a6)	; set music flag
0007D108                            
0007D108                            loc_71F3E:
0007D108 51CC FFD2                  		dbf	d4,loc_71F12
0007D10C                            
0007D10C 4A03                       		tst.b	d3
0007D10E 6B00                       		bmi.s	locret_71F4A
0007D110 1C83                       		move.b	d3,0(a6)
0007D112                            
0007D112                            locret_71F4A:
0007D112 4E75                       		rts	
0007D114                            ; End of function Sound_Play
0007D114                            
0007D114                            
0007D114                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D114                            
0007D114                            
0007D114                            Sound_ChkValue:				; XREF: sub_71B4C
0007D114 7E00                       		moveq	#0,d7
0007D116 1E2E 0009                  		move.b	9(a6),d7
0007D11A 6700 0000                  		beq.w	Sound_E4
0007D11E 6A00                       		bpl.s	locret_71F8C
0007D120 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
0007D126 0C07 009F                  		cmpi.b	#$9F,d7
0007D12A 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
0007D12E 0C07 00A0                  		cmpi.b	#$A0,d7
0007D132 6500 0000                  		bcs.w	locret_71F8C
0007D136 0C07 00CF                  		cmpi.b	#$CF,d7
0007D13A 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
0007D13E 0C07 00D0                  		cmpi.b	#$D0,d7
0007D142 6500 0000                  		bcs.w	locret_71F8C
0007D146 0C07 00E0                  		cmpi.b	#$E0,d7
0007D14A 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
0007D14E 0C07 00E5                  		cmpi.b	#$E5,d7
0007D152 6300                       		bls.s	Sound_E0toE5	; sound	$E0-$E5
0007D154                            
0007D154                            locret_71F8C:
0007D154 4E75                       		rts	
0007D156                            ; ===========================================================================
0007D156                            
0007D156                            Sound_E0toE5				; XREF: Sound_ChkValue
0007D156 0407 00E0                  		subi.b	#$E0,d7
0007D15A E54F                       		lsl.w	#2,d7
0007D15C 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
0007D160                            ; ===========================================================================
0007D160                            
0007D160                            Sound_ExIndex:
0007D160 6000 0000                  		bra.w	Sound_E0
0007D164                            ; ===========================================================================
0007D164 6000 0000                  		bra.w	Sound_E1
0007D168                            ; ===========================================================================
0007D168 6000 0000                  		bra.w	Sound_E2
0007D16C                            ; ===========================================================================
0007D16C 6000 0000                  		bra.w	Sound_E3
0007D170                            ; ===========================================================================
0007D170 6000 0000                  		bra.w	Sound_E4
0007D174                            ; ===========================================================================
0007D174 6000 0000                  		bra.w	Sound_E5
0007D178                            ; ===========================================================================
0007D178                            ; ---------------------------------------------------------------------------
0007D178                            ; Play "Say-gaa" PCM sound
0007D178                            ; ---------------------------------------------------------------------------
0007D178                            
0007D178                            Sound_E1:				  
0007D178 13FC 002B 00A0 4000        		move.b	#$2B,($A04000).l		; $A04000 = $2B -> Write to DAC enable
0007D180 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; enable DAC
0007D188 303C 007F                  		move.w	#127,d0				; delay so the YM doesn't crap itself
0007D18C 51C8 FFFE                  		dbf	d0,*
0007D190 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0007D196 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
0007D19C 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0007D1A4                            PlayPCM_Loop:	  
0007D1A4 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0007D1AA 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
0007D1AE 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
0007D1B2 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
0007D1B4 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
0007D1B6 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
0007D1BA 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
0007D1C0 4EB8 1436                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
0007D1C4 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
0007D1CA 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
0007D1CC 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
0007D1CE                            return_PlayPCM: 
0007D1CE 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; silence PCM to avoid an awful sounding click
0007D1D6 584F                       		addq.w	#4,sp 
0007D1D8 4E75                       		rts
0007D1DA                            		
0007D1DA                            ; ---------------------------------------------------------------------------
0007D1DA                            ; Play you are an idiot pcm sound
0007D1DA                            ; since the sfx already crashes the game forever load it here :V
0007D1DA                            ; ---------------------------------------------------------------------------
0007D1DA                            
0007D1DA                            Sound_E5: 
0007D1DA 4EB8 150E                  		jsr	ClearScreen
0007D1DE 13FC 002B 00A0 4000        		move.b	#$2B,($A04000).l		; $A04000 = $2B -> Write to DAC enable
0007D1E6 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; enable DAC
0007D1EE                            
0007D1EE                            		;control port on a5
0007D1EE 2ABC 9401 9340             		move.l	#$94000000+((($280>>1)&$FF00)<<8)+$9300+(($280>>1)&$FF),(a5)
0007D1F4 2ABC 96FC 9500             		move.l	#$96000000+((($FFFFF800>>1)&$FF00)<<8)+$9500+(($FFFFF800>>1)&$FF),(a5)
0007D1FA 3ABC 977F                  		move.w	#$9700+(((($FFFFF800>>1)&$FF0000)>>16)&$7F),(a5)
0007D1FE 3ABC 7800                  		move.w	#$4000+($F800&$3FFF),(a5)
0007D202 3ABC 0083                  		move.w	#$80+(($F800&$C000)>>14),(a5) ; clear sprites
0007D206                            		
0007D206 3ABC 8700                  		move.w	#$8700,(a5) ; first colour is bg now
0007D20A                            		
0007D20A 2ABC 4000 0000             		move.l	#$40000000,(a5)
0007D210 41F9 0002 487C             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
0007D216 4EB8 168A                  		jsr	NemDec
0007D21A 43F9 00FF 0000             		lea	($FF0000).l,a1
0007D220 41F9 0002 481E             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
0007D226 303C 0000                  		move.w	#0,d0
0007D22A 4EB8 1968                  		jsr	EniDec
0007D22E 43F9 00FF 0000             		lea	($FF0000).l,a1
0007D234 203C 4304 0003             		move.l	#$43040003,d0
0007D23A 7223                       		moveq	#35,d1
0007D23C 740D                       		moveq	#13,d2
0007D23E 4EB8 166A                  		jsr	ShowVDPGraphics
0007D242 7014                       		moveq	#20,d0
0007D244 4EB8 232E                  		jsr	PalLoad2	; load pallet
0007D248                            
0007D248                            
0007D248 4BF9 00C0 0004             		lea	($C00004).l,a5
0007D24E 50F8 FE25                  		st.b	($FFFFFE25).w			; start with -1, so the NOT makes it 0
0007D252 7600                       		moveq	#0,d3				; make @palett jump to @start when done
0007D254 6000                       		bra.s	@palett
0007D256                            @start:
0007D256 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0007D25C 263C 0000 0000             		move.l	#IdiotPCM_End-IdiotPCM,d3	; Load the size of the idiot PCM sample into d3 
0007D262 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel
0007D26A                            @loop:
0007D26A 44D5                       		move.w	(a5),ccr
0007D26C 6B00                       		bmi.s	@vblank
0007D26E                            
0007D26E 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0007D274 303C 0056                  		move.w	#$58-2,d0			; Write the pitch ($58 in this case) to d0  (-28 from the check before)
0007D278 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
0007D27C 5383                       		subq.l	#1,d3				; Subtract 1 from the PCM sample size 
0007D27E 66EA                       		bne.s	@loop				; if not zero, loop
0007D280 60D4                       		bra.s	@start
0007D282                            @vblank:
0007D282 0C38 000F FE24             		cmp.b	#15,($FFFFFE24).w
0007D288 6700                       		beq.s	@palett
0007D28A 5238 FE24                  		addq.b	#1,($FFFFFE24).w
0007D28E                            @loop_vblank:
0007D28E 44D5                       		move.w	(a5),ccr
0007D290 6AD8                       		bpl.s	@loop
0007D292                            
0007D292 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0007D298 303C 0056                  		move.w	#$58-2,d0			; Write the pitch ($58 in this case) to d0  (-28 from the check before)
0007D29C 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
0007D2A0 5383                       		subq.l	#1,d3				; Subtract 1 from the PCM sample size 
0007D2A2 66EA                       		bne.s	@loop_vblank			; if not zero, loop
0007D2A4 60B0                       		bra.s	@start
0007D2A6                            @palett:
0007D2A6 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
0007D2AC                            
0007D2AC 4238 FE24                  		clr.b	($FFFFFE24).w
0007D2B0 4638 FE25                  		not.b	($FFFFFE25).w
0007D2B4 6700                       		beq.s	@not_black
0007D2B6 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
0007D2BC 6000                       		bra.s	@merge
0007D2BE                            	@not_black:
0007D2BE 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
0007D2C4                            	@merge:
0007D2C4 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
0007D2C8 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
0007D2CC 3F3C 0080                  		move.w	#$80+((0&$C000)>>14),-(sp) ;dest
0007D2D0 3A9F                       		move.w	(sp)+,(a5)
0007D2D2                            		
0007D2D2 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
0007D2D6 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
0007D2DA 4A83                       		tst.l	d3
0007D2DC 66B0                       		bne.s	@loop_vblank
0007D2DE 6000 FF76                  		bra.w	@start
0007D2E2                            ; ===========================================================================
0007D2E2                            ; ---------------------------------------------------------------------------
0007D2E2                            ; Play music track $81-$9F
0007D2E2                            ; ---------------------------------------------------------------------------
0007D2E2                            
0007D2E2                            Sound_81to9F:				; XREF: Sound_ChkValue
0007D2E2 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
0007D2E6 6600                       		bne.s	loc_72024	; if not, branch
0007D2E8 4A2E 0027                  		tst.b	$27(a6)
0007D2EC 6600 0000                  		bne.w	loc_721B6
0007D2F0 4BEE 0040                  		lea	$40(a6),a5
0007D2F4 7009                       		moveq	#9,d0
0007D2F6                            
0007D2F6                            loc_71FE6:
0007D2F6 0895 0002                  		bclr	#2,(a5)
0007D2FA DAFC 0030                  		adda.w	#$30,a5
0007D2FE 51C8 FFF6                  		dbf	d0,loc_71FE6
0007D302                            
0007D302 4BEE 0220                  		lea	$220(a6),a5
0007D306 7005                       		moveq	#5,d0
0007D308                            
0007D308                            loc_71FF8:
0007D308 0895 0007                  		bclr	#7,(a5)
0007D30C DAFC 0030                  		adda.w	#$30,a5
0007D310 51C8 FFF6                  		dbf	d0,loc_71FF8
0007D314 4216                       		clr.b	0(a6)
0007D316 204E                       		movea.l	a6,a0
0007D318 43EE 03A0                  		lea	$3A0(a6),a1
0007D31C 303C 0087                  		move.w	#$87,d0
0007D320                            
0007D320                            loc_72012:
0007D320 22D8                       		move.l	(a0)+,(a1)+
0007D322 51C8 FFFC                  		dbf	d0,loc_72012
0007D326                            
0007D326 1D7C 0080 0027             		move.b	#$80,$27(a6)
0007D32C 4216                       		clr.b	0(a6)
0007D32E 6000                       		bra.s	loc_7202C
0007D330                            ; ===========================================================================
0007D330                            
0007D330                            loc_72024:
0007D330 422E 0027                  		clr.b	$27(a6)
0007D334 422E 0026                  		clr.b	$26(a6)
0007D338                            
0007D338                            loc_7202C:
0007D338 4EBA 0000                  		jsr	sub_725CA(pc)
0007D33C 2879 0007 CB22             		movea.l	(off_719A0).l,a4
0007D342 0407 0081                  		subi.b	#$81,d7
0007D346 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
0007D34C 2879 0007 CB1A             		movea.l	(Go_MusicIndex).l,a4
0007D352 E54F                       		lsl.w	#2,d7
0007D354 2874 7000                  		movea.l	(a4,d7.w),a4
0007D358 7000                       		moveq	#0,d0
0007D35A 3014                       		move.w	(a4),d0
0007D35C D08C                       		add.l	a4,d0
0007D35E 2D40 0018                  		move.l	d0,$18(a6)
0007D362 102C 0005                  		move.b	5(a4),d0
0007D366 1D40 0028                  		move.b	d0,$28(a6)
0007D36A 4A2E 002A                  		tst.b	$2A(a6)
0007D36E 6700                       		beq.s	loc_72068
0007D370 102E 0029                  		move.b	$29(a6),d0
0007D374                            
0007D374                            loc_72068:
0007D374 1D40 0002                  		move.b	d0,2(a6)
0007D378 1D40 0001                  		move.b	d0,1(a6)
0007D37C 7200                       		moveq	#0,d1
0007D37E 264C                       		movea.l	a4,a3
0007D380 5C4C                       		addq.w	#6,a4
0007D382 7E00                       		moveq	#0,d7
0007D384 1E2B 0002                  		move.b	2(a3),d7
0007D388 6700 0000                  		beq.w	loc_72114
0007D38C 5307                       		subq.b	#1,d7
0007D38E 123C 00C0                  		move.b	#-$40,d1
0007D392 182B 0004                  		move.b	4(a3),d4
0007D396 7C30                       		moveq	#$30,d6
0007D398 1A3C 0001                  		move.b	#1,d5
0007D39C 43EE 0040                  		lea	$40(a6),a1
0007D3A0 45FA 0000                  		lea	byte_721BA(pc),a2
0007D3A4                            
0007D3A4                            loc_72098:
0007D3A4 08D1 0007                  		bset	#7,(a1)
0007D3A8 135A 0001                  		move.b	(a2)+,1(a1)
0007D3AC 1344 0002                  		move.b	d4,2(a1)
0007D3B0 1346 000D                  		move.b	d6,$D(a1)
0007D3B4 1341 000A                  		move.b	d1,$A(a1)
0007D3B8 1345 000E                  		move.b	d5,$E(a1)
0007D3BC 7000                       		moveq	#0,d0
0007D3BE 301C                       		move.w	(a4)+,d0
0007D3C0 D08B                       		add.l	a3,d0
0007D3C2 2340 0004                  		move.l	d0,4(a1)
0007D3C6 335C 0008                  		move.w	(a4)+,8(a1)
0007D3CA D2C6                       		adda.w	d6,a1
0007D3CC 51CF FFD6                  		dbf	d7,loc_72098
0007D3D0 0C2B 0007 0002             		cmpi.b	#7,2(a3)
0007D3D6 6600                       		bne.s	loc_720D8
0007D3D8 702B                       		moveq	#$2B,d0
0007D3DA 7200                       		moveq	#0,d1
0007D3DC 4EBA 0000                  		jsr	sub_7272E(pc)
0007D3E0 6000 0000                  		bra.w	loc_72114
0007D3E4                            ; ===========================================================================
0007D3E4                            
0007D3E4                            loc_720D8:
0007D3E4 7028                       		moveq	#$28,d0
0007D3E6 7206                       		moveq	#6,d1
0007D3E8 4EBA 0000                  		jsr	sub_7272E(pc)
0007D3EC 103C 0042                  		move.b	#$42,d0
0007D3F0 727F                       		moveq	#$7F,d1
0007D3F2 4EBA 0000                  		jsr	sub_72764(pc)
0007D3F6 103C 004A                  		move.b	#$4A,d0
0007D3FA 727F                       		moveq	#$7F,d1
0007D3FC 4EBA 0000                  		jsr	sub_72764(pc)
0007D400 103C 0046                  		move.b	#$46,d0
0007D404 727F                       		moveq	#$7F,d1
0007D406 4EBA 0000                  		jsr	sub_72764(pc)
0007D40A 103C 004E                  		move.b	#$4E,d0
0007D40E 727F                       		moveq	#$7F,d1
0007D410 4EBA 0000                  		jsr	sub_72764(pc)
0007D414 103C 00B6                  		move.b	#-$4A,d0
0007D418 123C 00C0                  		move.b	#-$40,d1
0007D41C 4EBA 0000                  		jsr	sub_72764(pc)
0007D420                            
0007D420                            loc_72114:
0007D420 7E00                       		moveq	#0,d7
0007D422 1E2B 0003                  		move.b	3(a3),d7
0007D426 6700                       		beq.s	loc_72154
0007D428 5307                       		subq.b	#1,d7
0007D42A 43EE 0190                  		lea	$190(a6),a1
0007D42E 45FA 0000                  		lea	byte_721C2(pc),a2
0007D432                            
0007D432                            loc_72126:
0007D432 08D1 0007                  		bset	#7,(a1)
0007D436 135A 0001                  		move.b	(a2)+,1(a1)
0007D43A 1344 0002                  		move.b	d4,2(a1)
0007D43E 1346 000D                  		move.b	d6,$D(a1)
0007D442 1345 000E                  		move.b	d5,$E(a1)
0007D446 7000                       		moveq	#0,d0
0007D448 301C                       		move.w	(a4)+,d0
0007D44A D08B                       		add.l	a3,d0
0007D44C 2340 0004                  		move.l	d0,4(a1)
0007D450 335C 0008                  		move.w	(a4)+,8(a1)
0007D454 101C                       		move.b	(a4)+,d0
0007D456 135C 000B                  		move.b	(a4)+,$B(a1)
0007D45A D2C6                       		adda.w	d6,a1
0007D45C 51CF FFD4                  		dbf	d7,loc_72126
0007D460                            
0007D460                            loc_72154:
0007D460 43EE 0220                  		lea	$220(a6),a1
0007D464 7E05                       		moveq	#5,d7
0007D466                            
0007D466                            loc_7215A:
0007D466 4A11                       		tst.b	(a1)
0007D468 6A00 0000                  		bpl.w	loc_7217C
0007D46C 7000                       		moveq	#0,d0
0007D46E 1029 0001                  		move.b	1(a1),d0
0007D472 6B00                       		bmi.s	loc_7216E
0007D474 5500                       		subq.b	#2,d0
0007D476 E508                       		lsl.b	#2,d0
0007D478 6000                       		bra.s	loc_72170
0007D47A                            ; ===========================================================================
0007D47A                            
0007D47A                            loc_7216E:
0007D47A E608                       		lsr.b	#3,d0
0007D47C                            
0007D47C                            loc_72170:
0007D47C 41FA 0000                  		lea	dword_722CC(pc),a0
0007D480 2070 0000                  		movea.l	(a0,d0.w),a0
0007D484 08D0 0002                  		bset	#2,(a0)
0007D488                            
0007D488                            loc_7217C:
0007D488 D2C6                       		adda.w	d6,a1
0007D48A 51CF FFDA                  		dbf	d7,loc_7215A
0007D48E                            
0007D48E 4A6E 0340                  		tst.w	$340(a6)
0007D492 6A00                       		bpl.s	loc_7218E
0007D494 08EE 0002 0100             		bset	#2,$100(a6)
0007D49A                            
0007D49A                            loc_7218E:
0007D49A 4A6E 0370                  		tst.w	$370(a6)
0007D49E 6A00                       		bpl.s	loc_7219A
0007D4A0 08EE 0002 01F0             		bset	#2,$1F0(a6)
0007D4A6                            
0007D4A6                            loc_7219A:
0007D4A6 4BEE 0070                  		lea	$70(a6),a5
0007D4AA 7805                       		moveq	#5,d4
0007D4AC                            
0007D4AC                            loc_721A0:
0007D4AC 4EBA 0000                  		jsr	sub_726FE(pc)
0007D4B0 DAC6                       		adda.w	d6,a5
0007D4B2 51CC FFF8                  		dbf	d4,loc_721A0
0007D4B6 7802                       		moveq	#2,d4
0007D4B8                            
0007D4B8                            loc_721AC:
0007D4B8 4EBA 0000                  		jsr	sub_729A0(pc)
0007D4BC DAC6                       		adda.w	d6,a5
0007D4BE 51CC FFF8                  		dbf	d4,loc_721AC
0007D4C2                            
0007D4C2                            loc_721B6:
0007D4C2 584F                       		addq.w	#4,sp
0007D4C4 4E75                       		rts	
0007D4C6                            ; ===========================================================================
0007D4C6 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
0007D4CE                            		even
0007D4CE 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
0007D4D2                            		even
0007D4D2                            ; ===========================================================================
0007D4D2                            ; ---------------------------------------------------------------------------
0007D4D2                            ; Play normal sound effect
0007D4D2                            ; ---------------------------------------------------------------------------
0007D4D2                            
0007D4D2                            Sound_A0toCF:				; XREF: Sound_ChkValue
0007D4D2 4A2E 0027                  		tst.b	$27(a6)
0007D4D6 6600 0000                  		bne.w	loc_722C6
0007D4DA 4A2E 0004                  		tst.b	4(a6)
0007D4DE 6600 0000                  		bne.w	loc_722C6
0007D4E2 4A2E 0024                  		tst.b	$24(a6)
0007D4E6 6600 0000                  		bne.w	loc_722C6
0007D4EA 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
0007D4EE 6600                       		bne.s	Sound_notB5	; if not, branch
0007D4F0 4A2E 002B                  		tst.b	$2B(a6)
0007D4F4 6600                       		bne.s	loc_721EE
0007D4F6 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
0007D4FA                            
0007D4FA                            loc_721EE:
0007D4FA 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
0007D500                            
0007D500                            Sound_notB5:
0007D500 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
0007D504 6600                       		bne.s	Sound_notA7	; if not, branch
0007D506 4A2E 002C                  		tst.b	$2C(a6)
0007D50A 6600 0000                  		bne.w	locret_722C4
0007D50E 1D7C 0080 002C             		move.b	#$80,$2C(a6)
0007D514                            
0007D514                            Sound_notA7:
0007D514 2079 0007 CB1E             		movea.l	(Go_SoundIndex).l,a0
0007D51A 0407 00A0                  		subi.b	#$A0,d7
0007D51E E54F                       		lsl.w	#2,d7
0007D520 2670 7000                  		movea.l	(a0,d7.w),a3
0007D524 224B                       		movea.l	a3,a1
0007D526 7200                       		moveq	#0,d1
0007D528 3219                       		move.w	(a1)+,d1
0007D52A D28B                       		add.l	a3,d1
0007D52C 1A19                       		move.b	(a1)+,d5
0007D52E 1E19                       		move.b	(a1)+,d7
0007D530 5307                       		subq.b	#1,d7
0007D532 7C30                       		moveq	#$30,d6
0007D534                            
0007D534                            loc_72228:
0007D534 7600                       		moveq	#0,d3
0007D536 1629 0001                  		move.b	1(a1),d3
0007D53A 1803                       		move.b	d3,d4
0007D53C 6B00                       		bmi.s	loc_72244
0007D53E 5543                       		subq.w	#2,d3
0007D540 E54B                       		lsl.w	#2,d3
0007D542 4BFA 0000                  		lea	dword_722CC(pc),a5
0007D546 2A75 3000                  		movea.l	(a5,d3.w),a5
0007D54A 08D5 0002                  		bset	#2,(a5)
0007D54E 6000                       		bra.s	loc_7226E
0007D550                            ; ===========================================================================
0007D550                            
0007D550                            loc_72244:
0007D550 E64B                       		lsr.w	#3,d3
0007D552 4BFA 0000                  		lea	dword_722CC(pc),a5
0007D556 2A75 3000                  		movea.l	(a5,d3.w),a5
0007D55A 08D5 0002                  		bset	#2,(a5)
0007D55E 0C04 00C0                  		cmpi.b	#$C0,d4
0007D562 6600                       		bne.s	loc_7226E
0007D564 1004                       		move.b	d4,d0
0007D566 0000 001F                  		ori.b	#$1F,d0
0007D56A 13C0 00C0 0011             		move.b	d0,($C00011).l
0007D570 0840 0005                  		bchg	#5,d0
0007D574 13C0 00C0 0011             		move.b	d0,($C00011).l
0007D57A                            
0007D57A                            loc_7226E:
0007D57A 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
0007D57E 244D                       		movea.l	a5,a2
0007D580 700B                       		moveq	#$B,d0
0007D582                            
0007D582                            loc_72276:
0007D582 429A                       		clr.l	(a2)+
0007D584 51C8 FFFC                  		dbf	d0,loc_72276
0007D588                            
0007D588 3A99                       		move.w	(a1)+,(a5)
0007D58A 1B45 0002                  		move.b	d5,2(a5)
0007D58E 7000                       		moveq	#0,d0
0007D590 3019                       		move.w	(a1)+,d0
0007D592 D08B                       		add.l	a3,d0
0007D594 2B40 0004                  		move.l	d0,4(a5)
0007D598 3B59 0008                  		move.w	(a1)+,8(a5)
0007D59C 1B7C 0001 000E             		move.b	#1,$E(a5)
0007D5A2 1B46 000D                  		move.b	d6,$D(a5)
0007D5A6 4A04                       		tst.b	d4
0007D5A8 6B00                       		bmi.s	loc_722A8
0007D5AA 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0007D5B0 2B41 0020                  		move.l	d1,$20(a5)
0007D5B4                            
0007D5B4                            loc_722A8:
0007D5B4 51CF FF7E                  		dbf	d7,loc_72228
0007D5B8                            
0007D5B8 4A2E 0250                  		tst.b	$250(a6)
0007D5BC 6A00                       		bpl.s	loc_722B8
0007D5BE 08EE 0002 0340             		bset	#2,$340(a6)
0007D5C4                            
0007D5C4                            loc_722B8:
0007D5C4 4A2E 0310                  		tst.b	$310(a6)
0007D5C8 6A00                       		bpl.s	locret_722C4
0007D5CA 08EE 0002 0370             		bset	#2,$370(a6)
0007D5D0                            
0007D5D0                            locret_722C4:
0007D5D0 4E75                       		rts	
0007D5D2                            ; ===========================================================================
0007D5D2                            
0007D5D2                            loc_722C6:
0007D5D2 4216                       		clr.b	0(a6)
0007D5D4 4E75                       		rts	
0007D5D6                            ; ===========================================================================
0007D5D6 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
0007D5DA 0000 0000                  		dc.l 0
0007D5DE 00FF F100                  		dc.l $FFF100
0007D5E2 00FF F130                  		dc.l $FFF130
0007D5E6 00FF F190                  		dc.l $FFF190
0007D5EA 00FF F1C0                  		dc.l $FFF1C0
0007D5EE 00FF F1F0                  		dc.l $FFF1F0
0007D5F2 00FF F1F0                  		dc.l $FFF1F0
0007D5F6 00FF F220                  dword_722EC:	dc.l $FFF220
0007D5FA 0000 0000                  		dc.l 0
0007D5FE 00FF F250                  		dc.l $FFF250
0007D602 00FF F280                  		dc.l $FFF280
0007D606 00FF F2B0                  		dc.l $FFF2B0
0007D60A 00FF F2E0                  		dc.l $FFF2E0
0007D60E 00FF F310                  		dc.l $FFF310
0007D612 00FF F310                  		dc.l $FFF310
0007D616                            ; ===========================================================================
0007D616                            ; ---------------------------------------------------------------------------
0007D616                            ; Play GHZ waterfall sound
0007D616                            ; ---------------------------------------------------------------------------
0007D616                            
0007D616                            Sound_D0toDF:				; XREF: Sound_ChkValue
0007D616 4A2E 0027                  		tst.b	$27(a6)
0007D61A 6600 0000                  		bne.w	locret_723C6
0007D61E 4A2E 0004                  		tst.b	4(a6)
0007D622 6600 0000                  		bne.w	locret_723C6
0007D626 4A2E 0024                  		tst.b	$24(a6)
0007D62A 6600 0000                  		bne.w	locret_723C6
0007D62E 2079 0007 CB16             		movea.l	(Go_SoundD0).l,a0
0007D634 0407 00D0                  		subi.b	#$D0,d7
0007D638 E54F                       		lsl.w	#2,d7
0007D63A 2670 7000                  		movea.l	(a0,d7.w),a3
0007D63E 224B                       		movea.l	a3,a1
0007D640 7000                       		moveq	#0,d0
0007D642 3019                       		move.w	(a1)+,d0
0007D644 D08B                       		add.l	a3,d0
0007D646 2D40 0020                  		move.l	d0,$20(a6)
0007D64A 1A19                       		move.b	(a1)+,d5
0007D64C 1E19                       		move.b	(a1)+,d7
0007D64E 5307                       		subq.b	#1,d7
0007D650 7C30                       		moveq	#$30,d6
0007D652                            
0007D652                            loc_72348:
0007D652 1829 0001                  		move.b	1(a1),d4
0007D656 6B00                       		bmi.s	loc_7235A
0007D658 08EE 0002 0100             		bset	#2,$100(a6)
0007D65E 4BEE 0340                  		lea	$340(a6),a5
0007D662 6000                       		bra.s	loc_72364
0007D664                            ; ===========================================================================
0007D664                            
0007D664                            loc_7235A:
0007D664 08EE 0002 01F0             		bset	#2,$1F0(a6)
0007D66A 4BEE 0370                  		lea	$370(a6),a5
0007D66E                            
0007D66E                            loc_72364:
0007D66E 244D                       		movea.l	a5,a2
0007D670 700B                       		moveq	#$B,d0
0007D672                            
0007D672                            loc_72368:
0007D672 429A                       		clr.l	(a2)+
0007D674 51C8 FFFC                  		dbf	d0,loc_72368
0007D678                            
0007D678 3A99                       		move.w	(a1)+,(a5)
0007D67A 1B45 0002                  		move.b	d5,2(a5)
0007D67E 7000                       		moveq	#0,d0
0007D680 3019                       		move.w	(a1)+,d0
0007D682 D08B                       		add.l	a3,d0
0007D684 2B40 0004                  		move.l	d0,4(a5)
0007D688 3B59 0008                  		move.w	(a1)+,8(a5)
0007D68C 1B7C 0001 000E             		move.b	#1,$E(a5)
0007D692 1B46 000D                  		move.b	d6,$D(a5)
0007D696 4A04                       		tst.b	d4
0007D698 6B00                       		bmi.s	loc_72396
0007D69A 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0007D6A0                            
0007D6A0                            loc_72396:
0007D6A0 51CF FFB0                  		dbf	d7,loc_72348
0007D6A4                            
0007D6A4 4A2E 0250                  		tst.b	$250(a6)
0007D6A8 6A00                       		bpl.s	loc_723A6
0007D6AA 08EE 0002 0340             		bset	#2,$340(a6)
0007D6B0                            
0007D6B0                            loc_723A6:
0007D6B0 4A2E 0310                  		tst.b	$310(a6)
0007D6B4 6A00                       		bpl.s	locret_723C6
0007D6B6 08EE 0002 0370             		bset	#2,$370(a6)
0007D6BC 0004 001F                  		ori.b	#$1F,d4
0007D6C0 13C4 00C0 0011             		move.b	d4,($C00011).l
0007D6C6 0844 0005                  		bchg	#5,d4
0007D6CA 13C4 00C0 0011             		move.b	d4,($C00011).l
0007D6D0                            
0007D6D0                            locret_723C6:
0007D6D0 4E75                       		rts	
0007D6D2                            ; End of function Sound_ChkValue
0007D6D2                            
0007D6D2                            ; ===========================================================================
0007D6D2 00FF F100                  		dc.l $FFF100
0007D6D6 00FF F1F0                  		dc.l $FFF1F0
0007D6DA 00FF F250                  		dc.l $FFF250
0007D6DE 00FF F310                  		dc.l $FFF310
0007D6E2 00FF F340                  		dc.l $FFF340
0007D6E6 00FF F370                  		dc.l $FFF370
0007D6EA                            
0007D6EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D6EA                            
0007D6EA                            
0007D6EA                            Snd_FadeOut1:				; XREF: Sound_E0
0007D6EA 4216                       		clr.b	0(a6)
0007D6EC 4BEE 0220                  		lea	$220(a6),a5
0007D6F0 7E05                       		moveq	#5,d7
0007D6F2                            
0007D6F2                            loc_723EA:
0007D6F2 4A15                       		tst.b	(a5)
0007D6F4 6A00 0000                  		bpl.w	loc_72472
0007D6F8 0895 0007                  		bclr	#7,(a5)
0007D6FC 7600                       		moveq	#0,d3
0007D6FE 162D 0001                  		move.b	1(a5),d3
0007D702 6B00                       		bmi.s	loc_7243C
0007D704 4EBA 0000                  		jsr	sub_726FE(pc)
0007D708 0C03 0004                  		cmpi.b	#4,d3
0007D70C 6600                       		bne.s	loc_72416
0007D70E 4A2E 0340                  		tst.b	$340(a6)
0007D712 6A00                       		bpl.s	loc_72416
0007D714 4BEE 0340                  		lea	$340(a6),a5
0007D718 226E 0020                  		movea.l	$20(a6),a1
0007D71C 6000                       		bra.s	loc_72428
0007D71E                            ; ===========================================================================
0007D71E                            
0007D71E                            loc_72416:
0007D71E 5503                       		subq.b	#2,d3
0007D720 E50B                       		lsl.b	#2,d3
0007D722 41FA FEB2                  		lea	dword_722CC(pc),a0
0007D726 264D                       		movea.l	a5,a3
0007D728 2A70 3000                  		movea.l	(a0,d3.w),a5
0007D72C 226E 0018                  		movea.l	$18(a6),a1
0007D730                            
0007D730                            loc_72428:
0007D730 0895 0002                  		bclr	#2,(a5)
0007D734 08D5 0001                  		bset	#1,(a5)
0007D738 102D 000B                  		move.b	$B(a5),d0
0007D73C 4EBA 0000                  		jsr	sub_72C4E(pc)
0007D740 2A4B                       		movea.l	a3,a5
0007D742 6000                       		bra.s	loc_72472
0007D744                            ; ===========================================================================
0007D744                            
0007D744                            loc_7243C:
0007D744 4EBA 0000                  		jsr	sub_729A0(pc)
0007D748 41EE 0370                  		lea	$370(a6),a0
0007D74C 0C03 00E0                  		cmpi.b	#$E0,d3
0007D750 6700                       		beq.s	loc_7245A
0007D752 0C03 00C0                  		cmpi.b	#$C0,d3
0007D756 6700                       		beq.s	loc_7245A
0007D758 E60B                       		lsr.b	#3,d3
0007D75A 41FA FE7A                  		lea	dword_722CC(pc),a0
0007D75E 2070 3000                  		movea.l	(a0,d3.w),a0
0007D762                            
0007D762                            loc_7245A:
0007D762 0890 0002                  		bclr	#2,(a0)
0007D766 08D0 0001                  		bset	#1,(a0)
0007D76A 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0007D770 6600                       		bne.s	loc_72472
0007D772 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0007D77A                            
0007D77A                            loc_72472:
0007D77A DAFC 0030                  		adda.w	#$30,a5
0007D77E 51CF FF72                  		dbf	d7,loc_723EA
0007D782                            
0007D782 4E75                       		rts	
0007D784                            ; End of function Snd_FadeOut1
0007D784                            
0007D784                            
0007D784                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D784                            
0007D784                            
0007D784                            Snd_FadeOut2:				; XREF: Sound_E0
0007D784 4BEE 0340                  		lea	$340(a6),a5
0007D788 4A15                       		tst.b	(a5)
0007D78A 6A00                       		bpl.s	loc_724AE
0007D78C 0895 0007                  		bclr	#7,(a5)
0007D790 0815 0002                  		btst	#2,(a5)
0007D794 6600                       		bne.s	loc_724AE
0007D796 4EBA 0000                  		jsr	loc_7270A(pc)
0007D79A 4BEE 0100                  		lea	$100(a6),a5
0007D79E 0895 0002                  		bclr	#2,(a5)
0007D7A2 08D5 0001                  		bset	#1,(a5)
0007D7A6 4A15                       		tst.b	(a5)
0007D7A8 6A00                       		bpl.s	loc_724AE
0007D7AA 226E 0018                  		movea.l	$18(a6),a1
0007D7AE 102D 000B                  		move.b	$B(a5),d0
0007D7B2 4EBA 0000                  		jsr	sub_72C4E(pc)
0007D7B6                            
0007D7B6                            loc_724AE:
0007D7B6 4BEE 0370                  		lea	$370(a6),a5
0007D7BA 4A15                       		tst.b	(a5)
0007D7BC 6A00                       		bpl.s	locret_724E4
0007D7BE 0895 0007                  		bclr	#7,(a5)
0007D7C2 0815 0002                  		btst	#2,(a5)
0007D7C6 6600                       		bne.s	locret_724E4
0007D7C8 4EBA 0000                  		jsr	loc_729A6(pc)
0007D7CC 4BEE 01F0                  		lea	$1F0(a6),a5
0007D7D0 0895 0002                  		bclr	#2,(a5)
0007D7D4 08D5 0001                  		bset	#1,(a5)
0007D7D8 4A15                       		tst.b	(a5)
0007D7DA 6A00                       		bpl.s	locret_724E4
0007D7DC 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
0007D7E2 6600                       		bne.s	locret_724E4
0007D7E4 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
0007D7EC                            
0007D7EC                            locret_724E4:
0007D7EC 4E75                       		rts	
0007D7EE                            ; End of function Snd_FadeOut2
0007D7EE                            
0007D7EE                            ; ===========================================================================
0007D7EE                            ; ---------------------------------------------------------------------------
0007D7EE                            ; Fade out music
0007D7EE                            ; ---------------------------------------------------------------------------
0007D7EE                            
0007D7EE                            Sound_E0:				; XREF: Sound_ExIndex
0007D7EE 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
0007D7F2 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
0007D7F6 1D7C 0003 0006             		move.b	#3,6(a6)
0007D7FC 1D7C 0028 0004             		move.b	#$28,4(a6)
0007D802 422E 0040                  		clr.b	$40(a6)
0007D806 422E 002A                  		clr.b	$2A(a6)
0007D80A 4E75                       		rts	
0007D80C                            
0007D80C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D80C                            
0007D80C                            
0007D80C                            sub_72504:				; XREF: sub_71B4C
0007D80C 102E 0006                  		move.b	6(a6),d0
0007D810 6700                       		beq.s	loc_72510
0007D812 532E 0006                  		subq.b	#1,6(a6)
0007D816 4E75                       		rts	
0007D818                            ; ===========================================================================
0007D818                            
0007D818                            loc_72510:
0007D818 532E 0004                  		subq.b	#1,4(a6)
0007D81C 6700 0000                  		beq.w	Sound_E4
0007D820 1D7C 0003 0006             		move.b	#3,6(a6)
0007D826 4BEE 0070                  		lea	$70(a6),a5
0007D82A 7E05                       		moveq	#5,d7
0007D82C                            
0007D82C                            loc_72524:
0007D82C 4A15                       		tst.b	(a5)
0007D82E 6A00                       		bpl.s	loc_72538
0007D830 522D 0009                  		addq.b	#1,9(a5)
0007D834 6A00                       		bpl.s	loc_72534
0007D836 0895 0007                  		bclr	#7,(a5)
0007D83A 6000                       		bra.s	loc_72538
0007D83C                            ; ===========================================================================
0007D83C                            
0007D83C                            loc_72534:
0007D83C 4EBA 0000                  		jsr	sub_72CB4(pc)
0007D840                            
0007D840                            loc_72538:
0007D840 DAFC 0030                  		adda.w	#$30,a5
0007D844 51CF FFE6                  		dbf	d7,loc_72524
0007D848                            
0007D848 7E02                       		moveq	#2,d7
0007D84A                            
0007D84A                            loc_72542:
0007D84A 4A15                       		tst.b	(a5)
0007D84C 6A00                       		bpl.s	loc_72560
0007D84E 522D 0009                  		addq.b	#1,9(a5)
0007D852 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
0007D858 6500                       		bcs.s	loc_72558
0007D85A 0895 0007                  		bclr	#7,(a5)
0007D85E 6000                       		bra.s	loc_72560
0007D860                            ; ===========================================================================
0007D860                            
0007D860                            loc_72558:
0007D860 1C2D 0009                  		move.b	9(a5),d6
0007D864 4EBA 0000                  		jsr	sub_7296A(pc)
0007D868                            
0007D868                            loc_72560:
0007D868 DAFC 0030                  		adda.w	#$30,a5
0007D86C 51CF FFDC                  		dbf	d7,loc_72542
0007D870                            
0007D870 4E75                       		rts	
0007D872                            ; End of function sub_72504
0007D872                            
0007D872                            
0007D872                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D872                            
0007D872                            
0007D872                            sub_7256A:				; XREF: Sound_E4; sub_725CA
0007D872 7602                       		moveq	#2,d3
0007D874 7028                       		moveq	#$28,d0
0007D876                            
0007D876                            loc_7256E:
0007D876 1203                       		move.b	d3,d1
0007D878 4EBA 0000                  		jsr	sub_7272E(pc)
0007D87C 5801                       		addq.b	#4,d1
0007D87E 4EBA 0000                  		jsr	sub_7272E(pc)
0007D882 51CB FFF2                  		dbf	d3,loc_7256E
0007D886                            
0007D886 7040                       		moveq	#$40,d0
0007D888 727F                       		moveq	#$7F,d1
0007D88A 7802                       		moveq	#2,d4
0007D88C                            
0007D88C                            loc_72584:
0007D88C 7603                       		moveq	#3,d3
0007D88E                            
0007D88E                            loc_72586:
0007D88E 4EBA 0000                  		jsr	sub_7272E(pc)
0007D892 4EBA 0000                  		jsr	sub_72764(pc)
0007D896 5840                       		addq.w	#4,d0
0007D898 51CB FFF4                  		dbf	d3,loc_72586
0007D89C                            
0007D89C 0400 000F                  		subi.b	#$F,d0
0007D8A0 51CC FFEA                  		dbf	d4,loc_72584
0007D8A4                            
0007D8A4 4E75                       		rts	
0007D8A6                            ; End of function sub_7256A
0007D8A6                            
0007D8A6                            ; ===========================================================================
0007D8A6                            ; ---------------------------------------------------------------------------
0007D8A6                            ; Stop music
0007D8A6                            ; ---------------------------------------------------------------------------
0007D8A6                            
0007D8A6                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
0007D8A6 702B                       		moveq	#$2B,d0
0007D8A8 123C 0080                  		move.b	#$80,d1
0007D8AC 4EBA 0000                  		jsr	sub_7272E(pc)
0007D8B0 7027                       		moveq	#$27,d0
0007D8B2 7200                       		moveq	#0,d1
0007D8B4 4EBA 0000                  		jsr	sub_7272E(pc)
0007D8B8 204E                       		movea.l	a6,a0
0007D8BA 303C 00E3                  		move.w	#$E3,d0
0007D8BE                            
0007D8BE                            loc_725B6:
0007D8BE 4298                       		clr.l	(a0)+
0007D8C0 51C8 FFFC                  		dbf	d0,loc_725B6
0007D8C4                            
0007D8C4 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
0007D8CA 4EBA FFA6                  		jsr	sub_7256A(pc)
0007D8CE 6000 0000                  		bra.w	sub_729B6
0007D8D2                            
0007D8D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D8D2                            
0007D8D2                            
0007D8D2                            sub_725CA:				; XREF: Sound_ChkValue
0007D8D2 204E                       		movea.l	a6,a0
0007D8D4 1216                       		move.b	0(a6),d1
0007D8D6 142E 0027                  		move.b	$27(a6),d2
0007D8DA 162E 002A                  		move.b	$2A(a6),d3
0007D8DE 182E 0026                  		move.b	$26(a6),d4
0007D8E2 3A2E 000A                  		move.w	$A(a6),d5
0007D8E6 303C 0087                  		move.w	#$87,d0
0007D8EA                            
0007D8EA                            loc_725E4:
0007D8EA 4298                       		clr.l	(a0)+
0007D8EC 51C8 FFFC                  		dbf	d0,loc_725E4
0007D8F0                            
0007D8F0 1C81                       		move.b	d1,0(a6)
0007D8F2 1D42 0027                  		move.b	d2,$27(a6)
0007D8F6 1D43 002A                  		move.b	d3,$2A(a6)
0007D8FA 1D44 0026                  		move.b	d4,$26(a6)
0007D8FE 3D45 000A                  		move.w	d5,$A(a6)
0007D902 1D7C 0080 0009             		move.b	#$80,9(a6)
0007D908 4EBA FF68                  		jsr	sub_7256A(pc)
0007D90C 6000 0000                  		bra.w	sub_729B6
0007D910                            ; End of function sub_725CA
0007D910                            
0007D910                            
0007D910                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D910                            
0007D910                            
0007D910                            sub_7260C:				; XREF: sub_71B4C
0007D910 1D6E 0002 0001             		move.b	2(a6),1(a6)
0007D916 41EE 004E                  		lea	$4E(a6),a0
0007D91A 7030                       		moveq	#$30,d0
0007D91C 7209                       		moveq	#9,d1
0007D91E                            
0007D91E                            loc_7261A:
0007D91E 5210                       		addq.b	#1,(a0)
0007D920 D0C0                       		adda.w	d0,a0
0007D922 51C9 FFFA                  		dbf	d1,loc_7261A
0007D926                            
0007D926 4E75                       		rts	
0007D928                            ; End of function sub_7260C
0007D928                            
0007D928                            ; ===========================================================================
0007D928                            ; ---------------------------------------------------------------------------
0007D928                            ; Speed	up music
0007D928                            ; ---------------------------------------------------------------------------
0007D928                            
0007D928                            Sound_E2:				; XREF: Sound_ExIndex
0007D928 4A2E 0027                  		tst.b	$27(a6)
0007D92C 6600                       		bne.s	loc_7263E
0007D92E 1D6E 0029 0002             		move.b	$29(a6),2(a6)
0007D934 1D6E 0029 0001             		move.b	$29(a6),1(a6)
0007D93A 1D7C 0080 002A             		move.b	#$80,$2A(a6)
0007D940 4E75                       		rts	
0007D942                            ; ===========================================================================
0007D942                            
0007D942                            loc_7263E:
0007D942 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
0007D948 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
0007D94E 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
0007D954 4E75                       		rts	
0007D956                            ; ===========================================================================
0007D956                            ; ---------------------------------------------------------------------------
0007D956                            ; Change music back to normal speed
0007D956                            ; ---------------------------------------------------------------------------
0007D956                            
0007D956                            Sound_E3:				; XREF: Sound_ExIndex
0007D956 4A2E 0027                  		tst.b	$27(a6)
0007D95A 6600                       		bne.s	loc_7266A
0007D95C 1D6E 0028 0002             		move.b	$28(a6),2(a6)
0007D962 1D6E 0028 0001             		move.b	$28(a6),1(a6)
0007D968 422E 002A                  		clr.b	$2A(a6)
0007D96C 4E75                       		rts	
0007D96E                            ; ===========================================================================
0007D96E                            
0007D96E                            loc_7266A:
0007D96E 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
0007D974 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
0007D97A 422E 03CA                  		clr.b	$3CA(a6)
0007D97E 4E75                       		rts	
0007D980                            
0007D980                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D980                            
0007D980                            
0007D980                            sub_7267C:				; XREF: sub_71B4C
0007D980 4A2E 0025                  		tst.b	$25(a6)
0007D984 6700                       		beq.s	loc_72688
0007D986 532E 0025                  		subq.b	#1,$25(a6)
0007D98A 4E75                       		rts	
0007D98C                            ; ===========================================================================
0007D98C                            
0007D98C                            loc_72688:
0007D98C 4A2E 0026                  		tst.b	$26(a6)
0007D990 6700                       		beq.s	loc_726D6
0007D992 532E 0026                  		subq.b	#1,$26(a6)
0007D996 1D7C 0002 0025             		move.b	#2,$25(a6)
0007D99C 4BEE 0070                  		lea	$70(a6),a5
0007D9A0 7E05                       		moveq	#5,d7
0007D9A2                            
0007D9A2                            loc_7269E:
0007D9A2 4A15                       		tst.b	(a5)
0007D9A4 6A00                       		bpl.s	loc_726AA
0007D9A6 532D 0009                  		subq.b	#1,9(a5)
0007D9AA 4EBA 0000                  		jsr	sub_72CB4(pc)
0007D9AE                            
0007D9AE                            loc_726AA:
0007D9AE DAFC 0030                  		adda.w	#$30,a5
0007D9B2 51CF FFEE                  		dbf	d7,loc_7269E
0007D9B6 7E02                       		moveq	#2,d7
0007D9B8                            
0007D9B8                            loc_726B4:
0007D9B8 4A15                       		tst.b	(a5)
0007D9BA 6A00                       		bpl.s	loc_726CC
0007D9BC 532D 0009                  		subq.b	#1,9(a5)
0007D9C0 1C2D 0009                  		move.b	9(a5),d6
0007D9C4 0C06 0010                  		cmpi.b	#$10,d6
0007D9C8 6500                       		bcs.s	loc_726C8
0007D9CA 7C0F                       		moveq	#$F,d6
0007D9CC                            
0007D9CC                            loc_726C8:
0007D9CC 4EBA 0000                  		jsr	sub_7296A(pc)
0007D9D0                            
0007D9D0                            loc_726CC:
0007D9D0 DAFC 0030                  		adda.w	#$30,a5
0007D9D4 51CF FFE2                  		dbf	d7,loc_726B4
0007D9D8 4E75                       		rts	
0007D9DA                            ; ===========================================================================
0007D9DA                            
0007D9DA                            loc_726D6:
0007D9DA 08AE 0002 0040             		bclr	#2,$40(a6)
0007D9E0 422E 0024                  		clr.b	$24(a6)
0007D9E4 4E75                       		rts	
0007D9E6                            ; End of function sub_7267C
0007D9E6                            
0007D9E6                            ; ===========================================================================
0007D9E6                            
0007D9E6                            loc_726E2:				; XREF: sub_71CCA
0007D9E6 0815 0001                  		btst	#1,(a5)
0007D9EA 6600                       		bne.s	locret_726FC
0007D9EC 0815 0002                  		btst	#2,(a5)
0007D9F0 6600                       		bne.s	locret_726FC
0007D9F2 7028                       		moveq	#$28,d0
0007D9F4 122D 0001                  		move.b	1(a5),d1
0007D9F8 0001 00F0                  		ori.b	#-$10,d1
0007D9FC 6000 0000                  		bra.w	sub_7272E
0007DA00                            ; ===========================================================================
0007DA00                            
0007DA00                            locret_726FC:
0007DA00 4E75                       		rts	
0007DA02                            
0007DA02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DA02                            
0007DA02                            
0007DA02                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
0007DA02 0815 0004                  		btst	#4,(a5)
0007DA06 6600                       		bne.s	locret_72714
0007DA08 0815 0002                  		btst	#2,(a5)
0007DA0C 6600                       		bne.s	locret_72714
0007DA0E                            
0007DA0E                            loc_7270A:				; XREF: Snd_FadeOut2
0007DA0E 7028                       		moveq	#$28,d0
0007DA10 122D 0001                  		move.b	1(a5),d1
0007DA14 6000 0000                  		bra.w	sub_7272E
0007DA18                            ; ===========================================================================
0007DA18                            
0007DA18                            locret_72714:
0007DA18 4E75                       		rts	
0007DA1A                            ; End of function sub_726FE
0007DA1A                            
0007DA1A                            ; ===========================================================================
0007DA1A                            
0007DA1A                            loc_72716:				; XREF: sub_72A5A
0007DA1A 0815 0002                  		btst	#2,(a5)
0007DA1E 6600                       		bne.s	locret_72720
0007DA20 6000 0000                  		bra.w	sub_72722
0007DA24                            ; ===========================================================================
0007DA24                            
0007DA24                            locret_72720:
0007DA24 4E75                       		rts	
0007DA26                            
0007DA26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DA26                            
0007DA26                            
0007DA26                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
0007DA26 082D 0002 0001             		btst	#2,1(a5)
0007DA2C 6600                       		bne.s	loc_7275A
0007DA2E D02D 0001                  		add.b	1(a5),d0
0007DA32                            ; End of function sub_72722
0007DA32                            
0007DA32                            
0007DA32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DA32                            
0007DA32                            
0007DA32                            sub_7272E:				; XREF: loc_71E6A
0007DA32 1439 00A0 4000             		move.b	($A04000).l,d2
0007DA38 0802 0007                  		btst	#7,d2
0007DA3C 66F4                       		bne.s	sub_7272E
0007DA3E 13C0 00A0 4000             		move.b	d0,($A04000).l
0007DA44 4E71                       		nop	
0007DA46 4E71                       		nop	
0007DA48 4E71                       		nop	
0007DA4A                            
0007DA4A                            loc_72746:
0007DA4A 1439 00A0 4000             		move.b	($A04000).l,d2
0007DA50 0802 0007                  		btst	#7,d2
0007DA54 66F4                       		bne.s	loc_72746
0007DA56                            
0007DA56 13C1 00A0 4001             		move.b	d1,($A04001).l
0007DA5C 4E75                       		rts	
0007DA5E                            ; End of function sub_7272E
0007DA5E                            
0007DA5E                            ; ===========================================================================
0007DA5E                            
0007DA5E                            loc_7275A:				; XREF: sub_72722
0007DA5E 142D 0001                  		move.b	1(a5),d2
0007DA62 0882 0002                  		bclr	#2,d2
0007DA66 D002                       		add.b	d2,d0
0007DA68                            
0007DA68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DA68                            
0007DA68                            
0007DA68                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
0007DA68 1439 00A0 4000             		move.b	($A04000).l,d2
0007DA6E 0802 0007                  		btst	#7,d2
0007DA72 66F4                       		bne.s	sub_72764
0007DA74 13C0 00A0 4002             		move.b	d0,($A04002).l
0007DA7A 4E71                       		nop	
0007DA7C 4E71                       		nop	
0007DA7E 4E71                       		nop	
0007DA80                            
0007DA80                            loc_7277C:
0007DA80 1439 00A0 4000             		move.b	($A04000).l,d2
0007DA86 0802 0007                  		btst	#7,d2
0007DA8A 66F4                       		bne.s	loc_7277C
0007DA8C                            
0007DA8C 13C1 00A0 4003             		move.b	d1,($A04003).l
0007DA92 4E75                       		rts	
0007DA94                            ; End of function sub_72764
0007DA94                            
0007DA94                            ; ===========================================================================
0007DA94 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
0007DAA6 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
0007DAB8 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
0007DAC8 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
0007DAD8 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
0007DAE8 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
0007DAF8 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
0007DB08 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
0007DB18 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
0007DB28 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
0007DB38 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
0007DB48 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
0007DB54                            
0007DB54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DB54                            
0007DB54                            
0007DB54                            sub_72850:				; XREF: sub_71B4C
0007DB54 532D 000E                  		subq.b	#1,$E(a5)
0007DB58 6600                       		bne.s	loc_72866
0007DB5A 0895 0004                  		bclr	#4,(a5)
0007DB5E 4EBA 0000                  		jsr	sub_72878(pc)
0007DB62 4EBA 0000                  		jsr	sub_728DC(pc)
0007DB66 6000 0000                  		bra.w	loc_7292E
0007DB6A                            ; ===========================================================================
0007DB6A                            
0007DB6A                            loc_72866:
0007DB6A 4EBA F3FE                  		jsr	sub_71D9E(pc)
0007DB6E 4EBA 0000                  		jsr	sub_72926(pc)
0007DB72 4EBA F41E                  		jsr	sub_71DC6(pc)
0007DB76 4EBA 0000                  		jsr	sub_728E2(pc)
0007DB7A 4E75                       		rts	
0007DB7C                            ; End of function sub_72850
0007DB7C                            
0007DB7C                            
0007DB7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DB7C                            
0007DB7C                            
0007DB7C                            sub_72878:				; XREF: sub_72850
0007DB7C 0895 0001                  		bclr	#1,(a5)
0007DB80 286D 0004                  		movea.l	4(a5),a4
0007DB84                            
0007DB84                            loc_72880:
0007DB84 7A00                       		moveq	#0,d5
0007DB86 1A1C                       		move.b	(a4)+,d5
0007DB88 0C05 00E0                  		cmpi.b	#$E0,d5
0007DB8C 6500                       		bcs.s	loc_72890
0007DB8E 4EBA 0000                  		jsr	sub_72A5A(pc)
0007DB92 60F0                       		bra.s	loc_72880
0007DB94                            ; ===========================================================================
0007DB94                            
0007DB94                            loc_72890:
0007DB94 4A05                       		tst.b	d5
0007DB96 6A00                       		bpl.s	loc_728A4
0007DB98 4EBA 0000                  		jsr	sub_728AC(pc)
0007DB9C 1A1C                       		move.b	(a4)+,d5
0007DB9E 4A05                       		tst.b	d5
0007DBA0 6A00                       		bpl.s	loc_728A4
0007DBA2 534C                       		subq.w	#1,a4
0007DBA4 6000 F386                  		bra.w	sub_71D60
0007DBA8                            ; ===========================================================================
0007DBA8                            
0007DBA8                            loc_728A4:
0007DBA8 4EBA F362                  		jsr	sub_71D40(pc)
0007DBAC 6000 F37E                  		bra.w	sub_71D60
0007DBB0                            ; End of function sub_72878
0007DBB0                            
0007DBB0                            
0007DBB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DBB0                            
0007DBB0                            
0007DBB0                            sub_728AC:				; XREF: sub_72878
0007DBB0 0405 0081                  		subi.b	#$81,d5
0007DBB4 6500                       		bcs.s	loc_728CA
0007DBB6 DA2D 0008                  		add.b	8(a5),d5
0007DBBA 0245 007F                  		andi.w	#$7F,d5
0007DBBE E34D                       		lsl.w	#1,d5
0007DBC0 41FA 0000                  		lea	word_729CE(pc),a0
0007DBC4 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
0007DBCA 6000 F360                  		bra.w	sub_71D60
0007DBCE                            ; ===========================================================================
0007DBCE                            
0007DBCE                            loc_728CA:
0007DBCE 08D5 0001                  		bset	#1,(a5)
0007DBD2 3B7C FFFF 0010             		move.w	#-1,$10(a5)
0007DBD8 4EBA F352                  		jsr	sub_71D60(pc)
0007DBDC 6000 0000                  		bra.w	sub_729A0
0007DBE0                            ; End of function sub_728AC
0007DBE0                            
0007DBE0                            
0007DBE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DBE0                            
0007DBE0                            
0007DBE0                            sub_728DC:				; XREF: sub_72850
0007DBE0 3C2D 0010                  		move.w	$10(a5),d6
0007DBE4 6B00                       		bmi.s	loc_72920
0007DBE6                            ; End of function sub_728DC
0007DBE6                            
0007DBE6                            
0007DBE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DBE6                            
0007DBE6                            
0007DBE6                            sub_728E2:				; XREF: sub_72850
0007DBE6 102D 001E                  		move.b	$1E(a5),d0
0007DBEA 4880                       		ext.w	d0
0007DBEC DC40                       		add.w	d0,d6
0007DBEE 0815 0002                  		btst	#2,(a5)
0007DBF2 6600                       		bne.s	locret_7291E
0007DBF4 0815 0001                  		btst	#1,(a5)
0007DBF8 6600                       		bne.s	locret_7291E
0007DBFA 102D 0001                  		move.b	1(a5),d0
0007DBFE 0C00 00E0                  		cmpi.b	#$E0,d0
0007DC02 6600                       		bne.s	loc_72904
0007DC04 103C 00C0                  		move.b	#$C0,d0
0007DC08                            
0007DC08                            loc_72904:
0007DC08 3206                       		move.w	d6,d1
0007DC0A 0201 000F                  		andi.b	#$F,d1
0007DC0E 8001                       		or.b	d1,d0
0007DC10 E84E                       		lsr.w	#4,d6
0007DC12 0206 003F                  		andi.b	#$3F,d6
0007DC16 13C0 00C0 0011             		move.b	d0,($C00011).l
0007DC1C 13C6 00C0 0011             		move.b	d6,($C00011).l
0007DC22                            
0007DC22                            locret_7291E:
0007DC22 4E75                       		rts	
0007DC24                            ; End of function sub_728E2
0007DC24                            
0007DC24                            ; ===========================================================================
0007DC24                            
0007DC24                            loc_72920:				; XREF: sub_728DC
0007DC24 08D5 0001                  		bset	#1,(a5)
0007DC28 4E75                       		rts	
0007DC2A                            
0007DC2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DC2A                            
0007DC2A                            
0007DC2A                            sub_72926:				; XREF: sub_72850
0007DC2A 4A2D 000B                  		tst.b	$B(a5)
0007DC2E 6700 0000                  		beq.w	locret_7298A
0007DC32                            
0007DC32                            loc_7292E:				; XREF: sub_72850
0007DC32 1C2D 0009                  		move.b	9(a5),d6
0007DC36 7000                       		moveq	#0,d0
0007DC38 102D 000B                  		move.b	$B(a5),d0
0007DC3C 6700                       		beq.s	sub_7296A
0007DC3E 2079 0007 CB26             		movea.l	(Go_PSGIndex).l,a0
0007DC44 5340                       		subq.w	#1,d0
0007DC46 E548                       		lsl.w	#2,d0
0007DC48 2070 0000                  		movea.l	(a0,d0.w),a0
0007DC4C 102D 000C                  		move.b	$C(a5),d0
0007DC50 1030 0000                  		move.b	(a0,d0.w),d0
0007DC54 522D 000C                  		addq.b	#1,$C(a5)
0007DC58 0800 0007                  		btst	#7,d0
0007DC5C 6700                       		beq.s	loc_72960
0007DC5E 0C00 0080                  		cmpi.b	#$80,d0
0007DC62 6700                       		beq.s	loc_7299A
0007DC64                            
0007DC64                            loc_72960:
0007DC64 DC40                       		add.w	d0,d6
0007DC66 0C06 0010                  		cmpi.b	#$10,d6
0007DC6A 6500                       		bcs.s	sub_7296A
0007DC6C 7C0F                       		moveq	#$F,d6
0007DC6E                            ; End of function sub_72926
0007DC6E                            
0007DC6E                            
0007DC6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DC6E                            
0007DC6E                            
0007DC6E                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
0007DC6E 0815 0001                  		btst	#1,(a5)
0007DC72 6600                       		bne.s	locret_7298A
0007DC74 0815 0002                  		btst	#2,(a5)
0007DC78 6600                       		bne.s	locret_7298A
0007DC7A 0815 0004                  		btst	#4,(a5)
0007DC7E 6600                       		bne.s	loc_7298C
0007DC80                            
0007DC80                            loc_7297C:
0007DC80 8C2D 0001                  		or.b	1(a5),d6
0007DC84 0606 0010                  		addi.b	#$10,d6
0007DC88 13C6 00C0 0011             		move.b	d6,($C00011).l
0007DC8E                            
0007DC8E                            locret_7298A:
0007DC8E 4E75                       		rts	
0007DC90                            ; ===========================================================================
0007DC90                            
0007DC90                            loc_7298C:
0007DC90 4A2D 0013                  		tst.b	$13(a5)
0007DC94 67EA                       		beq.s	loc_7297C
0007DC96 4A2D 0012                  		tst.b	$12(a5)
0007DC9A 66E4                       		bne.s	loc_7297C
0007DC9C 4E75                       		rts	
0007DC9E                            ; End of function sub_7296A
0007DC9E                            
0007DC9E                            ; ===========================================================================
0007DC9E                            
0007DC9E                            loc_7299A:				; XREF: sub_72926
0007DC9E 532D 000C                  		subq.b	#1,$C(a5)
0007DCA2 4E75                       		rts	
0007DCA4                            
0007DCA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DCA4                            
0007DCA4                            
0007DCA4                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
0007DCA4 0815 0002                  		btst	#2,(a5)
0007DCA8 6600                       		bne.s	locret_729B4
0007DCAA                            
0007DCAA                            loc_729A6:				; XREF: Snd_FadeOut2
0007DCAA 102D 0001                  		move.b	1(a5),d0
0007DCAE 0000 001F                  		ori.b	#$1F,d0
0007DCB2 13C0 00C0 0011             		move.b	d0,($C00011).l
0007DCB8                            
0007DCB8                            locret_729B4:
0007DCB8 4E75                       		rts	
0007DCBA                            ; End of function sub_729A0
0007DCBA                            
0007DCBA                            
0007DCBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DCBA                            
0007DCBA                            
0007DCBA                            sub_729B6:				; XREF: loc_71E7C
0007DCBA 41F9 00C0 0011             		lea	($C00011).l,a0
0007DCC0 10BC 009F                  		move.b	#$9F,(a0)
0007DCC4 10BC 00BF                  		move.b	#$BF,(a0)
0007DCC8 10BC 00DF                  		move.b	#$DF,(a0)
0007DCCC 10BC 00FF                  		move.b	#$FF,(a0)
0007DCD0 4E75                       		rts	
0007DCD2                            ; End of function sub_729B6
0007DCD2                            
0007DCD2                            ; ===========================================================================
0007DCD2 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
0007DCE4 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
0007DCF6 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
0007DD0A 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
0007DD1E 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
0007DD32 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
0007DD46 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
0007DD5A 0011 0000                  		dc.w $11, 0
0007DD5E                            
0007DD5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DD5E                            
0007DD5E                            
0007DD5E                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0007DD5E 0445 00E0                  		subi.w	#$E0,d5
0007DD62 E54D                       		lsl.w	#2,d5
0007DD64 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
0007DD68                            ; End of function sub_72A5A
0007DD68                            
0007DD68                            ; ===========================================================================
0007DD68                            
0007DD68                            loc_72A64:
0007DD68 6000 0000                  		bra.w	loc_72ACC
0007DD6C                            ; ===========================================================================
0007DD6C 6000 0000                  		bra.w	loc_72AEC
0007DD70                            ; ===========================================================================
0007DD70 6000 0000                  		bra.w	loc_72AF2
0007DD74                            ; ===========================================================================
0007DD74 6000 0000                  		bra.w	loc_72AF8
0007DD78                            ; ===========================================================================
0007DD78 6000 0000                  		bra.w	loc_72B14
0007DD7C                            ; ===========================================================================
0007DD7C 6000 0000                  		bra.w	loc_72B9E
0007DD80                            ; ===========================================================================
0007DD80 6000 0000                  		bra.w	loc_72BA4
0007DD84                            ; ===========================================================================
0007DD84 6000 0000                  		bra.w	loc_72BAE
0007DD88                            ; ===========================================================================
0007DD88 6000 0000                  		bra.w	loc_72BB4
0007DD8C                            ; ===========================================================================
0007DD8C 6000 0000                  		bra.w	loc_72BBE
0007DD90                            ; ===========================================================================
0007DD90 6000 0000                  		bra.w	loc_72BC6
0007DD94                            ; ===========================================================================
0007DD94 6000 0000                  		bra.w	loc_72BD0
0007DD98                            ; ===========================================================================
0007DD98 6000 0000                  		bra.w	loc_72BE6
0007DD9C                            ; ===========================================================================
0007DD9C 6000 0000                  		bra.w	loc_72BEE
0007DDA0                            ; ===========================================================================
0007DDA0 6000 0000                  		bra.w	loc_72BF4
0007DDA4                            ; ===========================================================================
0007DDA4 6000 0000                  		bra.w	loc_72C26
0007DDA8                            ; ===========================================================================
0007DDA8 6000 0000                  		bra.w	loc_72D30
0007DDAC                            ; ===========================================================================
0007DDAC 6000 0000                  		bra.w	loc_72D52
0007DDB0                            ; ===========================================================================
0007DDB0 6000 0000                  		bra.w	loc_72D58
0007DDB4                            ; ===========================================================================
0007DDB4 6000 0000                  		bra.w	loc_72E06
0007DDB8                            ; ===========================================================================
0007DDB8 6000 0000                  		bra.w	loc_72E20
0007DDBC                            ; ===========================================================================
0007DDBC 6000 0000                  		bra.w	loc_72E26
0007DDC0                            ; ===========================================================================
0007DDC0 6000 0000                  		bra.w	loc_72E2C
0007DDC4                            ; ===========================================================================
0007DDC4 6000 0000                  		bra.w	loc_72E38
0007DDC8                            ; ===========================================================================
0007DDC8 6000 0000                  		bra.w	loc_72E52
0007DDCC                            ; ===========================================================================
0007DDCC 6000 0000                  		bra.w	loc_72E64
0007DDD0                            ; ===========================================================================
0007DDD0                            
0007DDD0                            loc_72ACC:				; XREF: loc_72A64
0007DDD0 121C                       		move.b	(a4)+,d1
0007DDD2 4A2D 0001                  		tst.b	1(a5)
0007DDD6 6B00                       		bmi.s	locret_72AEA
0007DDD8 102D 000A                  		move.b	$A(a5),d0
0007DDDC 0200 0037                  		andi.b	#$37,d0
0007DDE0 8200                       		or.b	d0,d1
0007DDE2 1B41 000A                  		move.b	d1,$A(a5)
0007DDE6 103C 00B4                  		move.b	#$B4,d0
0007DDEA 6000 FC2E                  		bra.w	loc_72716
0007DDEE                            ; ===========================================================================
0007DDEE                            
0007DDEE                            locret_72AEA:
0007DDEE 4E75                       		rts	
0007DDF0                            ; ===========================================================================
0007DDF0                            
0007DDF0                            loc_72AEC:				; XREF: loc_72A64
0007DDF0 1B5C 001E                  		move.b	(a4)+,$1E(a5)
0007DDF4 4E75                       		rts	
0007DDF6                            ; ===========================================================================
0007DDF6                            
0007DDF6                            loc_72AF2:				; XREF: loc_72A64
0007DDF6 1D5C 0007                  		move.b	(a4)+,7(a6)
0007DDFA 4E75                       		rts	
0007DDFC                            ; ===========================================================================
0007DDFC                            
0007DDFC                            loc_72AF8:				; XREF: loc_72A64
0007DDFC 7000                       		moveq	#0,d0
0007DDFE 102D 000D                  		move.b	$D(a5),d0
0007DE02 2875 0000                  		movea.l	(a5,d0.w),a4
0007DE06 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
0007DE0E 544C                       		addq.w	#2,a4
0007DE10 5800                       		addq.b	#4,d0
0007DE12 1B40 000D                  		move.b	d0,$D(a5)
0007DE16 4E75                       		rts	
0007DE18                            ; ===========================================================================
0007DE18                            
0007DE18                            loc_72B14:				; XREF: loc_72A64
0007DE18 204E                       		movea.l	a6,a0
0007DE1A 43EE 03A0                  		lea	$3A0(a6),a1
0007DE1E 303C 0087                  		move.w	#$87,d0
0007DE22                            
0007DE22                            loc_72B1E:
0007DE22 20D9                       		move.l	(a1)+,(a0)+
0007DE24 51C8 FFFC                  		dbf	d0,loc_72B1E
0007DE28                            
0007DE28 08EE 0002 0040             		bset	#2,$40(a6)
0007DE2E 264D                       		movea.l	a5,a3
0007DE30 1C3C 0028                  		move.b	#$28,d6
0007DE34 9C2E 0026                  		sub.b	$26(a6),d6
0007DE38 7E05                       		moveq	#5,d7
0007DE3A 4BEE 0070                  		lea	$70(a6),a5
0007DE3E                            
0007DE3E                            loc_72B3A:
0007DE3E 0815 0007                  		btst	#7,(a5)
0007DE42 6700                       		beq.s	loc_72B5C
0007DE44 08D5 0001                  		bset	#1,(a5)
0007DE48 DD2D 0009                  		add.b	d6,9(a5)
0007DE4C 0815 0002                  		btst	#2,(a5)
0007DE50 6600                       		bne.s	loc_72B5C
0007DE52 7000                       		moveq	#0,d0
0007DE54 102D 000B                  		move.b	$B(a5),d0
0007DE58 226E 0018                  		movea.l	$18(a6),a1
0007DE5C 4EBA 0000                  		jsr	sub_72C4E(pc)
0007DE60                            
0007DE60                            loc_72B5C:
0007DE60 DAFC 0030                  		adda.w	#$30,a5
0007DE64 51CF FFD8                  		dbf	d7,loc_72B3A
0007DE68                            
0007DE68 7E02                       		moveq	#2,d7
0007DE6A                            
0007DE6A                            loc_72B66:
0007DE6A 0815 0007                  		btst	#7,(a5)
0007DE6E 6700                       		beq.s	loc_72B78
0007DE70 08D5 0001                  		bset	#1,(a5)
0007DE74 4EBA FE2E                  		jsr	sub_729A0(pc)
0007DE78 DD2D 0009                  		add.b	d6,9(a5)
0007DE7C                            
0007DE7C                            loc_72B78:
0007DE7C DAFC 0030                  		adda.w	#$30,a5
0007DE80 51CF FFE8                  		dbf	d7,loc_72B66
0007DE84 2A4B                       		movea.l	a3,a5
0007DE86 1D7C 0080 0024             		move.b	#$80,$24(a6)
0007DE8C 1D7C 0028 0026             		move.b	#$28,$26(a6)
0007DE92 422E 0027                  		clr.b	$27(a6)
0007DE96 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0007DE9E 504F                       		addq.w	#8,sp
0007DEA0 4E75                       		rts	
0007DEA2                            ; ===========================================================================
0007DEA2                            
0007DEA2                            loc_72B9E:				; XREF: loc_72A64
0007DEA2 1B5C 0002                  		move.b	(a4)+,2(a5)
0007DEA6 4E75                       		rts	
0007DEA8                            ; ===========================================================================
0007DEA8                            
0007DEA8                            loc_72BA4:				; XREF: loc_72A64
0007DEA8 101C                       		move.b	(a4)+,d0
0007DEAA D12D 0009                  		add.b	d0,9(a5)
0007DEAE 6000 0000                  		bra.w	sub_72CB4
0007DEB2                            ; ===========================================================================
0007DEB2                            
0007DEB2                            loc_72BAE:				; XREF: loc_72A64
0007DEB2 08D5 0004                  		bset	#4,(a5)
0007DEB6 4E75                       		rts	
0007DEB8                            ; ===========================================================================
0007DEB8                            
0007DEB8                            loc_72BB4:				; XREF: loc_72A64
0007DEB8 1B54 0012                  		move.b	(a4),$12(a5)
0007DEBC 1B5C 0013                  		move.b	(a4)+,$13(a5)
0007DEC0 4E75                       		rts	
0007DEC2                            ; ===========================================================================
0007DEC2                            
0007DEC2                            loc_72BBE:				; XREF: loc_72A64
0007DEC2 101C                       		move.b	(a4)+,d0
0007DEC4 D12D 0008                  		add.b	d0,8(a5)
0007DEC8 4E75                       		rts	
0007DECA                            ; ===========================================================================
0007DECA                            
0007DECA                            loc_72BC6:				; XREF: loc_72A64
0007DECA 1D54 0002                  		move.b	(a4),2(a6)
0007DECE 1D5C 0001                  		move.b	(a4)+,1(a6)
0007DED2 4E75                       		rts	
0007DED4                            ; ===========================================================================
0007DED4                            
0007DED4                            loc_72BD0:				; XREF: loc_72A64
0007DED4 41EE 0040                  		lea	$40(a6),a0
0007DED8 101C                       		move.b	(a4)+,d0
0007DEDA 7230                       		moveq	#$30,d1
0007DEDC 7409                       		moveq	#9,d2
0007DEDE                            
0007DEDE                            loc_72BDA:
0007DEDE 1140 0002                  		move.b	d0,2(a0)
0007DEE2 D0C1                       		adda.w	d1,a0
0007DEE4 51CA FFF8                  		dbf	d2,loc_72BDA
0007DEE8                            
0007DEE8 4E75                       		rts	
0007DEEA                            ; ===========================================================================
0007DEEA                            
0007DEEA                            loc_72BE6:				; XREF: loc_72A64
0007DEEA 101C                       		move.b	(a4)+,d0
0007DEEC D12D 0009                  		add.b	d0,9(a5)
0007DEF0 4E75                       		rts	
0007DEF2                            ; ===========================================================================
0007DEF2                            
0007DEF2                            loc_72BEE:				; XREF: loc_72A64
0007DEF2 422E 002C                  		clr.b	$2C(a6)
0007DEF6 4E75                       		rts	
0007DEF8                            ; ===========================================================================
0007DEF8                            
0007DEF8                            loc_72BF4:				; XREF: loc_72A64
0007DEF8 0895 0007                  		bclr	#7,(a5)
0007DEFC 0895 0004                  		bclr	#4,(a5)
0007DF00 4EBA FB00                  		jsr	sub_726FE(pc)
0007DF04 4A2E 0250                  		tst.b	$250(a6)
0007DF08 6B00                       		bmi.s	loc_72C22
0007DF0A 264D                       		movea.l	a5,a3
0007DF0C 4BEE 0100                  		lea	$100(a6),a5
0007DF10 226E 0018                  		movea.l	$18(a6),a1
0007DF14 0895 0002                  		bclr	#2,(a5)
0007DF18 08D5 0001                  		bset	#1,(a5)
0007DF1C 102D 000B                  		move.b	$B(a5),d0
0007DF20 4EBA 0000                  		jsr	sub_72C4E(pc)
0007DF24 2A4B                       		movea.l	a3,a5
0007DF26                            
0007DF26                            loc_72C22:
0007DF26 504F                       		addq.w	#8,sp
0007DF28 4E75                       		rts	
0007DF2A                            ; ===========================================================================
0007DF2A                            
0007DF2A                            loc_72C26:				; XREF: loc_72A64
0007DF2A 7000                       		moveq	#0,d0
0007DF2C 101C                       		move.b	(a4)+,d0
0007DF2E 1B40 000B                  		move.b	d0,$B(a5)
0007DF32 0815 0002                  		btst	#2,(a5)
0007DF36 6600 0000                  		bne.w	locret_72CAA
0007DF3A 226E 0018                  		movea.l	$18(a6),a1
0007DF3E 4A2E 000E                  		tst.b	$E(a6)
0007DF42 6700                       		beq.s	sub_72C4E
0007DF44 226D 0020                  		movea.l	$20(a5),a1
0007DF48 4A2E 000E                  		tst.b	$E(a6)
0007DF4C 6B00                       		bmi.s	sub_72C4E
0007DF4E 226E 0020                  		movea.l	$20(a6),a1
0007DF52                            
0007DF52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DF52                            
0007DF52                            
0007DF52                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
0007DF52 5340                       		subq.w	#1,d0
0007DF54 6B00                       		bmi.s	loc_72C5C
0007DF56 323C 0019                  		move.w	#$19,d1
0007DF5A                            
0007DF5A                            loc_72C56:
0007DF5A D2C1                       		adda.w	d1,a1
0007DF5C 51C8 FFFC                  		dbf	d0,loc_72C56
0007DF60                            
0007DF60                            loc_72C5C:
0007DF60 1219                       		move.b	(a1)+,d1
0007DF62 1B41 001F                  		move.b	d1,$1F(a5)
0007DF66 1801                       		move.b	d1,d4
0007DF68 103C 00B0                  		move.b	#$B0,d0
0007DF6C 4EBA FAB8                  		jsr	sub_72722(pc)
0007DF70 45FA 0000                  		lea	byte_72D18(pc),a2
0007DF74 7613                       		moveq	#$13,d3
0007DF76                            
0007DF76                            loc_72C72:
0007DF76 101A                       		move.b	(a2)+,d0
0007DF78 1219                       		move.b	(a1)+,d1
0007DF7A 4EBA FAAA                  		jsr	sub_72722(pc)
0007DF7E 51CB FFF6                  		dbf	d3,loc_72C72
0007DF82 7A03                       		moveq	#3,d5
0007DF84 0244 0007                  		andi.w	#7,d4
0007DF88 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
0007DF8C 162D 0009                  		move.b	9(a5),d3
0007DF90                            
0007DF90                            loc_72C8C:
0007DF90 101A                       		move.b	(a2)+,d0
0007DF92 1219                       		move.b	(a1)+,d1
0007DF94 E20C                       		lsr.b	#1,d4
0007DF96 6400                       		bcc.s	loc_72C96
0007DF98 D203                       		add.b	d3,d1
0007DF9A                            
0007DF9A                            loc_72C96:
0007DF9A 4EBA FA8A                  		jsr	sub_72722(pc)
0007DF9E 51CD FFF0                  		dbf	d5,loc_72C8C
0007DFA2 103C 00B4                  		move.b	#$B4,d0
0007DFA6 122D 000A                  		move.b	$A(a5),d1
0007DFAA 4EBA FA7A                  		jsr	sub_72722(pc)
0007DFAE                            
0007DFAE                            locret_72CAA:
0007DFAE 4E75                       		rts	
0007DFB0                            ; End of function sub_72C4E
0007DFB0                            
0007DFB0                            ; ===========================================================================
0007DFB0 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
0007DFB8                            
0007DFB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DFB8                            
0007DFB8                            
0007DFB8                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
0007DFB8 0815 0002                  		btst	#2,(a5)
0007DFBC 6600                       		bne.s	locret_72D16
0007DFBE 7000                       		moveq	#0,d0
0007DFC0 102D 000B                  		move.b	$B(a5),d0
0007DFC4 226E 0018                  		movea.l	$18(a6),a1
0007DFC8 4A2E 000E                  		tst.b	$E(a6)
0007DFCC 6700                       		beq.s	loc_72CD8
0007DFCE 226E 0020                  		movea.l	$20(a6),a1
0007DFD2 4A2E 000E                  		tst.b	$E(a6)
0007DFD6 6B00                       		bmi.s	loc_72CD8
0007DFD8 226E 0020                  		movea.l	$20(a6),a1
0007DFDC                            
0007DFDC                            loc_72CD8:
0007DFDC 5340                       		subq.w	#1,d0
0007DFDE 6B00                       		bmi.s	loc_72CE6
0007DFE0 323C 0019                  		move.w	#$19,d1
0007DFE4                            
0007DFE4                            loc_72CE0:
0007DFE4 D2C1                       		adda.w	d1,a1
0007DFE6 51C8 FFFC                  		dbf	d0,loc_72CE0
0007DFEA                            
0007DFEA                            loc_72CE6:
0007DFEA D2FC 0015                  		adda.w	#$15,a1
0007DFEE 45FA 0000                  		lea	byte_72D2C(pc),a2
0007DFF2 102D 001F                  		move.b	$1F(a5),d0
0007DFF6 0240 0007                  		andi.w	#7,d0
0007DFFA 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
0007DFFE 162D 0009                  		move.b	9(a5),d3
0007E002 6B00                       		bmi.s	locret_72D16
0007E004 7A03                       		moveq	#3,d5
0007E006                            
0007E006                            loc_72D02:
0007E006 101A                       		move.b	(a2)+,d0
0007E008 1219                       		move.b	(a1)+,d1
0007E00A E20C                       		lsr.b	#1,d4
0007E00C 6400                       		bcc.s	loc_72D12
0007E00E D203                       		add.b	d3,d1
0007E010 6500                       		bcs.s	loc_72D12
0007E012 4EBA FA12                  		jsr	sub_72722(pc)
0007E016                            
0007E016                            loc_72D12:
0007E016 51CD FFEE                  		dbf	d5,loc_72D02
0007E01A                            
0007E01A                            locret_72D16:
0007E01A 4E75                       		rts	
0007E01C                            ; End of function sub_72CB4
0007E01C                            
0007E01C                            ; ===========================================================================
0007E01C 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
0007E026 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
0007E030 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
0007E034                            ; ===========================================================================
0007E034                            
0007E034                            loc_72D30:				; XREF: loc_72A64
0007E034 08D5 0003                  		bset	#3,(a5)
0007E038 2B4C 0014                  		move.l	a4,$14(a5)
0007E03C 1B5C 0018                  		move.b	(a4)+,$18(a5)
0007E040 1B5C 0019                  		move.b	(a4)+,$19(a5)
0007E044 1B5C 001A                  		move.b	(a4)+,$1A(a5)
0007E048 101C                       		move.b	(a4)+,d0
0007E04A E208                       		lsr.b	#1,d0
0007E04C 1B40 001B                  		move.b	d0,$1B(a5)
0007E050 426D 001C                  		clr.w	$1C(a5)
0007E054 4E75                       		rts	
0007E056                            ; ===========================================================================
0007E056                            
0007E056                            loc_72D52:				; XREF: loc_72A64
0007E056 08D5 0003                  		bset	#3,(a5)
0007E05A 4E75                       		rts	
0007E05C                            ; ===========================================================================
0007E05C                            
0007E05C                            loc_72D58:				; XREF: loc_72A64
0007E05C 0895 0007                  		bclr	#7,(a5)
0007E060 0895 0004                  		bclr	#4,(a5)
0007E064 4A2D 0001                  		tst.b	1(a5)
0007E068 6B00                       		bmi.s	loc_72D74
0007E06A 4A2E 0008                  		tst.b	8(a6)
0007E06E 6B00 0000                  		bmi.w	loc_72E02
0007E072 4EBA F98E                  		jsr	sub_726FE(pc)
0007E076 6000                       		bra.s	loc_72D78
0007E078                            ; ===========================================================================
0007E078                            
0007E078                            loc_72D74:
0007E078 4EBA FC2A                  		jsr	sub_729A0(pc)
0007E07C                            
0007E07C                            loc_72D78:
0007E07C 4A2E 000E                  		tst.b	$E(a6)
0007E080 6A00 0000                  		bpl.w	loc_72E02
0007E084 4216                       		clr.b	0(a6)
0007E086 7000                       		moveq	#0,d0
0007E088 102D 0001                  		move.b	1(a5),d0
0007E08C 6B00                       		bmi.s	loc_72DCC
0007E08E 41FA F546                  		lea	dword_722CC(pc),a0
0007E092 264D                       		movea.l	a5,a3
0007E094 0C00 0004                  		cmpi.b	#4,d0
0007E098 6600                       		bne.s	loc_72DA8
0007E09A 4A2E 0340                  		tst.b	$340(a6)
0007E09E 6A00                       		bpl.s	loc_72DA8
0007E0A0 4BEE 0340                  		lea	$340(a6),a5
0007E0A4 226E 0020                  		movea.l	$20(a6),a1
0007E0A8 6000                       		bra.s	loc_72DB8
0007E0AA                            ; ===========================================================================
0007E0AA                            
0007E0AA                            loc_72DA8:
0007E0AA 5500                       		subq.b	#2,d0
0007E0AC E508                       		lsl.b	#2,d0
0007E0AE 2A70 0000                  		movea.l	(a0,d0.w),a5
0007E0B2 4A15                       		tst.b	(a5)
0007E0B4 6A00                       		bpl.s	loc_72DC8
0007E0B6 226E 0018                  		movea.l	$18(a6),a1
0007E0BA                            
0007E0BA                            loc_72DB8:
0007E0BA 0895 0002                  		bclr	#2,(a5)
0007E0BE 08D5 0001                  		bset	#1,(a5)
0007E0C2 102D 000B                  		move.b	$B(a5),d0
0007E0C6 4EBA FE8A                  		jsr	sub_72C4E(pc)
0007E0CA                            
0007E0CA                            loc_72DC8:
0007E0CA 2A4B                       		movea.l	a3,a5
0007E0CC 6000                       		bra.s	loc_72E02
0007E0CE                            ; ===========================================================================
0007E0CE                            
0007E0CE                            loc_72DCC:
0007E0CE 41EE 0370                  		lea	$370(a6),a0
0007E0D2 4A10                       		tst.b	(a0)
0007E0D4 6A00                       		bpl.s	loc_72DE0
0007E0D6 0C00 00E0                  		cmpi.b	#$E0,d0
0007E0DA 6700                       		beq.s	loc_72DEA
0007E0DC 0C00 00C0                  		cmpi.b	#$C0,d0
0007E0E0 6700                       		beq.s	loc_72DEA
0007E0E2                            
0007E0E2                            loc_72DE0:
0007E0E2 41FA F4F2                  		lea	dword_722CC(pc),a0
0007E0E6 E608                       		lsr.b	#3,d0
0007E0E8 2070 0000                  		movea.l	(a0,d0.w),a0
0007E0EC                            
0007E0EC                            loc_72DEA:
0007E0EC 0890 0002                  		bclr	#2,(a0)
0007E0F0 08D0 0001                  		bset	#1,(a0)
0007E0F4 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0007E0FA 6600                       		bne.s	loc_72E02
0007E0FC 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0007E104                            
0007E104                            loc_72E02:
0007E104 504F                       		addq.w	#8,sp
0007E106 4E75                       		rts	
0007E108                            ; ===========================================================================
0007E108                            
0007E108                            loc_72E06:				; XREF: loc_72A64
0007E108 1B7C 00E0 0001             		move.b	#$E0,1(a5)
0007E10E 1B5C 001F                  		move.b	(a4)+,$1F(a5)
0007E112 0815 0002                  		btst	#2,(a5)
0007E116 6600                       		bne.s	locret_72E1E
0007E118 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
0007E120                            
0007E120                            locret_72E1E:
0007E120 4E75                       		rts	
0007E122                            ; ===========================================================================
0007E122                            
0007E122                            loc_72E20:				; XREF: loc_72A64
0007E122 0895 0003                  		bclr	#3,(a5)
0007E126 4E75                       		rts	
0007E128                            ; ===========================================================================
0007E128                            
0007E128                            loc_72E26:				; XREF: loc_72A64
0007E128 1B5C 000B                  		move.b	(a4)+,$B(a5)
0007E12C 4E75                       		rts	
0007E12E                            ; ===========================================================================
0007E12E                            
0007E12E                            loc_72E2C:				; XREF: loc_72A64
0007E12E 101C                       		move.b	(a4)+,d0
0007E130 E148                       		lsl.w	#8,d0
0007E132 101C                       		move.b	(a4)+,d0
0007E134 D8C0                       		adda.w	d0,a4
0007E136 534C                       		subq.w	#1,a4
0007E138 4E75                       		rts	
0007E13A                            ; ===========================================================================
0007E13A                            
0007E13A                            loc_72E38:				; XREF: loc_72A64
0007E13A 7000                       		moveq	#0,d0
0007E13C 101C                       		move.b	(a4)+,d0
0007E13E 121C                       		move.b	(a4)+,d1
0007E140 4A35 0024                  		tst.b	$24(a5,d0.w)
0007E144 6600                       		bne.s	loc_72E48
0007E146 1B81 0024                  		move.b	d1,$24(a5,d0.w)
0007E14A                            
0007E14A                            loc_72E48:
0007E14A 5335 0024                  		subq.b	#1,$24(a5,d0.w)
0007E14E 66DE                       		bne.s	loc_72E2C
0007E150 544C                       		addq.w	#2,a4
0007E152 4E75                       		rts	
0007E154                            ; ===========================================================================
0007E154                            
0007E154                            loc_72E52:				; XREF: loc_72A64
0007E154 7000                       		moveq	#0,d0
0007E156 102D 000D                  		move.b	$D(a5),d0
0007E15A 5900                       		subq.b	#4,d0
0007E15C 2B8C 0000                  		move.l	a4,(a5,d0.w)
0007E160 1B40 000D                  		move.b	d0,$D(a5)
0007E164 60C8                       		bra.s	loc_72E2C
0007E166                            ; ===========================================================================
0007E166                            
0007E166                            loc_72E64:				; XREF: loc_72A64
0007E166 103C 0088                  		move.b	#$88,d0
0007E16A 123C 000F                  		move.b	#$F,d1
0007E16E 4EBA F8C2                  		jsr	sub_7272E(pc)
0007E172 103C 008C                  		move.b	#$8C,d0
0007E176 123C 000F                  		move.b	#$F,d1
0007E17A 6000 F8B6                  		bra.w	sub_7272E
0007E17E                            ; ===========================================================================
0007E17E                            Kos_Z80:	incbin	sound\z80_1.bin
0007E22E 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
0007E230 21                         		dc.b $21
0007E231 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
0007E233                            		incbin	sound\z80_2.bin
0007F8DE                            		even
0007F8DE                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
000860DE                            		even
000860DE                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
0008F97C                            		even
0008F97C                            Music83:	incbin	sound\music83.bin ; Marble Act 1
0009359C 00                         		even
0009359C                            Music84:	include	sound\music84.asm ; Star Light Act 1
0009359C                            music84_Header:
0009359C =00000001                  smpsHeaderStartSong = 1
0009359C 0000                       	smpsHeaderVoice     music84_Voices
0009359E 0603                       	smpsHeaderChan      $06, $03
000935A0 0205                       	smpsHeaderTempo     $02, $05
000935A2                            
000935A6 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
000935AA 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
000935AE 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
000935B2 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
000935B6 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
000935BA 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
000935C0 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
000935C6 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
000935CC                            
000935CC                            ; FM1 Data
000935CC                            music84_FM1:
000935CC E0C0                       	smpsPan             panCenter, $00
000935D0 E107                       	smpsAlterNote       $07
000935D2 9B03 8007                  	dc.b	nD2, $03, nRst, $07
000935D6 E106                       	smpsAlterNote       $06
000935D8 9903 800B                  	dc.b	nC2, $03, nRst, $0B
000935DC E10B                       	smpsAlterNote       $0B
000935DE 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
000935E4 E10C                       	smpsAlterNote       $0C
000935E6 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000935E9 E10B                       	smpsAlterNote       $0B
000935EB E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000935EE E109                       	smpsAlterNote       $09
000935F0 E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
000935F5 E108                       	smpsAlterNote       $08
000935F7 8001                       	dc.b	nRst, $01
000935F9 E10B                       	smpsAlterNote       $0B
000935FB 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
00093601 E107                       	smpsAlterNote       $07
00093603 9B03                       	dc.b	nD2, $03
00093605                            
00093605                            music84_Jump04:
00093605 E107                       	smpsAlterNote       $07
00093607 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0009360B E10B                       	smpsAlterNote       $0B
0009360D A202 8001                  	dc.b	nA2, $02, nRst, $01
00093611 E107                       	smpsAlterNote       $07
00093613 9B03                       	dc.b	nD2, $03
00093615 E11A                       	smpsAlterNote       $1A
00093617 A301                       	dc.b	nBb2, $01
00093619 E1F2                       	smpsAlterNote       $F2
0009361B E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0009361E E1FF                       	smpsAlterNote       $FF
00093620 E701                       	dc.b	smpsNoAttack, $01
00093622 E111                       	smpsAlterNote       $11
00093624 E701                       	dc.b	smpsNoAttack, $01
00093626 E106                       	smpsAlterNote       $06
00093628 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0009362B E107                       	smpsAlterNote       $07
0009362D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093631 E108                       	smpsAlterNote       $08
00093633 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
0009363B E109                       	smpsAlterNote       $09
0009363D A003                       	dc.b	nG2, $03
0009363F E10C                       	smpsAlterNote       $0C
00093641 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00093645 E1FD                       	smpsAlterNote       $FD
00093647 A401                       	dc.b	nB2, $01
00093649 E109                       	smpsAlterNote       $09
0009364B E701                       	dc.b	smpsNoAttack, $01
0009364D E106                       	smpsAlterNote       $06
0009364F E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093652 E109                       	smpsAlterNote       $09
00093654 A007                       	dc.b	nG2, $07
00093656 E108                       	smpsAlterNote       $08
00093658 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0009365C E107                       	smpsAlterNote       $07
0009365E 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00093664 E10B                       	smpsAlterNote       $0B
00093666 A203 8001                  	dc.b	nA2, $03, nRst, $01
0009366A E107                       	smpsAlterNote       $07
0009366C 9B03                       	dc.b	nD2, $03
0009366E E11A                       	smpsAlterNote       $1A
00093670 A301                       	dc.b	nBb2, $01
00093672 E1F9                       	smpsAlterNote       $F9
00093674 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093677 E107                       	smpsAlterNote       $07
00093679 E701                       	dc.b	smpsNoAttack, $01
0009367B E111                       	smpsAlterNote       $11
0009367D E701                       	dc.b	smpsNoAttack, $01
0009367F E106                       	smpsAlterNote       $06
00093681 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
00093686 E107                       	smpsAlterNote       $07
00093688 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00093690 E1EC                       	smpsAlterNote       $EC
00093692 A101                       	dc.b	nAb2, $01
00093694 E108                       	smpsAlterNote       $08
00093696 E701                       	dc.b	smpsNoAttack, $01
00093698 E116                       	smpsAlterNote       $16
0009369A E701                       	dc.b	smpsNoAttack, $01
0009369C E1F5                       	smpsAlterNote       $F5
0009369E E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000936A1 E10B                       	smpsAlterNote       $0B
000936A3 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000936A7 E107                       	smpsAlterNote       $07
000936A9 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000936AF E109                       	smpsAlterNote       $09
000936B1 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000936B5 E10B                       	smpsAlterNote       $0B
000936B7 9603                       	dc.b	nA1, $03
000936B9 E107                       	smpsAlterNote       $07
000936BB 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000936C1 E10B                       	smpsAlterNote       $0B
000936C3 A203 8001                  	dc.b	nA2, $03, nRst, $01
000936C7 E107                       	smpsAlterNote       $07
000936C9 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000936CD E11A                       	smpsAlterNote       $1A
000936CF A301                       	dc.b	nBb2, $01
000936D1 E1F9                       	smpsAlterNote       $F9
000936D3 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000936D6 E107                       	smpsAlterNote       $07
000936D8 E701                       	dc.b	smpsNoAttack, $01
000936DA E1FB                       	smpsAlterNote       $FB
000936DC E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000936DF E106                       	smpsAlterNote       $06
000936E1 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000936E5 E107                       	smpsAlterNote       $07
000936E7 9B03                       	dc.b	nD2, $03
000936E9 E108                       	smpsAlterNote       $08
000936EB 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
000936F1 E109                       	smpsAlterNote       $09
000936F3 A002 8001                  	dc.b	nG2, $02, nRst, $01
000936F7 E10C                       	smpsAlterNote       $0C
000936F9 A303                       	dc.b	nBb2, $03
000936FB E1F0                       	smpsAlterNote       $F0
000936FD A401                       	dc.b	nB2, $01
000936FF E1FD                       	smpsAlterNote       $FD
00093701 E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
00093706 E106                       	smpsAlterNote       $06
00093708 8001                       	dc.b	nRst, $01
0009370A E109                       	smpsAlterNote       $09
0009370C A006 8001                  	dc.b	nG2, $06, nRst, $01
00093710 E108                       	smpsAlterNote       $08
00093712 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
00093716 E107                       	smpsAlterNote       $07
00093718 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0009371E E10B                       	smpsAlterNote       $0B
00093720 A203                       	dc.b	nA2, $03
00093722 E107                       	smpsAlterNote       $07
00093724 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093728 E1F2                       	smpsAlterNote       $F2
0009372A A401                       	dc.b	nB2, $01
0009372C E1FF                       	smpsAlterNote       $FF
0009372E E701                       	dc.b	smpsNoAttack, $01
00093730 E107                       	smpsAlterNote       $07
00093732 E701                       	dc.b	smpsNoAttack, $01
00093734 E1FB                       	smpsAlterNote       $FB
00093736 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093739 E106                       	smpsAlterNote       $06
0009373B E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0009373F E107                       	smpsAlterNote       $07
00093741 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
0009374B E117                       	smpsAlterNote       $17
0009374D A001                       	dc.b	nG2, $01
0009374F E1FA                       	smpsAlterNote       $FA
00093751 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00093754 E108                       	smpsAlterNote       $08
00093756 E701                       	dc.b	smpsNoAttack, $01
00093758 E1E7                       	smpsAlterNote       $E7
0009375A E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0009375D E103                       	smpsAlterNote       $03
0009375F E701                       	dc.b	smpsNoAttack, $01
00093761 E10B                       	smpsAlterNote       $0B
00093763 E702                       	dc.b	smpsNoAttack, $02
00093765 E107                       	smpsAlterNote       $07
00093767 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
0009376F E106                       	smpsAlterNote       $06
00093771 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
00093777 E10C                       	smpsAlterNote       $0C
00093779 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
0009377F E109                       	smpsAlterNote       $09
00093781 9E03                       	dc.b	nF2, $03
00093783 E10C                       	smpsAlterNote       $0C
00093785 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093789 E1EA                       	smpsAlterNote       $EA
0009378B A201                       	dc.b	nA2, $01
0009378D E106                       	smpsAlterNote       $06
0009378F E701                       	dc.b	smpsNoAttack, $01
00093791 E1E2                       	smpsAlterNote       $E2
00093793 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00093796 E1F0                       	smpsAlterNote       $F0
00093798 E701                       	dc.b	smpsNoAttack, $01
0009379A E10C                       	smpsAlterNote       $0C
0009379C E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
000937A8 E116                       	smpsAlterNote       $16
000937AA 9C01                       	dc.b	nEb2, $01
000937AC E105                       	smpsAlterNote       $05
000937AE E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000937B1 E1F1                       	smpsAlterNote       $F1
000937B3 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000937B6 E1FF                       	smpsAlterNote       $FF
000937B8 E701                       	dc.b	smpsNoAttack, $01
000937BA E109                       	smpsAlterNote       $09
000937BC E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000937C0 E10C                       	smpsAlterNote       $0C
000937C2 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
000937CE 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
000937D4 E109                       	smpsAlterNote       $09
000937D6 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000937DA E10C                       	smpsAlterNote       $0C
000937DC 9703                       	dc.b	nBb1, $03
000937DE E11A                       	smpsAlterNote       $1A
000937E0 A101                       	dc.b	nAb2, $01
000937E2 E1FB                       	smpsAlterNote       $FB
000937E4 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000937E7 E10A                       	smpsAlterNote       $0A
000937E9 E701                       	dc.b	smpsNoAttack, $01
000937EB E1E8                       	smpsAlterNote       $E8
000937ED E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000937F0 E106                       	smpsAlterNote       $06
000937F2 E701                       	dc.b	smpsNoAttack, $01
000937F4 E10C                       	smpsAlterNote       $0C
000937F6 E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
00093802 E1F9                       	smpsAlterNote       $F9
00093804 9D01                       	dc.b	nE2, $01
00093806 E108                       	smpsAlterNote       $08
00093808 E701                       	dc.b	smpsNoAttack, $01
0009380A E1F6                       	smpsAlterNote       $F6
0009380C E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0009380F E109                       	smpsAlterNote       $09
00093811 E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
00093815 E10C                       	smpsAlterNote       $0C
00093817 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
00093823 E108                       	smpsAlterNote       $08
00093825 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
0009382B E106                       	smpsAlterNote       $06
0009382D A403 8001                  	dc.b	nB2, $03, nRst, $01
00093831 E108                       	smpsAlterNote       $08
00093833 9D03                       	dc.b	nE2, $03
00093835 E1EB                       	smpsAlterNote       $EB
00093837 A801                       	dc.b	nEb3, $01
00093839 E109                       	smpsAlterNote       $09
0009383B E701                       	dc.b	smpsNoAttack, $01
0009383D E1FA                       	smpsAlterNote       $FA
0009383F E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00093842 E108                       	smpsAlterNote       $08
00093844 E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
00093850 E1E9                       	smpsAlterNote       $E9
00093852 A301                       	dc.b	nBb2, $01
00093854 E107                       	smpsAlterNote       $07
00093856 E701                       	dc.b	smpsNoAttack, $01
00093858 E1F0                       	smpsAlterNote       $F0
0009385A E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0009385D E1F7                       	smpsAlterNote       $F7
0009385F E701                       	dc.b	smpsNoAttack, $01
00093861 E107                       	smpsAlterNote       $07
00093863 E701                       	dc.b	smpsNoAttack, $01
00093865 E106                       	smpsAlterNote       $06
00093867 E701                       	dc.b	smpsNoAttack, $01
00093869 E108                       	smpsAlterNote       $08
0009386B 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
00093871 E106                       	smpsAlterNote       $06
00093873 A403 8001                  	dc.b	nB2, $03, nRst, $01
00093877 E108                       	smpsAlterNote       $08
00093879 9D03                       	dc.b	nE2, $03
0009387B E10B                       	smpsAlterNote       $0B
0009387D 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
00093885 E108                       	smpsAlterNote       $08
00093887 9D03                       	dc.b	nE2, $03
00093889 E10B                       	smpsAlterNote       $0B
0009388B 9603 8001                  	dc.b	nA1, $03, nRst, $01
0009388F E113                       	smpsAlterNote       $13
00093891 A001                       	dc.b	nG2, $01
00093893 E118                       	smpsAlterNote       $18
00093895 E701                       	dc.b	smpsNoAttack, $01
00093897 E1E9                       	smpsAlterNote       $E9
00093899 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0009389C E1F3                       	smpsAlterNote       $F3
0009389E E701                       	dc.b	smpsNoAttack, $01
000938A0 E1FD                       	smpsAlterNote       $FD
000938A2 E701                       	dc.b	smpsNoAttack, $01
000938A4 E102                       	smpsAlterNote       $02
000938A6 E701                       	dc.b	smpsNoAttack, $01
000938A8 E107                       	smpsAlterNote       $07
000938AA 8001                       	dc.b	nRst, $01
000938AC E10B                       	smpsAlterNote       $0B
000938AE 9603                       	dc.b	nA1, $03
000938B0 E10C                       	smpsAlterNote       $0C
000938B2 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
000938B8 E10B                       	smpsAlterNote       $0B
000938BA 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
000938C6 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
000938CC E107                       	smpsAlterNote       $07
000938CE 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000938D4 E10B                       	smpsAlterNote       $0B
000938D6 A203                       	dc.b	nA2, $03
000938D8 E107                       	smpsAlterNote       $07
000938DA 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000938DE E1F2                       	smpsAlterNote       $F2
000938E0 A401                       	dc.b	nB2, $01
000938E2 E1FF                       	smpsAlterNote       $FF
000938E4 E701                       	dc.b	smpsNoAttack, $01
000938E6 E107                       	smpsAlterNote       $07
000938E8 E701                       	dc.b	smpsNoAttack, $01
000938EA E1FB                       	smpsAlterNote       $FB
000938EC E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000938EF E106                       	smpsAlterNote       $06
000938F1 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000938F5 E107                       	smpsAlterNote       $07
000938F7 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000938FB E108                       	smpsAlterNote       $08
000938FD 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00093903 E109                       	smpsAlterNote       $09
00093905 A003 8001                  	dc.b	nG2, $03, nRst, $01
00093909 E10C                       	smpsAlterNote       $0C
0009390B A302 8001                  	dc.b	nBb2, $02, nRst, $01
0009390F E1F0                       	smpsAlterNote       $F0
00093911 A401                       	dc.b	nB2, $01
00093913 E109                       	smpsAlterNote       $09
00093915 E701                       	dc.b	smpsNoAttack, $01
00093917 E106                       	smpsAlterNote       $06
00093919 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0009391C E109                       	smpsAlterNote       $09
0009391E A007                       	dc.b	nG2, $07
00093920 E108                       	smpsAlterNote       $08
00093922 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00093926 E107                       	smpsAlterNote       $07
00093928 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0009392E E10B                       	smpsAlterNote       $0B
00093930 A202 8001                  	dc.b	nA2, $02, nRst, $01
00093934 E107                       	smpsAlterNote       $07
00093936 9B03                       	dc.b	nD2, $03
00093938 E11A                       	smpsAlterNote       $1A
0009393A A301                       	dc.b	nBb2, $01
0009393C E1F2                       	smpsAlterNote       $F2
0009393E E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093941 E1FF                       	smpsAlterNote       $FF
00093943 E701                       	dc.b	smpsNoAttack, $01
00093945 E111                       	smpsAlterNote       $11
00093947 E701                       	dc.b	smpsNoAttack, $01
00093949 E106                       	smpsAlterNote       $06
0009394B E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0009394E E107                       	smpsAlterNote       $07
00093950 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
0009395C E117                       	smpsAlterNote       $17
0009395E A001                       	dc.b	nG2, $01
00093960 E1FA                       	smpsAlterNote       $FA
00093962 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00093965 E116                       	smpsAlterNote       $16
00093967 E701                       	dc.b	smpsNoAttack, $01
00093969 E1F5                       	smpsAlterNote       $F5
0009396B E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0009396E E103                       	smpsAlterNote       $03
00093970 E701                       	dc.b	smpsNoAttack, $01
00093972 E10B                       	smpsAlterNote       $0B
00093974 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00093978 E107                       	smpsAlterNote       $07
0009397A 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093980 E109                       	smpsAlterNote       $09
00093982 9E03                       	dc.b	nF2, $03
00093984 E10B                       	smpsAlterNote       $0B
00093986 9603 8001                  	dc.b	nA1, $03, nRst, $01
0009398A E107                       	smpsAlterNote       $07
0009398C 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00093992 E10B                       	smpsAlterNote       $0B
00093994 A203 8001                  	dc.b	nA2, $03, nRst, $01
00093998 E107                       	smpsAlterNote       $07
0009399A 9B03                       	dc.b	nD2, $03
0009399C E11A                       	smpsAlterNote       $1A
0009399E A301                       	dc.b	nBb2, $01
000939A0 E1F9                       	smpsAlterNote       $F9
000939A2 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000939A5 E107                       	smpsAlterNote       $07
000939A7 E701                       	dc.b	smpsNoAttack, $01
000939A9 E111                       	smpsAlterNote       $11
000939AB E701                       	dc.b	smpsNoAttack, $01
000939AD E106                       	smpsAlterNote       $06
000939AF E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
000939B4 E107                       	smpsAlterNote       $07
000939B6 9B03                       	dc.b	nD2, $03
000939B8 E108                       	smpsAlterNote       $08
000939BA 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
000939C0 E109                       	smpsAlterNote       $09
000939C2 A003                       	dc.b	nG2, $03
000939C4 E10C                       	smpsAlterNote       $0C
000939C6 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000939CA E1FD                       	smpsAlterNote       $FD
000939CC A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
000939D1 E106                       	smpsAlterNote       $06
000939D3 8001                       	dc.b	nRst, $01
000939D5 E109                       	smpsAlterNote       $09
000939D7 A006 8001                  	dc.b	nG2, $06, nRst, $01
000939DB E108                       	smpsAlterNote       $08
000939DD 9C03                       	dc.b	nEb2, $03
000939DF E107                       	smpsAlterNote       $07
000939E1 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000939E7 E10B                       	smpsAlterNote       $0B
000939E9 A203 8001                  	dc.b	nA2, $03, nRst, $01
000939ED E107                       	smpsAlterNote       $07
000939EF 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000939F3 E11A                       	smpsAlterNote       $1A
000939F5 A301                       	dc.b	nBb2, $01
000939F7 E1F9                       	smpsAlterNote       $F9
000939F9 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000939FC E107                       	smpsAlterNote       $07
000939FE E701                       	dc.b	smpsNoAttack, $01
00093A00 E1FB                       	smpsAlterNote       $FB
00093A02 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093A05 E106                       	smpsAlterNote       $06
00093A07 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093A0B E107                       	smpsAlterNote       $07
00093A0D 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00093A15 E1EC                       	smpsAlterNote       $EC
00093A17 A101                       	dc.b	nAb2, $01
00093A19 E108                       	smpsAlterNote       $08
00093A1B E701                       	dc.b	smpsNoAttack, $01
00093A1D E1E7                       	smpsAlterNote       $E7
00093A1F E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093A22 E1F5                       	smpsAlterNote       $F5
00093A24 E701                       	dc.b	smpsNoAttack, $01
00093A26 E10B                       	smpsAlterNote       $0B
00093A28 E702                       	dc.b	smpsNoAttack, $02
00093A2A E107                       	smpsAlterNote       $07
00093A2C 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00093A32 E106                       	smpsAlterNote       $06
00093A34 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00093A3A E10C                       	smpsAlterNote       $0C
00093A3C 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00093A44 E109                       	smpsAlterNote       $09
00093A46 9E03                       	dc.b	nF2, $03
00093A48 E10C                       	smpsAlterNote       $0C
00093A4A 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093A4E E1EA                       	smpsAlterNote       $EA
00093A50 A201                       	dc.b	nA2, $01
00093A52 E106                       	smpsAlterNote       $06
00093A54 E701                       	dc.b	smpsNoAttack, $01
00093A56 E114                       	smpsAlterNote       $14
00093A58 E701                       	dc.b	smpsNoAttack, $01
00093A5A E1F0                       	smpsAlterNote       $F0
00093A5C E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00093A5F E10C                       	smpsAlterNote       $0C
00093A61 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00093A6D 9703                       	dc.b	nBb1, $03
00093A6F E116                       	smpsAlterNote       $16
00093A71 9C01                       	dc.b	nEb2, $01
00093A73 E105                       	smpsAlterNote       $05
00093A75 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00093A78 E113                       	smpsAlterNote       $13
00093A7A E701                       	dc.b	smpsNoAttack, $01
00093A7C E1FF                       	smpsAlterNote       $FF
00093A7E E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00093A81 E109                       	smpsAlterNote       $09
00093A83 E703                       	dc.b	smpsNoAttack, $03
00093A85 E10C                       	smpsAlterNote       $0C
00093A87 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00093A93 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00093A9B E109                       	smpsAlterNote       $09
00093A9D 9E03                       	dc.b	nF2, $03
00093A9F E10C                       	smpsAlterNote       $0C
00093AA1 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093AA5 E1EC                       	smpsAlterNote       $EC
00093AA7 A201                       	dc.b	nA2, $01
00093AA9 E10A                       	smpsAlterNote       $0A
00093AAB E701                       	dc.b	smpsNoAttack, $01
00093AAD E1E8                       	smpsAlterNote       $E8
00093AAF E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00093AB2 E1F7                       	smpsAlterNote       $F7
00093AB4 E701                       	dc.b	smpsNoAttack, $01
00093AB6 E10C                       	smpsAlterNote       $0C
00093AB8 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00093AC4 E1EA                       	smpsAlterNote       $EA
00093AC6 9D01                       	dc.b	nE2, $01
00093AC8 E108                       	smpsAlterNote       $08
00093ACA E701                       	dc.b	smpsNoAttack, $01
00093ACC E1F6                       	smpsAlterNote       $F6
00093ACE E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00093AD1 E105                       	smpsAlterNote       $05
00093AD3 E701                       	dc.b	smpsNoAttack, $01
00093AD5 E109                       	smpsAlterNote       $09
00093AD7 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093ADB E10C                       	smpsAlterNote       $0C
00093ADD 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00093AE9 E108                       	smpsAlterNote       $08
00093AEB 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
00093AF1 E106                       	smpsAlterNote       $06
00093AF3 A403 8001                  	dc.b	nB2, $03, nRst, $01
00093AF7 E108                       	smpsAlterNote       $08
00093AF9 9D03                       	dc.b	nE2, $03
00093AFB E1EB                       	smpsAlterNote       $EB
00093AFD A801                       	dc.b	nEb3, $01
00093AFF E109                       	smpsAlterNote       $09
00093B01 E701                       	dc.b	smpsNoAttack, $01
00093B03 E1EB                       	smpsAlterNote       $EB
00093B05 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00093B08 E108                       	smpsAlterNote       $08
00093B0A E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
00093B16 E1E9                       	smpsAlterNote       $E9
00093B18 A301                       	dc.b	nBb2, $01
00093B1A E1F8                       	smpsAlterNote       $F8
00093B1C E701                       	dc.b	smpsNoAttack, $01
00093B1E E116                       	smpsAlterNote       $16
00093B20 E701                       	dc.b	smpsNoAttack, $01
00093B22 E1F7                       	smpsAlterNote       $F7
00093B24 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093B27 E107                       	smpsAlterNote       $07
00093B29 E701                       	dc.b	smpsNoAttack, $01
00093B2B E1EE                       	smpsAlterNote       $EE
00093B2D E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093B30 E106                       	smpsAlterNote       $06
00093B32 8001                       	dc.b	nRst, $01
00093B34 E108                       	smpsAlterNote       $08
00093B36 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
00093B3C E106                       	smpsAlterNote       $06
00093B3E A402 8001                  	dc.b	nB2, $02, nRst, $01
00093B42 E108                       	smpsAlterNote       $08
00093B44 9D03                       	dc.b	nE2, $03
00093B46 E10B                       	smpsAlterNote       $0B
00093B48 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
00093B4E E108                       	smpsAlterNote       $08
00093B50 9D03 8001                  	dc.b	nE2, $03, nRst, $01
00093B54 E10B                       	smpsAlterNote       $0B
00093B56 9603                       	dc.b	nA1, $03
00093B58 E10E                       	smpsAlterNote       $0E
00093B5A A001                       	dc.b	nG2, $01
00093B5C E118                       	smpsAlterNote       $18
00093B5E E701                       	dc.b	smpsNoAttack, $01
00093B60 E1E9                       	smpsAlterNote       $E9
00093B62 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00093B65 E1EE                       	smpsAlterNote       $EE
00093B67 E701                       	dc.b	smpsNoAttack, $01
00093B69 E1F8                       	smpsAlterNote       $F8
00093B6B E701                       	dc.b	smpsNoAttack, $01
00093B6D E102                       	smpsAlterNote       $02
00093B6F E701                       	dc.b	smpsNoAttack, $01
00093B71 E107                       	smpsAlterNote       $07
00093B73 8001                       	dc.b	nRst, $01
00093B75 E10B                       	smpsAlterNote       $0B
00093B77 9603                       	dc.b	nA1, $03
00093B79 E10C                       	smpsAlterNote       $0C
00093B7B 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
00093B81 E10B                       	smpsAlterNote       $0B
00093B83 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
00093B8F 8001 9603                  	dc.b	nRst, $01, nA1, $03
00093B93 E10C                       	smpsAlterNote       $0C
00093B95 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
00093BA1 8001                       	dc.b	nRst, $01
00093BA3 E10B                       	smpsAlterNote       $0B
00093BA5 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00093BAD E107                       	smpsAlterNote       $07
00093BAF 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00093BB3 E10B                       	smpsAlterNote       $0B
00093BB5 9603                       	dc.b	nA1, $03
00093BB7 E109                       	smpsAlterNote       $09
00093BB9 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00093BBD E108                       	smpsAlterNote       $08
00093BBF 9D06                       	dc.b	nE2, $06
00093BC1 E107                       	smpsAlterNote       $07
00093BC3 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093BC7 E106                       	smpsAlterNote       $06
00093BC9 9903                       	dc.b	nC2, $03
00093BCB E10C                       	smpsAlterNote       $0C
00093BCD 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093BD1 E10B                       	smpsAlterNote       $0B
00093BD3 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00093BDF 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00093BE9 E10C                       	smpsAlterNote       $0C
00093BEB 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
00093BF7 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00093C03 8001                       	dc.b	nRst, $01
00093C05 E10B                       	smpsAlterNote       $0B
00093C07 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00093C13 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
00093C1F 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
00093C2B 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00093C35 E10C                       	smpsAlterNote       $0C
00093C37 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
00093C43 E10B                       	smpsAlterNote       $0B
00093C45 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00093C4D E107                       	smpsAlterNote       $07
00093C4F 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00093C53 E10B                       	smpsAlterNote       $0B
00093C55 9603                       	dc.b	nA1, $03
00093C57 E109                       	smpsAlterNote       $09
00093C59 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00093C5D E108                       	smpsAlterNote       $08
00093C5F 9D06 8001                  	dc.b	nE2, $06, nRst, $01
00093C63 E107                       	smpsAlterNote       $07
00093C65 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00093C69 E106                       	smpsAlterNote       $06
00093C6B 9903                       	dc.b	nC2, $03
00093C6D E10C                       	smpsAlterNote       $0C
00093C6F 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093C73 E10B                       	smpsAlterNote       $0B
00093C75 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00093C81 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00093C8B E10C                       	smpsAlterNote       $0C
00093C8D 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
00093C99 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00093CA5 8001                       	dc.b	nRst, $01
00093CA7 E10B                       	smpsAlterNote       $0B
00093CA9 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00093CB5 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00093CBF E10C                       	smpsAlterNote       $0C
00093CC1 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00093CCD 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
00093CD9 E10B                       	smpsAlterNote       $0B
00093CDB 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00093CE7 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00093CF1 E10C                       	smpsAlterNote       $0C
00093CF3 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00093CFF 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
00093D0B E10B                       	smpsAlterNote       $0B
00093D0D 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
00093D19 8001                       	dc.b	nRst, $01
00093D1B E1EC                       	smpsAlterNote       $EC
00093D1D A101                       	dc.b	nAb2, $01
00093D1F E1FA                       	smpsAlterNote       $FA
00093D21 E701                       	dc.b	smpsNoAttack, $01
00093D23 E116                       	smpsAlterNote       $16
00093D25 E701                       	dc.b	smpsNoAttack, $01
00093D27 E1F5                       	smpsAlterNote       $F5
00093D29 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093D2C E10B                       	smpsAlterNote       $0B
00093D2E E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
00093D3A 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
00093D46 E107                       	smpsAlterNote       $07
00093D48 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093D4E E10B                       	smpsAlterNote       $0B
00093D50 A203                       	dc.b	nA2, $03
00093D52 E107                       	smpsAlterNote       $07
00093D54 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093D58 E1F3                       	smpsAlterNote       $F3
00093D5A A401                       	dc.b	nB2, $01
00093D5C E102                       	smpsAlterNote       $02
00093D5E E701                       	dc.b	smpsNoAttack, $01
00093D60 E109                       	smpsAlterNote       $09
00093D62 E701                       	dc.b	smpsNoAttack, $01
00093D64 E102                       	smpsAlterNote       $02
00093D66 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093D69 E106                       	smpsAlterNote       $06
00093D6B E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093D6F E107                       	smpsAlterNote       $07
00093D71 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00093D75 E108                       	smpsAlterNote       $08
00093D77 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00093D7D E109                       	smpsAlterNote       $09
00093D7F A003 8001                  	dc.b	nG2, $03, nRst, $01
00093D83 E1F2                       	smpsAlterNote       $F2
00093D85 A401                       	dc.b	nB2, $01
00093D87 E1FF                       	smpsAlterNote       $FF
00093D89 E701                       	dc.b	smpsNoAttack, $01
00093D8B E111                       	smpsAlterNote       $11
00093D8D E701                       	dc.b	smpsNoAttack, $01
00093D8F E1FB                       	smpsAlterNote       $FB
00093D91 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093D94 E106                       	smpsAlterNote       $06
00093D96 E702                       	dc.b	smpsNoAttack, $02
00093D98 E109                       	smpsAlterNote       $09
00093D9A A007                       	dc.b	nG2, $07
00093D9C E108                       	smpsAlterNote       $08
00093D9E 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00093DA2 E107                       	smpsAlterNote       $07
00093DA4 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093DAA E10B                       	smpsAlterNote       $0B
00093DAC A202 8001                  	dc.b	nA2, $02, nRst, $01
00093DB0 E107                       	smpsAlterNote       $07
00093DB2 9B03                       	dc.b	nD2, $03
00093DB4 E11A                       	smpsAlterNote       $1A
00093DB6 A301                       	dc.b	nBb2, $01
00093DB8 E1F2                       	smpsAlterNote       $F2
00093DBA E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093DBD E1FF                       	smpsAlterNote       $FF
00093DBF E701                       	dc.b	smpsNoAttack, $01
00093DC1 E111                       	smpsAlterNote       $11
00093DC3 E701                       	dc.b	smpsNoAttack, $01
00093DC5 E106                       	smpsAlterNote       $06
00093DC7 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093DCA E107                       	smpsAlterNote       $07
00093DCC 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00093DD8 E117                       	smpsAlterNote       $17
00093DDA A001                       	dc.b	nG2, $01
00093DDC E1FA                       	smpsAlterNote       $FA
00093DDE E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00093DE1 E116                       	smpsAlterNote       $16
00093DE3 E701                       	dc.b	smpsNoAttack, $01
00093DE5 E1F5                       	smpsAlterNote       $F5
00093DE7 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093DEA E103                       	smpsAlterNote       $03
00093DEC E701                       	dc.b	smpsNoAttack, $01
00093DEE E10B                       	smpsAlterNote       $0B
00093DF0 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00093DF4 E107                       	smpsAlterNote       $07
00093DF6 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093DFC E109                       	smpsAlterNote       $09
00093DFE 9E03                       	dc.b	nF2, $03
00093E00 E10B                       	smpsAlterNote       $0B
00093E02 9603 8001                  	dc.b	nA1, $03, nRst, $01
00093E06 E107                       	smpsAlterNote       $07
00093E08 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00093E0E E10B                       	smpsAlterNote       $0B
00093E10 A203 8001                  	dc.b	nA2, $03, nRst, $01
00093E14 E107                       	smpsAlterNote       $07
00093E16 9B03                       	dc.b	nD2, $03
00093E18 E11A                       	smpsAlterNote       $1A
00093E1A A301                       	dc.b	nBb2, $01
00093E1C E1F9                       	smpsAlterNote       $F9
00093E1E E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093E21 E1FF                       	smpsAlterNote       $FF
00093E23 E701                       	dc.b	smpsNoAttack, $01
00093E25 E111                       	smpsAlterNote       $11
00093E27 E701                       	dc.b	smpsNoAttack, $01
00093E29 E106                       	smpsAlterNote       $06
00093E2B E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093E2E E107                       	smpsAlterNote       $07
00093E30 9B03                       	dc.b	nD2, $03
00093E32 E108                       	smpsAlterNote       $08
00093E34 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00093E3A E109                       	smpsAlterNote       $09
00093E3C A003                       	dc.b	nG2, $03
00093E3E E1F0                       	smpsAlterNote       $F0
00093E40 A501                       	dc.b	nC3, $01
00093E42 E106                       	smpsAlterNote       $06
00093E44 E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
00093E48 E109                       	smpsAlterNote       $09
00093E4A A006 8001                  	dc.b	nG2, $06, nRst, $01
00093E4E E108                       	smpsAlterNote       $08
00093E50 9C03                       	dc.b	nEb2, $03
00093E52 E107                       	smpsAlterNote       $07
00093E54 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00093E5A E10B                       	smpsAlterNote       $0B
00093E5C A203 8001                  	dc.b	nA2, $03, nRst, $01
00093E60 E107                       	smpsAlterNote       $07
00093E62 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00093E66 E11A                       	smpsAlterNote       $1A
00093E68 A301                       	dc.b	nBb2, $01
00093E6A E1F9                       	smpsAlterNote       $F9
00093E6C E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093E6F E107                       	smpsAlterNote       $07
00093E71 E701                       	dc.b	smpsNoAttack, $01
00093E73 E1FB                       	smpsAlterNote       $FB
00093E75 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093E78 E106                       	smpsAlterNote       $06
00093E7A E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093E7E E107                       	smpsAlterNote       $07
00093E80 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00093E88 E1EC                       	smpsAlterNote       $EC
00093E8A A101                       	dc.b	nAb2, $01
00093E8C E108                       	smpsAlterNote       $08
00093E8E E701                       	dc.b	smpsNoAttack, $01
00093E90 E1E7                       	smpsAlterNote       $E7
00093E92 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093E95 E1F5                       	smpsAlterNote       $F5
00093E97 E701                       	dc.b	smpsNoAttack, $01
00093E99 E10B                       	smpsAlterNote       $0B
00093E9B E702                       	dc.b	smpsNoAttack, $02
00093E9D E107                       	smpsAlterNote       $07
00093E9F 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00093EA5 E106                       	smpsAlterNote       $06
00093EA7 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00093EAD E10C                       	smpsAlterNote       $0C
00093EAF 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00093EB7 E109                       	smpsAlterNote       $09
00093EB9 9E03                       	dc.b	nF2, $03
00093EBB E10C                       	smpsAlterNote       $0C
00093EBD 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093EC1 E1EA                       	smpsAlterNote       $EA
00093EC3 A201                       	dc.b	nA2, $01
00093EC5 E106                       	smpsAlterNote       $06
00093EC7 E701                       	dc.b	smpsNoAttack, $01
00093EC9 E114                       	smpsAlterNote       $14
00093ECB E701                       	dc.b	smpsNoAttack, $01
00093ECD E1F0                       	smpsAlterNote       $F0
00093ECF E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00093ED2 E10C                       	smpsAlterNote       $0C
00093ED4 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00093EE0 9703                       	dc.b	nBb1, $03
00093EE2 E116                       	smpsAlterNote       $16
00093EE4 9C01                       	dc.b	nEb2, $01
00093EE6 E105                       	smpsAlterNote       $05
00093EE8 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00093EEB E113                       	smpsAlterNote       $13
00093EED E701                       	dc.b	smpsNoAttack, $01
00093EEF E1FF                       	smpsAlterNote       $FF
00093EF1 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00093EF4 E109                       	smpsAlterNote       $09
00093EF6 E703                       	dc.b	smpsNoAttack, $03
00093EF8 E10C                       	smpsAlterNote       $0C
00093EFA 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00093F06 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00093F0E E109                       	smpsAlterNote       $09
00093F10 9E03                       	dc.b	nF2, $03
00093F12 E10C                       	smpsAlterNote       $0C
00093F14 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093F18 E1EA                       	smpsAlterNote       $EA
00093F1A A201                       	dc.b	nA2, $01
00093F1C E106                       	smpsAlterNote       $06
00093F1E E701                       	dc.b	smpsNoAttack, $01
00093F20 E1E2                       	smpsAlterNote       $E2
00093F22 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00093F25 E1F0                       	smpsAlterNote       $F0
00093F27 E701                       	dc.b	smpsNoAttack, $01
00093F29 E10C                       	smpsAlterNote       $0C
00093F2B E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00093F37 E116                       	smpsAlterNote       $16
00093F39 9C01                       	dc.b	nEb2, $01
00093F3B E105                       	smpsAlterNote       $05
00093F3D E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00093F40 E1F1                       	smpsAlterNote       $F1
00093F42 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00093F45 E1FF                       	smpsAlterNote       $FF
00093F47 E701                       	dc.b	smpsNoAttack, $01
00093F49 E109                       	smpsAlterNote       $09
00093F4B E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093F4F E10C                       	smpsAlterNote       $0C
00093F51 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
00093F5D E106                       	smpsAlterNote       $06
00093F5F 9903                       	dc.b	nC2, $03
00093F61 E107                       	smpsAlterNote       $07
00093F63 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093F67 E109                       	smpsAlterNote       $09
00093F69 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
00093F6F E107                       	smpsAlterNote       $07
00093F71 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093F75 E108                       	smpsAlterNote       $08
00093F77 9D03                       	dc.b	nE2, $03
00093F79 E10B                       	smpsAlterNote       $0B
00093F7B 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
00093F81 E109                       	smpsAlterNote       $09
00093F83 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
00093F89 E10C                       	smpsAlterNote       $0C
00093F8B 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
00093F91 E106                       	smpsAlterNote       $06
00093F93 9903                       	dc.b	nC2, $03
00093F95 E11A                       	smpsAlterNote       $1A
00093F97 A301                       	dc.b	nBb2, $01
00093F99 E1F9                       	smpsAlterNote       $F9
00093F9B E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093F9E E1FF                       	smpsAlterNote       $FF
00093FA0 E701                       	dc.b	smpsNoAttack, $01
00093FA2 E111                       	smpsAlterNote       $11
00093FA4 E701                       	dc.b	smpsNoAttack, $01
00093FA6 E106                       	smpsAlterNote       $06
00093FA8 E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
00093FAF E109                       	smpsAlterNote       $09
00093FB1 A003                       	dc.b	nG2, $03
00093FB3 E106                       	smpsAlterNote       $06
00093FB5 9907                       	dc.b	nC2, $07
00093FB7 E107                       	smpsAlterNote       $07
00093FB9 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
00093FC1 E10B                       	smpsAlterNote       $0B
00093FC3 A203                       	dc.b	nA2, $03
00093FC5 E107                       	smpsAlterNote       $07
00093FC7 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093FCB E1F2                       	smpsAlterNote       $F2
00093FCD A401                       	dc.b	nB2, $01
00093FCF E1F9                       	smpsAlterNote       $F9
00093FD1 E701                       	dc.b	smpsNoAttack, $01
00093FD3 E107                       	smpsAlterNote       $07
00093FD5 E701                       	dc.b	smpsNoAttack, $01
00093FD7 E1FB                       	smpsAlterNote       $FB
00093FD9 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093FDC E106                       	smpsAlterNote       $06
00093FDE E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093FE2 E107                       	smpsAlterNote       $07
00093FE4 9B03                       	dc.b	nD2, $03
00093FE6 E108                       	smpsAlterNote       $08
00093FE8 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00093FEE E109                       	smpsAlterNote       $09
00093FF0 A003 8001                  	dc.b	nG2, $03, nRst, $01
00093FF4 E1F2                       	smpsAlterNote       $F2
00093FF6 A401                       	dc.b	nB2, $01
00093FF8 E1F9                       	smpsAlterNote       $F9
00093FFA E701                       	dc.b	smpsNoAttack, $01
00093FFC E107                       	smpsAlterNote       $07
00093FFE E701                       	dc.b	smpsNoAttack, $01
00094000 E1FB                       	smpsAlterNote       $FB
00094002 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00094005 E106                       	smpsAlterNote       $06
00094007 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0009400B E108                       	smpsAlterNote       $08
0009400D 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
00094011 E10C                       	smpsAlterNote       $0C
00094013 A302 8001                  	dc.b	nBb2, $02, nRst, $01
00094017 E107                       	smpsAlterNote       $07
00094019 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0009401F E10B                       	smpsAlterNote       $0B
00094021 A203                       	dc.b	nA2, $03
00094023 E107                       	smpsAlterNote       $07
00094025 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00094029 E1F2                       	smpsAlterNote       $F2
0009402B A401                       	dc.b	nB2, $01
0009402D E1FF                       	smpsAlterNote       $FF
0009402F E701                       	dc.b	smpsNoAttack, $01
00094031 E107                       	smpsAlterNote       $07
00094033 E701                       	dc.b	smpsNoAttack, $01
00094035 E1FB                       	smpsAlterNote       $FB
00094037 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0009403A E106                       	smpsAlterNote       $06
0009403C E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00094040 E107                       	smpsAlterNote       $07
00094042 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00094046 E108                       	smpsAlterNote       $08
00094048 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
0009404E E109                       	smpsAlterNote       $09
00094050 A003 8001                  	dc.b	nG2, $03, nRst, $01
00094054 E1F2                       	smpsAlterNote       $F2
00094056 A401                       	dc.b	nB2, $01
00094058 E1FF                       	smpsAlterNote       $FF
0009405A E701                       	dc.b	smpsNoAttack, $01
0009405C E111                       	smpsAlterNote       $11
0009405E E701                       	dc.b	smpsNoAttack, $01
00094060 E1FB                       	smpsAlterNote       $FB
00094062 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00094065 E106                       	smpsAlterNote       $06
00094067 E702                       	dc.b	smpsNoAttack, $02
00094069 E108                       	smpsAlterNote       $08
0009406B 9C07                       	dc.b	nEb2, $07
0009406D E10C                       	smpsAlterNote       $0C
0009406F A303 8001                  	dc.b	nBb2, $03, nRst, $01
00094073 E107                       	smpsAlterNote       $07
00094075 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0009407B E10B                       	smpsAlterNote       $0B
0009407D A202 8001                  	dc.b	nA2, $02, nRst, $01
00094081 E107                       	smpsAlterNote       $07
00094083 9B03                       	dc.b	nD2, $03
00094085 E11A                       	smpsAlterNote       $1A
00094087 A301                       	dc.b	nBb2, $01
00094089 E1F2                       	smpsAlterNote       $F2
0009408B E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0009408E E1FF                       	smpsAlterNote       $FF
00094090 E701                       	dc.b	smpsNoAttack, $01
00094092 E111                       	smpsAlterNote       $11
00094094 E701                       	dc.b	smpsNoAttack, $01
00094096 E106                       	smpsAlterNote       $06
00094098 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0009409B E107                       	smpsAlterNote       $07
0009409D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000940A1 E108                       	smpsAlterNote       $08
000940A3 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
000940AB E109                       	smpsAlterNote       $09
000940AD A003                       	dc.b	nG2, $03
000940AF E11A                       	smpsAlterNote       $1A
000940B1 A301                       	dc.b	nBb2, $01
000940B3 E1F2                       	smpsAlterNote       $F2
000940B5 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000940B8 E1FF                       	smpsAlterNote       $FF
000940BA E701                       	dc.b	smpsNoAttack, $01
000940BC E111                       	smpsAlterNote       $11
000940BE E701                       	dc.b	smpsNoAttack, $01
000940C0 E106                       	smpsAlterNote       $06
000940C2 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000940C5 E108                       	smpsAlterNote       $08
000940C7 9C07                       	dc.b	nEb2, $07
000940C9 E10C                       	smpsAlterNote       $0C
000940CB A303 8001                  	dc.b	nBb2, $03, nRst, $01
000940CF E107                       	smpsAlterNote       $07
000940D1 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
000940DD 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
000940E7 E108                       	smpsAlterNote       $08
000940E9 9C06                       	dc.b	nEb2, $06
000940EB E10C                       	smpsAlterNote       $0C
000940ED 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000940F1 E108                       	smpsAlterNote       $08
000940F3 9C03                       	dc.b	nEb2, $03
000940F5 E109                       	smpsAlterNote       $09
000940F7 A003 8001                  	dc.b	nG2, $03, nRst, $01
000940FB E10C                       	smpsAlterNote       $0C
000940FD A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
00094105 E107                       	smpsAlterNote       $07
00094107 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0009410B F6F4 F8                    	smpsJump            music84_Jump04
0009410E                            
0009410E                            ; FM2 Data
0009410E                            music84_FM2:
0009410E E0C0                       	smpsPan             panCenter, $00
00094112 E10B                       	smpsAlterNote       $0B
00094114 C603 8007                  	dc.b	nA5, $03, nRst, $07
00094118 E109                       	smpsAlterNote       $09
0009411A C403 800B                  	dc.b	nG5, $03, nRst, $0B
0009411E E108                       	smpsAlterNote       $08
00094120 C103 8004                  	dc.b	nE5, $03, nRst, $04
00094126 E080                       	smpsPan             panLeft, $00
00094128 E10C                       	smpsAlterNote       $0C
0009412A E6F9                       	smpsAlterVol        $F9
0009412C C703                       	dc.b	nBb5, $03
0009412E E10B                       	smpsAlterNote       $0B
00094130 C603 8001                  	dc.b	nA5, $03, nRst, $01
00094134 E109                       	smpsAlterNote       $09
00094136 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0009413C E108                       	smpsAlterNote       $08
0009413E C103 8001                  	dc.b	nE5, $03, nRst, $01
00094142 E106                       	smpsAlterNote       $06
00094144 BD03                       	dc.b	nC5, $03
00094146 E10B                       	smpsAlterNote       $0B
00094148 BA03 8001                  	dc.b	nA4, $03, nRst, $01
0009414E E0C0                       	smpsPan             panCenter, $00
00094150 E107                       	smpsAlterNote       $07
00094152 E606                       	smpsAlterVol        $06
00094154 BF03                       	dc.b	nD5, $03
00094156                            
00094156                            music84_Jump03:
00094156 E108                       	smpsAlterNote       $08
00094158 C103 8001                  	dc.b	nE5, $03, nRst, $01
0009415C E109                       	smpsAlterNote       $09
0009415E C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
00094164 E10B                       	smpsAlterNote       $0B
00094166 C607                       	dc.b	nA5, $07
00094168 E107                       	smpsAlterNote       $07
0009416A BF03 8001                  	dc.b	nD5, $03, nRst, $01
0009416E E106                       	smpsAlterNote       $06
00094170 C90D                       	dc.b	nC6, $0D
00094172 E100                       	smpsAlterNote       $00
00094174 E701                       	dc.b	smpsNoAttack, $01
00094176 E1FF                       	smpsAlterNote       $FF
00094178 E701                       	dc.b	smpsNoAttack, $01
0009417A E103                       	smpsAlterNote       $03
0009417C E701                       	dc.b	smpsNoAttack, $01
0009417E E109                       	smpsAlterNote       $09
00094180 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094184 E106                       	smpsAlterNote       $06
00094186 E701                       	dc.b	smpsNoAttack, $01
00094188 E100                       	smpsAlterNote       $00
0009418A E701                       	dc.b	smpsNoAttack, $01
0009418C E10C                       	smpsAlterNote       $0C
0009418E C703 8001                  	dc.b	nBb5, $03, nRst, $01
00094192 E10B                       	smpsAlterNote       $0B
00094194 C603                       	dc.b	nA5, $03
00094196 E109                       	smpsAlterNote       $09
00094198 C403 8001                  	dc.b	nG5, $03, nRst, $01
0009419C E10B                       	smpsAlterNote       $0B
0009419E C60D                       	dc.b	nA5, $0D
000941A0 E105                       	smpsAlterNote       $05
000941A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000941A6 E10B                       	smpsAlterNote       $0B
000941A8 E701                       	dc.b	smpsNoAttack, $01
000941AA E10E                       	smpsAlterNote       $0E
000941AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000941B0 E108                       	smpsAlterNote       $08
000941B2 E701                       	dc.b	smpsNoAttack, $01
000941B4 E104                       	smpsAlterNote       $04
000941B6 E701                       	dc.b	smpsNoAttack, $01
000941B8 E105                       	smpsAlterNote       $05
000941BA E701                       	dc.b	smpsNoAttack, $01
000941BC E10B                       	smpsAlterNote       $0B
000941BE E701                       	dc.b	smpsNoAttack, $01
000941C0 E10F                       	smpsAlterNote       $0F
000941C2 E701                       	dc.b	smpsNoAttack, $01
000941C4 E10B                       	smpsAlterNote       $0B
000941C6 E701                       	dc.b	smpsNoAttack, $01
000941C8 E108                       	smpsAlterNote       $08
000941CA E701                       	dc.b	smpsNoAttack, $01
000941CC E104                       	smpsAlterNote       $04
000941CE E701                       	dc.b	smpsNoAttack, $01
000941D0 E108                       	smpsAlterNote       $08
000941D2 E701                       	dc.b	smpsNoAttack, $01
000941D4 E10E                       	smpsAlterNote       $0E
000941D6 E701                       	dc.b	smpsNoAttack, $01
000941D8 E10F                       	smpsAlterNote       $0F
000941DA E701                       	dc.b	smpsNoAttack, $01
000941DC E10B                       	smpsAlterNote       $0B
000941DE E701                       	dc.b	smpsNoAttack, $01
000941E0 E105                       	smpsAlterNote       $05
000941E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000941E6 E108                       	smpsAlterNote       $08
000941E8 E701                       	dc.b	smpsNoAttack, $01
000941EA E10E                       	smpsAlterNote       $0E
000941EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000941F0 E108                       	smpsAlterNote       $08
000941F2 E701                       	dc.b	smpsNoAttack, $01
000941F4 E105                       	smpsAlterNote       $05
000941F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000941FA E10B                       	smpsAlterNote       $0B
000941FC E701                       	dc.b	smpsNoAttack, $01
000941FE E10F                       	smpsAlterNote       $0F
00094200 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00094204 E107                       	smpsAlterNote       $07
00094206 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0009420A E108                       	smpsAlterNote       $08
0009420C C103                       	dc.b	nE5, $03
0009420E E109                       	smpsAlterNote       $09
00094210 C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
00094218 E10B                       	smpsAlterNote       $0B
0009421A C606 8001                  	dc.b	nA5, $06, nRst, $01
0009421E E107                       	smpsAlterNote       $07
00094220 BF03                       	dc.b	nD5, $03
00094222 E106                       	smpsAlterNote       $06
00094224 C90D 8001                  	dc.b	nC6, $0D, nRst, $01
00094228 E107                       	smpsAlterNote       $07
0009422A CB03                       	dc.b	nD6, $03
0009422C E10C                       	smpsAlterNote       $0C
0009422E C704 8001                  	dc.b	nBb5, $04, nRst, $01
00094232 E10B                       	smpsAlterNote       $0B
00094234 C604 8001                  	dc.b	nA5, $04, nRst, $01
00094238 E109                       	smpsAlterNote       $09
0009423A C404                       	dc.b	nG5, $04
0009423C E10B                       	smpsAlterNote       $0B
0009423E C60D                       	dc.b	nA5, $0D
00094240 E108                       	smpsAlterNote       $08
00094242 E701                       	dc.b	smpsNoAttack, $01
00094244 E104                       	smpsAlterNote       $04
00094246 E701                       	dc.b	smpsNoAttack, $01
00094248 E108                       	smpsAlterNote       $08
0009424A E701                       	dc.b	smpsNoAttack, $01
0009424C E10B                       	smpsAlterNote       $0B
0009424E E701                       	dc.b	smpsNoAttack, $01
00094250 E10F                       	smpsAlterNote       $0F
00094252 E701                       	dc.b	smpsNoAttack, $01
00094254 E10B                       	smpsAlterNote       $0B
00094256 E701                       	dc.b	smpsNoAttack, $01
00094258 E105                       	smpsAlterNote       $05
0009425A E701                       	dc.b	smpsNoAttack, $01
0009425C E104                       	smpsAlterNote       $04
0009425E E701                       	dc.b	smpsNoAttack, $01
00094260 E108                       	smpsAlterNote       $08
00094262 E701                       	dc.b	smpsNoAttack, $01
00094264 E10E                       	smpsAlterNote       $0E
00094266 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009426A E10B                       	smpsAlterNote       $0B
0009426C E701                       	dc.b	smpsNoAttack, $01
0009426E E105                       	smpsAlterNote       $05
00094270 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094274 E10B                       	smpsAlterNote       $0B
00094276 E701                       	dc.b	smpsNoAttack, $01
00094278 E10E                       	smpsAlterNote       $0E
0009427A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009427E E108                       	smpsAlterNote       $08
00094280 E701                       	dc.b	smpsNoAttack, $01
00094282 E104                       	smpsAlterNote       $04
00094284 E701                       	dc.b	smpsNoAttack, $01
00094286 E105                       	smpsAlterNote       $05
00094288 E701                       	dc.b	smpsNoAttack, $01
0009428A E10B                       	smpsAlterNote       $0B
0009428C E701                       	dc.b	smpsNoAttack, $01
0009428E E10F                       	smpsAlterNote       $0F
00094290 E701                       	dc.b	smpsNoAttack, $01
00094292 E10B                       	smpsAlterNote       $0B
00094294 E701                       	dc.b	smpsNoAttack, $01
00094296 E108                       	smpsAlterNote       $08
00094298 E701                       	dc.b	smpsNoAttack, $01
0009429A E105                       	smpsAlterNote       $05
0009429C 8001                       	dc.b	nRst, $01
0009429E E109                       	smpsAlterNote       $09
000942A0 C401                       	dc.b	nG5, $01
000942A2 E10B                       	smpsAlterNote       $0B
000942A4 E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
000942AD E109                       	smpsAlterNote       $09
000942AF C404 8001                  	dc.b	nG5, $04, nRst, $01
000942B3 E10B                       	smpsAlterNote       $0B
000942B5 C604 8001                  	dc.b	nA5, $04, nRst, $01
000942B9 E107                       	smpsAlterNote       $07
000942BB BF0D                       	dc.b	nD5, $0D
000942BD E101                       	smpsAlterNote       $01
000942BF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000942C3 E104                       	smpsAlterNote       $04
000942C5 E701                       	dc.b	smpsNoAttack, $01
000942C7 E10A                       	smpsAlterNote       $0A
000942C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000942CD E104                       	smpsAlterNote       $04
000942CF E701                       	dc.b	smpsNoAttack, $01
000942D1 E101                       	smpsAlterNote       $01
000942D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000942D7 E107                       	smpsAlterNote       $07
000942D9 E701                       	dc.b	smpsNoAttack, $01
000942DB E10B                       	smpsAlterNote       $0B
000942DD E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000942E1 E108                       	smpsAlterNote       $08
000942E3 C101                       	dc.b	nE5, $01
000942E5 E109                       	smpsAlterNote       $09
000942E7 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
000942EC E10B                       	smpsAlterNote       $0B
000942EE C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000942F6 E108                       	smpsAlterNote       $08
000942F8 CD06                       	dc.b	nE6, $06
000942FA E109                       	smpsAlterNote       $09
000942FC CE07                       	dc.b	nF6, $07
000942FE E108                       	smpsAlterNote       $08
00094300 CD03 8001                  	dc.b	nE6, $03, nRst, $01
00094304 E106                       	smpsAlterNote       $06
00094306 C903                       	dc.b	nC6, $03
00094308 E109                       	smpsAlterNote       $09
0009430A C403 8001                  	dc.b	nG5, $03, nRst, $01
0009430E E10C                       	smpsAlterNote       $0C
00094310 C70D                       	dc.b	nBb5, $0D
00094312 E106                       	smpsAlterNote       $06
00094314 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094318 E109                       	smpsAlterNote       $09
0009431A E701                       	dc.b	smpsNoAttack, $01
0009431C E10F                       	smpsAlterNote       $0F
0009431E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094322 E109                       	smpsAlterNote       $09
00094324 E701                       	dc.b	smpsNoAttack, $01
00094326 E106                       	smpsAlterNote       $06
00094328 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009432C E10C                       	smpsAlterNote       $0C
0009432E E701                       	dc.b	smpsNoAttack, $01
00094330 E110                       	smpsAlterNote       $10
00094332 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00094336 E10B                       	smpsAlterNote       $0B
00094338 C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
0009433C E105                       	smpsAlterNote       $05
0009433E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094342 E10B                       	smpsAlterNote       $0B
00094344 E701                       	dc.b	smpsNoAttack, $01
00094346 E10E                       	smpsAlterNote       $0E
00094348 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009434C E108                       	smpsAlterNote       $08
0009434E E701                       	dc.b	smpsNoAttack, $01
00094350 E104                       	smpsAlterNote       $04
00094352 E701                       	dc.b	smpsNoAttack, $01
00094354 E105                       	smpsAlterNote       $05
00094356 E701                       	dc.b	smpsNoAttack, $01
00094358 E10B                       	smpsAlterNote       $0B
0009435A E701                       	dc.b	smpsNoAttack, $01
0009435C E10F                       	smpsAlterNote       $0F
0009435E E701                       	dc.b	smpsNoAttack, $01
00094360 E10B                       	smpsAlterNote       $0B
00094362 E701                       	dc.b	smpsNoAttack, $01
00094364 E108                       	smpsAlterNote       $08
00094366 E701                       	dc.b	smpsNoAttack, $01
00094368 E104                       	smpsAlterNote       $04
0009436A E701                       	dc.b	smpsNoAttack, $01
0009436C E108                       	smpsAlterNote       $08
0009436E E701                       	dc.b	smpsNoAttack, $01
00094370 E10E                       	smpsAlterNote       $0E
00094372 E701                       	dc.b	smpsNoAttack, $01
00094374 E10F                       	smpsAlterNote       $0F
00094376 E701                       	dc.b	smpsNoAttack, $01
00094378 E10B                       	smpsAlterNote       $0B
0009437A E701                       	dc.b	smpsNoAttack, $01
0009437C E105                       	smpsAlterNote       $05
0009437E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094382 E108                       	smpsAlterNote       $08
00094384 E701                       	dc.b	smpsNoAttack, $01
00094386 E10E                       	smpsAlterNote       $0E
00094388 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009438C E108                       	smpsAlterNote       $08
0009438E E701                       	dc.b	smpsNoAttack, $01
00094390 E105                       	smpsAlterNote       $05
00094392 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094396 E10B                       	smpsAlterNote       $0B
00094398 E701                       	dc.b	smpsNoAttack, $01
0009439A E10F                       	smpsAlterNote       $0F
0009439C E701                       	dc.b	smpsNoAttack, $01
0009439E E10E                       	smpsAlterNote       $0E
000943A0 E701                       	dc.b	smpsNoAttack, $01
000943A2 E108                       	smpsAlterNote       $08
000943A4 E701                       	dc.b	smpsNoAttack, $01
000943A6 E104                       	smpsAlterNote       $04
000943A8 E701                       	dc.b	smpsNoAttack, $01
000943AA E108                       	smpsAlterNote       $08
000943AC E701                       	dc.b	smpsNoAttack, $01
000943AE E10E                       	smpsAlterNote       $0E
000943B0 E701                       	dc.b	smpsNoAttack, $01
000943B2 E10F                       	smpsAlterNote       $0F
000943B4 E701                       	dc.b	smpsNoAttack, $01
000943B6 E10B                       	smpsAlterNote       $0B
000943B8 E701                       	dc.b	smpsNoAttack, $01
000943BA E105                       	smpsAlterNote       $05
000943BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000943C0 E108                       	smpsAlterNote       $08
000943C2 E701                       	dc.b	smpsNoAttack, $01
000943C4 E10E                       	smpsAlterNote       $0E
000943C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000943CA E108                       	smpsAlterNote       $08
000943CC E701                       	dc.b	smpsNoAttack, $01
000943CE E105                       	smpsAlterNote       $05
000943D0 E701                       	dc.b	smpsNoAttack, $01
000943D2 E10B                       	smpsAlterNote       $0B
000943D4 C60D                       	dc.b	nA5, $0D
000943D6 E108                       	smpsAlterNote       $08
000943D8 E701                       	dc.b	smpsNoAttack, $01
000943DA E104                       	smpsAlterNote       $04
000943DC E701                       	dc.b	smpsNoAttack, $01
000943DE E105                       	smpsAlterNote       $05
000943E0 E701                       	dc.b	smpsNoAttack, $01
000943E2 E10B                       	smpsAlterNote       $0B
000943E4 E701                       	dc.b	smpsNoAttack, $01
000943E6 E10F                       	smpsAlterNote       $0F
000943E8 E701                       	dc.b	smpsNoAttack, $01
000943EA E10B                       	smpsAlterNote       $0B
000943EC E701                       	dc.b	smpsNoAttack, $01
000943EE E108                       	smpsAlterNote       $08
000943F0 E701                       	dc.b	smpsNoAttack, $01
000943F2 E104                       	smpsAlterNote       $04
000943F4 E701                       	dc.b	smpsNoAttack, $01
000943F6 E108                       	smpsAlterNote       $08
000943F8 E701                       	dc.b	smpsNoAttack, $01
000943FA E10E                       	smpsAlterNote       $0E
000943FC E701                       	dc.b	smpsNoAttack, $01
000943FE E10F                       	smpsAlterNote       $0F
00094400 E701                       	dc.b	smpsNoAttack, $01
00094404 E109                       	smpsAlterNote       $09
00094406 E6FF                       	smpsAlterVol        $FF
00094408 C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
00094412 E108                       	smpsAlterNote       $08
00094414 C103 800E                  	dc.b	nE5, $03, nRst, $0E
0009441A E107                       	smpsAlterNote       $07
0009441C E601                       	smpsAlterVol        $01
0009441E BF03                       	dc.b	nD5, $03
00094420 E108                       	smpsAlterNote       $08
00094422 C103 8001                  	dc.b	nE5, $03, nRst, $01
00094426 E109                       	smpsAlterNote       $09
00094428 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
0009442E E10B                       	smpsAlterNote       $0B
00094430 C606 8001                  	dc.b	nA5, $06, nRst, $01
00094434 E107                       	smpsAlterNote       $07
00094436 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0009443A E106                       	smpsAlterNote       $06
0009443C C90D                       	dc.b	nC6, $0D
0009443E E103                       	smpsAlterNote       $03
00094440 E701                       	dc.b	smpsNoAttack, $01
00094442 E1FF                       	smpsAlterNote       $FF
00094444 E701                       	dc.b	smpsNoAttack, $01
00094446 E103                       	smpsAlterNote       $03
00094448 E701                       	dc.b	smpsNoAttack, $01
0009444A E109                       	smpsAlterNote       $09
0009444C E701                       	dc.b	smpsNoAttack, $01
0009444E E10A                       	smpsAlterNote       $0A
00094450 E701                       	dc.b	smpsNoAttack, $01
00094452 E106                       	smpsAlterNote       $06
00094454 E701                       	dc.b	smpsNoAttack, $01
00094456 E100                       	smpsAlterNote       $00
00094458 E701                       	dc.b	smpsNoAttack, $01
0009445A E10C                       	smpsAlterNote       $0C
0009445C C703 8001                  	dc.b	nBb5, $03, nRst, $01
00094460 E10B                       	smpsAlterNote       $0B
00094462 C603                       	dc.b	nA5, $03
00094464 E109                       	smpsAlterNote       $09
00094466 C403 8001                  	dc.b	nG5, $03, nRst, $01
0009446A E10B                       	smpsAlterNote       $0B
0009446C C60D                       	dc.b	nA5, $0D
0009446E E105                       	smpsAlterNote       $05
00094470 E701                       	dc.b	smpsNoAttack, $01
00094472 E104                       	smpsAlterNote       $04
00094474 E701                       	dc.b	smpsNoAttack, $01
00094476 E108                       	smpsAlterNote       $08
00094478 E701                       	dc.b	smpsNoAttack, $01
0009447A E10E                       	smpsAlterNote       $0E
0009447C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094480 E10B                       	smpsAlterNote       $0B
00094482 E701                       	dc.b	smpsNoAttack, $01
00094484 E105                       	smpsAlterNote       $05
00094486 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009448A E10B                       	smpsAlterNote       $0B
0009448C E701                       	dc.b	smpsNoAttack, $01
0009448E E10E                       	smpsAlterNote       $0E
00094490 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094494 E108                       	smpsAlterNote       $08
00094496 E701                       	dc.b	smpsNoAttack, $01
00094498 E104                       	smpsAlterNote       $04
0009449A E701                       	dc.b	smpsNoAttack, $01
0009449C E105                       	smpsAlterNote       $05
0009449E E701                       	dc.b	smpsNoAttack, $01
000944A0 E10B                       	smpsAlterNote       $0B
000944A2 E701                       	dc.b	smpsNoAttack, $01
000944A4 E10F                       	smpsAlterNote       $0F
000944A6 E701                       	dc.b	smpsNoAttack, $01
000944A8 E10B                       	smpsAlterNote       $0B
000944AA E701                       	dc.b	smpsNoAttack, $01
000944AC E108                       	smpsAlterNote       $08
000944AE E701                       	dc.b	smpsNoAttack, $01
000944B0 E104                       	smpsAlterNote       $04
000944B2 E701                       	dc.b	smpsNoAttack, $01
000944B4 E108                       	smpsAlterNote       $08
000944B6 E701                       	dc.b	smpsNoAttack, $01
000944B8 E10E                       	smpsAlterNote       $0E
000944BA E701                       	dc.b	smpsNoAttack, $01
000944BC E10F                       	smpsAlterNote       $0F
000944BE E701                       	dc.b	smpsNoAttack, $01
000944C0 E10B                       	smpsAlterNote       $0B
000944C2 E701                       	dc.b	smpsNoAttack, $01
000944C4 E105                       	smpsAlterNote       $05
000944C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000944CA E108                       	smpsAlterNote       $08
000944CC E701                       	dc.b	smpsNoAttack, $01
000944CE E10E                       	smpsAlterNote       $0E
000944D0 E701                       	dc.b	smpsNoAttack, $01
000944D2 E10F                       	smpsAlterNote       $0F
000944D4 800F                       	dc.b	nRst, $0F
000944D6 E107                       	smpsAlterNote       $07
000944D8 BF02 8001                  	dc.b	nD5, $02, nRst, $01
000944DC E108                       	smpsAlterNote       $08
000944DE C103                       	dc.b	nE5, $03
000944E0 E109                       	smpsAlterNote       $09
000944E2 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
000944E8 E10B                       	smpsAlterNote       $0B
000944EA C606 8001                  	dc.b	nA5, $06, nRst, $01
000944EE E107                       	smpsAlterNote       $07
000944F0 BF03                       	dc.b	nD5, $03
000944F2 E106                       	smpsAlterNote       $06
000944F4 C90E                       	dc.b	nC6, $0E
000944F6 E107                       	smpsAlterNote       $07
000944F8 CB03 8001                  	dc.b	nD6, $03, nRst, $01
000944FC E10C                       	smpsAlterNote       $0C
000944FE C704                       	dc.b	nBb5, $04
00094500 E10B                       	smpsAlterNote       $0B
00094502 C604 8001                  	dc.b	nA5, $04, nRst, $01
00094506 E109                       	smpsAlterNote       $09
00094508 C404                       	dc.b	nG5, $04
0009450A E10B                       	smpsAlterNote       $0B
0009450C C60D                       	dc.b	nA5, $0D
0009450E E108                       	smpsAlterNote       $08
00094510 E701                       	dc.b	smpsNoAttack, $01
00094512 E105                       	smpsAlterNote       $05
00094514 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094518 E10B                       	smpsAlterNote       $0B
0009451A E701                       	dc.b	smpsNoAttack, $01
0009451C E10F                       	smpsAlterNote       $0F
0009451E E701                       	dc.b	smpsNoAttack, $01
00094520 E10E                       	smpsAlterNote       $0E
00094522 E701                       	dc.b	smpsNoAttack, $01
00094524 E108                       	smpsAlterNote       $08
00094526 E701                       	dc.b	smpsNoAttack, $01
00094528 E104                       	smpsAlterNote       $04
0009452A E701                       	dc.b	smpsNoAttack, $01
0009452C E108                       	smpsAlterNote       $08
0009452E E701                       	dc.b	smpsNoAttack, $01
00094530 E10B                       	smpsAlterNote       $0B
00094532 E701                       	dc.b	smpsNoAttack, $01
00094534 E10F                       	smpsAlterNote       $0F
00094536 E701                       	dc.b	smpsNoAttack, $01
00094538 E10B                       	smpsAlterNote       $0B
0009453A E701                       	dc.b	smpsNoAttack, $01
0009453C E105                       	smpsAlterNote       $05
0009453E E701                       	dc.b	smpsNoAttack, $01
00094540 E104                       	smpsAlterNote       $04
00094542 E701                       	dc.b	smpsNoAttack, $01
00094544 E108                       	smpsAlterNote       $08
00094546 E701                       	dc.b	smpsNoAttack, $01
00094548 E10E                       	smpsAlterNote       $0E
0009454A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009454E E10B                       	smpsAlterNote       $0B
00094550 E701                       	dc.b	smpsNoAttack, $01
00094552 E105                       	smpsAlterNote       $05
00094554 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094558 E10B                       	smpsAlterNote       $0B
0009455A E701                       	dc.b	smpsNoAttack, $01
0009455C E10E                       	smpsAlterNote       $0E
0009455E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094562 E108                       	smpsAlterNote       $08
00094564 E701                       	dc.b	smpsNoAttack, $01
00094566 E105                       	smpsAlterNote       $05
00094568 8001                       	dc.b	nRst, $01
0009456A E109                       	smpsAlterNote       $09
0009456C C402                       	dc.b	nG5, $02
0009456E E10B                       	smpsAlterNote       $0B
00094570 E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00094579 E109                       	smpsAlterNote       $09
0009457B C404                       	dc.b	nG5, $04
0009457D E10B                       	smpsAlterNote       $0B
0009457F C604 8001                  	dc.b	nA5, $04, nRst, $01
00094583 E107                       	smpsAlterNote       $07
00094585 BF0D                       	dc.b	nD5, $0D
00094587 E101                       	smpsAlterNote       $01
00094589 E701                       	dc.b	smpsNoAttack, $01
0009458B E100                       	smpsAlterNote       $00
0009458D E701                       	dc.b	smpsNoAttack, $01
0009458F E104                       	smpsAlterNote       $04
00094591 E701                       	dc.b	smpsNoAttack, $01
00094593 E10A                       	smpsAlterNote       $0A
00094595 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094599 E107                       	smpsAlterNote       $07
0009459B E701                       	dc.b	smpsNoAttack, $01
0009459D E101                       	smpsAlterNote       $01
0009459F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000945A3 E107                       	smpsAlterNote       $07
000945A5 E701                       	dc.b	smpsNoAttack, $01
000945A7 E10A                       	smpsAlterNote       $0A
000945A9 E701                       	dc.b	smpsNoAttack, $01
000945AB E10B                       	smpsAlterNote       $0B
000945AD 8001                       	dc.b	nRst, $01
000945AF E108                       	smpsAlterNote       $08
000945B1 C101                       	dc.b	nE5, $01
000945B3 E109                       	smpsAlterNote       $09
000945B5 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
000945BA E10B                       	smpsAlterNote       $0B
000945BC C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000945C4 E108                       	smpsAlterNote       $08
000945C6 CD06 8001                  	dc.b	nE6, $06, nRst, $01
000945CA E109                       	smpsAlterNote       $09
000945CC CE06 8001                  	dc.b	nF6, $06, nRst, $01
000945D0 E108                       	smpsAlterNote       $08
000945D2 CD02 8001                  	dc.b	nE6, $02, nRst, $01
000945D6 E106                       	smpsAlterNote       $06
000945D8 C903                       	dc.b	nC6, $03
000945DA E109                       	smpsAlterNote       $09
000945DC C403 8001                  	dc.b	nG5, $03, nRst, $01
000945E0 E10C                       	smpsAlterNote       $0C
000945E2 C70D                       	dc.b	nBb5, $0D
000945E4 E109                       	smpsAlterNote       $09
000945E6 E701                       	dc.b	smpsNoAttack, $01
000945E8 E105                       	smpsAlterNote       $05
000945EA E701                       	dc.b	smpsNoAttack, $01
000945EC E109                       	smpsAlterNote       $09
000945EE E701                       	dc.b	smpsNoAttack, $01
000945F0 E10F                       	smpsAlterNote       $0F
000945F2 E701                       	dc.b	smpsNoAttack, $01
000945F4 E110                       	smpsAlterNote       $10
000945F6 E701                       	dc.b	smpsNoAttack, $01
000945F8 E10C                       	smpsAlterNote       $0C
000945FA E701                       	dc.b	smpsNoAttack, $01
000945FC E106                       	smpsAlterNote       $06
000945FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094602 E109                       	smpsAlterNote       $09
00094604 E701                       	dc.b	smpsNoAttack, $01
00094606 E10F                       	smpsAlterNote       $0F
00094608 E701                       	dc.b	smpsNoAttack, $01
0009460A E110                       	smpsAlterNote       $10
0009460C 8001                       	dc.b	nRst, $01
0009460E E10B                       	smpsAlterNote       $0B
00094610 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
00094616 E105                       	smpsAlterNote       $05
00094618 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009461C E108                       	smpsAlterNote       $08
0009461E E701                       	dc.b	smpsNoAttack, $01
00094620 E10E                       	smpsAlterNote       $0E
00094622 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094626 E108                       	smpsAlterNote       $08
00094628 E701                       	dc.b	smpsNoAttack, $01
0009462A E105                       	smpsAlterNote       $05
0009462C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094630 E10B                       	smpsAlterNote       $0B
00094632 E701                       	dc.b	smpsNoAttack, $01
00094634 E10F                       	smpsAlterNote       $0F
00094636 E701                       	dc.b	smpsNoAttack, $01
00094638 E10E                       	smpsAlterNote       $0E
0009463A E701                       	dc.b	smpsNoAttack, $01
0009463C E108                       	smpsAlterNote       $08
0009463E E701                       	dc.b	smpsNoAttack, $01
00094640 E104                       	smpsAlterNote       $04
00094642 E701                       	dc.b	smpsNoAttack, $01
00094644 E108                       	smpsAlterNote       $08
00094646 E701                       	dc.b	smpsNoAttack, $01
00094648 E10B                       	smpsAlterNote       $0B
0009464A E701                       	dc.b	smpsNoAttack, $01
0009464C E10F                       	smpsAlterNote       $0F
0009464E E701                       	dc.b	smpsNoAttack, $01
00094650 E10B                       	smpsAlterNote       $0B
00094652 E701                       	dc.b	smpsNoAttack, $01
00094654 E105                       	smpsAlterNote       $05
00094656 E701                       	dc.b	smpsNoAttack, $01
00094658 E104                       	smpsAlterNote       $04
0009465A E701                       	dc.b	smpsNoAttack, $01
0009465C E108                       	smpsAlterNote       $08
0009465E E701                       	dc.b	smpsNoAttack, $01
00094660 E10E                       	smpsAlterNote       $0E
00094662 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094666 E10B                       	smpsAlterNote       $0B
00094668 E701                       	dc.b	smpsNoAttack, $01
0009466A E105                       	smpsAlterNote       $05
0009466C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094670 E10B                       	smpsAlterNote       $0B
00094672 E701                       	dc.b	smpsNoAttack, $01
00094674 E10E                       	smpsAlterNote       $0E
00094676 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009467A E108                       	smpsAlterNote       $08
0009467C E701                       	dc.b	smpsNoAttack, $01
0009467E E104                       	smpsAlterNote       $04
00094680 E701                       	dc.b	smpsNoAttack, $01
00094682 E105                       	smpsAlterNote       $05
00094684 E701                       	dc.b	smpsNoAttack, $01
00094686 E10B                       	smpsAlterNote       $0B
00094688 E701                       	dc.b	smpsNoAttack, $01
0009468A E10F                       	smpsAlterNote       $0F
0009468C E701                       	dc.b	smpsNoAttack, $01
0009468E E10B                       	smpsAlterNote       $0B
00094690 E701                       	dc.b	smpsNoAttack, $01
00094692 E108                       	smpsAlterNote       $08
00094694 E701                       	dc.b	smpsNoAttack, $01
00094696 E104                       	smpsAlterNote       $04
00094698 E701                       	dc.b	smpsNoAttack, $01
0009469A E108                       	smpsAlterNote       $08
0009469C E701                       	dc.b	smpsNoAttack, $01
0009469E E10E                       	smpsAlterNote       $0E
000946A0 E701                       	dc.b	smpsNoAttack, $01
000946A2 E10F                       	smpsAlterNote       $0F
000946A4 E701                       	dc.b	smpsNoAttack, $01
000946A6 E10B                       	smpsAlterNote       $0B
000946A8 E701                       	dc.b	smpsNoAttack, $01
000946AA E105                       	smpsAlterNote       $05
000946AC E701                       	dc.b	smpsNoAttack, $01
000946AE E10B                       	smpsAlterNote       $0B
000946B0 C60E                       	dc.b	nA5, $0E
000946B2 E105                       	smpsAlterNote       $05
000946B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000946B8 E10B                       	smpsAlterNote       $0B
000946BA E701                       	dc.b	smpsNoAttack, $01
000946BC E10E                       	smpsAlterNote       $0E
000946BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000946C2 E108                       	smpsAlterNote       $08
000946C4 E701                       	dc.b	smpsNoAttack, $01
000946C6 E104                       	smpsAlterNote       $04
000946C8 E701                       	dc.b	smpsNoAttack, $01
000946CA E105                       	smpsAlterNote       $05
000946CC E701                       	dc.b	smpsNoAttack, $01
000946CE E10B                       	smpsAlterNote       $0B
000946D0 E701                       	dc.b	smpsNoAttack, $01
000946D2 E10F                       	smpsAlterNote       $0F
000946D4 E701                       	dc.b	smpsNoAttack, $01
000946D6 E10B                       	smpsAlterNote       $0B
000946D8 E701                       	dc.b	smpsNoAttack, $01
000946DA E108                       	smpsAlterNote       $08
000946DC E701                       	dc.b	smpsNoAttack, $01
000946DE E104                       	smpsAlterNote       $04
000946E0 E701                       	dc.b	smpsNoAttack, $01
000946E2 E108                       	smpsAlterNote       $08
000946E4 E701                       	dc.b	smpsNoAttack, $01
000946E6 E10E                       	smpsAlterNote       $0E
000946E8 E701                       	dc.b	smpsNoAttack, $01
000946EA E10F                       	smpsAlterNote       $0F
000946EC E701                       	dc.b	smpsNoAttack, $01
000946EE E10B                       	smpsAlterNote       $0B
000946F0 E701                       	dc.b	smpsNoAttack, $01
000946F2 E105                       	smpsAlterNote       $05
000946F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000946F8 E108                       	smpsAlterNote       $08
000946FA E701                       	dc.b	smpsNoAttack, $01
000946FC E10E                       	smpsAlterNote       $0E
000946FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094702 E108                       	smpsAlterNote       $08
00094704 E701                       	dc.b	smpsNoAttack, $01
00094706 E105                       	smpsAlterNote       $05
00094708 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009470C E10B                       	smpsAlterNote       $0B
0009470E E701                       	dc.b	smpsNoAttack, $01
00094710 E10F                       	smpsAlterNote       $0F
00094712 E701                       	dc.b	smpsNoAttack, $01
00094714 E10E                       	smpsAlterNote       $0E
00094716 E701                       	dc.b	smpsNoAttack, $01
00094718 E108                       	smpsAlterNote       $08
0009471A E701                       	dc.b	smpsNoAttack, $01
0009471C E104                       	smpsAlterNote       $04
0009471E E701                       	dc.b	smpsNoAttack, $01
00094720 E108                       	smpsAlterNote       $08
00094722 E701                       	dc.b	smpsNoAttack, $01
00094724 E10E                       	smpsAlterNote       $0E
00094726 E701                       	dc.b	smpsNoAttack, $01
00094728 E10F                       	smpsAlterNote       $0F
0009472A E701                       	dc.b	smpsNoAttack, $01
0009472C E10B                       	smpsAlterNote       $0B
0009472E E701                       	dc.b	smpsNoAttack, $01
00094730 E105                       	smpsAlterNote       $05
00094732 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094736 E108                       	smpsAlterNote       $08
00094738 E701                       	dc.b	smpsNoAttack, $01
0009473A E10E                       	smpsAlterNote       $0E
0009473C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094740 E108                       	smpsAlterNote       $08
00094742 E701                       	dc.b	smpsNoAttack, $01
00094744 E105                       	smpsAlterNote       $05
00094746 E701                       	dc.b	smpsNoAttack, $01
0009474A E10B                       	smpsAlterNote       $0B
0009474C E6FD                       	smpsAlterVol        $FD
0009474E C604 8001                  	dc.b	nA5, $04, nRst, $01
00094752 E109                       	smpsAlterNote       $09
00094754 C404                       	dc.b	nG5, $04
00094756 E10B                       	smpsAlterNote       $0B
00094758 C604 8001                  	dc.b	nA5, $04, nRst, $01
0009475C E107                       	smpsAlterNote       $07
0009475E BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
00094764 E10B                       	smpsAlterNote       $0B
00094766 C604                       	dc.b	nA5, $04
00094768 E109                       	smpsAlterNote       $09
0009476A C404 8001                  	dc.b	nG5, $04, nRst, $01
0009476E E10B                       	smpsAlterNote       $0B
00094770 C604                       	dc.b	nA5, $04
00094772 E108                       	smpsAlterNote       $08
00094774 C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
0009477C E106                       	smpsAlterNote       $06
0009477E C904 8001                  	dc.b	nC6, $04, nRst, $01
00094782 E10C                       	smpsAlterNote       $0C
00094784 C704                       	dc.b	nBb5, $04
00094786 E10B                       	smpsAlterNote       $0B
00094788 C604 8001                  	dc.b	nA5, $04, nRst, $01
0009478C E109                       	smpsAlterNote       $09
0009478E C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
00094798 E10B                       	smpsAlterNote       $0B
0009479A C60D                       	dc.b	nA5, $0D
0009479C E108                       	smpsAlterNote       $08
0009479E E701                       	dc.b	smpsNoAttack, $01
000947A0 E104                       	smpsAlterNote       $04
000947A2 E701                       	dc.b	smpsNoAttack, $01
000947A4 E108                       	smpsAlterNote       $08
000947A6 E701                       	dc.b	smpsNoAttack, $01
000947A8 E10E                       	smpsAlterNote       $0E
000947AA E701                       	dc.b	smpsNoAttack, $01
000947AC E10F                       	smpsAlterNote       $0F
000947AE E701                       	dc.b	smpsNoAttack, $01
000947B0 E10B                       	smpsAlterNote       $0B
000947B2 E701                       	dc.b	smpsNoAttack, $01
000947B4 E105                       	smpsAlterNote       $05
000947B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000947BA E108                       	smpsAlterNote       $08
000947BC E701                       	dc.b	smpsNoAttack, $01
000947BE E10E                       	smpsAlterNote       $0E
000947C0 E701                       	dc.b	smpsNoAttack, $01
000947C2 E10F                       	smpsAlterNote       $0F
000947C4 8001                       	dc.b	nRst, $01
000947C6 E109                       	smpsAlterNote       $09
000947C8 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000947CE E108                       	smpsAlterNote       $08
000947D0 C10D                       	dc.b	nE5, $0D
000947D2 E102                       	smpsAlterNote       $02
000947D4 E701                       	dc.b	smpsNoAttack, $01
000947D6 E101                       	smpsAlterNote       $01
000947D8 E701                       	dc.b	smpsNoAttack, $01
000947DA E105                       	smpsAlterNote       $05
000947DC E701                       	dc.b	smpsNoAttack, $01
000947DE E10B                       	smpsAlterNote       $0B
000947E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000947E4 E108                       	smpsAlterNote       $08
000947E6 E701                       	dc.b	smpsNoAttack, $01
000947E8 E102                       	smpsAlterNote       $02
000947EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000947EE E108                       	smpsAlterNote       $08
000947F0 E701                       	dc.b	smpsNoAttack, $01
000947F2 E10B                       	smpsAlterNote       $0B
000947F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000947F8 E105                       	smpsAlterNote       $05
000947FA E701                       	dc.b	smpsNoAttack, $01
000947FC E101                       	smpsAlterNote       $01
000947FE E701                       	dc.b	smpsNoAttack, $01
00094800 E102                       	smpsAlterNote       $02
00094802 E701                       	dc.b	smpsNoAttack, $01
00094804 E108                       	smpsAlterNote       $08
00094806 E701                       	dc.b	smpsNoAttack, $01
00094808 E10C                       	smpsAlterNote       $0C
0009480A E701                       	dc.b	smpsNoAttack, $01
0009480C E108                       	smpsAlterNote       $08
0009480E E701                       	dc.b	smpsNoAttack, $01
00094810 E105                       	smpsAlterNote       $05
00094812 E701                       	dc.b	smpsNoAttack, $01
00094814 E101                       	smpsAlterNote       $01
00094816 E701                       	dc.b	smpsNoAttack, $01
00094818 E105                       	smpsAlterNote       $05
0009481A E701                       	dc.b	smpsNoAttack, $01
0009481C E10B                       	smpsAlterNote       $0B
0009481E E701                       	dc.b	smpsNoAttack, $01
00094820 E10C                       	smpsAlterNote       $0C
00094822 E701                       	dc.b	smpsNoAttack, $01
00094824 E108                       	smpsAlterNote       $08
00094826 E701                       	dc.b	smpsNoAttack, $01
00094828 E102                       	smpsAlterNote       $02
0009482A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009482E E105                       	smpsAlterNote       $05
00094830 E701                       	dc.b	smpsNoAttack, $01
00094832 E10B                       	smpsAlterNote       $0B
00094834 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094838 E105                       	smpsAlterNote       $05
0009483A E701                       	dc.b	smpsNoAttack, $01
0009483C E102                       	smpsAlterNote       $02
0009483E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094842 E108                       	smpsAlterNote       $08
00094844 E701                       	dc.b	smpsNoAttack, $01
00094846 E10C                       	smpsAlterNote       $0C
00094848 E701                       	dc.b	smpsNoAttack, $01
0009484A E10B                       	smpsAlterNote       $0B
0009484C E701                       	dc.b	smpsNoAttack, $01
0009484E E105                       	smpsAlterNote       $05
00094850 E701                       	dc.b	smpsNoAttack, $01
00094852 E101                       	smpsAlterNote       $01
00094854 E701                       	dc.b	smpsNoAttack, $01
00094856 E105                       	smpsAlterNote       $05
00094858 E701                       	dc.b	smpsNoAttack, $01
0009485A E108                       	smpsAlterNote       $08
0009485C E701                       	dc.b	smpsNoAttack, $01
0009485E E10C                       	smpsAlterNote       $0C
00094860 E701                       	dc.b	smpsNoAttack, $01
00094862 E108                       	smpsAlterNote       $08
00094864 E701                       	dc.b	smpsNoAttack, $01
00094866 E102                       	smpsAlterNote       $02
00094868 E701                       	dc.b	smpsNoAttack, $01
0009486A E101                       	smpsAlterNote       $01
0009486C E701                       	dc.b	smpsNoAttack, $01
0009486E E105                       	smpsAlterNote       $05
00094870 E701                       	dc.b	smpsNoAttack, $01
00094872 E10B                       	smpsAlterNote       $0B
00094874 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094878 E108                       	smpsAlterNote       $08
0009487A E701                       	dc.b	smpsNoAttack, $01
0009487C E102                       	smpsAlterNote       $02
0009487E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094882 E108                       	smpsAlterNote       $08
00094884 E701                       	dc.b	smpsNoAttack, $01
00094886 E10B                       	smpsAlterNote       $0B
00094888 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009488C E105                       	smpsAlterNote       $05
0009488E E701                       	dc.b	smpsNoAttack, $01
00094890 E101                       	smpsAlterNote       $01
00094892 E701                       	dc.b	smpsNoAttack, $01
00094894 E102                       	smpsAlterNote       $02
00094896 E701                       	dc.b	smpsNoAttack, $01
00094898 E108                       	smpsAlterNote       $08
0009489A E701                       	dc.b	smpsNoAttack, $01
0009489C E10C                       	smpsAlterNote       $0C
0009489E E701                       	dc.b	smpsNoAttack, $01
000948A0 E108                       	smpsAlterNote       $08
000948A2 E701                       	dc.b	smpsNoAttack, $01
000948A4 E105                       	smpsAlterNote       $05
000948A6 E701                       	dc.b	smpsNoAttack, $01
000948A8 E101                       	smpsAlterNote       $01
000948AA E701                       	dc.b	smpsNoAttack, $01
000948AC E105                       	smpsAlterNote       $05
000948AE E701                       	dc.b	smpsNoAttack, $01
000948B0 E10B                       	smpsAlterNote       $0B
000948B2 E701                       	dc.b	smpsNoAttack, $01
000948B4 E10C                       	smpsAlterNote       $0C
000948B6 E701                       	dc.b	smpsNoAttack, $01
000948B8 E108                       	smpsAlterNote       $08
000948BA E701                       	dc.b	smpsNoAttack, $01
000948BC E102                       	smpsAlterNote       $02
000948BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000948C2 E105                       	smpsAlterNote       $05
000948C4 E701                       	dc.b	smpsNoAttack, $01
000948C6 E10B                       	smpsAlterNote       $0B
000948C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000948CC E105                       	smpsAlterNote       $05
000948CE E701                       	dc.b	smpsNoAttack, $01
000948D0 E101                       	smpsAlterNote       $01
000948D2 E701                       	dc.b	smpsNoAttack, $01
000948D4 E102                       	smpsAlterNote       $02
000948D6 E701                       	dc.b	smpsNoAttack, $01
000948D8 E108                       	smpsAlterNote       $08
000948DA E701                       	dc.b	smpsNoAttack, $01
000948DC E10C                       	smpsAlterNote       $0C
000948DE E701                       	dc.b	smpsNoAttack, $01
000948E0 E108                       	smpsAlterNote       $08
000948E2 E701                       	dc.b	smpsNoAttack, $01
000948E4 E105                       	smpsAlterNote       $05
000948E6 E701                       	dc.b	smpsNoAttack, $01
000948E8 E101                       	smpsAlterNote       $01
000948EA E701                       	dc.b	smpsNoAttack, $01
000948EC E105                       	smpsAlterNote       $05
000948EE E701                       	dc.b	smpsNoAttack, $01
000948F0 E10B                       	smpsAlterNote       $0B
000948F2 E701                       	dc.b	smpsNoAttack, $01
000948F4 E10C                       	smpsAlterNote       $0C
000948F6 E701                       	dc.b	smpsNoAttack, $01
000948F8 E108                       	smpsAlterNote       $08
000948FA E701                       	dc.b	smpsNoAttack, $01
000948FC E102                       	smpsAlterNote       $02
000948FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094902 E105                       	smpsAlterNote       $05
00094904 E701                       	dc.b	smpsNoAttack, $01
00094906 E10B                       	smpsAlterNote       $0B
00094908 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009490C E105                       	smpsAlterNote       $05
0009490E E701                       	dc.b	smpsNoAttack, $01
00094910 E102                       	smpsAlterNote       $02
00094912 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094916 E108                       	smpsAlterNote       $08
00094918 E701                       	dc.b	smpsNoAttack, $01
0009491A E10C                       	smpsAlterNote       $0C
0009491C E701                       	dc.b	smpsNoAttack, $01
0009491E E10B                       	smpsAlterNote       $0B
00094920 E701                       	dc.b	smpsNoAttack, $01
00094922 E105                       	smpsAlterNote       $05
00094924 E701                       	dc.b	smpsNoAttack, $01
00094926 E101                       	smpsAlterNote       $01
00094928 E701                       	dc.b	smpsNoAttack, $01
0009492A E105                       	smpsAlterNote       $05
0009492C E701                       	dc.b	smpsNoAttack, $01
0009492E E108                       	smpsAlterNote       $08
00094930 E701                       	dc.b	smpsNoAttack, $01
00094932 E10C                       	smpsAlterNote       $0C
00094934 E701                       	dc.b	smpsNoAttack, $01
00094938 E10B                       	smpsAlterNote       $0B
0009493A C604 8001                  	dc.b	nA5, $04, nRst, $01
0009493E E109                       	smpsAlterNote       $09
00094940 C404                       	dc.b	nG5, $04
00094942 E10B                       	smpsAlterNote       $0B
00094944 C604 8001                  	dc.b	nA5, $04, nRst, $01
00094948 E107                       	smpsAlterNote       $07
0009494A BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
00094950 E10B                       	smpsAlterNote       $0B
00094952 C604                       	dc.b	nA5, $04
00094954 E109                       	smpsAlterNote       $09
00094956 C404 8001                  	dc.b	nG5, $04, nRst, $01
0009495A E10B                       	smpsAlterNote       $0B
0009495C C604                       	dc.b	nA5, $04
0009495E E108                       	smpsAlterNote       $08
00094960 C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
00094966 E106                       	smpsAlterNote       $06
00094968 C904 8001                  	dc.b	nC6, $04, nRst, $01
0009496C E10C                       	smpsAlterNote       $0C
0009496E C704                       	dc.b	nBb5, $04
00094970 E10B                       	smpsAlterNote       $0B
00094972 C604 8001                  	dc.b	nA5, $04, nRst, $01
00094976 E109                       	smpsAlterNote       $09
00094978 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
00094982 E10B                       	smpsAlterNote       $0B
00094984 C60D                       	dc.b	nA5, $0D
00094986 E108                       	smpsAlterNote       $08
00094988 E701                       	dc.b	smpsNoAttack, $01
0009498A E104                       	smpsAlterNote       $04
0009498C E701                       	dc.b	smpsNoAttack, $01
0009498E E108                       	smpsAlterNote       $08
00094990 E701                       	dc.b	smpsNoAttack, $01
00094992 E10B                       	smpsAlterNote       $0B
00094994 E701                       	dc.b	smpsNoAttack, $01
00094996 E10F                       	smpsAlterNote       $0F
00094998 E701                       	dc.b	smpsNoAttack, $01
0009499A E10B                       	smpsAlterNote       $0B
0009499C E701                       	dc.b	smpsNoAttack, $01
0009499E E105                       	smpsAlterNote       $05
000949A0 E701                       	dc.b	smpsNoAttack, $01
000949A2 E104                       	smpsAlterNote       $04
000949A4 E701                       	dc.b	smpsNoAttack, $01
000949A6 E108                       	smpsAlterNote       $08
000949A8 E701                       	dc.b	smpsNoAttack, $01
000949AA E10E                       	smpsAlterNote       $0E
000949AC E701                       	dc.b	smpsNoAttack, $01
000949AE E10F                       	smpsAlterNote       $0F
000949B0 8001                       	dc.b	nRst, $01
000949B2 E109                       	smpsAlterNote       $09
000949B4 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000949BA E108                       	smpsAlterNote       $08
000949BC C10D                       	dc.b	nE5, $0D
000949BE E105                       	smpsAlterNote       $05
000949C0 E701                       	dc.b	smpsNoAttack, $01
000949C2 E101                       	smpsAlterNote       $01
000949C4 E701                       	dc.b	smpsNoAttack, $01
000949C6 E105                       	smpsAlterNote       $05
000949C8 E701                       	dc.b	smpsNoAttack, $01
000949CA E10B                       	smpsAlterNote       $0B
000949CC E701                       	dc.b	smpsNoAttack, $01
000949CE E10C                       	smpsAlterNote       $0C
000949D0 E701                       	dc.b	smpsNoAttack, $01
000949D2 E108                       	smpsAlterNote       $08
000949D4 E701                       	dc.b	smpsNoAttack, $01
000949D6 E102                       	smpsAlterNote       $02
000949D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000949DC E105                       	smpsAlterNote       $05
000949DE E701                       	dc.b	smpsNoAttack, $01
000949E0 E10B                       	smpsAlterNote       $0B
000949E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000949E6 E105                       	smpsAlterNote       $05
000949E8 E701                       	dc.b	smpsNoAttack, $01
000949EA E102                       	smpsAlterNote       $02
000949EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000949F0 E108                       	smpsAlterNote       $08
000949F2 E701                       	dc.b	smpsNoAttack, $01
000949F4 E10C                       	smpsAlterNote       $0C
000949F6 E701                       	dc.b	smpsNoAttack, $01
000949F8 E10B                       	smpsAlterNote       $0B
000949FA E701                       	dc.b	smpsNoAttack, $01
000949FC E105                       	smpsAlterNote       $05
000949FE E701                       	dc.b	smpsNoAttack, $01
00094A00 E101                       	smpsAlterNote       $01
00094A02 E701                       	dc.b	smpsNoAttack, $01
00094A04 E105                       	smpsAlterNote       $05
00094A06 E701                       	dc.b	smpsNoAttack, $01
00094A08 E108                       	smpsAlterNote       $08
00094A0A E701                       	dc.b	smpsNoAttack, $01
00094A0C E10C                       	smpsAlterNote       $0C
00094A0E E701                       	dc.b	smpsNoAttack, $01
00094A10 E108                       	smpsAlterNote       $08
00094A12 E701                       	dc.b	smpsNoAttack, $01
00094A14 E102                       	smpsAlterNote       $02
00094A16 E701                       	dc.b	smpsNoAttack, $01
00094A18 E101                       	smpsAlterNote       $01
00094A1A E701                       	dc.b	smpsNoAttack, $01
00094A1C E105                       	smpsAlterNote       $05
00094A1E E701                       	dc.b	smpsNoAttack, $01
00094A20 E10B                       	smpsAlterNote       $0B
00094A22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A26 E108                       	smpsAlterNote       $08
00094A28 E701                       	dc.b	smpsNoAttack, $01
00094A2A E102                       	smpsAlterNote       $02
00094A2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A30 E108                       	smpsAlterNote       $08
00094A32 E701                       	dc.b	smpsNoAttack, $01
00094A34 E10B                       	smpsAlterNote       $0B
00094A36 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A3A E105                       	smpsAlterNote       $05
00094A3C E701                       	dc.b	smpsNoAttack, $01
00094A3E E101                       	smpsAlterNote       $01
00094A40 E701                       	dc.b	smpsNoAttack, $01
00094A42 E102                       	smpsAlterNote       $02
00094A44 E701                       	dc.b	smpsNoAttack, $01
00094A46 E108                       	smpsAlterNote       $08
00094A48 E701                       	dc.b	smpsNoAttack, $01
00094A4A E10C                       	smpsAlterNote       $0C
00094A4C E701                       	dc.b	smpsNoAttack, $01
00094A4E E108                       	smpsAlterNote       $08
00094A50 E701                       	dc.b	smpsNoAttack, $01
00094A52 E105                       	smpsAlterNote       $05
00094A54 E701                       	dc.b	smpsNoAttack, $01
00094A56 E101                       	smpsAlterNote       $01
00094A58 E701                       	dc.b	smpsNoAttack, $01
00094A5A E105                       	smpsAlterNote       $05
00094A5C E701                       	dc.b	smpsNoAttack, $01
00094A5E E10B                       	smpsAlterNote       $0B
00094A60 E701                       	dc.b	smpsNoAttack, $01
00094A62 E10C                       	smpsAlterNote       $0C
00094A64 E701                       	dc.b	smpsNoAttack, $01
00094A66 E108                       	smpsAlterNote       $08
00094A68 E701                       	dc.b	smpsNoAttack, $01
00094A6A E102                       	smpsAlterNote       $02
00094A6C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A70 E108                       	smpsAlterNote       $08
00094A72 E701                       	dc.b	smpsNoAttack, $01
00094A74 E10B                       	smpsAlterNote       $0B
00094A76 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A7A E105                       	smpsAlterNote       $05
00094A7C E701                       	dc.b	smpsNoAttack, $01
00094A7E E101                       	smpsAlterNote       $01
00094A80 E701                       	dc.b	smpsNoAttack, $01
00094A82 E102                       	smpsAlterNote       $02
00094A84 E701                       	dc.b	smpsNoAttack, $01
00094A86 E108                       	smpsAlterNote       $08
00094A88 E701                       	dc.b	smpsNoAttack, $01
00094A8A E10C                       	smpsAlterNote       $0C
00094A8C E701                       	dc.b	smpsNoAttack, $01
00094A8E E108                       	smpsAlterNote       $08
00094A90 E701                       	dc.b	smpsNoAttack, $01
00094A92 E105                       	smpsAlterNote       $05
00094A94 E701                       	dc.b	smpsNoAttack, $01
00094A96 E101                       	smpsAlterNote       $01
00094A98 E701                       	dc.b	smpsNoAttack, $01
00094A9A E105                       	smpsAlterNote       $05
00094A9C E701                       	dc.b	smpsNoAttack, $01
00094A9E E10B                       	smpsAlterNote       $0B
00094AA0 E701                       	dc.b	smpsNoAttack, $01
00094AA2 E10C                       	smpsAlterNote       $0C
00094AA4 E701                       	dc.b	smpsNoAttack, $01
00094AA6 E108                       	smpsAlterNote       $08
00094AA8 E701                       	dc.b	smpsNoAttack, $01
00094AAA E102                       	smpsAlterNote       $02
00094AAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094AB0 E105                       	smpsAlterNote       $05
00094AB2 E701                       	dc.b	smpsNoAttack, $01
00094AB4 E10B                       	smpsAlterNote       $0B
00094AB6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094ABA E105                       	smpsAlterNote       $05
00094ABC E701                       	dc.b	smpsNoAttack, $01
00094ABE E102                       	smpsAlterNote       $02
00094AC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094AC4 E108                       	smpsAlterNote       $08
00094AC6 E701                       	dc.b	smpsNoAttack, $01
00094AC8 E10C                       	smpsAlterNote       $0C
00094ACA E701                       	dc.b	smpsNoAttack, $01
00094ACC E10B                       	smpsAlterNote       $0B
00094ACE E701                       	dc.b	smpsNoAttack, $01
00094AD0 E105                       	smpsAlterNote       $05
00094AD2 E701                       	dc.b	smpsNoAttack, $01
00094AD4 E101                       	smpsAlterNote       $01
00094AD6 E701                       	dc.b	smpsNoAttack, $01
00094AD8 E105                       	smpsAlterNote       $05
00094ADA E701                       	dc.b	smpsNoAttack, $01
00094ADC E108                       	smpsAlterNote       $08
00094ADE E701                       	dc.b	smpsNoAttack, $01
00094AE0 E10C                       	smpsAlterNote       $0C
00094AE2 E701                       	dc.b	smpsNoAttack, $01
00094AE4 E108                       	smpsAlterNote       $08
00094AE6 E701                       	dc.b	smpsNoAttack, $01
00094AE8 E102                       	smpsAlterNote       $02
00094AEA E701                       	dc.b	smpsNoAttack, $01
00094AEC E101                       	smpsAlterNote       $01
00094AEE E701                       	dc.b	smpsNoAttack, $01
00094AF0 E105                       	smpsAlterNote       $05
00094AF2 E701                       	dc.b	smpsNoAttack, $01
00094AF4 E10B                       	smpsAlterNote       $0B
00094AF6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094AFA E108                       	smpsAlterNote       $08
00094AFC E701                       	dc.b	smpsNoAttack, $01
00094AFE E102                       	smpsAlterNote       $02
00094B00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B04 E108                       	smpsAlterNote       $08
00094B06 E701                       	dc.b	smpsNoAttack, $01
00094B08 E10B                       	smpsAlterNote       $0B
00094B0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B0E E105                       	smpsAlterNote       $05
00094B10 E701                       	dc.b	smpsNoAttack, $01
00094B12 E102                       	smpsAlterNote       $02
00094B14 8001                       	dc.b	nRst, $01
00094B16 E107                       	smpsAlterNote       $07
00094B18 BF01 8001                  	dc.b	nD5, $01, nRst, $01
00094B1C E108                       	smpsAlterNote       $08
00094B1E C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
00094B22 E102                       	smpsAlterNote       $02
00094B24 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B28 E108                       	smpsAlterNote       $08
00094B2A E701                       	dc.b	smpsNoAttack, $01
00094B2C E10B                       	smpsAlterNote       $0B
00094B2E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B32 E105                       	smpsAlterNote       $05
00094B34 E701                       	dc.b	smpsNoAttack, $01
00094B36 E101                       	smpsAlterNote       $01
00094B38 E701                       	dc.b	smpsNoAttack, $01
00094B3A E102                       	smpsAlterNote       $02
00094B3C E701                       	dc.b	smpsNoAttack, $01
00094B3E E108                       	smpsAlterNote       $08
00094B40 E701                       	dc.b	smpsNoAttack, $01
00094B42 E10C                       	smpsAlterNote       $0C
00094B44 E701                       	dc.b	smpsNoAttack, $01
00094B46 E108                       	smpsAlterNote       $08
00094B48 E701                       	dc.b	smpsNoAttack, $01
00094B4A E105                       	smpsAlterNote       $05
00094B4C E701                       	dc.b	smpsNoAttack, $01
00094B4E E101                       	smpsAlterNote       $01
00094B50 E701                       	dc.b	smpsNoAttack, $01
00094B52 E105                       	smpsAlterNote       $05
00094B54 E701                       	dc.b	smpsNoAttack, $01
00094B56 E10B                       	smpsAlterNote       $0B
00094B58 E701                       	dc.b	smpsNoAttack, $01
00094B5A E10C                       	smpsAlterNote       $0C
00094B5C E701                       	dc.b	smpsNoAttack, $01
00094B5E E108                       	smpsAlterNote       $08
00094B60 E701                       	dc.b	smpsNoAttack, $01
00094B62 E102                       	smpsAlterNote       $02
00094B64 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B68 E105                       	smpsAlterNote       $05
00094B6A E701                       	dc.b	smpsNoAttack, $01
00094B6C E10B                       	smpsAlterNote       $0B
00094B6E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B72 E105                       	smpsAlterNote       $05
00094B74 E701                       	dc.b	smpsNoAttack, $01
00094B76 E102                       	smpsAlterNote       $02
00094B78 E701                       	dc.b	smpsNoAttack, $01
00094B7A E109                       	smpsAlterNote       $09
00094B7C C40A C207                  	dc.b	nG5, $0A, nF5, $07
00094B80 E108                       	smpsAlterNote       $08
00094B82 C10D                       	dc.b	nE5, $0D
00094B84 E105                       	smpsAlterNote       $05
00094B86 E701                       	dc.b	smpsNoAttack, $01
00094B88 E101                       	smpsAlterNote       $01
00094B8A E701                       	dc.b	smpsNoAttack, $01
00094B8C E102                       	smpsAlterNote       $02
00094B8E E701                       	dc.b	smpsNoAttack, $01
00094B90 E108                       	smpsAlterNote       $08
00094B92 E701                       	dc.b	smpsNoAttack, $01
00094B94 E10C                       	smpsAlterNote       $0C
00094B96 E701                       	dc.b	smpsNoAttack, $01
00094B98 E108                       	smpsAlterNote       $08
00094B9A E701                       	dc.b	smpsNoAttack, $01
00094B9C E105                       	smpsAlterNote       $05
00094B9E E701                       	dc.b	smpsNoAttack, $01
00094BA0 E101                       	smpsAlterNote       $01
00094BA2 E701                       	dc.b	smpsNoAttack, $01
00094BA4 E105                       	smpsAlterNote       $05
00094BA6 E701                       	dc.b	smpsNoAttack, $01
00094BA8 E10B                       	smpsAlterNote       $0B
00094BAA E701                       	dc.b	smpsNoAttack, $01
00094BAC E10C                       	smpsAlterNote       $0C
00094BAE E701                       	dc.b	smpsNoAttack, $01
00094BB0 E108                       	smpsAlterNote       $08
00094BB2 E701                       	dc.b	smpsNoAttack, $01
00094BB4 E102                       	smpsAlterNote       $02
00094BB6 E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
00094BBE E10B                       	smpsAlterNote       $0B
00094BC0 BA01 8001                  	dc.b	nA4, $01, nRst, $01
00094BC4 E10C                       	smpsAlterNote       $0C
00094BC6 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00094BCA E10B                       	smpsAlterNote       $0B
00094BCC BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
00094BD2 E107                       	smpsAlterNote       $07
00094BD4 BF03                       	dc.b	nD5, $03
00094BD6 E108                       	smpsAlterNote       $08
00094BD8 C103 8001                  	dc.b	nE5, $03, nRst, $01
00094BDC E109                       	smpsAlterNote       $09
00094BDE C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00094BE4 E10B                       	smpsAlterNote       $0B
00094BE6 C606 8001                  	dc.b	nA5, $06, nRst, $01
00094BEA E107                       	smpsAlterNote       $07
00094BEC BF02 8001                  	dc.b	nD5, $02, nRst, $01
00094BF0 E106                       	smpsAlterNote       $06
00094BF2 C90D                       	dc.b	nC6, $0D
00094BF4 E103                       	smpsAlterNote       $03
00094BF6 E701                       	dc.b	smpsNoAttack, $01
00094BF8 E1FF                       	smpsAlterNote       $FF
00094BFA E701                       	dc.b	smpsNoAttack, $01
00094BFC E103                       	smpsAlterNote       $03
00094BFE E701                       	dc.b	smpsNoAttack, $01
00094C00 E109                       	smpsAlterNote       $09
00094C02 E701                       	dc.b	smpsNoAttack, $01
00094C04 E10A                       	smpsAlterNote       $0A
00094C06 E701                       	dc.b	smpsNoAttack, $01
00094C08 E106                       	smpsAlterNote       $06
00094C0A E701                       	dc.b	smpsNoAttack, $01
00094C0C E100                       	smpsAlterNote       $00
00094C0E E701                       	dc.b	smpsNoAttack, $01
00094C10 E10C                       	smpsAlterNote       $0C
00094C12 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00094C16 E10B                       	smpsAlterNote       $0B
00094C18 C603                       	dc.b	nA5, $03
00094C1A E109                       	smpsAlterNote       $09
00094C1C C403 8001                  	dc.b	nG5, $03, nRst, $01
00094C20 E10B                       	smpsAlterNote       $0B
00094C22 C60D                       	dc.b	nA5, $0D
00094C24 E105                       	smpsAlterNote       $05
00094C26 E701                       	dc.b	smpsNoAttack, $01
00094C28 E104                       	smpsAlterNote       $04
00094C2A E701                       	dc.b	smpsNoAttack, $01
00094C2C E108                       	smpsAlterNote       $08
00094C2E E701                       	dc.b	smpsNoAttack, $01
00094C30 E10E                       	smpsAlterNote       $0E
00094C32 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C36 E10B                       	smpsAlterNote       $0B
00094C38 E701                       	dc.b	smpsNoAttack, $01
00094C3A E105                       	smpsAlterNote       $05
00094C3C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C40 E10B                       	smpsAlterNote       $0B
00094C42 E701                       	dc.b	smpsNoAttack, $01
00094C44 E10E                       	smpsAlterNote       $0E
00094C46 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C4A E108                       	smpsAlterNote       $08
00094C4C E701                       	dc.b	smpsNoAttack, $01
00094C4E E104                       	smpsAlterNote       $04
00094C50 E701                       	dc.b	smpsNoAttack, $01
00094C52 E105                       	smpsAlterNote       $05
00094C54 E701                       	dc.b	smpsNoAttack, $01
00094C56 E10B                       	smpsAlterNote       $0B
00094C58 E701                       	dc.b	smpsNoAttack, $01
00094C5A E10F                       	smpsAlterNote       $0F
00094C5C E701                       	dc.b	smpsNoAttack, $01
00094C5E E10B                       	smpsAlterNote       $0B
00094C60 E701                       	dc.b	smpsNoAttack, $01
00094C62 E108                       	smpsAlterNote       $08
00094C64 E701                       	dc.b	smpsNoAttack, $01
00094C66 E104                       	smpsAlterNote       $04
00094C68 E701                       	dc.b	smpsNoAttack, $01
00094C6A E108                       	smpsAlterNote       $08
00094C6C E701                       	dc.b	smpsNoAttack, $01
00094C6E E10E                       	smpsAlterNote       $0E
00094C70 E701                       	dc.b	smpsNoAttack, $01
00094C72 E10F                       	smpsAlterNote       $0F
00094C74 E701                       	dc.b	smpsNoAttack, $01
00094C76 E10B                       	smpsAlterNote       $0B
00094C78 E701                       	dc.b	smpsNoAttack, $01
00094C7A E105                       	smpsAlterNote       $05
00094C7C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C80 E108                       	smpsAlterNote       $08
00094C82 E701                       	dc.b	smpsNoAttack, $01
00094C84 E10E                       	smpsAlterNote       $0E
00094C86 E701                       	dc.b	smpsNoAttack, $01
00094C88 E10F                       	smpsAlterNote       $0F
00094C8A 800F                       	dc.b	nRst, $0F
00094C8C E107                       	smpsAlterNote       $07
00094C8E BF02 8001                  	dc.b	nD5, $02, nRst, $01
00094C92 E108                       	smpsAlterNote       $08
00094C94 C103                       	dc.b	nE5, $03
00094C96 E109                       	smpsAlterNote       $09
00094C98 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00094C9E E10B                       	smpsAlterNote       $0B
00094CA0 C607                       	dc.b	nA5, $07
00094CA2 E107                       	smpsAlterNote       $07
00094CA4 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00094CA8 E106                       	smpsAlterNote       $06
00094CAA C90D                       	dc.b	nC6, $0D
00094CAC E107                       	smpsAlterNote       $07
00094CAE CB03 8001                  	dc.b	nD6, $03, nRst, $01
00094CB2 E10C                       	smpsAlterNote       $0C
00094CB4 C704                       	dc.b	nBb5, $04
00094CB6 E10B                       	smpsAlterNote       $0B
00094CB8 C604 8001                  	dc.b	nA5, $04, nRst, $01
00094CBC E109                       	smpsAlterNote       $09
00094CBE C404                       	dc.b	nG5, $04
00094CC0 E10B                       	smpsAlterNote       $0B
00094CC2 C60D                       	dc.b	nA5, $0D
00094CC4 E108                       	smpsAlterNote       $08
00094CC6 E701                       	dc.b	smpsNoAttack, $01
00094CC8 E105                       	smpsAlterNote       $05
00094CCA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094CCE E10B                       	smpsAlterNote       $0B
00094CD0 E701                       	dc.b	smpsNoAttack, $01
00094CD2 E10F                       	smpsAlterNote       $0F
00094CD4 E701                       	dc.b	smpsNoAttack, $01
00094CD6 E10E                       	smpsAlterNote       $0E
00094CD8 E701                       	dc.b	smpsNoAttack, $01
00094CDA E108                       	smpsAlterNote       $08
00094CDC E701                       	dc.b	smpsNoAttack, $01
00094CDE E104                       	smpsAlterNote       $04
00094CE0 E701                       	dc.b	smpsNoAttack, $01
00094CE2 E108                       	smpsAlterNote       $08
00094CE4 E701                       	dc.b	smpsNoAttack, $01
00094CE6 E10B                       	smpsAlterNote       $0B
00094CE8 E701                       	dc.b	smpsNoAttack, $01
00094CEA E10F                       	smpsAlterNote       $0F
00094CEC E701                       	dc.b	smpsNoAttack, $01
00094CEE E10B                       	smpsAlterNote       $0B
00094CF0 E701                       	dc.b	smpsNoAttack, $01
00094CF2 E105                       	smpsAlterNote       $05
00094CF4 E701                       	dc.b	smpsNoAttack, $01
00094CF6 E104                       	smpsAlterNote       $04
00094CF8 E701                       	dc.b	smpsNoAttack, $01
00094CFA E108                       	smpsAlterNote       $08
00094CFC E701                       	dc.b	smpsNoAttack, $01
00094CFE E10E                       	smpsAlterNote       $0E
00094D00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D04 E10B                       	smpsAlterNote       $0B
00094D06 E701                       	dc.b	smpsNoAttack, $01
00094D08 E105                       	smpsAlterNote       $05
00094D0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D0E E10B                       	smpsAlterNote       $0B
00094D10 E701                       	dc.b	smpsNoAttack, $01
00094D12 E10E                       	smpsAlterNote       $0E
00094D14 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D18 E108                       	smpsAlterNote       $08
00094D1A E701                       	dc.b	smpsNoAttack, $01
00094D1C E105                       	smpsAlterNote       $05
00094D1E 8001                       	dc.b	nRst, $01
00094D20 E109                       	smpsAlterNote       $09
00094D22 C401 8001                  	dc.b	nG5, $01, nRst, $01
00094D26 E10B                       	smpsAlterNote       $0B
00094D28 C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00094D30 E109                       	smpsAlterNote       $09
00094D32 C404                       	dc.b	nG5, $04
00094D34 E10B                       	smpsAlterNote       $0B
00094D36 C604 8001                  	dc.b	nA5, $04, nRst, $01
00094D3A E107                       	smpsAlterNote       $07
00094D3C BF0D                       	dc.b	nD5, $0D
00094D3E E101                       	smpsAlterNote       $01
00094D40 E701                       	dc.b	smpsNoAttack, $01
00094D42 E100                       	smpsAlterNote       $00
00094D44 E701                       	dc.b	smpsNoAttack, $01
00094D46 E104                       	smpsAlterNote       $04
00094D48 E701                       	dc.b	smpsNoAttack, $01
00094D4A E10A                       	smpsAlterNote       $0A
00094D4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D50 E107                       	smpsAlterNote       $07
00094D52 E701                       	dc.b	smpsNoAttack, $01
00094D54 E101                       	smpsAlterNote       $01
00094D56 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D5A E107                       	smpsAlterNote       $07
00094D5C E701                       	dc.b	smpsNoAttack, $01
00094D5E E10A                       	smpsAlterNote       $0A
00094D60 E701                       	dc.b	smpsNoAttack, $01
00094D62 E10B                       	smpsAlterNote       $0B
00094D64 8001                       	dc.b	nRst, $01
00094D66 E108                       	smpsAlterNote       $08
00094D68 8001                       	dc.b	nRst, $01
00094D6A E109                       	smpsAlterNote       $09
00094D6C 8001 C401                  	dc.b	nRst, $01, nG5, $01
00094D70 E10B                       	smpsAlterNote       $0B
00094D72 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00094D7A E108                       	smpsAlterNote       $08
00094D7C CD06 8001                  	dc.b	nE6, $06, nRst, $01
00094D80 E109                       	smpsAlterNote       $09
00094D82 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00094D86 E108                       	smpsAlterNote       $08
00094D88 CD02 8001                  	dc.b	nE6, $02, nRst, $01
00094D8C E106                       	smpsAlterNote       $06
00094D8E C903                       	dc.b	nC6, $03
00094D90 E109                       	smpsAlterNote       $09
00094D92 C403 8001                  	dc.b	nG5, $03, nRst, $01
00094D96 E10C                       	smpsAlterNote       $0C
00094D98 C70D                       	dc.b	nBb5, $0D
00094D9A E109                       	smpsAlterNote       $09
00094D9C E701                       	dc.b	smpsNoAttack, $01
00094D9E E105                       	smpsAlterNote       $05
00094DA0 E701                       	dc.b	smpsNoAttack, $01
00094DA2 E109                       	smpsAlterNote       $09
00094DA4 E701                       	dc.b	smpsNoAttack, $01
00094DA6 E10F                       	smpsAlterNote       $0F
00094DA8 E701                       	dc.b	smpsNoAttack, $01
00094DAA E110                       	smpsAlterNote       $10
00094DAC E701                       	dc.b	smpsNoAttack, $01
00094DAE E10C                       	smpsAlterNote       $0C
00094DB0 E701                       	dc.b	smpsNoAttack, $01
00094DB2 E106                       	smpsAlterNote       $06
00094DB4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094DB8 E109                       	smpsAlterNote       $09
00094DBA E701                       	dc.b	smpsNoAttack, $01
00094DBC E10F                       	smpsAlterNote       $0F
00094DBE E701                       	dc.b	smpsNoAttack, $01
00094DC0 E110                       	smpsAlterNote       $10
00094DC2 8001                       	dc.b	nRst, $01
00094DC4 E10B                       	smpsAlterNote       $0B
00094DC6 C606 8001                  	dc.b	nA5, $06, nRst, $01
00094DCA E109                       	smpsAlterNote       $09
00094DCC C40D                       	dc.b	nG5, $0D
00094DCE E103                       	smpsAlterNote       $03
00094DD0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094DD4 E106                       	smpsAlterNote       $06
00094DD6 E701                       	dc.b	smpsNoAttack, $01
00094DD8 E10C                       	smpsAlterNote       $0C
00094DDA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094DDE E106                       	smpsAlterNote       $06
00094DE0 E701                       	dc.b	smpsNoAttack, $01
00094DE2 E103                       	smpsAlterNote       $03
00094DE4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094DE8 E109                       	smpsAlterNote       $09
00094DEA E701                       	dc.b	smpsNoAttack, $01
00094DEC E10D                       	smpsAlterNote       $0D
00094DEE E701                       	dc.b	smpsNoAttack, $01
00094DF0 E10C                       	smpsAlterNote       $0C
00094DF2 E701                       	dc.b	smpsNoAttack, $01
00094DF4 E106                       	smpsAlterNote       $06
00094DF6 E701                       	dc.b	smpsNoAttack, $01
00094DF8 E102                       	smpsAlterNote       $02
00094DFA E701                       	dc.b	smpsNoAttack, $01
00094DFC E103                       	smpsAlterNote       $03
00094DFE 8001                       	dc.b	nRst, $01
00094E00 E10B                       	smpsAlterNote       $0B
00094E02 C60D                       	dc.b	nA5, $0D
00094E04 E108                       	smpsAlterNote       $08
00094E06 E701                       	dc.b	smpsNoAttack, $01
00094E08 E104                       	smpsAlterNote       $04
00094E0A E701                       	dc.b	smpsNoAttack, $01
00094E0C E108                       	smpsAlterNote       $08
00094E0E E701                       	dc.b	smpsNoAttack, $01
00094E10 E10B                       	smpsAlterNote       $0B
00094E12 E701                       	dc.b	smpsNoAttack, $01
00094E14 E10F                       	smpsAlterNote       $0F
00094E16 E701                       	dc.b	smpsNoAttack, $01
00094E18 E10B                       	smpsAlterNote       $0B
00094E1A E701                       	dc.b	smpsNoAttack, $01
00094E1C E105                       	smpsAlterNote       $05
00094E1E E701                       	dc.b	smpsNoAttack, $01
00094E20 E104                       	smpsAlterNote       $04
00094E22 E701                       	dc.b	smpsNoAttack, $01
00094E24 E108                       	smpsAlterNote       $08
00094E26 E701                       	dc.b	smpsNoAttack, $01
00094E28 E10E                       	smpsAlterNote       $0E
00094E2A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E2E E10B                       	smpsAlterNote       $0B
00094E30 E701                       	dc.b	smpsNoAttack, $01
00094E32 E105                       	smpsAlterNote       $05
00094E34 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E38 E10C                       	smpsAlterNote       $0C
00094E3A C70E                       	dc.b	nBb5, $0E
00094E3C E106                       	smpsAlterNote       $06
00094E3E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E42 E10C                       	smpsAlterNote       $0C
00094E44 E701                       	dc.b	smpsNoAttack, $01
00094E46 E10F                       	smpsAlterNote       $0F
00094E48 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E4C E109                       	smpsAlterNote       $09
00094E4E E701                       	dc.b	smpsNoAttack, $01
00094E50 E105                       	smpsAlterNote       $05
00094E52 E701                       	dc.b	smpsNoAttack, $01
00094E54 E106                       	smpsAlterNote       $06
00094E56 E701                       	dc.b	smpsNoAttack, $01
00094E58 E10C                       	smpsAlterNote       $0C
00094E5A E701                       	dc.b	smpsNoAttack, $01
00094E5C E110                       	smpsAlterNote       $10
00094E5E E701                       	dc.b	smpsNoAttack, $01
00094E60 E10C                       	smpsAlterNote       $0C
00094E62 E701                       	dc.b	smpsNoAttack, $01
00094E64 E109                       	smpsAlterNote       $09
00094E66 E701                       	dc.b	smpsNoAttack, $01
00094E68 E105                       	smpsAlterNote       $05
00094E6A E701                       	dc.b	smpsNoAttack, $01
00094E6C E106                       	smpsAlterNote       $06
00094E6E 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
00094E72 E107                       	smpsAlterNote       $07
00094E74 CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
00094E79 E108                       	smpsAlterNote       $08
00094E7B CD0D                       	dc.b	nE6, $0D
00094E7D E107                       	smpsAlterNote       $07
00094E7F CB0D                       	dc.b	nD6, $0D
00094E81 E104                       	smpsAlterNote       $04
00094E83 E701                       	dc.b	smpsNoAttack, $01
00094E85 E100                       	smpsAlterNote       $00
00094E87 E701                       	dc.b	smpsNoAttack, $01
00094E89 E101                       	smpsAlterNote       $01
00094E8B E701                       	dc.b	smpsNoAttack, $01
00094E8D E107                       	smpsAlterNote       $07
00094E8F E701                       	dc.b	smpsNoAttack, $01
00094E91 E10B                       	smpsAlterNote       $0B
00094E93 E701                       	dc.b	smpsNoAttack, $01
00094E95 E107                       	smpsAlterNote       $07
00094E97 E701                       	dc.b	smpsNoAttack, $01
00094E99 E104                       	smpsAlterNote       $04
00094E9B E701                       	dc.b	smpsNoAttack, $01
00094E9D E100                       	smpsAlterNote       $00
00094E9F E701                       	dc.b	smpsNoAttack, $01
00094EA1 E104                       	smpsAlterNote       $04
00094EA3 E701                       	dc.b	smpsNoAttack, $01
00094EA5 E10A                       	smpsAlterNote       $0A
00094EA7 E701                       	dc.b	smpsNoAttack, $01
00094EA9 E10B                       	smpsAlterNote       $0B
00094EAB E701                       	dc.b	smpsNoAttack, $01
00094EAD E108                       	smpsAlterNote       $08
00094EAF CC0D                       	dc.b	nEb6, $0D
00094EB1 E105                       	smpsAlterNote       $05
00094EB3 E701                       	dc.b	smpsNoAttack, $01
00094EB5 E101                       	smpsAlterNote       $01
00094EB7 E701                       	dc.b	smpsNoAttack, $01
00094EB9 E102                       	smpsAlterNote       $02
00094EBB E701                       	dc.b	smpsNoAttack, $01
00094EBD E108                       	smpsAlterNote       $08
00094EBF E701                       	dc.b	smpsNoAttack, $01
00094EC1 E106                       	smpsAlterNote       $06
00094EC3 C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
00094ECF 8001                       	dc.b	nRst, $01
00094ED1 E107                       	smpsAlterNote       $07
00094ED3 CB0D                       	dc.b	nD6, $0D
00094ED5 E104                       	smpsAlterNote       $04
00094ED7 E701                       	dc.b	smpsNoAttack, $01
00094ED9 E100                       	smpsAlterNote       $00
00094EDB E701                       	dc.b	smpsNoAttack, $01
00094EDD E104                       	smpsAlterNote       $04
00094EDF E701                       	dc.b	smpsNoAttack, $01
00094EE1 E107                       	smpsAlterNote       $07
00094EE3 E701                       	dc.b	smpsNoAttack, $01
00094EE5 E10B                       	smpsAlterNote       $0B
00094EE7 E701                       	dc.b	smpsNoAttack, $01
00094EE9 E107                       	smpsAlterNote       $07
00094EEB E701                       	dc.b	smpsNoAttack, $01
00094EED E101                       	smpsAlterNote       $01
00094EEF E701                       	dc.b	smpsNoAttack, $01
00094EF1 E100                       	smpsAlterNote       $00
00094EF3 E701                       	dc.b	smpsNoAttack, $01
00094EF5 E104                       	smpsAlterNote       $04
00094EF7 E701                       	dc.b	smpsNoAttack, $01
00094EF9 E10A                       	smpsAlterNote       $0A
00094EFB E701                       	dc.b	smpsNoAttack, $01
00094EFD E10B                       	smpsAlterNote       $0B
00094EFF 8001                       	dc.b	nRst, $01
00094F01 E109                       	smpsAlterNote       $09
00094F03 CE0A                       	dc.b	nF6, $0A
00094F05 E108                       	smpsAlterNote       $08
00094F07 CC07                       	dc.b	nEb6, $07
00094F09 E106                       	smpsAlterNote       $06
00094F0B C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
00094F17 E107                       	smpsAlterNote       $07
00094F19 CB0D                       	dc.b	nD6, $0D
00094F1B E101                       	smpsAlterNote       $01
00094F1D E701                       	dc.b	smpsNoAttack, $01
00094F1F E100                       	smpsAlterNote       $00
00094F21 E701                       	dc.b	smpsNoAttack, $01
00094F23 E104                       	smpsAlterNote       $04
00094F25 E701                       	dc.b	smpsNoAttack, $01
00094F27 E10A                       	smpsAlterNote       $0A
00094F29 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F2D E107                       	smpsAlterNote       $07
00094F2F E701                       	dc.b	smpsNoAttack, $01
00094F31 E101                       	smpsAlterNote       $01
00094F33 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F37 E107                       	smpsAlterNote       $07
00094F39 E701                       	dc.b	smpsNoAttack, $01
00094F3B E10A                       	smpsAlterNote       $0A
00094F3D E701                       	dc.b	smpsNoAttack, $01
00094F3F E10B                       	smpsAlterNote       $0B
00094F41 8001                       	dc.b	nRst, $01
00094F43 E108                       	smpsAlterNote       $08
00094F45 CC0D                       	dc.b	nEb6, $0D
00094F47 E102                       	smpsAlterNote       $02
00094F49 E701                       	dc.b	smpsNoAttack, $01
00094F4B E101                       	smpsAlterNote       $01
00094F4D E701                       	dc.b	smpsNoAttack, $01
00094F4F E105                       	smpsAlterNote       $05
00094F51 E701                       	dc.b	smpsNoAttack, $01
00094F53 E108                       	smpsAlterNote       $08
00094F55 8001                       	dc.b	nRst, $01
00094F57 E106                       	smpsAlterNote       $06
00094F59 C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00094F65 8001                       	dc.b	nRst, $01
00094F67 E107                       	smpsAlterNote       $07
00094F69 CB0D                       	dc.b	nD6, $0D
00094F6B E101                       	smpsAlterNote       $01
00094F6D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F71 E104                       	smpsAlterNote       $04
00094F73 E701                       	dc.b	smpsNoAttack, $01
00094F75 E10A                       	smpsAlterNote       $0A
00094F77 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F7B E104                       	smpsAlterNote       $04
00094F7D E701                       	dc.b	smpsNoAttack, $01
00094F7F E101                       	smpsAlterNote       $01
00094F81 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F85 E107                       	smpsAlterNote       $07
00094F87 E701                       	dc.b	smpsNoAttack, $01
00094F89 E10B                       	smpsAlterNote       $0B
00094F8B E701                       	dc.b	smpsNoAttack, $01
00094F8D E10A                       	smpsAlterNote       $0A
00094F8F E701                       	dc.b	smpsNoAttack, $01
00094F91 E104                       	smpsAlterNote       $04
00094F93 E701                       	dc.b	smpsNoAttack, $01
00094F95 E100                       	smpsAlterNote       $00
00094F97 E701                       	dc.b	smpsNoAttack, $01
00094F99 E101                       	smpsAlterNote       $01
00094F9B 801C                       	dc.b	nRst, $1C
00094F9F E107                       	smpsAlterNote       $07
00094FA1 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00094FA5 E603                       	smpsAlterVol        $03
00094FA7 F6F1 AD                    	smpsJump            music84_Jump03
00094FAA                            
00094FAA                            ; FM3 Data
00094FAA                            music84_FM3:
00094FAA E0C0                       	smpsPan             panCenter, $00
00094FAE E109                       	smpsAlterNote       $09
00094FB0 C203 8007                  	dc.b	nF5, $03, nRst, $07
00094FB4 E108                       	smpsAlterNote       $08
00094FB6 C103 800B                  	dc.b	nE5, $03, nRst, $0B
00094FBA E10B                       	smpsAlterNote       $0B
00094FBC BA03 8006                  	dc.b	nA4, $03, nRst, $06
00094FC2 E040                       	smpsPan             panRight, $00
00094FC4 E110                       	smpsAlterNote       $10
00094FC6 E6F9                       	smpsAlterVol        $F9
00094FC8 C702 8001                  	dc.b	nBb5, $02, nRst, $01
00094FCC E10F                       	smpsAlterNote       $0F
00094FCE C603                       	dc.b	nA5, $03
00094FD0 E10D                       	smpsAlterNote       $0D
00094FD2 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00094FD8 E10C                       	smpsAlterNote       $0C
00094FDA C103 8001                  	dc.b	nE5, $03, nRst, $01
00094FDE E10A                       	smpsAlterNote       $0A
00094FE0 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00094FE4 E10F                       	smpsAlterNote       $0F
00094FE6 BA01 8001                  	dc.b	nA4, $01, nRst, $01
00094FEA E0C0                       	smpsPan             panCenter, $00
00094FEE E109                       	smpsAlterNote       $09
00094FF0 E609                       	smpsAlterVol        $09
00094FF2 B603                       	dc.b	nF4, $03
00094FF4                            
00094FF4                            music84_Jump02:
00094FF4 E70A                       	dc.b	smpsNoAttack, $0A
00094FF6 E103                       	smpsAlterNote       $03
00094FF8 E701                       	dc.b	smpsNoAttack, $01
00094FFA E102                       	smpsAlterNote       $02
00094FFC E701                       	dc.b	smpsNoAttack, $01
00094FFE E106                       	smpsAlterNote       $06
00095000 E701                       	dc.b	smpsNoAttack, $01
00095002 E10C                       	smpsAlterNote       $0C
00095004 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095008 E109                       	smpsAlterNote       $09
0009500A E701                       	dc.b	smpsNoAttack, $01
0009500C E103                       	smpsAlterNote       $03
0009500E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095012 E109                       	smpsAlterNote       $09
00095014 E701                       	dc.b	smpsNoAttack, $01
00095016 E10C                       	smpsAlterNote       $0C
00095018 E701                       	dc.b	smpsNoAttack, $01
0009501A E10D                       	smpsAlterNote       $0D
0009501C 8001                       	dc.b	nRst, $01
0009501E E109                       	smpsAlterNote       $09
00095020 B80D                       	dc.b	nG4, $0D
00095022 E103                       	smpsAlterNote       $03
00095024 E701                       	dc.b	smpsNoAttack, $01
00095026 E102                       	smpsAlterNote       $02
00095028 E701                       	dc.b	smpsNoAttack, $01
0009502A E106                       	smpsAlterNote       $06
0009502C E701                       	dc.b	smpsNoAttack, $01
0009502E E10C                       	smpsAlterNote       $0C
00095030 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095034 E109                       	smpsAlterNote       $09
00095036 E701                       	dc.b	smpsNoAttack, $01
00095038 E103                       	smpsAlterNote       $03
0009503A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009503E E109                       	smpsAlterNote       $09
00095040 E701                       	dc.b	smpsNoAttack, $01
00095042 E10C                       	smpsAlterNote       $0C
00095044 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095048 E106                       	smpsAlterNote       $06
0009504A E701                       	dc.b	smpsNoAttack, $01
0009504C E102                       	smpsAlterNote       $02
0009504E E701                       	dc.b	smpsNoAttack, $01
00095050 E103                       	smpsAlterNote       $03
00095052 E701                       	dc.b	smpsNoAttack, $01
00095054 E109                       	smpsAlterNote       $09
00095056 E701                       	dc.b	smpsNoAttack, $01
00095058 E10D                       	smpsAlterNote       $0D
0009505A E701                       	dc.b	smpsNoAttack, $01
0009505C E109                       	smpsAlterNote       $09
0009505E E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095062 E10B                       	smpsAlterNote       $0B
00095064 BA0D                       	dc.b	nA4, $0D
00095066 E105                       	smpsAlterNote       $05
00095068 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009506C E108                       	smpsAlterNote       $08
0009506E E701                       	dc.b	smpsNoAttack, $01
00095070 E10E                       	smpsAlterNote       $0E
00095072 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095076 E108                       	smpsAlterNote       $08
00095078 E701                       	dc.b	smpsNoAttack, $01
0009507A E104                       	smpsAlterNote       $04
0009507C E701                       	dc.b	smpsNoAttack, $01
0009507E E105                       	smpsAlterNote       $05
00095080 E701                       	dc.b	smpsNoAttack, $01
00095082 E10B                       	smpsAlterNote       $0B
00095084 E701                       	dc.b	smpsNoAttack, $01
00095086 E10F                       	smpsAlterNote       $0F
00095088 E701                       	dc.b	smpsNoAttack, $01
0009508A E10B                       	smpsAlterNote       $0B
0009508C E701                       	dc.b	smpsNoAttack, $01
0009508E E108                       	smpsAlterNote       $08
00095090 E701                       	dc.b	smpsNoAttack, $01
00095092 E104                       	smpsAlterNote       $04
00095094 E701                       	dc.b	smpsNoAttack, $01
00095096 E108                       	smpsAlterNote       $08
00095098 E701                       	dc.b	smpsNoAttack, $01
0009509A E10E                       	smpsAlterNote       $0E
0009509C E701                       	dc.b	smpsNoAttack, $01
0009509E E10F                       	smpsAlterNote       $0F
000950A0 E701                       	dc.b	smpsNoAttack, $01
000950A2 E10B                       	smpsAlterNote       $0B
000950A4 E701                       	dc.b	smpsNoAttack, $01
000950A6 E105                       	smpsAlterNote       $05
000950A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000950AC E108                       	smpsAlterNote       $08
000950AE E701                       	dc.b	smpsNoAttack, $01
000950B0 E10E                       	smpsAlterNote       $0E
000950B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000950B6 E108                       	smpsAlterNote       $08
000950B8 E701                       	dc.b	smpsNoAttack, $01
000950BA E105                       	smpsAlterNote       $05
000950BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000950C0 E10B                       	smpsAlterNote       $0B
000950C2 E701                       	dc.b	smpsNoAttack, $01
000950C4 E10F                       	smpsAlterNote       $0F
000950C6 E701                       	dc.b	smpsNoAttack, $01
000950C8 E10E                       	smpsAlterNote       $0E
000950CA E701                       	dc.b	smpsNoAttack, $01
000950CC E108                       	smpsAlterNote       $08
000950CE E701                       	dc.b	smpsNoAttack, $01
000950D0 E104                       	smpsAlterNote       $04
000950D2 E701                       	dc.b	smpsNoAttack, $01
000950D4 E105                       	smpsAlterNote       $05
000950D6 8001                       	dc.b	nRst, $01
000950D8 E108                       	smpsAlterNote       $08
000950DA B50A                       	dc.b	nE4, $0A
000950DC E109                       	smpsAlterNote       $09
000950DE B60D                       	dc.b	nF4, $0D
000950E0 E106                       	smpsAlterNote       $06
000950E2 E701                       	dc.b	smpsNoAttack, $01
000950E4 E103                       	smpsAlterNote       $03
000950E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000950EA E109                       	smpsAlterNote       $09
000950EC E701                       	dc.b	smpsNoAttack, $01
000950EE E10D                       	smpsAlterNote       $0D
000950F0 E701                       	dc.b	smpsNoAttack, $01
000950F2 E10C                       	smpsAlterNote       $0C
000950F4 E701                       	dc.b	smpsNoAttack, $01
000950F6 E106                       	smpsAlterNote       $06
000950F8 E701                       	dc.b	smpsNoAttack, $01
000950FA E102                       	smpsAlterNote       $02
000950FC E701                       	dc.b	smpsNoAttack, $01
000950FE E106                       	smpsAlterNote       $06
00095100 E701                       	dc.b	smpsNoAttack, $01
00095102 E109                       	smpsAlterNote       $09
00095104 E701                       	dc.b	smpsNoAttack, $01
00095106 E10D                       	smpsAlterNote       $0D
00095108 E701                       	dc.b	smpsNoAttack, $01
0009510A E109                       	smpsAlterNote       $09
0009510C B80D                       	dc.b	nG4, $0D
0009510E E106                       	smpsAlterNote       $06
00095110 E701                       	dc.b	smpsNoAttack, $01
00095112 E103                       	smpsAlterNote       $03
00095114 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095118 E109                       	smpsAlterNote       $09
0009511A E701                       	dc.b	smpsNoAttack, $01
0009511C E10D                       	smpsAlterNote       $0D
0009511E E701                       	dc.b	smpsNoAttack, $01
00095120 E10C                       	smpsAlterNote       $0C
00095122 E701                       	dc.b	smpsNoAttack, $01
00095124 E106                       	smpsAlterNote       $06
00095126 E701                       	dc.b	smpsNoAttack, $01
00095128 E102                       	smpsAlterNote       $02
0009512A E701                       	dc.b	smpsNoAttack, $01
0009512C E106                       	smpsAlterNote       $06
0009512E E701                       	dc.b	smpsNoAttack, $01
00095130 E109                       	smpsAlterNote       $09
00095132 E701                       	dc.b	smpsNoAttack, $01
00095134 E10D                       	smpsAlterNote       $0D
00095136 E701                       	dc.b	smpsNoAttack, $01
00095138 E109                       	smpsAlterNote       $09
0009513A E701                       	dc.b	smpsNoAttack, $01
0009513C E103                       	smpsAlterNote       $03
0009513E E701                       	dc.b	smpsNoAttack, $01
00095140 E102                       	smpsAlterNote       $02
00095142 E701                       	dc.b	smpsNoAttack, $01
00095144 E106                       	smpsAlterNote       $06
00095146 E701                       	dc.b	smpsNoAttack, $01
00095148 E10C                       	smpsAlterNote       $0C
0009514A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009514E E109                       	smpsAlterNote       $09
00095150 E701                       	dc.b	smpsNoAttack, $01
00095152 E10B                       	smpsAlterNote       $0B
00095154 BA0D                       	dc.b	nA4, $0D
00095156 E108                       	smpsAlterNote       $08
00095158 E701                       	dc.b	smpsNoAttack, $01
0009515A E104                       	smpsAlterNote       $04
0009515C E701                       	dc.b	smpsNoAttack, $01
0009515E E108                       	smpsAlterNote       $08
00095160 E701                       	dc.b	smpsNoAttack, $01
00095162 E10B                       	smpsAlterNote       $0B
00095164 E701                       	dc.b	smpsNoAttack, $01
00095166 E10F                       	smpsAlterNote       $0F
00095168 E701                       	dc.b	smpsNoAttack, $01
0009516A E10B                       	smpsAlterNote       $0B
0009516C E701                       	dc.b	smpsNoAttack, $01
0009516E E105                       	smpsAlterNote       $05
00095170 E701                       	dc.b	smpsNoAttack, $01
00095172 E104                       	smpsAlterNote       $04
00095174 E701                       	dc.b	smpsNoAttack, $01
00095176 E108                       	smpsAlterNote       $08
00095178 E701                       	dc.b	smpsNoAttack, $01
0009517A E10E                       	smpsAlterNote       $0E
0009517C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095180 E10B                       	smpsAlterNote       $0B
00095182 E701                       	dc.b	smpsNoAttack, $01
00095184 E105                       	smpsAlterNote       $05
00095186 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009518A E10B                       	smpsAlterNote       $0B
0009518C E701                       	dc.b	smpsNoAttack, $01
0009518E E10E                       	smpsAlterNote       $0E
00095190 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095194 E108                       	smpsAlterNote       $08
00095196 E701                       	dc.b	smpsNoAttack, $01
00095198 E104                       	smpsAlterNote       $04
0009519A E701                       	dc.b	smpsNoAttack, $01
0009519C E105                       	smpsAlterNote       $05
0009519E E701                       	dc.b	smpsNoAttack, $01
000951A0 E10B                       	smpsAlterNote       $0B
000951A2 E701                       	dc.b	smpsNoAttack, $01
000951A4 E10F                       	smpsAlterNote       $0F
000951A6 E701                       	dc.b	smpsNoAttack, $01
000951A8 E10B                       	smpsAlterNote       $0B
000951AA E701                       	dc.b	smpsNoAttack, $01
000951AC E108                       	smpsAlterNote       $08
000951AE E701                       	dc.b	smpsNoAttack, $01
000951B0 E105                       	smpsAlterNote       $05
000951B2 8001                       	dc.b	nRst, $01
000951B4 E109                       	smpsAlterNote       $09
000951B6 B609 8001                  	dc.b	nF4, $09, nRst, $01
000951BA E108                       	smpsAlterNote       $08
000951BC B506 8001                  	dc.b	nE4, $06, nRst, $01
000951C0 E107                       	smpsAlterNote       $07
000951C2 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
000951C6 E108                       	smpsAlterNote       $08
000951C8 B502 8001                  	dc.b	nE4, $02, nRst, $01
000951CC E109                       	smpsAlterNote       $09
000951CE B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
000951D4 E10B                       	smpsAlterNote       $0B
000951D6 BA0D                       	dc.b	nA4, $0D
000951D8 E108                       	smpsAlterNote       $08
000951DA E701                       	dc.b	smpsNoAttack, $01
000951DC E104                       	smpsAlterNote       $04
000951DE E701                       	dc.b	smpsNoAttack, $01
000951E0 E108                       	smpsAlterNote       $08
000951E2 E701                       	dc.b	smpsNoAttack, $01
000951E4 E10E                       	smpsAlterNote       $0E
000951E6 E701                       	dc.b	smpsNoAttack, $01
000951E8 E10F                       	smpsAlterNote       $0F
000951EA E701                       	dc.b	smpsNoAttack, $01
000951EC E10B                       	smpsAlterNote       $0B
000951EE E701                       	dc.b	smpsNoAttack, $01
000951F0 E105                       	smpsAlterNote       $05
000951F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000951F6 E108                       	smpsAlterNote       $08
000951F8 E701                       	dc.b	smpsNoAttack, $01
000951FA E10E                       	smpsAlterNote       $0E
000951FC E701                       	dc.b	smpsNoAttack, $01
000951FE E10F                       	smpsAlterNote       $0F
00095200 8001                       	dc.b	nRst, $01
00095202 E109                       	smpsAlterNote       $09
00095204 C20D                       	dc.b	nF5, $0D
00095206 E103                       	smpsAlterNote       $03
00095208 E701                       	dc.b	smpsNoAttack, $01
0009520A E102                       	smpsAlterNote       $02
0009520C E701                       	dc.b	smpsNoAttack, $01
0009520E E106                       	smpsAlterNote       $06
00095210 E701                       	dc.b	smpsNoAttack, $01
00095212 E10C                       	smpsAlterNote       $0C
00095214 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095218 E109                       	smpsAlterNote       $09
0009521A E701                       	dc.b	smpsNoAttack, $01
0009521C E103                       	smpsAlterNote       $03
0009521E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095222 E109                       	smpsAlterNote       $09
00095224 E701                       	dc.b	smpsNoAttack, $01
00095226 E10C                       	smpsAlterNote       $0C
00095228 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009522C E106                       	smpsAlterNote       $06
0009522E E701                       	dc.b	smpsNoAttack, $01
00095230 E102                       	smpsAlterNote       $02
00095232 E701                       	dc.b	smpsNoAttack, $01
00095234 E103                       	smpsAlterNote       $03
00095236 E701                       	dc.b	smpsNoAttack, $01
00095238 E109                       	smpsAlterNote       $09
0009523A E701                       	dc.b	smpsNoAttack, $01
0009523C E10D                       	smpsAlterNote       $0D
0009523E E701                       	dc.b	smpsNoAttack, $01
00095240 E109                       	smpsAlterNote       $09
00095242 E701                       	dc.b	smpsNoAttack, $01
00095244 E106                       	smpsAlterNote       $06
00095246 E701                       	dc.b	smpsNoAttack, $01
00095248 E102                       	smpsAlterNote       $02
0009524A E701                       	dc.b	smpsNoAttack, $01
0009524C E106                       	smpsAlterNote       $06
0009524E E701                       	dc.b	smpsNoAttack, $01
00095250 E10C                       	smpsAlterNote       $0C
00095252 E701                       	dc.b	smpsNoAttack, $01
00095254 E10D                       	smpsAlterNote       $0D
00095256 E701                       	dc.b	smpsNoAttack, $01
00095258 E109                       	smpsAlterNote       $09
0009525A E701                       	dc.b	smpsNoAttack, $01
0009525C E103                       	smpsAlterNote       $03
0009525E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095262 E106                       	smpsAlterNote       $06
00095264 E701                       	dc.b	smpsNoAttack, $01
00095266 E10C                       	smpsAlterNote       $0C
00095268 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009526C E106                       	smpsAlterNote       $06
0009526E E701                       	dc.b	smpsNoAttack, $01
00095270 E103                       	smpsAlterNote       $03
00095272 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095276 E109                       	smpsAlterNote       $09
00095278 E701                       	dc.b	smpsNoAttack, $01
0009527A E10D                       	smpsAlterNote       $0D
0009527C E701                       	dc.b	smpsNoAttack, $01
0009527E E10C                       	smpsAlterNote       $0C
00095280 E701                       	dc.b	smpsNoAttack, $01
00095282 E106                       	smpsAlterNote       $06
00095284 E701                       	dc.b	smpsNoAttack, $01
00095286 E102                       	smpsAlterNote       $02
00095288 E701                       	dc.b	smpsNoAttack, $01
0009528A E106                       	smpsAlterNote       $06
0009528C E701                       	dc.b	smpsNoAttack, $01
0009528E E109                       	smpsAlterNote       $09
00095290 E701                       	dc.b	smpsNoAttack, $01
00095292 E10D                       	smpsAlterNote       $0D
00095294 E701                       	dc.b	smpsNoAttack, $01
00095296 E109                       	smpsAlterNote       $09
00095298 E701                       	dc.b	smpsNoAttack, $01
0009529A E103                       	smpsAlterNote       $03
0009529C E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000952A0 E109                       	smpsAlterNote       $09
000952A2 C206                       	dc.b	nF5, $06
000952A4 E108                       	smpsAlterNote       $08
000952A6 C10E                       	dc.b	nE5, $0E
000952A8 E102                       	smpsAlterNote       $02
000952AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000952AE E108                       	smpsAlterNote       $08
000952B0 E701                       	dc.b	smpsNoAttack, $01
000952B2 E10B                       	smpsAlterNote       $0B
000952B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000952B8 E105                       	smpsAlterNote       $05
000952BA E701                       	dc.b	smpsNoAttack, $01
000952BC E101                       	smpsAlterNote       $01
000952BE E701                       	dc.b	smpsNoAttack, $01
000952C0 E102                       	smpsAlterNote       $02
000952C2 E701                       	dc.b	smpsNoAttack, $01
000952C4 E108                       	smpsAlterNote       $08
000952C6 E701                       	dc.b	smpsNoAttack, $01
000952C8 E10C                       	smpsAlterNote       $0C
000952CA E701                       	dc.b	smpsNoAttack, $01
000952CC E107                       	smpsAlterNote       $07
000952CE BF0E                       	dc.b	nD5, $0E
000952D0 E101                       	smpsAlterNote       $01
000952D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000952D6 E107                       	smpsAlterNote       $07
000952D8 E701                       	dc.b	smpsNoAttack, $01
000952DA E10A                       	smpsAlterNote       $0A
000952DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000952E0 E104                       	smpsAlterNote       $04
000952E2 E701                       	dc.b	smpsNoAttack, $01
000952E4 E100                       	smpsAlterNote       $00
000952E6 E701                       	dc.b	smpsNoAttack, $01
000952E8 E104                       	smpsAlterNote       $04
000952EA E701                       	dc.b	smpsNoAttack, $01
000952EC E107                       	smpsAlterNote       $07
000952EE E701                       	dc.b	smpsNoAttack, $01
000952F0 E10B                       	smpsAlterNote       $0B
000952F2 E701                       	dc.b	smpsNoAttack, $01
000952F4 E107                       	smpsAlterNote       $07
000952F6 E701                       	dc.b	smpsNoAttack, $01
000952F8 E101                       	smpsAlterNote       $01
000952FA E701                       	dc.b	smpsNoAttack, $01
000952FC E100                       	smpsAlterNote       $00
000952FE E701                       	dc.b	smpsNoAttack, $01
00095300 E104                       	smpsAlterNote       $04
00095302 E701                       	dc.b	smpsNoAttack, $01
00095304 E10A                       	smpsAlterNote       $0A
00095306 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009530A E107                       	smpsAlterNote       $07
0009530C E701                       	dc.b	smpsNoAttack, $01
0009530E E101                       	smpsAlterNote       $01
00095310 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095314 E107                       	smpsAlterNote       $07
00095316 E701                       	dc.b	smpsNoAttack, $01
00095318 E10A                       	smpsAlterNote       $0A
0009531A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009531E E104                       	smpsAlterNote       $04
00095320 E701                       	dc.b	smpsNoAttack, $01
00095322 E100                       	smpsAlterNote       $00
00095324 E701                       	dc.b	smpsNoAttack, $01
00095326 E101                       	smpsAlterNote       $01
00095328 E701                       	dc.b	smpsNoAttack, $01
0009532A E107                       	smpsAlterNote       $07
0009532C E701                       	dc.b	smpsNoAttack, $01
0009532E E10B                       	smpsAlterNote       $0B
00095330 E701                       	dc.b	smpsNoAttack, $01
00095332 E107                       	smpsAlterNote       $07
00095334 E701                       	dc.b	smpsNoAttack, $01
00095336 E104                       	smpsAlterNote       $04
00095338 E701                       	dc.b	smpsNoAttack, $01
0009533A E100                       	smpsAlterNote       $00
0009533C E701                       	dc.b	smpsNoAttack, $01
0009533E E104                       	smpsAlterNote       $04
00095340 E701                       	dc.b	smpsNoAttack, $01
00095342 E10A                       	smpsAlterNote       $0A
00095344 E701                       	dc.b	smpsNoAttack, $01
00095346 E10B                       	smpsAlterNote       $0B
00095348 E701                       	dc.b	smpsNoAttack, $01
0009534A E107                       	smpsAlterNote       $07
0009534C E701                       	dc.b	smpsNoAttack, $01
0009534E E101                       	smpsAlterNote       $01
00095350 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095354 E104                       	smpsAlterNote       $04
00095356 E701                       	dc.b	smpsNoAttack, $01
00095358 E10A                       	smpsAlterNote       $0A
0009535A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009535E E104                       	smpsAlterNote       $04
00095360 E701                       	dc.b	smpsNoAttack, $01
00095362 E101                       	smpsAlterNote       $01
00095364 E701                       	dc.b	smpsNoAttack, $01
00095368 E107                       	smpsAlterNote       $07
0009536A E6FF                       	smpsAlterVol        $FF
0009536C BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00095378 8004                       	dc.b	nRst, $04
0009537C E109                       	smpsAlterNote       $09
0009537E E602                       	smpsAlterVol        $02
00095380 B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
00095386 E108                       	smpsAlterNote       $08
00095388 B502 8001                  	dc.b	nE4, $02, nRst, $01
0009538C E109                       	smpsAlterNote       $09
0009538E B60D                       	dc.b	nF4, $0D
00095390 E106                       	smpsAlterNote       $06
00095392 E701                       	dc.b	smpsNoAttack, $01
00095394 E102                       	smpsAlterNote       $02
00095396 E701                       	dc.b	smpsNoAttack, $01
00095398 E106                       	smpsAlterNote       $06
0009539A E701                       	dc.b	smpsNoAttack, $01
0009539C E109                       	smpsAlterNote       $09
0009539E E701                       	dc.b	smpsNoAttack, $01
000953A0 E10D                       	smpsAlterNote       $0D
000953A2 E701                       	dc.b	smpsNoAttack, $01
000953A4 E109                       	smpsAlterNote       $09
000953A6 E701                       	dc.b	smpsNoAttack, $01
000953A8 E103                       	smpsAlterNote       $03
000953AA E701                       	dc.b	smpsNoAttack, $01
000953AC E102                       	smpsAlterNote       $02
000953AE E701                       	dc.b	smpsNoAttack, $01
000953B0 E106                       	smpsAlterNote       $06
000953B2 E701                       	dc.b	smpsNoAttack, $01
000953B4 E10C                       	smpsAlterNote       $0C
000953B6 E701                       	dc.b	smpsNoAttack, $01
000953B8 E10D                       	smpsAlterNote       $0D
000953BA 8001                       	dc.b	nRst, $01
000953BC E109                       	smpsAlterNote       $09
000953BE B80D                       	dc.b	nG4, $0D
000953C0 E106                       	smpsAlterNote       $06
000953C2 E701                       	dc.b	smpsNoAttack, $01
000953C4 E102                       	smpsAlterNote       $02
000953C6 E701                       	dc.b	smpsNoAttack, $01
000953C8 E106                       	smpsAlterNote       $06
000953CA E701                       	dc.b	smpsNoAttack, $01
000953CC E10C                       	smpsAlterNote       $0C
000953CE E701                       	dc.b	smpsNoAttack, $01
000953D0 E10D                       	smpsAlterNote       $0D
000953D2 E701                       	dc.b	smpsNoAttack, $01
000953D4 E109                       	smpsAlterNote       $09
000953D6 E701                       	dc.b	smpsNoAttack, $01
000953D8 E103                       	smpsAlterNote       $03
000953DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000953DE E106                       	smpsAlterNote       $06
000953E0 E701                       	dc.b	smpsNoAttack, $01
000953E2 E10C                       	smpsAlterNote       $0C
000953E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000953E8 E106                       	smpsAlterNote       $06
000953EA E701                       	dc.b	smpsNoAttack, $01
000953EC E103                       	smpsAlterNote       $03
000953EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000953F2 E109                       	smpsAlterNote       $09
000953F4 E701                       	dc.b	smpsNoAttack, $01
000953F6 E10D                       	smpsAlterNote       $0D
000953F8 E701                       	dc.b	smpsNoAttack, $01
000953FA E10C                       	smpsAlterNote       $0C
000953FC E701                       	dc.b	smpsNoAttack, $01
000953FE E109                       	smpsAlterNote       $09
00095400 8001                       	dc.b	nRst, $01
00095402 E10B                       	smpsAlterNote       $0B
00095404 BA03                       	dc.b	nA4, $03
00095406 E10C                       	smpsAlterNote       $0C
00095408 BB03 8001                  	dc.b	nBb4, $03, nRst, $01
0009540C E10B                       	smpsAlterNote       $0B
0009540E BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
00095414 E10C                       	smpsAlterNote       $0C
00095416 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0009541A E10B                       	smpsAlterNote       $0B
0009541C C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00095422 E10C                       	smpsAlterNote       $0C
00095424 D303                       	dc.b	nBb6, $03
00095426 E10B                       	smpsAlterNote       $0B
00095428 D20D                       	dc.b	nA6, $0D
0009542A E108                       	smpsAlterNote       $08
0009542C E701                       	dc.b	smpsNoAttack, $01
0009542E E104                       	smpsAlterNote       $04
00095430 E701                       	dc.b	smpsNoAttack, $01
00095432 E105                       	smpsAlterNote       $05
00095434 E701                       	dc.b	smpsNoAttack, $01
00095436 E10B                       	smpsAlterNote       $0B
00095438 E701                       	dc.b	smpsNoAttack, $01
0009543A E10F                       	smpsAlterNote       $0F
0009543C E701                       	dc.b	smpsNoAttack, $01
0009543E E10B                       	smpsAlterNote       $0B
00095440 E701                       	dc.b	smpsNoAttack, $01
00095442 E108                       	smpsAlterNote       $08
00095444 E701                       	dc.b	smpsNoAttack, $01
00095446 E104                       	smpsAlterNote       $04
00095448 E701                       	dc.b	smpsNoAttack, $01
0009544A E108                       	smpsAlterNote       $08
0009544C E701                       	dc.b	smpsNoAttack, $01
0009544E E10E                       	smpsAlterNote       $0E
00095450 E701                       	dc.b	smpsNoAttack, $01
00095452 E10F                       	smpsAlterNote       $0F
00095454 E701                       	dc.b	smpsNoAttack, $01
00095456 E10B                       	smpsAlterNote       $0B
00095458 E701                       	dc.b	smpsNoAttack, $01
0009545A E105                       	smpsAlterNote       $05
0009545C E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00095462 E109                       	smpsAlterNote       $09
00095464 CE07                       	dc.b	nF6, $07
00095466 E108                       	smpsAlterNote       $08
00095468 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0009546C E109                       	smpsAlterNote       $09
0009546E CE03 8001                  	dc.b	nF6, $03, nRst, $01
00095472 E108                       	smpsAlterNote       $08
00095474 CC0D                       	dc.b	nEb6, $0D
00095476 E102                       	smpsAlterNote       $02
00095478 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009547C E108                       	smpsAlterNote       $08
0009547E E701                       	dc.b	smpsNoAttack, $01
00095480 E10B                       	smpsAlterNote       $0B
00095482 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095486 E105                       	smpsAlterNote       $05
00095488 E701                       	dc.b	smpsNoAttack, $01
0009548A E101                       	smpsAlterNote       $01
0009548C E701                       	dc.b	smpsNoAttack, $01
0009548E E102                       	smpsAlterNote       $02
00095490 E701                       	dc.b	smpsNoAttack, $01
00095492 E108                       	smpsAlterNote       $08
00095494 E701                       	dc.b	smpsNoAttack, $01
00095496 E10C                       	smpsAlterNote       $0C
00095498 E701                       	dc.b	smpsNoAttack, $01
0009549A E108                       	smpsAlterNote       $08
0009549C E701                       	dc.b	smpsNoAttack, $01
0009549E E105                       	smpsAlterNote       $05
000954A0 E701                       	dc.b	smpsNoAttack, $01
000954A2 E101                       	smpsAlterNote       $01
000954A4 E701                       	dc.b	smpsNoAttack, $01
000954A6 E105                       	smpsAlterNote       $05
000954A8 E701                       	dc.b	smpsNoAttack, $01
000954AA E10B                       	smpsAlterNote       $0B
000954AC E701                       	dc.b	smpsNoAttack, $01
000954AE E10C                       	smpsAlterNote       $0C
000954B0 E701                       	dc.b	smpsNoAttack, $01
000954B2 E108                       	smpsAlterNote       $08
000954B4 E701                       	dc.b	smpsNoAttack, $01
000954B6 E107                       	smpsAlterNote       $07
000954B8 CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
000954C2 E10B                       	smpsAlterNote       $0B
000954C4 C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
000954CE E109                       	smpsAlterNote       $09
000954D0 C203                       	dc.b	nF5, $03
000954D2 E108                       	smpsAlterNote       $08
000954D4 C103 8001                  	dc.b	nE5, $03, nRst, $01
000954D8 E109                       	smpsAlterNote       $09
000954DA C20D                       	dc.b	nF5, $0D
000954DC E108                       	smpsAlterNote       $08
000954DE C10E                       	dc.b	nE5, $0E
000954E0 E107                       	smpsAlterNote       $07
000954E2 BF0D                       	dc.b	nD5, $0D
000954E4 E104                       	smpsAlterNote       $04
000954E6 E701                       	dc.b	smpsNoAttack, $01
000954E8 E100                       	smpsAlterNote       $00
000954EA E701                       	dc.b	smpsNoAttack, $01
000954EC E104                       	smpsAlterNote       $04
000954EE E701                       	dc.b	smpsNoAttack, $01
000954F0 E107                       	smpsAlterNote       $07
000954F2 E701                       	dc.b	smpsNoAttack, $01
000954F4 E10B                       	smpsAlterNote       $0B
000954F6 E701                       	dc.b	smpsNoAttack, $01
000954F8 E107                       	smpsAlterNote       $07
000954FA E701                       	dc.b	smpsNoAttack, $01
000954FC E101                       	smpsAlterNote       $01
000954FE E701                       	dc.b	smpsNoAttack, $01
00095500 E100                       	smpsAlterNote       $00
00095502 E701                       	dc.b	smpsNoAttack, $01
00095504 E104                       	smpsAlterNote       $04
00095506 E701                       	dc.b	smpsNoAttack, $01
00095508 E10A                       	smpsAlterNote       $0A
0009550A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009550E E107                       	smpsAlterNote       $07
00095510 E701                       	dc.b	smpsNoAttack, $01
00095512 E101                       	smpsAlterNote       $01
00095514 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095518 E107                       	smpsAlterNote       $07
0009551A E701                       	dc.b	smpsNoAttack, $01
0009551C E10A                       	smpsAlterNote       $0A
0009551E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095522 E104                       	smpsAlterNote       $04
00095524 E701                       	dc.b	smpsNoAttack, $01
00095526 E100                       	smpsAlterNote       $00
00095528 E701                       	dc.b	smpsNoAttack, $01
0009552A E101                       	smpsAlterNote       $01
0009552C E701                       	dc.b	smpsNoAttack, $01
0009552E E107                       	smpsAlterNote       $07
00095530 E701                       	dc.b	smpsNoAttack, $01
00095532 E10B                       	smpsAlterNote       $0B
00095534 E701                       	dc.b	smpsNoAttack, $01
00095536 E107                       	smpsAlterNote       $07
00095538 E701                       	dc.b	smpsNoAttack, $01
0009553A E104                       	smpsAlterNote       $04
0009553C E701                       	dc.b	smpsNoAttack, $01
0009553E E100                       	smpsAlterNote       $00
00095540 E701                       	dc.b	smpsNoAttack, $01
00095542 E104                       	smpsAlterNote       $04
00095544 E701                       	dc.b	smpsNoAttack, $01
00095546 E10A                       	smpsAlterNote       $0A
00095548 E701                       	dc.b	smpsNoAttack, $01
0009554A E10B                       	smpsAlterNote       $0B
0009554C E701                       	dc.b	smpsNoAttack, $01
0009554E E107                       	smpsAlterNote       $07
00095550 E701                       	dc.b	smpsNoAttack, $01
00095552 E101                       	smpsAlterNote       $01
00095554 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095558 E104                       	smpsAlterNote       $04
0009555A E701                       	dc.b	smpsNoAttack, $01
0009555C E10A                       	smpsAlterNote       $0A
0009555E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095562 E104                       	smpsAlterNote       $04
00095564 E701                       	dc.b	smpsNoAttack, $01
00095566 E101                       	smpsAlterNote       $01
00095568 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009556C E107                       	smpsAlterNote       $07
0009556E E701                       	dc.b	smpsNoAttack, $01
00095570 E10B                       	smpsAlterNote       $0B
00095572 E701                       	dc.b	smpsNoAttack, $01
00095574 E10A                       	smpsAlterNote       $0A
00095576 E701                       	dc.b	smpsNoAttack, $01
00095578 E104                       	smpsAlterNote       $04
0009557A E701                       	dc.b	smpsNoAttack, $01
0009557C E100                       	smpsAlterNote       $00
0009557E E701                       	dc.b	smpsNoAttack, $01
00095580 E104                       	smpsAlterNote       $04
00095582 E701                       	dc.b	smpsNoAttack, $01
00095584 E107                       	smpsAlterNote       $07
00095586 E701                       	dc.b	smpsNoAttack, $01
00095588 E10B                       	smpsAlterNote       $0B
0009558A E701                       	dc.b	smpsNoAttack, $01
0009558C E107                       	smpsAlterNote       $07
0009558E E701                       	dc.b	smpsNoAttack, $01
00095590 E101                       	smpsAlterNote       $01
00095592 E701                       	dc.b	smpsNoAttack, $01
00095594 E100                       	smpsAlterNote       $00
00095596 E701                       	dc.b	smpsNoAttack, $01
00095598 E104                       	smpsAlterNote       $04
0009559A E701                       	dc.b	smpsNoAttack, $01
0009559C E10A                       	smpsAlterNote       $0A
0009559E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000955A2 E107                       	smpsAlterNote       $07
000955A4 E701                       	dc.b	smpsNoAttack, $01
000955A6 E101                       	smpsAlterNote       $01
000955A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000955AC E107                       	smpsAlterNote       $07
000955AE E701                       	dc.b	smpsNoAttack, $01
000955B0 E10A                       	smpsAlterNote       $0A
000955B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000955B6 E104                       	smpsAlterNote       $04
000955B8 E701                       	dc.b	smpsNoAttack, $01
000955BA E100                       	smpsAlterNote       $00
000955BC E701                       	dc.b	smpsNoAttack, $01
000955BE E101                       	smpsAlterNote       $01
000955C0 E701                       	dc.b	smpsNoAttack, $01
000955C2 E107                       	smpsAlterNote       $07
000955C4 E701                       	dc.b	smpsNoAttack, $01
000955C6 E10B                       	smpsAlterNote       $0B
000955C8 E701                       	dc.b	smpsNoAttack, $01
000955CA E107                       	smpsAlterNote       $07
000955CC E701                       	dc.b	smpsNoAttack, $01
000955CE E104                       	smpsAlterNote       $04
000955D0 E701                       	dc.b	smpsNoAttack, $01
000955D2 E100                       	smpsAlterNote       $00
000955D4 E701                       	dc.b	smpsNoAttack, $01
000955D6 E101                       	smpsAlterNote       $01
000955D8 8001                       	dc.b	nRst, $01
000955DA E109                       	smpsAlterNote       $09
000955DC C20D                       	dc.b	nF5, $0D
000955DE E106                       	smpsAlterNote       $06
000955E0 E701                       	dc.b	smpsNoAttack, $01
000955E2 E102                       	smpsAlterNote       $02
000955E4 E701                       	dc.b	smpsNoAttack, $01
000955E6 E106                       	smpsAlterNote       $06
000955E8 E701                       	dc.b	smpsNoAttack, $01
000955EA E10C                       	smpsAlterNote       $0C
000955EC E701                       	dc.b	smpsNoAttack, $01
000955EE E10D                       	smpsAlterNote       $0D
000955F0 E701                       	dc.b	smpsNoAttack, $01
000955F2 E109                       	smpsAlterNote       $09
000955F4 E701                       	dc.b	smpsNoAttack, $01
000955F6 E103                       	smpsAlterNote       $03
000955F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000955FC E106                       	smpsAlterNote       $06
000955FE E701                       	dc.b	smpsNoAttack, $01
00095600 E10C                       	smpsAlterNote       $0C
00095602 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095606 E106                       	smpsAlterNote       $06
00095608 E701                       	dc.b	smpsNoAttack, $01
0009560A E103                       	smpsAlterNote       $03
0009560C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095610 E109                       	smpsAlterNote       $09
00095612 E701                       	dc.b	smpsNoAttack, $01
00095614 E10D                       	smpsAlterNote       $0D
00095616 E701                       	dc.b	smpsNoAttack, $01
00095618 E10C                       	smpsAlterNote       $0C
0009561A E701                       	dc.b	smpsNoAttack, $01
0009561C E109                       	smpsAlterNote       $09
0009561E 8001                       	dc.b	nRst, $01
00095620 E108                       	smpsAlterNote       $08
00095622 C10D                       	dc.b	nE5, $0D
00095624 E109                       	smpsAlterNote       $09
00095626 C20A 8001                  	dc.b	nF5, $0A, nRst, $01
0009562A E108                       	smpsAlterNote       $08
0009562C C10D                       	dc.b	nE5, $0D
0009562E E102                       	smpsAlterNote       $02
00095630 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095634 E105                       	smpsAlterNote       $05
00095636 E701                       	dc.b	smpsNoAttack, $01
00095638 E108                       	smpsAlterNote       $08
0009563A 8001                       	dc.b	nRst, $01
0009563C E107                       	smpsAlterNote       $07
0009563E BF0D                       	dc.b	nD5, $0D
00095640 E108                       	smpsAlterNote       $08
00095642 C107                       	dc.b	nE5, $07
00095644 E109                       	smpsAlterNote       $09
00095646 C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
0009564C E10B                       	smpsAlterNote       $0B
0009564E C603                       	dc.b	nA5, $03
00095650 E10C                       	smpsAlterNote       $0C
00095652 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
00095658 E10B                       	smpsAlterNote       $0B
0009565A C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
00095660 E109                       	smpsAlterNote       $09
00095662 D003                       	dc.b	nG6, $03
00095664 E108                       	smpsAlterNote       $08
00095666 CD02 8001                  	dc.b	nE6, $02, nRst, $01
0009566A E10B                       	smpsAlterNote       $0B
0009566C C601 8001                  	dc.b	nA5, $01, nRst, $01
00095670 E108                       	smpsAlterNote       $08
00095672 C102                       	dc.b	nE5, $02
00095676 E10C                       	smpsAlterNote       $0C
00095678 E6FB                       	smpsAlterVol        $FB
0009567A A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
00095686 8001                       	dc.b	nRst, $01
00095688 E10B                       	smpsAlterNote       $0B
0009568A A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
00095692 E107                       	smpsAlterNote       $07
00095694 A706 8001                  	dc.b	nD3, $06, nRst, $01
00095698 E10B                       	smpsAlterNote       $0B
0009569A A203                       	dc.b	nA2, $03
0009569C E109                       	smpsAlterNote       $09
0009569E AA03 8001                  	dc.b	nF3, $03, nRst, $01
000956A2 E108                       	smpsAlterNote       $08
000956A4 A906                       	dc.b	nE3, $06
000956A6 E107                       	smpsAlterNote       $07
000956A8 A703 8001                  	dc.b	nD3, $03, nRst, $01
000956AC E106                       	smpsAlterNote       $06
000956AE A503                       	dc.b	nC3, $03
000956B0 E10C                       	smpsAlterNote       $0C
000956B2 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000956B6 E10B                       	smpsAlterNote       $0B
000956B8 A203 8004                  	dc.b	nA2, $03, nRst, $04
000956BC E11B                       	smpsAlterNote       $1B
000956BE C401                       	dc.b	nG5, $01
000956C0 E1F4                       	smpsAlterNote       $F4
000956C2 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
000956C5 E106                       	smpsAlterNote       $06
000956C7 E701                       	dc.b	smpsNoAttack, $01
000956C9 E10F                       	smpsAlterNote       $0F
000956CB E701                       	dc.b	smpsNoAttack, $01
000956CD E1E4                       	smpsAlterNote       $E4
000956CF E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000956D2 E1F6                       	smpsAlterNote       $F6
000956D4 E701                       	dc.b	smpsNoAttack, $01
000956D6 E108                       	smpsAlterNote       $08
000956D8 E701                       	dc.b	smpsNoAttack, $01
000956DA E10B                       	smpsAlterNote       $0B
000956DC E706                       	dc.b	smpsNoAttack, $06
000956DE E105                       	smpsAlterNote       $05
000956E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000956E4 E108                       	smpsAlterNote       $08
000956E6 E701                       	dc.b	smpsNoAttack, $01
000956E8 E10E                       	smpsAlterNote       $0E
000956EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000956EE E108                       	smpsAlterNote       $08
000956F0 E701                       	dc.b	smpsNoAttack, $01
000956F2 E105                       	smpsAlterNote       $05
000956F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000956F8 E10B                       	smpsAlterNote       $0B
000956FA E701                       	dc.b	smpsNoAttack, $01
000956FC E10F                       	smpsAlterNote       $0F
000956FE E701                       	dc.b	smpsNoAttack, $01
00095700 E10E                       	smpsAlterNote       $0E
00095702 E701                       	dc.b	smpsNoAttack, $01
00095704 E108                       	smpsAlterNote       $08
00095706 E701                       	dc.b	smpsNoAttack, $01
00095708 E104                       	smpsAlterNote       $04
0009570A E701                       	dc.b	smpsNoAttack, $01
0009570C E108                       	smpsAlterNote       $08
0009570E E701                       	dc.b	smpsNoAttack, $01
00095710 E10B                       	smpsAlterNote       $0B
00095712 E701                       	dc.b	smpsNoAttack, $01
00095714 E10F                       	smpsAlterNote       $0F
00095716 E701                       	dc.b	smpsNoAttack, $01
00095718 E10B                       	smpsAlterNote       $0B
0009571A E701                       	dc.b	smpsNoAttack, $01
0009571C E105                       	smpsAlterNote       $05
0009571E E701                       	dc.b	smpsNoAttack, $01
00095720 E104                       	smpsAlterNote       $04
00095722 E701                       	dc.b	smpsNoAttack, $01
00095724 E108                       	smpsAlterNote       $08
00095726 E701                       	dc.b	smpsNoAttack, $01
00095728 E10E                       	smpsAlterNote       $0E
0009572A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009572E E10B                       	smpsAlterNote       $0B
00095730 E701                       	dc.b	smpsNoAttack, $01
00095732 E105                       	smpsAlterNote       $05
00095734 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095738 E10B                       	smpsAlterNote       $0B
0009573A E701                       	dc.b	smpsNoAttack, $01
0009573C E10E                       	smpsAlterNote       $0E
0009573E E701                       	dc.b	smpsNoAttack, $01
00095740 E10F                       	smpsAlterNote       $0F
00095742 8001                       	dc.b	nRst, $01
00095744 E109                       	smpsAlterNote       $09
00095746 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0009574C E108                       	smpsAlterNote       $08
0009574E C101 8001                  	dc.b	nE5, $01, nRst, $01
00095752 E109                       	smpsAlterNote       $09
00095754 C202                       	dc.b	nF5, $02
00095756 E108                       	smpsAlterNote       $08
00095758 C102                       	dc.b	nE5, $02
0009575A E107                       	smpsAlterNote       $07
0009575C BF02 8001                  	dc.b	nD5, $02, nRst, $01
00095760 E108                       	smpsAlterNote       $08
00095762 C101 8001                  	dc.b	nE5, $01, nRst, $01
00095766 E107                       	smpsAlterNote       $07
00095768 BF02                       	dc.b	nD5, $02
0009576A E106                       	smpsAlterNote       $06
0009576C BD02 8001                  	dc.b	nC5, $02, nRst, $01
00095770 E107                       	smpsAlterNote       $07
00095772 BF01 8001                  	dc.b	nD5, $01, nRst, $01
00095776 E106                       	smpsAlterNote       $06
00095778 BD02                       	dc.b	nC5, $02
0009577A E10C                       	smpsAlterNote       $0C
0009577C BB02                       	dc.b	nBb4, $02
0009577E E106                       	smpsAlterNote       $06
00095780 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00095784 E10C                       	smpsAlterNote       $0C
00095786 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0009578A E10B                       	smpsAlterNote       $0B
0009578C BA02                       	dc.b	nA4, $02
0009578E E10C                       	smpsAlterNote       $0C
00095790 BB02                       	dc.b	nBb4, $02
00095792 E10B                       	smpsAlterNote       $0B
00095794 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0009579E E108                       	smpsAlterNote       $08
000957A0 B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
000957A8 E107                       	smpsAlterNote       $07
000957AA BE02                       	dc.b	nCs5, $02
000957AC E10B                       	smpsAlterNote       $0B
000957AE BA02                       	dc.b	nA4, $02
000957B0 E109                       	smpsAlterNote       $09
000957B2 B802 8001                  	dc.b	nG4, $02, nRst, $01
000957B6 E108                       	smpsAlterNote       $08
000957B8 B501 8001                  	dc.b	nE4, $01, nRst, $01
000957BC E10B                       	smpsAlterNote       $0B
000957BE AE02                       	dc.b	nA3, $02
000957C0 E10C                       	smpsAlterNote       $0C
000957C2 A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
000957CE E10B                       	smpsAlterNote       $0B
000957D0 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
000957D8 E107                       	smpsAlterNote       $07
000957DA A706 8001                  	dc.b	nD3, $06, nRst, $01
000957DE E10B                       	smpsAlterNote       $0B
000957E0 A203                       	dc.b	nA2, $03
000957E2 E109                       	smpsAlterNote       $09
000957E4 AA03 8001                  	dc.b	nF3, $03, nRst, $01
000957E8 E108                       	smpsAlterNote       $08
000957EA A906 8001                  	dc.b	nE3, $06, nRst, $01
000957EE E107                       	smpsAlterNote       $07
000957F0 A702 8001                  	dc.b	nD3, $02, nRst, $01
000957F4 E106                       	smpsAlterNote       $06
000957F6 A503                       	dc.b	nC3, $03
000957F8 E10C                       	smpsAlterNote       $0C
000957FA A303 8001                  	dc.b	nBb2, $03, nRst, $01
00095800 E107                       	smpsAlterNote       $07
00095802 B20D                       	dc.b	nCs4, $0D
00095804 E104                       	smpsAlterNote       $04
00095806 E701                       	dc.b	smpsNoAttack, $01
00095808 E100                       	smpsAlterNote       $00
0009580A E701                       	dc.b	smpsNoAttack, $01
0009580C E104                       	smpsAlterNote       $04
0009580E E701                       	dc.b	smpsNoAttack, $01
00095810 E10A                       	smpsAlterNote       $0A
00095812 E701                       	dc.b	smpsNoAttack, $01
00095814 E10B                       	smpsAlterNote       $0B
00095816 E701                       	dc.b	smpsNoAttack, $01
00095818 E107                       	smpsAlterNote       $07
0009581A E701                       	dc.b	smpsNoAttack, $01
0009581C E101                       	smpsAlterNote       $01
0009581E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095822 E104                       	smpsAlterNote       $04
00095824 E701                       	dc.b	smpsNoAttack, $01
00095826 E10A                       	smpsAlterNote       $0A
00095828 E701                       	dc.b	smpsNoAttack, $01
0009582A E10B                       	smpsAlterNote       $0B
0009582C 8001                       	dc.b	nRst, $01
0009582E E107                       	smpsAlterNote       $07
00095830 B30D                       	dc.b	nD4, $0D
00095832 E104                       	smpsAlterNote       $04
00095834 E701                       	dc.b	smpsNoAttack, $01
00095836 E100                       	smpsAlterNote       $00
00095838 E701                       	dc.b	smpsNoAttack, $01
0009583A E104                       	smpsAlterNote       $04
0009583C E701                       	dc.b	smpsNoAttack, $01
0009583E E10A                       	smpsAlterNote       $0A
00095840 E701                       	dc.b	smpsNoAttack, $01
00095842 E10B                       	smpsAlterNote       $0B
00095844 E701                       	dc.b	smpsNoAttack, $01
00095846 E107                       	smpsAlterNote       $07
00095848 E701                       	dc.b	smpsNoAttack, $01
0009584A E101                       	smpsAlterNote       $01
0009584C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095850 E104                       	smpsAlterNote       $04
00095852 E701                       	dc.b	smpsNoAttack, $01
00095854 E10A                       	smpsAlterNote       $0A
00095856 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009585A E104                       	smpsAlterNote       $04
0009585C E701                       	dc.b	smpsNoAttack, $01
0009585E E101                       	smpsAlterNote       $01
00095860 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095864 E107                       	smpsAlterNote       $07
00095866 E701                       	dc.b	smpsNoAttack, $01
00095868 E10B                       	smpsAlterNote       $0B
0009586A E701                       	dc.b	smpsNoAttack, $01
0009586C E10A                       	smpsAlterNote       $0A
0009586E E701                       	dc.b	smpsNoAttack, $01
00095870 E107                       	smpsAlterNote       $07
00095872 8001                       	dc.b	nRst, $01
00095874 E108                       	smpsAlterNote       $08
00095876 B50D                       	dc.b	nE4, $0D
00095878 E102                       	smpsAlterNote       $02
0009587A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009587E E105                       	smpsAlterNote       $05
00095880 E701                       	dc.b	smpsNoAttack, $01
00095882 E10B                       	smpsAlterNote       $0B
00095884 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095888 E105                       	smpsAlterNote       $05
0009588A E701                       	dc.b	smpsNoAttack, $01
0009588C E102                       	smpsAlterNote       $02
0009588E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095892 E108                       	smpsAlterNote       $08
00095894 E701                       	dc.b	smpsNoAttack, $01
00095896 E10C                       	smpsAlterNote       $0C
00095898 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009589C E107                       	smpsAlterNote       $07
0009589E B30D                       	dc.b	nD4, $0D
000958A0 E101                       	smpsAlterNote       $01
000958A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000958A6 E104                       	smpsAlterNote       $04
000958A8 E701                       	dc.b	smpsNoAttack, $01
000958AA E10A                       	smpsAlterNote       $0A
000958AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000958B0 E104                       	smpsAlterNote       $04
000958B2 E701                       	dc.b	smpsNoAttack, $01
000958B4 E101                       	smpsAlterNote       $01
000958B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000958BA E107                       	smpsAlterNote       $07
000958BC E701                       	dc.b	smpsNoAttack, $01
000958BE E10B                       	smpsAlterNote       $0B
000958C0 E701                       	dc.b	smpsNoAttack, $01
000958C2 E10A                       	smpsAlterNote       $0A
000958C4 E701                       	dc.b	smpsNoAttack, $01
000958C6 E104                       	smpsAlterNote       $04
000958C8 E701                       	dc.b	smpsNoAttack, $01
000958CA E100                       	smpsAlterNote       $00
000958CC E701                       	dc.b	smpsNoAttack, $01
000958CE E104                       	smpsAlterNote       $04
000958D0 E701                       	dc.b	smpsNoAttack, $01
000958D2 E107                       	smpsAlterNote       $07
000958D4 E701                       	dc.b	smpsNoAttack, $01
000958D6 E10B                       	smpsAlterNote       $0B
000958D8 E701                       	dc.b	smpsNoAttack, $01
000958DA E107                       	smpsAlterNote       $07
000958DC E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
000958E0 E101                       	smpsAlterNote       $01
000958E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000958E6 E107                       	smpsAlterNote       $07
000958E8 E701                       	dc.b	smpsNoAttack, $01
000958EA E10A                       	smpsAlterNote       $0A
000958EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000958F0 E104                       	smpsAlterNote       $04
000958F2 E701                       	dc.b	smpsNoAttack, $01
000958F4 E100                       	smpsAlterNote       $00
000958F6 E701                       	dc.b	smpsNoAttack, $01
000958F8 E101                       	smpsAlterNote       $01
000958FA E701                       	dc.b	smpsNoAttack, $01
000958FC E107                       	smpsAlterNote       $07
000958FE E701                       	dc.b	smpsNoAttack, $01
00095900 E10B                       	smpsAlterNote       $0B
00095902 E701                       	dc.b	smpsNoAttack, $01
00095904 E107                       	smpsAlterNote       $07
00095906 B30E                       	dc.b	nD4, $0E
00095908 E101                       	smpsAlterNote       $01
0009590A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009590E E107                       	smpsAlterNote       $07
00095910 E701                       	dc.b	smpsNoAttack, $01
00095912 E10A                       	smpsAlterNote       $0A
00095914 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095918 E104                       	smpsAlterNote       $04
0009591A E701                       	dc.b	smpsNoAttack, $01
0009591C E100                       	smpsAlterNote       $00
0009591E E701                       	dc.b	smpsNoAttack, $01
00095920 E101                       	smpsAlterNote       $01
00095922 E701                       	dc.b	smpsNoAttack, $01
00095924 E107                       	smpsAlterNote       $07
00095926 E701                       	dc.b	smpsNoAttack, $01
00095928 E10B                       	smpsAlterNote       $0B
0009592A E701                       	dc.b	smpsNoAttack, $01
0009592C E107                       	smpsAlterNote       $07
0009592E E701                       	dc.b	smpsNoAttack, $01
00095930 E104                       	smpsAlterNote       $04
00095932 E701                       	dc.b	smpsNoAttack, $01
00095934 E100                       	smpsAlterNote       $00
00095936 E701                       	dc.b	smpsNoAttack, $01
00095938 E104                       	smpsAlterNote       $04
0009593A E701                       	dc.b	smpsNoAttack, $01
0009593C E10A                       	smpsAlterNote       $0A
0009593E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095942 E107                       	smpsAlterNote       $07
00095944 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
00095948 E104                       	smpsAlterNote       $04
0009594A E701                       	dc.b	smpsNoAttack, $01
0009594C E100                       	smpsAlterNote       $00
0009594E E701                       	dc.b	smpsNoAttack, $01
00095950 E101                       	smpsAlterNote       $01
00095952 E701                       	dc.b	smpsNoAttack, $01
00095954 E107                       	smpsAlterNote       $07
00095956 E701                       	dc.b	smpsNoAttack, $01
00095958 E10B                       	smpsAlterNote       $0B
0009595A E701                       	dc.b	smpsNoAttack, $01
0009595C E107                       	smpsAlterNote       $07
0009595E E701                       	dc.b	smpsNoAttack, $01
00095960 E104                       	smpsAlterNote       $04
00095962 E701                       	dc.b	smpsNoAttack, $01
00095964 E100                       	smpsAlterNote       $00
00095966 E701                       	dc.b	smpsNoAttack, $01
00095968 E104                       	smpsAlterNote       $04
0009596A E701                       	dc.b	smpsNoAttack, $01
0009596C E10A                       	smpsAlterNote       $0A
0009596E E701                       	dc.b	smpsNoAttack, $01
00095970 E10B                       	smpsAlterNote       $0B
00095972 E701                       	dc.b	smpsNoAttack, $01
00095976 E6FF                       	smpsAlterVol        $FF
00095978 A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
00095984 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
0009598C E109                       	smpsAlterNote       $09
0009598E E601                       	smpsAlterVol        $01
00095990 B60D                       	dc.b	nF4, $0D
00095992 E106                       	smpsAlterNote       $06
00095994 E701                       	dc.b	smpsNoAttack, $01
00095996 E102                       	smpsAlterNote       $02
00095998 E701                       	dc.b	smpsNoAttack, $01
0009599A E106                       	smpsAlterNote       $06
0009599C E701                       	dc.b	smpsNoAttack, $01
0009599E E109                       	smpsAlterNote       $09
000959A0 E701                       	dc.b	smpsNoAttack, $01
000959A2 E10D                       	smpsAlterNote       $0D
000959A4 E701                       	dc.b	smpsNoAttack, $01
000959A6 E109                       	smpsAlterNote       $09
000959A8 E701                       	dc.b	smpsNoAttack, $01
000959AA E103                       	smpsAlterNote       $03
000959AC E701                       	dc.b	smpsNoAttack, $01
000959AE E102                       	smpsAlterNote       $02
000959B0 E701                       	dc.b	smpsNoAttack, $01
000959B2 E106                       	smpsAlterNote       $06
000959B4 E701                       	dc.b	smpsNoAttack, $01
000959B6 E10C                       	smpsAlterNote       $0C
000959B8 E701                       	dc.b	smpsNoAttack, $01
000959BA E10D                       	smpsAlterNote       $0D
000959BC 8001                       	dc.b	nRst, $01
000959BE E109                       	smpsAlterNote       $09
000959C0 B80D                       	dc.b	nG4, $0D
000959C2 E106                       	smpsAlterNote       $06
000959C4 E701                       	dc.b	smpsNoAttack, $01
000959C6 E102                       	smpsAlterNote       $02
000959C8 E701                       	dc.b	smpsNoAttack, $01
000959CA E106                       	smpsAlterNote       $06
000959CC E701                       	dc.b	smpsNoAttack, $01
000959CE E109                       	smpsAlterNote       $09
000959D0 E701                       	dc.b	smpsNoAttack, $01
000959D2 E10D                       	smpsAlterNote       $0D
000959D4 E701                       	dc.b	smpsNoAttack, $01
000959D6 E109                       	smpsAlterNote       $09
000959D8 E701                       	dc.b	smpsNoAttack, $01
000959DA E103                       	smpsAlterNote       $03
000959DC E701                       	dc.b	smpsNoAttack, $01
000959DE E102                       	smpsAlterNote       $02
000959E0 E701                       	dc.b	smpsNoAttack, $01
000959E2 E106                       	smpsAlterNote       $06
000959E4 E701                       	dc.b	smpsNoAttack, $01
000959E6 E10C                       	smpsAlterNote       $0C
000959E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000959EC E106                       	smpsAlterNote       $06
000959EE E701                       	dc.b	smpsNoAttack, $01
000959F0 E103                       	smpsAlterNote       $03
000959F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000959F6 E109                       	smpsAlterNote       $09
000959F8 E701                       	dc.b	smpsNoAttack, $01
000959FA E10D                       	smpsAlterNote       $0D
000959FC E701                       	dc.b	smpsNoAttack, $01
000959FE E10C                       	smpsAlterNote       $0C
00095A00 E701                       	dc.b	smpsNoAttack, $01
00095A02 E109                       	smpsAlterNote       $09
00095A04 8001                       	dc.b	nRst, $01
00095A06 E10B                       	smpsAlterNote       $0B
00095A08 BA0D                       	dc.b	nA4, $0D
00095A0A E105                       	smpsAlterNote       $05
00095A0C E701                       	dc.b	smpsNoAttack, $01
00095A0E E104                       	smpsAlterNote       $04
00095A10 E701                       	dc.b	smpsNoAttack, $01
00095A12 E108                       	smpsAlterNote       $08
00095A14 E701                       	dc.b	smpsNoAttack, $01
00095A16 E10E                       	smpsAlterNote       $0E
00095A18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A1C E10B                       	smpsAlterNote       $0B
00095A1E E701                       	dc.b	smpsNoAttack, $01
00095A20 E105                       	smpsAlterNote       $05
00095A22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A26 E10B                       	smpsAlterNote       $0B
00095A28 E701                       	dc.b	smpsNoAttack, $01
00095A2A E10E                       	smpsAlterNote       $0E
00095A2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A30 E108                       	smpsAlterNote       $08
00095A32 E701                       	dc.b	smpsNoAttack, $01
00095A34 E104                       	smpsAlterNote       $04
00095A36 E701                       	dc.b	smpsNoAttack, $01
00095A38 E105                       	smpsAlterNote       $05
00095A3A E701                       	dc.b	smpsNoAttack, $01
00095A3C E10B                       	smpsAlterNote       $0B
00095A3E E701                       	dc.b	smpsNoAttack, $01
00095A40 E10F                       	smpsAlterNote       $0F
00095A42 E701                       	dc.b	smpsNoAttack, $01
00095A44 E10B                       	smpsAlterNote       $0B
00095A46 E701                       	dc.b	smpsNoAttack, $01
00095A48 E108                       	smpsAlterNote       $08
00095A4A E701                       	dc.b	smpsNoAttack, $01
00095A4C E104                       	smpsAlterNote       $04
00095A4E E701                       	dc.b	smpsNoAttack, $01
00095A50 E108                       	smpsAlterNote       $08
00095A52 E701                       	dc.b	smpsNoAttack, $01
00095A54 E10E                       	smpsAlterNote       $0E
00095A56 E701                       	dc.b	smpsNoAttack, $01
00095A58 E10F                       	smpsAlterNote       $0F
00095A5A E701                       	dc.b	smpsNoAttack, $01
00095A5C E10B                       	smpsAlterNote       $0B
00095A5E E701                       	dc.b	smpsNoAttack, $01
00095A60 E105                       	smpsAlterNote       $05
00095A62 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A66 E108                       	smpsAlterNote       $08
00095A68 E701                       	dc.b	smpsNoAttack, $01
00095A6A E10E                       	smpsAlterNote       $0E
00095A6C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A70 E108                       	smpsAlterNote       $08
00095A72 E701                       	dc.b	smpsNoAttack, $01
00095A74 E105                       	smpsAlterNote       $05
00095A76 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A7A E108                       	smpsAlterNote       $08
00095A7C B50A 8001                  	dc.b	nE4, $0A, nRst, $01
00095A80 E109                       	smpsAlterNote       $09
00095A82 B60D                       	dc.b	nF4, $0D
00095A84 E103                       	smpsAlterNote       $03
00095A86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A8A E106                       	smpsAlterNote       $06
00095A8C E701                       	dc.b	smpsNoAttack, $01
00095A8E E10C                       	smpsAlterNote       $0C
00095A90 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A94 E106                       	smpsAlterNote       $06
00095A96 E701                       	dc.b	smpsNoAttack, $01
00095A98 E103                       	smpsAlterNote       $03
00095A9A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A9E E109                       	smpsAlterNote       $09
00095AA0 E701                       	dc.b	smpsNoAttack, $01
00095AA2 E10D                       	smpsAlterNote       $0D
00095AA4 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095AA8 E109                       	smpsAlterNote       $09
00095AAA B80D                       	dc.b	nG4, $0D
00095AAC E103                       	smpsAlterNote       $03
00095AAE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095AB2 E109                       	smpsAlterNote       $09
00095AB4 E701                       	dc.b	smpsNoAttack, $01
00095AB6 E10C                       	smpsAlterNote       $0C
00095AB8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095ABC E106                       	smpsAlterNote       $06
00095ABE E701                       	dc.b	smpsNoAttack, $01
00095AC0 E102                       	smpsAlterNote       $02
00095AC2 E701                       	dc.b	smpsNoAttack, $01
00095AC4 E103                       	smpsAlterNote       $03
00095AC6 E701                       	dc.b	smpsNoAttack, $01
00095AC8 E109                       	smpsAlterNote       $09
00095ACA E701                       	dc.b	smpsNoAttack, $01
00095ACC E10D                       	smpsAlterNote       $0D
00095ACE E701                       	dc.b	smpsNoAttack, $01
00095AD0 E109                       	smpsAlterNote       $09
00095AD2 E701                       	dc.b	smpsNoAttack, $01
00095AD4 E106                       	smpsAlterNote       $06
00095AD6 E701                       	dc.b	smpsNoAttack, $01
00095AD8 E102                       	smpsAlterNote       $02
00095ADA E701                       	dc.b	smpsNoAttack, $01
00095ADC E106                       	smpsAlterNote       $06
00095ADE E701                       	dc.b	smpsNoAttack, $01
00095AE0 E10C                       	smpsAlterNote       $0C
00095AE2 E701                       	dc.b	smpsNoAttack, $01
00095AE4 E10D                       	smpsAlterNote       $0D
00095AE6 E701                       	dc.b	smpsNoAttack, $01
00095AE8 E109                       	smpsAlterNote       $09
00095AEA E701                       	dc.b	smpsNoAttack, $01
00095AEC E10B                       	smpsAlterNote       $0B
00095AEE BA0D                       	dc.b	nA4, $0D
00095AF0 E108                       	smpsAlterNote       $08
00095AF2 E701                       	dc.b	smpsNoAttack, $01
00095AF4 E105                       	smpsAlterNote       $05
00095AF6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095AFA E10B                       	smpsAlterNote       $0B
00095AFC E701                       	dc.b	smpsNoAttack, $01
00095AFE E10F                       	smpsAlterNote       $0F
00095B00 E701                       	dc.b	smpsNoAttack, $01
00095B02 E10E                       	smpsAlterNote       $0E
00095B04 E701                       	dc.b	smpsNoAttack, $01
00095B06 E108                       	smpsAlterNote       $08
00095B08 E701                       	dc.b	smpsNoAttack, $01
00095B0A E104                       	smpsAlterNote       $04
00095B0C E701                       	dc.b	smpsNoAttack, $01
00095B0E E108                       	smpsAlterNote       $08
00095B10 E701                       	dc.b	smpsNoAttack, $01
00095B12 E10B                       	smpsAlterNote       $0B
00095B14 E701                       	dc.b	smpsNoAttack, $01
00095B16 E10F                       	smpsAlterNote       $0F
00095B18 E701                       	dc.b	smpsNoAttack, $01
00095B1A E10B                       	smpsAlterNote       $0B
00095B1C E701                       	dc.b	smpsNoAttack, $01
00095B1E E105                       	smpsAlterNote       $05
00095B20 E701                       	dc.b	smpsNoAttack, $01
00095B22 E104                       	smpsAlterNote       $04
00095B24 E701                       	dc.b	smpsNoAttack, $01
00095B26 E108                       	smpsAlterNote       $08
00095B28 E701                       	dc.b	smpsNoAttack, $01
00095B2A E10E                       	smpsAlterNote       $0E
00095B2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095B30 E10B                       	smpsAlterNote       $0B
00095B32 E701                       	dc.b	smpsNoAttack, $01
00095B34 E105                       	smpsAlterNote       $05
00095B36 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095B3A E10B                       	smpsAlterNote       $0B
00095B3C E701                       	dc.b	smpsNoAttack, $01
00095B3E E10E                       	smpsAlterNote       $0E
00095B40 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095B44 E108                       	smpsAlterNote       $08
00095B46 E701                       	dc.b	smpsNoAttack, $01
00095B48 E105                       	smpsAlterNote       $05
00095B4A 8001                       	dc.b	nRst, $01
00095B4C E109                       	smpsAlterNote       $09
00095B4E B60A                       	dc.b	nF4, $0A
00095B50 E108                       	smpsAlterNote       $08
00095B52 B507                       	dc.b	nE4, $07
00095B54 E107                       	smpsAlterNote       $07
00095B56 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00095B5A E108                       	smpsAlterNote       $08
00095B5C B503                       	dc.b	nE4, $03
00095B5E E109                       	smpsAlterNote       $09
00095B60 B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
00095B68 E10B                       	smpsAlterNote       $0B
00095B6A BA0D                       	dc.b	nA4, $0D
00095B6C E108                       	smpsAlterNote       $08
00095B6E E701                       	dc.b	smpsNoAttack, $01
00095B70 E104                       	smpsAlterNote       $04
00095B72 E701                       	dc.b	smpsNoAttack, $01
00095B74 E108                       	smpsAlterNote       $08
00095B76 E701                       	dc.b	smpsNoAttack, $01
00095B78 E10B                       	smpsAlterNote       $0B
00095B7A E701                       	dc.b	smpsNoAttack, $01
00095B7C E10F                       	smpsAlterNote       $0F
00095B7E E701                       	dc.b	smpsNoAttack, $01
00095B80 E10B                       	smpsAlterNote       $0B
00095B82 E701                       	dc.b	smpsNoAttack, $01
00095B84 E105                       	smpsAlterNote       $05
00095B86 E701                       	dc.b	smpsNoAttack, $01
00095B88 E104                       	smpsAlterNote       $04
00095B8A E701                       	dc.b	smpsNoAttack, $01
00095B8C E108                       	smpsAlterNote       $08
00095B8E E701                       	dc.b	smpsNoAttack, $01
00095B90 E10E                       	smpsAlterNote       $0E
00095B92 E701                       	dc.b	smpsNoAttack, $01
00095B94 E10F                       	smpsAlterNote       $0F
00095B96 8001                       	dc.b	nRst, $01
00095B98 E109                       	smpsAlterNote       $09
00095B9A C20D                       	dc.b	nF5, $0D
00095B9C E106                       	smpsAlterNote       $06
00095B9E E701                       	dc.b	smpsNoAttack, $01
00095BA0 E102                       	smpsAlterNote       $02
00095BA2 E701                       	dc.b	smpsNoAttack, $01
00095BA4 E106                       	smpsAlterNote       $06
00095BA6 E701                       	dc.b	smpsNoAttack, $01
00095BA8 E109                       	smpsAlterNote       $09
00095BAA E701                       	dc.b	smpsNoAttack, $01
00095BAC E10D                       	smpsAlterNote       $0D
00095BAE E701                       	dc.b	smpsNoAttack, $01
00095BB0 E109                       	smpsAlterNote       $09
00095BB2 E701                       	dc.b	smpsNoAttack, $01
00095BB4 E103                       	smpsAlterNote       $03
00095BB6 E701                       	dc.b	smpsNoAttack, $01
00095BB8 E102                       	smpsAlterNote       $02
00095BBA E701                       	dc.b	smpsNoAttack, $01
00095BBC E106                       	smpsAlterNote       $06
00095BBE E701                       	dc.b	smpsNoAttack, $01
00095BC0 E10C                       	smpsAlterNote       $0C
00095BC2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095BC6 E109                       	smpsAlterNote       $09
00095BC8 E701                       	dc.b	smpsNoAttack, $01
00095BCA E103                       	smpsAlterNote       $03
00095BCC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095BD0 E109                       	smpsAlterNote       $09
00095BD2 E701                       	dc.b	smpsNoAttack, $01
00095BD4 E10C                       	smpsAlterNote       $0C
00095BD6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095BDA E106                       	smpsAlterNote       $06
00095BDC E701                       	dc.b	smpsNoAttack, $01
00095BDE E102                       	smpsAlterNote       $02
00095BE0 E701                       	dc.b	smpsNoAttack, $01
00095BE2 E103                       	smpsAlterNote       $03
00095BE4 E701                       	dc.b	smpsNoAttack, $01
00095BE6 E109                       	smpsAlterNote       $09
00095BE8 E701                       	dc.b	smpsNoAttack, $01
00095BEA E10D                       	smpsAlterNote       $0D
00095BEC E701                       	dc.b	smpsNoAttack, $01
00095BEE E109                       	smpsAlterNote       $09
00095BF0 E701                       	dc.b	smpsNoAttack, $01
00095BF2 E106                       	smpsAlterNote       $06
00095BF4 E701                       	dc.b	smpsNoAttack, $01
00095BF6 E102                       	smpsAlterNote       $02
00095BF8 E701                       	dc.b	smpsNoAttack, $01
00095BFA E106                       	smpsAlterNote       $06
00095BFC E701                       	dc.b	smpsNoAttack, $01
00095BFE E10C                       	smpsAlterNote       $0C
00095C00 E701                       	dc.b	smpsNoAttack, $01
00095C02 E10D                       	smpsAlterNote       $0D
00095C04 E701                       	dc.b	smpsNoAttack, $01
00095C06 E109                       	smpsAlterNote       $09
00095C08 E701                       	dc.b	smpsNoAttack, $01
00095C0A E103                       	smpsAlterNote       $03
00095C0C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095C10 E106                       	smpsAlterNote       $06
00095C12 E701                       	dc.b	smpsNoAttack, $01
00095C14 E10C                       	smpsAlterNote       $0C
00095C16 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095C1A E106                       	smpsAlterNote       $06
00095C1C E701                       	dc.b	smpsNoAttack, $01
00095C1E E103                       	smpsAlterNote       $03
00095C20 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095C24 E109                       	smpsAlterNote       $09
00095C26 E701                       	dc.b	smpsNoAttack, $01
00095C28 E10D                       	smpsAlterNote       $0D
00095C2A E701                       	dc.b	smpsNoAttack, $01
00095C2C E10C                       	smpsAlterNote       $0C
00095C2E E701                       	dc.b	smpsNoAttack, $01
00095C30 E106                       	smpsAlterNote       $06
00095C32 E701                       	dc.b	smpsNoAttack, $01
00095C34 E103                       	smpsAlterNote       $03
00095C36 8001                       	dc.b	nRst, $01
00095C38 E109                       	smpsAlterNote       $09
00095C3A C206 8001                  	dc.b	nF5, $06, nRst, $01
00095C40 E10C                       	smpsAlterNote       $0C
00095C42 E601                       	smpsAlterVol        $01
00095C44 BB0D                       	dc.b	nBb4, $0D
00095C46 E106                       	smpsAlterNote       $06
00095C48 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095C4C E109                       	smpsAlterNote       $09
00095C4E E701                       	dc.b	smpsNoAttack, $01
00095C50 E10F                       	smpsAlterNote       $0F
00095C52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095C56 E109                       	smpsAlterNote       $09
00095C58 E701                       	dc.b	smpsNoAttack, $01
00095C5A E106                       	smpsAlterNote       $06
00095C5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095C60 E10C                       	smpsAlterNote       $0C
00095C62 E701                       	dc.b	smpsNoAttack, $01
00095C64 E110                       	smpsAlterNote       $10
00095C66 E701                       	dc.b	smpsNoAttack, $01
00095C68 E10F                       	smpsAlterNote       $0F
00095C6A E701                       	dc.b	smpsNoAttack, $01
00095C6C E109                       	smpsAlterNote       $09
00095C6E E701                       	dc.b	smpsNoAttack, $01
00095C70 E105                       	smpsAlterNote       $05
00095C72 E701                       	dc.b	smpsNoAttack, $01
00095C74 E106                       	smpsAlterNote       $06
00095C76 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
00095C7A E103                       	smpsAlterNote       $03
00095C7C E701                       	dc.b	smpsNoAttack, $01
00095C7E E1FF                       	smpsAlterNote       $FF
00095C80 E701                       	dc.b	smpsNoAttack, $01
00095C82 E103                       	smpsAlterNote       $03
00095C84 E701                       	dc.b	smpsNoAttack, $01
00095C86 E106                       	smpsAlterNote       $06
00095C88 E701                       	dc.b	smpsNoAttack, $01
00095C8A E10A                       	smpsAlterNote       $0A
00095C8C E701                       	dc.b	smpsNoAttack, $01
00095C8E E106                       	smpsAlterNote       $06
00095C90 E701                       	dc.b	smpsNoAttack, $01
00095C92 E100                       	smpsAlterNote       $00
00095C94 E701                       	dc.b	smpsNoAttack, $01
00095C96 E1FF                       	smpsAlterNote       $FF
00095C98 E701                       	dc.b	smpsNoAttack, $01
00095C9A E103                       	smpsAlterNote       $03
00095C9C E701                       	dc.b	smpsNoAttack, $01
00095C9E E109                       	smpsAlterNote       $09
00095CA0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095CA4 E106                       	smpsAlterNote       $06
00095CA6 E701                       	dc.b	smpsNoAttack, $01
00095CA8 E100                       	smpsAlterNote       $00
00095CAA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095CAE E107                       	smpsAlterNote       $07
00095CB0 BF0E                       	dc.b	nD5, $0E
00095CB2 E101                       	smpsAlterNote       $01
00095CB4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095CB8 E107                       	smpsAlterNote       $07
00095CBA E701                       	dc.b	smpsNoAttack, $01
00095CBC E10A                       	smpsAlterNote       $0A
00095CBE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095CC2 E104                       	smpsAlterNote       $04
00095CC4 E701                       	dc.b	smpsNoAttack, $01
00095CC6 E100                       	smpsAlterNote       $00
00095CC8 E701                       	dc.b	smpsNoAttack, $01
00095CCA E101                       	smpsAlterNote       $01
00095CCC E701                       	dc.b	smpsNoAttack, $01
00095CCE E107                       	smpsAlterNote       $07
00095CD0 E701                       	dc.b	smpsNoAttack, $01
00095CD2 E10B                       	smpsAlterNote       $0B
00095CD4 E701                       	dc.b	smpsNoAttack, $01
00095CD6 E107                       	smpsAlterNote       $07
00095CD8 E701                       	dc.b	smpsNoAttack, $01
00095CDA E104                       	smpsAlterNote       $04
00095CDC E701                       	dc.b	smpsNoAttack, $01
00095CDE E100                       	smpsAlterNote       $00
00095CE0 E701                       	dc.b	smpsNoAttack, $01
00095CE2 E101                       	smpsAlterNote       $01
00095CE4 8001                       	dc.b	nRst, $01
00095CE6 E108                       	smpsAlterNote       $08
00095CE8 C10C                       	dc.b	nE5, $0C
00095CEA E109                       	smpsAlterNote       $09
00095CEC C201 8001                  	dc.b	nF5, $01, nRst, $01
00095CF0 E10A                       	smpsAlterNote       $0A
00095CF2 8001                       	dc.b	nRst, $01
00095CF4 E109                       	smpsAlterNote       $09
00095CF6 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
00095CFA E106                       	smpsAlterNote       $06
00095CFC E701                       	dc.b	smpsNoAttack, $01
00095CFE E102                       	smpsAlterNote       $02
00095D00 E701                       	dc.b	smpsNoAttack, $01
00095D02 E103                       	smpsAlterNote       $03
00095D04 E701                       	dc.b	smpsNoAttack, $01
00095D06 E109                       	smpsAlterNote       $09
00095D08 E701                       	dc.b	smpsNoAttack, $01
00095D0A E10D                       	smpsAlterNote       $0D
00095D0C E701                       	dc.b	smpsNoAttack, $01
00095D0E E109                       	smpsAlterNote       $09
00095D10 E701                       	dc.b	smpsNoAttack, $01
00095D12 E106                       	smpsAlterNote       $06
00095D14 E701                       	dc.b	smpsNoAttack, $01
00095D16 E102                       	smpsAlterNote       $02
00095D18 E701                       	dc.b	smpsNoAttack, $01
00095D1A E106                       	smpsAlterNote       $06
00095D1C E701                       	dc.b	smpsNoAttack, $01
00095D1E E10C                       	smpsAlterNote       $0C
00095D20 E701                       	dc.b	smpsNoAttack, $01
00095D22 E10D                       	smpsAlterNote       $0D
00095D24 E701                       	dc.b	smpsNoAttack, $01
00095D26 E109                       	smpsAlterNote       $09
00095D28 C40D                       	dc.b	nG5, $0D
00095D2A E106                       	smpsAlterNote       $06
00095D2C E701                       	dc.b	smpsNoAttack, $01
00095D2E E102                       	smpsAlterNote       $02
00095D30 E701                       	dc.b	smpsNoAttack, $01
00095D32 E103                       	smpsAlterNote       $03
00095D34 E701                       	dc.b	smpsNoAttack, $01
00095D36 E109                       	smpsAlterNote       $09
00095D38 E701                       	dc.b	smpsNoAttack, $01
00095D3A E108                       	smpsAlterNote       $08
00095D3C C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
00095D48 E109                       	smpsAlterNote       $09
00095D4A C20D                       	dc.b	nF5, $0D
00095D4C E106                       	smpsAlterNote       $06
00095D4E E701                       	dc.b	smpsNoAttack, $01
00095D50 E102                       	smpsAlterNote       $02
00095D52 E701                       	dc.b	smpsNoAttack, $01
00095D54 E106                       	smpsAlterNote       $06
00095D56 E701                       	dc.b	smpsNoAttack, $01
00095D58 E109                       	smpsAlterNote       $09
00095D5A E701                       	dc.b	smpsNoAttack, $01
00095D5C E10D                       	smpsAlterNote       $0D
00095D5E E701                       	dc.b	smpsNoAttack, $01
00095D60 E109                       	smpsAlterNote       $09
00095D62 E701                       	dc.b	smpsNoAttack, $01
00095D64 E103                       	smpsAlterNote       $03
00095D66 E701                       	dc.b	smpsNoAttack, $01
00095D68 E102                       	smpsAlterNote       $02
00095D6A E701                       	dc.b	smpsNoAttack, $01
00095D6C E106                       	smpsAlterNote       $06
00095D6E E701                       	dc.b	smpsNoAttack, $01
00095D70 E10C                       	smpsAlterNote       $0C
00095D72 E701                       	dc.b	smpsNoAttack, $01
00095D74 E10D                       	smpsAlterNote       $0D
00095D76 8001                       	dc.b	nRst, $01
00095D78 E112                       	smpsAlterNote       $12
00095D7A C401                       	dc.b	nG5, $01
00095D7C E1EB                       	smpsAlterNote       $EB
00095D7E E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
00095D81 E1FD                       	smpsAlterNote       $FD
00095D83 E701                       	dc.b	smpsNoAttack, $01
00095D85 E10F                       	smpsAlterNote       $0F
00095D87 E701                       	dc.b	smpsNoAttack, $01
00095D89 E118                       	smpsAlterNote       $18
00095D8B E701                       	dc.b	smpsNoAttack, $01
00095D8D E1ED                       	smpsAlterNote       $ED
00095D8F E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00095D92 E1FF                       	smpsAlterNote       $FF
00095D94 E701                       	dc.b	smpsNoAttack, $01
00095D96 E10B                       	smpsAlterNote       $0B
00095D98 E703                       	dc.b	smpsNoAttack, $03
00095D9A E109                       	smpsAlterNote       $09
00095D9C C407                       	dc.b	nG5, $07
00095D9E E108                       	smpsAlterNote       $08
00095DA0 C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
00095DAC E109                       	smpsAlterNote       $09
00095DAE C20D                       	dc.b	nF5, $0D
00095DB0 E103                       	smpsAlterNote       $03
00095DB2 E701                       	dc.b	smpsNoAttack, $01
00095DB4 E102                       	smpsAlterNote       $02
00095DB6 E701                       	dc.b	smpsNoAttack, $01
00095DB8 E106                       	smpsAlterNote       $06
00095DBA E701                       	dc.b	smpsNoAttack, $01
00095DBC E10C                       	smpsAlterNote       $0C
00095DBE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095DC2 E109                       	smpsAlterNote       $09
00095DC4 E701                       	dc.b	smpsNoAttack, $01
00095DC6 E103                       	smpsAlterNote       $03
00095DC8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095DCC E109                       	smpsAlterNote       $09
00095DCE E701                       	dc.b	smpsNoAttack, $01
00095DD0 E10C                       	smpsAlterNote       $0C
00095DD2 E701                       	dc.b	smpsNoAttack, $01
00095DD4 E10D                       	smpsAlterNote       $0D
00095DD6 8001                       	dc.b	nRst, $01
00095DD8 E10B                       	smpsAlterNote       $0B
00095DDA C609 8001                  	dc.b	nA5, $09, nRst, $01
00095DDE E109                       	smpsAlterNote       $09
00095DE0 B806 8001                  	dc.b	nG4, $06, nRst, $01
00095DE4 E108                       	smpsAlterNote       $08
00095DE6 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00095DF2 8001                       	dc.b	nRst, $01
00095DF4 E109                       	smpsAlterNote       $09
00095DF6 C20D                       	dc.b	nF5, $0D
00095DF8 E103                       	smpsAlterNote       $03
00095DFA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095DFE E106                       	smpsAlterNote       $06
00095E00 E701                       	dc.b	smpsNoAttack, $01
00095E02 E10C                       	smpsAlterNote       $0C
00095E04 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E08 E106                       	smpsAlterNote       $06
00095E0A E701                       	dc.b	smpsNoAttack, $01
00095E0C E103                       	smpsAlterNote       $03
00095E0E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E12 E109                       	smpsAlterNote       $09
00095E14 E701                       	dc.b	smpsNoAttack, $01
00095E16 E10D                       	smpsAlterNote       $0D
00095E18 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095E1E E108                       	smpsAlterNote       $08
00095E20 E6FF                       	smpsAlterVol        $FF
00095E22 A806                       	dc.b	nEb3, $06
00095E24 E10C                       	smpsAlterNote       $0C
00095E26 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00095E2A E108                       	smpsAlterNote       $08
00095E2C A803                       	dc.b	nEb3, $03
00095E2E E109                       	smpsAlterNote       $09
00095E30 AC03 8001                  	dc.b	nG3, $03, nRst, $01
00095E34 E10C                       	smpsAlterNote       $0C
00095E36 AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
00095E40 E109                       	smpsAlterNote       $09
00095E42 E602                       	smpsAlterVol        $02
00095E44 B604                       	dc.b	nF4, $04
00095E46 E602                       	smpsAlterVol        $02
00095E48 F6F1 AA                    	smpsJump            music84_Jump02
00095E4B                            
00095E4B                            ; FM4 Data
00095E4B                            music84_FM4:
00095E4D E040                       	smpsPan             panRight, $00
00095E4F 8003                       	dc.b	nRst, $03
00095E51 E10F                       	smpsAlterNote       $0F
00095E53 C603 8008                  	dc.b	nA5, $03, nRst, $08
00095E57 E10D                       	smpsAlterNote       $0D
00095E59 C403 800A                  	dc.b	nG5, $03, nRst, $0A
00095E5D E10C                       	smpsAlterNote       $0C
00095E5F C103 8004                  	dc.b	nE5, $03, nRst, $04
00095E65 E6FE                       	smpsAlterVol        $FE
00095E67 E110                       	smpsAlterNote       $10
00095E69 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00095E6D E10F                       	smpsAlterNote       $0F
00095E6F C602 8001                  	dc.b	nA5, $02, nRst, $01
00095E73 E10D                       	smpsAlterNote       $0D
00095E75 C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
00095E7E E10C                       	smpsAlterNote       $0C
00095E80 C103                       	dc.b	nE5, $03
00095E82 E10A                       	smpsAlterNote       $0A
00095E84 BD03 8001                  	dc.b	nC5, $03, nRst, $01
00095E8A 03                         	dc.b	$03
00095E8B                            
00095E8B                            music84_Jump01:
00095E8B E10B                       	smpsAlterNote       $0B
00095E8D BF03 8001                  	dc.b	nD5, $03, nRst, $01
00095E91 E10C                       	smpsAlterNote       $0C
00095E93 C102 8001                  	dc.b	nE5, $02, nRst, $01
00095E97 E10D                       	smpsAlterNote       $0D
00095E99 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00095EA3 E10B                       	smpsAlterNote       $0B
00095EA5 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00095EA9 E107                       	smpsAlterNote       $07
00095EAB E701                       	dc.b	smpsNoAttack, $01
00095EAD E103                       	smpsAlterNote       $03
00095EAF E701                       	dc.b	smpsNoAttack, $01
00095EB1 E104                       	smpsAlterNote       $04
00095EB3 E701                       	dc.b	smpsNoAttack, $01
00095EB5 E10A                       	smpsAlterNote       $0A
00095EB7 E701                       	dc.b	smpsNoAttack, $01
00095EB9 E10E                       	smpsAlterNote       $0E
00095EBB E701                       	dc.b	smpsNoAttack, $01
00095EBD E10A                       	smpsAlterNote       $0A
00095EBF E701                       	dc.b	smpsNoAttack, $01
00095EC1 E107                       	smpsAlterNote       $07
00095EC3 E701                       	dc.b	smpsNoAttack, $01
00095EC5 E104                       	smpsAlterNote       $04
00095EC7 8001                       	dc.b	nRst, $01
00095EC9 E110                       	smpsAlterNote       $10
00095ECB C703                       	dc.b	nBb5, $03
00095ECD E10F                       	smpsAlterNote       $0F
00095ECF C603 8001                  	dc.b	nA5, $03, nRst, $01
00095ED3 E10D                       	smpsAlterNote       $0D
00095ED5 C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
00095EDB E10C                       	smpsAlterNote       $0C
00095EDD E701                       	dc.b	smpsNoAttack, $01
00095EDF E108                       	smpsAlterNote       $08
00095EE1 E701                       	dc.b	smpsNoAttack, $01
00095EE3 E10C                       	smpsAlterNote       $0C
00095EE5 E701                       	dc.b	smpsNoAttack, $01
00095EE7 E10F                       	smpsAlterNote       $0F
00095EE9 E701                       	dc.b	smpsNoAttack, $01
00095EEB E113                       	smpsAlterNote       $13
00095EED E701                       	dc.b	smpsNoAttack, $01
00095EEF E10F                       	smpsAlterNote       $0F
00095EF1 E701                       	dc.b	smpsNoAttack, $01
00095EF3 E109                       	smpsAlterNote       $09
00095EF5 E701                       	dc.b	smpsNoAttack, $01
00095EF7 E108                       	smpsAlterNote       $08
00095EF9 E701                       	dc.b	smpsNoAttack, $01
00095EFB E10C                       	smpsAlterNote       $0C
00095EFD E701                       	dc.b	smpsNoAttack, $01
00095EFF E112                       	smpsAlterNote       $12
00095F01 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095F05 E10C                       	smpsAlterNote       $0C
00095F07 E701                       	dc.b	smpsNoAttack, $01
00095F09 E109                       	smpsAlterNote       $09
00095F0B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095F0F E10F                       	smpsAlterNote       $0F
00095F11 E701                       	dc.b	smpsNoAttack, $01
00095F13 E113                       	smpsAlterNote       $13
00095F15 E701                       	dc.b	smpsNoAttack, $01
00095F17 E112                       	smpsAlterNote       $12
00095F19 E701                       	dc.b	smpsNoAttack, $01
00095F1B E10C                       	smpsAlterNote       $0C
00095F1D E701                       	dc.b	smpsNoAttack, $01
00095F1F E108                       	smpsAlterNote       $08
00095F21 E701                       	dc.b	smpsNoAttack, $01
00095F23 E10C                       	smpsAlterNote       $0C
00095F25 E701                       	dc.b	smpsNoAttack, $01
00095F27 E10F                       	smpsAlterNote       $0F
00095F29 E701                       	dc.b	smpsNoAttack, $01
00095F2B E113                       	smpsAlterNote       $13
00095F2D E701                       	dc.b	smpsNoAttack, $01
00095F2F E10F                       	smpsAlterNote       $0F
00095F31 E701                       	dc.b	smpsNoAttack, $01
00095F33 E109                       	smpsAlterNote       $09
00095F35 E701                       	dc.b	smpsNoAttack, $01
00095F37 E108                       	smpsAlterNote       $08
00095F39 E701                       	dc.b	smpsNoAttack, $01
00095F3B E10C                       	smpsAlterNote       $0C
00095F3D E701                       	dc.b	smpsNoAttack, $01
00095F3F E112                       	smpsAlterNote       $12
00095F41 E701                       	dc.b	smpsNoAttack, $01
00095F43 E113                       	smpsAlterNote       $13
00095F45 800F                       	dc.b	nRst, $0F
00095F47 E10B                       	smpsAlterNote       $0B
00095F49 BF03                       	dc.b	nD5, $03
00095F4B E10C                       	smpsAlterNote       $0C
00095F4D C103 8001                  	dc.b	nE5, $03, nRst, $01
00095F51 E10D                       	smpsAlterNote       $0D
00095F53 C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
00095F5B E10B                       	smpsAlterNote       $0B
00095F5D BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
00095F67 E110                       	smpsAlterNote       $10
00095F69 C704                       	dc.b	nBb5, $04
00095F6B E10F                       	smpsAlterNote       $0F
00095F6D C604 8001                  	dc.b	nA5, $04, nRst, $01
00095F71 E10D                       	smpsAlterNote       $0D
00095F73 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00095F79 E109                       	smpsAlterNote       $09
00095F7B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095F7F E10F                       	smpsAlterNote       $0F
00095F81 E701                       	dc.b	smpsNoAttack, $01
00095F83 E112                       	smpsAlterNote       $12
00095F85 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095F89 E10C                       	smpsAlterNote       $0C
00095F8B E701                       	dc.b	smpsNoAttack, $01
00095F8D E108                       	smpsAlterNote       $08
00095F8F E701                       	dc.b	smpsNoAttack, $01
00095F91 E109                       	smpsAlterNote       $09
00095F93 E701                       	dc.b	smpsNoAttack, $01
00095F95 E10F                       	smpsAlterNote       $0F
00095F97 E701                       	dc.b	smpsNoAttack, $01
00095F99 E113                       	smpsAlterNote       $13
00095F9B E701                       	dc.b	smpsNoAttack, $01
00095F9D E10F                       	smpsAlterNote       $0F
00095F9F E701                       	dc.b	smpsNoAttack, $01
00095FA1 E10C                       	smpsAlterNote       $0C
00095FA3 E701                       	dc.b	smpsNoAttack, $01
00095FA5 E108                       	smpsAlterNote       $08
00095FA7 E701                       	dc.b	smpsNoAttack, $01
00095FA9 E10C                       	smpsAlterNote       $0C
00095FAB E701                       	dc.b	smpsNoAttack, $01
00095FAD E112                       	smpsAlterNote       $12
00095FAF E701                       	dc.b	smpsNoAttack, $01
00095FB1 E113                       	smpsAlterNote       $13
00095FB3 E701                       	dc.b	smpsNoAttack, $01
00095FB5 E10F                       	smpsAlterNote       $0F
00095FB7 E701                       	dc.b	smpsNoAttack, $01
00095FB9 E109                       	smpsAlterNote       $09
00095FBB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095FBF E10C                       	smpsAlterNote       $0C
00095FC1 E701                       	dc.b	smpsNoAttack, $01
00095FC3 E112                       	smpsAlterNote       $12
00095FC5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095FC9 E10C                       	smpsAlterNote       $0C
00095FCB E701                       	dc.b	smpsNoAttack, $01
00095FCD E109                       	smpsAlterNote       $09
00095FCF E701                       	dc.b	smpsNoAttack, $01
00095FD1 E10D                       	smpsAlterNote       $0D
00095FD3 C401 8001                  	dc.b	nG5, $01, nRst, $01
00095FD7 E10F                       	smpsAlterNote       $0F
00095FD9 C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
00095FE3 E10D                       	smpsAlterNote       $0D
00095FE5 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00095FEB E10B                       	smpsAlterNote       $0B
00095FED BF0D                       	dc.b	nD5, $0D
00095FEF E108                       	smpsAlterNote       $08
00095FF1 E701                       	dc.b	smpsNoAttack, $01
00095FF3 E104                       	smpsAlterNote       $04
00095FF5 E701                       	dc.b	smpsNoAttack, $01
00095FF7 E108                       	smpsAlterNote       $08
00095FF9 E701                       	dc.b	smpsNoAttack, $01
00095FFB E10B                       	smpsAlterNote       $0B
00095FFD E701                       	dc.b	smpsNoAttack, $01
00095FFF E10F                       	smpsAlterNote       $0F
00096001 E701                       	dc.b	smpsNoAttack, $01
00096003 E10B                       	smpsAlterNote       $0B
00096005 E701                       	dc.b	smpsNoAttack, $01
00096007 E105                       	smpsAlterNote       $05
00096009 E701                       	dc.b	smpsNoAttack, $01
0009600B E104                       	smpsAlterNote       $04
0009600D E701                       	dc.b	smpsNoAttack, $01
0009600F E108                       	smpsAlterNote       $08
00096011 E701                       	dc.b	smpsNoAttack, $01
00096013 E10E                       	smpsAlterNote       $0E
00096015 E701                       	dc.b	smpsNoAttack, $01
00096017 E10F                       	smpsAlterNote       $0F
00096019 8001                       	dc.b	nRst, $01
0009601B E10C                       	smpsAlterNote       $0C
0009601D C101                       	dc.b	nE5, $01
0009601F E10D                       	smpsAlterNote       $0D
00096021 C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
00096027 E10F                       	smpsAlterNote       $0F
00096029 C606 8001                  	dc.b	nA5, $06, nRst, $01
0009602D E10C                       	smpsAlterNote       $0C
0009602F CD06 8001                  	dc.b	nE6, $06, nRst, $01
00096033 E10D                       	smpsAlterNote       $0D
00096035 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00096039 E10C                       	smpsAlterNote       $0C
0009603B CD03                       	dc.b	nE6, $03
0009603D E10A                       	smpsAlterNote       $0A
0009603F C903 8001                  	dc.b	nC6, $03, nRst, $01
00096043 E10D                       	smpsAlterNote       $0D
00096045 C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
0009604D E109                       	smpsAlterNote       $09
0009604F E701                       	dc.b	smpsNoAttack, $01
00096051 E10D                       	smpsAlterNote       $0D
00096053 E701                       	dc.b	smpsNoAttack, $01
00096055 E110                       	smpsAlterNote       $10
00096057 E701                       	dc.b	smpsNoAttack, $01
00096059 E114                       	smpsAlterNote       $14
0009605B E701                       	dc.b	smpsNoAttack, $01
0009605D E110                       	smpsAlterNote       $10
0009605F E701                       	dc.b	smpsNoAttack, $01
00096061 E10A                       	smpsAlterNote       $0A
00096063 E701                       	dc.b	smpsNoAttack, $01
00096065 E109                       	smpsAlterNote       $09
00096067 E701                       	dc.b	smpsNoAttack, $01
00096069 E10D                       	smpsAlterNote       $0D
0009606B E701                       	dc.b	smpsNoAttack, $01
0009606D E113                       	smpsAlterNote       $13
0009606F E701                       	dc.b	smpsNoAttack, $01
00096071 E114                       	smpsAlterNote       $14
00096073 8001                       	dc.b	nRst, $01
00096075 E10F                       	smpsAlterNote       $0F
00096077 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0009607D E10C                       	smpsAlterNote       $0C
0009607F E701                       	dc.b	smpsNoAttack, $01
00096081 E108                       	smpsAlterNote       $08
00096083 E701                       	dc.b	smpsNoAttack, $01
00096085 E10C                       	smpsAlterNote       $0C
00096087 E701                       	dc.b	smpsNoAttack, $01
00096089 E112                       	smpsAlterNote       $12
0009608B E701                       	dc.b	smpsNoAttack, $01
0009608D E113                       	smpsAlterNote       $13
0009608F E701                       	dc.b	smpsNoAttack, $01
00096091 E10F                       	smpsAlterNote       $0F
00096093 E701                       	dc.b	smpsNoAttack, $01
00096095 E109                       	smpsAlterNote       $09
00096097 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009609B E10C                       	smpsAlterNote       $0C
0009609D E701                       	dc.b	smpsNoAttack, $01
0009609F E112                       	smpsAlterNote       $12
000960A1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000960A5 E10C                       	smpsAlterNote       $0C
000960A7 E701                       	dc.b	smpsNoAttack, $01
000960A9 E109                       	smpsAlterNote       $09
000960AB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000960AF E10F                       	smpsAlterNote       $0F
000960B1 E701                       	dc.b	smpsNoAttack, $01
000960B3 E113                       	smpsAlterNote       $13
000960B5 E701                       	dc.b	smpsNoAttack, $01
000960B7 E112                       	smpsAlterNote       $12
000960B9 E701                       	dc.b	smpsNoAttack, $01
000960BB E10C                       	smpsAlterNote       $0C
000960BD E701                       	dc.b	smpsNoAttack, $01
000960BF E108                       	smpsAlterNote       $08
000960C1 E701                       	dc.b	smpsNoAttack, $01
000960C3 E10C                       	smpsAlterNote       $0C
000960C5 E701                       	dc.b	smpsNoAttack, $01
000960C7 E10F                       	smpsAlterNote       $0F
000960C9 E701                       	dc.b	smpsNoAttack, $01
000960CB E113                       	smpsAlterNote       $13
000960CD E701                       	dc.b	smpsNoAttack, $01
000960CF E10F                       	smpsAlterNote       $0F
000960D1 E701                       	dc.b	smpsNoAttack, $01
000960D3 E109                       	smpsAlterNote       $09
000960D5 E701                       	dc.b	smpsNoAttack, $01
000960D7 E108                       	smpsAlterNote       $08
000960D9 E701                       	dc.b	smpsNoAttack, $01
000960DB E10C                       	smpsAlterNote       $0C
000960DD E701                       	dc.b	smpsNoAttack, $01
000960DF E112                       	smpsAlterNote       $12
000960E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000960E5 E10F                       	smpsAlterNote       $0F
000960E7 E701                       	dc.b	smpsNoAttack, $01
000960E9 E109                       	smpsAlterNote       $09
000960EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000960EF E10F                       	smpsAlterNote       $0F
000960F1 E701                       	dc.b	smpsNoAttack, $01
000960F3 E113                       	smpsAlterNote       $13
000960F5 E701                       	dc.b	smpsNoAttack, $01
000960F7 E112                       	smpsAlterNote       $12
000960F9 E701                       	dc.b	smpsNoAttack, $01
000960FB E10C                       	smpsAlterNote       $0C
000960FD E701                       	dc.b	smpsNoAttack, $01
000960FF E108                       	smpsAlterNote       $08
00096101 E701                       	dc.b	smpsNoAttack, $01
00096103 E10C                       	smpsAlterNote       $0C
00096105 E701                       	dc.b	smpsNoAttack, $01
00096107 E10F                       	smpsAlterNote       $0F
00096109 E701                       	dc.b	smpsNoAttack, $01
0009610B E113                       	smpsAlterNote       $13
0009610D E701                       	dc.b	smpsNoAttack, $01
0009610F E10F                       	smpsAlterNote       $0F
00096111 E701                       	dc.b	smpsNoAttack, $01
00096113 E109                       	smpsAlterNote       $09
00096115 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096119 E10F                       	smpsAlterNote       $0F
0009611B C60D                       	dc.b	nA5, $0D
0009611D E109                       	smpsAlterNote       $09
0009611F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096123 E10C                       	smpsAlterNote       $0C
00096125 E701                       	dc.b	smpsNoAttack, $01
00096127 E112                       	smpsAlterNote       $12
00096129 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009612D E10C                       	smpsAlterNote       $0C
0009612F E701                       	dc.b	smpsNoAttack, $01
00096131 E109                       	smpsAlterNote       $09
00096133 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096137 E10F                       	smpsAlterNote       $0F
00096139 E701                       	dc.b	smpsNoAttack, $01
0009613B E113                       	smpsAlterNote       $13
0009613D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096143 E10D                       	smpsAlterNote       $0D
00096145 C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
0009614D E10C                       	smpsAlterNote       $0C
0009614F C103 800E                  	dc.b	nE5, $03, nRst, $0E
00096155 E6FF                       	smpsAlterVol        $FF
00096157 E10B                       	smpsAlterNote       $0B
00096159 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0009615D E10C                       	smpsAlterNote       $0C
0009615F C103                       	dc.b	nE5, $03
00096161 E10D                       	smpsAlterNote       $0D
00096163 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0009616D E10B                       	smpsAlterNote       $0B
0009616F BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00096173 E107                       	smpsAlterNote       $07
00096175 E701                       	dc.b	smpsNoAttack, $01
00096177 E104                       	smpsAlterNote       $04
00096179 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009617D E10A                       	smpsAlterNote       $0A
0009617F E701                       	dc.b	smpsNoAttack, $01
00096181 E10D                       	smpsAlterNote       $0D
00096183 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096187 E107                       	smpsAlterNote       $07
00096189 E701                       	dc.b	smpsNoAttack, $01
0009618B E104                       	smpsAlterNote       $04
0009618D 8001                       	dc.b	nRst, $01
0009618F E110                       	smpsAlterNote       $10
00096191 C703                       	dc.b	nBb5, $03
00096193 E10F                       	smpsAlterNote       $0F
00096195 C603 8001                  	dc.b	nA5, $03, nRst, $01
00096199 E10D                       	smpsAlterNote       $0D
0009619B C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0009619F E10C                       	smpsAlterNote       $0C
000961A1 E701                       	dc.b	smpsNoAttack, $01
000961A3 E108                       	smpsAlterNote       $08
000961A5 E701                       	dc.b	smpsNoAttack, $01
000961A7 E109                       	smpsAlterNote       $09
000961A9 E701                       	dc.b	smpsNoAttack, $01
000961AB E10F                       	smpsAlterNote       $0F
000961AD E701                       	dc.b	smpsNoAttack, $01
000961AF E113                       	smpsAlterNote       $13
000961B1 E701                       	dc.b	smpsNoAttack, $01
000961B3 E10F                       	smpsAlterNote       $0F
000961B5 E701                       	dc.b	smpsNoAttack, $01
000961B7 E10C                       	smpsAlterNote       $0C
000961B9 E701                       	dc.b	smpsNoAttack, $01
000961BB E108                       	smpsAlterNote       $08
000961BD E701                       	dc.b	smpsNoAttack, $01
000961BF E10C                       	smpsAlterNote       $0C
000961C1 E701                       	dc.b	smpsNoAttack, $01
000961C3 E112                       	smpsAlterNote       $12
000961C5 E701                       	dc.b	smpsNoAttack, $01
000961C7 E113                       	smpsAlterNote       $13
000961C9 E701                       	dc.b	smpsNoAttack, $01
000961CB E10F                       	smpsAlterNote       $0F
000961CD E701                       	dc.b	smpsNoAttack, $01
000961CF E109                       	smpsAlterNote       $09
000961D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000961D5 E10C                       	smpsAlterNote       $0C
000961D7 E701                       	dc.b	smpsNoAttack, $01
000961D9 E112                       	smpsAlterNote       $12
000961DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000961DF E10C                       	smpsAlterNote       $0C
000961E1 E701                       	dc.b	smpsNoAttack, $01
000961E3 E109                       	smpsAlterNote       $09
000961E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000961E9 E10F                       	smpsAlterNote       $0F
000961EB E701                       	dc.b	smpsNoAttack, $01
000961ED E113                       	smpsAlterNote       $13
000961EF E701                       	dc.b	smpsNoAttack, $01
000961F1 E112                       	smpsAlterNote       $12
000961F3 E701                       	dc.b	smpsNoAttack, $01
000961F5 E10C                       	smpsAlterNote       $0C
000961F7 E701                       	dc.b	smpsNoAttack, $01
000961F9 E108                       	smpsAlterNote       $08
000961FB E701                       	dc.b	smpsNoAttack, $01
000961FD E10C                       	smpsAlterNote       $0C
000961FF E701                       	dc.b	smpsNoAttack, $01
00096201 E10F                       	smpsAlterNote       $0F
00096203 E701                       	dc.b	smpsNoAttack, $01
00096205 E113                       	smpsAlterNote       $13
00096207 E701                       	dc.b	smpsNoAttack, $01
00096209 E10F                       	smpsAlterNote       $0F
0009620B BA03 8001                  	dc.b	nA4, $03, nRst, $01
0009620F E110                       	smpsAlterNote       $10
00096211 BB03                       	dc.b	nBb4, $03
00096213 E10F                       	smpsAlterNote       $0F
00096215 BA06 8001                  	dc.b	nA4, $06, nRst, $01
00096219 E10B                       	smpsAlterNote       $0B
0009621B BF03                       	dc.b	nD5, $03
0009621D E10C                       	smpsAlterNote       $0C
0009621F C103 8001                  	dc.b	nE5, $03, nRst, $01
00096223 E10D                       	smpsAlterNote       $0D
00096225 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0009622F E10B                       	smpsAlterNote       $0B
00096231 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0009623D E110                       	smpsAlterNote       $10
0009623F C704 8001                  	dc.b	nBb5, $04, nRst, $01
00096243 E10F                       	smpsAlterNote       $0F
00096245 C604                       	dc.b	nA5, $04
00096247 E10D                       	smpsAlterNote       $0D
00096249 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0009624F E109                       	smpsAlterNote       $09
00096251 E701                       	dc.b	smpsNoAttack, $01
00096253 E108                       	smpsAlterNote       $08
00096255 E701                       	dc.b	smpsNoAttack, $01
00096257 E10C                       	smpsAlterNote       $0C
00096259 E701                       	dc.b	smpsNoAttack, $01
0009625B E112                       	smpsAlterNote       $12
0009625D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096261 E10F                       	smpsAlterNote       $0F
00096263 E701                       	dc.b	smpsNoAttack, $01
00096265 E109                       	smpsAlterNote       $09
00096267 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009626B E10F                       	smpsAlterNote       $0F
0009626D E701                       	dc.b	smpsNoAttack, $01
0009626F E112                       	smpsAlterNote       $12
00096271 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096275 E10C                       	smpsAlterNote       $0C
00096277 E701                       	dc.b	smpsNoAttack, $01
00096279 E108                       	smpsAlterNote       $08
0009627B E701                       	dc.b	smpsNoAttack, $01
0009627D E109                       	smpsAlterNote       $09
0009627F E701                       	dc.b	smpsNoAttack, $01
00096281 E10F                       	smpsAlterNote       $0F
00096283 E701                       	dc.b	smpsNoAttack, $01
00096285 E113                       	smpsAlterNote       $13
00096287 E701                       	dc.b	smpsNoAttack, $01
00096289 E10F                       	smpsAlterNote       $0F
0009628B E701                       	dc.b	smpsNoAttack, $01
0009628D E10C                       	smpsAlterNote       $0C
0009628F E701                       	dc.b	smpsNoAttack, $01
00096291 E108                       	smpsAlterNote       $08
00096293 E701                       	dc.b	smpsNoAttack, $01
00096295 E10C                       	smpsAlterNote       $0C
00096297 E701                       	dc.b	smpsNoAttack, $01
00096299 E112                       	smpsAlterNote       $12
0009629B E701                       	dc.b	smpsNoAttack, $01
0009629D E113                       	smpsAlterNote       $13
0009629F E701                       	dc.b	smpsNoAttack, $01
000962A1 E10F                       	smpsAlterNote       $0F
000962A3 E701                       	dc.b	smpsNoAttack, $01
000962A5 E109                       	smpsAlterNote       $09
000962A7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000962AB E10C                       	smpsAlterNote       $0C
000962AD E701                       	dc.b	smpsNoAttack, $01
000962AF E112                       	smpsAlterNote       $12
000962B1 E701                       	dc.b	smpsNoAttack, $01
000962B3 E113                       	smpsAlterNote       $13
000962B5 8001                       	dc.b	nRst, $01
000962B7 E10F                       	smpsAlterNote       $0F
000962B9 C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
000962C5 C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
000962CD E10D                       	smpsAlterNote       $0D
000962CF C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000962D5 E10B                       	smpsAlterNote       $0B
000962D7 BF0D                       	dc.b	nD5, $0D
000962D9 E108                       	smpsAlterNote       $08
000962DB E701                       	dc.b	smpsNoAttack, $01
000962DD E104                       	smpsAlterNote       $04
000962DF E701                       	dc.b	smpsNoAttack, $01
000962E1 E105                       	smpsAlterNote       $05
000962E3 E701                       	dc.b	smpsNoAttack, $01
000962E5 E10B                       	smpsAlterNote       $0B
000962E7 E701                       	dc.b	smpsNoAttack, $01
000962E9 E10F                       	smpsAlterNote       $0F
000962EB E701                       	dc.b	smpsNoAttack, $01
000962ED E10B                       	smpsAlterNote       $0B
000962EF E701                       	dc.b	smpsNoAttack, $01
000962F1 E108                       	smpsAlterNote       $08
000962F3 E701                       	dc.b	smpsNoAttack, $01
000962F5 E104                       	smpsAlterNote       $04
000962F7 E701                       	dc.b	smpsNoAttack, $01
000962F9 E108                       	smpsAlterNote       $08
000962FB E701                       	dc.b	smpsNoAttack, $01
000962FD E10E                       	smpsAlterNote       $0E
000962FF E701                       	dc.b	smpsNoAttack, $01
00096301 E10F                       	smpsAlterNote       $0F
00096303 E701                       	dc.b	smpsNoAttack, $01
00096305 E10C                       	smpsAlterNote       $0C
00096307 C101                       	dc.b	nE5, $01
00096309 E10D                       	smpsAlterNote       $0D
0009630B C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
00096313 E10F                       	smpsAlterNote       $0F
00096315 C607                       	dc.b	nA5, $07
00096317 E10C                       	smpsAlterNote       $0C
00096319 CD07                       	dc.b	nE6, $07
0009631B E10D                       	smpsAlterNote       $0D
0009631D CE06 8001                  	dc.b	nF6, $06, nRst, $01
00096321 E10C                       	smpsAlterNote       $0C
00096323 CD03                       	dc.b	nE6, $03
00096325 E10A                       	smpsAlterNote       $0A
00096327 C903 8001                  	dc.b	nC6, $03, nRst, $01
0009632B E10D                       	smpsAlterNote       $0D
0009632D C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
00096333 E10A                       	smpsAlterNote       $0A
00096335 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096339 E110                       	smpsAlterNote       $10
0009633B E701                       	dc.b	smpsNoAttack, $01
0009633D E114                       	smpsAlterNote       $14
0009633F E701                       	dc.b	smpsNoAttack, $01
00096341 E113                       	smpsAlterNote       $13
00096343 E701                       	dc.b	smpsNoAttack, $01
00096345 E10D                       	smpsAlterNote       $0D
00096347 E701                       	dc.b	smpsNoAttack, $01
00096349 E109                       	smpsAlterNote       $09
0009634B E701                       	dc.b	smpsNoAttack, $01
0009634D E10D                       	smpsAlterNote       $0D
0009634F E701                       	dc.b	smpsNoAttack, $01
00096351 E110                       	smpsAlterNote       $10
00096353 E701                       	dc.b	smpsNoAttack, $01
00096355 E114                       	smpsAlterNote       $14
00096357 E701                       	dc.b	smpsNoAttack, $01
00096359 E10F                       	smpsAlterNote       $0F
0009635B C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
0009635F E10C                       	smpsAlterNote       $0C
00096361 E701                       	dc.b	smpsNoAttack, $01
00096363 E108                       	smpsAlterNote       $08
00096365 E701                       	dc.b	smpsNoAttack, $01
00096367 E10C                       	smpsAlterNote       $0C
00096369 E701                       	dc.b	smpsNoAttack, $01
0009636B E10F                       	smpsAlterNote       $0F
0009636D E701                       	dc.b	smpsNoAttack, $01
0009636F E113                       	smpsAlterNote       $13
00096371 E701                       	dc.b	smpsNoAttack, $01
00096373 E10F                       	smpsAlterNote       $0F
00096375 E701                       	dc.b	smpsNoAttack, $01
00096377 E109                       	smpsAlterNote       $09
00096379 E701                       	dc.b	smpsNoAttack, $01
0009637B E108                       	smpsAlterNote       $08
0009637D E701                       	dc.b	smpsNoAttack, $01
0009637F E10C                       	smpsAlterNote       $0C
00096381 E701                       	dc.b	smpsNoAttack, $01
00096383 E112                       	smpsAlterNote       $12
00096385 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096389 E10F                       	smpsAlterNote       $0F
0009638B E701                       	dc.b	smpsNoAttack, $01
0009638D E109                       	smpsAlterNote       $09
0009638F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096393 E10F                       	smpsAlterNote       $0F
00096395 E701                       	dc.b	smpsNoAttack, $01
00096397 E112                       	smpsAlterNote       $12
00096399 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009639D E10C                       	smpsAlterNote       $0C
0009639F E701                       	dc.b	smpsNoAttack, $01
000963A1 E108                       	smpsAlterNote       $08
000963A3 E701                       	dc.b	smpsNoAttack, $01
000963A5 E109                       	smpsAlterNote       $09
000963A7 E701                       	dc.b	smpsNoAttack, $01
000963A9 E10F                       	smpsAlterNote       $0F
000963AB E701                       	dc.b	smpsNoAttack, $01
000963AD E113                       	smpsAlterNote       $13
000963AF E701                       	dc.b	smpsNoAttack, $01
000963B1 E10F                       	smpsAlterNote       $0F
000963B3 E701                       	dc.b	smpsNoAttack, $01
000963B5 E10C                       	smpsAlterNote       $0C
000963B7 E701                       	dc.b	smpsNoAttack, $01
000963B9 E108                       	smpsAlterNote       $08
000963BB E701                       	dc.b	smpsNoAttack, $01
000963BD E10C                       	smpsAlterNote       $0C
000963BF E701                       	dc.b	smpsNoAttack, $01
000963C1 E112                       	smpsAlterNote       $12
000963C3 E701                       	dc.b	smpsNoAttack, $01
000963C5 E113                       	smpsAlterNote       $13
000963C7 E701                       	dc.b	smpsNoAttack, $01
000963C9 E10F                       	smpsAlterNote       $0F
000963CB E701                       	dc.b	smpsNoAttack, $01
000963CD E109                       	smpsAlterNote       $09
000963CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000963D3 E10C                       	smpsAlterNote       $0C
000963D5 E701                       	dc.b	smpsNoAttack, $01
000963D7 E112                       	smpsAlterNote       $12
000963D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000963DD E10C                       	smpsAlterNote       $0C
000963DF E701                       	dc.b	smpsNoAttack, $01
000963E1 E109                       	smpsAlterNote       $09
000963E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000963E7 E10F                       	smpsAlterNote       $0F
000963E9 E701                       	dc.b	smpsNoAttack, $01
000963EB E113                       	smpsAlterNote       $13
000963ED E701                       	dc.b	smpsNoAttack, $01
000963EF E112                       	smpsAlterNote       $12
000963F1 E701                       	dc.b	smpsNoAttack, $01
000963F3 E10C                       	smpsAlterNote       $0C
000963F5 E701                       	dc.b	smpsNoAttack, $01
000963F7 E109                       	smpsAlterNote       $09
000963F9 8001                       	dc.b	nRst, $01
000963FB E10F                       	smpsAlterNote       $0F
000963FD C60D                       	dc.b	nA5, $0D
000963FF E10C                       	smpsAlterNote       $0C
00096401 E701                       	dc.b	smpsNoAttack, $01
00096403 E108                       	smpsAlterNote       $08
00096405 E701                       	dc.b	smpsNoAttack, $01
00096407 E10C                       	smpsAlterNote       $0C
00096409 E701                       	dc.b	smpsNoAttack, $01
0009640B E112                       	smpsAlterNote       $12
0009640D E701                       	dc.b	smpsNoAttack, $01
0009640F E113                       	smpsAlterNote       $13
00096411 E701                       	dc.b	smpsNoAttack, $01
00096413 E10F                       	smpsAlterNote       $0F
00096415 E701                       	dc.b	smpsNoAttack, $01
00096417 E109                       	smpsAlterNote       $09
00096419 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009641D E10C                       	smpsAlterNote       $0C
0009641F E701                       	dc.b	smpsNoAttack, $01
00096421 E112                       	smpsAlterNote       $12
00096423 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096427 E10C                       	smpsAlterNote       $0C
00096429 E701                       	dc.b	smpsNoAttack, $01
0009642B E109                       	smpsAlterNote       $09
0009642D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096431 E10F                       	smpsAlterNote       $0F
00096433 E701                       	dc.b	smpsNoAttack, $01
00096435 E113                       	smpsAlterNote       $13
00096437 E701                       	dc.b	smpsNoAttack, $01
00096439 E112                       	smpsAlterNote       $12
0009643B E701                       	dc.b	smpsNoAttack, $01
0009643D E10C                       	smpsAlterNote       $0C
0009643F E701                       	dc.b	smpsNoAttack, $01
00096441 E108                       	smpsAlterNote       $08
00096443 E701                       	dc.b	smpsNoAttack, $01
00096445 E10C                       	smpsAlterNote       $0C
00096447 E701                       	dc.b	smpsNoAttack, $01
00096449 E10F                       	smpsAlterNote       $0F
0009644B E701                       	dc.b	smpsNoAttack, $01
0009644D E113                       	smpsAlterNote       $13
0009644F E701                       	dc.b	smpsNoAttack, $01
00096451 E10F                       	smpsAlterNote       $0F
00096453 E701                       	dc.b	smpsNoAttack, $01
00096455 E109                       	smpsAlterNote       $09
00096457 E701                       	dc.b	smpsNoAttack, $01
00096459 E108                       	smpsAlterNote       $08
0009645B E701                       	dc.b	smpsNoAttack, $01
0009645D E10C                       	smpsAlterNote       $0C
0009645F E701                       	dc.b	smpsNoAttack, $01
00096461 E112                       	smpsAlterNote       $12
00096463 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096467 E10F                       	smpsAlterNote       $0F
00096469 E701                       	dc.b	smpsNoAttack, $01
0009646B E109                       	smpsAlterNote       $09
0009646D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096471 E10F                       	smpsAlterNote       $0F
00096473 E701                       	dc.b	smpsNoAttack, $01
00096475 E112                       	smpsAlterNote       $12
00096477 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009647B E10C                       	smpsAlterNote       $0C
0009647D E701                       	dc.b	smpsNoAttack, $01
0009647F E108                       	smpsAlterNote       $08
00096481 E701                       	dc.b	smpsNoAttack, $01
00096483 E10C                       	smpsAlterNote       $0C
00096485 E701                       	dc.b	smpsNoAttack, $01
00096487 E10F                       	smpsAlterNote       $0F
00096489 E701                       	dc.b	smpsNoAttack, $01
0009648B E113                       	smpsAlterNote       $13
0009648D E701                       	dc.b	smpsNoAttack, $01
0009648F E10F                       	smpsAlterNote       $0F
00096491 E701                       	dc.b	smpsNoAttack, $01
00096493 E109                       	smpsAlterNote       $09
00096495 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009649B E601                       	smpsAlterVol        $01
0009649D E10F                       	smpsAlterNote       $0F
0009649F C604                       	dc.b	nA5, $04
000964A1 E10D                       	smpsAlterNote       $0D
000964A3 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000964A9 E10B                       	smpsAlterNote       $0B
000964AB BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
000964B3 E10F                       	smpsAlterNote       $0F
000964B5 C604 8001                  	dc.b	nA5, $04, nRst, $01
000964B9 E10D                       	smpsAlterNote       $0D
000964BB C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
000964C1 E10C                       	smpsAlterNote       $0C
000964C3 C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
000964C9 E10A                       	smpsAlterNote       $0A
000964CB C904 8001                  	dc.b	nC6, $04, nRst, $01
000964CF E110                       	smpsAlterNote       $10
000964D1 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000964D5 E10F                       	smpsAlterNote       $0F
000964D7 C604                       	dc.b	nA5, $04
000964D9 E10D                       	smpsAlterNote       $0D
000964DB C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
000964E7 E109                       	smpsAlterNote       $09
000964E9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000964ED E10F                       	smpsAlterNote       $0F
000964EF E701                       	dc.b	smpsNoAttack, $01
000964F1 E112                       	smpsAlterNote       $12
000964F3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000964F7 E10C                       	smpsAlterNote       $0C
000964F9 E701                       	dc.b	smpsNoAttack, $01
000964FB E108                       	smpsAlterNote       $08
000964FD E701                       	dc.b	smpsNoAttack, $01
000964FF E10C                       	smpsAlterNote       $0C
00096501 E701                       	dc.b	smpsNoAttack, $01
00096503 E10F                       	smpsAlterNote       $0F
00096505 E701                       	dc.b	smpsNoAttack, $01
00096507 E113                       	smpsAlterNote       $13
00096509 E701                       	dc.b	smpsNoAttack, $01
0009650B E10D                       	smpsAlterNote       $0D
0009650D C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00096513 E10C                       	smpsAlterNote       $0C
00096515 C10D                       	dc.b	nE5, $0D
00096517 E109                       	smpsAlterNote       $09
00096519 E701                       	dc.b	smpsNoAttack, $01
0009651B E105                       	smpsAlterNote       $05
0009651D E701                       	dc.b	smpsNoAttack, $01
0009651F E106                       	smpsAlterNote       $06
00096521 E701                       	dc.b	smpsNoAttack, $01
00096523 E10C                       	smpsAlterNote       $0C
00096525 E701                       	dc.b	smpsNoAttack, $01
00096527 E110                       	smpsAlterNote       $10
00096529 E701                       	dc.b	smpsNoAttack, $01
0009652B E10C                       	smpsAlterNote       $0C
0009652D E701                       	dc.b	smpsNoAttack, $01
0009652F E109                       	smpsAlterNote       $09
00096531 E701                       	dc.b	smpsNoAttack, $01
00096533 E105                       	smpsAlterNote       $05
00096535 E701                       	dc.b	smpsNoAttack, $01
00096537 E109                       	smpsAlterNote       $09
00096539 E701                       	dc.b	smpsNoAttack, $01
0009653B E10F                       	smpsAlterNote       $0F
0009653D E701                       	dc.b	smpsNoAttack, $01
0009653F E110                       	smpsAlterNote       $10
00096541 E701                       	dc.b	smpsNoAttack, $01
00096543 E10C                       	smpsAlterNote       $0C
00096545 E701                       	dc.b	smpsNoAttack, $01
00096547 E106                       	smpsAlterNote       $06
00096549 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009654D E109                       	smpsAlterNote       $09
0009654F E701                       	dc.b	smpsNoAttack, $01
00096551 E10F                       	smpsAlterNote       $0F
00096553 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096557 E109                       	smpsAlterNote       $09
00096559 E701                       	dc.b	smpsNoAttack, $01
0009655B E106                       	smpsAlterNote       $06
0009655D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096561 E10C                       	smpsAlterNote       $0C
00096563 E701                       	dc.b	smpsNoAttack, $01
00096565 E110                       	smpsAlterNote       $10
00096567 E701                       	dc.b	smpsNoAttack, $01
00096569 E10F                       	smpsAlterNote       $0F
0009656B E701                       	dc.b	smpsNoAttack, $01
0009656D E109                       	smpsAlterNote       $09
0009656F E701                       	dc.b	smpsNoAttack, $01
00096571 E105                       	smpsAlterNote       $05
00096573 E701                       	dc.b	smpsNoAttack, $01
00096575 E109                       	smpsAlterNote       $09
00096577 E701                       	dc.b	smpsNoAttack, $01
00096579 E10C                       	smpsAlterNote       $0C
0009657B E701                       	dc.b	smpsNoAttack, $01
0009657D E110                       	smpsAlterNote       $10
0009657F E701                       	dc.b	smpsNoAttack, $01
00096581 E10C                       	smpsAlterNote       $0C
00096583 E701                       	dc.b	smpsNoAttack, $01
00096585 E106                       	smpsAlterNote       $06
00096587 E701                       	dc.b	smpsNoAttack, $01
00096589 E105                       	smpsAlterNote       $05
0009658B E701                       	dc.b	smpsNoAttack, $01
0009658D E109                       	smpsAlterNote       $09
0009658F E701                       	dc.b	smpsNoAttack, $01
00096591 E10F                       	smpsAlterNote       $0F
00096593 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096597 E10C                       	smpsAlterNote       $0C
00096599 E701                       	dc.b	smpsNoAttack, $01
0009659B E106                       	smpsAlterNote       $06
0009659D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000965A1 E10C                       	smpsAlterNote       $0C
000965A3 E701                       	dc.b	smpsNoAttack, $01
000965A5 E10F                       	smpsAlterNote       $0F
000965A7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000965AB E109                       	smpsAlterNote       $09
000965AD E701                       	dc.b	smpsNoAttack, $01
000965AF E105                       	smpsAlterNote       $05
000965B1 E701                       	dc.b	smpsNoAttack, $01
000965B3 E106                       	smpsAlterNote       $06
000965B5 E701                       	dc.b	smpsNoAttack, $01
000965B7 E10C                       	smpsAlterNote       $0C
000965B9 E701                       	dc.b	smpsNoAttack, $01
000965BB E110                       	smpsAlterNote       $10
000965BD E701                       	dc.b	smpsNoAttack, $01
000965BF E10C                       	smpsAlterNote       $0C
000965C1 E701                       	dc.b	smpsNoAttack, $01
000965C3 E109                       	smpsAlterNote       $09
000965C5 E701                       	dc.b	smpsNoAttack, $01
000965C7 E105                       	smpsAlterNote       $05
000965C9 E701                       	dc.b	smpsNoAttack, $01
000965CB E109                       	smpsAlterNote       $09
000965CD E701                       	dc.b	smpsNoAttack, $01
000965CF E10F                       	smpsAlterNote       $0F
000965D1 E701                       	dc.b	smpsNoAttack, $01
000965D3 E110                       	smpsAlterNote       $10
000965D5 E701                       	dc.b	smpsNoAttack, $01
000965D7 E10C                       	smpsAlterNote       $0C
000965D9 E701                       	dc.b	smpsNoAttack, $01
000965DB E106                       	smpsAlterNote       $06
000965DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000965E1 E109                       	smpsAlterNote       $09
000965E3 E701                       	dc.b	smpsNoAttack, $01
000965E5 E10F                       	smpsAlterNote       $0F
000965E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000965EB E109                       	smpsAlterNote       $09
000965ED E701                       	dc.b	smpsNoAttack, $01
000965EF E106                       	smpsAlterNote       $06
000965F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000965F5 E10C                       	smpsAlterNote       $0C
000965F7 E701                       	dc.b	smpsNoAttack, $01
000965F9 E110                       	smpsAlterNote       $10
000965FB E701                       	dc.b	smpsNoAttack, $01
000965FD E10F                       	smpsAlterNote       $0F
000965FF E701                       	dc.b	smpsNoAttack, $01
00096601 E109                       	smpsAlterNote       $09
00096603 E701                       	dc.b	smpsNoAttack, $01
00096605 E105                       	smpsAlterNote       $05
00096607 E701                       	dc.b	smpsNoAttack, $01
00096609 E109                       	smpsAlterNote       $09
0009660B E701                       	dc.b	smpsNoAttack, $01
0009660D E10C                       	smpsAlterNote       $0C
0009660F E701                       	dc.b	smpsNoAttack, $01
00096611 E110                       	smpsAlterNote       $10
00096613 E701                       	dc.b	smpsNoAttack, $01
00096615 E10C                       	smpsAlterNote       $0C
00096617 E701                       	dc.b	smpsNoAttack, $01
00096619 E106                       	smpsAlterNote       $06
0009661B E701                       	dc.b	smpsNoAttack, $01
0009661D E105                       	smpsAlterNote       $05
0009661F E701                       	dc.b	smpsNoAttack, $01
00096621 E109                       	smpsAlterNote       $09
00096623 E701                       	dc.b	smpsNoAttack, $01
00096625 E10F                       	smpsAlterNote       $0F
00096627 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009662B E109                       	smpsAlterNote       $09
0009662D E701                       	dc.b	smpsNoAttack, $01
0009662F E106                       	smpsAlterNote       $06
00096631 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096635 E10C                       	smpsAlterNote       $0C
00096637 E701                       	dc.b	smpsNoAttack, $01
00096639 E110                       	smpsAlterNote       $10
0009663B E701                       	dc.b	smpsNoAttack, $01
0009663D E10F                       	smpsAlterNote       $0F
0009663F E701                       	dc.b	smpsNoAttack, $01
00096641 E109                       	smpsAlterNote       $09
00096643 E701                       	dc.b	smpsNoAttack, $01
00096645 E105                       	smpsAlterNote       $05
00096647 E701                       	dc.b	smpsNoAttack, $01
00096649 E109                       	smpsAlterNote       $09
0009664B E701                       	dc.b	smpsNoAttack, $01
0009664D E10C                       	smpsAlterNote       $0C
0009664F E701                       	dc.b	smpsNoAttack, $01
00096651 E110                       	smpsAlterNote       $10
00096653 E701                       	dc.b	smpsNoAttack, $01
00096655 E10C                       	smpsAlterNote       $0C
00096657 E701                       	dc.b	smpsNoAttack, $01
00096659 E106                       	smpsAlterNote       $06
0009665B E701                       	dc.b	smpsNoAttack, $01
0009665D E105                       	smpsAlterNote       $05
0009665F E701                       	dc.b	smpsNoAttack, $01
00096661 E109                       	smpsAlterNote       $09
00096663 E701                       	dc.b	smpsNoAttack, $01
00096665 E10F                       	smpsAlterNote       $0F
00096667 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009666B E10C                       	smpsAlterNote       $0C
0009666D E701                       	dc.b	smpsNoAttack, $01
0009666F E106                       	smpsAlterNote       $06
00096671 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096675 E10C                       	smpsAlterNote       $0C
00096677 E701                       	dc.b	smpsNoAttack, $01
00096679 E10F                       	smpsAlterNote       $0F
0009667B E701                       	dc.b	smpsNoAttack, $01
0009667D E110                       	smpsAlterNote       $10
0009667F 8001                       	dc.b	nRst, $01
00096681 E10F                       	smpsAlterNote       $0F
00096683 C604                       	dc.b	nA5, $04
00096685 E10D                       	smpsAlterNote       $0D
00096687 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0009668D E10B                       	smpsAlterNote       $0B
0009668F BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
00096695 E10F                       	smpsAlterNote       $0F
00096697 C604 8001                  	dc.b	nA5, $04, nRst, $01
0009669B E10D                       	smpsAlterNote       $0D
0009669D C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
000966A3 E10C                       	smpsAlterNote       $0C
000966A5 C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
000966AB E10A                       	smpsAlterNote       $0A
000966AD C904                       	dc.b	nC6, $04
000966AF E110                       	smpsAlterNote       $10
000966B1 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000966B5 E10F                       	smpsAlterNote       $0F
000966B7 C604                       	dc.b	nA5, $04
000966B9 E10D                       	smpsAlterNote       $0D
000966BB C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
000966C7 E109                       	smpsAlterNote       $09
000966C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000966CD E10F                       	smpsAlterNote       $0F
000966CF E701                       	dc.b	smpsNoAttack, $01
000966D1 E112                       	smpsAlterNote       $12
000966D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000966D7 E10C                       	smpsAlterNote       $0C
000966D9 E701                       	dc.b	smpsNoAttack, $01
000966DB E108                       	smpsAlterNote       $08
000966DD E701                       	dc.b	smpsNoAttack, $01
000966DF E109                       	smpsAlterNote       $09
000966E1 E701                       	dc.b	smpsNoAttack, $01
000966E3 E10F                       	smpsAlterNote       $0F
000966E5 E701                       	dc.b	smpsNoAttack, $01
000966E7 E113                       	smpsAlterNote       $13
000966E9 E701                       	dc.b	smpsNoAttack, $01
000966EB E10D                       	smpsAlterNote       $0D
000966ED C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
000966F3 E10C                       	smpsAlterNote       $0C
000966F5 C10D                       	dc.b	nE5, $0D
000966F7 E109                       	smpsAlterNote       $09
000966F9 E701                       	dc.b	smpsNoAttack, $01
000966FB E106                       	smpsAlterNote       $06
000966FD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096701 E10C                       	smpsAlterNote       $0C
00096703 E701                       	dc.b	smpsNoAttack, $01
00096705 E110                       	smpsAlterNote       $10
00096707 E701                       	dc.b	smpsNoAttack, $01
00096709 E10F                       	smpsAlterNote       $0F
0009670B E701                       	dc.b	smpsNoAttack, $01
0009670D E109                       	smpsAlterNote       $09
0009670F E701                       	dc.b	smpsNoAttack, $01
00096711 E105                       	smpsAlterNote       $05
00096713 E701                       	dc.b	smpsNoAttack, $01
00096715 E109                       	smpsAlterNote       $09
00096717 E701                       	dc.b	smpsNoAttack, $01
00096719 E10C                       	smpsAlterNote       $0C
0009671B E701                       	dc.b	smpsNoAttack, $01
0009671D E110                       	smpsAlterNote       $10
0009671F E701                       	dc.b	smpsNoAttack, $01
00096721 E10C                       	smpsAlterNote       $0C
00096723 E701                       	dc.b	smpsNoAttack, $01
00096725 E106                       	smpsAlterNote       $06
00096727 E701                       	dc.b	smpsNoAttack, $01
00096729 E105                       	smpsAlterNote       $05
0009672B E701                       	dc.b	smpsNoAttack, $01
0009672D E109                       	smpsAlterNote       $09
0009672F E701                       	dc.b	smpsNoAttack, $01
00096731 E10F                       	smpsAlterNote       $0F
00096733 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096737 E10C                       	smpsAlterNote       $0C
00096739 E701                       	dc.b	smpsNoAttack, $01
0009673B E106                       	smpsAlterNote       $06
0009673D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096741 E10C                       	smpsAlterNote       $0C
00096743 E701                       	dc.b	smpsNoAttack, $01
00096745 E10F                       	smpsAlterNote       $0F
00096747 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009674B E109                       	smpsAlterNote       $09
0009674D E701                       	dc.b	smpsNoAttack, $01
0009674F E105                       	smpsAlterNote       $05
00096751 E701                       	dc.b	smpsNoAttack, $01
00096753 E106                       	smpsAlterNote       $06
00096755 E701                       	dc.b	smpsNoAttack, $01
00096757 E10C                       	smpsAlterNote       $0C
00096759 E701                       	dc.b	smpsNoAttack, $01
0009675B E110                       	smpsAlterNote       $10
0009675D E701                       	dc.b	smpsNoAttack, $01
0009675F E10C                       	smpsAlterNote       $0C
00096761 E701                       	dc.b	smpsNoAttack, $01
00096763 E109                       	smpsAlterNote       $09
00096765 E701                       	dc.b	smpsNoAttack, $01
00096767 E105                       	smpsAlterNote       $05
00096769 E701                       	dc.b	smpsNoAttack, $01
0009676B E109                       	smpsAlterNote       $09
0009676D E701                       	dc.b	smpsNoAttack, $01
0009676F E10F                       	smpsAlterNote       $0F
00096771 E701                       	dc.b	smpsNoAttack, $01
00096773 E110                       	smpsAlterNote       $10
00096775 E701                       	dc.b	smpsNoAttack, $01
00096777 E10C                       	smpsAlterNote       $0C
00096779 E701                       	dc.b	smpsNoAttack, $01
0009677B E106                       	smpsAlterNote       $06
0009677D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096781 E109                       	smpsAlterNote       $09
00096783 E701                       	dc.b	smpsNoAttack, $01
00096785 E10F                       	smpsAlterNote       $0F
00096787 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009678B E109                       	smpsAlterNote       $09
0009678D E701                       	dc.b	smpsNoAttack, $01
0009678F E106                       	smpsAlterNote       $06
00096791 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096795 E10C                       	smpsAlterNote       $0C
00096797 E701                       	dc.b	smpsNoAttack, $01
00096799 E110                       	smpsAlterNote       $10
0009679B E701                       	dc.b	smpsNoAttack, $01
0009679D E10F                       	smpsAlterNote       $0F
0009679F E701                       	dc.b	smpsNoAttack, $01
000967A1 E109                       	smpsAlterNote       $09
000967A3 E701                       	dc.b	smpsNoAttack, $01
000967A5 E105                       	smpsAlterNote       $05
000967A7 E701                       	dc.b	smpsNoAttack, $01
000967A9 E109                       	smpsAlterNote       $09
000967AB E701                       	dc.b	smpsNoAttack, $01
000967AD E10F                       	smpsAlterNote       $0F
000967AF E701                       	dc.b	smpsNoAttack, $01
000967B1 E110                       	smpsAlterNote       $10
000967B3 E701                       	dc.b	smpsNoAttack, $01
000967B5 E10C                       	smpsAlterNote       $0C
000967B7 E701                       	dc.b	smpsNoAttack, $01
000967B9 E106                       	smpsAlterNote       $06
000967BB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000967BF E109                       	smpsAlterNote       $09
000967C1 E701                       	dc.b	smpsNoAttack, $01
000967C3 E10F                       	smpsAlterNote       $0F
000967C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000967C9 E109                       	smpsAlterNote       $09
000967CB E701                       	dc.b	smpsNoAttack, $01
000967CD E106                       	smpsAlterNote       $06
000967CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000967D3 E10C                       	smpsAlterNote       $0C
000967D5 E701                       	dc.b	smpsNoAttack, $01
000967D7 E110                       	smpsAlterNote       $10
000967D9 E701                       	dc.b	smpsNoAttack, $01
000967DB E10F                       	smpsAlterNote       $0F
000967DD E701                       	dc.b	smpsNoAttack, $01
000967DF E109                       	smpsAlterNote       $09
000967E1 E701                       	dc.b	smpsNoAttack, $01
000967E3 E105                       	smpsAlterNote       $05
000967E5 E701                       	dc.b	smpsNoAttack, $01
000967E7 E109                       	smpsAlterNote       $09
000967E9 E701                       	dc.b	smpsNoAttack, $01
000967EB E10C                       	smpsAlterNote       $0C
000967ED E701                       	dc.b	smpsNoAttack, $01
000967EF E110                       	smpsAlterNote       $10
000967F1 E701                       	dc.b	smpsNoAttack, $01
000967F3 E10C                       	smpsAlterNote       $0C
000967F5 E701                       	dc.b	smpsNoAttack, $01
000967F7 E106                       	smpsAlterNote       $06
000967F9 E701                       	dc.b	smpsNoAttack, $01
000967FB E105                       	smpsAlterNote       $05
000967FD E701                       	dc.b	smpsNoAttack, $01
000967FF E109                       	smpsAlterNote       $09
00096801 E701                       	dc.b	smpsNoAttack, $01
00096803 E10F                       	smpsAlterNote       $0F
00096805 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096809 E10C                       	smpsAlterNote       $0C
0009680B E701                       	dc.b	smpsNoAttack, $01
0009680D E106                       	smpsAlterNote       $06
0009680F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096813 E10C                       	smpsAlterNote       $0C
00096815 E701                       	dc.b	smpsNoAttack, $01
00096817 E10F                       	smpsAlterNote       $0F
00096819 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009681D E109                       	smpsAlterNote       $09
0009681F E701                       	dc.b	smpsNoAttack, $01
00096821 E105                       	smpsAlterNote       $05
00096823 E701                       	dc.b	smpsNoAttack, $01
00096825 E106                       	smpsAlterNote       $06
00096827 E701                       	dc.b	smpsNoAttack, $01
00096829 E10C                       	smpsAlterNote       $0C
0009682B E701                       	dc.b	smpsNoAttack, $01
0009682D E110                       	smpsAlterNote       $10
0009682F E701                       	dc.b	smpsNoAttack, $01
00096831 E10C                       	smpsAlterNote       $0C
00096833 E701                       	dc.b	smpsNoAttack, $01
00096835 E109                       	smpsAlterNote       $09
00096837 E701                       	dc.b	smpsNoAttack, $01
00096839 E105                       	smpsAlterNote       $05
0009683B E701                       	dc.b	smpsNoAttack, $01
0009683D E109                       	smpsAlterNote       $09
0009683F E701                       	dc.b	smpsNoAttack, $01
00096841 E10F                       	smpsAlterNote       $0F
00096843 E701                       	dc.b	smpsNoAttack, $01
00096845 E110                       	smpsAlterNote       $10
00096847 E701                       	dc.b	smpsNoAttack, $01
00096849 E10C                       	smpsAlterNote       $0C
0009684B E701                       	dc.b	smpsNoAttack, $01
0009684D E106                       	smpsAlterNote       $06
0009684F E701                       	dc.b	smpsNoAttack, $01
00096851 E10B                       	smpsAlterNote       $0B
00096853 BF02                       	dc.b	nD5, $02
00096855 E10C                       	smpsAlterNote       $0C
00096857 C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
0009685D E109                       	smpsAlterNote       $09
0009685F E701                       	dc.b	smpsNoAttack, $01
00096861 E105                       	smpsAlterNote       $05
00096863 E701                       	dc.b	smpsNoAttack, $01
00096865 E109                       	smpsAlterNote       $09
00096867 E701                       	dc.b	smpsNoAttack, $01
00096869 E10F                       	smpsAlterNote       $0F
0009686B E701                       	dc.b	smpsNoAttack, $01
0009686D E110                       	smpsAlterNote       $10
0009686F E701                       	dc.b	smpsNoAttack, $01
00096871 E10C                       	smpsAlterNote       $0C
00096873 E701                       	dc.b	smpsNoAttack, $01
00096875 E106                       	smpsAlterNote       $06
00096877 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009687B E109                       	smpsAlterNote       $09
0009687D E701                       	dc.b	smpsNoAttack, $01
0009687F E10F                       	smpsAlterNote       $0F
00096881 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096885 E109                       	smpsAlterNote       $09
00096887 E701                       	dc.b	smpsNoAttack, $01
00096889 E106                       	smpsAlterNote       $06
0009688B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009688F E10C                       	smpsAlterNote       $0C
00096891 E701                       	dc.b	smpsNoAttack, $01
00096893 E110                       	smpsAlterNote       $10
00096895 E701                       	dc.b	smpsNoAttack, $01
00096897 E10F                       	smpsAlterNote       $0F
00096899 E701                       	dc.b	smpsNoAttack, $01
0009689B E109                       	smpsAlterNote       $09
0009689D E701                       	dc.b	smpsNoAttack, $01
0009689F E105                       	smpsAlterNote       $05
000968A1 E701                       	dc.b	smpsNoAttack, $01
000968A3 E109                       	smpsAlterNote       $09
000968A5 E701                       	dc.b	smpsNoAttack, $01
000968A7 E10C                       	smpsAlterNote       $0C
000968A9 E701                       	dc.b	smpsNoAttack, $01
000968AB E110                       	smpsAlterNote       $10
000968AD E701                       	dc.b	smpsNoAttack, $01
000968AF E10C                       	smpsAlterNote       $0C
000968B1 E701                       	dc.b	smpsNoAttack, $01
000968B3 E106                       	smpsAlterNote       $06
000968B5 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000968B9 E10D                       	smpsAlterNote       $0D
000968BB C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
000968C3 E10C                       	smpsAlterNote       $0C
000968C5 C10D                       	dc.b	nE5, $0D
000968C7 E106                       	smpsAlterNote       $06
000968C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000968CD E109                       	smpsAlterNote       $09
000968CF E701                       	dc.b	smpsNoAttack, $01
000968D1 E10F                       	smpsAlterNote       $0F
000968D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000968D7 E109                       	smpsAlterNote       $09
000968D9 E701                       	dc.b	smpsNoAttack, $01
000968DB E106                       	smpsAlterNote       $06
000968DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000968E1 E10C                       	smpsAlterNote       $0C
000968E3 E701                       	dc.b	smpsNoAttack, $01
000968E5 E110                       	smpsAlterNote       $10
000968E7 E701                       	dc.b	smpsNoAttack, $01
000968E9 E10F                       	smpsAlterNote       $0F
000968EB E701                       	dc.b	smpsNoAttack, $01
000968ED E109                       	smpsAlterNote       $09
000968EF E701                       	dc.b	smpsNoAttack, $01
000968F1 E105                       	smpsAlterNote       $05
000968F3 E701                       	dc.b	smpsNoAttack, $01
000968F5 E106                       	smpsAlterNote       $06
000968F7 800F                       	dc.b	nRst, $0F
000968FB E6FF                       	smpsAlterVol        $FF
000968FD E10F                       	smpsAlterNote       $0F
000968FF BA01                       	dc.b	nA4, $01
00096901 E110                       	smpsAlterNote       $10
00096903 BB02                       	dc.b	nBb4, $02
00096905 E10F                       	smpsAlterNote       $0F
00096907 BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
0009690D E10B                       	smpsAlterNote       $0B
0009690F BF03 8001                  	dc.b	nD5, $03, nRst, $01
00096913 E10C                       	smpsAlterNote       $0C
00096915 C103                       	dc.b	nE5, $03
00096917 E10D                       	smpsAlterNote       $0D
00096919 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
00096923 E10B                       	smpsAlterNote       $0B
00096925 BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
00096929 E104                       	smpsAlterNote       $04
0009692B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009692F E10A                       	smpsAlterNote       $0A
00096931 E701                       	dc.b	smpsNoAttack, $01
00096933 E10D                       	smpsAlterNote       $0D
00096935 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096939 E107                       	smpsAlterNote       $07
0009693B E701                       	dc.b	smpsNoAttack, $01
0009693D E104                       	smpsAlterNote       $04
0009693F 8001                       	dc.b	nRst, $01
00096941 E110                       	smpsAlterNote       $10
00096943 C703                       	dc.b	nBb5, $03
00096945 E10F                       	smpsAlterNote       $0F
00096947 C603 8001                  	dc.b	nA5, $03, nRst, $01
0009694B E10D                       	smpsAlterNote       $0D
0009694D C403 C60D                  	dc.b	nG5, $03, nA5, $0D
00096951 E10C                       	smpsAlterNote       $0C
00096953 E701                       	dc.b	smpsNoAttack, $01
00096955 E108                       	smpsAlterNote       $08
00096957 E701                       	dc.b	smpsNoAttack, $01
00096959 E109                       	smpsAlterNote       $09
0009695B E701                       	dc.b	smpsNoAttack, $01
0009695D E10F                       	smpsAlterNote       $0F
0009695F E701                       	dc.b	smpsNoAttack, $01
00096961 E113                       	smpsAlterNote       $13
00096963 E701                       	dc.b	smpsNoAttack, $01
00096965 E10F                       	smpsAlterNote       $0F
00096967 E701                       	dc.b	smpsNoAttack, $01
00096969 E10C                       	smpsAlterNote       $0C
0009696B E701                       	dc.b	smpsNoAttack, $01
0009696D E108                       	smpsAlterNote       $08
0009696F E701                       	dc.b	smpsNoAttack, $01
00096971 E10C                       	smpsAlterNote       $0C
00096973 E701                       	dc.b	smpsNoAttack, $01
00096975 E112                       	smpsAlterNote       $12
00096977 E701                       	dc.b	smpsNoAttack, $01
00096979 E113                       	smpsAlterNote       $13
0009697B E701                       	dc.b	smpsNoAttack, $01
0009697D E10F                       	smpsAlterNote       $0F
0009697F E701                       	dc.b	smpsNoAttack, $01
00096981 E109                       	smpsAlterNote       $09
00096983 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096987 E10C                       	smpsAlterNote       $0C
00096989 E701                       	dc.b	smpsNoAttack, $01
0009698B E112                       	smpsAlterNote       $12
0009698D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096991 E10C                       	smpsAlterNote       $0C
00096993 E701                       	dc.b	smpsNoAttack, $01
00096995 E109                       	smpsAlterNote       $09
00096997 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009699B E10F                       	smpsAlterNote       $0F
0009699D E701                       	dc.b	smpsNoAttack, $01
0009699F E113                       	smpsAlterNote       $13
000969A1 E701                       	dc.b	smpsNoAttack, $01
000969A3 E112                       	smpsAlterNote       $12
000969A5 E701                       	dc.b	smpsNoAttack, $01
000969A7 E10C                       	smpsAlterNote       $0C
000969A9 E701                       	dc.b	smpsNoAttack, $01
000969AB E108                       	smpsAlterNote       $08
000969AD E701                       	dc.b	smpsNoAttack, $01
000969AF E10C                       	smpsAlterNote       $0C
000969B1 E701                       	dc.b	smpsNoAttack, $01
000969B3 E10F                       	smpsAlterNote       $0F
000969B5 E701                       	dc.b	smpsNoAttack, $01
000969B7 E113                       	smpsAlterNote       $13
000969B9 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
000969BD E10B                       	smpsAlterNote       $0B
000969BF BF03                       	dc.b	nD5, $03
000969C1 E10C                       	smpsAlterNote       $0C
000969C3 C103 8001                  	dc.b	nE5, $03, nRst, $01
000969C7 E10D                       	smpsAlterNote       $0D
000969C9 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
000969D3 E10B                       	smpsAlterNote       $0B
000969D5 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
000969E1 E110                       	smpsAlterNote       $10
000969E3 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000969E7 E10F                       	smpsAlterNote       $0F
000969E9 C604                       	dc.b	nA5, $04
000969EB E10D                       	smpsAlterNote       $0D
000969ED C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
000969F3 E109                       	smpsAlterNote       $09
000969F5 E701                       	dc.b	smpsNoAttack, $01
000969F7 E108                       	smpsAlterNote       $08
000969F9 E701                       	dc.b	smpsNoAttack, $01
000969FB E10C                       	smpsAlterNote       $0C
000969FD E701                       	dc.b	smpsNoAttack, $01
000969FF E112                       	smpsAlterNote       $12
00096A01 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096A05 E10F                       	smpsAlterNote       $0F
00096A07 E701                       	dc.b	smpsNoAttack, $01
00096A09 E109                       	smpsAlterNote       $09
00096A0B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096A0F E10F                       	smpsAlterNote       $0F
00096A11 E701                       	dc.b	smpsNoAttack, $01
00096A13 E112                       	smpsAlterNote       $12
00096A15 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096A19 E10C                       	smpsAlterNote       $0C
00096A1B E701                       	dc.b	smpsNoAttack, $01
00096A1D E108                       	smpsAlterNote       $08
00096A1F E701                       	dc.b	smpsNoAttack, $01
00096A21 E109                       	smpsAlterNote       $09
00096A23 E701                       	dc.b	smpsNoAttack, $01
00096A25 E10F                       	smpsAlterNote       $0F
00096A27 E701                       	dc.b	smpsNoAttack, $01
00096A29 E113                       	smpsAlterNote       $13
00096A2B E701                       	dc.b	smpsNoAttack, $01
00096A2D E10F                       	smpsAlterNote       $0F
00096A2F E701                       	dc.b	smpsNoAttack, $01
00096A31 E10C                       	smpsAlterNote       $0C
00096A33 E701                       	dc.b	smpsNoAttack, $01
00096A35 E108                       	smpsAlterNote       $08
00096A37 E701                       	dc.b	smpsNoAttack, $01
00096A39 E10C                       	smpsAlterNote       $0C
00096A3B E701                       	dc.b	smpsNoAttack, $01
00096A3D E112                       	smpsAlterNote       $12
00096A3F E701                       	dc.b	smpsNoAttack, $01
00096A41 E113                       	smpsAlterNote       $13
00096A43 E701                       	dc.b	smpsNoAttack, $01
00096A45 E10F                       	smpsAlterNote       $0F
00096A47 E701                       	dc.b	smpsNoAttack, $01
00096A49 E109                       	smpsAlterNote       $09
00096A4B E701                       	dc.b	smpsNoAttack, $01
00096A4D E10D                       	smpsAlterNote       $0D
00096A4F C402                       	dc.b	nG5, $02
00096A51 E10F                       	smpsAlterNote       $0F
00096A53 C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
00096A5D E10D                       	smpsAlterNote       $0D
00096A5F C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00096A65 E10B                       	smpsAlterNote       $0B
00096A67 BF0D                       	dc.b	nD5, $0D
00096A69 E108                       	smpsAlterNote       $08
00096A6B E701                       	dc.b	smpsNoAttack, $01
00096A6D E104                       	smpsAlterNote       $04
00096A6F E701                       	dc.b	smpsNoAttack, $01
00096A71 E105                       	smpsAlterNote       $05
00096A73 E701                       	dc.b	smpsNoAttack, $01
00096A75 E10B                       	smpsAlterNote       $0B
00096A77 E701                       	dc.b	smpsNoAttack, $01
00096A79 E10F                       	smpsAlterNote       $0F
00096A7B E701                       	dc.b	smpsNoAttack, $01
00096A7D E10B                       	smpsAlterNote       $0B
00096A7F E701                       	dc.b	smpsNoAttack, $01
00096A81 E108                       	smpsAlterNote       $08
00096A83 E701                       	dc.b	smpsNoAttack, $01
00096A85 E104                       	smpsAlterNote       $04
00096A87 E701                       	dc.b	smpsNoAttack, $01
00096A89 E108                       	smpsAlterNote       $08
00096A8B E701                       	dc.b	smpsNoAttack, $01
00096A8D E10E                       	smpsAlterNote       $0E
00096A8F E701                       	dc.b	smpsNoAttack, $01
00096A91 E10F                       	smpsAlterNote       $0F
00096A93 E701                       	dc.b	smpsNoAttack, $01
00096A95 E10C                       	smpsAlterNote       $0C
00096A97 C101                       	dc.b	nE5, $01
00096A99 E10D                       	smpsAlterNote       $0D
00096A9B C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
00096AA3 E10F                       	smpsAlterNote       $0F
00096AA5 C607                       	dc.b	nA5, $07
00096AA7 E10C                       	smpsAlterNote       $0C
00096AA9 CD07                       	dc.b	nE6, $07
00096AAB E10D                       	smpsAlterNote       $0D
00096AAD CE06 8001                  	dc.b	nF6, $06, nRst, $01
00096AB1 E10C                       	smpsAlterNote       $0C
00096AB3 CD03                       	dc.b	nE6, $03
00096AB5 E10A                       	smpsAlterNote       $0A
00096AB7 C903 8001                  	dc.b	nC6, $03, nRst, $01
00096ABB E10D                       	smpsAlterNote       $0D
00096ABD C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
00096AC3 E10A                       	smpsAlterNote       $0A
00096AC5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096AC9 E110                       	smpsAlterNote       $10
00096ACB E701                       	dc.b	smpsNoAttack, $01
00096ACD E114                       	smpsAlterNote       $14
00096ACF E701                       	dc.b	smpsNoAttack, $01
00096AD1 E113                       	smpsAlterNote       $13
00096AD3 E701                       	dc.b	smpsNoAttack, $01
00096AD5 E10D                       	smpsAlterNote       $0D
00096AD7 E701                       	dc.b	smpsNoAttack, $01
00096AD9 E109                       	smpsAlterNote       $09
00096ADB E701                       	dc.b	smpsNoAttack, $01
00096ADD E10D                       	smpsAlterNote       $0D
00096ADF E701                       	dc.b	smpsNoAttack, $01
00096AE1 E110                       	smpsAlterNote       $10
00096AE3 E701                       	dc.b	smpsNoAttack, $01
00096AE5 E114                       	smpsAlterNote       $14
00096AE7 E701                       	dc.b	smpsNoAttack, $01
00096AE9 E10F                       	smpsAlterNote       $0F
00096AEB C607                       	dc.b	nA5, $07
00096AED E10D                       	smpsAlterNote       $0D
00096AEF C40D                       	dc.b	nG5, $0D
00096AF1 E10A                       	smpsAlterNote       $0A
00096AF3 E701                       	dc.b	smpsNoAttack, $01
00096AF5 E106                       	smpsAlterNote       $06
00096AF7 E701                       	dc.b	smpsNoAttack, $01
00096AF9 E10A                       	smpsAlterNote       $0A
00096AFB E701                       	dc.b	smpsNoAttack, $01
00096AFD E10D                       	smpsAlterNote       $0D
00096AFF E701                       	dc.b	smpsNoAttack, $01
00096B01 E111                       	smpsAlterNote       $11
00096B03 E701                       	dc.b	smpsNoAttack, $01
00096B05 E10D                       	smpsAlterNote       $0D
00096B07 E701                       	dc.b	smpsNoAttack, $01
00096B09 E107                       	smpsAlterNote       $07
00096B0B E701                       	dc.b	smpsNoAttack, $01
00096B0D E106                       	smpsAlterNote       $06
00096B0F E701                       	dc.b	smpsNoAttack, $01
00096B11 E10A                       	smpsAlterNote       $0A
00096B13 E701                       	dc.b	smpsNoAttack, $01
00096B15 E110                       	smpsAlterNote       $10
00096B17 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B1B E10D                       	smpsAlterNote       $0D
00096B1D E701                       	dc.b	smpsNoAttack, $01
00096B1F E107                       	smpsAlterNote       $07
00096B21 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B25 E10F                       	smpsAlterNote       $0F
00096B27 C60E                       	dc.b	nA5, $0E
00096B29 E109                       	smpsAlterNote       $09
00096B2B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B2F E10F                       	smpsAlterNote       $0F
00096B31 E701                       	dc.b	smpsNoAttack, $01
00096B33 E112                       	smpsAlterNote       $12
00096B35 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B39 E10C                       	smpsAlterNote       $0C
00096B3B E701                       	dc.b	smpsNoAttack, $01
00096B3D E108                       	smpsAlterNote       $08
00096B3F E701                       	dc.b	smpsNoAttack, $01
00096B41 E109                       	smpsAlterNote       $09
00096B43 E701                       	dc.b	smpsNoAttack, $01
00096B45 E10F                       	smpsAlterNote       $0F
00096B47 E701                       	dc.b	smpsNoAttack, $01
00096B49 E113                       	smpsAlterNote       $13
00096B4B E701                       	dc.b	smpsNoAttack, $01
00096B4D E10F                       	smpsAlterNote       $0F
00096B4F E701                       	dc.b	smpsNoAttack, $01
00096B51 E10C                       	smpsAlterNote       $0C
00096B53 E701                       	dc.b	smpsNoAttack, $01
00096B55 E108                       	smpsAlterNote       $08
00096B57 E701                       	dc.b	smpsNoAttack, $01
00096B59 E109                       	smpsAlterNote       $09
00096B5B 8001                       	dc.b	nRst, $01
00096B5D E110                       	smpsAlterNote       $10
00096B5F C70D                       	dc.b	nBb5, $0D
00096B61 E10D                       	smpsAlterNote       $0D
00096B63 E701                       	dc.b	smpsNoAttack, $01
00096B65 E109                       	smpsAlterNote       $09
00096B67 E701                       	dc.b	smpsNoAttack, $01
00096B69 E10D                       	smpsAlterNote       $0D
00096B6B E701                       	dc.b	smpsNoAttack, $01
00096B6D E113                       	smpsAlterNote       $13
00096B6F E701                       	dc.b	smpsNoAttack, $01
00096B71 E114                       	smpsAlterNote       $14
00096B73 E701                       	dc.b	smpsNoAttack, $01
00096B75 E110                       	smpsAlterNote       $10
00096B77 E701                       	dc.b	smpsNoAttack, $01
00096B79 E10A                       	smpsAlterNote       $0A
00096B7B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B7F E10D                       	smpsAlterNote       $0D
00096B81 E701                       	dc.b	smpsNoAttack, $01
00096B83 E113                       	smpsAlterNote       $13
00096B85 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B89 E10D                       	smpsAlterNote       $0D
00096B8B E701                       	dc.b	smpsNoAttack, $01
00096B8D E10A                       	smpsAlterNote       $0A
00096B8F E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
00096B99 E10B                       	smpsAlterNote       $0B
00096B9B 8001                       	dc.b	nRst, $01
00096B9D E10C                       	smpsAlterNote       $0C
00096B9F CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
00096BA3 E10B                       	smpsAlterNote       $0B
00096BA5 CB0D                       	dc.b	nD6, $0D
00096BA7 E105                       	smpsAlterNote       $05
00096BA9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096BAD E108                       	smpsAlterNote       $08
00096BAF E701                       	dc.b	smpsNoAttack, $01
00096BB1 E10E                       	smpsAlterNote       $0E
00096BB3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096BB7 E108                       	smpsAlterNote       $08
00096BB9 E701                       	dc.b	smpsNoAttack, $01
00096BBB E105                       	smpsAlterNote       $05
00096BBD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096BC1 E10B                       	smpsAlterNote       $0B
00096BC3 E701                       	dc.b	smpsNoAttack, $01
00096BC5 E10F                       	smpsAlterNote       $0F
00096BC7 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096BCB E10C                       	smpsAlterNote       $0C
00096BCD CC0D                       	dc.b	nEb6, $0D
00096BCF E106                       	smpsAlterNote       $06
00096BD1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096BD5 E109                       	smpsAlterNote       $09
00096BD7 E701                       	dc.b	smpsNoAttack, $01
00096BD9 E10C                       	smpsAlterNote       $0C
00096BDB 8001                       	dc.b	nRst, $01
00096BDD E10A                       	smpsAlterNote       $0A
00096BDF C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00096BEB CB0E                       	dc.b	nD6, $0E
00096BED E105                       	smpsAlterNote       $05
00096BEF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096BF3 E10B                       	smpsAlterNote       $0B
00096BF5 E701                       	dc.b	smpsNoAttack, $01
00096BF7 E10E                       	smpsAlterNote       $0E
00096BF9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096BFD E108                       	smpsAlterNote       $08
00096BFF E701                       	dc.b	smpsNoAttack, $01
00096C01 E104                       	smpsAlterNote       $04
00096C03 E701                       	dc.b	smpsNoAttack, $01
00096C05 E105                       	smpsAlterNote       $05
00096C07 E701                       	dc.b	smpsNoAttack, $01
00096C09 E10B                       	smpsAlterNote       $0B
00096C0B E701                       	dc.b	smpsNoAttack, $01
00096C0D E10F                       	smpsAlterNote       $0F
00096C0F E701                       	dc.b	smpsNoAttack, $01
00096C11 E10D                       	smpsAlterNote       $0D
00096C13 CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
00096C17 E10C                       	smpsAlterNote       $0C
00096C19 CC06 8001                  	dc.b	nEb6, $06, nRst, $01
00096C1D E10A                       	smpsAlterNote       $0A
00096C1F C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
00096C2B CB0D                       	dc.b	nD6, $0D
00096C2D E108                       	smpsAlterNote       $08
00096C2F E701                       	dc.b	smpsNoAttack, $01
00096C31 E104                       	smpsAlterNote       $04
00096C33 E701                       	dc.b	smpsNoAttack, $01
00096C35 E105                       	smpsAlterNote       $05
00096C37 E701                       	dc.b	smpsNoAttack, $01
00096C39 E10B                       	smpsAlterNote       $0B
00096C3B E701                       	dc.b	smpsNoAttack, $01
00096C3D E10F                       	smpsAlterNote       $0F
00096C3F E701                       	dc.b	smpsNoAttack, $01
00096C41 E10B                       	smpsAlterNote       $0B
00096C43 E701                       	dc.b	smpsNoAttack, $01
00096C45 E108                       	smpsAlterNote       $08
00096C47 E701                       	dc.b	smpsNoAttack, $01
00096C49 E104                       	smpsAlterNote       $04
00096C4B E701                       	dc.b	smpsNoAttack, $01
00096C4D E108                       	smpsAlterNote       $08
00096C4F E701                       	dc.b	smpsNoAttack, $01
00096C51 E10E                       	smpsAlterNote       $0E
00096C53 E701                       	dc.b	smpsNoAttack, $01
00096C55 E10F                       	smpsAlterNote       $0F
00096C57 E701                       	dc.b	smpsNoAttack, $01
00096C59 E10C                       	smpsAlterNote       $0C
00096C5B CC0D                       	dc.b	nEb6, $0D
00096C5D E109                       	smpsAlterNote       $09
00096C5F E701                       	dc.b	smpsNoAttack, $01
00096C61 E105                       	smpsAlterNote       $05
00096C63 E701                       	dc.b	smpsNoAttack, $01
00096C65 E106                       	smpsAlterNote       $06
00096C67 E701                       	dc.b	smpsNoAttack, $01
00096C69 E10C                       	smpsAlterNote       $0C
00096C6B E701                       	dc.b	smpsNoAttack, $01
00096C6D E10A                       	smpsAlterNote       $0A
00096C6F C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
00096C7B CB0D                       	dc.b	nD6, $0D
00096C7D E108                       	smpsAlterNote       $08
00096C7F E701                       	dc.b	smpsNoAttack, $01
00096C81 E104                       	smpsAlterNote       $04
00096C83 E701                       	dc.b	smpsNoAttack, $01
00096C85 E108                       	smpsAlterNote       $08
00096C87 E701                       	dc.b	smpsNoAttack, $01
00096C89 E10B                       	smpsAlterNote       $0B
00096C8B E701                       	dc.b	smpsNoAttack, $01
00096C8D E10F                       	smpsAlterNote       $0F
00096C8F E701                       	dc.b	smpsNoAttack, $01
00096C91 E10B                       	smpsAlterNote       $0B
00096C93 E701                       	dc.b	smpsNoAttack, $01
00096C95 E105                       	smpsAlterNote       $05
00096C97 E701                       	dc.b	smpsNoAttack, $01
00096C99 E104                       	smpsAlterNote       $04
00096C9B E701                       	dc.b	smpsNoAttack, $01
00096C9D E108                       	smpsAlterNote       $08
00096C9F E701                       	dc.b	smpsNoAttack, $01
00096CA1 E10E                       	smpsAlterNote       $0E
00096CA3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096CA7 E10B                       	smpsAlterNote       $0B
00096CA9 E701                       	dc.b	smpsNoAttack, $01
00096CAB E105                       	smpsAlterNote       $05
00096CAD E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
00096CB5 03                         	dc.b	$03
00096CB6 E601                       	smpsAlterVol        $01
00096CB8 F6F1 D1                    	smpsJump            music84_Jump01
00096CBB                            
00096CBB                            ; FM5 Data
00096CBB                            music84_FM5:
00096CBD E080                       	smpsPan             panLeft, $00
00096CBF 8003                       	dc.b	nRst, $03
00096CC1 E10D                       	smpsAlterNote       $0D
00096CC3 C203 8008                  	dc.b	nF5, $03, nRst, $08
00096CC7 E10C                       	smpsAlterNote       $0C
00096CC9 C103 800A                  	dc.b	nE5, $03, nRst, $0A
00096CCD E10F                       	smpsAlterNote       $0F
00096CCF BA03 8006                  	dc.b	nA4, $03, nRst, $06
00096CD5 E6FE                       	smpsAlterVol        $FE
00096CD7 C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
00096CDD E10D                       	smpsAlterNote       $0D
00096CDF C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00096CE5 E10C                       	smpsAlterNote       $0C
00096CE7 C102 8001                  	dc.b	nE5, $02, nRst, $01
00096CEB E10A                       	smpsAlterNote       $0A
00096CED BD01 8001                  	dc.b	nC5, $01, nRst, $01
00096CF3 03                         	dc.b	$03
00096CF4                            
00096CF4                            music84_Jump00:
00096CF4 8004                       	dc.b	nRst, $04
00096CF6 E602                       	smpsAlterVol        $02
00096CF8 E10D                       	smpsAlterNote       $0D
00096CFA B60D                       	dc.b	nF4, $0D
00096CFC E107                       	smpsAlterNote       $07
00096CFE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D02 E10A                       	smpsAlterNote       $0A
00096D04 E701                       	dc.b	smpsNoAttack, $01
00096D06 E110                       	smpsAlterNote       $10
00096D08 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D0C E10A                       	smpsAlterNote       $0A
00096D0E E701                       	dc.b	smpsNoAttack, $01
00096D10 E107                       	smpsAlterNote       $07
00096D12 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D16 E10D                       	smpsAlterNote       $0D
00096D18 E701                       	dc.b	smpsNoAttack, $01
00096D1A E111                       	smpsAlterNote       $11
00096D1C E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096D20 E10D                       	smpsAlterNote       $0D
00096D22 B80D                       	dc.b	nG4, $0D
00096D24 E107                       	smpsAlterNote       $07
00096D26 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D2A E10A                       	smpsAlterNote       $0A
00096D2C E701                       	dc.b	smpsNoAttack, $01
00096D2E E110                       	smpsAlterNote       $10
00096D30 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D34 E10A                       	smpsAlterNote       $0A
00096D36 E701                       	dc.b	smpsNoAttack, $01
00096D38 E107                       	smpsAlterNote       $07
00096D3A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D3E E10D                       	smpsAlterNote       $0D
00096D40 E701                       	dc.b	smpsNoAttack, $01
00096D42 E111                       	smpsAlterNote       $11
00096D44 E701                       	dc.b	smpsNoAttack, $01
00096D46 E110                       	smpsAlterNote       $10
00096D48 E701                       	dc.b	smpsNoAttack, $01
00096D4A E10A                       	smpsAlterNote       $0A
00096D4C E701                       	dc.b	smpsNoAttack, $01
00096D4E E106                       	smpsAlterNote       $06
00096D50 E701                       	dc.b	smpsNoAttack, $01
00096D52 E10A                       	smpsAlterNote       $0A
00096D54 E701                       	dc.b	smpsNoAttack, $01
00096D56 E10D                       	smpsAlterNote       $0D
00096D58 E701                       	dc.b	smpsNoAttack, $01
00096D5A E111                       	smpsAlterNote       $11
00096D5C E701                       	dc.b	smpsNoAttack, $01
00096D5E E10D                       	smpsAlterNote       $0D
00096D60 E701                       	dc.b	smpsNoAttack, $01
00096D62 E10F                       	smpsAlterNote       $0F
00096D64 BA0E                       	dc.b	nA4, $0E
00096D66 E109                       	smpsAlterNote       $09
00096D68 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D6C E10F                       	smpsAlterNote       $0F
00096D6E E701                       	dc.b	smpsNoAttack, $01
00096D70 E112                       	smpsAlterNote       $12
00096D72 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D76 E10C                       	smpsAlterNote       $0C
00096D78 E701                       	dc.b	smpsNoAttack, $01
00096D7A E108                       	smpsAlterNote       $08
00096D7C E701                       	dc.b	smpsNoAttack, $01
00096D7E E109                       	smpsAlterNote       $09
00096D80 E701                       	dc.b	smpsNoAttack, $01
00096D82 E10F                       	smpsAlterNote       $0F
00096D84 E701                       	dc.b	smpsNoAttack, $01
00096D86 E113                       	smpsAlterNote       $13
00096D88 E701                       	dc.b	smpsNoAttack, $01
00096D8A E10F                       	smpsAlterNote       $0F
00096D8C E701                       	dc.b	smpsNoAttack, $01
00096D8E E109                       	smpsAlterNote       $09
00096D90 E701                       	dc.b	smpsNoAttack, $01
00096D92 E108                       	smpsAlterNote       $08
00096D94 E701                       	dc.b	smpsNoAttack, $01
00096D96 E10C                       	smpsAlterNote       $0C
00096D98 E701                       	dc.b	smpsNoAttack, $01
00096D9A E112                       	smpsAlterNote       $12
00096D9C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096DA0 E10F                       	smpsAlterNote       $0F
00096DA2 E701                       	dc.b	smpsNoAttack, $01
00096DA4 E109                       	smpsAlterNote       $09
00096DA6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096DAA E10F                       	smpsAlterNote       $0F
00096DAC E701                       	dc.b	smpsNoAttack, $01
00096DAE E112                       	smpsAlterNote       $12
00096DB0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096DB4 E10C                       	smpsAlterNote       $0C
00096DB6 E701                       	dc.b	smpsNoAttack, $01
00096DB8 E108                       	smpsAlterNote       $08
00096DBA E701                       	dc.b	smpsNoAttack, $01
00096DBC E109                       	smpsAlterNote       $09
00096DBE E701                       	dc.b	smpsNoAttack, $01
00096DC0 E10F                       	smpsAlterNote       $0F
00096DC2 E701                       	dc.b	smpsNoAttack, $01
00096DC4 E113                       	smpsAlterNote       $13
00096DC6 E701                       	dc.b	smpsNoAttack, $01
00096DC8 E10F                       	smpsAlterNote       $0F
00096DCA E701                       	dc.b	smpsNoAttack, $01
00096DCC E10C                       	smpsAlterNote       $0C
00096DCE E701                       	dc.b	smpsNoAttack, $01
00096DD0 E108                       	smpsAlterNote       $08
00096DD2 E701                       	dc.b	smpsNoAttack, $01
00096DD4 E109                       	smpsAlterNote       $09
00096DD6 8001                       	dc.b	nRst, $01
00096DD8 E10C                       	smpsAlterNote       $0C
00096DDA B50A                       	dc.b	nE4, $0A
00096DDC E10D                       	smpsAlterNote       $0D
00096DDE B60D                       	dc.b	nF4, $0D
00096DE0 E10A                       	smpsAlterNote       $0A
00096DE2 E701                       	dc.b	smpsNoAttack, $01
00096DE4 E106                       	smpsAlterNote       $06
00096DE6 E701                       	dc.b	smpsNoAttack, $01
00096DE8 E107                       	smpsAlterNote       $07
00096DEA E701                       	dc.b	smpsNoAttack, $01
00096DEC E10D                       	smpsAlterNote       $0D
00096DEE E701                       	dc.b	smpsNoAttack, $01
00096DF0 E111                       	smpsAlterNote       $11
00096DF2 E701                       	dc.b	smpsNoAttack, $01
00096DF4 E10D                       	smpsAlterNote       $0D
00096DF6 E701                       	dc.b	smpsNoAttack, $01
00096DF8 E10A                       	smpsAlterNote       $0A
00096DFA E701                       	dc.b	smpsNoAttack, $01
00096DFC E106                       	smpsAlterNote       $06
00096DFE E701                       	dc.b	smpsNoAttack, $01
00096E00 E10A                       	smpsAlterNote       $0A
00096E02 E701                       	dc.b	smpsNoAttack, $01
00096E04 E110                       	smpsAlterNote       $10
00096E06 E701                       	dc.b	smpsNoAttack, $01
00096E08 E111                       	smpsAlterNote       $11
00096E0A E701                       	dc.b	smpsNoAttack, $01
00096E0C E10D                       	smpsAlterNote       $0D
00096E0E B80D                       	dc.b	nG4, $0D
00096E10 E10A                       	smpsAlterNote       $0A
00096E12 E701                       	dc.b	smpsNoAttack, $01
00096E14 E106                       	smpsAlterNote       $06
00096E16 E701                       	dc.b	smpsNoAttack, $01
00096E18 E107                       	smpsAlterNote       $07
00096E1A E701                       	dc.b	smpsNoAttack, $01
00096E1C E10D                       	smpsAlterNote       $0D
00096E1E E701                       	dc.b	smpsNoAttack, $01
00096E20 E111                       	smpsAlterNote       $11
00096E22 E701                       	dc.b	smpsNoAttack, $01
00096E24 E10D                       	smpsAlterNote       $0D
00096E26 E701                       	dc.b	smpsNoAttack, $01
00096E28 E10A                       	smpsAlterNote       $0A
00096E2A E701                       	dc.b	smpsNoAttack, $01
00096E2C E106                       	smpsAlterNote       $06
00096E2E E701                       	dc.b	smpsNoAttack, $01
00096E30 E10A                       	smpsAlterNote       $0A
00096E32 E701                       	dc.b	smpsNoAttack, $01
00096E34 E110                       	smpsAlterNote       $10
00096E36 E701                       	dc.b	smpsNoAttack, $01
00096E38 E111                       	smpsAlterNote       $11
00096E3A E701                       	dc.b	smpsNoAttack, $01
00096E3C E10D                       	smpsAlterNote       $0D
00096E3E E701                       	dc.b	smpsNoAttack, $01
00096E40 E107                       	smpsAlterNote       $07
00096E42 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E46 E10A                       	smpsAlterNote       $0A
00096E48 E701                       	dc.b	smpsNoAttack, $01
00096E4A E110                       	smpsAlterNote       $10
00096E4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E50 E10D                       	smpsAlterNote       $0D
00096E52 8001                       	dc.b	nRst, $01
00096E54 E10F                       	smpsAlterNote       $0F
00096E56 BA0D                       	dc.b	nA4, $0D
00096E58 E10C                       	smpsAlterNote       $0C
00096E5A E701                       	dc.b	smpsNoAttack, $01
00096E5C E108                       	smpsAlterNote       $08
00096E5E E701                       	dc.b	smpsNoAttack, $01
00096E60 E10C                       	smpsAlterNote       $0C
00096E62 E701                       	dc.b	smpsNoAttack, $01
00096E64 E112                       	smpsAlterNote       $12
00096E66 E701                       	dc.b	smpsNoAttack, $01
00096E68 E113                       	smpsAlterNote       $13
00096E6A E701                       	dc.b	smpsNoAttack, $01
00096E6C E10F                       	smpsAlterNote       $0F
00096E6E E701                       	dc.b	smpsNoAttack, $01
00096E70 E109                       	smpsAlterNote       $09
00096E72 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E76 E10C                       	smpsAlterNote       $0C
00096E78 E701                       	dc.b	smpsNoAttack, $01
00096E7A E112                       	smpsAlterNote       $12
00096E7C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E80 E10C                       	smpsAlterNote       $0C
00096E82 E701                       	dc.b	smpsNoAttack, $01
00096E84 E109                       	smpsAlterNote       $09
00096E86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E8A E10F                       	smpsAlterNote       $0F
00096E8C E701                       	dc.b	smpsNoAttack, $01
00096E8E E113                       	smpsAlterNote       $13
00096E90 E701                       	dc.b	smpsNoAttack, $01
00096E92 E112                       	smpsAlterNote       $12
00096E94 E701                       	dc.b	smpsNoAttack, $01
00096E96 E10C                       	smpsAlterNote       $0C
00096E98 E701                       	dc.b	smpsNoAttack, $01
00096E9A E108                       	smpsAlterNote       $08
00096E9C E701                       	dc.b	smpsNoAttack, $01
00096E9E E10C                       	smpsAlterNote       $0C
00096EA0 E701                       	dc.b	smpsNoAttack, $01
00096EA2 E10F                       	smpsAlterNote       $0F
00096EA4 E701                       	dc.b	smpsNoAttack, $01
00096EA6 E113                       	smpsAlterNote       $13
00096EA8 E701                       	dc.b	smpsNoAttack, $01
00096EAA E10F                       	smpsAlterNote       $0F
00096EAC E701                       	dc.b	smpsNoAttack, $01
00096EAE E109                       	smpsAlterNote       $09
00096EB0 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096EB4 E10D                       	smpsAlterNote       $0D
00096EB6 B609 8001                  	dc.b	nF4, $09, nRst, $01
00096EBA E10C                       	smpsAlterNote       $0C
00096EBC B506 8001                  	dc.b	nE4, $06, nRst, $01
00096EC0 E10B                       	smpsAlterNote       $0B
00096EC2 B30D                       	dc.b	nD4, $0D
00096EC4 E10C                       	smpsAlterNote       $0C
00096EC6 B503 8001                  	dc.b	nE4, $03, nRst, $01
00096ECA E10D                       	smpsAlterNote       $0D
00096ECC B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
00096ED4 E109                       	smpsAlterNote       $09
00096ED6 E701                       	dc.b	smpsNoAttack, $01
00096ED8 E108                       	smpsAlterNote       $08
00096EDA E701                       	dc.b	smpsNoAttack, $01
00096EDC E10C                       	smpsAlterNote       $0C
00096EDE E701                       	dc.b	smpsNoAttack, $01
00096EE0 E112                       	smpsAlterNote       $12
00096EE2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096EE6 E10F                       	smpsAlterNote       $0F
00096EE8 E701                       	dc.b	smpsNoAttack, $01
00096EEA E109                       	smpsAlterNote       $09
00096EEC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096EF0 E10F                       	smpsAlterNote       $0F
00096EF2 E701                       	dc.b	smpsNoAttack, $01
00096EF4 E112                       	smpsAlterNote       $12
00096EF6 E701                       	dc.b	smpsNoAttack, $01
00096EF8 E113                       	smpsAlterNote       $13
00096EFA 8001                       	dc.b	nRst, $01
00096EFC E10D                       	smpsAlterNote       $0D
00096EFE C20D                       	dc.b	nF5, $0D
00096F00 E107                       	smpsAlterNote       $07
00096F02 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F06 E10A                       	smpsAlterNote       $0A
00096F08 E701                       	dc.b	smpsNoAttack, $01
00096F0A E110                       	smpsAlterNote       $10
00096F0C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F10 E10A                       	smpsAlterNote       $0A
00096F12 E701                       	dc.b	smpsNoAttack, $01
00096F14 E107                       	smpsAlterNote       $07
00096F16 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F1A E10D                       	smpsAlterNote       $0D
00096F1C E701                       	dc.b	smpsNoAttack, $01
00096F1E E111                       	smpsAlterNote       $11
00096F20 E701                       	dc.b	smpsNoAttack, $01
00096F22 E110                       	smpsAlterNote       $10
00096F24 E701                       	dc.b	smpsNoAttack, $01
00096F26 E10A                       	smpsAlterNote       $0A
00096F28 E701                       	dc.b	smpsNoAttack, $01
00096F2A E106                       	smpsAlterNote       $06
00096F2C E701                       	dc.b	smpsNoAttack, $01
00096F2E E10A                       	smpsAlterNote       $0A
00096F30 E701                       	dc.b	smpsNoAttack, $01
00096F32 E10D                       	smpsAlterNote       $0D
00096F34 E701                       	dc.b	smpsNoAttack, $01
00096F36 E111                       	smpsAlterNote       $11
00096F38 E701                       	dc.b	smpsNoAttack, $01
00096F3A E10D                       	smpsAlterNote       $0D
00096F3C E701                       	dc.b	smpsNoAttack, $01
00096F3E E107                       	smpsAlterNote       $07
00096F40 E701                       	dc.b	smpsNoAttack, $01
00096F42 E106                       	smpsAlterNote       $06
00096F44 E701                       	dc.b	smpsNoAttack, $01
00096F46 E10A                       	smpsAlterNote       $0A
00096F48 E701                       	dc.b	smpsNoAttack, $01
00096F4A E110                       	smpsAlterNote       $10
00096F4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F50 E10D                       	smpsAlterNote       $0D
00096F52 E701                       	dc.b	smpsNoAttack, $01
00096F54 E107                       	smpsAlterNote       $07
00096F56 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F5A E10D                       	smpsAlterNote       $0D
00096F5C E701                       	dc.b	smpsNoAttack, $01
00096F5E E110                       	smpsAlterNote       $10
00096F60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F64 E10A                       	smpsAlterNote       $0A
00096F66 E701                       	dc.b	smpsNoAttack, $01
00096F68 E106                       	smpsAlterNote       $06
00096F6A E701                       	dc.b	smpsNoAttack, $01
00096F6C E107                       	smpsAlterNote       $07
00096F6E E701                       	dc.b	smpsNoAttack, $01
00096F70 E10D                       	smpsAlterNote       $0D
00096F72 E701                       	dc.b	smpsNoAttack, $01
00096F74 E111                       	smpsAlterNote       $11
00096F76 E701                       	dc.b	smpsNoAttack, $01
00096F78 E10D                       	smpsAlterNote       $0D
00096F7A E701                       	dc.b	smpsNoAttack, $01
00096F7C E10A                       	smpsAlterNote       $0A
00096F7E E701                       	dc.b	smpsNoAttack, $01
00096F80 E106                       	smpsAlterNote       $06
00096F82 E701                       	dc.b	smpsNoAttack, $01
00096F84 E10A                       	smpsAlterNote       $0A
00096F86 E701                       	dc.b	smpsNoAttack, $01
00096F88 E110                       	smpsAlterNote       $10
00096F8A E701                       	dc.b	smpsNoAttack, $01
00096F8C E111                       	smpsAlterNote       $11
00096F8E E701                       	dc.b	smpsNoAttack, $01
00096F90 E10D                       	smpsAlterNote       $0D
00096F92 E701                       	dc.b	smpsNoAttack, $01
00096F94 E107                       	smpsAlterNote       $07
00096F96 E701                       	dc.b	smpsNoAttack, $01
00096F98 E10D                       	smpsAlterNote       $0D
00096F9A C207                       	dc.b	nF5, $07
00096F9C E10C                       	smpsAlterNote       $0C
00096F9E C10D                       	dc.b	nE5, $0D
00096FA0 E109                       	smpsAlterNote       $09
00096FA2 E701                       	dc.b	smpsNoAttack, $01
00096FA4 E106                       	smpsAlterNote       $06
00096FA6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096FAA E10C                       	smpsAlterNote       $0C
00096FAC E701                       	dc.b	smpsNoAttack, $01
00096FAE E110                       	smpsAlterNote       $10
00096FB0 E701                       	dc.b	smpsNoAttack, $01
00096FB2 E10F                       	smpsAlterNote       $0F
00096FB4 E701                       	dc.b	smpsNoAttack, $01
00096FB6 E109                       	smpsAlterNote       $09
00096FB8 E701                       	dc.b	smpsNoAttack, $01
00096FBA E105                       	smpsAlterNote       $05
00096FBC E701                       	dc.b	smpsNoAttack, $01
00096FBE E109                       	smpsAlterNote       $09
00096FC0 E701                       	dc.b	smpsNoAttack, $01
00096FC2 E10C                       	smpsAlterNote       $0C
00096FC4 E701                       	dc.b	smpsNoAttack, $01
00096FC6 E110                       	smpsAlterNote       $10
00096FC8 E701                       	dc.b	smpsNoAttack, $01
00096FCA E10B                       	smpsAlterNote       $0B
00096FCC BF0D                       	dc.b	nD5, $0D
00096FCE E108                       	smpsAlterNote       $08
00096FD0 E701                       	dc.b	smpsNoAttack, $01
00096FD2 E105                       	smpsAlterNote       $05
00096FD4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096FD8 E10B                       	smpsAlterNote       $0B
00096FDA E701                       	dc.b	smpsNoAttack, $01
00096FDC E10F                       	smpsAlterNote       $0F
00096FDE E701                       	dc.b	smpsNoAttack, $01
00096FE0 E10E                       	smpsAlterNote       $0E
00096FE2 E701                       	dc.b	smpsNoAttack, $01
00096FE4 E108                       	smpsAlterNote       $08
00096FE6 E701                       	dc.b	smpsNoAttack, $01
00096FE8 E104                       	smpsAlterNote       $04
00096FEA E701                       	dc.b	smpsNoAttack, $01
00096FEC E108                       	smpsAlterNote       $08
00096FEE E701                       	dc.b	smpsNoAttack, $01
00096FF0 E10E                       	smpsAlterNote       $0E
00096FF2 E701                       	dc.b	smpsNoAttack, $01
00096FF4 E10F                       	smpsAlterNote       $0F
00096FF6 E701                       	dc.b	smpsNoAttack, $01
00096FF8 E10B                       	smpsAlterNote       $0B
00096FFA E701                       	dc.b	smpsNoAttack, $01
00096FFC E105                       	smpsAlterNote       $05
00096FFE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097002 E108                       	smpsAlterNote       $08
00097004 E701                       	dc.b	smpsNoAttack, $01
00097006 E10E                       	smpsAlterNote       $0E
00097008 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009700C E108                       	smpsAlterNote       $08
0009700E E701                       	dc.b	smpsNoAttack, $01
00097010 E105                       	smpsAlterNote       $05
00097012 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097016 E10B                       	smpsAlterNote       $0B
00097018 E701                       	dc.b	smpsNoAttack, $01
0009701A E10F                       	smpsAlterNote       $0F
0009701C E701                       	dc.b	smpsNoAttack, $01
0009701E E10E                       	smpsAlterNote       $0E
00097020 E701                       	dc.b	smpsNoAttack, $01
00097022 E108                       	smpsAlterNote       $08
00097024 E701                       	dc.b	smpsNoAttack, $01
00097026 E104                       	smpsAlterNote       $04
00097028 E701                       	dc.b	smpsNoAttack, $01
0009702A E108                       	smpsAlterNote       $08
0009702C E701                       	dc.b	smpsNoAttack, $01
0009702E E10B                       	smpsAlterNote       $0B
00097030 E701                       	dc.b	smpsNoAttack, $01
00097032 E10F                       	smpsAlterNote       $0F
00097034 E701                       	dc.b	smpsNoAttack, $01
00097036 E10B                       	smpsAlterNote       $0B
00097038 E701                       	dc.b	smpsNoAttack, $01
0009703A E105                       	smpsAlterNote       $05
0009703C E701                       	dc.b	smpsNoAttack, $01
0009703E E104                       	smpsAlterNote       $04
00097040 E701                       	dc.b	smpsNoAttack, $01
00097042 E108                       	smpsAlterNote       $08
00097044 E701                       	dc.b	smpsNoAttack, $01
00097046 E10E                       	smpsAlterNote       $0E
00097048 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009704C E10B                       	smpsAlterNote       $0B
0009704E E701                       	dc.b	smpsNoAttack, $01
00097050 E105                       	smpsAlterNote       $05
00097052 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097056 E10B                       	smpsAlterNote       $0B
00097058 E701                       	dc.b	smpsNoAttack, $01
0009705A E10E                       	smpsAlterNote       $0E
0009705C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097060 E108                       	smpsAlterNote       $08
00097062 E701                       	dc.b	smpsNoAttack, $01
00097064 E105                       	smpsAlterNote       $05
00097066 8001                       	dc.b	nRst, $01
0009706A E601                       	smpsAlterVol        $01
0009706C E10B                       	smpsAlterNote       $0B
0009706E BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0009707A 8004                       	dc.b	nRst, $04
0009707E E6FF                       	smpsAlterVol        $FF
00097080 E10D                       	smpsAlterNote       $0D
00097082 B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
0009708A E10C                       	smpsAlterNote       $0C
0009708C E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
00097091 E10D                       	smpsAlterNote       $0D
00097093 B60D                       	dc.b	nF4, $0D
00097095 E10A                       	smpsAlterNote       $0A
00097097 E701                       	dc.b	smpsNoAttack, $01
00097099 E106                       	smpsAlterNote       $06
0009709B E701                       	dc.b	smpsNoAttack, $01
0009709D E10A                       	smpsAlterNote       $0A
0009709F E701                       	dc.b	smpsNoAttack, $01
000970A1 E110                       	smpsAlterNote       $10
000970A3 E701                       	dc.b	smpsNoAttack, $01
000970A5 E111                       	smpsAlterNote       $11
000970A7 E701                       	dc.b	smpsNoAttack, $01
000970A9 E10D                       	smpsAlterNote       $0D
000970AB E701                       	dc.b	smpsNoAttack, $01
000970AD E107                       	smpsAlterNote       $07
000970AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000970B3 E10A                       	smpsAlterNote       $0A
000970B5 E701                       	dc.b	smpsNoAttack, $01
000970B7 E110                       	smpsAlterNote       $10
000970B9 E701                       	dc.b	smpsNoAttack, $01
000970BB E111                       	smpsAlterNote       $11
000970BD 8001                       	dc.b	nRst, $01
000970BF E10D                       	smpsAlterNote       $0D
000970C1 B80D                       	dc.b	nG4, $0D
000970C3 E10A                       	smpsAlterNote       $0A
000970C5 E701                       	dc.b	smpsNoAttack, $01
000970C7 E106                       	smpsAlterNote       $06
000970C9 E701                       	dc.b	smpsNoAttack, $01
000970CB E10A                       	smpsAlterNote       $0A
000970CD E701                       	dc.b	smpsNoAttack, $01
000970CF E110                       	smpsAlterNote       $10
000970D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000970D5 E10D                       	smpsAlterNote       $0D
000970D7 E701                       	dc.b	smpsNoAttack, $01
000970D9 E107                       	smpsAlterNote       $07
000970DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000970DF E10D                       	smpsAlterNote       $0D
000970E1 E701                       	dc.b	smpsNoAttack, $01
000970E3 E110                       	smpsAlterNote       $10
000970E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000970E9 E10A                       	smpsAlterNote       $0A
000970EB E701                       	dc.b	smpsNoAttack, $01
000970ED E106                       	smpsAlterNote       $06
000970EF E701                       	dc.b	smpsNoAttack, $01
000970F1 E107                       	smpsAlterNote       $07
000970F3 E701                       	dc.b	smpsNoAttack, $01
000970F5 E10D                       	smpsAlterNote       $0D
000970F7 E701                       	dc.b	smpsNoAttack, $01
000970F9 E111                       	smpsAlterNote       $11
000970FB E701                       	dc.b	smpsNoAttack, $01
000970FD E10D                       	smpsAlterNote       $0D
000970FF E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00097103 E10F                       	smpsAlterNote       $0F
00097105 BA02 8001                  	dc.b	nA4, $02, nRst, $01
00097109 E110                       	smpsAlterNote       $10
0009710B BB03                       	dc.b	nBb4, $03
0009710D E10F                       	smpsAlterNote       $0F
0009710F BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
00097115 E110                       	smpsAlterNote       $10
00097117 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0009711B E10F                       	smpsAlterNote       $0F
0009711D C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00097123 E110                       	smpsAlterNote       $10
00097125 D302 8001                  	dc.b	nBb6, $02, nRst, $01
00097129 E10F                       	smpsAlterNote       $0F
0009712B D20D                       	dc.b	nA6, $0D
0009712D E10C                       	smpsAlterNote       $0C
0009712F E701                       	dc.b	smpsNoAttack, $01
00097131 E108                       	smpsAlterNote       $08
00097133 E701                       	dc.b	smpsNoAttack, $01
00097135 E10C                       	smpsAlterNote       $0C
00097137 E701                       	dc.b	smpsNoAttack, $01
00097139 E10F                       	smpsAlterNote       $0F
0009713B E701                       	dc.b	smpsNoAttack, $01
0009713D E113                       	smpsAlterNote       $13
0009713F E701                       	dc.b	smpsNoAttack, $01
00097141 E10F                       	smpsAlterNote       $0F
00097143 E701                       	dc.b	smpsNoAttack, $01
00097145 E109                       	smpsAlterNote       $09
00097147 E701                       	dc.b	smpsNoAttack, $01
00097149 E108                       	smpsAlterNote       $08
0009714B E701                       	dc.b	smpsNoAttack, $01
0009714D E10C                       	smpsAlterNote       $0C
0009714F E701                       	dc.b	smpsNoAttack, $01
00097151 E112                       	smpsAlterNote       $12
00097153 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097157 E10F                       	smpsAlterNote       $0F
00097159 E701                       	dc.b	smpsNoAttack, $01
0009715B E109                       	smpsAlterNote       $09
0009715D E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00097163 E10D                       	smpsAlterNote       $0D
00097165 CE07                       	dc.b	nF6, $07
00097167 E10C                       	smpsAlterNote       $0C
00097169 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0009716D E10D                       	smpsAlterNote       $0D
0009716F CE03                       	dc.b	nF6, $03
00097171 E10C                       	smpsAlterNote       $0C
00097173 CC0D                       	dc.b	nEb6, $0D
00097175 E109                       	smpsAlterNote       $09
00097177 E701                       	dc.b	smpsNoAttack, $01
00097179 E106                       	smpsAlterNote       $06
0009717B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009717F E10C                       	smpsAlterNote       $0C
00097181 E701                       	dc.b	smpsNoAttack, $01
00097183 E110                       	smpsAlterNote       $10
00097185 E701                       	dc.b	smpsNoAttack, $01
00097187 E10F                       	smpsAlterNote       $0F
00097189 E701                       	dc.b	smpsNoAttack, $01
0009718B E109                       	smpsAlterNote       $09
0009718D E701                       	dc.b	smpsNoAttack, $01
0009718F E105                       	smpsAlterNote       $05
00097191 E701                       	dc.b	smpsNoAttack, $01
00097193 E109                       	smpsAlterNote       $09
00097195 E701                       	dc.b	smpsNoAttack, $01
00097197 E10C                       	smpsAlterNote       $0C
00097199 E701                       	dc.b	smpsNoAttack, $01
0009719B E110                       	smpsAlterNote       $10
0009719D E701                       	dc.b	smpsNoAttack, $01
0009719F E10C                       	smpsAlterNote       $0C
000971A1 E701                       	dc.b	smpsNoAttack, $01
000971A3 E106                       	smpsAlterNote       $06
000971A5 E701                       	dc.b	smpsNoAttack, $01
000971A7 E105                       	smpsAlterNote       $05
000971A9 E701                       	dc.b	smpsNoAttack, $01
000971AB E109                       	smpsAlterNote       $09
000971AD E701                       	dc.b	smpsNoAttack, $01
000971AF E10F                       	smpsAlterNote       $0F
000971B1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000971B5 E10C                       	smpsAlterNote       $0C
000971B7 E701                       	dc.b	smpsNoAttack, $01
000971B9 E10B                       	smpsAlterNote       $0B
000971BB CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
000971C5 E10F                       	smpsAlterNote       $0F
000971C7 C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
000971D1 E10D                       	smpsAlterNote       $0D
000971D3 C203                       	dc.b	nF5, $03
000971D5 E10C                       	smpsAlterNote       $0C
000971D7 C103 8001                  	dc.b	nE5, $03, nRst, $01
000971DB E10D                       	smpsAlterNote       $0D
000971DD C20D                       	dc.b	nF5, $0D
000971DF E10C                       	smpsAlterNote       $0C
000971E1 C10D 8001                  	dc.b	nE5, $0D, nRst, $01
000971E5 E10B                       	smpsAlterNote       $0B
000971E7 BF0D                       	dc.b	nD5, $0D
000971E9 E108                       	smpsAlterNote       $08
000971EB E701                       	dc.b	smpsNoAttack, $01
000971ED E104                       	smpsAlterNote       $04
000971EF E701                       	dc.b	smpsNoAttack, $01
000971F1 E108                       	smpsAlterNote       $08
000971F3 E701                       	dc.b	smpsNoAttack, $01
000971F5 E10E                       	smpsAlterNote       $0E
000971F7 E701                       	dc.b	smpsNoAttack, $01
000971F9 E10F                       	smpsAlterNote       $0F
000971FB E701                       	dc.b	smpsNoAttack, $01
000971FD E10B                       	smpsAlterNote       $0B
000971FF E701                       	dc.b	smpsNoAttack, $01
00097201 E105                       	smpsAlterNote       $05
00097203 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097207 E108                       	smpsAlterNote       $08
00097209 E701                       	dc.b	smpsNoAttack, $01
0009720B E10E                       	smpsAlterNote       $0E
0009720D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097211 E108                       	smpsAlterNote       $08
00097213 E701                       	dc.b	smpsNoAttack, $01
00097215 E105                       	smpsAlterNote       $05
00097217 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009721B E10B                       	smpsAlterNote       $0B
0009721D E701                       	dc.b	smpsNoAttack, $01
0009721F E10F                       	smpsAlterNote       $0F
00097221 E701                       	dc.b	smpsNoAttack, $01
00097223 E10E                       	smpsAlterNote       $0E
00097225 E701                       	dc.b	smpsNoAttack, $01
00097227 E108                       	smpsAlterNote       $08
00097229 E701                       	dc.b	smpsNoAttack, $01
0009722B E104                       	smpsAlterNote       $04
0009722D E701                       	dc.b	smpsNoAttack, $01
0009722F E108                       	smpsAlterNote       $08
00097231 E701                       	dc.b	smpsNoAttack, $01
00097233 E10B                       	smpsAlterNote       $0B
00097235 E701                       	dc.b	smpsNoAttack, $01
00097237 E10F                       	smpsAlterNote       $0F
00097239 E701                       	dc.b	smpsNoAttack, $01
0009723B E10B                       	smpsAlterNote       $0B
0009723D E701                       	dc.b	smpsNoAttack, $01
0009723F E105                       	smpsAlterNote       $05
00097241 E701                       	dc.b	smpsNoAttack, $01
00097243 E104                       	smpsAlterNote       $04
00097245 E701                       	dc.b	smpsNoAttack, $01
00097247 E108                       	smpsAlterNote       $08
00097249 E701                       	dc.b	smpsNoAttack, $01
0009724B E10E                       	smpsAlterNote       $0E
0009724D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097251 E10B                       	smpsAlterNote       $0B
00097253 E701                       	dc.b	smpsNoAttack, $01
00097255 E105                       	smpsAlterNote       $05
00097257 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009725B E10B                       	smpsAlterNote       $0B
0009725D E701                       	dc.b	smpsNoAttack, $01
0009725F E10E                       	smpsAlterNote       $0E
00097261 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097265 E108                       	smpsAlterNote       $08
00097267 E701                       	dc.b	smpsNoAttack, $01
00097269 E104                       	smpsAlterNote       $04
0009726B E701                       	dc.b	smpsNoAttack, $01
0009726D E105                       	smpsAlterNote       $05
0009726F E701                       	dc.b	smpsNoAttack, $01
00097271 E10B                       	smpsAlterNote       $0B
00097273 E701                       	dc.b	smpsNoAttack, $01
00097275 E10F                       	smpsAlterNote       $0F
00097277 E701                       	dc.b	smpsNoAttack, $01
00097279 E10B                       	smpsAlterNote       $0B
0009727B E701                       	dc.b	smpsNoAttack, $01
0009727D E108                       	smpsAlterNote       $08
0009727F E701                       	dc.b	smpsNoAttack, $01
00097281 E104                       	smpsAlterNote       $04
00097283 E701                       	dc.b	smpsNoAttack, $01
00097285 E108                       	smpsAlterNote       $08
00097287 E701                       	dc.b	smpsNoAttack, $01
00097289 E10E                       	smpsAlterNote       $0E
0009728B E701                       	dc.b	smpsNoAttack, $01
0009728D E10F                       	smpsAlterNote       $0F
0009728F E701                       	dc.b	smpsNoAttack, $01
00097291 E10B                       	smpsAlterNote       $0B
00097293 E701                       	dc.b	smpsNoAttack, $01
00097295 E105                       	smpsAlterNote       $05
00097297 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009729B E108                       	smpsAlterNote       $08
0009729D E701                       	dc.b	smpsNoAttack, $01
0009729F E10E                       	smpsAlterNote       $0E
000972A1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000972A5 E108                       	smpsAlterNote       $08
000972A7 E701                       	dc.b	smpsNoAttack, $01
000972A9 E105                       	smpsAlterNote       $05
000972AB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000972AF E10B                       	smpsAlterNote       $0B
000972B1 E701                       	dc.b	smpsNoAttack, $01
000972B3 E10F                       	smpsAlterNote       $0F
000972B5 E701                       	dc.b	smpsNoAttack, $01
000972B7 E10E                       	smpsAlterNote       $0E
000972B9 E701                       	dc.b	smpsNoAttack, $01
000972BB E108                       	smpsAlterNote       $08
000972BD E701                       	dc.b	smpsNoAttack, $01
000972BF E104                       	smpsAlterNote       $04
000972C1 E701                       	dc.b	smpsNoAttack, $01
000972C3 E108                       	smpsAlterNote       $08
000972C5 E701                       	dc.b	smpsNoAttack, $01
000972C7 E10B                       	smpsAlterNote       $0B
000972C9 E701                       	dc.b	smpsNoAttack, $01
000972CB E10F                       	smpsAlterNote       $0F
000972CD E701                       	dc.b	smpsNoAttack, $01
000972CF E10B                       	smpsAlterNote       $0B
000972D1 E701                       	dc.b	smpsNoAttack, $01
000972D3 E105                       	smpsAlterNote       $05
000972D5 E701                       	dc.b	smpsNoAttack, $01
000972D7 E104                       	smpsAlterNote       $04
000972D9 E701                       	dc.b	smpsNoAttack, $01
000972DB E105                       	smpsAlterNote       $05
000972DD 8001                       	dc.b	nRst, $01
000972DF E10D                       	smpsAlterNote       $0D
000972E1 C20D                       	dc.b	nF5, $0D
000972E3 E107                       	smpsAlterNote       $07
000972E5 E701                       	dc.b	smpsNoAttack, $01
000972E7 E106                       	smpsAlterNote       $06
000972E9 E701                       	dc.b	smpsNoAttack, $01
000972EB E10A                       	smpsAlterNote       $0A
000972ED E701                       	dc.b	smpsNoAttack, $01
000972EF E110                       	smpsAlterNote       $10
000972F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000972F5 E10D                       	smpsAlterNote       $0D
000972F7 E701                       	dc.b	smpsNoAttack, $01
000972F9 E107                       	smpsAlterNote       $07
000972FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000972FF E10D                       	smpsAlterNote       $0D
00097301 E701                       	dc.b	smpsNoAttack, $01
00097303 E110                       	smpsAlterNote       $10
00097305 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097309 E10A                       	smpsAlterNote       $0A
0009730B E701                       	dc.b	smpsNoAttack, $01
0009730D E106                       	smpsAlterNote       $06
0009730F E701                       	dc.b	smpsNoAttack, $01
00097311 E107                       	smpsAlterNote       $07
00097313 E701                       	dc.b	smpsNoAttack, $01
00097315 E10D                       	smpsAlterNote       $0D
00097317 E701                       	dc.b	smpsNoAttack, $01
00097319 E111                       	smpsAlterNote       $11
0009731B E701                       	dc.b	smpsNoAttack, $01
0009731D E10D                       	smpsAlterNote       $0D
0009731F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00097323 E10C                       	smpsAlterNote       $0C
00097325 C10D                       	dc.b	nE5, $0D
00097327 E10D                       	smpsAlterNote       $0D
00097329 C20A                       	dc.b	nF5, $0A
0009732B E10C                       	smpsAlterNote       $0C
0009732D C10E                       	dc.b	nE5, $0E
0009732F E106                       	smpsAlterNote       $06
00097331 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097335 E10C                       	smpsAlterNote       $0C
00097337 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009733B E10B                       	smpsAlterNote       $0B
0009733D BF0D                       	dc.b	nD5, $0D
0009733F E10C                       	smpsAlterNote       $0C
00097341 C107                       	dc.b	nE5, $07
00097343 E10D                       	smpsAlterNote       $0D
00097345 C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
0009734F E110                       	smpsAlterNote       $10
00097351 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
00097357 E10F                       	smpsAlterNote       $0F
00097359 C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
00097361 E10D                       	smpsAlterNote       $0D
00097363 D003                       	dc.b	nG6, $03
00097367 E0C0                       	smpsPan             panCenter, $00
00097369 E6FF                       	smpsAlterVol        $FF
0009736B AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
00097377 8001                       	dc.b	nRst, $01
00097379 E10C                       	smpsAlterNote       $0C
0009737B A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
00097385 E604                       	smpsAlterVol        $04
00097387 E10B                       	smpsAlterNote       $0B
00097389 B306 8001                  	dc.b	nD4, $06, nRst, $01
0009738D E10F                       	smpsAlterNote       $0F
0009738F AE03                       	dc.b	nA3, $03
00097391 E10D                       	smpsAlterNote       $0D
00097393 B603 8001                  	dc.b	nF4, $03, nRst, $01
00097397 E10C                       	smpsAlterNote       $0C
00097399 B506 8001                  	dc.b	nE4, $06, nRst, $01
0009739D E10B                       	smpsAlterNote       $0B
0009739F B302 8001                  	dc.b	nD4, $02, nRst, $01
000973A3 E10A                       	smpsAlterNote       $0A
000973A5 B103                       	dc.b	nC4, $03
000973A7 E110                       	smpsAlterNote       $10
000973A9 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
000973AD E10F                       	smpsAlterNote       $0F
000973AF AE03 800A                  	dc.b	nA3, $03, nRst, $0A
000973B3 E080                       	smpsPan             panLeft, $00
000973B5 01                         	dc.b	$01
000973B8 E6FB                       	smpsAlterVol        $FB
000973BA E1E4                       	smpsAlterNote       $E4
000973BC C501                       	dc.b	nAb5, $01
000973BE E1F4                       	smpsAlterNote       $F4
000973C0 E701                       	dc.b	smpsNoAttack, $01
000973C2 E104                       	smpsAlterNote       $04
000973C4 E701                       	dc.b	smpsNoAttack, $01
000973C6 E114                       	smpsAlterNote       $14
000973C8 E701                       	dc.b	smpsNoAttack, $01
000973CA E11C                       	smpsAlterNote       $1C
000973CC E701                       	dc.b	smpsNoAttack, $01
000973CE E1EF                       	smpsAlterNote       $EF
000973D0 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000973D3 E1FF                       	smpsAlterNote       $FF
000973D5 E701                       	dc.b	smpsNoAttack, $01
000973D7 E10F                       	smpsAlterNote       $0F
000973D9 C606                       	dc.b	nA5, $06
000973DB E109                       	smpsAlterNote       $09
000973DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000973E1 E10F                       	smpsAlterNote       $0F
000973E3 E701                       	dc.b	smpsNoAttack, $01
000973E5 E112                       	smpsAlterNote       $12
000973E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000973EB E10C                       	smpsAlterNote       $0C
000973ED E701                       	dc.b	smpsNoAttack, $01
000973EF E108                       	smpsAlterNote       $08
000973F1 E701                       	dc.b	smpsNoAttack, $01
000973F3 E109                       	smpsAlterNote       $09
000973F5 E701                       	dc.b	smpsNoAttack, $01
000973F7 E10F                       	smpsAlterNote       $0F
000973F9 E701                       	dc.b	smpsNoAttack, $01
000973FB E113                       	smpsAlterNote       $13
000973FD E701                       	dc.b	smpsNoAttack, $01
000973FF E10F                       	smpsAlterNote       $0F
00097401 E701                       	dc.b	smpsNoAttack, $01
00097403 E10C                       	smpsAlterNote       $0C
00097405 E701                       	dc.b	smpsNoAttack, $01
00097407 E108                       	smpsAlterNote       $08
00097409 E701                       	dc.b	smpsNoAttack, $01
0009740B E10C                       	smpsAlterNote       $0C
0009740D E701                       	dc.b	smpsNoAttack, $01
0009740F E112                       	smpsAlterNote       $12
00097411 E701                       	dc.b	smpsNoAttack, $01
00097413 E113                       	smpsAlterNote       $13
00097415 E701                       	dc.b	smpsNoAttack, $01
00097417 E10F                       	smpsAlterNote       $0F
00097419 E701                       	dc.b	smpsNoAttack, $01
0009741B E109                       	smpsAlterNote       $09
0009741D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097421 E10C                       	smpsAlterNote       $0C
00097423 E701                       	dc.b	smpsNoAttack, $01
00097425 E112                       	smpsAlterNote       $12
00097427 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009742B E10C                       	smpsAlterNote       $0C
0009742D E701                       	dc.b	smpsNoAttack, $01
0009742F E109                       	smpsAlterNote       $09
00097431 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097435 E10F                       	smpsAlterNote       $0F
00097437 E701                       	dc.b	smpsNoAttack, $01
00097439 E113                       	smpsAlterNote       $13
0009743B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009743F E10D                       	smpsAlterNote       $0D
00097441 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
00097447 E10C                       	smpsAlterNote       $0C
00097449 C102 8001                  	dc.b	nE5, $02, nRst, $01
0009744D E10D                       	smpsAlterNote       $0D
0009744F C201 8001                  	dc.b	nF5, $01, nRst, $01
00097453 E10C                       	smpsAlterNote       $0C
00097455 C102                       	dc.b	nE5, $02
00097457 E10B                       	smpsAlterNote       $0B
00097459 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0009745D E10C                       	smpsAlterNote       $0C
0009745F C101 8001                  	dc.b	nE5, $01, nRst, $01
00097463 E10B                       	smpsAlterNote       $0B
00097465 BF02                       	dc.b	nD5, $02
00097467 E10A                       	smpsAlterNote       $0A
00097469 BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
00097473 E110                       	smpsAlterNote       $10
00097475 BB02                       	dc.b	nBb4, $02
00097477 E10A                       	smpsAlterNote       $0A
00097479 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0009747D E110                       	smpsAlterNote       $10
0009747F BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00097483 E10F                       	smpsAlterNote       $0F
00097485 BA01 8001                  	dc.b	nA4, $01, nRst, $01
00097489 E110                       	smpsAlterNote       $10
0009748B BB02                       	dc.b	nBb4, $02
0009748D E10F                       	smpsAlterNote       $0F
0009748F BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
00097499 E10C                       	smpsAlterNote       $0C
0009749B B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
000974A3 E10B                       	smpsAlterNote       $0B
000974A5 BE01 8001                  	dc.b	nCs5, $01, nRst, $01
000974A9 E10F                       	smpsAlterNote       $0F
000974AB BA02                       	dc.b	nA4, $02
000974AF E0C0                       	smpsPan             panCenter, $00
000974B1 E601                       	smpsAlterVol        $01
000974B3 E109                       	smpsAlterNote       $09
000974B5 AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
000974C1 E108                       	smpsAlterNote       $08
000974C3 A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
000974C9 E107                       	smpsAlterNote       $07
000974CB B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
000974D1 E109                       	smpsAlterNote       $09
000974D3 B603 8001                  	dc.b	nF4, $03, nRst, $01
000974D7 E108                       	smpsAlterNote       $08
000974D9 B506 8001                  	dc.b	nE4, $06, nRst, $01
000974DD E107                       	smpsAlterNote       $07
000974DF B302 8001                  	dc.b	nD4, $02, nRst, $01
000974E3 E106                       	smpsAlterNote       $06
000974E5 B103                       	dc.b	nC4, $03
000974E7 E10C                       	smpsAlterNote       $0C
000974E9 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
000974EF E080                       	smpsPan             panLeft, $00
000974F1 07                         	dc.b	$07
000974F2 E6FE                       	smpsAlterVol        $FE
000974F4 E10B                       	smpsAlterNote       $0B
000974F6 B20D                       	dc.b	nCs4, $0D
000974F8 E105                       	smpsAlterNote       $05
000974FA E701                       	dc.b	smpsNoAttack, $01
000974FC E104                       	smpsAlterNote       $04
000974FE E701                       	dc.b	smpsNoAttack, $01
00097500 E108                       	smpsAlterNote       $08
00097502 E701                       	dc.b	smpsNoAttack, $01
00097504 E10E                       	smpsAlterNote       $0E
00097506 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009750A E10B                       	smpsAlterNote       $0B
0009750C E701                       	dc.b	smpsNoAttack, $01
0009750E E105                       	smpsAlterNote       $05
00097510 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097514 E10B                       	smpsAlterNote       $0B
00097516 E701                       	dc.b	smpsNoAttack, $01
00097518 E10E                       	smpsAlterNote       $0E
0009751A E701                       	dc.b	smpsNoAttack, $01
0009751C E10F                       	smpsAlterNote       $0F
0009751E 8001                       	dc.b	nRst, $01
00097520 E10B                       	smpsAlterNote       $0B
00097522 B30D                       	dc.b	nD4, $0D
00097524 E105                       	smpsAlterNote       $05
00097526 E701                       	dc.b	smpsNoAttack, $01
00097528 E104                       	smpsAlterNote       $04
0009752A E701                       	dc.b	smpsNoAttack, $01
0009752C E108                       	smpsAlterNote       $08
0009752E E701                       	dc.b	smpsNoAttack, $01
00097530 E10E                       	smpsAlterNote       $0E
00097532 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097536 E10B                       	smpsAlterNote       $0B
00097538 E701                       	dc.b	smpsNoAttack, $01
0009753A E105                       	smpsAlterNote       $05
0009753C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097540 E10B                       	smpsAlterNote       $0B
00097542 E701                       	dc.b	smpsNoAttack, $01
00097544 E10E                       	smpsAlterNote       $0E
00097546 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009754A E108                       	smpsAlterNote       $08
0009754C E701                       	dc.b	smpsNoAttack, $01
0009754E E104                       	smpsAlterNote       $04
00097550 E701                       	dc.b	smpsNoAttack, $01
00097552 E105                       	smpsAlterNote       $05
00097554 E701                       	dc.b	smpsNoAttack, $01
00097556 E10B                       	smpsAlterNote       $0B
00097558 E701                       	dc.b	smpsNoAttack, $01
0009755A E10F                       	smpsAlterNote       $0F
0009755C E701                       	dc.b	smpsNoAttack, $01
0009755E E10B                       	smpsAlterNote       $0B
00097560 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00097564 E10C                       	smpsAlterNote       $0C
00097566 B50D                       	dc.b	nE4, $0D
00097568 E106                       	smpsAlterNote       $06
0009756A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009756E E10C                       	smpsAlterNote       $0C
00097570 E701                       	dc.b	smpsNoAttack, $01
00097572 E10F                       	smpsAlterNote       $0F
00097574 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097578 E109                       	smpsAlterNote       $09
0009757A E701                       	dc.b	smpsNoAttack, $01
0009757C E105                       	smpsAlterNote       $05
0009757E E701                       	dc.b	smpsNoAttack, $01
00097580 E106                       	smpsAlterNote       $06
00097582 E701                       	dc.b	smpsNoAttack, $01
00097584 E10C                       	smpsAlterNote       $0C
00097586 E701                       	dc.b	smpsNoAttack, $01
00097588 E110                       	smpsAlterNote       $10
0009758A E701                       	dc.b	smpsNoAttack, $01
0009758C E10B                       	smpsAlterNote       $0B
0009758E B30E                       	dc.b	nD4, $0E
00097590 E105                       	smpsAlterNote       $05
00097592 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097596 E10B                       	smpsAlterNote       $0B
00097598 E701                       	dc.b	smpsNoAttack, $01
0009759A E10E                       	smpsAlterNote       $0E
0009759C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000975A0 E108                       	smpsAlterNote       $08
000975A2 E701                       	dc.b	smpsNoAttack, $01
000975A4 E104                       	smpsAlterNote       $04
000975A6 E701                       	dc.b	smpsNoAttack, $01
000975A8 E105                       	smpsAlterNote       $05
000975AA E701                       	dc.b	smpsNoAttack, $01
000975AC E10B                       	smpsAlterNote       $0B
000975AE E701                       	dc.b	smpsNoAttack, $01
000975B0 E10F                       	smpsAlterNote       $0F
000975B2 E701                       	dc.b	smpsNoAttack, $01
000975B4 E10B                       	smpsAlterNote       $0B
000975B6 E701                       	dc.b	smpsNoAttack, $01
000975B8 E108                       	smpsAlterNote       $08
000975BA E701                       	dc.b	smpsNoAttack, $01
000975BC E104                       	smpsAlterNote       $04
000975BE E701                       	dc.b	smpsNoAttack, $01
000975C0 E108                       	smpsAlterNote       $08
000975C2 E701                       	dc.b	smpsNoAttack, $01
000975C4 E10E                       	smpsAlterNote       $0E
000975C6 E701                       	dc.b	smpsNoAttack, $01
000975C8 E10F                       	smpsAlterNote       $0F
000975CA E701                       	dc.b	smpsNoAttack, $01
000975CC E10B                       	smpsAlterNote       $0B
000975CE E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
000975D2 E108                       	smpsAlterNote       $08
000975D4 E701                       	dc.b	smpsNoAttack, $01
000975D6 E105                       	smpsAlterNote       $05
000975D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000975DC E10B                       	smpsAlterNote       $0B
000975DE E701                       	dc.b	smpsNoAttack, $01
000975E0 E10F                       	smpsAlterNote       $0F
000975E2 E701                       	dc.b	smpsNoAttack, $01
000975E4 E10E                       	smpsAlterNote       $0E
000975E6 E701                       	dc.b	smpsNoAttack, $01
000975E8 E108                       	smpsAlterNote       $08
000975EA E701                       	dc.b	smpsNoAttack, $01
000975EC E104                       	smpsAlterNote       $04
000975EE E701                       	dc.b	smpsNoAttack, $01
000975F0 E108                       	smpsAlterNote       $08
000975F2 E701                       	dc.b	smpsNoAttack, $01
000975F4 E10B                       	smpsAlterNote       $0B
000975F6 E701                       	dc.b	smpsNoAttack, $01
000975F8 E10F                       	smpsAlterNote       $0F
000975FA E701                       	dc.b	smpsNoAttack, $01
000975FC E10B                       	smpsAlterNote       $0B
000975FE B30D                       	dc.b	nD4, $0D
00097600 E108                       	smpsAlterNote       $08
00097602 E701                       	dc.b	smpsNoAttack, $01
00097604 E105                       	smpsAlterNote       $05
00097606 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009760A E10B                       	smpsAlterNote       $0B
0009760C E701                       	dc.b	smpsNoAttack, $01
0009760E E10F                       	smpsAlterNote       $0F
00097610 E701                       	dc.b	smpsNoAttack, $01
00097612 E10E                       	smpsAlterNote       $0E
00097614 E701                       	dc.b	smpsNoAttack, $01
00097616 E108                       	smpsAlterNote       $08
00097618 E701                       	dc.b	smpsNoAttack, $01
0009761A E104                       	smpsAlterNote       $04
0009761C E701                       	dc.b	smpsNoAttack, $01
0009761E E108                       	smpsAlterNote       $08
00097620 E701                       	dc.b	smpsNoAttack, $01
00097622 E10B                       	smpsAlterNote       $0B
00097624 E701                       	dc.b	smpsNoAttack, $01
00097626 E10F                       	smpsAlterNote       $0F
00097628 E701                       	dc.b	smpsNoAttack, $01
0009762A E10B                       	smpsAlterNote       $0B
0009762C E701                       	dc.b	smpsNoAttack, $01
0009762E E105                       	smpsAlterNote       $05
00097630 E701                       	dc.b	smpsNoAttack, $01
00097632 E104                       	smpsAlterNote       $04
00097634 E701                       	dc.b	smpsNoAttack, $01
00097636 E108                       	smpsAlterNote       $08
00097638 E701                       	dc.b	smpsNoAttack, $01
0009763A E10E                       	smpsAlterNote       $0E
0009763C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097640 E10B                       	smpsAlterNote       $0B
00097642 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
00097646 E108                       	smpsAlterNote       $08
00097648 E701                       	dc.b	smpsNoAttack, $01
0009764A E104                       	smpsAlterNote       $04
0009764C E701                       	dc.b	smpsNoAttack, $01
0009764E E108                       	smpsAlterNote       $08
00097650 E701                       	dc.b	smpsNoAttack, $01
00097652 E10B                       	smpsAlterNote       $0B
00097654 E701                       	dc.b	smpsNoAttack, $01
00097658 E0C0                       	smpsPan             panCenter, $00
0009765A E601                       	smpsAlterVol        $01
0009765C E108                       	smpsAlterNote       $08
0009765E A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
0009766A 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
00097672 E080                       	smpsPan             panLeft, $00
00097674 07                         	dc.b	$07
00097675 E6FF                       	smpsAlterVol        $FF
00097677 E10D                       	smpsAlterNote       $0D
00097679 B60D                       	dc.b	nF4, $0D
0009767B E10A                       	smpsAlterNote       $0A
0009767D E701                       	dc.b	smpsNoAttack, $01
0009767F E106                       	smpsAlterNote       $06
00097681 E701                       	dc.b	smpsNoAttack, $01
00097683 E10A                       	smpsAlterNote       $0A
00097685 E701                       	dc.b	smpsNoAttack, $01
00097687 E110                       	smpsAlterNote       $10
00097689 E701                       	dc.b	smpsNoAttack, $01
0009768B E111                       	smpsAlterNote       $11
0009768D E701                       	dc.b	smpsNoAttack, $01
0009768F E10D                       	smpsAlterNote       $0D
00097691 E701                       	dc.b	smpsNoAttack, $01
00097693 E107                       	smpsAlterNote       $07
00097695 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097699 E10A                       	smpsAlterNote       $0A
0009769B E701                       	dc.b	smpsNoAttack, $01
0009769D E110                       	smpsAlterNote       $10
0009769F E701                       	dc.b	smpsNoAttack, $01
000976A1 E111                       	smpsAlterNote       $11
000976A3 8001                       	dc.b	nRst, $01
000976A5 E10D                       	smpsAlterNote       $0D
000976A7 B80D                       	dc.b	nG4, $0D
000976A9 E10A                       	smpsAlterNote       $0A
000976AB E701                       	dc.b	smpsNoAttack, $01
000976AD E106                       	smpsAlterNote       $06
000976AF E701                       	dc.b	smpsNoAttack, $01
000976B1 E10A                       	smpsAlterNote       $0A
000976B3 E701                       	dc.b	smpsNoAttack, $01
000976B5 E110                       	smpsAlterNote       $10
000976B7 E701                       	dc.b	smpsNoAttack, $01
000976B9 E111                       	smpsAlterNote       $11
000976BB E701                       	dc.b	smpsNoAttack, $01
000976BD E10D                       	smpsAlterNote       $0D
000976BF E701                       	dc.b	smpsNoAttack, $01
000976C1 E107                       	smpsAlterNote       $07
000976C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000976C7 E10D                       	smpsAlterNote       $0D
000976C9 E701                       	dc.b	smpsNoAttack, $01
000976CB E110                       	smpsAlterNote       $10
000976CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000976D1 E10A                       	smpsAlterNote       $0A
000976D3 E701                       	dc.b	smpsNoAttack, $01
000976D5 E106                       	smpsAlterNote       $06
000976D7 E701                       	dc.b	smpsNoAttack, $01
000976D9 E107                       	smpsAlterNote       $07
000976DB E701                       	dc.b	smpsNoAttack, $01
000976DD E10D                       	smpsAlterNote       $0D
000976DF E701                       	dc.b	smpsNoAttack, $01
000976E1 E111                       	smpsAlterNote       $11
000976E3 E701                       	dc.b	smpsNoAttack, $01
000976E5 E10D                       	smpsAlterNote       $0D
000976E7 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000976EB E10F                       	smpsAlterNote       $0F
000976ED BA0D                       	dc.b	nA4, $0D
000976EF E109                       	smpsAlterNote       $09
000976F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000976F5 E10C                       	smpsAlterNote       $0C
000976F7 E701                       	dc.b	smpsNoAttack, $01
000976F9 E112                       	smpsAlterNote       $12
000976FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000976FF E10C                       	smpsAlterNote       $0C
00097701 E701                       	dc.b	smpsNoAttack, $01
00097703 E109                       	smpsAlterNote       $09
00097705 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097709 E10F                       	smpsAlterNote       $0F
0009770B E701                       	dc.b	smpsNoAttack, $01
0009770D E113                       	smpsAlterNote       $13
0009770F E701                       	dc.b	smpsNoAttack, $01
00097711 E112                       	smpsAlterNote       $12
00097713 E701                       	dc.b	smpsNoAttack, $01
00097715 E10C                       	smpsAlterNote       $0C
00097717 E701                       	dc.b	smpsNoAttack, $01
00097719 E108                       	smpsAlterNote       $08
0009771B E701                       	dc.b	smpsNoAttack, $01
0009771D E10C                       	smpsAlterNote       $0C
0009771F E701                       	dc.b	smpsNoAttack, $01
00097721 E10F                       	smpsAlterNote       $0F
00097723 E701                       	dc.b	smpsNoAttack, $01
00097725 E113                       	smpsAlterNote       $13
00097727 E701                       	dc.b	smpsNoAttack, $01
00097729 E10F                       	smpsAlterNote       $0F
0009772B E701                       	dc.b	smpsNoAttack, $01
0009772D E109                       	smpsAlterNote       $09
0009772F E701                       	dc.b	smpsNoAttack, $01
00097731 E108                       	smpsAlterNote       $08
00097733 E701                       	dc.b	smpsNoAttack, $01
00097735 E10C                       	smpsAlterNote       $0C
00097737 E701                       	dc.b	smpsNoAttack, $01
00097739 E112                       	smpsAlterNote       $12
0009773B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009773F E10F                       	smpsAlterNote       $0F
00097741 E701                       	dc.b	smpsNoAttack, $01
00097743 E109                       	smpsAlterNote       $09
00097745 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097749 E10F                       	smpsAlterNote       $0F
0009774B E701                       	dc.b	smpsNoAttack, $01
0009774D E112                       	smpsAlterNote       $12
0009774F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097753 E10C                       	smpsAlterNote       $0C
00097755 E701                       	dc.b	smpsNoAttack, $01
00097757 E108                       	smpsAlterNote       $08
00097759 E701                       	dc.b	smpsNoAttack, $01
0009775B E109                       	smpsAlterNote       $09
0009775D E701                       	dc.b	smpsNoAttack, $01
0009775F E10C                       	smpsAlterNote       $0C
00097761 B50A                       	dc.b	nE4, $0A
00097763 E10D                       	smpsAlterNote       $0D
00097765 B60E                       	dc.b	nF4, $0E
00097767 E107                       	smpsAlterNote       $07
00097769 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009776D E10D                       	smpsAlterNote       $0D
0009776F E701                       	dc.b	smpsNoAttack, $01
00097771 E110                       	smpsAlterNote       $10
00097773 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097777 E10A                       	smpsAlterNote       $0A
00097779 E701                       	dc.b	smpsNoAttack, $01
0009777B E106                       	smpsAlterNote       $06
0009777D E701                       	dc.b	smpsNoAttack, $01
0009777F E107                       	smpsAlterNote       $07
00097781 E701                       	dc.b	smpsNoAttack, $01
00097783 E10D                       	smpsAlterNote       $0D
00097785 E701                       	dc.b	smpsNoAttack, $01
00097787 E111                       	smpsAlterNote       $11
00097789 E701                       	dc.b	smpsNoAttack, $01
0009778B E10D                       	smpsAlterNote       $0D
0009778D B80D                       	dc.b	nG4, $0D
0009778F E10A                       	smpsAlterNote       $0A
00097791 E701                       	dc.b	smpsNoAttack, $01
00097793 E107                       	smpsAlterNote       $07
00097795 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097799 E10D                       	smpsAlterNote       $0D
0009779B E701                       	dc.b	smpsNoAttack, $01
0009779D E111                       	smpsAlterNote       $11
0009779F E701                       	dc.b	smpsNoAttack, $01
000977A1 E110                       	smpsAlterNote       $10
000977A3 E701                       	dc.b	smpsNoAttack, $01
000977A5 E10A                       	smpsAlterNote       $0A
000977A7 E701                       	dc.b	smpsNoAttack, $01
000977A9 E106                       	smpsAlterNote       $06
000977AB E701                       	dc.b	smpsNoAttack, $01
000977AD E10A                       	smpsAlterNote       $0A
000977AF E701                       	dc.b	smpsNoAttack, $01
000977B1 E10D                       	smpsAlterNote       $0D
000977B3 E701                       	dc.b	smpsNoAttack, $01
000977B5 E111                       	smpsAlterNote       $11
000977B7 E701                       	dc.b	smpsNoAttack, $01
000977B9 E10D                       	smpsAlterNote       $0D
000977BB E701                       	dc.b	smpsNoAttack, $01
000977BD E107                       	smpsAlterNote       $07
000977BF E701                       	dc.b	smpsNoAttack, $01
000977C1 E106                       	smpsAlterNote       $06
000977C3 E701                       	dc.b	smpsNoAttack, $01
000977C5 E10A                       	smpsAlterNote       $0A
000977C7 E701                       	dc.b	smpsNoAttack, $01
000977C9 E110                       	smpsAlterNote       $10
000977CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000977CF E10D                       	smpsAlterNote       $0D
000977D1 E701                       	dc.b	smpsNoAttack, $01
000977D3 E10F                       	smpsAlterNote       $0F
000977D5 BA0D                       	dc.b	nA4, $0D
000977D7 E10C                       	smpsAlterNote       $0C
000977D9 E701                       	dc.b	smpsNoAttack, $01
000977DB E108                       	smpsAlterNote       $08
000977DD E701                       	dc.b	smpsNoAttack, $01
000977DF E109                       	smpsAlterNote       $09
000977E1 E701                       	dc.b	smpsNoAttack, $01
000977E3 E10F                       	smpsAlterNote       $0F
000977E5 E701                       	dc.b	smpsNoAttack, $01
000977E7 E113                       	smpsAlterNote       $13
000977E9 E701                       	dc.b	smpsNoAttack, $01
000977EB E10F                       	smpsAlterNote       $0F
000977ED E701                       	dc.b	smpsNoAttack, $01
000977EF E10C                       	smpsAlterNote       $0C
000977F1 E701                       	dc.b	smpsNoAttack, $01
000977F3 E108                       	smpsAlterNote       $08
000977F5 E701                       	dc.b	smpsNoAttack, $01
000977F7 E10C                       	smpsAlterNote       $0C
000977F9 E701                       	dc.b	smpsNoAttack, $01
000977FB E112                       	smpsAlterNote       $12
000977FD E701                       	dc.b	smpsNoAttack, $01
000977FF E113                       	smpsAlterNote       $13
00097801 E701                       	dc.b	smpsNoAttack, $01
00097803 E10F                       	smpsAlterNote       $0F
00097805 E701                       	dc.b	smpsNoAttack, $01
00097807 E109                       	smpsAlterNote       $09
00097809 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009780D E10C                       	smpsAlterNote       $0C
0009780F E701                       	dc.b	smpsNoAttack, $01
00097811 E112                       	smpsAlterNote       $12
00097813 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097817 E10C                       	smpsAlterNote       $0C
00097819 E701                       	dc.b	smpsNoAttack, $01
0009781B E109                       	smpsAlterNote       $09
0009781D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097821 E10F                       	smpsAlterNote       $0F
00097823 E701                       	dc.b	smpsNoAttack, $01
00097825 E113                       	smpsAlterNote       $13
00097827 E701                       	dc.b	smpsNoAttack, $01
00097829 E112                       	smpsAlterNote       $12
0009782B E701                       	dc.b	smpsNoAttack, $01
0009782D E10C                       	smpsAlterNote       $0C
0009782F E701                       	dc.b	smpsNoAttack, $01
00097831 E109                       	smpsAlterNote       $09
00097833 8001                       	dc.b	nRst, $01
00097835 E10D                       	smpsAlterNote       $0D
00097837 B60A                       	dc.b	nF4, $0A
00097839 E10C                       	smpsAlterNote       $0C
0009783B B506 8001                  	dc.b	nE4, $06, nRst, $01
0009783F E10B                       	smpsAlterNote       $0B
00097841 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00097845 E10C                       	smpsAlterNote       $0C
00097847 B503                       	dc.b	nE4, $03
00097849 E10D                       	smpsAlterNote       $0D
0009784B B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
00097855 E10C                       	smpsAlterNote       $0C
00097857 E701                       	dc.b	smpsNoAttack, $01
00097859 E108                       	smpsAlterNote       $08
0009785B E701                       	dc.b	smpsNoAttack, $01
0009785D E10C                       	smpsAlterNote       $0C
0009785F E701                       	dc.b	smpsNoAttack, $01
00097861 E112                       	smpsAlterNote       $12
00097863 E701                       	dc.b	smpsNoAttack, $01
00097865 E113                       	smpsAlterNote       $13
00097867 E701                       	dc.b	smpsNoAttack, $01
00097869 E10F                       	smpsAlterNote       $0F
0009786B E701                       	dc.b	smpsNoAttack, $01
0009786D E109                       	smpsAlterNote       $09
0009786F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097873 E10C                       	smpsAlterNote       $0C
00097875 E701                       	dc.b	smpsNoAttack, $01
00097877 E112                       	smpsAlterNote       $12
00097879 E701                       	dc.b	smpsNoAttack, $01
0009787B E113                       	smpsAlterNote       $13
0009787D 8001                       	dc.b	nRst, $01
0009787F E10D                       	smpsAlterNote       $0D
00097881 C20D                       	dc.b	nF5, $0D
00097883 E10A                       	smpsAlterNote       $0A
00097885 E701                       	dc.b	smpsNoAttack, $01
00097887 E106                       	smpsAlterNote       $06
00097889 E701                       	dc.b	smpsNoAttack, $01
0009788B E10A                       	smpsAlterNote       $0A
0009788D E701                       	dc.b	smpsNoAttack, $01
0009788F E110                       	smpsAlterNote       $10
00097891 E701                       	dc.b	smpsNoAttack, $01
00097893 E111                       	smpsAlterNote       $11
00097895 E701                       	dc.b	smpsNoAttack, $01
00097897 E10D                       	smpsAlterNote       $0D
00097899 E701                       	dc.b	smpsNoAttack, $01
0009789B E107                       	smpsAlterNote       $07
0009789D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000978A1 E10A                       	smpsAlterNote       $0A
000978A3 E701                       	dc.b	smpsNoAttack, $01
000978A5 E110                       	smpsAlterNote       $10
000978A7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000978AB E10A                       	smpsAlterNote       $0A
000978AD E701                       	dc.b	smpsNoAttack, $01
000978AF E107                       	smpsAlterNote       $07
000978B1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000978B5 E10D                       	smpsAlterNote       $0D
000978B7 E701                       	dc.b	smpsNoAttack, $01
000978B9 E111                       	smpsAlterNote       $11
000978BB E701                       	dc.b	smpsNoAttack, $01
000978BD E110                       	smpsAlterNote       $10
000978BF E701                       	dc.b	smpsNoAttack, $01
000978C1 E10A                       	smpsAlterNote       $0A
000978C3 E701                       	dc.b	smpsNoAttack, $01
000978C5 E106                       	smpsAlterNote       $06
000978C7 E701                       	dc.b	smpsNoAttack, $01
000978C9 E10A                       	smpsAlterNote       $0A
000978CB E701                       	dc.b	smpsNoAttack, $01
000978CD E10D                       	smpsAlterNote       $0D
000978CF E701                       	dc.b	smpsNoAttack, $01
000978D1 E111                       	smpsAlterNote       $11
000978D3 E701                       	dc.b	smpsNoAttack, $01
000978D5 E10D                       	smpsAlterNote       $0D
000978D7 E701                       	dc.b	smpsNoAttack, $01
000978D9 E107                       	smpsAlterNote       $07
000978DB E701                       	dc.b	smpsNoAttack, $01
000978DD E106                       	smpsAlterNote       $06
000978DF E701                       	dc.b	smpsNoAttack, $01
000978E1 E10A                       	smpsAlterNote       $0A
000978E3 E701                       	dc.b	smpsNoAttack, $01
000978E5 E110                       	smpsAlterNote       $10
000978E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000978EB E10D                       	smpsAlterNote       $0D
000978ED E701                       	dc.b	smpsNoAttack, $01
000978EF E107                       	smpsAlterNote       $07
000978F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000978F5 E10D                       	smpsAlterNote       $0D
000978F7 E701                       	dc.b	smpsNoAttack, $01
000978F9 E110                       	smpsAlterNote       $10
000978FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000978FF E10A                       	smpsAlterNote       $0A
00097901 E701                       	dc.b	smpsNoAttack, $01
00097903 E106                       	smpsAlterNote       $06
00097905 E701                       	dc.b	smpsNoAttack, $01
00097907 E107                       	smpsAlterNote       $07
00097909 E701                       	dc.b	smpsNoAttack, $01
0009790B E10D                       	smpsAlterNote       $0D
0009790D E701                       	dc.b	smpsNoAttack, $01
0009790F E111                       	smpsAlterNote       $11
00097911 E701                       	dc.b	smpsNoAttack, $01
00097913 E10D                       	smpsAlterNote       $0D
00097915 E701                       	dc.b	smpsNoAttack, $01
00097917 E10A                       	smpsAlterNote       $0A
00097919 E701                       	dc.b	smpsNoAttack, $01
0009791B E107                       	smpsAlterNote       $07
0009791D 8001                       	dc.b	nRst, $01
0009791F E10D                       	smpsAlterNote       $0D
00097921 C206 8001                  	dc.b	nF5, $06, nRst, $01
00097927 E601                       	smpsAlterVol        $01
00097929 E110                       	smpsAlterNote       $10
0009792B BB0D                       	dc.b	nBb4, $0D
0009792D E10A                       	smpsAlterNote       $0A
0009792F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097933 E110                       	smpsAlterNote       $10
00097935 E701                       	dc.b	smpsNoAttack, $01
00097937 E113                       	smpsAlterNote       $13
00097939 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009793D E10D                       	smpsAlterNote       $0D
0009793F E701                       	dc.b	smpsNoAttack, $01
00097941 E109                       	smpsAlterNote       $09
00097943 E701                       	dc.b	smpsNoAttack, $01
00097945 E10A                       	smpsAlterNote       $0A
00097947 E701                       	dc.b	smpsNoAttack, $01
00097949 E110                       	smpsAlterNote       $10
0009794B E701                       	dc.b	smpsNoAttack, $01
0009794D E114                       	smpsAlterNote       $14
0009794F E701                       	dc.b	smpsNoAttack, $01
00097951 E110                       	smpsAlterNote       $10
00097953 E701                       	dc.b	smpsNoAttack, $01
00097955 E10D                       	smpsAlterNote       $0D
00097957 E701                       	dc.b	smpsNoAttack, $01
00097959 E109                       	smpsAlterNote       $09
0009795B E701                       	dc.b	smpsNoAttack, $01
0009795D E10A                       	smpsAlterNote       $0A
0009795F 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
00097963 E107                       	smpsAlterNote       $07
00097965 E701                       	dc.b	smpsNoAttack, $01
00097967 E103                       	smpsAlterNote       $03
00097969 E701                       	dc.b	smpsNoAttack, $01
0009796B E107                       	smpsAlterNote       $07
0009796D E701                       	dc.b	smpsNoAttack, $01
0009796F E10D                       	smpsAlterNote       $0D
00097971 E701                       	dc.b	smpsNoAttack, $01
00097973 E10E                       	smpsAlterNote       $0E
00097975 E701                       	dc.b	smpsNoAttack, $01
00097977 E10A                       	smpsAlterNote       $0A
00097979 E701                       	dc.b	smpsNoAttack, $01
0009797B E104                       	smpsAlterNote       $04
0009797D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097981 E107                       	smpsAlterNote       $07
00097983 E701                       	dc.b	smpsNoAttack, $01
00097985 E10D                       	smpsAlterNote       $0D
00097987 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009798B E107                       	smpsAlterNote       $07
0009798D E701                       	dc.b	smpsNoAttack, $01
0009798F E104                       	smpsAlterNote       $04
00097991 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097995 E10B                       	smpsAlterNote       $0B
00097997 BF0D                       	dc.b	nD5, $0D
00097999 E108                       	smpsAlterNote       $08
0009799B E701                       	dc.b	smpsNoAttack, $01
0009799D E105                       	smpsAlterNote       $05
0009799F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000979A3 E10B                       	smpsAlterNote       $0B
000979A5 E701                       	dc.b	smpsNoAttack, $01
000979A7 E10F                       	smpsAlterNote       $0F
000979A9 E701                       	dc.b	smpsNoAttack, $01
000979AB E10E                       	smpsAlterNote       $0E
000979AD E701                       	dc.b	smpsNoAttack, $01
000979AF E108                       	smpsAlterNote       $08
000979B1 E701                       	dc.b	smpsNoAttack, $01
000979B3 E104                       	smpsAlterNote       $04
000979B5 E701                       	dc.b	smpsNoAttack, $01
000979B7 E108                       	smpsAlterNote       $08
000979B9 E701                       	dc.b	smpsNoAttack, $01
000979BB E10B                       	smpsAlterNote       $0B
000979BD E701                       	dc.b	smpsNoAttack, $01
000979BF E10F                       	smpsAlterNote       $0F
000979C1 E701                       	dc.b	smpsNoAttack, $01
000979C3 E10B                       	smpsAlterNote       $0B
000979C5 E701                       	dc.b	smpsNoAttack, $01
000979C7 E105                       	smpsAlterNote       $05
000979C9 E701                       	dc.b	smpsNoAttack, $01
000979CB E104                       	smpsAlterNote       $04
000979CD E701                       	dc.b	smpsNoAttack, $01
000979CF E105                       	smpsAlterNote       $05
000979D1 8001                       	dc.b	nRst, $01
000979D3 E10C                       	smpsAlterNote       $0C
000979D5 C10C                       	dc.b	nE5, $0C
000979D7 E10D                       	smpsAlterNote       $0D
000979D9 C201                       	dc.b	nF5, $01
000979DB E10E                       	smpsAlterNote       $0E
000979DD C301 8001                  	dc.b	nFs5, $01, nRst, $01
000979E1 E10D                       	smpsAlterNote       $0D
000979E3 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
000979E7 E10A                       	smpsAlterNote       $0A
000979E9 E701                       	dc.b	smpsNoAttack, $01
000979EB E106                       	smpsAlterNote       $06
000979ED E701                       	dc.b	smpsNoAttack, $01
000979EF E10A                       	smpsAlterNote       $0A
000979F1 E701                       	dc.b	smpsNoAttack, $01
000979F3 E10D                       	smpsAlterNote       $0D
000979F5 E701                       	dc.b	smpsNoAttack, $01
000979F7 E111                       	smpsAlterNote       $11
000979F9 E701                       	dc.b	smpsNoAttack, $01
000979FB E10D                       	smpsAlterNote       $0D
000979FD E701                       	dc.b	smpsNoAttack, $01
000979FF E107                       	smpsAlterNote       $07
00097A01 E701                       	dc.b	smpsNoAttack, $01
00097A03 E106                       	smpsAlterNote       $06
00097A05 E701                       	dc.b	smpsNoAttack, $01
00097A07 E10A                       	smpsAlterNote       $0A
00097A09 E701                       	dc.b	smpsNoAttack, $01
00097A0B E110                       	smpsAlterNote       $10
00097A0D E701                       	dc.b	smpsNoAttack, $01
00097A0F E111                       	smpsAlterNote       $11
00097A11 8001                       	dc.b	nRst, $01
00097A13 E10D                       	smpsAlterNote       $0D
00097A15 C40D                       	dc.b	nG5, $0D
00097A17 E10A                       	smpsAlterNote       $0A
00097A19 E701                       	dc.b	smpsNoAttack, $01
00097A1B E106                       	smpsAlterNote       $06
00097A1D E701                       	dc.b	smpsNoAttack, $01
00097A1F E10A                       	smpsAlterNote       $0A
00097A21 E701                       	dc.b	smpsNoAttack, $01
00097A23 E10D                       	smpsAlterNote       $0D
00097A25 E701                       	dc.b	smpsNoAttack, $01
00097A27 E10C                       	smpsAlterNote       $0C
00097A29 C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
00097A35 8001                       	dc.b	nRst, $01
00097A37 E10D                       	smpsAlterNote       $0D
00097A39 C20D                       	dc.b	nF5, $0D
00097A3B E10A                       	smpsAlterNote       $0A
00097A3D E701                       	dc.b	smpsNoAttack, $01
00097A3F E106                       	smpsAlterNote       $06
00097A41 E701                       	dc.b	smpsNoAttack, $01
00097A43 E10A                       	smpsAlterNote       $0A
00097A45 E701                       	dc.b	smpsNoAttack, $01
00097A47 E110                       	smpsAlterNote       $10
00097A49 E701                       	dc.b	smpsNoAttack, $01
00097A4B E111                       	smpsAlterNote       $11
00097A4D E701                       	dc.b	smpsNoAttack, $01
00097A4F E10D                       	smpsAlterNote       $0D
00097A51 E701                       	dc.b	smpsNoAttack, $01
00097A53 E107                       	smpsAlterNote       $07
00097A55 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097A59 E10A                       	smpsAlterNote       $0A
00097A5B E701                       	dc.b	smpsNoAttack, $01
00097A5D E110                       	smpsAlterNote       $10
00097A5F E701                       	dc.b	smpsNoAttack, $01
00097A61 E111                       	smpsAlterNote       $11
00097A63 8001                       	dc.b	nRst, $01
00097A65 E10F                       	smpsAlterNote       $0F
00097A67 C60A                       	dc.b	nA5, $0A
00097A69 E10D                       	smpsAlterNote       $0D
00097A6B C406 8001                  	dc.b	nG5, $06, nRst, $01
00097A6F E10C                       	smpsAlterNote       $0C
00097A71 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00097A7D 8001                       	dc.b	nRst, $01
00097A7F E10D                       	smpsAlterNote       $0D
00097A81 C20D                       	dc.b	nF5, $0D
00097A83 E107                       	smpsAlterNote       $07
00097A85 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097A89 E10A                       	smpsAlterNote       $0A
00097A8B E701                       	dc.b	smpsNoAttack, $01
00097A8D E110                       	smpsAlterNote       $10
00097A8F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097A93 E10A                       	smpsAlterNote       $0A
00097A95 E701                       	dc.b	smpsNoAttack, $01
00097A97 E107                       	smpsAlterNote       $07
00097A99 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097A9D E10D                       	smpsAlterNote       $0D
00097A9F E701                       	dc.b	smpsNoAttack, $01
00097AA1 E111                       	smpsAlterNote       $11
00097AA3 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00097AA7 E10D                       	smpsAlterNote       $0D
00097AA9 C40D                       	dc.b	nG5, $0D
00097AAB E107                       	smpsAlterNote       $07
00097AAD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097AB1 E10A                       	smpsAlterNote       $0A
00097AB3 E701                       	dc.b	smpsNoAttack, $01
00097AB5 E10D                       	smpsAlterNote       $0D
00097AB7 8001                       	dc.b	nRst, $01
00097AB9 E10C                       	smpsAlterNote       $0C
00097ABB C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00097AC7 E10D                       	smpsAlterNote       $0D
00097AC9 C20E                       	dc.b	nF5, $0E
00097ACB E107                       	smpsAlterNote       $07
00097ACD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097AD1 E10D                       	smpsAlterNote       $0D
00097AD3 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00097AD9 E0C0                       	smpsPan             panCenter, $00
00097ADB E603                       	smpsAlterVol        $03
00097ADD E108                       	smpsAlterNote       $08
00097ADF B406                       	dc.b	nEb4, $06
00097AE1 E10C                       	smpsAlterNote       $0C
00097AE3 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
00097AE7 E108                       	smpsAlterNote       $08
00097AE9 B403                       	dc.b	nEb4, $03
00097AEB E109                       	smpsAlterNote       $09
00097AED B803 8001                  	dc.b	nG4, $03, nRst, $01
00097AF1 E10C                       	smpsAlterNote       $0C
00097AF3 BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
00097AFB 03                         	dc.b	$03
00097AFC E6FD                       	smpsAlterVol        $FD
00097AFE F6F1 F4                    	smpsJump            music84_Jump00
00097B01                            
00097B01                            ; PSG1 Data
00097B01                            music84_PSG1:
00097B01 E1FD                       	smpsAlterNote       $FD
00097B03 EC04                       	smpsPSGAlterVol     $04
00097B05 9203                       	dc.b	nF1, $03
00097B07 E1FE                       	smpsAlterNote       $FE
00097B09 9603                       	dc.b	nA1, $03
00097B0B EC04                       	smpsPSGAlterVol     $04
00097B0D E701                       	dc.b	smpsNoAttack, $01
00097B0F E1FF                       	smpsAlterNote       $FF
00097B11 ECFC                       	smpsPSGAlterVol     $FC
00097B13 9B03                       	dc.b	nD2, $03
00097B15 E1FD                       	smpsAlterNote       $FD
00097B17 9403                       	dc.b	nG1, $03
00097B19 EC04                       	smpsPSGAlterVol     $04
00097B1B E701                       	dc.b	smpsNoAttack, $01
00097B1D E1FE                       	smpsAlterNote       $FE
00097B1F ECFC                       	smpsPSGAlterVol     $FC
00097B21 9703                       	dc.b	nBb1, $03
00097B23 E1FF                       	smpsAlterNote       $FF
00097B25 9B03                       	dc.b	nD2, $03
00097B27 EC04                       	smpsPSGAlterVol     $04
00097B29 E701                       	dc.b	smpsNoAttack, $01
00097B2B E1FE                       	smpsAlterNote       $FE
00097B2D ECFC                       	smpsPSGAlterVol     $FC
00097B2F A002                       	dc.b	nG2, $02
00097B31 EC04                       	smpsPSGAlterVol     $04
00097B33 E701                       	dc.b	smpsNoAttack, $01
00097B35 E1FF                       	smpsAlterNote       $FF
00097B37 ECFC                       	smpsPSGAlterVol     $FC
00097B39 A203                       	dc.b	nA2, $03
00097B3B EC0B                       	smpsPSGAlterVol     $0B
00097B3D 800A                       	dc.b	nRst, $0A
00097B3F E105                       	smpsAlterNote       $05
00097B41 01                         	dc.b	$01
00097B42 E1FC                       	smpsAlterNote       $FC
00097B44 01                         	dc.b	$01
00097B45 E105                       	smpsAlterNote       $05
00097B47 01                         	dc.b	$01
00097B48 E1FD                       	smpsAlterNote       $FD
00097B4A 01                         	dc.b	$01
00097B4B E105                       	smpsAlterNote       $05
00097B4D 01                         	dc.b	$01
00097B4E E1FD                       	smpsAlterNote       $FD
00097B50 01                         	dc.b	$01
00097B51 E1FA                       	smpsAlterNote       $FA
00097B53 01                         	dc.b	$01
00097B54 E1FC                       	smpsAlterNote       $FC
00097B56 01                         	dc.b	$01
00097B57 E105                       	smpsAlterNote       $05
00097B59 01                         	dc.b	$01
00097B5A E108                       	smpsAlterNote       $08
00097B5C 0101                       	dc.b	$01, $01
00097B5E E105                       	smpsAlterNote       $05
00097B60 01                         	dc.b	$01
00097B61 E1FA                       	smpsAlterNote       $FA
00097B63 0101                       	dc.b	$01, $01
00097B65 E1FD                       	smpsAlterNote       $FD
00097B67 01                         	dc.b	$01
00097B68 E105                       	smpsAlterNote       $05
00097B6A 01                         	dc.b	$01
00097B6B E108                       	smpsAlterNote       $08
00097B6D 01                         	dc.b	$01
00097B6E E105                       	smpsAlterNote       $05
00097B70 01                         	dc.b	$01
00097B71 E1FC                       	smpsAlterNote       $FC
00097B73 01                         	dc.b	$01
00097B74 E105                       	smpsAlterNote       $05
00097B76 01                         	dc.b	$01
00097B77 E1FD                       	smpsAlterNote       $FD
00097B79 01                         	dc.b	$01
00097B7A                            
00097B7A                            music84_Jump07:
00097B7A E105                       	smpsAlterNote       $05
00097B7C 8001                       	dc.b	nRst, $01
00097B7E E1FD                       	smpsAlterNote       $FD
00097B80 01                         	dc.b	$01
00097B81 E1FA                       	smpsAlterNote       $FA
00097B83 01                         	dc.b	$01
00097B84 E1FC                       	smpsAlterNote       $FC
00097B86 01                         	dc.b	$01
00097B87 E1FD                       	smpsAlterNote       $FD
00097B89 ECF5                       	smpsPSGAlterVol     $F5
00097B8B 9206                       	dc.b	nF1, $06
00097B8D EC04                       	smpsPSGAlterVol     $04
00097B8F E701                       	dc.b	smpsNoAttack, $01
00097B91 EC07                       	smpsPSGAlterVol     $07
00097B93 8003                       	dc.b	nRst, $03
00097B95 ECF5                       	smpsPSGAlterVol     $F5
00097B97 9206                       	dc.b	nF1, $06
00097B99 EC04                       	smpsPSGAlterVol     $04
00097B9B E701                       	dc.b	smpsNoAttack, $01
00097B9D EC07                       	smpsPSGAlterVol     $07
00097B9F 8006                       	dc.b	nRst, $06
00097BA1 E100                       	smpsAlterNote       $00
00097BA3 01                         	dc.b	$01
00097BA4 E104                       	smpsAlterNote       $04
00097BA6 01                         	dc.b	$01
00097BA7 E100                       	smpsAlterNote       $00
00097BA9 01                         	dc.b	$01
00097BAA E1FB                       	smpsAlterNote       $FB
00097BAC 01                         	dc.b	$01
00097BAD E1FD                       	smpsAlterNote       $FD
00097BAF ECF5                       	smpsPSGAlterVol     $F5
00097BB1 9406                       	dc.b	nG1, $06
00097BB3 EC04                       	smpsPSGAlterVol     $04
00097BB5 E701                       	dc.b	smpsNoAttack, $01
00097BB7 EC07                       	smpsPSGAlterVol     $07
00097BB9 8003                       	dc.b	nRst, $03
00097BBB ECF5                       	smpsPSGAlterVol     $F5
00097BBD 9407                       	dc.b	nG1, $07
00097BBF EC0B                       	smpsPSGAlterVol     $0B
00097BC1 8006                       	dc.b	nRst, $06
00097BC3 E100                       	smpsAlterNote       $00
00097BC5 01                         	dc.b	$01
00097BC6 E103                       	smpsAlterNote       $03
00097BC8 0101                       	dc.b	$01, $01
00097BCA E1FD                       	smpsAlterNote       $FD
00097BCC 01                         	dc.b	$01
00097BCD ECF5                       	smpsPSGAlterVol     $F5
00097BCF 9207                       	dc.b	nF1, $07
00097BD1 EC0B                       	smpsPSGAlterVol     $0B
00097BD3 8004                       	dc.b	nRst, $04
00097BD5 ECF5                       	smpsPSGAlterVol     $F5
00097BD7 9206                       	dc.b	nF1, $06
00097BD9 EC04                       	smpsPSGAlterVol     $04
00097BDB E701                       	dc.b	smpsNoAttack, $01
00097BDD EC07                       	smpsPSGAlterVol     $07
00097BDF 8006                       	dc.b	nRst, $06
00097BE1 E103                       	smpsAlterNote       $03
00097BE3 01                         	dc.b	$01
00097BE4 E104                       	smpsAlterNote       $04
00097BE6 01                         	dc.b	$01
00097BE7 E100                       	smpsAlterNote       $00
00097BE9 01                         	dc.b	$01
00097BEA E1FA                       	smpsAlterNote       $FA
00097BEC 01                         	dc.b	$01
00097BED E1FD                       	smpsAlterNote       $FD
00097BEF ECF5                       	smpsPSGAlterVol     $F5
00097BF1 9206                       	dc.b	nF1, $06
00097BF3 EC04                       	smpsPSGAlterVol     $04
00097BF5 E701                       	dc.b	smpsNoAttack, $01
00097BF7 EC07                       	smpsPSGAlterVol     $07
00097BF9 8003                       	dc.b	nRst, $03
00097BFB ECF5                       	smpsPSGAlterVol     $F5
00097BFD 9106                       	dc.b	nE1, $06
00097BFF EC04                       	smpsPSGAlterVol     $04
00097C01 E701                       	dc.b	smpsNoAttack, $01
00097C03 EC07                       	smpsPSGAlterVol     $07
00097C05 8006                       	dc.b	nRst, $06
00097C07 E100                       	smpsAlterNote       $00
00097C09 01                         	dc.b	$01
00097C0A E104                       	smpsAlterNote       $04
00097C0C 01                         	dc.b	$01
00097C0D E100                       	smpsAlterNote       $00
00097C0F 01                         	dc.b	$01
00097C10 E1FD                       	smpsAlterNote       $FD
00097C12 01                         	dc.b	$01
00097C13 ECF5                       	smpsPSGAlterVol     $F5
00097C15 9206                       	dc.b	nF1, $06
00097C17 EC04                       	smpsPSGAlterVol     $04
00097C19 E701                       	dc.b	smpsNoAttack, $01
00097C1B EC07                       	smpsPSGAlterVol     $07
00097C1D 8003                       	dc.b	nRst, $03
00097C1F ECF5                       	smpsPSGAlterVol     $F5
00097C21 9207                       	dc.b	nF1, $07
00097C23 EC0B                       	smpsPSGAlterVol     $0B
00097C25 8007                       	dc.b	nRst, $07
00097C27 E103                       	smpsAlterNote       $03
00097C29 0101                       	dc.b	$01, $01
00097C2B E1FD                       	smpsAlterNote       $FD
00097C2D 01                         	dc.b	$01
00097C2E E1FB                       	smpsAlterNote       $FB
00097C30 01                         	dc.b	$01
00097C31 E1FD                       	smpsAlterNote       $FD
00097C33 ECF5                       	smpsPSGAlterVol     $F5
00097C35 9406                       	dc.b	nG1, $06
00097C37 EC0B                       	smpsPSGAlterVol     $0B
00097C39 8004                       	dc.b	nRst, $04
00097C3B ECF5                       	smpsPSGAlterVol     $F5
00097C3D 9406                       	dc.b	nG1, $06
00097C3F EC04                       	smpsPSGAlterVol     $04
00097C41 E701                       	dc.b	smpsNoAttack, $01
00097C43 EC07                       	smpsPSGAlterVol     $07
00097C45 8006                       	dc.b	nRst, $06
00097C47 E100                       	smpsAlterNote       $00
00097C49 01                         	dc.b	$01
00097C4A E104                       	smpsAlterNote       $04
00097C4C 01                         	dc.b	$01
00097C4D E100                       	smpsAlterNote       $00
00097C4F 01                         	dc.b	$01
00097C50 E1F9                       	smpsAlterNote       $F9
00097C52 01                         	dc.b	$01
00097C53 E1FD                       	smpsAlterNote       $FD
00097C55 ECF5                       	smpsPSGAlterVol     $F5
00097C57 9206                       	dc.b	nF1, $06
00097C59 EC04                       	smpsPSGAlterVol     $04
00097C5B E701                       	dc.b	smpsNoAttack, $01
00097C5D EC07                       	smpsPSGAlterVol     $07
00097C5F 8003                       	dc.b	nRst, $03
00097C61 ECF5                       	smpsPSGAlterVol     $F5
00097C63 9207                       	dc.b	nF1, $07
00097C65 EC0B                       	smpsPSGAlterVol     $0B
00097C67 8006                       	dc.b	nRst, $06
00097C69 E100                       	smpsAlterNote       $00
00097C6B 01                         	dc.b	$01
00097C6C E104                       	smpsAlterNote       $04
00097C6E 01                         	dc.b	$01
00097C6F E103                       	smpsAlterNote       $03
00097C71 01                         	dc.b	$01
00097C72 E1FD                       	smpsAlterNote       $FD
00097C74 01                         	dc.b	$01
00097C75 ECF5                       	smpsPSGAlterVol     $F5
00097C77 9207                       	dc.b	nF1, $07
00097C79 EC0B                       	smpsPSGAlterVol     $0B
00097C7B 8004                       	dc.b	nRst, $04
00097C7D ECF5                       	smpsPSGAlterVol     $F5
00097C7F 9206                       	dc.b	nF1, $06
00097C81 EC0B                       	smpsPSGAlterVol     $0B
00097C83 8007                       	dc.b	nRst, $07
00097C85 E103                       	smpsAlterNote       $03
00097C87 0101                       	dc.b	$01, $01
00097C89 E100                       	smpsAlterNote       $00
00097C8B 01                         	dc.b	$01
00097C8C E1FA                       	smpsAlterNote       $FA
00097C8E 01                         	dc.b	$01
00097C8F E1FD                       	smpsAlterNote       $FD
00097C91 ECF5                       	smpsPSGAlterVol     $F5
00097C93 9206                       	dc.b	nF1, $06
00097C95 EC04                       	smpsPSGAlterVol     $04
00097C97 E701                       	dc.b	smpsNoAttack, $01
00097C99 EC07                       	smpsPSGAlterVol     $07
00097C9B 8003                       	dc.b	nRst, $03
00097C9D ECF5                       	smpsPSGAlterVol     $F5
00097C9F 9206                       	dc.b	nF1, $06
00097CA1 EC04                       	smpsPSGAlterVol     $04
00097CA3 E701                       	dc.b	smpsNoAttack, $01
00097CA5 EC07                       	smpsPSGAlterVol     $07
00097CA7 8006                       	dc.b	nRst, $06
00097CA9 E100                       	smpsAlterNote       $00
00097CAB 01                         	dc.b	$01
00097CAC E104                       	smpsAlterNote       $04
00097CAE 01                         	dc.b	$01
00097CAF E100                       	smpsAlterNote       $00
00097CB1 01                         	dc.b	$01
00097CB2 E1FD                       	smpsAlterNote       $FD
00097CB4 01                         	dc.b	$01
00097CB5 ECF5                       	smpsPSGAlterVol     $F5
00097CB7 9206                       	dc.b	nF1, $06
00097CB9 EC04                       	smpsPSGAlterVol     $04
00097CBB E701                       	dc.b	smpsNoAttack, $01
00097CBD EC07                       	smpsPSGAlterVol     $07
00097CBF 8003                       	dc.b	nRst, $03
00097CC1 ECF5                       	smpsPSGAlterVol     $F5
00097CC3 9207                       	dc.b	nF1, $07
00097CC5 EC0B                       	smpsPSGAlterVol     $0B
00097CC7 8007                       	dc.b	nRst, $07
00097CC9 E103                       	smpsAlterNote       $03
00097CCB 0101                       	dc.b	$01, $01
00097CCD E1FD                       	smpsAlterNote       $FD
00097CCF 01                         	dc.b	$01
00097CD0 E1FA                       	smpsAlterNote       $FA
00097CD2 01                         	dc.b	$01
00097CD3 E1FD                       	smpsAlterNote       $FD
00097CD5 ECF5                       	smpsPSGAlterVol     $F5
00097CD7 9206                       	dc.b	nF1, $06
00097CD9 EC0B                       	smpsPSGAlterVol     $0B
00097CDB 8004                       	dc.b	nRst, $04
00097CDD ECF5                       	smpsPSGAlterVol     $F5
00097CDF 9206                       	dc.b	nF1, $06
00097CE1 EC04                       	smpsPSGAlterVol     $04
00097CE3 E701                       	dc.b	smpsNoAttack, $01
00097CE5 EC07                       	smpsPSGAlterVol     $07
00097CE7 8006                       	dc.b	nRst, $06
00097CE9 E103                       	smpsAlterNote       $03
00097CEB 01                         	dc.b	$01
00097CEC E104                       	smpsAlterNote       $04
00097CEE 01                         	dc.b	$01
00097CEF E100                       	smpsAlterNote       $00
00097CF1 01                         	dc.b	$01
00097CF2 E1FA                       	smpsAlterNote       $FA
00097CF4 01                         	dc.b	$01
00097CF5 E1FD                       	smpsAlterNote       $FD
00097CF7 ECF5                       	smpsPSGAlterVol     $F5
00097CF9 9206                       	dc.b	nF1, $06
00097CFB EC04                       	smpsPSGAlterVol     $04
00097CFD E701                       	dc.b	smpsNoAttack, $01
00097CFF EC07                       	smpsPSGAlterVol     $07
00097D01 8003                       	dc.b	nRst, $03
00097D03 ECF5                       	smpsPSGAlterVol     $F5
00097D05 9206                       	dc.b	nF1, $06
00097D07 EC04                       	smpsPSGAlterVol     $04
00097D09 E701                       	dc.b	smpsNoAttack, $01
00097D0B EC07                       	smpsPSGAlterVol     $07
00097D0D 8006                       	dc.b	nRst, $06
00097D0F E100                       	smpsAlterNote       $00
00097D11 01                         	dc.b	$01
00097D12 E104                       	smpsAlterNote       $04
00097D14 01                         	dc.b	$01
00097D15 E103                       	smpsAlterNote       $03
00097D17 01                         	dc.b	$01
00097D18 E1FD                       	smpsAlterNote       $FD
00097D1A 01                         	dc.b	$01
00097D1B ECF5                       	smpsPSGAlterVol     $F5
00097D1D 9107                       	dc.b	nE1, $07
00097D1F EC0B                       	smpsPSGAlterVol     $0B
00097D21 8004                       	dc.b	nRst, $04
00097D23 ECF5                       	smpsPSGAlterVol     $F5
00097D25 9106                       	dc.b	nE1, $06
00097D27 EC0B                       	smpsPSGAlterVol     $0B
00097D29 8007                       	dc.b	nRst, $07
00097D2B E103                       	smpsAlterNote       $03
00097D2D 0101                       	dc.b	$01, $01
00097D2F E100                       	smpsAlterNote       $00
00097D31 01                         	dc.b	$01
00097D32 E1FA                       	smpsAlterNote       $FA
00097D34 01                         	dc.b	$01
00097D35 E1FD                       	smpsAlterNote       $FD
00097D37 ECF5                       	smpsPSGAlterVol     $F5
00097D39 9106                       	dc.b	nE1, $06
00097D3B EC04                       	smpsPSGAlterVol     $04
00097D3D E701                       	dc.b	smpsNoAttack, $01
00097D3F EC07                       	smpsPSGAlterVol     $07
00097D41 8003                       	dc.b	nRst, $03
00097D43 ECF5                       	smpsPSGAlterVol     $F5
00097D45 9106                       	dc.b	nE1, $06
00097D47 EC04                       	smpsPSGAlterVol     $04
00097D49 E701                       	dc.b	smpsNoAttack, $01
00097D4B EC07                       	smpsPSGAlterVol     $07
00097D4D 8006                       	dc.b	nRst, $06
00097D4F E100                       	smpsAlterNote       $00
00097D51 01                         	dc.b	$01
00097D52 E104                       	smpsAlterNote       $04
00097D54 01                         	dc.b	$01
00097D55 E100                       	smpsAlterNote       $00
00097D57 01                         	dc.b	$01
00097D58 E1FA                       	smpsAlterNote       $FA
00097D5A 01                         	dc.b	$01
00097D5B E1FD                       	smpsAlterNote       $FD
00097D5D ECF5                       	smpsPSGAlterVol     $F5
00097D5F 9106                       	dc.b	nE1, $06
00097D61 EC04                       	smpsPSGAlterVol     $04
00097D63 E701                       	dc.b	smpsNoAttack, $01
00097D65 EC07                       	smpsPSGAlterVol     $07
00097D67 8003                       	dc.b	nRst, $03
00097D69 ECF5                       	smpsPSGAlterVol     $F5
00097D6B 9107 9106                  	dc.b	nE1, $07, nE1, $06
00097D6F EC04                       	smpsPSGAlterVol     $04
00097D71 E701                       	dc.b	smpsNoAttack, $01
00097D73 ECFC                       	smpsPSGAlterVol     $FC
00097D75 9103 9103                  	dc.b	nE1, $03, nE1, $03
00097D79 EC04                       	smpsPSGAlterVol     $04
00097D7B E701                       	dc.b	smpsNoAttack, $01
00097D7D ECFC                       	smpsPSGAlterVol     $FC
00097D7F 9106                       	dc.b	nE1, $06
00097D81 EC04                       	smpsPSGAlterVol     $04
00097D83 E701                       	dc.b	smpsNoAttack, $01
00097D85 EC07                       	smpsPSGAlterVol     $07
00097D87 8006                       	dc.b	nRst, $06
00097D89 E100                       	smpsAlterNote       $00
00097D8B 01                         	dc.b	$01
00097D8C E104                       	smpsAlterNote       $04
00097D8E 01                         	dc.b	$01
00097D8F E100                       	smpsAlterNote       $00
00097D91 01                         	dc.b	$01
00097D92 E1FA                       	smpsAlterNote       $FA
00097D94 01                         	dc.b	$01
00097D95 E1F9                       	smpsAlterNote       $F9
00097D97 01                         	dc.b	$01
00097D98 E1FD                       	smpsAlterNote       $FD
00097D9A 01                         	dc.b	$01
00097D9B E103                       	smpsAlterNote       $03
00097D9D 01                         	dc.b	$01
00097D9E E104                       	smpsAlterNote       $04
00097DA0 01                         	dc.b	$01
00097DA1 E100                       	smpsAlterNote       $00
00097DA3 01                         	dc.b	$01
00097DA4 E1FA                       	smpsAlterNote       $FA
00097DA6 0101                       	dc.b	$01, $01
00097DA8 E1FD                       	smpsAlterNote       $FD
00097DAA ECF5                       	smpsPSGAlterVol     $F5
00097DAC 9206                       	dc.b	nF1, $06
00097DAE EC04                       	smpsPSGAlterVol     $04
00097DB0 E701                       	dc.b	smpsNoAttack, $01
00097DB2 EC07                       	smpsPSGAlterVol     $07
00097DB4 8003                       	dc.b	nRst, $03
00097DB6 ECF5                       	smpsPSGAlterVol     $F5
00097DB8 9206                       	dc.b	nF1, $06
00097DBA EC04                       	smpsPSGAlterVol     $04
00097DBC E701                       	dc.b	smpsNoAttack, $01
00097DBE EC07                       	smpsPSGAlterVol     $07
00097DC0 8006                       	dc.b	nRst, $06
00097DC2 E100                       	smpsAlterNote       $00
00097DC4 01                         	dc.b	$01
00097DC5 E104                       	smpsAlterNote       $04
00097DC7 01                         	dc.b	$01
00097DC8 E103                       	smpsAlterNote       $03
00097DCA 01                         	dc.b	$01
00097DCB E1FD                       	smpsAlterNote       $FD
00097DCD 01                         	dc.b	$01
00097DCE ECF5                       	smpsPSGAlterVol     $F5
00097DD0 9407                       	dc.b	nG1, $07
00097DD2 EC0B                       	smpsPSGAlterVol     $0B
00097DD4 8004                       	dc.b	nRst, $04
00097DD6 ECF5                       	smpsPSGAlterVol     $F5
00097DD8 9406                       	dc.b	nG1, $06
00097DDA EC0B                       	smpsPSGAlterVol     $0B
00097DDC 8007                       	dc.b	nRst, $07
00097DDE E103                       	smpsAlterNote       $03
00097DE0 0101                       	dc.b	$01, $01
00097DE2 E1FD                       	smpsAlterNote       $FD
00097DE4 01                         	dc.b	$01
00097DE5 E1F9                       	smpsAlterNote       $F9
00097DE7 01                         	dc.b	$01
00097DE8 E1FD                       	smpsAlterNote       $FD
00097DEA ECF5                       	smpsPSGAlterVol     $F5
00097DEC 9206                       	dc.b	nF1, $06
00097DEE EC04                       	smpsPSGAlterVol     $04
00097DF0 E701                       	dc.b	smpsNoAttack, $01
00097DF2 EC07                       	smpsPSGAlterVol     $07
00097DF4 8003                       	dc.b	nRst, $03
00097DF6 ECF5                       	smpsPSGAlterVol     $F5
00097DF8 9206                       	dc.b	nF1, $06
00097DFA EC04                       	smpsPSGAlterVol     $04
00097DFC E701                       	dc.b	smpsNoAttack, $01
00097DFE EC07                       	smpsPSGAlterVol     $07
00097E00 8006                       	dc.b	nRst, $06
00097E02 E100                       	smpsAlterNote       $00
00097E04 01                         	dc.b	$01
00097E05 E104                       	smpsAlterNote       $04
00097E07 01                         	dc.b	$01
00097E08 E100                       	smpsAlterNote       $00
00097E0A 01                         	dc.b	$01
00097E0B E1FA                       	smpsAlterNote       $FA
00097E0D 01                         	dc.b	$01
00097E0E E1FD                       	smpsAlterNote       $FD
00097E10 ECF5                       	smpsPSGAlterVol     $F5
00097E12 9206                       	dc.b	nF1, $06
00097E14 EC04                       	smpsPSGAlterVol     $04
00097E16 E701                       	dc.b	smpsNoAttack, $01
00097E18 EC07                       	smpsPSGAlterVol     $07
00097E1A 8003                       	dc.b	nRst, $03
00097E1C ECF5                       	smpsPSGAlterVol     $F5
00097E1E 9107                       	dc.b	nE1, $07
00097E20 EC0B                       	smpsPSGAlterVol     $0B
00097E22 8006                       	dc.b	nRst, $06
00097E24 E100                       	smpsAlterNote       $00
00097E26 01                         	dc.b	$01
00097E27 E103                       	smpsAlterNote       $03
00097E29 0101                       	dc.b	$01, $01
00097E2B E1FD                       	smpsAlterNote       $FD
00097E2D 01                         	dc.b	$01
00097E2E ECF5                       	smpsPSGAlterVol     $F5
00097E30 9207                       	dc.b	nF1, $07
00097E32 EC0B                       	smpsPSGAlterVol     $0B
00097E34 8004                       	dc.b	nRst, $04
00097E36 ECF5                       	smpsPSGAlterVol     $F5
00097E38 9206                       	dc.b	nF1, $06
00097E3A EC04                       	smpsPSGAlterVol     $04
00097E3C E701                       	dc.b	smpsNoAttack, $01
00097E3E EC07                       	smpsPSGAlterVol     $07
00097E40 8006                       	dc.b	nRst, $06
00097E42 E103                       	smpsAlterNote       $03
00097E44 01                         	dc.b	$01
00097E45 E104                       	smpsAlterNote       $04
00097E47 01                         	dc.b	$01
00097E48 E100                       	smpsAlterNote       $00
00097E4A 01                         	dc.b	$01
00097E4B E1FB                       	smpsAlterNote       $FB
00097E4D 01                         	dc.b	$01
00097E4E E1FD                       	smpsAlterNote       $FD
00097E50 ECF5                       	smpsPSGAlterVol     $F5
00097E52 9406                       	dc.b	nG1, $06
00097E54 EC04                       	smpsPSGAlterVol     $04
00097E56 E701                       	dc.b	smpsNoAttack, $01
00097E58 EC07                       	smpsPSGAlterVol     $07
00097E5A 8003                       	dc.b	nRst, $03
00097E5C ECF5                       	smpsPSGAlterVol     $F5
00097E5E 9406                       	dc.b	nG1, $06
00097E60 EC04                       	smpsPSGAlterVol     $04
00097E62 E701                       	dc.b	smpsNoAttack, $01
00097E64 EC07                       	smpsPSGAlterVol     $07
00097E66 8006                       	dc.b	nRst, $06
00097E68 E100                       	smpsAlterNote       $00
00097E6A 01                         	dc.b	$01
00097E6B E104                       	smpsAlterNote       $04
00097E6D 01                         	dc.b	$01
00097E6E E100                       	smpsAlterNote       $00
00097E70 01                         	dc.b	$01
00097E71 E1FD                       	smpsAlterNote       $FD
00097E73 01                         	dc.b	$01
00097E74 ECF5                       	smpsPSGAlterVol     $F5
00097E76 9206                       	dc.b	nF1, $06
00097E78 EC04                       	smpsPSGAlterVol     $04
00097E7A E701                       	dc.b	smpsNoAttack, $01
00097E7C EC07                       	smpsPSGAlterVol     $07
00097E7E 8003                       	dc.b	nRst, $03
00097E80 ECF5                       	smpsPSGAlterVol     $F5
00097E82 9207                       	dc.b	nF1, $07
00097E84 EC0B                       	smpsPSGAlterVol     $0B
00097E86 8007                       	dc.b	nRst, $07
00097E88 E103                       	smpsAlterNote       $03
00097E8A 0101                       	dc.b	$01, $01
00097E8C E1FD                       	smpsAlterNote       $FD
00097E8E 01                         	dc.b	$01
00097E8F E1FA                       	smpsAlterNote       $FA
00097E91 01                         	dc.b	$01
00097E92 E1FD                       	smpsAlterNote       $FD
00097E94 ECF5                       	smpsPSGAlterVol     $F5
00097E96 9206                       	dc.b	nF1, $06
00097E98 EC0B                       	smpsPSGAlterVol     $0B
00097E9A 8004                       	dc.b	nRst, $04
00097E9C ECF5                       	smpsPSGAlterVol     $F5
00097E9E 9206                       	dc.b	nF1, $06
00097EA0 EC04                       	smpsPSGAlterVol     $04
00097EA2 E701                       	dc.b	smpsNoAttack, $01
00097EA4 EC07                       	smpsPSGAlterVol     $07
00097EA6 8006                       	dc.b	nRst, $06
00097EA8 E100                       	smpsAlterNote       $00
00097EAA 01                         	dc.b	$01
00097EAB E104                       	smpsAlterNote       $04
00097EAD 01                         	dc.b	$01
00097EAE E100                       	smpsAlterNote       $00
00097EB0 01                         	dc.b	$01
00097EB1 E1FA                       	smpsAlterNote       $FA
00097EB3 01                         	dc.b	$01
00097EB4 E1FD                       	smpsAlterNote       $FD
00097EB6 ECF5                       	smpsPSGAlterVol     $F5
00097EB8 9206                       	dc.b	nF1, $06
00097EBA EC04                       	smpsPSGAlterVol     $04
00097EBC E704                       	dc.b	smpsNoAttack, $04
00097EBE ECFC                       	smpsPSGAlterVol     $FC
00097EC0 9207                       	dc.b	nF1, $07
00097EC2 EC0B                       	smpsPSGAlterVol     $0B
00097EC4 8006                       	dc.b	nRst, $06
00097EC6 E100                       	smpsAlterNote       $00
00097EC8 01                         	dc.b	$01
00097EC9 E104                       	smpsAlterNote       $04
00097ECB 01                         	dc.b	$01
00097ECC E103                       	smpsAlterNote       $03
00097ECE 01                         	dc.b	$01
00097ECF E1FD                       	smpsAlterNote       $FD
00097ED1 01                         	dc.b	$01
00097ED2 ECF5                       	smpsPSGAlterVol     $F5
00097ED4 9207                       	dc.b	nF1, $07
00097ED6 EC0B                       	smpsPSGAlterVol     $0B
00097ED8 8004                       	dc.b	nRst, $04
00097EDA ECF5                       	smpsPSGAlterVol     $F5
00097EDC 9206                       	dc.b	nF1, $06
00097EDE EC0B                       	smpsPSGAlterVol     $0B
00097EE0 8007                       	dc.b	nRst, $07
00097EE2 E103                       	smpsAlterNote       $03
00097EE4 0101                       	dc.b	$01, $01
00097EE6 E100                       	smpsAlterNote       $00
00097EE8 01                         	dc.b	$01
00097EE9 E1FA                       	smpsAlterNote       $FA
00097EEB 01                         	dc.b	$01
00097EEC E1FD                       	smpsAlterNote       $FD
00097EEE ECF5                       	smpsPSGAlterVol     $F5
00097EF0 9206                       	dc.b	nF1, $06
00097EF2 EC04                       	smpsPSGAlterVol     $04
00097EF4 E704                       	dc.b	smpsNoAttack, $04
00097EF6 ECFC                       	smpsPSGAlterVol     $FC
00097EF8 9206                       	dc.b	nF1, $06
00097EFA EC04                       	smpsPSGAlterVol     $04
00097EFC E701                       	dc.b	smpsNoAttack, $01
00097EFE EC07                       	smpsPSGAlterVol     $07
00097F00 8006                       	dc.b	nRst, $06
00097F02 E100                       	smpsAlterNote       $00
00097F04 01                         	dc.b	$01
00097F05 E104                       	smpsAlterNote       $04
00097F07 01                         	dc.b	$01
00097F08 E100                       	smpsAlterNote       $00
00097F0A 01                         	dc.b	$01
00097F0B E1FD                       	smpsAlterNote       $FD
00097F0D 01                         	dc.b	$01
00097F0E ECF5                       	smpsPSGAlterVol     $F5
00097F10 9206                       	dc.b	nF1, $06
00097F12 EC04                       	smpsPSGAlterVol     $04
00097F14 E701                       	dc.b	smpsNoAttack, $01
00097F16 EC07                       	smpsPSGAlterVol     $07
00097F18 8003                       	dc.b	nRst, $03
00097F1A ECF5                       	smpsPSGAlterVol     $F5
00097F1C 9207                       	dc.b	nF1, $07
00097F1E EC0B                       	smpsPSGAlterVol     $0B
00097F20 8007                       	dc.b	nRst, $07
00097F22 E103                       	smpsAlterNote       $03
00097F24 0101                       	dc.b	$01, $01
00097F26 E1FD                       	smpsAlterNote       $FD
00097F28 01                         	dc.b	$01
00097F29 E1FA                       	smpsAlterNote       $FA
00097F2B 01                         	dc.b	$01
00097F2C E1FD                       	smpsAlterNote       $FD
00097F2E ECF5                       	smpsPSGAlterVol     $F5
00097F30 9106                       	dc.b	nE1, $06
00097F32 EC0B                       	smpsPSGAlterVol     $0B
00097F34 8004                       	dc.b	nRst, $04
00097F36 ECF5                       	smpsPSGAlterVol     $F5
00097F38 9106                       	dc.b	nE1, $06
00097F3A EC04                       	smpsPSGAlterVol     $04
00097F3C E701                       	dc.b	smpsNoAttack, $01
00097F3E EC07                       	smpsPSGAlterVol     $07
00097F40 8006                       	dc.b	nRst, $06
00097F42 E100                       	smpsAlterNote       $00
00097F44 01                         	dc.b	$01
00097F45 E104                       	smpsAlterNote       $04
00097F47 01                         	dc.b	$01
00097F48 E100                       	smpsAlterNote       $00
00097F4A 01                         	dc.b	$01
00097F4B E1FA                       	smpsAlterNote       $FA
00097F4D 01                         	dc.b	$01
00097F4E E1FD                       	smpsAlterNote       $FD
00097F50 ECF5                       	smpsPSGAlterVol     $F5
00097F52 9106                       	dc.b	nE1, $06
00097F54 EC04                       	smpsPSGAlterVol     $04
00097F56 E701                       	dc.b	smpsNoAttack, $01
00097F58 EC07                       	smpsPSGAlterVol     $07
00097F5A 8003                       	dc.b	nRst, $03
00097F5C ECF5                       	smpsPSGAlterVol     $F5
00097F5E 9106                       	dc.b	nE1, $06
00097F60 EC04                       	smpsPSGAlterVol     $04
00097F62 E701                       	dc.b	smpsNoAttack, $01
00097F64 EC07                       	smpsPSGAlterVol     $07
00097F66 8006                       	dc.b	nRst, $06
00097F68 E100                       	smpsAlterNote       $00
00097F6A 01                         	dc.b	$01
00097F6B E104                       	smpsAlterNote       $04
00097F6D 01                         	dc.b	$01
00097F6E E103                       	smpsAlterNote       $03
00097F70 01                         	dc.b	$01
00097F71 E1FD                       	smpsAlterNote       $FD
00097F73 01                         	dc.b	$01
00097F74 ECF5                       	smpsPSGAlterVol     $F5
00097F76 9107                       	dc.b	nE1, $07
00097F78 EC0B                       	smpsPSGAlterVol     $0B
00097F7A 8004                       	dc.b	nRst, $04
00097F7C ECF5                       	smpsPSGAlterVol     $F5
00097F7E 9106                       	dc.b	nE1, $06
00097F80 EC0B                       	smpsPSGAlterVol     $0B
00097F82 8007                       	dc.b	nRst, $07
00097F84 E103                       	smpsAlterNote       $03
00097F86 0101                       	dc.b	$01, $01
00097F88 E100                       	smpsAlterNote       $00
00097F8A 01                         	dc.b	$01
00097F8B E1FA                       	smpsAlterNote       $FA
00097F8D 01                         	dc.b	$01
00097F8E E1FD                       	smpsAlterNote       $FD
00097F90 ECF5                       	smpsPSGAlterVol     $F5
00097F92 9106                       	dc.b	nE1, $06
00097F94 EC04                       	smpsPSGAlterVol     $04
00097F96 E701                       	dc.b	smpsNoAttack, $01
00097F98 EC07                       	smpsPSGAlterVol     $07
00097F9A 8003                       	dc.b	nRst, $03
00097F9C ECF5                       	smpsPSGAlterVol     $F5
00097F9E 9106                       	dc.b	nE1, $06
00097FA0 EC04                       	smpsPSGAlterVol     $04
00097FA2 E701                       	dc.b	smpsNoAttack, $01
00097FA4 EC07                       	smpsPSGAlterVol     $07
00097FA6 8003                       	dc.b	nRst, $03
00097FA8 ECF5                       	smpsPSGAlterVol     $F5
00097FAA 9207                       	dc.b	nF1, $07
00097FAC EC0B                       	smpsPSGAlterVol     $0B
00097FAE 8006                       	dc.b	nRst, $06
00097FB0 E100                       	smpsAlterNote       $00
00097FB2 01                         	dc.b	$01
00097FB3 E104                       	smpsAlterNote       $04
00097FB5 01                         	dc.b	$01
00097FB6 E103                       	smpsAlterNote       $03
00097FB8 01                         	dc.b	$01
00097FB9 E1FD                       	smpsAlterNote       $FD
00097FBB 01                         	dc.b	$01
00097FBC E1F9                       	smpsAlterNote       $F9
00097FBE 01                         	dc.b	$01
00097FBF E1FD                       	smpsAlterNote       $FD
00097FC1 01                         	dc.b	$01
00097FC2 E100                       	smpsAlterNote       $00
00097FC4 01                         	dc.b	$01
00097FC5 E104                       	smpsAlterNote       $04
00097FC7 01                         	dc.b	$01
00097FC8 E1FD                       	smpsAlterNote       $FD
00097FCA ECF5                       	smpsPSGAlterVol     $F5
00097FCC 9203 9203                  	dc.b	nF1, $03, nF1, $03
00097FD0 EC04                       	smpsPSGAlterVol     $04
00097FD2 E701                       	dc.b	smpsNoAttack, $01
00097FD4 EC07                       	smpsPSGAlterVol     $07
00097FD6 8009                       	dc.b	nRst, $09
00097FD8 E100                       	smpsAlterNote       $00
00097FDA 01                         	dc.b	$01
00097FDB E104                       	smpsAlterNote       $04
00097FDD 01                         	dc.b	$01
00097FDE E103                       	smpsAlterNote       $03
00097FE0 01                         	dc.b	$01
00097FE1 E1FD                       	smpsAlterNote       $FD
00097FE3 01                         	dc.b	$01
00097FE4 E1F9                       	smpsAlterNote       $F9
00097FE6 01                         	dc.b	$01
00097FE7 E1FD                       	smpsAlterNote       $FD
00097FE9 01                         	dc.b	$01
00097FEA E100                       	smpsAlterNote       $00
00097FEC 01                         	dc.b	$01
00097FED E104                       	smpsAlterNote       $04
00097FEF 01                         	dc.b	$01
00097FF0 E100                       	smpsAlterNote       $00
00097FF2 01                         	dc.b	$01
00097FF3 E1FA                       	smpsAlterNote       $FA
00097FF5 01                         	dc.b	$01
00097FF6 E1F9                       	smpsAlterNote       $F9
00097FF8 01                         	dc.b	$01
00097FF9 E1FD                       	smpsAlterNote       $FD
00097FFB 01                         	dc.b	$01
00097FFC E103                       	smpsAlterNote       $03
00097FFE 0101                       	dc.b	$01, $01
00098000 E100                       	smpsAlterNote       $00
00098002 01                         	dc.b	$01
00098003 E1FD                       	smpsAlterNote       $FD
00098005 ECF5                       	smpsPSGAlterVol     $F5
00098007 9202                       	dc.b	nF1, $02
00098009 EC04                       	smpsPSGAlterVol     $04
0009800B E701                       	dc.b	smpsNoAttack, $01
0009800D ECFC                       	smpsPSGAlterVol     $FC
0009800F 9106                       	dc.b	nE1, $06
00098011 EC04                       	smpsPSGAlterVol     $04
00098013 E701                       	dc.b	smpsNoAttack, $01
00098015 EC07                       	smpsPSGAlterVol     $07
00098017 8006                       	dc.b	nRst, $06
00098019 E100                       	smpsAlterNote       $00
0009801B 01                         	dc.b	$01
0009801C E104                       	smpsAlterNote       $04
0009801E 01                         	dc.b	$01
0009801F E100                       	smpsAlterNote       $00
00098021 01                         	dc.b	$01
00098022 E1FD                       	smpsAlterNote       $FD
00098024 01                         	dc.b	$01
00098025 E1F9                       	smpsAlterNote       $F9
00098027 01                         	dc.b	$01
00098028 E1FD                       	smpsAlterNote       $FD
0009802A 01                         	dc.b	$01
0009802B E103                       	smpsAlterNote       $03
0009802D 01                         	dc.b	$01
0009802E E104                       	smpsAlterNote       $04
00098030 01                         	dc.b	$01
00098031 E1FD                       	smpsAlterNote       $FD
00098033 ECF5                       	smpsPSGAlterVol     $F5
00098035 9102                       	dc.b	nE1, $02
00098037 EC04                       	smpsPSGAlterVol     $04
00098039 E701                       	dc.b	smpsNoAttack, $01
0009803B ECFC                       	smpsPSGAlterVol     $FC
0009803D 920D                       	dc.b	nF1, $0D
0009803F E100                       	smpsAlterNote       $00
00098041 E701                       	dc.b	smpsNoAttack, $01
00098043 E104                       	smpsAlterNote       $04
00098045 E701                       	dc.b	smpsNoAttack, $01
00098047 E100                       	smpsAlterNote       $00
00098049 E701                       	dc.b	smpsNoAttack, $01
0009804B E1FD                       	smpsAlterNote       $FD
0009804D E701                       	dc.b	smpsNoAttack, $01
0009804F E1F9                       	smpsAlterNote       $F9
00098051 E701                       	dc.b	smpsNoAttack, $01
00098053 E1FD                       	smpsAlterNote       $FD
00098055 E701                       	dc.b	smpsNoAttack, $01
00098057 E103                       	smpsAlterNote       $03
00098059 E701                       	dc.b	smpsNoAttack, $01
0009805B E104                       	smpsAlterNote       $04
0009805D E701                       	dc.b	smpsNoAttack, $01
0009805F E100                       	smpsAlterNote       $00
00098061 E701                       	dc.b	smpsNoAttack, $01
00098063 E1FA                       	smpsAlterNote       $FA
00098065 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098069 E1FD                       	smpsAlterNote       $FD
0009806B E701                       	dc.b	smpsNoAttack, $01
0009806D E103                       	smpsAlterNote       $03
0009806F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098073 E1FD                       	smpsAlterNote       $FD
00098075 E701                       	dc.b	smpsNoAttack, $01
00098077 E1F9                       	smpsAlterNote       $F9
00098079 E701                       	dc.b	smpsNoAttack, $01
0009807B E1FA                       	smpsAlterNote       $FA
0009807D E701                       	dc.b	smpsNoAttack, $01
0009807F E100                       	smpsAlterNote       $00
00098081 EC04                       	smpsPSGAlterVol     $04
00098083 E701                       	dc.b	smpsNoAttack, $01
00098085 EC07                       	smpsPSGAlterVol     $07
00098087 E104                       	smpsAlterNote       $04
00098089 8001                       	dc.b	nRst, $01
0009808B E100                       	smpsAlterNote       $00
0009808D 01                         	dc.b	$01
0009808E E1FD                       	smpsAlterNote       $FD
00098090 01                         	dc.b	$01
00098091 E1F9                       	smpsAlterNote       $F9
00098093 01                         	dc.b	$01
00098094 E1FD                       	smpsAlterNote       $FD
00098096 01                         	dc.b	$01
00098097 E103                       	smpsAlterNote       $03
00098099 01                         	dc.b	$01
0009809A E104                       	smpsAlterNote       $04
0009809C 01                         	dc.b	$01
0009809D E1FD                       	smpsAlterNote       $FD
0009809F ECF5                       	smpsPSGAlterVol     $F5
000980A1 9106                       	dc.b	nE1, $06
000980A3 EC04                       	smpsPSGAlterVol     $04
000980A5 E701                       	dc.b	smpsNoAttack, $01
000980A7 EC07                       	smpsPSGAlterVol     $07
000980A9 8003                       	dc.b	nRst, $03
000980AB ECF5                       	smpsPSGAlterVol     $F5
000980AD 9106                       	dc.b	nE1, $06
000980AF EC04                       	smpsPSGAlterVol     $04
000980B1 E701                       	dc.b	smpsNoAttack, $01
000980B3 EC07                       	smpsPSGAlterVol     $07
000980B5 8006                       	dc.b	nRst, $06
000980B7 E100                       	smpsAlterNote       $00
000980B9 01                         	dc.b	$01
000980BA E104                       	smpsAlterNote       $04
000980BC 01                         	dc.b	$01
000980BD E100                       	smpsAlterNote       $00
000980BF 01                         	dc.b	$01
000980C0 E1FA                       	smpsAlterNote       $FA
000980C2 01                         	dc.b	$01
000980C3 E1FD                       	smpsAlterNote       $FD
000980C5 ECF5                       	smpsPSGAlterVol     $F5
000980C7 9206                       	dc.b	nF1, $06
000980C9 EC04                       	smpsPSGAlterVol     $04
000980CB E701                       	dc.b	smpsNoAttack, $01
000980CD EC07                       	smpsPSGAlterVol     $07
000980CF 8003                       	dc.b	nRst, $03
000980D1 ECF5                       	smpsPSGAlterVol     $F5
000980D3 9207                       	dc.b	nF1, $07
000980D5 EC0B                       	smpsPSGAlterVol     $0B
000980D7 8006                       	dc.b	nRst, $06
000980D9 E100                       	smpsAlterNote       $00
000980DB 01                         	dc.b	$01
000980DC E103                       	smpsAlterNote       $03
000980DE 0101                       	dc.b	$01, $01
000980E0 E1FD                       	smpsAlterNote       $FD
000980E2 01                         	dc.b	$01
000980E3 ECF5                       	smpsPSGAlterVol     $F5
000980E5 9107                       	dc.b	nE1, $07
000980E7 EC0B                       	smpsPSGAlterVol     $0B
000980E9 8004                       	dc.b	nRst, $04
000980EB ECF5                       	smpsPSGAlterVol     $F5
000980ED 9106                       	dc.b	nE1, $06
000980EF EC04                       	smpsPSGAlterVol     $04
000980F1 E701                       	dc.b	smpsNoAttack, $01
000980F3 EC07                       	smpsPSGAlterVol     $07
000980F5 8006                       	dc.b	nRst, $06
000980F7 E103                       	smpsAlterNote       $03
000980F9 01                         	dc.b	$01
000980FA E104                       	smpsAlterNote       $04
000980FC 01                         	dc.b	$01
000980FD E100                       	smpsAlterNote       $00
000980FF 01                         	dc.b	$01
00098100 E1FA                       	smpsAlterNote       $FA
00098102 01                         	dc.b	$01
00098103 E1FD                       	smpsAlterNote       $FD
00098105 ECF5                       	smpsPSGAlterVol     $F5
00098107 9106                       	dc.b	nE1, $06
00098109 EC04                       	smpsPSGAlterVol     $04
0009810B E701                       	dc.b	smpsNoAttack, $01
0009810D EC07                       	smpsPSGAlterVol     $07
0009810F 8003                       	dc.b	nRst, $03
00098111 ECF5                       	smpsPSGAlterVol     $F5
00098113 9106                       	dc.b	nE1, $06
00098115 EC04                       	smpsPSGAlterVol     $04
00098117 E701                       	dc.b	smpsNoAttack, $01
00098119 EC07                       	smpsPSGAlterVol     $07
0009811B 8003                       	dc.b	nRst, $03
0009811D ECF5                       	smpsPSGAlterVol     $F5
0009811F 9207                       	dc.b	nF1, $07
00098121 EC0B                       	smpsPSGAlterVol     $0B
00098123 8006                       	dc.b	nRst, $06
00098125 E100                       	smpsAlterNote       $00
00098127 01                         	dc.b	$01
00098128 E103                       	smpsAlterNote       $03
0009812A 0101                       	dc.b	$01, $01
0009812C E1FD                       	smpsAlterNote       $FD
0009812E 01                         	dc.b	$01
0009812F E1F9                       	smpsAlterNote       $F9
00098131 01                         	dc.b	$01
00098132 E1FA                       	smpsAlterNote       $FA
00098134 01                         	dc.b	$01
00098135 E100                       	smpsAlterNote       $00
00098137 01                         	dc.b	$01
00098138 E104                       	smpsAlterNote       $04
0009813A 01                         	dc.b	$01
0009813B E1FD                       	smpsAlterNote       $FD
0009813D ECF5                       	smpsPSGAlterVol     $F5
0009813F 9203 9203                  	dc.b	nF1, $03, nF1, $03
00098143 EC04                       	smpsPSGAlterVol     $04
00098145 E701                       	dc.b	smpsNoAttack, $01
00098147 EC07                       	smpsPSGAlterVol     $07
00098149 8009                       	dc.b	nRst, $09
0009814B E100                       	smpsAlterNote       $00
0009814D 01                         	dc.b	$01
0009814E E103                       	smpsAlterNote       $03
00098150 0101                       	dc.b	$01, $01
00098152 E1FD                       	smpsAlterNote       $FD
00098154 01                         	dc.b	$01
00098155 E1F9                       	smpsAlterNote       $F9
00098157 01                         	dc.b	$01
00098158 E1FA                       	smpsAlterNote       $FA
0009815A 01                         	dc.b	$01
0009815B E100                       	smpsAlterNote       $00
0009815D 01                         	dc.b	$01
0009815E E104                       	smpsAlterNote       $04
00098160 01                         	dc.b	$01
00098161 E100                       	smpsAlterNote       $00
00098163 01                         	dc.b	$01
00098164 E1FD                       	smpsAlterNote       $FD
00098166 01                         	dc.b	$01
00098167 E1F9                       	smpsAlterNote       $F9
00098169 01                         	dc.b	$01
0009816A E1FD                       	smpsAlterNote       $FD
0009816C 01                         	dc.b	$01
0009816D E103                       	smpsAlterNote       $03
0009816F 01                         	dc.b	$01
00098170 E104                       	smpsAlterNote       $04
00098172 01                         	dc.b	$01
00098173 E100                       	smpsAlterNote       $00
00098175 01                         	dc.b	$01
00098176 E1FD                       	smpsAlterNote       $FD
00098178 ECF5                       	smpsPSGAlterVol     $F5
0009817A 9203 9106                  	dc.b	nF1, $03, nE1, $06
0009817E EC04                       	smpsPSGAlterVol     $04
00098180 E701                       	dc.b	smpsNoAttack, $01
00098182 EC07                       	smpsPSGAlterVol     $07
00098184 8006                       	dc.b	nRst, $06
00098186 E100                       	smpsAlterNote       $00
00098188 01                         	dc.b	$01
00098189 E104                       	smpsAlterNote       $04
0009818B 01                         	dc.b	$01
0009818C E103                       	smpsAlterNote       $03
0009818E 01                         	dc.b	$01
0009818F E1FD                       	smpsAlterNote       $FD
00098191 01                         	dc.b	$01
00098192 E1F9                       	smpsAlterNote       $F9
00098194 01                         	dc.b	$01
00098195 E1FD                       	smpsAlterNote       $FD
00098197 01                         	dc.b	$01
00098198 E100                       	smpsAlterNote       $00
0009819A 01                         	dc.b	$01
0009819B E104                       	smpsAlterNote       $04
0009819D 01                         	dc.b	$01
0009819E E1FD                       	smpsAlterNote       $FD
000981A0 ECF5                       	smpsPSGAlterVol     $F5
000981A2 9103 920D                  	dc.b	nE1, $03, nF1, $0D
000981A6 E100                       	smpsAlterNote       $00
000981A8 E701                       	dc.b	smpsNoAttack, $01
000981AA E104                       	smpsAlterNote       $04
000981AC E701                       	dc.b	smpsNoAttack, $01
000981AE E100                       	smpsAlterNote       $00
000981B0 E701                       	dc.b	smpsNoAttack, $01
000981B2 E1FD                       	smpsAlterNote       $FD
000981B4 E701                       	dc.b	smpsNoAttack, $01
000981B6 E1F9                       	smpsAlterNote       $F9
000981B8 E701                       	dc.b	smpsNoAttack, $01
000981BA E1FD                       	smpsAlterNote       $FD
000981BC E701                       	dc.b	smpsNoAttack, $01
000981BE E103                       	smpsAlterNote       $03
000981C0 E701                       	dc.b	smpsNoAttack, $01
000981C2 E104                       	smpsAlterNote       $04
000981C4 E701                       	dc.b	smpsNoAttack, $01
000981C6 E100                       	smpsAlterNote       $00
000981C8 E701                       	dc.b	smpsNoAttack, $01
000981CA E1FA                       	smpsAlterNote       $FA
000981CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000981D0 E1FD                       	smpsAlterNote       $FD
000981D2 E701                       	dc.b	smpsNoAttack, $01
000981D4 E103                       	smpsAlterNote       $03
000981D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000981DA E100                       	smpsAlterNote       $00
000981DC E701                       	dc.b	smpsNoAttack, $01
000981DE E1FA                       	smpsAlterNote       $FA
000981E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000981E4 E100                       	smpsAlterNote       $00
000981E6 EC04                       	smpsPSGAlterVol     $04
000981E8 E701                       	dc.b	smpsNoAttack, $01
000981EA EC07                       	smpsPSGAlterVol     $07
000981EC E104                       	smpsAlterNote       $04
000981EE 8001                       	dc.b	nRst, $01
000981F0 E103                       	smpsAlterNote       $03
000981F2 01                         	dc.b	$01
000981F3 E1FD                       	smpsAlterNote       $FD
000981F5 01                         	dc.b	$01
000981F6 E1F9                       	smpsAlterNote       $F9
000981F8 01                         	dc.b	$01
000981F9 E1FD                       	smpsAlterNote       $FD
000981FB 01                         	dc.b	$01
000981FC E100                       	smpsAlterNote       $00
000981FE 01                         	dc.b	$01
000981FF E104                       	smpsAlterNote       $04
00098201 01                         	dc.b	$01
00098202 E1FD                       	smpsAlterNote       $FD
00098204 ECF5                       	smpsPSGAlterVol     $F5
00098206 9106                       	dc.b	nE1, $06
00098208 EC04                       	smpsPSGAlterVol     $04
0009820A E701                       	dc.b	smpsNoAttack, $01
0009820C EC07                       	smpsPSGAlterVol     $07
0009820E 8003                       	dc.b	nRst, $03
00098210 ECF5                       	smpsPSGAlterVol     $F5
00098212 9106                       	dc.b	nE1, $06
00098214 EC04                       	smpsPSGAlterVol     $04
00098216 E701                       	dc.b	smpsNoAttack, $01
00098218 EC07                       	smpsPSGAlterVol     $07
0009821A 8006                       	dc.b	nRst, $06
0009821C E100                       	smpsAlterNote       $00
0009821E 01                         	dc.b	$01
0009821F E104                       	smpsAlterNote       $04
00098221 01                         	dc.b	$01
00098222 E100                       	smpsAlterNote       $00
00098224 01                         	dc.b	$01
00098225 E1FD                       	smpsAlterNote       $FD
00098227 01                         	dc.b	$01
00098228 ECF5                       	smpsPSGAlterVol     $F5
0009822A 9206                       	dc.b	nF1, $06
0009822C EC04                       	smpsPSGAlterVol     $04
0009822E E701                       	dc.b	smpsNoAttack, $01
00098230 EC07                       	smpsPSGAlterVol     $07
00098232 8003                       	dc.b	nRst, $03
00098234 ECF5                       	smpsPSGAlterVol     $F5
00098236 9207                       	dc.b	nF1, $07
00098238 EC0B                       	smpsPSGAlterVol     $0B
0009823A 8007                       	dc.b	nRst, $07
0009823C E103                       	smpsAlterNote       $03
0009823E 0101                       	dc.b	$01, $01
00098240 E1FD                       	smpsAlterNote       $FD
00098242 01                         	dc.b	$01
00098243 E1FA                       	smpsAlterNote       $FA
00098245 01                         	dc.b	$01
00098246 E1FD                       	smpsAlterNote       $FD
00098248 ECF5                       	smpsPSGAlterVol     $F5
0009824A 9106                       	dc.b	nE1, $06
0009824C EC0B                       	smpsPSGAlterVol     $0B
0009824E 8004                       	dc.b	nRst, $04
00098250 ECF5                       	smpsPSGAlterVol     $F5
00098252 9106                       	dc.b	nE1, $06
00098254 EC04                       	smpsPSGAlterVol     $04
00098256 E701                       	dc.b	smpsNoAttack, $01
00098258 EC07                       	smpsPSGAlterVol     $07
0009825A 8006                       	dc.b	nRst, $06
0009825C E100                       	smpsAlterNote       $00
0009825E 01                         	dc.b	$01
0009825F E104                       	smpsAlterNote       $04
00098261 01                         	dc.b	$01
00098262 E100                       	smpsAlterNote       $00
00098264 01                         	dc.b	$01
00098265 E1FA                       	smpsAlterNote       $FA
00098267 01                         	dc.b	$01
00098268 E1FD                       	smpsAlterNote       $FD
0009826A ECF5                       	smpsPSGAlterVol     $F5
0009826C 9206                       	dc.b	nF1, $06
0009826E EC04                       	smpsPSGAlterVol     $04
00098270 E701                       	dc.b	smpsNoAttack, $01
00098272 EC07                       	smpsPSGAlterVol     $07
00098274 8003                       	dc.b	nRst, $03
00098276 ECF5                       	smpsPSGAlterVol     $F5
00098278 9206                       	dc.b	nF1, $06
0009827A EC04                       	smpsPSGAlterVol     $04
0009827C E701                       	dc.b	smpsNoAttack, $01
0009827E EC07                       	smpsPSGAlterVol     $07
00098280 8006                       	dc.b	nRst, $06
00098282 E100                       	smpsAlterNote       $00
00098284 01                         	dc.b	$01
00098285 E104                       	smpsAlterNote       $04
00098287 01                         	dc.b	$01
00098288 E103                       	smpsAlterNote       $03
0009828A 01                         	dc.b	$01
0009828B E1FD                       	smpsAlterNote       $FD
0009828D 01                         	dc.b	$01
0009828E ECF5                       	smpsPSGAlterVol     $F5
00098290 9107                       	dc.b	nE1, $07
00098292 EC0B                       	smpsPSGAlterVol     $0B
00098294 8004                       	dc.b	nRst, $04
00098296 ECF5                       	smpsPSGAlterVol     $F5
00098298 9106                       	dc.b	nE1, $06
0009829A EC0B                       	smpsPSGAlterVol     $0B
0009829C 8007                       	dc.b	nRst, $07
0009829E E103                       	smpsAlterNote       $03
000982A0 0101                       	dc.b	$01, $01
000982A2 E100                       	smpsAlterNote       $00
000982A4 01                         	dc.b	$01
000982A5 E1FA                       	smpsAlterNote       $FA
000982A7 01                         	dc.b	$01
000982A8 E1FD                       	smpsAlterNote       $FD
000982AA ECF5                       	smpsPSGAlterVol     $F5
000982AC 9206                       	dc.b	nF1, $06
000982AE EC04                       	smpsPSGAlterVol     $04
000982B0 E701                       	dc.b	smpsNoAttack, $01
000982B2 EC07                       	smpsPSGAlterVol     $07
000982B4 8003                       	dc.b	nRst, $03
000982B6 ECF5                       	smpsPSGAlterVol     $F5
000982B8 9206                       	dc.b	nF1, $06
000982BA EC04                       	smpsPSGAlterVol     $04
000982BC E701                       	dc.b	smpsNoAttack, $01
000982BE EC07                       	smpsPSGAlterVol     $07
000982C0 8006                       	dc.b	nRst, $06
000982C2 E100                       	smpsAlterNote       $00
000982C4 01                         	dc.b	$01
000982C5 E104                       	smpsAlterNote       $04
000982C7 01                         	dc.b	$01
000982C8 E100                       	smpsAlterNote       $00
000982CA 01                         	dc.b	$01
000982CB E1FD                       	smpsAlterNote       $FD
000982CD 01                         	dc.b	$01
000982CE ECF5                       	smpsPSGAlterVol     $F5
000982D0 9106                       	dc.b	nE1, $06
000982D2 EC04                       	smpsPSGAlterVol     $04
000982D4 E701                       	dc.b	smpsNoAttack, $01
000982D6 EC07                       	smpsPSGAlterVol     $07
000982D8 8003                       	dc.b	nRst, $03
000982DA ECF5                       	smpsPSGAlterVol     $F5
000982DC 9107 9106                  	dc.b	nE1, $07, nE1, $06
000982E0 EC04                       	smpsPSGAlterVol     $04
000982E2 E701                       	dc.b	smpsNoAttack, $01
000982E4 ECFC                       	smpsPSGAlterVol     $FC
000982E6 9103                       	dc.b	nE1, $03
000982E8 EC04                       	smpsPSGAlterVol     $04
000982EA E701                       	dc.b	smpsNoAttack, $01
000982EC ECFC                       	smpsPSGAlterVol     $FC
000982EE 9102                       	dc.b	nE1, $02
000982F0 EC04                       	smpsPSGAlterVol     $04
000982F2 E701                       	dc.b	smpsNoAttack, $01
000982F4 ECFC                       	smpsPSGAlterVol     $FC
000982F6 9103                       	dc.b	nE1, $03
000982F8 EC0B                       	smpsPSGAlterVol     $0B
000982FA 800A                       	dc.b	nRst, $0A
000982FC E100                       	smpsAlterNote       $00
000982FE 01                         	dc.b	$01
000982FF E104                       	smpsAlterNote       $04
00098301 01                         	dc.b	$01
00098302 E100                       	smpsAlterNote       $00
00098304 01                         	dc.b	$01
00098305 E1FA                       	smpsAlterNote       $FA
00098307 01                         	dc.b	$01
00098308 E1F9                       	smpsAlterNote       $F9
0009830A 01                         	dc.b	$01
0009830B E1FD                       	smpsAlterNote       $FD
0009830D 01                         	dc.b	$01
0009830E E103                       	smpsAlterNote       $03
00098310 0101                       	dc.b	$01, $01
00098312 E100                       	smpsAlterNote       $00
00098314 01                         	dc.b	$01
00098315 E1FA                       	smpsAlterNote       $FA
00098317 0101                       	dc.b	$01, $01
00098319 E1FD                       	smpsAlterNote       $FD
0009831B ECF5                       	smpsPSGAlterVol     $F5
0009831D 9206                       	dc.b	nF1, $06
0009831F EC04                       	smpsPSGAlterVol     $04
00098321 E704                       	dc.b	smpsNoAttack, $04
00098323 ECFC                       	smpsPSGAlterVol     $FC
00098325 9206                       	dc.b	nF1, $06
00098327 EC04                       	smpsPSGAlterVol     $04
00098329 E701                       	dc.b	smpsNoAttack, $01
0009832B EC07                       	smpsPSGAlterVol     $07
0009832D 8006                       	dc.b	nRst, $06
0009832F E100                       	smpsAlterNote       $00
00098331 01                         	dc.b	$01
00098332 E104                       	smpsAlterNote       $04
00098334 01                         	dc.b	$01
00098335 E103                       	smpsAlterNote       $03
00098337 01                         	dc.b	$01
00098338 E1FD                       	smpsAlterNote       $FD
0009833A 01                         	dc.b	$01
0009833B ECF5                       	smpsPSGAlterVol     $F5
0009833D 9407                       	dc.b	nG1, $07
0009833F EC0B                       	smpsPSGAlterVol     $0B
00098341 8004                       	dc.b	nRst, $04
00098343 ECF5                       	smpsPSGAlterVol     $F5
00098345 9406                       	dc.b	nG1, $06
00098347 EC0B                       	smpsPSGAlterVol     $0B
00098349 8007                       	dc.b	nRst, $07
0009834B E103                       	smpsAlterNote       $03
0009834D 0101                       	dc.b	$01, $01
0009834F E1FD                       	smpsAlterNote       $FD
00098351 01                         	dc.b	$01
00098352 E1F9                       	smpsAlterNote       $F9
00098354 01                         	dc.b	$01
00098355 E1FD                       	smpsAlterNote       $FD
00098357 ECF5                       	smpsPSGAlterVol     $F5
00098359 9206                       	dc.b	nF1, $06
0009835B EC04                       	smpsPSGAlterVol     $04
0009835D E701                       	dc.b	smpsNoAttack, $01
0009835F EC07                       	smpsPSGAlterVol     $07
00098361 8003                       	dc.b	nRst, $03
00098363 ECF5                       	smpsPSGAlterVol     $F5
00098365 9206                       	dc.b	nF1, $06
00098367 EC04                       	smpsPSGAlterVol     $04
00098369 E701                       	dc.b	smpsNoAttack, $01
0009836B EC07                       	smpsPSGAlterVol     $07
0009836D 8006                       	dc.b	nRst, $06
0009836F E100                       	smpsAlterNote       $00
00098371 01                         	dc.b	$01
00098372 E104                       	smpsAlterNote       $04
00098374 01                         	dc.b	$01
00098375 E100                       	smpsAlterNote       $00
00098377 01                         	dc.b	$01
00098378 E1FA                       	smpsAlterNote       $FA
0009837A 01                         	dc.b	$01
0009837B E1FD                       	smpsAlterNote       $FD
0009837D ECF5                       	smpsPSGAlterVol     $F5
0009837F 9206                       	dc.b	nF1, $06
00098381 EC04                       	smpsPSGAlterVol     $04
00098383 E701                       	dc.b	smpsNoAttack, $01
00098385 EC07                       	smpsPSGAlterVol     $07
00098387 8003                       	dc.b	nRst, $03
00098389 ECF5                       	smpsPSGAlterVol     $F5
0009838B 9107                       	dc.b	nE1, $07
0009838D EC0B                       	smpsPSGAlterVol     $0B
0009838F 8006                       	dc.b	nRst, $06
00098391 E100                       	smpsAlterNote       $00
00098393 01                         	dc.b	$01
00098394 E103                       	smpsAlterNote       $03
00098396 0101                       	dc.b	$01, $01
00098398 E1FD                       	smpsAlterNote       $FD
0009839A 01                         	dc.b	$01
0009839B ECF5                       	smpsPSGAlterVol     $F5
0009839D 9207                       	dc.b	nF1, $07
0009839F EC0B                       	smpsPSGAlterVol     $0B
000983A1 8004                       	dc.b	nRst, $04
000983A3 ECF5                       	smpsPSGAlterVol     $F5
000983A5 9206                       	dc.b	nF1, $06
000983A7 EC04                       	smpsPSGAlterVol     $04
000983A9 E701                       	dc.b	smpsNoAttack, $01
000983AB EC07                       	smpsPSGAlterVol     $07
000983AD 8006                       	dc.b	nRst, $06
000983AF E103                       	smpsAlterNote       $03
000983B1 01                         	dc.b	$01
000983B2 E104                       	smpsAlterNote       $04
000983B4 01                         	dc.b	$01
000983B5 E100                       	smpsAlterNote       $00
000983B7 01                         	dc.b	$01
000983B8 E1FB                       	smpsAlterNote       $FB
000983BA 01                         	dc.b	$01
000983BB E1FD                       	smpsAlterNote       $FD
000983BD ECF5                       	smpsPSGAlterVol     $F5
000983BF 9406                       	dc.b	nG1, $06
000983C1 EC04                       	smpsPSGAlterVol     $04
000983C3 E701                       	dc.b	smpsNoAttack, $01
000983C5 EC07                       	smpsPSGAlterVol     $07
000983C7 8003                       	dc.b	nRst, $03
000983C9 ECF5                       	smpsPSGAlterVol     $F5
000983CB 9406                       	dc.b	nG1, $06
000983CD EC04                       	smpsPSGAlterVol     $04
000983CF E701                       	dc.b	smpsNoAttack, $01
000983D1 EC07                       	smpsPSGAlterVol     $07
000983D3 8006                       	dc.b	nRst, $06
000983D5 E100                       	smpsAlterNote       $00
000983D7 01                         	dc.b	$01
000983D8 E104                       	smpsAlterNote       $04
000983DA 01                         	dc.b	$01
000983DB E100                       	smpsAlterNote       $00
000983DD 01                         	dc.b	$01
000983DE E1FD                       	smpsAlterNote       $FD
000983E0 01                         	dc.b	$01
000983E1 ECF5                       	smpsPSGAlterVol     $F5
000983E3 9206                       	dc.b	nF1, $06
000983E5 EC04                       	smpsPSGAlterVol     $04
000983E7 E701                       	dc.b	smpsNoAttack, $01
000983E9 EC07                       	smpsPSGAlterVol     $07
000983EB 8003                       	dc.b	nRst, $03
000983ED ECF5                       	smpsPSGAlterVol     $F5
000983EF 9207                       	dc.b	nF1, $07
000983F1 EC0B                       	smpsPSGAlterVol     $0B
000983F3 8007                       	dc.b	nRst, $07
000983F5 E103                       	smpsAlterNote       $03
000983F7 0101                       	dc.b	$01, $01
000983F9 E1FD                       	smpsAlterNote       $FD
000983FB 01                         	dc.b	$01
000983FC E1FA                       	smpsAlterNote       $FA
000983FE 01                         	dc.b	$01
000983FF E1FD                       	smpsAlterNote       $FD
00098401 ECF5                       	smpsPSGAlterVol     $F5
00098403 9206                       	dc.b	nF1, $06
00098405 EC0B                       	smpsPSGAlterVol     $0B
00098407 8004                       	dc.b	nRst, $04
00098409 ECF5                       	smpsPSGAlterVol     $F5
0009840B 9206                       	dc.b	nF1, $06
0009840D EC04                       	smpsPSGAlterVol     $04
0009840F E701                       	dc.b	smpsNoAttack, $01
00098411 EC07                       	smpsPSGAlterVol     $07
00098413 8006                       	dc.b	nRst, $06
00098415 E100                       	smpsAlterNote       $00
00098417 01                         	dc.b	$01
00098418 E104                       	smpsAlterNote       $04
0009841A 01                         	dc.b	$01
0009841B E100                       	smpsAlterNote       $00
0009841D 01                         	dc.b	$01
0009841E E1FA                       	smpsAlterNote       $FA
00098420 01                         	dc.b	$01
00098421 E1FD                       	smpsAlterNote       $FD
00098423 ECF5                       	smpsPSGAlterVol     $F5
00098425 9206                       	dc.b	nF1, $06
00098427 EC04                       	smpsPSGAlterVol     $04
00098429 E701                       	dc.b	smpsNoAttack, $01
0009842B EC07                       	smpsPSGAlterVol     $07
0009842D 8003                       	dc.b	nRst, $03
0009842F ECF5                       	smpsPSGAlterVol     $F5
00098431 9207                       	dc.b	nF1, $07
00098433 EC0B                       	smpsPSGAlterVol     $0B
00098435 8006                       	dc.b	nRst, $06
00098437 E100                       	smpsAlterNote       $00
00098439 01                         	dc.b	$01
0009843A E103                       	smpsAlterNote       $03
0009843C 0101                       	dc.b	$01, $01
0009843E E1FD                       	smpsAlterNote       $FD
00098440 01                         	dc.b	$01
00098441 ECF5                       	smpsPSGAlterVol     $F5
00098443 9207                       	dc.b	nF1, $07
00098445 EC0B                       	smpsPSGAlterVol     $0B
00098447 8004                       	dc.b	nRst, $04
00098449 ECF5                       	smpsPSGAlterVol     $F5
0009844B 9206                       	dc.b	nF1, $06
0009844D EC0B                       	smpsPSGAlterVol     $0B
0009844F 8007                       	dc.b	nRst, $07
00098451 E103                       	smpsAlterNote       $03
00098453 0101                       	dc.b	$01, $01
00098455 E100                       	smpsAlterNote       $00
00098457 01                         	dc.b	$01
00098458 E1FA                       	smpsAlterNote       $FA
0009845A 01                         	dc.b	$01
0009845B E1FD                       	smpsAlterNote       $FD
0009845D ECF5                       	smpsPSGAlterVol     $F5
0009845F 9206                       	dc.b	nF1, $06
00098461 EC04                       	smpsPSGAlterVol     $04
00098463 E701                       	dc.b	smpsNoAttack, $01
00098465 EC07                       	smpsPSGAlterVol     $07
00098467 8003                       	dc.b	nRst, $03
00098469 ECF5                       	smpsPSGAlterVol     $F5
0009846B 9206                       	dc.b	nF1, $06
0009846D EC04                       	smpsPSGAlterVol     $04
0009846F E701                       	dc.b	smpsNoAttack, $01
00098471 EC07                       	smpsPSGAlterVol     $07
00098473 8006                       	dc.b	nRst, $06
00098475 E100                       	smpsAlterNote       $00
00098477 01                         	dc.b	$01
00098478 E104                       	smpsAlterNote       $04
0009847A 01                         	dc.b	$01
0009847B E100                       	smpsAlterNote       $00
0009847D 01                         	dc.b	$01
0009847E E1FD                       	smpsAlterNote       $FD
00098480 01                         	dc.b	$01
00098481 ECF5                       	smpsPSGAlterVol     $F5
00098483 9206                       	dc.b	nF1, $06
00098485 EC04                       	smpsPSGAlterVol     $04
00098487 E701                       	dc.b	smpsNoAttack, $01
00098489 EC07                       	smpsPSGAlterVol     $07
0009848B 8003                       	dc.b	nRst, $03
0009848D ECF5                       	smpsPSGAlterVol     $F5
0009848F 9207                       	dc.b	nF1, $07
00098491 EC0B                       	smpsPSGAlterVol     $0B
00098493 8007                       	dc.b	nRst, $07
00098495 E104                       	smpsAlterNote       $04
00098497 0101                       	dc.b	$01, $01
00098499 E1FB                       	smpsAlterNote       $FB
0009849B 01                         	dc.b	$01
0009849C E1F6                       	smpsAlterNote       $F6
0009849E 0101                       	dc.b	$01, $01
000984A0 E1FF                       	smpsAlterNote       $FF
000984A2 01                         	dc.b	$01
000984A3 E105                       	smpsAlterNote       $05
000984A5 01                         	dc.b	$01
000984A6 E104                       	smpsAlterNote       $04
000984A8 01                         	dc.b	$01
000984A9 E1FB                       	smpsAlterNote       $FB
000984AB 01                         	dc.b	$01
000984AC E1F5                       	smpsAlterNote       $F5
000984AE 01                         	dc.b	$01
000984AF E1FC                       	smpsAlterNote       $FC
000984B1 ECF5                       	smpsPSGAlterVol     $F5
000984B3 8B0E                       	dc.b	nBb0, $0E
000984B5 E102                       	smpsAlterNote       $02
000984B7 EC0B                       	smpsPSGAlterVol     $0B
000984B9 8001                       	dc.b	nRst, $01
000984BB E101                       	smpsAlterNote       $01
000984BD 01                         	dc.b	$01
000984BE E1FC                       	smpsAlterNote       $FC
000984C0 01                         	dc.b	$01
000984C1 E1F9                       	smpsAlterNote       $F9
000984C3 0101                       	dc.b	$01, $01
000984C5 E1FF                       	smpsAlterNote       $FF
000984C7 01                         	dc.b	$01
000984C8 E102                       	smpsAlterNote       $02
000984CA 01                         	dc.b	$01
000984CB E1FF                       	smpsAlterNote       $FF
000984CD 01                         	dc.b	$01
000984CE E1FC                       	smpsAlterNote       $FC
000984D0 01                         	dc.b	$01
000984D1 E1F8                       	smpsAlterNote       $F8
000984D3 01                         	dc.b	$01
000984D4 E1FC                       	smpsAlterNote       $FC
000984D6 01                         	dc.b	$01
000984D7 E101                       	smpsAlterNote       $01
000984D9 01                         	dc.b	$01
000984DA E102                       	smpsAlterNote       $02
000984DC 01                         	dc.b	$01
000984DD E1FF                       	smpsAlterNote       $FF
000984DF 01                         	dc.b	$01
000984E0 E1FB                       	smpsAlterNote       $FB
000984E2 ECF5                       	smpsPSGAlterVol     $F5
000984E4 8D0D                       	dc.b	nC1, $0D
000984E6 E101                       	smpsAlterNote       $01
000984E8 EC0B                       	smpsPSGAlterVol     $0B
000984EA 8001                       	dc.b	nRst, $01
000984EC E102                       	smpsAlterNote       $02
000984EE 01                         	dc.b	$01
000984EF E1FF                       	smpsAlterNote       $FF
000984F1 01                         	dc.b	$01
000984F2 E1F9                       	smpsAlterNote       $F9
000984F4 0101                       	dc.b	$01, $01
000984F6 E1FC                       	smpsAlterNote       $FC
000984F8 01                         	dc.b	$01
000984F9 E101                       	smpsAlterNote       $01
000984FB 0101                       	dc.b	$01, $01
000984FD E1FC                       	smpsAlterNote       $FC
000984FF 01                         	dc.b	$01
00098500 E1F9                       	smpsAlterNote       $F9
00098502 0101                       	dc.b	$01, $01
00098504 E1FF                       	smpsAlterNote       $FF
00098506 01                         	dc.b	$01
00098507 E102                       	smpsAlterNote       $02
00098509 01                         	dc.b	$01
0009850A E101                       	smpsAlterNote       $01
0009850C 01                         	dc.b	$01
0009850D E1FC                       	smpsAlterNote       $FC
0009850F ECF5                       	smpsPSGAlterVol     $F5
00098511 8F0D                       	dc.b	nD1, $0D
00098513 E1FF                       	smpsAlterNote       $FF
00098515 EC04                       	smpsPSGAlterVol     $04
00098517 E701                       	dc.b	smpsNoAttack, $01
00098519 EC07                       	smpsPSGAlterVol     $07
0009851B E103                       	smpsAlterNote       $03
0009851D 8001                       	dc.b	nRst, $01
0009851F E102                       	smpsAlterNote       $02
00098521 01                         	dc.b	$01
00098522 E1FD                       	smpsAlterNote       $FD
00098524 01                         	dc.b	$01
00098525 E1F9                       	smpsAlterNote       $F9
00098527 01                         	dc.b	$01
00098528 E1FD                       	smpsAlterNote       $FD
0009852A 01                         	dc.b	$01
0009852B E100                       	smpsAlterNote       $00
0009852D 01                         	dc.b	$01
0009852E E103                       	smpsAlterNote       $03
00098530 01                         	dc.b	$01
00098531 E100                       	smpsAlterNote       $00
00098533 01                         	dc.b	$01
00098534 E1FA                       	smpsAlterNote       $FA
00098536 01                         	dc.b	$01
00098537 E1F9                       	smpsAlterNote       $F9
00098539 01                         	dc.b	$01
0009853A E1FD                       	smpsAlterNote       $FD
0009853C 01                         	dc.b	$01
0009853D E102                       	smpsAlterNote       $02
0009853F 0101                       	dc.b	$01, $01
00098541 E100                       	smpsAlterNote       $00
00098543 01                         	dc.b	$01
00098544 E1FD                       	smpsAlterNote       $FD
00098546 ECF5                       	smpsPSGAlterVol     $F5
00098548 910D                       	dc.b	nE1, $0D
0009854A E103                       	smpsAlterNote       $03
0009854C EC0B                       	smpsPSGAlterVol     $0B
0009854E 8001 01                    	dc.b	nRst, $01, $01
00098551 E100                       	smpsAlterNote       $00
00098553 01                         	dc.b	$01
00098554 E1FA                       	smpsAlterNote       $FA
00098556 0101                       	dc.b	$01, $01
00098558 E100                       	smpsAlterNote       $00
0009855A 01                         	dc.b	$01
0009855B E103                       	smpsAlterNote       $03
0009855D 01                         	dc.b	$01
0009855E E1FD                       	smpsAlterNote       $FD
00098560 ECF5                       	smpsPSGAlterVol     $F5
00098562 9206                       	dc.b	nF1, $06
00098564 EC04                       	smpsPSGAlterVol     $04
00098566 E701                       	dc.b	smpsNoAttack, $01
00098568 EC07                       	smpsPSGAlterVol     $07
0009856A 8003                       	dc.b	nRst, $03
0009856C ECF5                       	smpsPSGAlterVol     $F5
0009856E 9207                       	dc.b	nF1, $07
00098570 EC0B                       	smpsPSGAlterVol     $0B
00098572 8006                       	dc.b	nRst, $06
00098574 E100                       	smpsAlterNote       $00
00098576 01                         	dc.b	$01
00098577 E103                       	smpsAlterNote       $03
00098579 0101                       	dc.b	$01, $01
0009857B E1FD                       	smpsAlterNote       $FD
0009857D 01                         	dc.b	$01
0009857E ECF5                       	smpsPSGAlterVol     $F5
00098580 9407                       	dc.b	nG1, $07
00098582 EC0B                       	smpsPSGAlterVol     $0B
00098584 8004                       	dc.b	nRst, $04
00098586 ECF5                       	smpsPSGAlterVol     $F5
00098588 9406                       	dc.b	nG1, $06
0009858A EC04                       	smpsPSGAlterVol     $04
0009858C E701                       	dc.b	smpsNoAttack, $01
0009858E EC07                       	smpsPSGAlterVol     $07
00098590 8006                       	dc.b	nRst, $06
00098592 E103                       	smpsAlterNote       $03
00098594 01                         	dc.b	$01
00098595 E104                       	smpsAlterNote       $04
00098597 01                         	dc.b	$01
00098598 E100                       	smpsAlterNote       $00
0009859A 01                         	dc.b	$01
0009859B E1F9                       	smpsAlterNote       $F9
0009859D 01                         	dc.b	$01
0009859E E1FD                       	smpsAlterNote       $FD
000985A0 ECF5                       	smpsPSGAlterVol     $F5
000985A2 9206                       	dc.b	nF1, $06
000985A4 EC04                       	smpsPSGAlterVol     $04
000985A6 E701                       	dc.b	smpsNoAttack, $01
000985A8 EC07                       	smpsPSGAlterVol     $07
000985AA 8003                       	dc.b	nRst, $03
000985AC ECF5                       	smpsPSGAlterVol     $F5
000985AE 9206                       	dc.b	nF1, $06
000985B0 EC04                       	smpsPSGAlterVol     $04
000985B2 E701                       	dc.b	smpsNoAttack, $01
000985B4 EC07                       	smpsPSGAlterVol     $07
000985B6 8006                       	dc.b	nRst, $06
000985B8 E100                       	smpsAlterNote       $00
000985BA 01                         	dc.b	$01
000985BB E104                       	smpsAlterNote       $04
000985BD 01                         	dc.b	$01
000985BE E103                       	smpsAlterNote       $03
000985C0 01                         	dc.b	$01
000985C1 E1FD                       	smpsAlterNote       $FD
000985C3 01                         	dc.b	$01
000985C4 ECF5                       	smpsPSGAlterVol     $F5
000985C6 9407                       	dc.b	nG1, $07
000985C8 EC0B                       	smpsPSGAlterVol     $0B
000985CA 8004                       	dc.b	nRst, $04
000985CC ECF5                       	smpsPSGAlterVol     $F5
000985CE 9406                       	dc.b	nG1, $06
000985D0 EC0B                       	smpsPSGAlterVol     $0B
000985D2 8007                       	dc.b	nRst, $07
000985D4 E103                       	smpsAlterNote       $03
000985D6 0101                       	dc.b	$01, $01
000985D8 E100                       	smpsAlterNote       $00
000985DA 01                         	dc.b	$01
000985DB E1F9                       	smpsAlterNote       $F9
000985DD 01                         	dc.b	$01
000985DE E1FD                       	smpsAlterNote       $FD
000985E0 ECF5                       	smpsPSGAlterVol     $F5
000985E2 9206                       	dc.b	nF1, $06
000985E4 EC04                       	smpsPSGAlterVol     $04
000985E6 E701                       	dc.b	smpsNoAttack, $01
000985E8 EC07                       	smpsPSGAlterVol     $07
000985EA 8003                       	dc.b	nRst, $03
000985EC ECF5                       	smpsPSGAlterVol     $F5
000985EE 9206                       	dc.b	nF1, $06
000985F0 EC04                       	smpsPSGAlterVol     $04
000985F2 E701                       	dc.b	smpsNoAttack, $01
000985F4 EC07                       	smpsPSGAlterVol     $07
000985F6 8006                       	dc.b	nRst, $06
000985F8 E100                       	smpsAlterNote       $00
000985FA 01                         	dc.b	$01
000985FB E104                       	smpsAlterNote       $04
000985FD 01                         	dc.b	$01
000985FE E100                       	smpsAlterNote       $00
00098600 01                         	dc.b	$01
00098601 E1FB                       	smpsAlterNote       $FB
00098603 01                         	dc.b	$01
00098604 E1FD                       	smpsAlterNote       $FD
00098606 ECF5                       	smpsPSGAlterVol     $F5
00098608 9406                       	dc.b	nG1, $06
0009860A EC04                       	smpsPSGAlterVol     $04
0009860C E701                       	dc.b	smpsNoAttack, $01
0009860E EC07                       	smpsPSGAlterVol     $07
00098610 8003                       	dc.b	nRst, $03
00098612 ECF5                       	smpsPSGAlterVol     $F5
00098614 9407                       	dc.b	nG1, $07
00098616 EC0B                       	smpsPSGAlterVol     $0B
00098618 8006                       	dc.b	nRst, $06
0009861A E100                       	smpsAlterNote       $00
0009861C 01                         	dc.b	$01
0009861D E103                       	smpsAlterNote       $03
0009861F 0101                       	dc.b	$01, $01
00098621 E1FD                       	smpsAlterNote       $FD
00098623 01                         	dc.b	$01
00098624 ECF5                       	smpsPSGAlterVol     $F5
00098626 9207                       	dc.b	nF1, $07
00098628 EC0B                       	smpsPSGAlterVol     $0B
0009862A 8004                       	dc.b	nRst, $04
0009862C ECF5                       	smpsPSGAlterVol     $F5
0009862E 9206                       	dc.b	nF1, $06
00098630 EC04                       	smpsPSGAlterVol     $04
00098632 E701                       	dc.b	smpsNoAttack, $01
00098634 ECFC                       	smpsPSGAlterVol     $FC
00098636 E1FC                       	smpsAlterNote       $FC
00098638 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
0009863C EC04                       	smpsPSGAlterVol     $04
0009863E E701                       	dc.b	smpsNoAttack, $01
00098640 ECFC                       	smpsPSGAlterVol     $FC
00098642 9003                       	dc.b	nEb1, $03
00098644 E1FD                       	smpsAlterNote       $FD
00098646 9403                       	dc.b	nG1, $03
00098648 EC04                       	smpsPSGAlterVol     $04
0009864A E701                       	dc.b	smpsNoAttack, $01
0009864C E1FE                       	smpsAlterNote       $FE
0009864E ECFC                       	smpsPSGAlterVol     $FC
00098650 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
00098654 EC04                       	smpsPSGAlterVol     $04
00098656 E701                       	dc.b	smpsNoAttack, $01
00098658 EC07                       	smpsPSGAlterVol     $07
0009865A 8009                       	dc.b	nRst, $09
0009865C E100                       	smpsAlterNote       $00
0009865E 01                         	dc.b	$01
0009865F F6F5 19                    	smpsJump            music84_Jump07
00098662                            
00098662                            ; PSG2 Data
00098662                            music84_PSG2:
00098662 E1FC                       	smpsAlterNote       $FC
00098664 EC04                       	smpsPSGAlterVol     $04
00098666 8F03                       	dc.b	nD1, $03
00098668 E1FD                       	smpsAlterNote       $FD
0009866A 9203                       	dc.b	nF1, $03
0009866C EC04                       	smpsPSGAlterVol     $04
0009866E E701                       	dc.b	smpsNoAttack, $01
00098670 E1FE                       	smpsAlterNote       $FE
00098672 ECFC                       	smpsPSGAlterVol     $FC
00098674 9603                       	dc.b	nA1, $03
00098676 E1FD                       	smpsAlterNote       $FD
00098678 9103                       	dc.b	nE1, $03
0009867A EC04                       	smpsPSGAlterVol     $04
0009867C E701                       	dc.b	smpsNoAttack, $01
0009867E ECFC                       	smpsPSGAlterVol     $FC
00098680 9403                       	dc.b	nG1, $03
00098682 E1FE                       	smpsAlterNote       $FE
00098684 9703                       	dc.b	nBb1, $03
00098686 EC04                       	smpsPSGAlterVol     $04
00098688 E701                       	dc.b	smpsNoAttack, $01
0009868A E1FF                       	smpsAlterNote       $FF
0009868C ECFC                       	smpsPSGAlterVol     $FC
0009868E 9B02                       	dc.b	nD2, $02
00098690 EC04                       	smpsPSGAlterVol     $04
00098692 E701                       	dc.b	smpsNoAttack, $01
00098694 ECFC                       	smpsPSGAlterVol     $FC
00098696 E1FE                       	smpsAlterNote       $FE
00098698 9A03                       	dc.b	nCs2, $03
0009869A EC0B                       	smpsPSGAlterVol     $0B
0009869C 800A                       	dc.b	nRst, $0A
0009869E E102                       	smpsAlterNote       $02
000986A0 01                         	dc.b	$01
000986A1 E10A                       	smpsAlterNote       $0A
000986A3 01                         	dc.b	$01
000986A4 E102                       	smpsAlterNote       $02
000986A6 01                         	dc.b	$01
000986A7 E1FC                       	smpsAlterNote       $FC
000986A9 01                         	dc.b	$01
000986AA E10A                       	smpsAlterNote       $0A
000986AC 01                         	dc.b	$01
000986AD E1FC                       	smpsAlterNote       $FC
000986AF 01                         	dc.b	$01
000986B0 E108                       	smpsAlterNote       $08
000986B2 01                         	dc.b	$01
000986B3 E10A                       	smpsAlterNote       $0A
000986B5 01                         	dc.b	$01
000986B6 E102                       	smpsAlterNote       $02
000986B8 01                         	dc.b	$01
000986B9 E1F7                       	smpsAlterNote       $F7
000986BB 0101                       	dc.b	$01, $01
000986BD E102                       	smpsAlterNote       $02
000986BF 01                         	dc.b	$01
000986C0 E108                       	smpsAlterNote       $08
000986C2 0101                       	dc.b	$01, $01
000986C4 E1FC                       	smpsAlterNote       $FC
000986C6 01                         	dc.b	$01
000986C7 E10A                       	smpsAlterNote       $0A
000986C9 01                         	dc.b	$01
000986CA E1F7                       	smpsAlterNote       $F7
000986CC 01                         	dc.b	$01
000986CD E102                       	smpsAlterNote       $02
000986CF 01                         	dc.b	$01
000986D0 E10A                       	smpsAlterNote       $0A
000986D2 01                         	dc.b	$01
000986D3 E102                       	smpsAlterNote       $02
000986D5 01                         	dc.b	$01
000986D6 E1FC                       	smpsAlterNote       $FC
000986D8 01                         	dc.b	$01
000986D9                            
000986D9                            music84_Jump06:
000986D9 E10A                       	smpsAlterNote       $0A
000986DB 8001                       	dc.b	nRst, $01
000986DD E1FC                       	smpsAlterNote       $FC
000986DF 01                         	dc.b	$01
000986E0 E108                       	smpsAlterNote       $08
000986E2 01                         	dc.b	$01
000986E3 E10A                       	smpsAlterNote       $0A
000986E5 01                         	dc.b	$01
000986E6 E1FC                       	smpsAlterNote       $FC
000986E8 ECF5                       	smpsPSGAlterVol     $F5
000986EA 8F06                       	dc.b	nD1, $06
000986EC EC04                       	smpsPSGAlterVol     $04
000986EE E701                       	dc.b	smpsNoAttack, $01
000986F0 EC07                       	smpsPSGAlterVol     $07
000986F2 8003                       	dc.b	nRst, $03
000986F4 ECF5                       	smpsPSGAlterVol     $F5
000986F6 8F06                       	dc.b	nD1, $06
000986F8 EC04                       	smpsPSGAlterVol     $04
000986FA E701                       	dc.b	smpsNoAttack, $01
000986FC EC07                       	smpsPSGAlterVol     $07
000986FE 8006                       	dc.b	nRst, $06
00098700 E1FF                       	smpsAlterNote       $FF
00098702 01                         	dc.b	$01
00098703 E102                       	smpsAlterNote       $02
00098705 01                         	dc.b	$01
00098706 E1FF                       	smpsAlterNote       $FF
00098708 01                         	dc.b	$01
00098709 E1F9                       	smpsAlterNote       $F9
0009870B 01                         	dc.b	$01
0009870C E1FC                       	smpsAlterNote       $FC
0009870E ECF5                       	smpsPSGAlterVol     $F5
00098710 9006                       	dc.b	nEb1, $06
00098712 EC04                       	smpsPSGAlterVol     $04
00098714 E701                       	dc.b	smpsNoAttack, $01
00098716 EC07                       	smpsPSGAlterVol     $07
00098718 8003                       	dc.b	nRst, $03
0009871A ECF5                       	smpsPSGAlterVol     $F5
0009871C 9007                       	dc.b	nEb1, $07
0009871E EC0B                       	smpsPSGAlterVol     $0B
00098720 8006                       	dc.b	nRst, $06
00098722 E1FF                       	smpsAlterNote       $FF
00098724 01                         	dc.b	$01
00098725 E103                       	smpsAlterNote       $03
00098727 0101                       	dc.b	$01, $01
00098729 E1FC                       	smpsAlterNote       $FC
0009872B 01                         	dc.b	$01
0009872C ECF5                       	smpsPSGAlterVol     $F5
0009872E 8F07                       	dc.b	nD1, $07
00098730 EC0B                       	smpsPSGAlterVol     $0B
00098732 8004                       	dc.b	nRst, $04
00098734 ECF5                       	smpsPSGAlterVol     $F5
00098736 8F06                       	dc.b	nD1, $06
00098738 EC04                       	smpsPSGAlterVol     $04
0009873A E701                       	dc.b	smpsNoAttack, $01
0009873C EC07                       	smpsPSGAlterVol     $07
0009873E 8006                       	dc.b	nRst, $06
00098740 E102                       	smpsAlterNote       $02
00098742 01                         	dc.b	$01
00098743 E103                       	smpsAlterNote       $03
00098745 01                         	dc.b	$01
00098746 E1FF                       	smpsAlterNote       $FF
00098748 01                         	dc.b	$01
00098749 E1F9                       	smpsAlterNote       $F9
0009874B 01                         	dc.b	$01
0009874C E1FC                       	smpsAlterNote       $FC
0009874E ECF5                       	smpsPSGAlterVol     $F5
00098750 8F06                       	dc.b	nD1, $06
00098752 EC04                       	smpsPSGAlterVol     $04
00098754 E701                       	dc.b	smpsNoAttack, $01
00098756 EC07                       	smpsPSGAlterVol     $07
00098758 8003                       	dc.b	nRst, $03
0009875A ECF5                       	smpsPSGAlterVol     $F5
0009875C 8F06                       	dc.b	nD1, $06
0009875E EC04                       	smpsPSGAlterVol     $04
00098760 E701                       	dc.b	smpsNoAttack, $01
00098762 EC07                       	smpsPSGAlterVol     $07
00098764 8006                       	dc.b	nRst, $06
00098766 E1FF                       	smpsAlterNote       $FF
00098768 01                         	dc.b	$01
00098769 E103                       	smpsAlterNote       $03
0009876B 01                         	dc.b	$01
0009876C E1FF                       	smpsAlterNote       $FF
0009876E 01                         	dc.b	$01
0009876F E1FC                       	smpsAlterNote       $FC
00098771 01                         	dc.b	$01
00098772 ECF5                       	smpsPSGAlterVol     $F5
00098774 8F06                       	dc.b	nD1, $06
00098776 EC04                       	smpsPSGAlterVol     $04
00098778 E701                       	dc.b	smpsNoAttack, $01
0009877A EC07                       	smpsPSGAlterVol     $07
0009877C 8003                       	dc.b	nRst, $03
0009877E ECF5                       	smpsPSGAlterVol     $F5
00098780 8F07                       	dc.b	nD1, $07
00098782 EC0B                       	smpsPSGAlterVol     $0B
00098784 8007                       	dc.b	nRst, $07
00098786 E101                       	smpsAlterNote       $01
00098788 0101                       	dc.b	$01, $01
0009878A E1FC                       	smpsAlterNote       $FC
0009878C 01                         	dc.b	$01
0009878D E1F9                       	smpsAlterNote       $F9
0009878F 01                         	dc.b	$01
00098790 E1FC                       	smpsAlterNote       $FC
00098792 ECF5                       	smpsPSGAlterVol     $F5
00098794 9006                       	dc.b	nEb1, $06
00098796 EC0B                       	smpsPSGAlterVol     $0B
00098798 8004                       	dc.b	nRst, $04
0009879A ECF5                       	smpsPSGAlterVol     $F5
0009879C 9006                       	dc.b	nEb1, $06
0009879E EC04                       	smpsPSGAlterVol     $04
000987A0 E701                       	dc.b	smpsNoAttack, $01
000987A2 EC07                       	smpsPSGAlterVol     $07
000987A4 8006                       	dc.b	nRst, $06
000987A6 E100                       	smpsAlterNote       $00
000987A8 01                         	dc.b	$01
000987A9 E102                       	smpsAlterNote       $02
000987AB 01                         	dc.b	$01
000987AC E100                       	smpsAlterNote       $00
000987AE 01                         	dc.b	$01
000987AF E1FD                       	smpsAlterNote       $FD
000987B1 01                         	dc.b	$01
000987B2 E1FF                       	smpsAlterNote       $FF
000987B4 ECF5                       	smpsPSGAlterVol     $F5
000987B6 9B06                       	dc.b	nD2, $06
000987B8 EC04                       	smpsPSGAlterVol     $04
000987BA E701                       	dc.b	smpsNoAttack, $01
000987BC EC07                       	smpsPSGAlterVol     $07
000987BE 8003                       	dc.b	nRst, $03
000987C0 ECF5                       	smpsPSGAlterVol     $F5
000987C2 9B07                       	dc.b	nD2, $07
000987C4 EC0B                       	smpsPSGAlterVol     $0B
000987C6 8006                       	dc.b	nRst, $06
000987C8 E102                       	smpsAlterNote       $02
000987CA 01                         	dc.b	$01
000987CB E106                       	smpsAlterNote       $06
000987CD 01                         	dc.b	$01
000987CE E105                       	smpsAlterNote       $05
000987D0 01                         	dc.b	$01
000987D1 E1FF                       	smpsAlterNote       $FF
000987D3 01                         	dc.b	$01
000987D4 ECF5                       	smpsPSGAlterVol     $F5
000987D6 9B07                       	dc.b	nD2, $07
000987D8 EC0B                       	smpsPSGAlterVol     $0B
000987DA 8004                       	dc.b	nRst, $04
000987DC ECF5                       	smpsPSGAlterVol     $F5
000987DE 9B06                       	dc.b	nD2, $06
000987E0 EC0B                       	smpsPSGAlterVol     $0B
000987E2 8007                       	dc.b	nRst, $07
000987E4 E105                       	smpsAlterNote       $05
000987E6 0101                       	dc.b	$01, $01
000987E8 E102                       	smpsAlterNote       $02
000987EA 01                         	dc.b	$01
000987EB E1FC                       	smpsAlterNote       $FC
000987ED 01                         	dc.b	$01
000987EE E1FF                       	smpsAlterNote       $FF
000987F0 ECF5                       	smpsPSGAlterVol     $F5
000987F2 9B06                       	dc.b	nD2, $06
000987F4 EC04                       	smpsPSGAlterVol     $04
000987F6 E701                       	dc.b	smpsNoAttack, $01
000987F8 EC07                       	smpsPSGAlterVol     $07
000987FA 8003                       	dc.b	nRst, $03
000987FC ECF5                       	smpsPSGAlterVol     $F5
000987FE 9B06                       	dc.b	nD2, $06
00098800 EC04                       	smpsPSGAlterVol     $04
00098802 E701                       	dc.b	smpsNoAttack, $01
00098804 EC07                       	smpsPSGAlterVol     $07
00098806 8006                       	dc.b	nRst, $06
00098808 E102                       	smpsAlterNote       $02
0009880A 01                         	dc.b	$01
0009880B E106                       	smpsAlterNote       $06
0009880D 01                         	dc.b	$01
0009880E E102                       	smpsAlterNote       $02
00098810 01                         	dc.b	$01
00098811 E1FF                       	smpsAlterNote       $FF
00098813 01                         	dc.b	$01
00098814 ECF5                       	smpsPSGAlterVol     $F5
00098816 9B06                       	dc.b	nD2, $06
00098818 EC04                       	smpsPSGAlterVol     $04
0009881A E701                       	dc.b	smpsNoAttack, $01
0009881C EC07                       	smpsPSGAlterVol     $07
0009881E 8003                       	dc.b	nRst, $03
00098820 ECF5                       	smpsPSGAlterVol     $F5
00098822 9B07                       	dc.b	nD2, $07
00098824 EC0B                       	smpsPSGAlterVol     $0B
00098826 8007                       	dc.b	nRst, $07
00098828 E105                       	smpsAlterNote       $05
0009882A 0101                       	dc.b	$01, $01
0009882C E1FF                       	smpsAlterNote       $FF
0009882E 01                         	dc.b	$01
0009882F E1FC                       	smpsAlterNote       $FC
00098831 01                         	dc.b	$01
00098832 E1FF                       	smpsAlterNote       $FF
00098834 ECF5                       	smpsPSGAlterVol     $F5
00098836 9B06                       	dc.b	nD2, $06
00098838 EC0B                       	smpsPSGAlterVol     $0B
0009883A 8004                       	dc.b	nRst, $04
0009883C ECF5                       	smpsPSGAlterVol     $F5
0009883E 9B06                       	dc.b	nD2, $06
00098840 EC04                       	smpsPSGAlterVol     $04
00098842 E701                       	dc.b	smpsNoAttack, $01
00098844 EC07                       	smpsPSGAlterVol     $07
00098846 8006                       	dc.b	nRst, $06
00098848 E105                       	smpsAlterNote       $05
0009884A 01                         	dc.b	$01
0009884B E106                       	smpsAlterNote       $06
0009884D 01                         	dc.b	$01
0009884E E102                       	smpsAlterNote       $02
00098850 01                         	dc.b	$01
00098851 E1FC                       	smpsAlterNote       $FC
00098853 01                         	dc.b	$01
00098854 E1FF                       	smpsAlterNote       $FF
00098856 ECF5                       	smpsPSGAlterVol     $F5
00098858 9B06                       	dc.b	nD2, $06
0009885A EC04                       	smpsPSGAlterVol     $04
0009885C E701                       	dc.b	smpsNoAttack, $01
0009885E EC07                       	smpsPSGAlterVol     $07
00098860 8003                       	dc.b	nRst, $03
00098862 ECF5                       	smpsPSGAlterVol     $F5
00098864 9B06                       	dc.b	nD2, $06
00098866 EC04                       	smpsPSGAlterVol     $04
00098868 E701                       	dc.b	smpsNoAttack, $01
0009886A EC07                       	smpsPSGAlterVol     $07
0009886C 8006                       	dc.b	nRst, $06
0009886E E102                       	smpsAlterNote       $02
00098870 01                         	dc.b	$01
00098871 E106                       	smpsAlterNote       $06
00098873 01                         	dc.b	$01
00098874 E105                       	smpsAlterNote       $05
00098876 01                         	dc.b	$01
00098877 E1FF                       	smpsAlterNote       $FF
00098879 01                         	dc.b	$01
0009887A ECF5                       	smpsPSGAlterVol     $F5
0009887C 9B07                       	dc.b	nD2, $07
0009887E EC0B                       	smpsPSGAlterVol     $0B
00098880 8004                       	dc.b	nRst, $04
00098882 ECF5                       	smpsPSGAlterVol     $F5
00098884 9B06                       	dc.b	nD2, $06
00098886 EC0B                       	smpsPSGAlterVol     $0B
00098888 8007                       	dc.b	nRst, $07
0009888A E105                       	smpsAlterNote       $05
0009888C 0101                       	dc.b	$01, $01
0009888E E102                       	smpsAlterNote       $02
00098890 01                         	dc.b	$01
00098891 E1FC                       	smpsAlterNote       $FC
00098893 01                         	dc.b	$01
00098894 E1FF                       	smpsAlterNote       $FF
00098896 ECF5                       	smpsPSGAlterVol     $F5
00098898 9B06                       	dc.b	nD2, $06
0009889A EC04                       	smpsPSGAlterVol     $04
0009889C E701                       	dc.b	smpsNoAttack, $01
0009889E EC07                       	smpsPSGAlterVol     $07
000988A0 8003                       	dc.b	nRst, $03
000988A2 ECF5                       	smpsPSGAlterVol     $F5
000988A4 9B06                       	dc.b	nD2, $06
000988A6 EC04                       	smpsPSGAlterVol     $04
000988A8 E701                       	dc.b	smpsNoAttack, $01
000988AA EC07                       	smpsPSGAlterVol     $07
000988AC 8006                       	dc.b	nRst, $06
000988AE E102                       	smpsAlterNote       $02
000988B0 01                         	dc.b	$01
000988B1 E106                       	smpsAlterNote       $06
000988B3 01                         	dc.b	$01
000988B4 E102                       	smpsAlterNote       $02
000988B6 01                         	dc.b	$01
000988B7 E1FF                       	smpsAlterNote       $FF
000988B9 01                         	dc.b	$01
000988BA ECF5                       	smpsPSGAlterVol     $F5
000988BC 9B06                       	dc.b	nD2, $06
000988BE EC04                       	smpsPSGAlterVol     $04
000988C0 E701                       	dc.b	smpsNoAttack, $01
000988C2 EC07                       	smpsPSGAlterVol     $07
000988C4 8003                       	dc.b	nRst, $03
000988C6 ECF5                       	smpsPSGAlterVol     $F5
000988C8 9B07                       	dc.b	nD2, $07
000988CA E1FE                       	smpsAlterNote       $FE
000988CC 9706                       	dc.b	nBb1, $06
000988CE EC04                       	smpsPSGAlterVol     $04
000988D0 E701                       	dc.b	smpsNoAttack, $01
000988D2 ECFC                       	smpsPSGAlterVol     $FC
000988D4 9703                       	dc.b	nBb1, $03
000988D6 EC04                       	smpsPSGAlterVol     $04
000988D8 E701                       	dc.b	smpsNoAttack, $01
000988DA ECFC                       	smpsPSGAlterVol     $FC
000988DC 9702                       	dc.b	nBb1, $02
000988DE EC04                       	smpsPSGAlterVol     $04
000988E0 E701                       	dc.b	smpsNoAttack, $01
000988E2 ECFC                       	smpsPSGAlterVol     $FC
000988E4 9606                       	dc.b	nA1, $06
000988E6 EC04                       	smpsPSGAlterVol     $04
000988E8 E701                       	dc.b	smpsNoAttack, $01
000988EA EC07                       	smpsPSGAlterVol     $07
000988EC 8006                       	dc.b	nRst, $06
000988EE E101                       	smpsAlterNote       $01
000988F0 01                         	dc.b	$01
000988F1 E107                       	smpsAlterNote       $07
000988F3 01                         	dc.b	$01
000988F4 E101                       	smpsAlterNote       $01
000988F6 01                         	dc.b	$01
000988F7 E1F8                       	smpsAlterNote       $F8
000988F9 01                         	dc.b	$01
000988FA E1F7                       	smpsAlterNote       $F7
000988FC 01                         	dc.b	$01
000988FD E1FC                       	smpsAlterNote       $FC
000988FF 01                         	dc.b	$01
00098900 E106                       	smpsAlterNote       $06
00098902 01                         	dc.b	$01
00098903 E107                       	smpsAlterNote       $07
00098905 01                         	dc.b	$01
00098906 E101                       	smpsAlterNote       $01
00098908 01                         	dc.b	$01
00098909 E1F8                       	smpsAlterNote       $F8
0009890B 0101                       	dc.b	$01, $01
0009890D E1FC                       	smpsAlterNote       $FC
0009890F ECF5                       	smpsPSGAlterVol     $F5
00098911 8F06                       	dc.b	nD1, $06
00098913 EC04                       	smpsPSGAlterVol     $04
00098915 E701                       	dc.b	smpsNoAttack, $01
00098917 EC07                       	smpsPSGAlterVol     $07
00098919 8003                       	dc.b	nRst, $03
0009891B ECF5                       	smpsPSGAlterVol     $F5
0009891D 8F06                       	dc.b	nD1, $06
0009891F EC04                       	smpsPSGAlterVol     $04
00098921 E701                       	dc.b	smpsNoAttack, $01
00098923 EC07                       	smpsPSGAlterVol     $07
00098925 8006                       	dc.b	nRst, $06
00098927 E1FF                       	smpsAlterNote       $FF
00098929 01                         	dc.b	$01
0009892A E102                       	smpsAlterNote       $02
0009892C 01                         	dc.b	$01
0009892D E101                       	smpsAlterNote       $01
0009892F 01                         	dc.b	$01
00098930 E1FC                       	smpsAlterNote       $FC
00098932 01                         	dc.b	$01
00098933 ECF5                       	smpsPSGAlterVol     $F5
00098935 9007                       	dc.b	nEb1, $07
00098937 EC0B                       	smpsPSGAlterVol     $0B
00098939 8004                       	dc.b	nRst, $04
0009893B ECF5                       	smpsPSGAlterVol     $F5
0009893D 9006                       	dc.b	nEb1, $06
0009893F EC0B                       	smpsPSGAlterVol     $0B
00098941 8007                       	dc.b	nRst, $07
00098943 E103                       	smpsAlterNote       $03
00098945 0101                       	dc.b	$01, $01
00098947 E1FC                       	smpsAlterNote       $FC
00098949 01                         	dc.b	$01
0009894A E1F9                       	smpsAlterNote       $F9
0009894C 01                         	dc.b	$01
0009894D E1FC                       	smpsAlterNote       $FC
0009894F ECF5                       	smpsPSGAlterVol     $F5
00098951 8F06                       	dc.b	nD1, $06
00098953 EC04                       	smpsPSGAlterVol     $04
00098955 E701                       	dc.b	smpsNoAttack, $01
00098957 EC07                       	smpsPSGAlterVol     $07
00098959 8003                       	dc.b	nRst, $03
0009895B ECF5                       	smpsPSGAlterVol     $F5
0009895D 8F06                       	dc.b	nD1, $06
0009895F EC04                       	smpsPSGAlterVol     $04
00098961 E701                       	dc.b	smpsNoAttack, $01
00098963 EC07                       	smpsPSGAlterVol     $07
00098965 8006                       	dc.b	nRst, $06
00098967 E1FF                       	smpsAlterNote       $FF
00098969 01                         	dc.b	$01
0009896A E103                       	smpsAlterNote       $03
0009896C 01                         	dc.b	$01
0009896D E1FF                       	smpsAlterNote       $FF
0009896F 01                         	dc.b	$01
00098970 E1F9                       	smpsAlterNote       $F9
00098972 01                         	dc.b	$01
00098973 E1FC                       	smpsAlterNote       $FC
00098975 ECF5                       	smpsPSGAlterVol     $F5
00098977 8F06                       	dc.b	nD1, $06
00098979 EC04                       	smpsPSGAlterVol     $04
0009897B E701                       	dc.b	smpsNoAttack, $01
0009897D EC07                       	smpsPSGAlterVol     $07
0009897F 8003                       	dc.b	nRst, $03
00098981 ECF5                       	smpsPSGAlterVol     $F5
00098983 8F07                       	dc.b	nD1, $07
00098985 EC0B                       	smpsPSGAlterVol     $0B
00098987 8006                       	dc.b	nRst, $06
00098989 E1FF                       	smpsAlterNote       $FF
0009898B 01                         	dc.b	$01
0009898C E102                       	smpsAlterNote       $02
0009898E 0101                       	dc.b	$01, $01
00098990 E1FC                       	smpsAlterNote       $FC
00098992 01                         	dc.b	$01
00098993 ECF5                       	smpsPSGAlterVol     $F5
00098995 8F07                       	dc.b	nD1, $07
00098997 EC0B                       	smpsPSGAlterVol     $0B
00098999 8004                       	dc.b	nRst, $04
0009899B ECF5                       	smpsPSGAlterVol     $F5
0009899D 8F06                       	dc.b	nD1, $06
0009899F EC04                       	smpsPSGAlterVol     $04
000989A1 E701                       	dc.b	smpsNoAttack, $01
000989A3 EC07                       	smpsPSGAlterVol     $07
000989A5 8006                       	dc.b	nRst, $06
000989A7 E101                       	smpsAlterNote       $01
000989A9 01                         	dc.b	$01
000989AA E102                       	smpsAlterNote       $02
000989AC 01                         	dc.b	$01
000989AD E1FF                       	smpsAlterNote       $FF
000989AF 01                         	dc.b	$01
000989B0 E1F9                       	smpsAlterNote       $F9
000989B2 01                         	dc.b	$01
000989B3 E1FC                       	smpsAlterNote       $FC
000989B5 ECF5                       	smpsPSGAlterVol     $F5
000989B7 9006                       	dc.b	nEb1, $06
000989B9 EC04                       	smpsPSGAlterVol     $04
000989BB E701                       	dc.b	smpsNoAttack, $01
000989BD EC07                       	smpsPSGAlterVol     $07
000989BF 8003                       	dc.b	nRst, $03
000989C1 ECF5                       	smpsPSGAlterVol     $F5
000989C3 9006                       	dc.b	nEb1, $06
000989C5 EC04                       	smpsPSGAlterVol     $04
000989C7 E701                       	dc.b	smpsNoAttack, $01
000989C9 EC07                       	smpsPSGAlterVol     $07
000989CB 8006                       	dc.b	nRst, $06
000989CD E100                       	smpsAlterNote       $00
000989CF 01                         	dc.b	$01
000989D0 E102                       	smpsAlterNote       $02
000989D2 01                         	dc.b	$01
000989D3 E100                       	smpsAlterNote       $00
000989D5 01                         	dc.b	$01
000989D6 E1FF                       	smpsAlterNote       $FF
000989D8 01                         	dc.b	$01
000989D9 ECF5                       	smpsPSGAlterVol     $F5
000989DB 9B06                       	dc.b	nD2, $06
000989DD EC04                       	smpsPSGAlterVol     $04
000989DF E701                       	dc.b	smpsNoAttack, $01
000989E1 EC07                       	smpsPSGAlterVol     $07
000989E3 8003                       	dc.b	nRst, $03
000989E5 ECF5                       	smpsPSGAlterVol     $F5
000989E7 9B07                       	dc.b	nD2, $07
000989E9 EC0B                       	smpsPSGAlterVol     $0B
000989EB 8007                       	dc.b	nRst, $07
000989ED E105                       	smpsAlterNote       $05
000989EF 0101                       	dc.b	$01, $01
000989F1 E1FF                       	smpsAlterNote       $FF
000989F3 01                         	dc.b	$01
000989F4 E1FC                       	smpsAlterNote       $FC
000989F6 01                         	dc.b	$01
000989F7 E1FF                       	smpsAlterNote       $FF
000989F9 ECF5                       	smpsPSGAlterVol     $F5
000989FB 9B06                       	dc.b	nD2, $06
000989FD EC0B                       	smpsPSGAlterVol     $0B
000989FF 8004                       	dc.b	nRst, $04
00098A01 ECF5                       	smpsPSGAlterVol     $F5
00098A03 9B06                       	dc.b	nD2, $06
00098A05 EC04                       	smpsPSGAlterVol     $04
00098A07 E701                       	dc.b	smpsNoAttack, $01
00098A09 EC07                       	smpsPSGAlterVol     $07
00098A0B 8006                       	dc.b	nRst, $06
00098A0D E102                       	smpsAlterNote       $02
00098A0F 01                         	dc.b	$01
00098A10 E106                       	smpsAlterNote       $06
00098A12 01                         	dc.b	$01
00098A13 E102                       	smpsAlterNote       $02
00098A15 01                         	dc.b	$01
00098A16 E1FC                       	smpsAlterNote       $FC
00098A18 01                         	dc.b	$01
00098A19 E1FF                       	smpsAlterNote       $FF
00098A1B ECF5                       	smpsPSGAlterVol     $F5
00098A1D 9B06                       	dc.b	nD2, $06
00098A1F EC04                       	smpsPSGAlterVol     $04
00098A21 E701                       	dc.b	smpsNoAttack, $01
00098A23 EC07                       	smpsPSGAlterVol     $07
00098A25 8003                       	dc.b	nRst, $03
00098A27 ECF5                       	smpsPSGAlterVol     $F5
00098A29 9B07                       	dc.b	nD2, $07
00098A2B EC0B                       	smpsPSGAlterVol     $0B
00098A2D 8006                       	dc.b	nRst, $06
00098A2F E102                       	smpsAlterNote       $02
00098A31 01                         	dc.b	$01
00098A32 E105                       	smpsAlterNote       $05
00098A34 0101                       	dc.b	$01, $01
00098A36 E1FF                       	smpsAlterNote       $FF
00098A38 01                         	dc.b	$01
00098A39 ECF5                       	smpsPSGAlterVol     $F5
00098A3B 9B07                       	dc.b	nD2, $07
00098A3D EC0B                       	smpsPSGAlterVol     $0B
00098A3F 8004                       	dc.b	nRst, $04
00098A41 ECF5                       	smpsPSGAlterVol     $F5
00098A43 9B06                       	dc.b	nD2, $06
00098A45 EC0B                       	smpsPSGAlterVol     $0B
00098A47 8007                       	dc.b	nRst, $07
00098A49 E105                       	smpsAlterNote       $05
00098A4B 0101                       	dc.b	$01, $01
00098A4D E102                       	smpsAlterNote       $02
00098A4F 01                         	dc.b	$01
00098A50 E1FC                       	smpsAlterNote       $FC
00098A52 01                         	dc.b	$01
00098A53 E1FF                       	smpsAlterNote       $FF
00098A55 ECF5                       	smpsPSGAlterVol     $F5
00098A57 9B06                       	dc.b	nD2, $06
00098A59 EC04                       	smpsPSGAlterVol     $04
00098A5B E701                       	dc.b	smpsNoAttack, $01
00098A5D EC07                       	smpsPSGAlterVol     $07
00098A5F 8003                       	dc.b	nRst, $03
00098A61 ECF5                       	smpsPSGAlterVol     $F5
00098A63 9B06                       	dc.b	nD2, $06
00098A65 EC04                       	smpsPSGAlterVol     $04
00098A67 E701                       	dc.b	smpsNoAttack, $01
00098A69 EC07                       	smpsPSGAlterVol     $07
00098A6B 8006                       	dc.b	nRst, $06
00098A6D E102                       	smpsAlterNote       $02
00098A6F 01                         	dc.b	$01
00098A70 E106                       	smpsAlterNote       $06
00098A72 01                         	dc.b	$01
00098A73 E102                       	smpsAlterNote       $02
00098A75 01                         	dc.b	$01
00098A76 E1FF                       	smpsAlterNote       $FF
00098A78 01                         	dc.b	$01
00098A79 ECF5                       	smpsPSGAlterVol     $F5
00098A7B 9B06                       	dc.b	nD2, $06
00098A7D EC04                       	smpsPSGAlterVol     $04
00098A7F E701                       	dc.b	smpsNoAttack, $01
00098A81 EC07                       	smpsPSGAlterVol     $07
00098A83 8003                       	dc.b	nRst, $03
00098A85 ECF5                       	smpsPSGAlterVol     $F5
00098A87 9B07                       	dc.b	nD2, $07
00098A89 EC0B                       	smpsPSGAlterVol     $0B
00098A8B 8007                       	dc.b	nRst, $07
00098A8D E105                       	smpsAlterNote       $05
00098A8F 0101                       	dc.b	$01, $01
00098A91 E1FF                       	smpsAlterNote       $FF
00098A93 01                         	dc.b	$01
00098A94 E1FC                       	smpsAlterNote       $FC
00098A96 01                         	dc.b	$01
00098A97 E1FF                       	smpsAlterNote       $FF
00098A99 ECF5                       	smpsPSGAlterVol     $F5
00098A9B 9B06                       	dc.b	nD2, $06
00098A9D EC0B                       	smpsPSGAlterVol     $0B
00098A9F 8004                       	dc.b	nRst, $04
00098AA1 ECF5                       	smpsPSGAlterVol     $F5
00098AA3 9B06                       	dc.b	nD2, $06
00098AA5 EC04                       	smpsPSGAlterVol     $04
00098AA7 E701                       	dc.b	smpsNoAttack, $01
00098AA9 EC07                       	smpsPSGAlterVol     $07
00098AAB 8006                       	dc.b	nRst, $06
00098AAD E102                       	smpsAlterNote       $02
00098AAF 01                         	dc.b	$01
00098AB0 E106                       	smpsAlterNote       $06
00098AB2 01                         	dc.b	$01
00098AB3 E102                       	smpsAlterNote       $02
00098AB5 01                         	dc.b	$01
00098AB6 E1FC                       	smpsAlterNote       $FC
00098AB8 01                         	dc.b	$01
00098AB9 E1FF                       	smpsAlterNote       $FF
00098ABB ECF5                       	smpsPSGAlterVol     $F5
00098ABD 9B06                       	dc.b	nD2, $06
00098ABF EC04                       	smpsPSGAlterVol     $04
00098AC1 E701                       	dc.b	smpsNoAttack, $01
00098AC3 EC07                       	smpsPSGAlterVol     $07
00098AC5 8003                       	dc.b	nRst, $03
00098AC7 ECF5                       	smpsPSGAlterVol     $F5
00098AC9 9B06                       	dc.b	nD2, $06
00098ACB EC04                       	smpsPSGAlterVol     $04
00098ACD E701                       	dc.b	smpsNoAttack, $01
00098ACF EC07                       	smpsPSGAlterVol     $07
00098AD1 8006                       	dc.b	nRst, $06
00098AD3 E102                       	smpsAlterNote       $02
00098AD5 01                         	dc.b	$01
00098AD6 E106                       	smpsAlterNote       $06
00098AD8 01                         	dc.b	$01
00098AD9 E105                       	smpsAlterNote       $05
00098ADB 01                         	dc.b	$01
00098ADC E1FF                       	smpsAlterNote       $FF
00098ADE 01                         	dc.b	$01
00098ADF ECF5                       	smpsPSGAlterVol     $F5
00098AE1 9B07                       	dc.b	nD2, $07
00098AE3 EC0B                       	smpsPSGAlterVol     $0B
00098AE5 8004                       	dc.b	nRst, $04
00098AE7 ECF5                       	smpsPSGAlterVol     $F5
00098AE9 9B06                       	dc.b	nD2, $06
00098AEB EC0B                       	smpsPSGAlterVol     $0B
00098AED 8007                       	dc.b	nRst, $07
00098AEF E105                       	smpsAlterNote       $05
00098AF1 0101                       	dc.b	$01, $01
00098AF3 E101                       	smpsAlterNote       $01
00098AF5 01                         	dc.b	$01
00098AF6 E1FB                       	smpsAlterNote       $FB
00098AF8 01                         	dc.b	$01
00098AF9 E1FE                       	smpsAlterNote       $FE
00098AFB ECF5                       	smpsPSGAlterVol     $F5
00098AFD 9A06                       	dc.b	nCs2, $06
00098AFF EC04                       	smpsPSGAlterVol     $04
00098B01 E701                       	dc.b	smpsNoAttack, $01
00098B03 EC07                       	smpsPSGAlterVol     $07
00098B05 8003                       	dc.b	nRst, $03
00098B07 ECF5                       	smpsPSGAlterVol     $F5
00098B09 9A06                       	dc.b	nCs2, $06
00098B0B EC04                       	smpsPSGAlterVol     $04
00098B0D E701                       	dc.b	smpsNoAttack, $01
00098B0F EC07                       	smpsPSGAlterVol     $07
00098B11 8003                       	dc.b	nRst, $03
00098B13 E1FC                       	smpsAlterNote       $FC
00098B15 ECF5                       	smpsPSGAlterVol     $F5
00098B17 8F07                       	dc.b	nD1, $07
00098B19 EC0B                       	smpsPSGAlterVol     $0B
00098B1B 8006                       	dc.b	nRst, $06
00098B1D E1FF                       	smpsAlterNote       $FF
00098B1F 01                         	dc.b	$01
00098B20 E103                       	smpsAlterNote       $03
00098B22 01                         	dc.b	$01
00098B23 E102                       	smpsAlterNote       $02
00098B25 01                         	dc.b	$01
00098B26 E1FC                       	smpsAlterNote       $FC
00098B28 01                         	dc.b	$01
00098B29 E1F8                       	smpsAlterNote       $F8
00098B2B 01                         	dc.b	$01
00098B2C E1FC                       	smpsAlterNote       $FC
00098B2E 01                         	dc.b	$01
00098B2F E1FF                       	smpsAlterNote       $FF
00098B31 01                         	dc.b	$01
00098B32 E103                       	smpsAlterNote       $03
00098B34 01                         	dc.b	$01
00098B35 E1FC                       	smpsAlterNote       $FC
00098B37 ECF5                       	smpsPSGAlterVol     $F5
00098B39 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
00098B3D EC04                       	smpsPSGAlterVol     $04
00098B3F E701                       	dc.b	smpsNoAttack, $01
00098B41 EC07                       	smpsPSGAlterVol     $07
00098B43 8009                       	dc.b	nRst, $09
00098B45 E1FF                       	smpsAlterNote       $FF
00098B47 01                         	dc.b	$01
00098B48 E103                       	smpsAlterNote       $03
00098B4A 01                         	dc.b	$01
00098B4B E102                       	smpsAlterNote       $02
00098B4D 01                         	dc.b	$01
00098B4E E1FC                       	smpsAlterNote       $FC
00098B50 01                         	dc.b	$01
00098B51 E1F8                       	smpsAlterNote       $F8
00098B53 01                         	dc.b	$01
00098B54 E1FC                       	smpsAlterNote       $FC
00098B56 01                         	dc.b	$01
00098B57 E1FF                       	smpsAlterNote       $FF
00098B59 01                         	dc.b	$01
00098B5A E103                       	smpsAlterNote       $03
00098B5C 01                         	dc.b	$01
00098B5D E1FF                       	smpsAlterNote       $FF
00098B5F 01                         	dc.b	$01
00098B60 E1F9                       	smpsAlterNote       $F9
00098B62 01                         	dc.b	$01
00098B63 E1F8                       	smpsAlterNote       $F8
00098B65 01                         	dc.b	$01
00098B66 E1FC                       	smpsAlterNote       $FC
00098B68 01                         	dc.b	$01
00098B69 E102                       	smpsAlterNote       $02
00098B6B 0101                       	dc.b	$01, $01
00098B6D E1FF                       	smpsAlterNote       $FF
00098B6F 01                         	dc.b	$01
00098B70 E1FC                       	smpsAlterNote       $FC
00098B72 ECF5                       	smpsPSGAlterVol     $F5
00098B74 8F02                       	dc.b	nD1, $02
00098B76 EC04                       	smpsPSGAlterVol     $04
00098B78 E701                       	dc.b	smpsNoAttack, $01
00098B7A ECFC                       	smpsPSGAlterVol     $FC
00098B7C E1FB                       	smpsAlterNote       $FB
00098B7E 8D06                       	dc.b	nC1, $06
00098B80 EC04                       	smpsPSGAlterVol     $04
00098B82 E701                       	dc.b	smpsNoAttack, $01
00098B84 EC07                       	smpsPSGAlterVol     $07
00098B86 8006                       	dc.b	nRst, $06
00098B88 E1FE                       	smpsAlterNote       $FE
00098B8A 01                         	dc.b	$01
00098B8B E102                       	smpsAlterNote       $02
00098B8D 01                         	dc.b	$01
00098B8E E1FE                       	smpsAlterNote       $FE
00098B90 01                         	dc.b	$01
00098B91 E1FB                       	smpsAlterNote       $FB
00098B93 01                         	dc.b	$01
00098B94 E1F7                       	smpsAlterNote       $F7
00098B96 01                         	dc.b	$01
00098B97 E1FB                       	smpsAlterNote       $FB
00098B99 01                         	dc.b	$01
00098B9A E101                       	smpsAlterNote       $01
00098B9C 01                         	dc.b	$01
00098B9D E102                       	smpsAlterNote       $02
00098B9F 01                         	dc.b	$01
00098BA0 E1FB                       	smpsAlterNote       $FB
00098BA2 ECF5                       	smpsPSGAlterVol     $F5
00098BA4 8D02                       	dc.b	nC1, $02
00098BA6 EC04                       	smpsPSGAlterVol     $04
00098BA8 E701                       	dc.b	smpsNoAttack, $01
00098BAA E1FC                       	smpsAlterNote       $FC
00098BAC ECFC                       	smpsPSGAlterVol     $FC
00098BAE 8F0D                       	dc.b	nD1, $0D
00098BB0 E1FF                       	smpsAlterNote       $FF
00098BB2 E701                       	dc.b	smpsNoAttack, $01
00098BB4 E103                       	smpsAlterNote       $03
00098BB6 E701                       	dc.b	smpsNoAttack, $01
00098BB8 E1FF                       	smpsAlterNote       $FF
00098BBA E701                       	dc.b	smpsNoAttack, $01
00098BBC E1FC                       	smpsAlterNote       $FC
00098BBE E701                       	dc.b	smpsNoAttack, $01
00098BC0 E1F8                       	smpsAlterNote       $F8
00098BC2 E701                       	dc.b	smpsNoAttack, $01
00098BC4 E1FC                       	smpsAlterNote       $FC
00098BC6 E701                       	dc.b	smpsNoAttack, $01
00098BC8 E102                       	smpsAlterNote       $02
00098BCA E701                       	dc.b	smpsNoAttack, $01
00098BCC E103                       	smpsAlterNote       $03
00098BCE E701                       	dc.b	smpsNoAttack, $01
00098BD0 E1FF                       	smpsAlterNote       $FF
00098BD2 E701                       	dc.b	smpsNoAttack, $01
00098BD4 E1F9                       	smpsAlterNote       $F9
00098BD6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098BDA E1FC                       	smpsAlterNote       $FC
00098BDC E701                       	dc.b	smpsNoAttack, $01
00098BDE E102                       	smpsAlterNote       $02
00098BE0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098BE4 E1FC                       	smpsAlterNote       $FC
00098BE6 E701                       	dc.b	smpsNoAttack, $01
00098BE8 E1F9                       	smpsAlterNote       $F9
00098BEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098BEE E1FF                       	smpsAlterNote       $FF
00098BF0 EC04                       	smpsPSGAlterVol     $04
00098BF2 E701                       	dc.b	smpsNoAttack, $01
00098BF4 EC07                       	smpsPSGAlterVol     $07
00098BF6 E103                       	smpsAlterNote       $03
00098BF8 8001                       	dc.b	nRst, $01
00098BFA E102                       	smpsAlterNote       $02
00098BFC 01                         	dc.b	$01
00098BFD E1FB                       	smpsAlterNote       $FB
00098BFF 01                         	dc.b	$01
00098C00 E1F7                       	smpsAlterNote       $F7
00098C02 01                         	dc.b	$01
00098C03 E1FB                       	smpsAlterNote       $FB
00098C05 01                         	dc.b	$01
00098C06 E102                       	smpsAlterNote       $02
00098C08 01                         	dc.b	$01
00098C09 E103                       	smpsAlterNote       $03
00098C0B 01                         	dc.b	$01
00098C0C E1FB                       	smpsAlterNote       $FB
00098C0E ECF5                       	smpsPSGAlterVol     $F5
00098C10 8E06                       	dc.b	nCs1, $06
00098C12 EC04                       	smpsPSGAlterVol     $04
00098C14 E701                       	dc.b	smpsNoAttack, $01
00098C16 EC07                       	smpsPSGAlterVol     $07
00098C18 8003                       	dc.b	nRst, $03
00098C1A ECF5                       	smpsPSGAlterVol     $F5
00098C1C 8E06                       	dc.b	nCs1, $06
00098C1E EC04                       	smpsPSGAlterVol     $04
00098C20 E701                       	dc.b	smpsNoAttack, $01
00098C22 EC07                       	smpsPSGAlterVol     $07
00098C24 8006                       	dc.b	nRst, $06
00098C26 E1FE                       	smpsAlterNote       $FE
00098C28 01                         	dc.b	$01
00098C29 E102                       	smpsAlterNote       $02
00098C2B 01                         	dc.b	$01
00098C2C E1FE                       	smpsAlterNote       $FE
00098C2E 01                         	dc.b	$01
00098C2F E1F9                       	smpsAlterNote       $F9
00098C31 01                         	dc.b	$01
00098C32 E1FC                       	smpsAlterNote       $FC
00098C34 ECF5                       	smpsPSGAlterVol     $F5
00098C36 8F06                       	dc.b	nD1, $06
00098C38 EC04                       	smpsPSGAlterVol     $04
00098C3A E701                       	dc.b	smpsNoAttack, $01
00098C3C EC07                       	smpsPSGAlterVol     $07
00098C3E 8003                       	dc.b	nRst, $03
00098C40 ECF5                       	smpsPSGAlterVol     $F5
00098C42 8F07                       	dc.b	nD1, $07
00098C44 EC0B                       	smpsPSGAlterVol     $0B
00098C46 8006                       	dc.b	nRst, $06
00098C48 E1FF                       	smpsAlterNote       $FF
00098C4A 01                         	dc.b	$01
00098C4B E102                       	smpsAlterNote       $02
00098C4D 0101                       	dc.b	$01, $01
00098C4F E1FB                       	smpsAlterNote       $FB
00098C51 01                         	dc.b	$01
00098C52 ECF5                       	smpsPSGAlterVol     $F5
00098C54 8E07                       	dc.b	nCs1, $07
00098C56 EC0B                       	smpsPSGAlterVol     $0B
00098C58 8004                       	dc.b	nRst, $04
00098C5A ECF5                       	smpsPSGAlterVol     $F5
00098C5C 8E06                       	dc.b	nCs1, $06
00098C5E EC04                       	smpsPSGAlterVol     $04
00098C60 E701                       	dc.b	smpsNoAttack, $01
00098C62 EC07                       	smpsPSGAlterVol     $07
00098C64 8006                       	dc.b	nRst, $06
00098C66 E101                       	smpsAlterNote       $01
00098C68 01                         	dc.b	$01
00098C69 E102                       	smpsAlterNote       $02
00098C6B 01                         	dc.b	$01
00098C6C E1FE                       	smpsAlterNote       $FE
00098C6E 01                         	dc.b	$01
00098C6F E1F8                       	smpsAlterNote       $F8
00098C71 01                         	dc.b	$01
00098C72 E1FB                       	smpsAlterNote       $FB
00098C74 ECF5                       	smpsPSGAlterVol     $F5
00098C76 8E06                       	dc.b	nCs1, $06
00098C78 EC04                       	smpsPSGAlterVol     $04
00098C7A E701                       	dc.b	smpsNoAttack, $01
00098C7C EC07                       	smpsPSGAlterVol     $07
00098C7E 8003                       	dc.b	nRst, $03
00098C80 ECF5                       	smpsPSGAlterVol     $F5
00098C82 8E06                       	dc.b	nCs1, $06
00098C84 EC04                       	smpsPSGAlterVol     $04
00098C86 E701                       	dc.b	smpsNoAttack, $01
00098C88 EC07                       	smpsPSGAlterVol     $07
00098C8A 8004                       	dc.b	nRst, $04
00098C8C E1FC                       	smpsAlterNote       $FC
00098C8E ECF5                       	smpsPSGAlterVol     $F5
00098C90 8F06                       	dc.b	nD1, $06
00098C92 EC0B                       	smpsPSGAlterVol     $0B
00098C94 8006                       	dc.b	nRst, $06
00098C96 E1FF                       	smpsAlterNote       $FF
00098C98 01                         	dc.b	$01
00098C99 E102                       	smpsAlterNote       $02
00098C9B 0101                       	dc.b	$01, $01
00098C9D E1FC                       	smpsAlterNote       $FC
00098C9F 01                         	dc.b	$01
00098CA0 E1F8                       	smpsAlterNote       $F8
00098CA2 01                         	dc.b	$01
00098CA3 E1F9                       	smpsAlterNote       $F9
00098CA5 01                         	dc.b	$01
00098CA6 E1FF                       	smpsAlterNote       $FF
00098CA8 01                         	dc.b	$01
00098CA9 E103                       	smpsAlterNote       $03
00098CAB 01                         	dc.b	$01
00098CAC E1FC                       	smpsAlterNote       $FC
00098CAE ECF5                       	smpsPSGAlterVol     $F5
00098CB0 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
00098CB4 EC04                       	smpsPSGAlterVol     $04
00098CB6 E701                       	dc.b	smpsNoAttack, $01
00098CB8 EC07                       	smpsPSGAlterVol     $07
00098CBA 8009                       	dc.b	nRst, $09
00098CBC E1FF                       	smpsAlterNote       $FF
00098CBE 01                         	dc.b	$01
00098CBF E102                       	smpsAlterNote       $02
00098CC1 0101                       	dc.b	$01, $01
00098CC3 E1FC                       	smpsAlterNote       $FC
00098CC5 01                         	dc.b	$01
00098CC6 E1F8                       	smpsAlterNote       $F8
00098CC8 01                         	dc.b	$01
00098CC9 E1F9                       	smpsAlterNote       $F9
00098CCB 01                         	dc.b	$01
00098CCC E1FF                       	smpsAlterNote       $FF
00098CCE 01                         	dc.b	$01
00098CCF E103                       	smpsAlterNote       $03
00098CD1 01                         	dc.b	$01
00098CD2 E1FF                       	smpsAlterNote       $FF
00098CD4 01                         	dc.b	$01
00098CD5 E1FC                       	smpsAlterNote       $FC
00098CD7 01                         	dc.b	$01
00098CD8 E1F8                       	smpsAlterNote       $F8
00098CDA 01                         	dc.b	$01
00098CDB E1FC                       	smpsAlterNote       $FC
00098CDD 01                         	dc.b	$01
00098CDE E102                       	smpsAlterNote       $02
00098CE0 01                         	dc.b	$01
00098CE1 E103                       	smpsAlterNote       $03
00098CE3 01                         	dc.b	$01
00098CE4 E1FF                       	smpsAlterNote       $FF
00098CE6 01                         	dc.b	$01
00098CE7 E1FC                       	smpsAlterNote       $FC
00098CE9 ECF5                       	smpsPSGAlterVol     $F5
00098CEB 8F03                       	dc.b	nD1, $03
00098CED E1FB                       	smpsAlterNote       $FB
00098CEF 8D06                       	dc.b	nC1, $06
00098CF1 EC04                       	smpsPSGAlterVol     $04
00098CF3 E701                       	dc.b	smpsNoAttack, $01
00098CF5 EC07                       	smpsPSGAlterVol     $07
00098CF7 8006                       	dc.b	nRst, $06
00098CF9 E1FE                       	smpsAlterNote       $FE
00098CFB 01                         	dc.b	$01
00098CFC E102                       	smpsAlterNote       $02
00098CFE 01                         	dc.b	$01
00098CFF E101                       	smpsAlterNote       $01
00098D01 01                         	dc.b	$01
00098D02 E1FB                       	smpsAlterNote       $FB
00098D04 01                         	dc.b	$01
00098D05 E1F7                       	smpsAlterNote       $F7
00098D07 01                         	dc.b	$01
00098D08 E1FB                       	smpsAlterNote       $FB
00098D0A 01                         	dc.b	$01
00098D0B E1FE                       	smpsAlterNote       $FE
00098D0D 01                         	dc.b	$01
00098D0E E102                       	smpsAlterNote       $02
00098D10 01                         	dc.b	$01
00098D11 E1FB                       	smpsAlterNote       $FB
00098D13 ECF5                       	smpsPSGAlterVol     $F5
00098D15 8D03                       	dc.b	nC1, $03
00098D17 E1FC                       	smpsAlterNote       $FC
00098D19 8F0D                       	dc.b	nD1, $0D
00098D1B E1FF                       	smpsAlterNote       $FF
00098D1D E701                       	dc.b	smpsNoAttack, $01
00098D1F E103                       	smpsAlterNote       $03
00098D21 E701                       	dc.b	smpsNoAttack, $01
00098D23 E1FF                       	smpsAlterNote       $FF
00098D25 E701                       	dc.b	smpsNoAttack, $01
00098D27 E1FC                       	smpsAlterNote       $FC
00098D29 E701                       	dc.b	smpsNoAttack, $01
00098D2B E1F8                       	smpsAlterNote       $F8
00098D2D E701                       	dc.b	smpsNoAttack, $01
00098D2F E1FC                       	smpsAlterNote       $FC
00098D31 E701                       	dc.b	smpsNoAttack, $01
00098D33 E102                       	smpsAlterNote       $02
00098D35 E701                       	dc.b	smpsNoAttack, $01
00098D37 E103                       	smpsAlterNote       $03
00098D39 E701                       	dc.b	smpsNoAttack, $01
00098D3B E1FF                       	smpsAlterNote       $FF
00098D3D E701                       	dc.b	smpsNoAttack, $01
00098D3F E1F9                       	smpsAlterNote       $F9
00098D41 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098D45 E1FC                       	smpsAlterNote       $FC
00098D47 E701                       	dc.b	smpsNoAttack, $01
00098D49 E102                       	smpsAlterNote       $02
00098D4B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098D4F E1FF                       	smpsAlterNote       $FF
00098D51 E701                       	dc.b	smpsNoAttack, $01
00098D53 E1F9                       	smpsAlterNote       $F9
00098D55 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098D59 E1FF                       	smpsAlterNote       $FF
00098D5B EC04                       	smpsPSGAlterVol     $04
00098D5D E701                       	dc.b	smpsNoAttack, $01
00098D5F EC07                       	smpsPSGAlterVol     $07
00098D61 E103                       	smpsAlterNote       $03
00098D63 8001                       	dc.b	nRst, $01
00098D65 E102                       	smpsAlterNote       $02
00098D67 01                         	dc.b	$01
00098D68 E1FB                       	smpsAlterNote       $FB
00098D6A 01                         	dc.b	$01
00098D6B E1F7                       	smpsAlterNote       $F7
00098D6D 01                         	dc.b	$01
00098D6E E1FB                       	smpsAlterNote       $FB
00098D70 01                         	dc.b	$01
00098D71 E1FF                       	smpsAlterNote       $FF
00098D73 01                         	dc.b	$01
00098D74 E103                       	smpsAlterNote       $03
00098D76 01                         	dc.b	$01
00098D77 E1FB                       	smpsAlterNote       $FB
00098D79 ECF5                       	smpsPSGAlterVol     $F5
00098D7B 8E06                       	dc.b	nCs1, $06
00098D7D EC04                       	smpsPSGAlterVol     $04
00098D7F E701                       	dc.b	smpsNoAttack, $01
00098D81 EC07                       	smpsPSGAlterVol     $07
00098D83 8003                       	dc.b	nRst, $03
00098D85 ECF5                       	smpsPSGAlterVol     $F5
00098D87 8E06                       	dc.b	nCs1, $06
00098D89 EC04                       	smpsPSGAlterVol     $04
00098D8B E701                       	dc.b	smpsNoAttack, $01
00098D8D EC07                       	smpsPSGAlterVol     $07
00098D8F 8006                       	dc.b	nRst, $06
00098D91 E1FE                       	smpsAlterNote       $FE
00098D93 01                         	dc.b	$01
00098D94 E102                       	smpsAlterNote       $02
00098D96 01                         	dc.b	$01
00098D97 E1FE                       	smpsAlterNote       $FE
00098D99 01                         	dc.b	$01
00098D9A E1FC                       	smpsAlterNote       $FC
00098D9C 01                         	dc.b	$01
00098D9D ECF5                       	smpsPSGAlterVol     $F5
00098D9F 8F06                       	dc.b	nD1, $06
00098DA1 EC04                       	smpsPSGAlterVol     $04
00098DA3 E701                       	dc.b	smpsNoAttack, $01
00098DA5 EC07                       	smpsPSGAlterVol     $07
00098DA7 8003                       	dc.b	nRst, $03
00098DA9 ECF5                       	smpsPSGAlterVol     $F5
00098DAB 8F07                       	dc.b	nD1, $07
00098DAD EC0B                       	smpsPSGAlterVol     $0B
00098DAF 8007                       	dc.b	nRst, $07
00098DB1 E102                       	smpsAlterNote       $02
00098DB3 0101                       	dc.b	$01, $01
00098DB5 E1FB                       	smpsAlterNote       $FB
00098DB7 01                         	dc.b	$01
00098DB8 E1F8                       	smpsAlterNote       $F8
00098DBA 01                         	dc.b	$01
00098DBB E1FB                       	smpsAlterNote       $FB
00098DBD ECF5                       	smpsPSGAlterVol     $F5
00098DBF 8E06                       	dc.b	nCs1, $06
00098DC1 EC0B                       	smpsPSGAlterVol     $0B
00098DC3 8004                       	dc.b	nRst, $04
00098DC5 ECF5                       	smpsPSGAlterVol     $F5
00098DC7 8E06                       	dc.b	nCs1, $06
00098DC9 EC04                       	smpsPSGAlterVol     $04
00098DCB E701                       	dc.b	smpsNoAttack, $01
00098DCD EC07                       	smpsPSGAlterVol     $07
00098DCF 8006                       	dc.b	nRst, $06
00098DD1 E1FE                       	smpsAlterNote       $FE
00098DD3 01                         	dc.b	$01
00098DD4 E102                       	smpsAlterNote       $02
00098DD6 01                         	dc.b	$01
00098DD7 E1FE                       	smpsAlterNote       $FE
00098DD9 01                         	dc.b	$01
00098DDA E1F9                       	smpsAlterNote       $F9
00098DDC 01                         	dc.b	$01
00098DDD E1FC                       	smpsAlterNote       $FC
00098DDF ECF5                       	smpsPSGAlterVol     $F5
00098DE1 8F06                       	dc.b	nD1, $06
00098DE3 EC04                       	smpsPSGAlterVol     $04
00098DE5 E701                       	dc.b	smpsNoAttack, $01
00098DE7 EC07                       	smpsPSGAlterVol     $07
00098DE9 8003                       	dc.b	nRst, $03
00098DEB ECF5                       	smpsPSGAlterVol     $F5
00098DED 8F06                       	dc.b	nD1, $06
00098DEF EC04                       	smpsPSGAlterVol     $04
00098DF1 E701                       	dc.b	smpsNoAttack, $01
00098DF3 EC07                       	smpsPSGAlterVol     $07
00098DF5 8006                       	dc.b	nRst, $06
00098DF7 E1FF                       	smpsAlterNote       $FF
00098DF9 01                         	dc.b	$01
00098DFA E103                       	smpsAlterNote       $03
00098DFC 01                         	dc.b	$01
00098DFD E102                       	smpsAlterNote       $02
00098DFF 01                         	dc.b	$01
00098E00 E1FB                       	smpsAlterNote       $FB
00098E02 01                         	dc.b	$01
00098E03 ECF5                       	smpsPSGAlterVol     $F5
00098E05 8E07                       	dc.b	nCs1, $07
00098E07 EC0B                       	smpsPSGAlterVol     $0B
00098E09 8004                       	dc.b	nRst, $04
00098E0B ECF5                       	smpsPSGAlterVol     $F5
00098E0D 8E06                       	dc.b	nCs1, $06
00098E0F EC0B                       	smpsPSGAlterVol     $0B
00098E11 8007                       	dc.b	nRst, $07
00098E13 E101                       	smpsAlterNote       $01
00098E15 0101                       	dc.b	$01, $01
00098E17 E1FE                       	smpsAlterNote       $FE
00098E19 01                         	dc.b	$01
00098E1A E1F9                       	smpsAlterNote       $F9
00098E1C 01                         	dc.b	$01
00098E1D E1FC                       	smpsAlterNote       $FC
00098E1F ECF5                       	smpsPSGAlterVol     $F5
00098E21 8F06                       	dc.b	nD1, $06
00098E23 EC04                       	smpsPSGAlterVol     $04
00098E25 E701                       	dc.b	smpsNoAttack, $01
00098E27 EC07                       	smpsPSGAlterVol     $07
00098E29 8003                       	dc.b	nRst, $03
00098E2B ECF5                       	smpsPSGAlterVol     $F5
00098E2D 8F06                       	dc.b	nD1, $06
00098E2F EC04                       	smpsPSGAlterVol     $04
00098E31 E701                       	dc.b	smpsNoAttack, $01
00098E33 EC07                       	smpsPSGAlterVol     $07
00098E35 8006                       	dc.b	nRst, $06
00098E37 E1FF                       	smpsAlterNote       $FF
00098E39 01                         	dc.b	$01
00098E3A E103                       	smpsAlterNote       $03
00098E3C 01                         	dc.b	$01
00098E3D E1FF                       	smpsAlterNote       $FF
00098E3F 01                         	dc.b	$01
00098E40 E1FB                       	smpsAlterNote       $FB
00098E42 01                         	dc.b	$01
00098E43 ECF5                       	smpsPSGAlterVol     $F5
00098E45 8E06                       	dc.b	nCs1, $06
00098E47 EC04                       	smpsPSGAlterVol     $04
00098E49 E701                       	dc.b	smpsNoAttack, $01
00098E4B EC07                       	smpsPSGAlterVol     $07
00098E4D 8003                       	dc.b	nRst, $03
00098E4F ECF5                       	smpsPSGAlterVol     $F5
00098E51 8E07                       	dc.b	nCs1, $07
00098E53 E1FF                       	smpsAlterNote       $FF
00098E55 9B06                       	dc.b	nD2, $06
00098E57 EC04                       	smpsPSGAlterVol     $04
00098E59 E701                       	dc.b	smpsNoAttack, $01
00098E5B ECFC                       	smpsPSGAlterVol     $FC
00098E5D 9B03                       	dc.b	nD2, $03
00098E5F EC04                       	smpsPSGAlterVol     $04
00098E61 E701                       	dc.b	smpsNoAttack, $01
00098E63 ECFC                       	smpsPSGAlterVol     $FC
00098E65 9B02                       	dc.b	nD2, $02
00098E67 EC04                       	smpsPSGAlterVol     $04
00098E69 E701                       	dc.b	smpsNoAttack, $01
00098E6B ECFC                       	smpsPSGAlterVol     $FC
00098E6D E1FE                       	smpsAlterNote       $FE
00098E6F 9A03                       	dc.b	nCs2, $03
00098E71 EC0B                       	smpsPSGAlterVol     $0B
00098E73 800A                       	dc.b	nRst, $0A
00098E75 E102                       	smpsAlterNote       $02
00098E77 01                         	dc.b	$01
00098E78 E10A                       	smpsAlterNote       $0A
00098E7A 01                         	dc.b	$01
00098E7B E102                       	smpsAlterNote       $02
00098E7D 01                         	dc.b	$01
00098E7E E1F7                       	smpsAlterNote       $F7
00098E80 01                         	dc.b	$01
00098E81 E10A                       	smpsAlterNote       $0A
00098E83 01                         	dc.b	$01
00098E84 E1FC                       	smpsAlterNote       $FC
00098E86 01                         	dc.b	$01
00098E87 E108                       	smpsAlterNote       $08
00098E89 0101                       	dc.b	$01, $01
00098E8B E102                       	smpsAlterNote       $02
00098E8D 01                         	dc.b	$01
00098E8E E1F7                       	smpsAlterNote       $F7
00098E90 0101                       	dc.b	$01, $01
00098E92 E1FC                       	smpsAlterNote       $FC
00098E94 ECF5                       	smpsPSGAlterVol     $F5
00098E96 8F06                       	dc.b	nD1, $06
00098E98 EC04                       	smpsPSGAlterVol     $04
00098E9A E701                       	dc.b	smpsNoAttack, $01
00098E9C EC07                       	smpsPSGAlterVol     $07
00098E9E 8003                       	dc.b	nRst, $03
00098EA0 ECF5                       	smpsPSGAlterVol     $F5
00098EA2 8F06                       	dc.b	nD1, $06
00098EA4 EC04                       	smpsPSGAlterVol     $04
00098EA6 E701                       	dc.b	smpsNoAttack, $01
00098EA8 EC07                       	smpsPSGAlterVol     $07
00098EAA 8006                       	dc.b	nRst, $06
00098EAC E1FF                       	smpsAlterNote       $FF
00098EAE 01                         	dc.b	$01
00098EAF E102                       	smpsAlterNote       $02
00098EB1 01                         	dc.b	$01
00098EB2 E101                       	smpsAlterNote       $01
00098EB4 01                         	dc.b	$01
00098EB5 E1FC                       	smpsAlterNote       $FC
00098EB7 01                         	dc.b	$01
00098EB8 ECF5                       	smpsPSGAlterVol     $F5
00098EBA 9007                       	dc.b	nEb1, $07
00098EBC EC0B                       	smpsPSGAlterVol     $0B
00098EBE 8004                       	dc.b	nRst, $04
00098EC0 ECF5                       	smpsPSGAlterVol     $F5
00098EC2 9006                       	dc.b	nEb1, $06
00098EC4 EC0B                       	smpsPSGAlterVol     $0B
00098EC6 8007                       	dc.b	nRst, $07
00098EC8 E103                       	smpsAlterNote       $03
00098ECA 0101                       	dc.b	$01, $01
00098ECC E1FF                       	smpsAlterNote       $FF
00098ECE 01                         	dc.b	$01
00098ECF E1F9                       	smpsAlterNote       $F9
00098ED1 01                         	dc.b	$01
00098ED2 E1FC                       	smpsAlterNote       $FC
00098ED4 ECF5                       	smpsPSGAlterVol     $F5
00098ED6 8F06                       	dc.b	nD1, $06
00098ED8 EC04                       	smpsPSGAlterVol     $04
00098EDA E701                       	dc.b	smpsNoAttack, $01
00098EDC EC07                       	smpsPSGAlterVol     $07
00098EDE 8003                       	dc.b	nRst, $03
00098EE0 ECF5                       	smpsPSGAlterVol     $F5
00098EE2 8F06                       	dc.b	nD1, $06
00098EE4 EC04                       	smpsPSGAlterVol     $04
00098EE6 E701                       	dc.b	smpsNoAttack, $01
00098EE8 EC07                       	smpsPSGAlterVol     $07
00098EEA 8006                       	dc.b	nRst, $06
00098EEC E1FF                       	smpsAlterNote       $FF
00098EEE 01                         	dc.b	$01
00098EEF E103                       	smpsAlterNote       $03
00098EF1 01                         	dc.b	$01
00098EF2 E1FF                       	smpsAlterNote       $FF
00098EF4 01                         	dc.b	$01
00098EF5 E1F9                       	smpsAlterNote       $F9
00098EF7 01                         	dc.b	$01
00098EF8 E1FC                       	smpsAlterNote       $FC
00098EFA ECF5                       	smpsPSGAlterVol     $F5
00098EFC 8F06                       	dc.b	nD1, $06
00098EFE EC04                       	smpsPSGAlterVol     $04
00098F00 E701                       	dc.b	smpsNoAttack, $01
00098F02 EC07                       	smpsPSGAlterVol     $07
00098F04 8003                       	dc.b	nRst, $03
00098F06 ECF5                       	smpsPSGAlterVol     $F5
00098F08 8F07                       	dc.b	nD1, $07
00098F0A EC0B                       	smpsPSGAlterVol     $0B
00098F0C 8006                       	dc.b	nRst, $06
00098F0E E1FF                       	smpsAlterNote       $FF
00098F10 01                         	dc.b	$01
00098F11 E102                       	smpsAlterNote       $02
00098F13 0101                       	dc.b	$01, $01
00098F15 E1FC                       	smpsAlterNote       $FC
00098F17 01                         	dc.b	$01
00098F18 ECF5                       	smpsPSGAlterVol     $F5
00098F1A 8F07                       	dc.b	nD1, $07
00098F1C EC0B                       	smpsPSGAlterVol     $0B
00098F1E 8004                       	dc.b	nRst, $04
00098F20 ECF5                       	smpsPSGAlterVol     $F5
00098F22 8F06                       	dc.b	nD1, $06
00098F24 EC04                       	smpsPSGAlterVol     $04
00098F26 E701                       	dc.b	smpsNoAttack, $01
00098F28 EC07                       	smpsPSGAlterVol     $07
00098F2A 8006                       	dc.b	nRst, $06
00098F2C E101                       	smpsAlterNote       $01
00098F2E 01                         	dc.b	$01
00098F2F E102                       	smpsAlterNote       $02
00098F31 01                         	dc.b	$01
00098F32 E1FF                       	smpsAlterNote       $FF
00098F34 01                         	dc.b	$01
00098F35 E1F9                       	smpsAlterNote       $F9
00098F37 01                         	dc.b	$01
00098F38 E1FC                       	smpsAlterNote       $FC
00098F3A ECF5                       	smpsPSGAlterVol     $F5
00098F3C 9006                       	dc.b	nEb1, $06
00098F3E EC04                       	smpsPSGAlterVol     $04
00098F40 E701                       	dc.b	smpsNoAttack, $01
00098F42 EC07                       	smpsPSGAlterVol     $07
00098F44 8003                       	dc.b	nRst, $03
00098F46 ECF5                       	smpsPSGAlterVol     $F5
00098F48 9006                       	dc.b	nEb1, $06
00098F4A EC04                       	smpsPSGAlterVol     $04
00098F4C E701                       	dc.b	smpsNoAttack, $01
00098F4E EC07                       	smpsPSGAlterVol     $07
00098F50 8006                       	dc.b	nRst, $06
00098F52 E100                       	smpsAlterNote       $00
00098F54 01                         	dc.b	$01
00098F55 E102                       	smpsAlterNote       $02
00098F57 01                         	dc.b	$01
00098F58 E100                       	smpsAlterNote       $00
00098F5A 01                         	dc.b	$01
00098F5B E1FF                       	smpsAlterNote       $FF
00098F5D 01                         	dc.b	$01
00098F5E ECF5                       	smpsPSGAlterVol     $F5
00098F60 9B06                       	dc.b	nD2, $06
00098F62 EC04                       	smpsPSGAlterVol     $04
00098F64 E701                       	dc.b	smpsNoAttack, $01
00098F66 EC07                       	smpsPSGAlterVol     $07
00098F68 8003                       	dc.b	nRst, $03
00098F6A ECF5                       	smpsPSGAlterVol     $F5
00098F6C 9B07                       	dc.b	nD2, $07
00098F6E EC0B                       	smpsPSGAlterVol     $0B
00098F70 8007                       	dc.b	nRst, $07
00098F72 E105                       	smpsAlterNote       $05
00098F74 0101                       	dc.b	$01, $01
00098F76 E1FF                       	smpsAlterNote       $FF
00098F78 01                         	dc.b	$01
00098F79 E1FC                       	smpsAlterNote       $FC
00098F7B 01                         	dc.b	$01
00098F7C E1FF                       	smpsAlterNote       $FF
00098F7E ECF5                       	smpsPSGAlterVol     $F5
00098F80 9B06                       	dc.b	nD2, $06
00098F82 EC0B                       	smpsPSGAlterVol     $0B
00098F84 8004                       	dc.b	nRst, $04
00098F86 ECF5                       	smpsPSGAlterVol     $F5
00098F88 9B06                       	dc.b	nD2, $06
00098F8A EC04                       	smpsPSGAlterVol     $04
00098F8C E701                       	dc.b	smpsNoAttack, $01
00098F8E EC07                       	smpsPSGAlterVol     $07
00098F90 8006                       	dc.b	nRst, $06
00098F92 E102                       	smpsAlterNote       $02
00098F94 01                         	dc.b	$01
00098F95 E106                       	smpsAlterNote       $06
00098F97 01                         	dc.b	$01
00098F98 E102                       	smpsAlterNote       $02
00098F9A 01                         	dc.b	$01
00098F9B E1FC                       	smpsAlterNote       $FC
00098F9D 01                         	dc.b	$01
00098F9E E1FF                       	smpsAlterNote       $FF
00098FA0 ECF5                       	smpsPSGAlterVol     $F5
00098FA2 9B06                       	dc.b	nD2, $06
00098FA4 EC04                       	smpsPSGAlterVol     $04
00098FA6 E701                       	dc.b	smpsNoAttack, $01
00098FA8 EC07                       	smpsPSGAlterVol     $07
00098FAA 8003                       	dc.b	nRst, $03
00098FAC ECF5                       	smpsPSGAlterVol     $F5
00098FAE 9B07                       	dc.b	nD2, $07
00098FB0 EC0B                       	smpsPSGAlterVol     $0B
00098FB2 8006                       	dc.b	nRst, $06
00098FB4 E102                       	smpsAlterNote       $02
00098FB6 01                         	dc.b	$01
00098FB7 E105                       	smpsAlterNote       $05
00098FB9 0101                       	dc.b	$01, $01
00098FBB E1FF                       	smpsAlterNote       $FF
00098FBD 01                         	dc.b	$01
00098FBE ECF5                       	smpsPSGAlterVol     $F5
00098FC0 9B07                       	dc.b	nD2, $07
00098FC2 EC0B                       	smpsPSGAlterVol     $0B
00098FC4 8004                       	dc.b	nRst, $04
00098FC6 ECF5                       	smpsPSGAlterVol     $F5
00098FC8 9B06                       	dc.b	nD2, $06
00098FCA EC04                       	smpsPSGAlterVol     $04
00098FCC E701                       	dc.b	smpsNoAttack, $01
00098FCE EC07                       	smpsPSGAlterVol     $07
00098FD0 8006                       	dc.b	nRst, $06
00098FD2 E105                       	smpsAlterNote       $05
00098FD4 0101                       	dc.b	$01, $01
00098FD6 E102                       	smpsAlterNote       $02
00098FD8 01                         	dc.b	$01
00098FD9 E1FC                       	smpsAlterNote       $FC
00098FDB 01                         	dc.b	$01
00098FDC E1FF                       	smpsAlterNote       $FF
00098FDE ECF5                       	smpsPSGAlterVol     $F5
00098FE0 9B06                       	dc.b	nD2, $06
00098FE2 EC04                       	smpsPSGAlterVol     $04
00098FE4 E701                       	dc.b	smpsNoAttack, $01
00098FE6 EC07                       	smpsPSGAlterVol     $07
00098FE8 8003                       	dc.b	nRst, $03
00098FEA ECF5                       	smpsPSGAlterVol     $F5
00098FEC 9B06                       	dc.b	nD2, $06
00098FEE EC04                       	smpsPSGAlterVol     $04
00098FF0 E701                       	dc.b	smpsNoAttack, $01
00098FF2 EC07                       	smpsPSGAlterVol     $07
00098FF4 8006                       	dc.b	nRst, $06
00098FF6 E102                       	smpsAlterNote       $02
00098FF8 01                         	dc.b	$01
00098FF9 E106                       	smpsAlterNote       $06
00098FFB 01                         	dc.b	$01
00098FFC E102                       	smpsAlterNote       $02
00098FFE 01                         	dc.b	$01
00098FFF E1FF                       	smpsAlterNote       $FF
00099001 01                         	dc.b	$01
00099002 ECF5                       	smpsPSGAlterVol     $F5
00099004 9B06                       	dc.b	nD2, $06
00099006 EC04                       	smpsPSGAlterVol     $04
00099008 E701                       	dc.b	smpsNoAttack, $01
0009900A EC07                       	smpsPSGAlterVol     $07
0009900C 8003                       	dc.b	nRst, $03
0009900E ECF5                       	smpsPSGAlterVol     $F5
00099010 9B07                       	dc.b	nD2, $07
00099012 EC0B                       	smpsPSGAlterVol     $0B
00099014 8007                       	dc.b	nRst, $07
00099016 E107                       	smpsAlterNote       $07
00099018 0101                       	dc.b	$01, $01
0009901A E1FE                       	smpsAlterNote       $FE
0009901C 01                         	dc.b	$01
0009901D E1FA                       	smpsAlterNote       $FA
0009901F 0101                       	dc.b	$01, $01
00099021 E103                       	smpsAlterNote       $03
00099023 01                         	dc.b	$01
00099024 E109                       	smpsAlterNote       $09
00099026 01                         	dc.b	$01
00099027 E107                       	smpsAlterNote       $07
00099029 01                         	dc.b	$01
0009902A E1FE                       	smpsAlterNote       $FE
0009902C 01                         	dc.b	$01
0009902D E108                       	smpsAlterNote       $08
0009902F 01                         	dc.b	$01
00099030 E1FD                       	smpsAlterNote       $FD
00099032 ECF5                       	smpsPSGAlterVol     $F5
00099034 940E                       	dc.b	nG1, $0E
00099036 E103                       	smpsAlterNote       $03
00099038 EC0B                       	smpsPSGAlterVol     $0B
0009903A 8001 01                    	dc.b	nRst, $01, $01
0009903D E1FD                       	smpsAlterNote       $FD
0009903F 01                         	dc.b	$01
00099040 E1FB                       	smpsAlterNote       $FB
00099042 0101                       	dc.b	$01, $01
00099044 E100                       	smpsAlterNote       $00
00099046 01                         	dc.b	$01
00099047 E103                       	smpsAlterNote       $03
00099049 01                         	dc.b	$01
0009904A E100                       	smpsAlterNote       $00
0009904C 01                         	dc.b	$01
0009904D E1FD                       	smpsAlterNote       $FD
0009904F 01                         	dc.b	$01
00099050 E1FA                       	smpsAlterNote       $FA
00099052 01                         	dc.b	$01
00099053 E1FD                       	smpsAlterNote       $FD
00099055 01                         	dc.b	$01
00099056 E103                       	smpsAlterNote       $03
00099058 0101                       	dc.b	$01, $01
0009905A E100                       	smpsAlterNote       $00
0009905C 01                         	dc.b	$01
0009905D E1FE                       	smpsAlterNote       $FE
0009905F ECF5                       	smpsPSGAlterVol     $F5
00099061 960D                       	dc.b	nA1, $0D
00099063 E104                       	smpsAlterNote       $04
00099065 EC0B                       	smpsPSGAlterVol     $0B
00099067 8001 01                    	dc.b	nRst, $01, $01
0009906A E101                       	smpsAlterNote       $01
0009906C 01                         	dc.b	$01
0009906D E1FB                       	smpsAlterNote       $FB
0009906F 0101                       	dc.b	$01, $01
00099071 E1FE                       	smpsAlterNote       $FE
00099073 01                         	dc.b	$01
00099074 E104                       	smpsAlterNote       $04
00099076 0101                       	dc.b	$01, $01
00099078 E1FE                       	smpsAlterNote       $FE
0009907A 01                         	dc.b	$01
0009907B E1FB                       	smpsAlterNote       $FB
0009907D 0101                       	dc.b	$01, $01
0009907F E101                       	smpsAlterNote       $01
00099081 01                         	dc.b	$01
00099082 E104                       	smpsAlterNote       $04
00099084 0101                       	dc.b	$01, $01
00099086 E1FE                       	smpsAlterNote       $FE
00099088 ECF5                       	smpsPSGAlterVol     $F5
0009908A 970D                       	dc.b	nBb1, $0D
0009908C E101                       	smpsAlterNote       $01
0009908E EC04                       	smpsPSGAlterVol     $04
00099090 E701                       	dc.b	smpsNoAttack, $01
00099092 EC07                       	smpsPSGAlterVol     $07
00099094 E104                       	smpsAlterNote       $04
00099096 8001                       	dc.b	nRst, $01
00099098 E103                       	smpsAlterNote       $03
0009909A 01                         	dc.b	$01
0009909B E1FE                       	smpsAlterNote       $FE
0009909D 01                         	dc.b	$01
0009909E E1FA                       	smpsAlterNote       $FA
000990A0 01                         	dc.b	$01
000990A1 E1FE                       	smpsAlterNote       $FE
000990A3 01                         	dc.b	$01
000990A4 E101                       	smpsAlterNote       $01
000990A6 01                         	dc.b	$01
000990A7 E104                       	smpsAlterNote       $04
000990A9 01                         	dc.b	$01
000990AA E101                       	smpsAlterNote       $01
000990AC 01                         	dc.b	$01
000990AD E1FB                       	smpsAlterNote       $FB
000990AF 01                         	dc.b	$01
000990B0 E1FA                       	smpsAlterNote       $FA
000990B2 01                         	dc.b	$01
000990B3 E1FE                       	smpsAlterNote       $FE
000990B5 01                         	dc.b	$01
000990B6 E103                       	smpsAlterNote       $03
000990B8 0101                       	dc.b	$01, $01
000990BA E101                       	smpsAlterNote       $01
000990BC 01                         	dc.b	$01
000990BD E1FE                       	smpsAlterNote       $FE
000990BF ECF5                       	smpsPSGAlterVol     $F5
000990C1 990D                       	dc.b	nC2, $0D
000990C3 E104                       	smpsAlterNote       $04
000990C5 EC0B                       	smpsPSGAlterVol     $0B
000990C7 8001 01                    	dc.b	nRst, $01, $01
000990CA E102                       	smpsAlterNote       $02
000990CC 01                         	dc.b	$01
000990CD E1FC                       	smpsAlterNote       $FC
000990CF 0101                       	dc.b	$01, $01
000990D1 E102                       	smpsAlterNote       $02
000990D3 01                         	dc.b	$01
000990D4 E104                       	smpsAlterNote       $04
000990D6 01                         	dc.b	$01
000990D7 E1FF                       	smpsAlterNote       $FF
000990D9 ECF5                       	smpsPSGAlterVol     $F5
000990DB 9B06                       	dc.b	nD2, $06
000990DD EC04                       	smpsPSGAlterVol     $04
000990DF E701                       	dc.b	smpsNoAttack, $01
000990E1 EC07                       	smpsPSGAlterVol     $07
000990E3 8003                       	dc.b	nRst, $03
000990E5 ECF5                       	smpsPSGAlterVol     $F5
000990E7 9B07                       	dc.b	nD2, $07
000990E9 EC0B                       	smpsPSGAlterVol     $0B
000990EB 8006                       	dc.b	nRst, $06
000990ED E101                       	smpsAlterNote       $01
000990EF 01                         	dc.b	$01
000990F0 E104                       	smpsAlterNote       $04
000990F2 0101                       	dc.b	$01, $01
000990F4 E1FE                       	smpsAlterNote       $FE
000990F6 01                         	dc.b	$01
000990F7 E1FC                       	smpsAlterNote       $FC
000990F9 01                         	dc.b	$01
000990FA E1FE                       	smpsAlterNote       $FE
000990FC ECF5                       	smpsPSGAlterVol     $F5
000990FE 9C06                       	dc.b	nEb2, $06
00099100 EC0B                       	smpsPSGAlterVol     $0B
00099102 8004                       	dc.b	nRst, $04
00099104 ECF5                       	smpsPSGAlterVol     $F5
00099106 9C06                       	dc.b	nEb2, $06
00099108 EC04                       	smpsPSGAlterVol     $04
0009910A E701                       	dc.b	smpsNoAttack, $01
0009910C EC07                       	smpsPSGAlterVol     $07
0009910E 8006                       	dc.b	nRst, $06
00099110 E105                       	smpsAlterNote       $05
00099112 01                         	dc.b	$01
00099113 E106                       	smpsAlterNote       $06
00099115 01                         	dc.b	$01
00099116 E102                       	smpsAlterNote       $02
00099118 01                         	dc.b	$01
00099119 E1FB                       	smpsAlterNote       $FB
0009911B 01                         	dc.b	$01
0009911C E1FF                       	smpsAlterNote       $FF
0009911E ECF5                       	smpsPSGAlterVol     $F5
00099120 9B06                       	dc.b	nD2, $06
00099122 EC04                       	smpsPSGAlterVol     $04
00099124 E701                       	dc.b	smpsNoAttack, $01
00099126 EC07                       	smpsPSGAlterVol     $07
00099128 8003                       	dc.b	nRst, $03
0009912A ECF5                       	smpsPSGAlterVol     $F5
0009912C 9B06                       	dc.b	nD2, $06
0009912E EC04                       	smpsPSGAlterVol     $04
00099130 E701                       	dc.b	smpsNoAttack, $01
00099132 EC07                       	smpsPSGAlterVol     $07
00099134 8006                       	dc.b	nRst, $06
00099136 E101                       	smpsAlterNote       $01
00099138 01                         	dc.b	$01
00099139 E105                       	smpsAlterNote       $05
0009913B 01                         	dc.b	$01
0009913C E104                       	smpsAlterNote       $04
0009913E 01                         	dc.b	$01
0009913F E1FE                       	smpsAlterNote       $FE
00099141 01                         	dc.b	$01
00099142 ECF5                       	smpsPSGAlterVol     $F5
00099144 9C07                       	dc.b	nEb2, $07
00099146 EC0B                       	smpsPSGAlterVol     $0B
00099148 8004                       	dc.b	nRst, $04
0009914A ECF5                       	smpsPSGAlterVol     $F5
0009914C 9C06                       	dc.b	nEb2, $06
0009914E EC0B                       	smpsPSGAlterVol     $0B
00099150 8007                       	dc.b	nRst, $07
00099152 E105                       	smpsAlterNote       $05
00099154 0101                       	dc.b	$01, $01
00099156 E102                       	smpsAlterNote       $02
00099158 01                         	dc.b	$01
00099159 E1FB                       	smpsAlterNote       $FB
0009915B 01                         	dc.b	$01
0009915C E1FF                       	smpsAlterNote       $FF
0009915E ECF5                       	smpsPSGAlterVol     $F5
00099160 9B06                       	dc.b	nD2, $06
00099162 EC04                       	smpsPSGAlterVol     $04
00099164 E701                       	dc.b	smpsNoAttack, $01
00099166 EC07                       	smpsPSGAlterVol     $07
00099168 8003                       	dc.b	nRst, $03
0009916A ECF5                       	smpsPSGAlterVol     $F5
0009916C 9B06                       	dc.b	nD2, $06
0009916E EC04                       	smpsPSGAlterVol     $04
00099170 E701                       	dc.b	smpsNoAttack, $01
00099172 EC07                       	smpsPSGAlterVol     $07
00099174 8006                       	dc.b	nRst, $06
00099176 E101                       	smpsAlterNote       $01
00099178 01                         	dc.b	$01
00099179 E105                       	smpsAlterNote       $05
0009917B 01                         	dc.b	$01
0009917C E101                       	smpsAlterNote       $01
0009917E 01                         	dc.b	$01
0009917F E1FC                       	smpsAlterNote       $FC
00099181 01                         	dc.b	$01
00099182 E1FE                       	smpsAlterNote       $FE
00099184 ECF5                       	smpsPSGAlterVol     $F5
00099186 9C06                       	dc.b	nEb2, $06
00099188 EC04                       	smpsPSGAlterVol     $04
0009918A E701                       	dc.b	smpsNoAttack, $01
0009918C EC07                       	smpsPSGAlterVol     $07
0009918E 8003                       	dc.b	nRst, $03
00099190 ECF5                       	smpsPSGAlterVol     $F5
00099192 9C07                       	dc.b	nEb2, $07
00099194 EC0B                       	smpsPSGAlterVol     $0B
00099196 8006                       	dc.b	nRst, $06
00099198 E102                       	smpsAlterNote       $02
0009919A 01                         	dc.b	$01
0009919B E105                       	smpsAlterNote       $05
0009919D 0101                       	dc.b	$01, $01
0009919F E1FF                       	smpsAlterNote       $FF
000991A1 01                         	dc.b	$01
000991A2 ECF5                       	smpsPSGAlterVol     $F5
000991A4 9B07                       	dc.b	nD2, $07
000991A6 EC0B                       	smpsPSGAlterVol     $0B
000991A8 8004                       	dc.b	nRst, $04
000991AA ECF5                       	smpsPSGAlterVol     $F5
000991AC 9B06                       	dc.b	nD2, $06
000991AE EC04                       	smpsPSGAlterVol     $04
000991B0 E701                       	dc.b	smpsNoAttack, $01
000991B2 EC07                       	smpsPSGAlterVol     $07
000991B4 8002                       	dc.b	nRst, $02
000991B6 E1FC                       	smpsAlterNote       $FC
000991B8 ECF5                       	smpsPSGAlterVol     $F5
000991BA 9006                       	dc.b	nEb1, $06
000991BC EC04                       	smpsPSGAlterVol     $04
000991BE E701                       	dc.b	smpsNoAttack, $01
000991C0 ECFC                       	smpsPSGAlterVol     $FC
000991C2 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
000991C6 EC04                       	smpsPSGAlterVol     $04
000991C8 E701                       	dc.b	smpsNoAttack, $01
000991CA E1FD                       	smpsAlterNote       $FD
000991CC ECFC                       	smpsPSGAlterVol     $FC
000991CE 9402                       	dc.b	nG1, $02
000991D0 EC04                       	smpsPSGAlterVol     $04
000991D2 E701                       	dc.b	smpsNoAttack, $01
000991D4 E1FE                       	smpsAlterNote       $FE
000991D6 ECFC                       	smpsPSGAlterVol     $FC
000991D8 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
000991DC EC04                       	smpsPSGAlterVol     $04
000991DE E701                       	dc.b	smpsNoAttack, $01
000991E0 EC07                       	smpsPSGAlterVol     $07
000991E2 8008                       	dc.b	nRst, $08
000991E4 F6F4 F3                    	smpsJump            music84_Jump06
000991E7                            
000991E7                            ; PSG3 Data
000991E7                            music84_PSG3:
000991E7 F500                       	smpsPSGvoice        $00
000991E9 E1FF                       	smpsAlterNote       $FF
000991EB EC0F                       	smpsPSGAlterVol     $0F
000991ED 803A                       	dc.b	nRst, $3A
000991EF                            
000991EF                            music84_Jump05:
000991EF 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
000991FB 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
00099205 F6FF E8                    	smpsJump            music84_Jump05
00099208                            
00099208                            ; DAC Data
00099208                            music84_DAC:
00099208 E0C0                       	smpsPan             panCenter, $00
0009920A 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
00099216 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
00099222 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
0009922E 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0009923A 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
00099246 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
00099252 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0009925E 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
0009926A 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
00099276 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
00099282 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0009928E 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
0009929A 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
000992A6 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
000992B2 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
000992BE 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
000992CA 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
000992D6 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
000992E2 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
000992EE 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
000992FA 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00099306 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
00099312 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
0009931E 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0009932A 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
00099336 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
00099342 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
0009934E 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0009935A 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
00099366 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00099372 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0009937E 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0009938A 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
00099396 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
000993A2 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
000993AE 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
000993BA 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
000993C6 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
000993D2 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
000993DE 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
000993EA 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
000993F6 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
00099402 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0009940E 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0009941A 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00099426 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00099432 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0009943E 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
0009944A 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
00099456 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
00099462 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
0009946E 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
0009947A 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
00099486 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
00099492 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0009949E 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
000994AA 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
000994B6 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
000994C2 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
000994CE 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
000994DA 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
000994E6 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
000994F2 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
000994FE 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
0009950A 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
00099516 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
00099522 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
0009952E 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
0009953A 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
00099546 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
00099552 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
0009955E 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0009956A 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
00099576 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
00099582 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
0009958E E0C0                       	smpsPan             panCenter, $00
00099590 F2                         	smpsStop
00099591                            
00099591                            music84_Voices:
00099591                            ;	Voice $00
00099591                            ;	$3D
00099591                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
00099591                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
00099591                            	smpsVcAlgorithm     $05
00099591                            	smpsVcFeedback      $07
00099591                            	smpsVcUnusedBits    $00
00099591                            	smpsVcDetune        $05, $04, $03, $04
00099591                            	smpsVcCoarseFreq    $01, $01, $01, $01
00099591                            	smpsVcRateScale     $00, $00, $00, $00
00099591                            	smpsVcAttackRate    $11, $11, $11, $11
00099591                            	smpsVcAmpMod        $00, $00, $00, $00
00099591                            	smpsVcDecayRate1    $00, $00, $00, $0A
00099591                            	smpsVcDecayRate2    $00, $00, $00, $0B
00099591                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00099591                            	smpsVcReleaseRate   $08, $08, $08, $07
00099591 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
000995AA                            
000995AA                            ;	Voice $01
000995AA                            ;	$04
000995AA                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
000995AA                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
000995AA                            	smpsVcAlgorithm     $04
000995AA                            	smpsVcFeedback      $00
000995AA                            	smpsVcUnusedBits    $00
000995AA                            	smpsVcDetune        $04, $03, $04, $05
000995AA                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
000995AA                            	smpsVcRateScale     $00, $01, $00, $01
000995AA                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000995AA                            	smpsVcAmpMod        $00, $00, $00, $00
000995AA                            	smpsVcDecayRate1    $0E, $00, $0E, $00
000995AA                            	smpsVcDecayRate2    $05, $00, $05, $00
000995AA                            	smpsVcDecayLevel    $08, $0E, $08, $0E
000995AA                            	smpsVcReleaseRate   $06, $06, $06, $06
000995AA 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
000995C3                            
000995C3                            ;	Voice $02
000995C3                            ;	$30
000995C3                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
000995C3                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
000995C3                            	smpsVcAlgorithm     $00
000995C3                            	smpsVcFeedback      $06
000995C3                            	smpsVcUnusedBits    $00
000995C3                            	smpsVcDetune        $04, $02, $00, $06
000995C3                            	smpsVcCoarseFreq    $01, $01, $03, $0C
000995C3                            	smpsVcRateScale     $00, $00, $00, $00
000995C3                            	smpsVcAttackRate    $1F, $1F, $1F, $14
000995C3                            	smpsVcAmpMod        $00, $00, $00, $00
000995C3                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
000995C3                            	smpsVcDecayRate2    $01, $01, $01, $01
000995C3                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
000995C3                            	smpsVcReleaseRate   $09, $0B, $08, $0F
000995C3 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
000995DC                            
000995DC                            ;	Voice $03
000995DC                            ;	$3A
000995DC                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
000995DC                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
000995DC                            	smpsVcAlgorithm     $02
000995DC                            	smpsVcFeedback      $07
000995DC                            	smpsVcUnusedBits    $00
000995DC                            	smpsVcDetune        $04, $06, $02, $00
000995DC                            	smpsVcCoarseFreq    $01, $01, $01, $01
000995DC                            	smpsVcRateScale     $00, $00, $00, $00
000995DC                            	smpsVcAttackRate    $18, $19, $14, $14
000995DC                            	smpsVcAmpMod        $00, $00, $00, $00
000995DC                            	smpsVcDecayRate1    $09, $0D, $09, $09
000995DC                            	smpsVcDecayRate2    $00, $00, $00, $00
000995DC                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
000995DC                            	smpsVcReleaseRate   $08, $0F, $0F, $07
000995DC 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
000995F5                            
000995F5                            ;	Voice $04
000995F5                            ;	$3C
000995F5                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
000995F5                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
000995F5                            	smpsVcAlgorithm     $04
000995F5                            	smpsVcFeedback      $07
000995F5                            	smpsVcUnusedBits    $00
000995F5                            	smpsVcDetune        $07, $00, $00, $03
000995F5                            	smpsVcCoarseFreq    $00, $00, $02, $0A
000995F5                            	smpsVcRateScale     $00, $00, $00, $00
000995F5                            	smpsVcAttackRate    $10, $1F, $10, $1F
000995F5                            	smpsVcAmpMod        $00, $00, $00, $00
000995F5                            	smpsVcDecayRate1    $00, $00, $00, $00
000995F5                            	smpsVcDecayRate2    $00, $00, $00, $00
000995F5                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000995F5                            	smpsVcReleaseRate   $0A, $02, $0A, $02
000995F5 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
0009960E                            
0009960E                            ;	Voice $05
0009960E                            ;	$38
0009960E                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
0009960E                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
0009960E                            	smpsVcAlgorithm     $00
0009960E                            	smpsVcFeedback      $07
0009960E                            	smpsVcUnusedBits    $00
0009960E                            	smpsVcDetune        $04, $06, $02, $00
0009960E                            	smpsVcCoarseFreq    $01, $01, $01, $00
0009960E                            	smpsVcRateScale     $00, $00, $00, $00
0009960E                            	smpsVcAttackRate    $1F, $1F, $1F, $10
0009960E                            	smpsVcAmpMod        $00, $00, $00, $00
0009960E                            	smpsVcDecayRate1    $00, $03, $00, $17
0009960E                            	smpsVcDecayRate2    $00, $08, $08, $0B
0009960E                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
0009960E                            	smpsVcReleaseRate   $08, $05, $05, $05
0009960E 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
00099627                            
00099627                            
00099628 00                         		even
00099628                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
0009D838                            		even
0009D838                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
000A1390 00                         		even
000A1390                            Music87:	include	sound\music87.asm; Invincibility
000A1390                            triple_Header:
000A1390 =00000001                  smpsHeaderStartSong = 1
000A1390 0000                       	smpsHeaderVoice     triple_Voices
000A1392 0501                       	smpsHeaderChan      $05, $01
000A1394 0200                       	smpsHeaderTempo     $02, $00
000A1396                            
000A139A 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
000A139E 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
000A13A2 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
000A13A6 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
000A13AA 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
000A13B0                            
000A13B0                            ; DAC Data
000A13B0                            triple_DAC:
000A13B0 E0C0                       	smpsPan             panCenter, $00
000A13B2 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
000A13B8                            
000A13B8                            triple_Loop01:
000A13B8 8282 82                    	dc.b	dSnare, dSnare, dSnare
000A13BB                            
000A13BB                            triple_Loop00:
000A13BB 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
000A13C7 06                         	dc.b	$06
000A13C8 F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
000A13CD 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
000A13D9 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
000A13E0 F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
000A13E5 0303 1B                    	dc.b	$03, $03, $1B
000A13E8 E0C0                       	smpsPan             panCenter, $00
000A13EA F6FF C4                    	smpsJump triple_DAC
000A13ED                            
000A13ED                            ; FM1 Data
000A13ED                            triple_FM1:
000A13ED E0C0                       	smpsPan             panCenter, $00
000A13F1 8018                       	dc.b	nRst, $18
000A13F3                            
000A13F3                            triple_Loop0B:
000A13F3 AC06 B8                    	dc.b	nG3, $06, nG4
000A13F6 F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
000A13FB                            
000A13FB                            triple_Loop0C:
000A13FB A7B3                       	dc.b	nD3, nD4
000A13FD F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
000A1402                            
000A1402                            triple_Loop0D:
000A1402 A9B5                       	dc.b	nE3, nE4
000A1404 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
000A1409 A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
000A1411 F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
000A1416 A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
000A1422 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
000A142E AD                         	dc.b	nAb3
000A142F F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
000A1434 8018                       	dc.b	nRst, $18
000A1436 E0C0                       	smpsPan             panCenter, $00
000A143A F6FF B1                    	smpsJump triple_FM1
000A143D                            
000A143D                            ; FM2 Data
000A143D                            triple_FM2:
000A143D E0C0                       	smpsPan             panCenter, $00
000A1441 8018                       	dc.b	nRst, $18
000A1443                            
000A1443                            triple_Loop07:
000A1443 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A144F C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A145B F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
000A1460 8003                       	dc.b	nRst, $03
000A1462                            
000A1462                            triple_Loop08:
000A1462 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A1468 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
000A146D B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000A1473                            
000A1473                            triple_Loop09:
000A1473 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A147F C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A148B F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
000A1490 8003                       	dc.b	nRst, $03
000A1492                            
000A1492                            triple_Loop0A:
000A1492 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A1498 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
000A149D B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000A14A3 E0C0                       	smpsPan             panCenter, $00
000A14A7 F6FF 94                    	smpsJump triple_FM2
000A14AA                            
000A14AA                            ; FM3 Data
000A14AA                            triple_FM3:
000A14AA E0C0                       	smpsPan             panCenter, $00
000A14AE 8018                       	dc.b	nRst, $18
000A14B0                            
000A14B0                            triple_Loop06:
000A14B0 B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
000A14B7 F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
000A14BC 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
000A14C8 BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
000A14D4 C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
000A14D7 F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
000A14DC 8018                       	dc.b	nRst, $18
000A14DE E0C0                       	smpsPan             panCenter, $00
000A14E2 F6FF C6                    	smpsJump triple_FM3
000A14E5                            
000A14E5                            ; FM4 Data
000A14E5                            triple_FM4:
000A14E5 E103                       	smpsAlterNote       $03
000A14E9 E0C0                       	smpsPan             panCenter, $00
000A14EB 8018                       	dc.b	nRst, $18
000A14ED                            
000A14ED                            triple_Loop02:
000A14ED C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A14F9 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A1505 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
000A150A 8003                       	dc.b	nRst, $03
000A150C                            
000A150C                            triple_Loop03:
000A150C B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A1512 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
000A1517 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000A151D                            
000A151D                            triple_Loop04:
000A151D C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A1529 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A1535 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
000A153A 8003                       	dc.b	nRst, $03
000A153C                            
000A153C                            triple_Loop05:
000A153C B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A1542 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
000A1547 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000A154D E0C0                       	smpsPan             panCenter, $00
000A154F F6FF 94                    	smpsJump triple_FM4
000A1552                            
000A1552                            ; PSG1 Data
000A1552                            triple_PSG1:
000A1552 8018                       	dc.b	nRst, $18
000A1554                            
000A1554                            triple_Loop0E:
000A1554 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A1560 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A156C 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A1578 9402 8004                  	dc.b	nG1, $02, nRst, $04
000A157C F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
000A1581 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A158D 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A1599 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A15A5 9402 8007                  	dc.b	nG1, $02, nRst, $07
000A15A9                            
000A15A9                            triple_Loop0F:
000A15A9 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000A15AF F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
000A15B4 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
000A15BA                            
000A15BA                            triple_Loop10:
000A15BA A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A15C6 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A15D2 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A15DE 9402 8004                  	dc.b	nG1, $02, nRst, $04
000A15E2 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
000A15E7 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A15F3 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A15FF 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A160B 9402 8007                  	dc.b	nG1, $02, nRst, $07
000A160F                            
000A160F                            triple_Loop11:
000A160F 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000A1615 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
000A161A 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
000A1620 F500                       	smpsPSGvoice        $00
000A1622 F6FF 2E                    	smpsJump triple_PSG1
000A1625                            
000A1625                            triple_Voices:
000A1625                            ;	Voice $00
000A1625                            ;	$3A
000A1625                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000A1625                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000A1625                            	smpsVcAlgorithm     $02
000A1625                            	smpsVcFeedback      $07
000A1625                            	smpsVcUnusedBits    $00
000A1625                            	smpsVcDetune        $00, $00, $00, $00
000A1625                            	smpsVcCoarseFreq    $01, $01, $07, $01
000A1625                            	smpsVcRateScale     $01, $02, $02, $02
000A1625                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000A1625                            	smpsVcAmpMod        $00, $00, $00, $00
000A1625                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000A1625                            	smpsVcDecayRate2    $00, $00, $00, $00
000A1625                            	smpsVcDecayLevel    $00, $01, $0F, $01
000A1625                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A1625 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000A163E                            
000A163E                            ;	Voice $01
000A163E                            ;	$20
000A163E                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
000A163E                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
000A163E                            	smpsVcAlgorithm     $00
000A163E                            	smpsVcFeedback      $04
000A163E                            	smpsVcUnusedBits    $00
000A163E                            	smpsVcDetune        $00, $00, $03, $07
000A163E                            	smpsVcCoarseFreq    $00, $00, $01, $0A
000A163E                            	smpsVcRateScale     $03, $03, $03, $02
000A163E                            	smpsVcAttackRate    $1F, $1C, $18, $1F
000A163E                            	smpsVcAmpMod        $00, $00, $00, $00
000A163E                            	smpsVcDecayRate1    $04, $04, $0A, $10
000A163E                            	smpsVcDecayRate2    $08, $08, $08, $0F
000A163E                            	smpsVcDecayLevel    $0B, $0B, $05, $05
000A163E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A163E 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000A163E 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000A1658 00                         		even
000A1658                            Music88:	incbin	sound\music88.bin; Extra Life
000A1746                            		even
000A1746                            Music89:	incbin	sound\music89.bin; Special Stage
000A560E 00                         		even
000A560E                            Music8A:	incbin	sound\music8A.bin; Title Screen
000A57D8                            		even
000A57D8                            Music8B:	incbin	sound\music8B.bin; Ending Theme
000A5A72                            		even
000A5A72                            Music8C:	incbin	sound\music8C.bin; VS Boss
000A5D10                            		even
000A5D10                            Music8D:	incbin	sound\music8D.bin; Final Zone
000A5F2C                            		even
000A5F2C                            Music8E:	include	sound\merry.asm ; Act Clear
000A5F2C =0000008B                  dMerryWtf1 = dVLowTimpani ; $87
000A5F2C =0000008A                  dMerryWtf2 = dLowTimpani  ; $85
000A5F2C =0000008B                  dMerryWtf3 = dVLowTimpani ; $84
000A5F2C =0000008A                  dMerryClap = dLowTimpani
000A5F2C                            
000A5F2C                            MerrysLittleLamb_Header:
000A5F2C 0000                       	smpsHeaderVoice     MerrysLittleLamb_Voices
000A5F2E 0603                       	smpsHeaderChan      $06, $03
000A5F30 0100                       	smpsHeaderTempo     $01, $00
000A5F32                            
000A5F36 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM1,	$00, $00
000A5F3A 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM2,	$00, $00
000A5F3E 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM3,	$00, $00
000A5F42 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM4,	$00, $00
000A5F46 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM5,	$00, $00
000A5F4A 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG1,	$00, $00, $00, $00
000A5F50 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG2,	$00, $00, $00, $00
000A5F56 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG3,	$00, $00, $00, $00
000A5F5C                            
000A5F5C                            MerrysLittleLamb_FM1:
000A5F5C E0C0                       	smpsPan             panCenter, $00
000A5F5E 807F 7F7F 20               	dc.b	nRst, $7F, $7F, $7F, $20
000A5F65 E60F                       	smpsAlterVol        $0F
000A5F67 A704                       	dc.b	nD3, $04
000A5F69 E606                       	smpsAlterVol        $06
000A5F6B A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A5F70 E6FA                       	smpsAlterVol        $FA
000A5F72 A705                       	dc.b	nD3, $05
000A5F74 E606                       	smpsAlterVol        $06
000A5F76 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5F7B E6FA                       	smpsAlterVol        $FA
000A5F7D A704                       	dc.b	nD3, $04
000A5F7F E606                       	smpsAlterVol        $06
000A5F81 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000A5F87 E6FA                       	smpsAlterVol        $FA
000A5F89 A7                         	dc.b	nD3
000A5F8A E606                       	smpsAlterVol        $06
000A5F8C A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5F91 E6FA                       	smpsAlterVol        $FA
000A5F93 A704                       	dc.b	nD3, $04
000A5F95 E606                       	smpsAlterVol        $06
000A5F97 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000A5F9D E6FA                       	smpsAlterVol        $FA
000A5F9F A7                         	dc.b	nD3
000A5FA0 E606                       	smpsAlterVol        $06
000A5FA2 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000A5FA8 E6FA                       	smpsAlterVol        $FA
000A5FAA A705                       	dc.b	nD3, $05
000A5FAC E606                       	smpsAlterVol        $06
000A5FAE A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A5FB3 E6FA                       	smpsAlterVol        $FA
000A5FB5 A7                         	dc.b	nD3
000A5FB6 E606                       	smpsAlterVol        $06
000A5FB8 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000A5FBE E6FA                       	smpsAlterVol        $FA
000A5FC0 A705                       	dc.b	nD3, $05
000A5FC2 E606                       	smpsAlterVol        $06
000A5FC4 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A5FC9 E6FA                       	smpsAlterVol        $FA
000A5FCB A704                       	dc.b	nD3, $04
000A5FCD E606                       	smpsAlterVol        $06
000A5FCF A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A5FD4 E6FA                       	smpsAlterVol        $FA
000A5FD6 A705                       	dc.b	nD3, $05
000A5FD8 E606                       	smpsAlterVol        $06
000A5FDA A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5FDF E6FA                       	smpsAlterVol        $FA
000A5FE1 A704                       	dc.b	nD3, $04
000A5FE3 E606                       	smpsAlterVol        $06
000A5FE5 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A5FEA E6FA                       	smpsAlterVol        $FA
000A5FEC A705                       	dc.b	nD3, $05
000A5FEE E606                       	smpsAlterVol        $06
000A5FF0 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5FF5 E6FA                       	smpsAlterVol        $FA
000A5FF7 A704                       	dc.b	nD3, $04
000A5FF9 E606                       	smpsAlterVol        $06
000A5FFB A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000A6001 E6FA                       	smpsAlterVol        $FA
000A6003 A7                         	dc.b	nD3
000A6004 E606                       	smpsAlterVol        $06
000A6006 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000A600C E6FA                       	smpsAlterVol        $FA
000A600E A705                       	dc.b	nD3, $05
000A6010 E606                       	smpsAlterVol        $06
000A6012 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A6017 E6FA                       	smpsAlterVol        $FA
000A6019 A7                         	dc.b	nD3
000A601A E606                       	smpsAlterVol        $06
000A601C A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000A6022 E6FA                       	smpsAlterVol        $FA
000A6024 A705                       	dc.b	nD3, $05
000A6026 E606                       	smpsAlterVol        $06
000A6028 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A602D E6FA                       	smpsAlterVol        $FA
000A602F A704                       	dc.b	nD3, $04
000A6031 E606                       	smpsAlterVol        $06
000A6033 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A6038 E6FA                       	smpsAlterVol        $FA
000A603A A705                       	dc.b	nD3, $05
000A603C E606                       	smpsAlterVol        $06
000A603E A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A6043 E6FA                       	smpsAlterVol        $FA
000A6045 A704                       	dc.b	nD3, $04
000A6047 E606                       	smpsAlterVol        $06
000A6049 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A604E E6FA                       	smpsAlterVol        $FA
000A6050 A705                       	dc.b	nD3, $05
000A6052 E606                       	smpsAlterVol        $06
000A6054 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A6059 E6FA                       	smpsAlterVol        $FA
000A605B A704                       	dc.b	nD3, $04
000A605D E606                       	smpsAlterVol        $06
000A605F A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000A6065 E6FA                       	smpsAlterVol        $FA
000A6067 A7                         	dc.b	nD3
000A6068 E606                       	smpsAlterVol        $06
000A606A A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A606F E6FA                       	smpsAlterVol        $FA
000A6071 A704                       	dc.b	nD3, $04
000A6073 E606                       	smpsAlterVol        $06
000A6075 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000A607B E6FA                       	smpsAlterVol        $FA
000A607D A7                         	dc.b	nD3
000A607E E606                       	smpsAlterVol        $06
000A6080 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000A6086 E6FA                       	smpsAlterVol        $FA
000A6088 A705                       	dc.b	nD3, $05
000A608A E606                       	smpsAlterVol        $06
000A608C A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A6091 E6FA                       	smpsAlterVol        $FA
000A6093 A704                       	dc.b	nD3, $04
000A6095 E606                       	smpsAlterVol        $06
000A6097 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A609C E6FA                       	smpsAlterVol        $FA
000A609E A705                       	dc.b	nD3, $05
000A60A0 E606                       	smpsAlterVol        $06
000A60A2 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A60A7 E6FA                       	smpsAlterVol        $FA
000A60A9 A704                       	dc.b	nD3, $04
000A60AB E606                       	smpsAlterVol        $06
000A60AD A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A60B2 E6FA                       	smpsAlterVol        $FA
000A60B4 A705                       	dc.b	nD3, $05
000A60B6 E606                       	smpsAlterVol        $06
000A60B8 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A60BD E6FA                       	smpsAlterVol        $FA
000A60BF A704                       	dc.b	nD3, $04
000A60C1 E606                       	smpsAlterVol        $06
000A60C3 A705 A7A7 7FE7 19          	dc.b	nD3, $05, nD3, nD3, $7F, smpsNoAttack, $19
000A60CA F2                         	smpsStop
000A60CB                            
000A60CB                            MerrysLittleLamb_FM2:
000A60CB E0C0                       	smpsPan             panCenter, $00
000A60CD 807F 7F7F 7F30             	dc.b	nRst, $7F, $7F, $7F, $7F, $30
000A60D5 E610                       	smpsAlterVol        $10
000A60D7 A87F E719 807F 7F7F 3E     	dc.b	nEb3, $7F, smpsNoAttack, $19, nRst, $7F, $7F, $7F, $3E
000A60E0                            
000A60E0                            MerrysLittleLamb_FM3:
000A60E0                            MerrysLittleLamb_FM4:
000A60E0                            MerrysLittleLamb_FM5:
000A60E0 F2                         	smpsStop
000A60E1                            
000A60E1                            MerrysLittleLamb_PSG1:
000A60E1 807F 7F7F 7F06 B701        	dc.b	nRst, $7F, $7F, $7F, $7F, $06, nFs4, $01
000A60E9 EC02                       	smpsPSGAlterVol     $02
000A60EB B7                         	dc.b	nFs4
000A60EC EC03                       	smpsPSGAlterVol     $03
000A60EE B7                         	dc.b	nFs4
000A60EF EC03                       	smpsPSGAlterVol     $03
000A60F1 B7                         	dc.b	nFs4
000A60F2 EC03                       	smpsPSGAlterVol     $03
000A60F4 B7                         	dc.b	nFs4
000A60F5 ECF5                       	smpsPSGAlterVol     $F5
000A60F7 B7                         	dc.b	nFs4
000A60F8 EC02                       	smpsPSGAlterVol     $02
000A60FA B7                         	dc.b	nFs4
000A60FB EC03                       	smpsPSGAlterVol     $03
000A60FD B7                         	dc.b	nFs4
000A60FE EC03                       	smpsPSGAlterVol     $03
000A6100 B7                         	dc.b	nFs4
000A6101 ECF8                       	smpsPSGAlterVol     $F8
000A6103 B7                         	dc.b	nFs4
000A6104 EC02                       	smpsPSGAlterVol     $02
000A6106 B7                         	dc.b	nFs4
000A6107 EC03                       	smpsPSGAlterVol     $03
000A6109 B7                         	dc.b	nFs4
000A610A EC03                       	smpsPSGAlterVol     $03
000A610C B7                         	dc.b	nFs4
000A610D EC03                       	smpsPSGAlterVol     $03
000A610F B7                         	dc.b	nFs4
000A6110 ECF5                       	smpsPSGAlterVol     $F5
000A6112 B7                         	dc.b	nFs4
000A6113 EC02                       	smpsPSGAlterVol     $02
000A6115 B7                         	dc.b	nFs4
000A6116 EC03                       	smpsPSGAlterVol     $03
000A6118 B7                         	dc.b	nFs4
000A6119 EC03                       	smpsPSGAlterVol     $03
000A611B B7                         	dc.b	nFs4
000A611C EC03                       	smpsPSGAlterVol     $03
000A611E B7                         	dc.b	nFs4
000A611F ECF5                       	smpsPSGAlterVol     $F5
000A6121 B7                         	dc.b	nFs4
000A6122 EC02                       	smpsPSGAlterVol     $02
000A6124 B7                         	dc.b	nFs4
000A6125 EC06                       	smpsPSGAlterVol     $06
000A6127 B7                         	dc.b	nFs4
000A6128 EC03                       	smpsPSGAlterVol     $03
000A612A B7                         	dc.b	nFs4
000A612B ECF5                       	smpsPSGAlterVol     $F5
000A612D B7                         	dc.b	nFs4
000A612E EC02                       	smpsPSGAlterVol     $02
000A6130 B7                         	dc.b	nFs4
000A6131 EC03                       	smpsPSGAlterVol     $03
000A6133 B7                         	dc.b	nFs4
000A6134 EC03                       	smpsPSGAlterVol     $03
000A6136 B7                         	dc.b	nFs4
000A6137 EC03                       	smpsPSGAlterVol     $03
000A6139 B7                         	dc.b	nFs4
000A613A ECF5                       	smpsPSGAlterVol     $F5
000A613C B7                         	dc.b	nFs4
000A613D EC02                       	smpsPSGAlterVol     $02
000A613F B7                         	dc.b	nFs4
000A6140 EC03                       	smpsPSGAlterVol     $03
000A6142 B7                         	dc.b	nFs4
000A6143 EC03                       	smpsPSGAlterVol     $03
000A6145 B7                         	dc.b	nFs4
000A6146 EC03                       	smpsPSGAlterVol     $03
000A6148 B780 7F2B                  	dc.b	nFs4, nRst, $7F, $2B
000A614C ECF7                       	smpsPSGAlterVol     $F7
000A614E A008 8006 9E08 8006 A308+  	dc.b	nG2, $08, nRst, $06, nF2, $08, nRst, $06, nBb2, $08, nRst, $0A
000A615A A006 8004 A005 8004 A205+  	dc.b	nG2, $06, nRst, $04, nG2, $05, nRst, $04, nA2, $05, nRst, $04
000A6166 A005 8004 A208 8001 A305+  	dc.b	nG2, $05, nRst, $04, nA2, $08, nRst, $01, nBb2, $05, nRst, $01
000A6172 A305 8003 A305 8001 A304+  	dc.b	nBb2, $05, nRst, $03, nBb2, $05, nRst, $01, nBb2, $04, nRst, nBb2
000A617E 0580 01A3 0480 A308 807F+  	dc.b	$05, nRst, $01, nBb2, $04, nRst, nBb2, $08, nRst, $7F, $7F, $26
000A618A F2                         	smpsStop
000A618B                            
000A618B                            MerrysLittleLamb_PSG2:
000A618B 807F 7F7F 7F7F 52          	dc.b	nRst, $7F, $7F, $7F, $7F, $7F, $52
000A6192 EC02                       	smpsPSGAlterVol     $02
000A6194 A708 8006 A908 8006 A908+  	dc.b	nD3, $08, nRst, $06, nE3, $08, nRst, $06, nE3, $08, nRst, $0A
000A61A0 E101                       	smpsAlterNote       $01
000A61A2 AB06 8004                  	dc.b	nFs3, $06, nRst, $04
000A61A6 E101                       	smpsAlterNote       $01
000A61A8 AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000A61AC E101                       	smpsAlterNote       $01
000A61AE AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000A61B2 E101                       	smpsAlterNote       $01
000A61B4 AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000A61B8 E101                       	smpsAlterNote       $01
000A61BA AB08 8001                  	dc.b	nFs3, $08, nRst, $01
000A61BE E101                       	smpsAlterNote       $01
000A61C0 AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000A61C4 E101                       	smpsAlterNote       $01
000A61C6 AB05 8003                  	dc.b	nFs3, $05, nRst, $03
000A61CA E101                       	smpsAlterNote       $01
000A61CC AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000A61D0 E101                       	smpsAlterNote       $01
000A61D2 AB04 80                    	dc.b	nFs3, $04, nRst
000A61D5 E101                       	smpsAlterNote       $01
000A61D7 AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000A61DB E101                       	smpsAlterNote       $01
000A61DD AB04 80                    	dc.b	nFs3, $04, nRst
000A61E0 E101                       	smpsAlterNote       $01
000A61E2 AB08 807F 7F26             	dc.b	nFs3, $08, nRst, $7F, $7F, $26
000A61E8 F2                         	smpsStop
000A61E9                            
000A61E9                            MerrysLittleLamb_PSG3:
000A61E9 807F 7F7F 7F39             	dc.b	nRst, $7F, $7F, $7F, $7F, $39
000A61EF F3E7                       	smpsPSGform         $E7
000A61F1 E108                       	smpsAlterNote       $08
000A61F3 0002                       	dc.b	nMaxPSG, $02
000A61F5 EC01                       	smpsPSGAlterVol     $01
000A61F7 E108                       	smpsAlterNote       $08
000A61F9 0005                       	dc.b	nMaxPSG, $05
000A61FB EC01                       	smpsPSGAlterVol     $01
000A61FD E108                       	smpsAlterNote       $08
000A61FF 0008                       	dc.b	nMaxPSG, $08
000A6201 EC01                       	smpsPSGAlterVol     $01
000A6203 E108                       	smpsAlterNote       $08
000A6205 00                         	dc.b	nMaxPSG
000A6206 EC01                       	smpsPSGAlterVol     $01
000A6208 E108                       	smpsAlterNote       $08
000A620A 00                         	dc.b	nMaxPSG
000A620B EC01                       	smpsPSGAlterVol     $01
000A620D E108                       	smpsAlterNote       $08
000A620F 0007                       	dc.b	nMaxPSG, $07
000A6211 EC01                       	smpsPSGAlterVol     $01
000A6213 E108                       	smpsAlterNote       $08
000A6215 0005                       	dc.b	nMaxPSG, $05
000A6217 EC01                       	smpsPSGAlterVol     $01
000A6219 E108                       	smpsAlterNote       $08
000A621B 0007                       	dc.b	nMaxPSG, $07
000A621D EC01                       	smpsPSGAlterVol     $01
000A621F E108                       	smpsAlterNote       $08
000A6221 0004                       	dc.b	nMaxPSG, $04
000A6223 EC01                       	smpsPSGAlterVol     $01
000A6225 E108                       	smpsAlterNote       $08
000A6227 0007                       	dc.b	nMaxPSG, $07
000A6229 EC01                       	smpsPSGAlterVol     $01
000A622B E108                       	smpsAlterNote       $08
000A622D 0006                       	dc.b	nMaxPSG, $06
000A622F EC01                       	smpsPSGAlterVol     $01
000A6231 E108                       	smpsAlterNote       $08
000A6233 0009                       	dc.b	nMaxPSG, $09
000A6235 EC01                       	smpsPSGAlterVol     $01
000A6237 E108                       	smpsAlterNote       $08
000A6239 0007                       	dc.b	nMaxPSG, $07
000A623B EC01                       	smpsPSGAlterVol     $01
000A623D E108                       	smpsAlterNote       $08
000A623F 0001                       	dc.b	nMaxPSG, $01
000A6241 ECFF                       	smpsPSGAlterVol     $FF
000A6243 E108                       	smpsAlterNote       $08
000A6245 00                         	dc.b	nMaxPSG
000A6246 EC01                       	smpsPSGAlterVol     $01
000A6248 E108                       	smpsAlterNote       $08
000A624A 0009                       	dc.b	nMaxPSG, $09
000A624C EC01                       	smpsPSGAlterVol     $01
000A624E E108                       	smpsAlterNote       $08
000A6250 0007 807F 7F7F 68          	dc.b	nMaxPSG, $07, nRst, $7F, $7F, $7F, $68
000A6257 F2                         	smpsStop
000A6258                            
000A6258                            MerrysLittleLamb_DAC:
000A6258 8913 8A06 8B0D 8A89 8989+  	dc.b	dMidTimpani, $13, dLowTimpani, $06, dVLowTimpani, $0D, dLowTimpani, dMidTimpani, dMidTimpani, dMidTimpani, $1A, dLowTimpani
000A6264 0D8A 8A19 890D 8888 1A89+  	dc.b	$0D, dLowTimpani, dLowTimpani, $19, dMidTimpani, $0D, dHiTimpani, dHiTimpani, $1A, dMidTimpani, $14, dLowTimpani
000A6270 068B 0D8A 8989 898A 0C8A+  	dc.b	$06, dVLowTimpani, $0D, dLowTimpani, dMidTimpani, dMidTimpani, dMidTimpani, dLowTimpani, $0C, dLowTimpani, $0D, dLowTimpani
000A627C 898A 8B34 890E 8A04 8B09+  	dc.b	dMidTimpani, dLowTimpani, dMerryWtf1, $34, dMidTimpani, $0E, dLowTimpani, $04, dVLowTimpani, $09, dLowTimpani, $0A
000A6288 8909 8989 8A0A 8A09 8A8A+  	dc.b	dMidTimpani, $09, dMidTimpani, dMidTimpani, dMerryWtf2, $0A, dLowTimpani, $09, dLowTimpani, dLowTimpani, dMerryWtf3, dMidTimpani
000A6294 0A88 0988 8289 0581 098A+  	dc.b	$0A, dHiTimpani, $09, dHiTimpani, dSnare, dMidTimpani, $05, dKick, $09, dLowTimpani, $05, dVLowTimpani
000A62A0 098A 8989 0A89 098A 8805+  	dc.b	$09, dLowTimpani, dMidTimpani, dMidTimpani, $0A, dMidTimpani, $09, dLowTimpani, dHiTimpani, $05, dMidTimpani, $04
000A62AC 8A0A 8909 8A82 0182 0482+  	dc.b	dLowTimpani, $0A, dMidTimpani, $09, dLowTimpani, dSnare, $01, dSnare, $04, dSnare, $01, dSnare
000A62B8 0382 0181 0481 0182 0382+  	dc.b	$03, dSnare, $01, dKick, $04, dKick, $01, dSnare, $03, dSnare, $01, dKick
000A62C4 0481 0182 0482 0181 0381+  	dc.b	$04, dKick, $01, dSnare, $04, dSnare, $01, dKick, $03, dKick, $01, dSnare
000A62D0 0489 0582 0482 058A 048B+  	dc.b	$04, dMidTimpani, $05, dSnare, $04, dSnare, $05, dLowTimpani, $04, dVLowTimpani, $05, dSnare
000A62DC 8A04 8205 8904 8205 8982+  	dc.b	dLowTimpani, $04, dSnare, $05, dMidTimpani, $04, dSnare, $05, dMidTimpani, dSnare, $04, dMidTimpani
000A62E8 0582 8A04 8205 8A04 8205+  	dc.b	$05, dSnare, dMerryWtf2, $04, dSnare, $05, dLowTimpani, $04, dSnare, $05, dLowTimpani, dSnare
000A62F4 048A 0582 0486 0582 8904+  	dc.b	$04, dLowTimpani, $05, dSnare, $04, $86, $05, dSnare, dMidTimpani, $04, dSnare, $05
000A6300 8804 8205 8882 0482 0582+  	dc.b	dHiTimpani, $04, dSnare, $05, dHiTimpani, dSnare, $04, dSnare, $05, dSnare, dMidTimpani, $04
000A630C 8205 8204 8A05 8B82 048A+  	dc.b	dSnare, $05, dSnare, $04, dLowTimpani, $05, dVLowTimpani, dSnare, $04, dLowTimpani, $05, dSnare
000A6318 0489 0582 8909 8904 8205+  	dc.b	$04, dMidTimpani, $05, dSnare, dMidTimpani, $09, dMidTimpani, $04, dSnare, $05, dLowTimpani, $09
000A6324 8801 8804 8801 8904 8988+  	dc.b	dHiTimpani, $01, dHiTimpani, $04, dHiTimpani, $01, dMidTimpani, $04, dMidTimpani, dHiTimpani, $01, dHiTimpani
000A6330 0488 0189 0389 0189 0488+  	dc.b	$04, dHiTimpani, $01, dMidTimpani, $03, dMidTimpani, $01, dMidTimpani, $04, dHiTimpani, $01, dHiTimpani
000A633C 0488 0189 0389 0189 048A+  	dc.b	$04, dHiTimpani, $01, dMidTimpani, $03, dMidTimpani, $01, dMidTimpani, $04, dMerryClap, $01, dMerryClap
000A6348 038A 018B 048B 018B 0482+  	dc.b	$03, dMerryClap, $01, dVLowTimpani, $04, dVLowTimpani, $01, dVLowTimpani, $04, dSnare, $01, dKick
000A6354 0381 0182 0482 0181 0482+  	dc.b	$03, dKick, $01, dSnare, $04, dSnare, $01, dKick, $04, dSnare, $7F, nRst
000A6360 F2                         	smpsStop
000A6361                            
000A6361                            MerrysLittleLamb_Voices:
000A6361                            ;	Voice $00
000A6361                            ;	$00
000A6361                            ;	$70, $70, $70, $70, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $1F
000A6361                            ;	$00, $00, $00, $12, 	$F0, $F0, $F0, $0F, 	$00, $00, $00, $00
000A6361                            	smpsVcAlgorithm     $00
000A6361                            	smpsVcFeedback      $00
000A6361                            	smpsVcUnusedBits    $00
000A6361                            	smpsVcDetune        $07, $07, $07, $07
000A6361                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A6361                            	smpsVcRateScale     $00, $00, $00, $00
000A6361                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A6361                            	smpsVcAmpMod        $00, $00, $00, $00
000A6361                            	smpsVcDecayRate1    $1F, $00, $00, $00
000A6361                            	smpsVcDecayRate2    $12, $00, $00, $00
000A6361                            	smpsVcDecayLevel    $00, $0F, $0F, $0F
000A6361                            	smpsVcReleaseRate   $0F, $00, $00, $00
000A6361 0070 7070 701F 1F1F 1F00+  	smpsVcTotalLevel    $00, $00, $00, $00
000A637A                            
000A637A                            ;	Voice $01
000A637A                            ;	$25
000A637A                            ;	$01, $01, $01, $71, 	$1E, $1E, $1E, $1E, 	$08, $06, $0B, $03
000A637A                            ;	$00, $00, $00, $00, 	$4F, $4F, $AF, $0F, 	$08, $16, $06, $00
000A637A                            	smpsVcAlgorithm     $05
000A637A                            	smpsVcFeedback      $04
000A637A                            	smpsVcUnusedBits    $00
000A637A                            	smpsVcDetune        $07, $00, $00, $00
000A637A                            	smpsVcCoarseFreq    $01, $01, $01, $01
000A637A                            	smpsVcRateScale     $00, $00, $00, $00
000A637A                            	smpsVcAttackRate    $1E, $1E, $1E, $1E
000A637A                            	smpsVcAmpMod        $00, $00, $00, $00
000A637A                            	smpsVcDecayRate1    $03, $0B, $06, $08
000A637A                            	smpsVcDecayRate2    $00, $00, $00, $00
000A637A                            	smpsVcDecayLevel    $00, $0A, $04, $04
000A637A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A637A 2501 0101 711E 1E1E 1E08+  	smpsVcTotalLevel    $00, $06, $16, $08
000A6393                            
000A6393                            
000A6394 00                         		even
000A6394                            Music8F:	incbin	sound\music8F.bin ; Game Over
000A69D4 00                         		even
000A69D4                            Music90:	incbin	sound\music90.bin ; Continue
000A6D6E 00                         		even
000A6D6E                            Music91:	incbin	sound\music91.bin ; Credits
000A803C                            		even
000A803C                            Music92:	incbin	sound\music92.bin ; Drowning
000A837E 00                         		even
000A837E                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
000A844E                            		even
000A844E                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
000A9124 00                         		even
000A9124                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
000A9274 00                         		even
000A9274                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
000A92AE 00                         		even
000A92AE                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
000A9616                            		even
000A9616                            Music98:	incbin	sound\music98.bin ; Marble Act 2
000A9650 00                         		even
000A9650                            Music99:	incbin	sound\music99.bin ; Marble Act 3
000A968A 00                         		even
000A968A                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
000A96C4 00                         		even
000A96C4                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
000A96FE 00                         		even
000A96FE                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
000A9738 00                         		even
000A9738                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
000A9772 00                         		even
000A9772                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
000A9C62                            		even
000A9C62                            Music9F:	include	sound\music9F.asm ; Scrap Brain Act 3
000A9C62                            GentleBreeze_Header:
000A9C62 =00000001                  smpsHeaderStartSong = 1
000A9C62 0000                       	smpsHeaderVoice     GentleBreeze_Voices
000A9C64 0603                       	smpsHeaderChan      $06, $03
000A9C66 0100                       	smpsHeaderTempo     $01, $00
000A9C68                            
000A9C6C 0000 0000                  	smpsHeaderFM        GentleBreeze_FM1,	$00, $00
000A9C70 0000 0000                  	smpsHeaderFM        GentleBreeze_FM2,	$00, $00
000A9C74 0000 0000                  	smpsHeaderFM        GentleBreeze_FM3,	$00, $00
000A9C78 0000 0000                  	smpsHeaderFM        GentleBreeze_FM4,	$00, $00
000A9C7C 0000 0000                  	smpsHeaderFM        GentleBreeze_FM5,	$00, $00
000A9C80 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG1,	$00, $00, $00, $00
000A9C86 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG2,	$00, $00, $00, $00
000A9C8C 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG3,	$00, $00, $00, $00
000A9C92                            
000A9C92                            ; PSG3 Data
000A9C92                            GentleBreeze_PSG3:
000A9C92 F2                         	smpsStop
000A9C93                            
000A9C93                            ; FM1 Data
000A9C93                            GentleBreeze_FM1:
000A9C95 E0C0                       	smpsPan             panCenter, $00
000A9C97 E1FF                       	smpsAlterNote       $FF
000A9C99 C410                       	dc.b	nG5, $10
000A9C9B E60F                       	smpsAlterVol        $0F
000A9C9D C4                         	dc.b	nG5
000A9C9E E6F1                       	smpsAlterVol        $F1
000A9CA0 E100                       	smpsAlterNote       $00
000A9CA2 C2                         	dc.b	nF5
000A9CA3 E60F                       	smpsAlterVol        $0F
000A9CA5 08                         	dc.b	$08
000A9CA6 E6F1                       	smpsAlterVol        $F1
000A9CA8 C010                       	dc.b	nEb5, $10
000A9CAA E60F                       	smpsAlterVol        $0F
000A9CAC C0                         	dc.b	nEb5
000A9CAD E6F1                       	smpsAlterVol        $F1
000A9CAF BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A9CB5 E60F                       	smpsAlterVol        $0F
000A9CB7 C9                         	dc.b	nC6
000A9CB8 E6F1                       	smpsAlterVol        $F1
000A9CBA C5                         	dc.b	nAb5
000A9CBB E60F                       	smpsAlterVol        $0F
000A9CBD 08                         	dc.b	$08
000A9CBE E6F1                       	smpsAlterVol        $F1
000A9CC0 C010                       	dc.b	nEb5, $10
000A9CC2 E60F                       	smpsAlterVol        $0F
000A9CC4 C0                         	dc.b	nEb5
000A9CC5 E6F1                       	smpsAlterVol        $F1
000A9CC7 C208                       	dc.b	nF5, $08
000A9CC9 E1FF                       	smpsAlterNote       $FF
000A9CCB C410                       	dc.b	nG5, $10
000A9CCD E100                       	smpsAlterNote       $00
000A9CCF C5C7                       	dc.b	nAb5, nBb5
000A9CD1 E60F                       	smpsAlterVol        $0F
000A9CD3 C7                         	dc.b	nBb5
000A9CD4 E6F1                       	smpsAlterVol        $F1
000A9CD6 C5                         	dc.b	nAb5
000A9CD7 E60F                       	smpsAlterVol        $0F
000A9CD9 08                         	dc.b	$08
000A9CDA E6F1                       	smpsAlterVol        $F1
000A9CDC E1FF                       	smpsAlterNote       $FF
000A9CDE C410                       	dc.b	nG5, $10
000A9CE0 E60F                       	smpsAlterVol        $0F
000A9CE2 C4                         	dc.b	nG5
000A9CE3 E6F1                       	smpsAlterVol        $F1
000A9CE5 C4                         	dc.b	nG5
000A9CE6 E100                       	smpsAlterNote       $00
000A9CE8 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A9CED E60F                       	smpsAlterVol        $0F
000A9CEF C2                         	dc.b	nF5
000A9CF0 E6F1                       	smpsAlterVol        $F1
000A9CF2 E1FF                       	smpsAlterNote       $FF
000A9CF4 C4                         	dc.b	nG5
000A9CF5 E60F                       	smpsAlterVol        $0F
000A9CF7 08                         	dc.b	$08
000A9CF8 E6F1                       	smpsAlterVol        $F1
000A9CFA 10                         	dc.b	$10
000A9CFB E60F                       	smpsAlterVol        $0F
000A9CFD 38                         	dc.b	$38
000A9CFE E6F1                       	smpsAlterVol        $F1
000A9D00 10                         	dc.b	$10
000A9D01 E60F                       	smpsAlterVol        $0F
000A9D03 C4                         	dc.b	nG5
000A9D04 E6F1                       	smpsAlterVol        $F1
000A9D06 E100                       	smpsAlterNote       $00
000A9D08 C2                         	dc.b	nF5
000A9D09 E60F                       	smpsAlterVol        $0F
000A9D0B 08                         	dc.b	$08
000A9D0C E6F1                       	smpsAlterVol        $F1
000A9D0E C010                       	dc.b	nEb5, $10
000A9D10 E60F                       	smpsAlterVol        $0F
000A9D12 C0                         	dc.b	nEb5
000A9D13 E6F1                       	smpsAlterVol        $F1
000A9D15 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A9D1B E60F                       	smpsAlterVol        $0F
000A9D1D C9                         	dc.b	nC6
000A9D1E E6F1                       	smpsAlterVol        $F1
000A9D20 C5                         	dc.b	nAb5
000A9D21 E60F                       	smpsAlterVol        $0F
000A9D23 08                         	dc.b	$08
000A9D24 E6F1                       	smpsAlterVol        $F1
000A9D26 C010                       	dc.b	nEb5, $10
000A9D28 E60F                       	smpsAlterVol        $0F
000A9D2A C0                         	dc.b	nEb5
000A9D2B E6F1                       	smpsAlterVol        $F1
000A9D2D C208                       	dc.b	nF5, $08
000A9D2F E1FF                       	smpsAlterNote       $FF
000A9D31 C410                       	dc.b	nG5, $10
000A9D33 E100                       	smpsAlterNote       $00
000A9D35 C5C7                       	dc.b	nAb5, nBb5
000A9D37 E60F                       	smpsAlterVol        $0F
000A9D39 C7                         	dc.b	nBb5
000A9D3A E6F1                       	smpsAlterVol        $F1
000A9D3C C5                         	dc.b	nAb5
000A9D3D E60F                       	smpsAlterVol        $0F
000A9D3F 08                         	dc.b	$08
000A9D40 E6F1                       	smpsAlterVol        $F1
000A9D42 E1FF                       	smpsAlterNote       $FF
000A9D44 C410                       	dc.b	nG5, $10
000A9D46 E60F                       	smpsAlterVol        $0F
000A9D48 C4                         	dc.b	nG5
000A9D49 E6F1                       	smpsAlterVol        $F1
000A9D4B C4                         	dc.b	nG5
000A9D4C E100                       	smpsAlterNote       $00
000A9D4E C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A9D53 E60F                       	smpsAlterVol        $0F
000A9D55 28                         	dc.b	$28
000A9D56 E6F1                       	smpsAlterVol        $F1
000A9D58 C008 10                    	dc.b	nEb5, $08, $10
000A9D5B E60F                       	smpsAlterVol        $0F
000A9D5D 21                         	dc.b	$21
000A9D5E                            
000A9D5E                            GentleBreeze_Loop12:
000A9D5E E7C0 7F                    	dc.b	smpsNoAttack, nEb5, $7F
000A9D61 F700 08FF F9               	smpsLoop            $00, $08, GentleBreeze_Loop12
000A9D66 E717                       	dc.b	smpsNoAttack, $17
000A9D68 E6F1                       	smpsAlterVol        $F1
000A9D6A E1FF                       	smpsAlterNote       $FF
000A9D6C C410                       	dc.b	nG5, $10
000A9D6E E60F                       	smpsAlterVol        $0F
000A9D70 C4                         	dc.b	nG5
000A9D71 E6F1                       	smpsAlterVol        $F1
000A9D73 E100                       	smpsAlterNote       $00
000A9D75 C2                         	dc.b	nF5
000A9D76 E60F                       	smpsAlterVol        $0F
000A9D78 08                         	dc.b	$08
000A9D79 E6F1                       	smpsAlterVol        $F1
000A9D7B C010                       	dc.b	nEb5, $10
000A9D7D E60F                       	smpsAlterVol        $0F
000A9D7F C0                         	dc.b	nEb5
000A9D80 E6F1                       	smpsAlterVol        $F1
000A9D82 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A9D88 E60F                       	smpsAlterVol        $0F
000A9D8A C9                         	dc.b	nC6
000A9D8B E6F1                       	smpsAlterVol        $F1
000A9D8D C5                         	dc.b	nAb5
000A9D8E E60F                       	smpsAlterVol        $0F
000A9D90 08                         	dc.b	$08
000A9D91 E6F1                       	smpsAlterVol        $F1
000A9D93 C010                       	dc.b	nEb5, $10
000A9D95 E60F                       	smpsAlterVol        $0F
000A9D97 C0                         	dc.b	nEb5
000A9D98 E6F1                       	smpsAlterVol        $F1
000A9D9A C208                       	dc.b	nF5, $08
000A9D9C E1FF                       	smpsAlterNote       $FF
000A9D9E C410                       	dc.b	nG5, $10
000A9DA0 E100                       	smpsAlterNote       $00
000A9DA2 C5C7                       	dc.b	nAb5, nBb5
000A9DA4 E60F                       	smpsAlterVol        $0F
000A9DA6 C7                         	dc.b	nBb5
000A9DA7 E6F1                       	smpsAlterVol        $F1
000A9DA9 C5                         	dc.b	nAb5
000A9DAA E60F                       	smpsAlterVol        $0F
000A9DAC 08                         	dc.b	$08
000A9DAD E6F1                       	smpsAlterVol        $F1
000A9DAF E1FF                       	smpsAlterNote       $FF
000A9DB1 C410                       	dc.b	nG5, $10
000A9DB3 E60F                       	smpsAlterVol        $0F
000A9DB5 C4                         	dc.b	nG5
000A9DB6 E6F1                       	smpsAlterVol        $F1
000A9DB8 C4                         	dc.b	nG5
000A9DB9 E100                       	smpsAlterNote       $00
000A9DBB C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A9DC0 E60F                       	smpsAlterVol        $0F
000A9DC2 C2                         	dc.b	nF5
000A9DC3 E6F1                       	smpsAlterVol        $F1
000A9DC5 E1FF                       	smpsAlterNote       $FF
000A9DC7 C4                         	dc.b	nG5
000A9DC8 E60F                       	smpsAlterVol        $0F
000A9DCA 08                         	dc.b	$08
000A9DCB E6F1                       	smpsAlterVol        $F1
000A9DCD 10                         	dc.b	$10
000A9DCE E60F                       	smpsAlterVol        $0F
000A9DD0 38                         	dc.b	$38
000A9DD1 E6F1                       	smpsAlterVol        $F1
000A9DD3 10                         	dc.b	$10
000A9DD4 E60F                       	smpsAlterVol        $0F
000A9DD6 C4                         	dc.b	nG5
000A9DD7 E6F1                       	smpsAlterVol        $F1
000A9DD9 E100                       	smpsAlterNote       $00
000A9DDB C2                         	dc.b	nF5
000A9DDC E60F                       	smpsAlterVol        $0F
000A9DDE 08                         	dc.b	$08
000A9DDF E6F1                       	smpsAlterVol        $F1
000A9DE1 C010                       	dc.b	nEb5, $10
000A9DE3 E60F                       	smpsAlterVol        $0F
000A9DE5 C0                         	dc.b	nEb5
000A9DE6 E6F1                       	smpsAlterVol        $F1
000A9DE8 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A9DEE E60F                       	smpsAlterVol        $0F
000A9DF0 C9                         	dc.b	nC6
000A9DF1 E6F1                       	smpsAlterVol        $F1
000A9DF3 C5                         	dc.b	nAb5
000A9DF4 E60F                       	smpsAlterVol        $0F
000A9DF6 08                         	dc.b	$08
000A9DF7 E6F1                       	smpsAlterVol        $F1
000A9DF9 C010                       	dc.b	nEb5, $10
000A9DFB E60F                       	smpsAlterVol        $0F
000A9DFD C0                         	dc.b	nEb5
000A9DFE E6F1                       	smpsAlterVol        $F1
000A9E00 C208                       	dc.b	nF5, $08
000A9E02 E1FF                       	smpsAlterNote       $FF
000A9E04 C410                       	dc.b	nG5, $10
000A9E06 E100                       	smpsAlterNote       $00
000A9E08 C5C7                       	dc.b	nAb5, nBb5
000A9E0A E60F                       	smpsAlterVol        $0F
000A9E0C C7                         	dc.b	nBb5
000A9E0D E6F1                       	smpsAlterVol        $F1
000A9E0F C5                         	dc.b	nAb5
000A9E10 E60F                       	smpsAlterVol        $0F
000A9E12 08                         	dc.b	$08
000A9E13 E6F1                       	smpsAlterVol        $F1
000A9E15 E1FF                       	smpsAlterNote       $FF
000A9E17 C410                       	dc.b	nG5, $10
000A9E19 E60F                       	smpsAlterVol        $0F
000A9E1B C4                         	dc.b	nG5
000A9E1C E6F1                       	smpsAlterVol        $F1
000A9E1E C4                         	dc.b	nG5
000A9E1F E100                       	smpsAlterNote       $00
000A9E21 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A9E26 E60F                       	smpsAlterVol        $0F
000A9E28 28                         	dc.b	$28
000A9E29 E6F1                       	smpsAlterVol        $F1
000A9E2B C008 10                    	dc.b	nEb5, $08, $10
000A9E2E E60F                       	smpsAlterVol        $0F
000A9E30 21                         	dc.b	$21
000A9E31 E0C0                       	smpsPan             panCenter, $00
000A9E33 F6FF 29                    	smpsJump            GentleBreeze_Loop12
000A9E36                            
000A9E36                            ; FM2 Data
000A9E36                            GentleBreeze_FM2:
000A9E38 E60C                       	smpsAlterVol        $0C
000A9E3A E0C0                       	smpsPan             panCenter, $00
000A9E3C 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A9E48 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A9E54 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A9E60 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A9E6C 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A9E78 A039                       	dc.b	nG2, $39
000A9E7A                            
000A9E7A                            GentleBreeze_Jump04:
000A9E7A E7A0 0F                    	dc.b	smpsNoAttack, nG2, $0F
000A9E7D                            
000A9E7D                            GentleBreeze_Loop11:
000A9E7D A118 0880 10A1 2008 A09E+  	dc.b	nAb2, $18, $08, nRst, $10, nAb2, $20, $08, nG2, nF2, nFs2, nG2
000A9E89 A1A0 1808 8010 A020 0880+  	dc.b	nAb2, nG2, $18, $08, nRst, $10, nG2, $20, $08, nRst, nG2, nC3
000A9E95 189E A020 A510 A008 A518+  	dc.b	$18, nF2, nG2, $20, nC3, $10, nG2, $08, nC3, $18, nG2, $08
000A9EA1 9FA0 9C18 979C 2008 9EA2+  	dc.b	nFs2, nG2, nEb2, $18, nBb1, nEb2, $20, $08, nF2, nA2, nEb3, nB2
000A9EAD A3                         	dc.b	nBb2
000A9EAE F700 02FF CB               	smpsLoop            $00, $02, GentleBreeze_Loop11
000A9EB3 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A9EBF A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A9ECB 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A9ED7 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A9EE3 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A9EEF A039                       	dc.b	nG2, $39
000A9EF1 E0C0                       	smpsPan             panCenter, $00
000A9EF3 F6FF 85                    	smpsJump            GentleBreeze_Jump04
000A9EF6                            
000A9EF6                            ; FM3 Data
000A9EF6                            GentleBreeze_FM3:
000A9EF8 E0C0                       	smpsPan             panCenter, $00
000A9EFA 807F 7F7F 7F04             	dc.b	nRst, $7F, $7F, $7F, $7F, $04
000A9F02 E616                       	smpsAlterVol        $16
000A9F04 F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A9F09                            
000A9F09                            GentleBreeze_Loop0F:
000A9F09 C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A9F0D E1FF                       	smpsAlterNote       $FF
000A9F0F C4                         	dc.b	nG5
000A9F10 E100                       	smpsAlterNote       $00
000A9F12 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A9F17 E608                       	smpsAlterVol        $08
000A9F19 C080 08                    	dc.b	nEb5, nRst, $08
000A9F1C E6F8                       	smpsAlterVol        $F8
000A9F1E C7                         	dc.b	nBb5
000A9F1F E1FF                       	smpsAlterNote       $FF
000A9F21 C4                         	dc.b	nG5
000A9F22 E100                       	smpsAlterNote       $00
000A9F24 C0BB                       	dc.b	nEb5, nBb4
000A9F26 F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop0F
000A9F2B C0BD C9                    	dc.b	nEb5, nC5, nC6
000A9F2E E1FF                       	smpsAlterNote       $FF
000A9F30 C4                         	dc.b	nG5
000A9F31 E100                       	smpsAlterNote       $00
000A9F33 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A9F38 E608                       	smpsAlterVol        $08
000A9F3A C080 08                    	dc.b	nEb5, nRst, $08
000A9F3D E6F8                       	smpsAlterVol        $F8
000A9F3F E1FF                       	smpsAlterNote       $FF
000A9F41 C4                         	dc.b	nG5
000A9F42 E100                       	smpsAlterNote       $00
000A9F44 C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A9F4B E1FF                       	smpsAlterNote       $FF
000A9F4D C4                         	dc.b	nG5
000A9F4E E100                       	smpsAlterNote       $00
000A9F50 C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A9F55 E1FF                       	smpsAlterNote       $FF
000A9F57 C4                         	dc.b	nG5
000A9F58 E100                       	smpsAlterNote       $00
000A9F5A C7                         	dc.b	nBb5
000A9F5B E1FF                       	smpsAlterNote       $FF
000A9F5D C4                         	dc.b	nG5
000A9F5E E100                       	smpsAlterNote       $00
000A9F60 C2C0 01                    	dc.b	nF5, nEb5, $01
000A9F63                            
000A9F63                            GentleBreeze_Jump03:
000A9F63 E7C0 07BB 08               	dc.b	smpsNoAttack, nEb5, $07, nBb4, $08
000A9F6A E6FA                       	smpsAlterVol        $FA
000A9F6C F4                         	smpsModOff
000A9F6D E1FF                       	smpsAlterNote       $FF
000A9F6F B850                       	dc.b	nG4, $50
000A9F71 E100                       	smpsAlterNote       $00
000A9F73 B408 B1B4 B5B6 AF18 B510+  	dc.b	nEb4, $08, nC4, nEb4, nE4, nF4, nBb3, $18, nE4, $10, nF4, $08
000A9F7F E1FF                       	smpsAlterNote       $FF
000A9F81 B810                       	dc.b	nG4, $10
000A9F83 E100                       	smpsAlterNote       $00
000A9F85 BB18 B908 80               	dc.b	nBb4, $18, nAb4, $08, nRst
000A9F8A E1FF                       	smpsAlterNote       $FF
000A9F8C B8                         	dc.b	nG4
000A9F8D E100                       	smpsAlterNote       $00
000A9F8F B610                       	dc.b	nF4, $10
000A9F91 E1FF                       	smpsAlterNote       $FF
000A9F93 B850                       	dc.b	nG4, $50
000A9F95 E100                       	smpsAlterNote       $00
000A9F97 B608 B410 08B6 AF60        	dc.b	nF4, $08, nEb4, $10, $08, nF4, nBb3, $60
000A9F9F E1FF                       	smpsAlterNote       $FF
000A9FA1 AC08                       	dc.b	nG3, $08
000A9FA3 E100                       	smpsAlterNote       $00
000A9FA5 AFB3 B4B6 B7               	dc.b	nBb3, nD4, nEb4, nF4, nFs4
000A9FAA E1FF                       	smpsAlterNote       $FF
000A9FAC B850                       	dc.b	nG4, $50
000A9FAE E100                       	smpsAlterNote       $00
000A9FB0 BB08                       	dc.b	nBb4, $08
000A9FB2 E1FF                       	smpsAlterNote       $FF
000A9FB4 B8                         	dc.b	nG4
000A9FB5 E100                       	smpsAlterNote       $00
000A9FB7 BDBB B6                    	dc.b	nC5, nBb4, nF4
000A9FBA E1FF                       	smpsAlterNote       $FF
000A9FBC B810 08                    	dc.b	nG4, $10, $08
000A9FBF E100                       	smpsAlterNote       $00
000A9FC1 B6                         	dc.b	nF4
000A9FC2 E1FF                       	smpsAlterNote       $FF
000A9FC4 B880                       	dc.b	nG4, nRst
000A9FC6 E100                       	smpsAlterNote       $00
000A9FC8 BBB9 BB                    	dc.b	nBb4, nAb4, nBb4
000A9FCB E1FF                       	smpsAlterNote       $FF
000A9FCD B810                       	dc.b	nG4, $10
000A9FCF E100                       	smpsAlterNote       $00
000A9FD1 B308 B4B1 AFB4 B5          	dc.b	nD4, $08, nEb4, nC4, nBb3, nEb4, nE4
000A9FD8 E1FF                       	smpsAlterNote       $FF
000A9FDA B87F E77F E702 807F 7F7F+  	dc.b	nG4, $7F, smpsNoAttack, $7F, smpsNoAttack, $02, nRst, $7F, $7F, $7F, $7F, $04
000A9FE8 E606                       	smpsAlterVol        $06
000A9FEA F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A9FEF E100                       	smpsAlterNote       $00
000A9FF1                            
000A9FF1                            GentleBreeze_Loop10:
000A9FF1 C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A9FF5 E1FF                       	smpsAlterNote       $FF
000A9FF7 C4                         	dc.b	nG5
000A9FF8 E100                       	smpsAlterNote       $00
000A9FFA C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A9FFF E608                       	smpsAlterVol        $08
000AA001 C080 08                    	dc.b	nEb5, nRst, $08
000AA004 E6F8                       	smpsAlterVol        $F8
000AA006 C7                         	dc.b	nBb5
000AA007 E1FF                       	smpsAlterNote       $FF
000AA009 C4                         	dc.b	nG5
000AA00A E100                       	smpsAlterNote       $00
000AA00C C0BB                       	dc.b	nEb5, nBb4
000AA00E F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop10
000AA013 C0BD C9                    	dc.b	nEb5, nC5, nC6
000AA016 E1FF                       	smpsAlterNote       $FF
000AA018 C4                         	dc.b	nG5
000AA019 E100                       	smpsAlterNote       $00
000AA01B C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000AA020 E608                       	smpsAlterVol        $08
000AA022 C080 08                    	dc.b	nEb5, nRst, $08
000AA025 E6F8                       	smpsAlterVol        $F8
000AA027 E1FF                       	smpsAlterNote       $FF
000AA029 C4                         	dc.b	nG5
000AA02A E100                       	smpsAlterNote       $00
000AA02C C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000AA033 E1FF                       	smpsAlterNote       $FF
000AA035 C4                         	dc.b	nG5
000AA036 E100                       	smpsAlterNote       $00
000AA038 C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000AA03D E1FF                       	smpsAlterNote       $FF
000AA03F C4                         	dc.b	nG5
000AA040 E100                       	smpsAlterNote       $00
000AA042 C7                         	dc.b	nBb5
000AA043 E1FF                       	smpsAlterNote       $FF
000AA045 C4                         	dc.b	nG5
000AA046 E100                       	smpsAlterNote       $00
000AA048 C2C0 01                    	dc.b	nF5, nEb5, $01
000AA04B E0C0                       	smpsPan             panCenter, $00
000AA04D F1                         	smpsModOn
000AA04E F6FF 13                    	smpsJump            GentleBreeze_Jump03
000AA051                            
000AA051                            ; FM4 Data
000AA051                            GentleBreeze_FM4:
000AA053 E0C0                       	smpsPan             panCenter, $00
000AA055 80                         	dc.b	nRst
000AA056                            
000AA056                            GentleBreeze_Loop0D:
000AA056 7F                         	dc.b	$7F
000AA057 F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0D
000AA05C 77                         	dc.b	$77
000AA05F E609                       	smpsAlterVol        $09
000AA061 C001                       	dc.b	nEb5, $01
000AA063                            
000AA063                            GentleBreeze_Jump02:
000AA063 E7C0 07C2 08               	dc.b	smpsNoAttack, nEb5, $07, nF5, $08
000AA068 E607                       	smpsAlterVol        $07
000AA06A E1FF                       	smpsAlterNote       $FF
000AA06C C450                       	dc.b	nG5, $50
000AA06E E100                       	smpsAlterNote       $00
000AA070 C008 BDC0 C1C2 BB18 C110+  	dc.b	nEb5, $08, nC5, nEb5, nE5, nF5, nBb4, $18, nE5, $10, nF5, $08
000AA07C E1FF                       	smpsAlterNote       $FF
000AA07E C410                       	dc.b	nG5, $10
000AA080 E100                       	smpsAlterNote       $00
000AA082 C718 C508 80               	dc.b	nBb5, $18, nAb5, $08, nRst
000AA087 E1FF                       	smpsAlterNote       $FF
000AA089 C4                         	dc.b	nG5
000AA08A E100                       	smpsAlterNote       $00
000AA08C C210                       	dc.b	nF5, $10
000AA08E E1FF                       	smpsAlterNote       $FF
000AA090 C450                       	dc.b	nG5, $50
000AA092 E100                       	smpsAlterNote       $00
000AA094 C208 C010 08C2 BB60        	dc.b	nF5, $08, nEb5, $10, $08, nF5, nBb4, $60
000AA09C E1FF                       	smpsAlterNote       $FF
000AA09E B808                       	dc.b	nG4, $08
000AA0A0 E100                       	smpsAlterNote       $00
000AA0A2 BBBF C0C2 C3               	dc.b	nBb4, nD5, nEb5, nF5, nFs5
000AA0A7 E1FF                       	smpsAlterNote       $FF
000AA0A9 C450                       	dc.b	nG5, $50
000AA0AB E100                       	smpsAlterNote       $00
000AA0AD C708                       	dc.b	nBb5, $08
000AA0AF E1FF                       	smpsAlterNote       $FF
000AA0B1 C4                         	dc.b	nG5
000AA0B2 E100                       	smpsAlterNote       $00
000AA0B4 C9C7 C2                    	dc.b	nC6, nBb5, nF5
000AA0B7 E1FF                       	smpsAlterNote       $FF
000AA0B9 C410 08                    	dc.b	nG5, $10, $08
000AA0BC E100                       	smpsAlterNote       $00
000AA0BE C2                         	dc.b	nF5
000AA0BF E1FF                       	smpsAlterNote       $FF
000AA0C1 C480                       	dc.b	nG5, nRst
000AA0C3 E100                       	smpsAlterNote       $00
000AA0C5 C7C5 C7                    	dc.b	nBb5, nAb5, nBb5
000AA0C8 E1FF                       	smpsAlterNote       $FF
000AA0CA C410                       	dc.b	nG5, $10
000AA0CC E100                       	smpsAlterNote       $00
000AA0CE BF08 C0BD BBC0 C1          	dc.b	nD5, $08, nEb5, nC5, nBb4, nEb5, nE5
000AA0D5 E1FF                       	smpsAlterNote       $FF
000AA0D7 C47F E701 7FE7 0180        	dc.b	nG5, $7F, smpsNoAttack, $01, $7F, smpsNoAttack, $01, nRst
000AA0DF                            
000AA0DF                            GentleBreeze_Loop0E:
000AA0DF 7F                         	dc.b	$7F
000AA0E0 F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0E
000AA0E5 77                         	dc.b	$77
000AA0E6 E100                       	smpsAlterNote       $00
000AA0E8 C001                       	dc.b	nEb5, $01
000AA0EA E6F9                       	smpsAlterVol        $F9
000AA0EC E0C0                       	smpsPan             panCenter, $00
000AA0EE E100                       	smpsAlterNote       $00
000AA0F0 F6FF 71                    	smpsJump            GentleBreeze_Jump02
000AA0F3                            
000AA0F3                            ; FM5 Data
000AA0F3                            GentleBreeze_FM5:
000AA0F5 E0C0                       	smpsPan             panCenter, $00
000AA0F7 A5                         	dc.b	nC3
000AA0F8                            
000AA0F8                            GentleBreeze_Loop06:
000AA0F8 10                         	dc.b	$10
000AA0F9 E607                       	smpsAlterVol        $07
000AA0FB A5                         	dc.b	nC3
000AA0FC E6F9                       	smpsAlterVol        $F9
000AA0FE 08                         	dc.b	$08
000AA0FF E607                       	smpsAlterVol        $07
000AA101 A5                         	dc.b	nC3
000AA102 E608                       	smpsAlterVol        $08
000AA104 A5                         	dc.b	nC3
000AA105 E6F1                       	smpsAlterVol        $F1
000AA107 18                         	dc.b	$18
000AA108 E607                       	smpsAlterVol        $07
000AA10A 10                         	dc.b	$10
000AA10B E608                       	smpsAlterVol        $08
000AA10D A5                         	dc.b	nC3
000AA10E E6F1                       	smpsAlterVol        $F1
000AA110 A5                         	dc.b	nC3
000AA111 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop06
000AA116 A5                         	dc.b	nC3
000AA117                            
000AA117                            GentleBreeze_Loop07:
000AA117 E607                       	smpsAlterVol        $07
000AA119 A5                         	dc.b	nC3
000AA11A E6F9                       	smpsAlterVol        $F9
000AA11C 08                         	dc.b	$08
000AA11D E607                       	smpsAlterVol        $07
000AA11F A5                         	dc.b	nC3
000AA120 E608                       	smpsAlterVol        $08
000AA122 A5                         	dc.b	nC3
000AA123 E6F1                       	smpsAlterVol        $F1
000AA125 10                         	dc.b	$10
000AA126 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop07
000AA12B                            
000AA12B                            GentleBreeze_Loop08:
000AA12B A5                         	dc.b	nC3
000AA12C E607                       	smpsAlterVol        $07
000AA12E A5                         	dc.b	nC3
000AA12F E6F9                       	smpsAlterVol        $F9
000AA131 08                         	dc.b	$08
000AA132 E607                       	smpsAlterVol        $07
000AA134 A5                         	dc.b	nC3
000AA135 E608                       	smpsAlterVol        $08
000AA137 A5                         	dc.b	nC3
000AA138 E6F1                       	smpsAlterVol        $F1
000AA13A 18                         	dc.b	$18
000AA13B E607                       	smpsAlterVol        $07
000AA13D 10                         	dc.b	$10
000AA13E E608                       	smpsAlterVol        $08
000AA140 A5                         	dc.b	nC3
000AA141 E6F1                       	smpsAlterVol        $F1
000AA143 A5                         	dc.b	nC3
000AA144 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop08
000AA149 A5                         	dc.b	nC3
000AA14A E607                       	smpsAlterVol        $07
000AA14C A5                         	dc.b	nC3
000AA14D E6F9                       	smpsAlterVol        $F9
000AA14F 08                         	dc.b	$08
000AA150 E607                       	smpsAlterVol        $07
000AA152 A5                         	dc.b	nC3
000AA153 E608                       	smpsAlterVol        $08
000AA155 A5                         	dc.b	nC3
000AA156 E6F1                       	smpsAlterVol        $F1
000AA158 10                         	dc.b	$10
000AA159 E607                       	smpsAlterVol        $07
000AA15B A5                         	dc.b	nC3
000AA15C E6F9                       	smpsAlterVol        $F9
000AA15E 08                         	dc.b	$08
000AA15F E607                       	smpsAlterVol        $07
000AA161 A5                         	dc.b	nC3
000AA162 E608                       	smpsAlterVol        $08
000AA164 A5                         	dc.b	nC3
000AA165 E6F1                       	smpsAlterVol        $F1
000AA167 01                         	dc.b	$01
000AA168                            
000AA168                            GentleBreeze_Jump01:
000AA168 E7A5 0F                    	dc.b	smpsNoAttack, nC3, $0F
000AA16B E607                       	smpsAlterVol        $07
000AA16D                            
000AA16D                            GentleBreeze_Loop09:
000AA16D 10                         	dc.b	$10
000AA16E E608                       	smpsAlterVol        $08
000AA170 A5                         	dc.b	nC3
000AA171 E6F1                       	smpsAlterVol        $F1
000AA173 08                         	dc.b	$08
000AA174 E60F                       	smpsAlterVol        $0F
000AA176 18                         	dc.b	$18
000AA177 E6F8                       	smpsAlterVol        $F8
000AA179 F700 0FFF F0               	smpsLoop            $00, $0F, GentleBreeze_Loop09
000AA17E 10                         	dc.b	$10
000AA17F E608                       	smpsAlterVol        $08
000AA181 A5                         	dc.b	nC3
000AA182 E6F1                       	smpsAlterVol        $F1
000AA184 08                         	dc.b	$08
000AA185 E60F                       	smpsAlterVol        $0F
000AA187 18                         	dc.b	$18
000AA188 E6F1                       	smpsAlterVol        $F1
000AA18A                            
000AA18A                            GentleBreeze_Loop0A:
000AA18A 10                         	dc.b	$10
000AA18B E607                       	smpsAlterVol        $07
000AA18D A5                         	dc.b	nC3
000AA18E E6F9                       	smpsAlterVol        $F9
000AA190 08                         	dc.b	$08
000AA191 E607                       	smpsAlterVol        $07
000AA193 A5                         	dc.b	nC3
000AA194 E608                       	smpsAlterVol        $08
000AA196 A5                         	dc.b	nC3
000AA197 E6F1                       	smpsAlterVol        $F1
000AA199 18                         	dc.b	$18
000AA19A E607                       	smpsAlterVol        $07
000AA19C 10                         	dc.b	$10
000AA19D E608                       	smpsAlterVol        $08
000AA19F A5                         	dc.b	nC3
000AA1A0 E6F1                       	smpsAlterVol        $F1
000AA1A2 A5                         	dc.b	nC3
000AA1A3 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0A
000AA1A8 A5                         	dc.b	nC3
000AA1A9                            
000AA1A9                            GentleBreeze_Loop0B:
000AA1A9 E607                       	smpsAlterVol        $07
000AA1AB A5                         	dc.b	nC3
000AA1AC E6F9                       	smpsAlterVol        $F9
000AA1AE 08                         	dc.b	$08
000AA1AF E607                       	smpsAlterVol        $07
000AA1B1 A5                         	dc.b	nC3
000AA1B2 E608                       	smpsAlterVol        $08
000AA1B4 A5                         	dc.b	nC3
000AA1B5 E6F1                       	smpsAlterVol        $F1
000AA1B7 10                         	dc.b	$10
000AA1B8 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop0B
000AA1BD                            
000AA1BD                            GentleBreeze_Loop0C:
000AA1BD A5                         	dc.b	nC3
000AA1BE E607                       	smpsAlterVol        $07
000AA1C0 A5                         	dc.b	nC3
000AA1C1 E6F9                       	smpsAlterVol        $F9
000AA1C3 08                         	dc.b	$08
000AA1C4 E607                       	smpsAlterVol        $07
000AA1C6 A5                         	dc.b	nC3
000AA1C7 E608                       	smpsAlterVol        $08
000AA1C9 A5                         	dc.b	nC3
000AA1CA E6F1                       	smpsAlterVol        $F1
000AA1CC 18                         	dc.b	$18
000AA1CD E607                       	smpsAlterVol        $07
000AA1CF 10                         	dc.b	$10
000AA1D0 E608                       	smpsAlterVol        $08
000AA1D2 A5                         	dc.b	nC3
000AA1D3 E6F1                       	smpsAlterVol        $F1
000AA1D5 A5                         	dc.b	nC3
000AA1D6 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0C
000AA1DB A5                         	dc.b	nC3
000AA1DC E607                       	smpsAlterVol        $07
000AA1DE A5                         	dc.b	nC3
000AA1DF E6F9                       	smpsAlterVol        $F9
000AA1E1 08                         	dc.b	$08
000AA1E2 E607                       	smpsAlterVol        $07
000AA1E4 A5                         	dc.b	nC3
000AA1E5 E608                       	smpsAlterVol        $08
000AA1E7 A5                         	dc.b	nC3
000AA1E8 E6F1                       	smpsAlterVol        $F1
000AA1EA 10                         	dc.b	$10
000AA1EB E607                       	smpsAlterVol        $07
000AA1ED A5                         	dc.b	nC3
000AA1EE E6F9                       	smpsAlterVol        $F9
000AA1F0 08                         	dc.b	$08
000AA1F1 E607                       	smpsAlterVol        $07
000AA1F3 A5                         	dc.b	nC3
000AA1F4 E608                       	smpsAlterVol        $08
000AA1F6 A5                         	dc.b	nC3
000AA1F7 E6F1                       	smpsAlterVol        $F1
000AA1F9 01                         	dc.b	$01
000AA1FA E0C0                       	smpsPan             panCenter, $00
000AA1FC F6FF 6A                    	smpsJump            GentleBreeze_Jump01
000AA1FF                            
000AA1FF                            ; DAC Data
000AA1FF                            GentleBreeze_DAC:
000AA1FF 81                         	dc.b	dKick
000AA200                            
000AA200                            GentleBreeze_Loop00:
000AA200 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000AA206 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop00
000AA20B 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000AA216                            
000AA216                            GentleBreeze_Loop01:
000AA216 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000AA21C F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop01
000AA221 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000AA22B                            
000AA22B                            GentleBreeze_Jump00:
000AA22B 8007 8B08                  	dc.b	nRst, $07, dVLowTimpani, $08
000AA22F                            
000AA22F                            GentleBreeze_Loop02:
000AA22F 81                         	dc.b	dKick
000AA230                            
000AA230                            GentleBreeze_Loop03:
000AA230 1008 8182 2081 1008 8182+  	dc.b	$10, $08, dKick, dSnare, $20, dKick, $10, $08, dKick, dSnare, $10, dMidTimpani
000AA23C 088A                       	dc.b	$08, dLowTimpani
000AA23E F700 03FF ED               	smpsLoop            $00, $03, GentleBreeze_Loop02
000AA243 8110 0881 8210 8808 8982+  	dc.b	dKick, $10, $08, dKick, dSnare, $10, dHiTimpani, $08, dMidTimpani, dSnare, dLowTimpani, dVLowTimpani
000AA24F 1082 0881 18               	dc.b	$10, dSnare, $08, dKick, $18
000AA254 F701 02FF D8               	smpsLoop            $01, $02, GentleBreeze_Loop03
000AA259                            
000AA259                            GentleBreeze_Loop04:
000AA259 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000AA25F F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop04
000AA264 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000AA26F                            
000AA26F                            GentleBreeze_Loop05:
000AA26F 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000AA275 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop05
000AA27A 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000AA284 F6FF A5                    	smpsJump            GentleBreeze_Jump00
000AA287                            
000AA287                            ; PSG 1 Data
000AA287                            GentleBreeze_PSG1:
000AA287 80                         	dc.b	nRst
000AA288                            
000AA288                            GentleBreeze_LoopPSG02:
000AA288 7F                         	dc.b	$7F
000AA289 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG02
000AA28E 08                         	dc.b	$08
000AA28F EC04                       	smpsPSGAlterVol     $04
000AA291                            
000AA291                            GentleBreeze_JumpPSG01:
000AA291 A37F A07F 019E 7F7F 02A3+  	dc.b	nBb2, $7F, nG2, $7F, $01, nF2, $7F, $7F, $02, nBb2, $7F, $01
000AA29D A07F 019E 7F7F 0280        	dc.b	nG2, $7F, $01, nF2, $7F, $7F, $02, nRst
000AA2A5                            
000AA2A5                            GentleBreeze_LoopPSG03:
000AA2A5 7F                         	dc.b	$7F
000AA2A6 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG03
000AA2AB 08A3 01                    	dc.b	$08, nBb2, $01
000AA2AE F6FF E1                    	smpsJump            GentleBreeze_JumpPSG01
000AA2B1                            
000AA2B1                            ; PSG2 Data
000AA2B1                            GentleBreeze_PSG2:
000AA2B1 80                         	dc.b	nRst
000AA2B2                            
000AA2B2                            GentleBreeze_LoopPSG00:
000AA2B2 7F                         	dc.b	$7F
000AA2B3 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG00
000AA2B8 08                         	dc.b	$08
000AA2B9 EC04                       	smpsPSGAlterVol     $04
000AA2BB                            
000AA2BB                            GentleBreeze_JumpPSG00:
000AA2BB A87F A77F 01A5 7F7F 02A8+  	dc.b	nEb3, $7F, nD3, $7F, $01, nC3, $7F, $7F, $02, nEb3, $7F, $01
000AA2C7 A77F 01A5 7F7F 0280        	dc.b	nD3, $7F, $01, nC3, $7F, $7F, $02, nRst
000AA2CF                            
000AA2CF                            GentleBreeze_LoopPSG01:
000AA2CF 7F                         	dc.b	$7F
000AA2D0 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG01
000AA2D5 08A8 01                    	dc.b	$08, nEb3, $01
000AA2D8 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG00
000AA2DB                            
000AA2DB                            GentleBreeze_Voices:
000AA2DB                            ;	Voice $00
000AA2DB                            ;	$0C
000AA2DB                            ;	$2A, $70, $2A, $71, 	$1F, $1F, $1F, $1F, 	$0D, $04, $11, $0C
000AA2DB                            ;	$00, $00, $00, $01, 	$F3, $F4, $F1, $89, 	$7F, $7F, $18, $00
000AA2DB                            	smpsVcAlgorithm     $04
000AA2DB                            	smpsVcFeedback      $01
000AA2DB                            	smpsVcUnusedBits    $00
000AA2DB                            	smpsVcDetune        $07, $02, $07, $02
000AA2DB                            	smpsVcCoarseFreq    $01, $0A, $00, $0A
000AA2DB                            	smpsVcRateScale     $00, $00, $00, $00
000AA2DB                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AA2DB                            	smpsVcAmpMod        $00, $00, $00, $00
000AA2DB                            	smpsVcDecayRate1    $0C, $11, $04, $0D
000AA2DB                            	smpsVcDecayRate2    $01, $00, $00, $00
000AA2DB                            	smpsVcDecayLevel    $08, $0F, $0F, $0F
000AA2DB                            	smpsVcReleaseRate   $09, $01, $04, $03
000AA2DB 0C2A 702A 711F 1F1F 1F0D+  	smpsVcTotalLevel    $00, $18, $7F, $7F
000AA2F4                            
000AA2F4                            ;	Voice $01
000AA2F4                            ;	$38
000AA2F4                            ;	$54, $17, $70, $30, 	$9F, $1F, $9F, $1F, 	$12, $02, $0A, $0A
000AA2F4                            ;	$00, $10, $00, $00, 	$05, $05, $05, $08, 	$21, $35, $10, $00
000AA2F4                            	smpsVcAlgorithm     $00
000AA2F4                            	smpsVcFeedback      $07
000AA2F4                            	smpsVcUnusedBits    $00
000AA2F4                            	smpsVcDetune        $03, $07, $01, $05
000AA2F4                            	smpsVcCoarseFreq    $00, $00, $07, $04
000AA2F4                            	smpsVcRateScale     $00, $02, $00, $02
000AA2F4                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AA2F4                            	smpsVcAmpMod        $00, $00, $00, $00
000AA2F4                            	smpsVcDecayRate1    $0A, $0A, $02, $12
000AA2F4                            	smpsVcDecayRate2    $00, $00, $10, $00
000AA2F4                            	smpsVcDecayLevel    $00, $00, $00, $00
000AA2F4                            	smpsVcReleaseRate   $08, $05, $05, $05
000AA2F4 3854 1770 309F 1F9F 1F12+  	smpsVcTotalLevel    $00, $10, $35, $21
000AA30D                            
000AA30D                            ;	Voice $02
000AA30D                            ;	$00
000AA30D                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000AA30D                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000AA30D                            	smpsVcAlgorithm     $00
000AA30D                            	smpsVcFeedback      $00
000AA30D                            	smpsVcUnusedBits    $00
000AA30D                            	smpsVcDetune        $00, $00, $00, $00
000AA30D                            	smpsVcCoarseFreq    $00, $00, $00, $00
000AA30D                            	smpsVcRateScale     $00, $00, $00, $00
000AA30D                            	smpsVcAttackRate    $00, $00, $00, $00
000AA30D                            	smpsVcAmpMod        $00, $00, $00, $00
000AA30D                            	smpsVcDecayRate1    $00, $00, $00, $00
000AA30D                            	smpsVcDecayRate2    $00, $00, $00, $00
000AA30D                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000AA30D                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000AA30D 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000AA326                            
000AA326                            ;	Voice $03
000AA326                            ;	$36
000AA326                            ;	$0F, $0F, $08, $09, 	$16, $18, $00, $1F, 	$0F, $16, $0C, $0B
000AA326                            ;	$00, $12, $00, $00, 	$06, $2F, $4F, $4F, 	$00, $00, $65, $53
000AA326                            	smpsVcAlgorithm     $06
000AA326                            	smpsVcFeedback      $06
000AA326                            	smpsVcUnusedBits    $00
000AA326                            	smpsVcDetune        $00, $00, $00, $00
000AA326                            	smpsVcCoarseFreq    $09, $08, $0F, $0F
000AA326                            	smpsVcRateScale     $00, $00, $00, $00
000AA326                            	smpsVcAttackRate    $1F, $00, $18, $16
000AA326                            	smpsVcAmpMod        $00, $00, $00, $00
000AA326                            	smpsVcDecayRate1    $0B, $0C, $16, $0F
000AA326                            	smpsVcDecayRate2    $00, $00, $12, $00
000AA326                            	smpsVcDecayLevel    $04, $04, $02, $00
000AA326                            	smpsVcReleaseRate   $0F, $0F, $0F, $06
000AA326 360F 0F08 0916 1800 1F0F+  	smpsVcTotalLevel    $53, $65, $00, $00
000AA33F                            
000AA33F                            ;	Voice $04
000AA33F                            ;	$07
000AA33F                            ;	$05, $53, $64, $75, 	$5C, $5C, $5C, $1C, 	$17, $17, $17, $17
000AA33F                            ;	$00, $00, $00, $00, 	$26, $26, $26, $26, 	$00, $00, $00, $00
000AA33F                            	smpsVcAlgorithm     $07
000AA33F                            	smpsVcFeedback      $00
000AA33F                            	smpsVcUnusedBits    $00
000AA33F                            	smpsVcDetune        $07, $06, $05, $00
000AA33F                            	smpsVcCoarseFreq    $05, $04, $03, $05
000AA33F                            	smpsVcRateScale     $00, $01, $01, $01
000AA33F                            	smpsVcAttackRate    $1C, $1C, $1C, $1C
000AA33F                            	smpsVcAmpMod        $00, $00, $00, $00
000AA33F                            	smpsVcDecayRate1    $17, $17, $17, $17
000AA33F                            	smpsVcDecayRate2    $00, $00, $00, $00
000AA33F                            	smpsVcDecayLevel    $02, $02, $02, $02
000AA33F                            	smpsVcReleaseRate   $06, $06, $06, $06
000AA33F 0705 5364 755C 5C5C 1C17+  	smpsVcTotalLevel    $00, $00, $00, $00
000AA358                            
000AA358                            ;	Voice $05
000AA358                            ;	$3C
000AA358                            ;	$21, $21, $63, $61, 	$13, $10, $14, $0E, 	$09, $0B, $0B, $10
000AA358                            ;	$04, $04, $04, $04, 	$17, $17, $17, $27, 	$1C, $02, $1B, $00
000AA358                            	smpsVcAlgorithm     $04
000AA358                            	smpsVcFeedback      $07
000AA358                            	smpsVcUnusedBits    $00
000AA358                            	smpsVcDetune        $06, $06, $02, $02
000AA358                            	smpsVcCoarseFreq    $01, $03, $01, $01
000AA358                            	smpsVcRateScale     $00, $00, $00, $00
000AA358                            	smpsVcAttackRate    $0E, $14, $10, $13
000AA358                            	smpsVcAmpMod        $00, $00, $00, $00
000AA358                            	smpsVcDecayRate1    $10, $0B, $0B, $09
000AA358                            	smpsVcDecayRate2    $04, $04, $04, $04
000AA358                            	smpsVcDecayLevel    $02, $01, $01, $01
000AA358                            	smpsVcReleaseRate   $07, $07, $07, $07
000AA358 3C21 2163 6113 1014 0E09+  	smpsVcTotalLevel    $00, $1B, $02, $1C
000AA371                            
000AA371                            
000AA372 00                         		even
000AA372                            ; ---------------------------------------------------------------------------
000AA372                            ; Sound	effect pointers
000AA372                            ; ---------------------------------------------------------------------------
000AA372 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000AA37E 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000AA38A 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000AA396 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000AA3A2 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000AA3AE 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000AA3BA 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000AA3C6 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000AA3D2 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000AA3DE 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000AA3EA 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000AA3F6 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000AA402 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000AA40E 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000AA41A 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000AA426 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000AA432 0000 0000                  SoundD0Index:	dc.l SoundD0
000AA436                            SoundA0:	include	sound\jump.asm
000AA436                            jump_Header:
000AA436 =00000001                  smpsHeaderStartSong = 1
000AA436 0000                       	smpsHeaderVoice     jump_Voices
000AA438 01                         	smpsHeaderTempoSFX  $01
000AA439 01                         	smpsHeaderChanSFX   $01
000AA43A                            
000AA446                            
000AA446                            ; FM4 Data
000AA446                            jump_FM4:
000AA448 E000                       	smpsPan             panNone, $00
000AA44A E607                       	smpsAlterVol        $07
000AA44C E0C0                       	smpsPan             panCenter, $00
000AA44E 9903 B1                    	dc.b	nC2, $03, nC4
000AA451 E607                       	smpsAlterVol        $07
000AA453 E040                       	smpsPan             panRight, $00
000AA455 99B1                       	dc.b	nC2, nC4
000AA457 E60A                       	smpsAlterVol        $0A
000AA459 E080                       	smpsPan             panLeft, $00
000AA45B 99B1                       	dc.b	nC2, nC4
000AA45D E603                       	smpsAlterVol        $03
000AA45F E0C0                       	smpsPan             panCenter, $00
000AA461 99B1                       	dc.b	nC2, nC4
000AA463 E000                       	smpsPan             panNone, $00
000AA465 803D                       	dc.b	nRst, $3D
000AA467 F2                         	smpsStop
000AA468                            
000AA468                            ; PSG3 Data
000AA468                            jump_PSG3:
000AA468 F3E7                       	smpsPSGform         $E7
000AA46A 8056                       	dc.b	nRst, $56
000AA46C F2                         	smpsStop
000AA46D                            
000AA46D                            jump_Voices:
000AA46D                            ;	Voice $00
000AA46D                            ;	$3C
000AA46D                            ;	$00, $0F, $01, $00, 	$1F, $1F, $1F, $1F, 	$00, $12, $14, $0E
000AA46D                            ;	$00, $11, $00, $11, 	$0F, $EF, $FF, $0F, 	$00, $00, $00, $00
000AA46D                            	smpsVcAlgorithm     $04
000AA46D                            	smpsVcFeedback      $07
000AA46D                            	smpsVcUnusedBits    $00
000AA46D                            	smpsVcDetune        $00, $00, $00, $00
000AA46D                            	smpsVcCoarseFreq    $00, $01, $0F, $00
000AA46D                            	smpsVcRateScale     $00, $00, $00, $00
000AA46D                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AA46D                            	smpsVcAmpMod        $00, $00, $00, $00
000AA46D                            	smpsVcDecayRate1    $0E, $14, $12, $00
000AA46D                            	smpsVcDecayRate2    $11, $00, $11, $00
000AA46D                            	smpsVcDecayLevel    $00, $0F, $0E, $00
000AA46D                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000AA46D 3C00 0F01 001F 1F1F 1F00+  	smpsVcTotalLevel    $00, $00, $00, $00
000AA486                            
000AA486                            
000AA486                            		even
000AA486                            SoundA1:	incbin	sound\soundA1.bin
000AA4B0                            		even
000AA4B0                            SoundA2:	incbin	sound\soundA2.bin
000AA4D0                            		even
000AA4D0                            SoundA3:	incbin	sound\soundA3.bin
000AA502                            		even
000AA502                            SoundA4:	incbin	sound\soundA4.bin
000AA538                            		even
000AA538                            SoundA5:	include	sound\fart.asm
000AA538                            Fart_Header:
000AA538 =00000001                  smpsHeaderStartSong = 1
000AA538 0000                       	smpsHeaderVoice     Fart_Voices
000AA53A 01                         	smpsHeaderTempoSFX  $01
000AA53B 04                         	smpsHeaderChanSFX   $04
000AA53C                            
000AA554                            
000AA554                            Fart_FM3:
000AA556 E607                       	smpsAlterVol        $07
000AA558 E0C0                       	smpsPan             panCenter, $00
000AA55A F000 0210 03               	smpsModSet          $00, $02, $10, $03
000AA55F A003 E7                    	dc.b	nG2, $03, smpsNoAttack
000AA562 E1FE                       	smpsAlterNote       $FE
000AA564 A201 E7                    	dc.b	nA2, $01, smpsNoAttack
000AA567 E100                       	smpsAlterNote       $00
000AA569 A211 807F 2C               	dc.b	nA2, $11, nRst, $7F, $2C
000AA56E F2                         	smpsStop
000AA56F                            
000AA56F                            ; FM4 Data
000AA56F                            Fart_FM4:
000AA571 E0C0                       	smpsPan             panCenter, $00
000AA573 8006                       	dc.b	nRst, $06
000AA577 E616                       	smpsAlterVol        $16
000AA579 E080                       	smpsPan             panLeft, $00
000AA57B F000 0210 03               	smpsModSet          $00, $02, $10, $03
000AA580 A212                       	dc.b	nA2, $12
000AA582 E60A                       	smpsAlterVol        $0A
000AA584 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000AA587 E603                       	smpsAlterVol        $03
000AA589 E7A2                       	dc.b	smpsNoAttack, nA2
000AA58B E603                       	smpsAlterVol        $03
000AA58D E7A2                       	dc.b	smpsNoAttack, nA2
000AA58F E604                       	smpsAlterVol        $04
000AA591 E7A2                       	dc.b	smpsNoAttack, nA2
000AA593 E606                       	smpsAlterVol        $06
000AA595 E7A2 18                    	dc.b	smpsNoAttack, nA2, $18
000AA598 E610                       	smpsAlterVol        $10
000AA59A E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000AA59D E610                       	smpsAlterVol        $10
000AA59F E7A2 1280 42               	dc.b	smpsNoAttack, nA2, $12, nRst, $42
000AA5A4 F2                         	smpsStop
000AA5A5                            
000AA5A5                            ; FM5 Data
000AA5A5                            Fart_FM5:
000AA5A7 E0C0                       	smpsPan             panCenter, $00
000AA5A9 8009                       	dc.b	nRst, $09
000AA5AD E616                       	smpsAlterVol        $16
000AA5AF E040                       	smpsPan             panRight, $00
000AA5B1 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000AA5B6 A215                       	dc.b	nA2, $15
000AA5B8 E60A                       	smpsAlterVol        $0A
000AA5BA E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000AA5BD E603                       	smpsAlterVol        $03
000AA5BF E7A2                       	dc.b	smpsNoAttack, nA2
000AA5C1 E603                       	smpsAlterVol        $03
000AA5C3 E7A2                       	dc.b	smpsNoAttack, nA2
000AA5C5 E604                       	smpsAlterVol        $04
000AA5C7 E7A2                       	dc.b	smpsNoAttack, nA2
000AA5C9 E606                       	smpsAlterVol        $06
000AA5CB E7A2 15                    	dc.b	smpsNoAttack, nA2, $15
000AA5CE E610                       	smpsAlterVol        $10
000AA5D0 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000AA5D3 E610                       	smpsAlterVol        $10
000AA5D5 E7A2 1280 3F               	dc.b	smpsNoAttack, nA2, $12, nRst, $3F
000AA5DA F2                         	smpsStop
000AA5DB                            
000AA5DB                            ; PSG3 Data
000AA5DB                            Fart_PSG3:
000AA5DB F2                         	smpsStop
000AA5DC                            
000AA5DC                            ; FM Voices
000AA5DC                            Fart_Voices:
000AA5DC                            ;	Voice $00
000AA5DC                            ;	$39
000AA5DC                            ;	$70, $32, $71, $01, 	$DF, $DF, $DF, $1F, 	$04, $00, $00, $00
000AA5DC                            ;	$1F, $16, $00, $00, 	$E0, $00, $09, $FA, 	$12, $00, $00, $00
000AA5DC                            	smpsVcAlgorithm     $01
000AA5DC                            	smpsVcFeedback      $07
000AA5DC                            	smpsVcUnusedBits    $00
000AA5DC                            	smpsVcDetune        $00, $07, $03, $07
000AA5DC                            	smpsVcCoarseFreq    $01, $01, $02, $00
000AA5DC                            	smpsVcRateScale     $00, $03, $03, $03
000AA5DC                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AA5DC                            	smpsVcAmpMod        $00, $00, $00, $00
000AA5DC                            	smpsVcDecayRate1    $00, $00, $00, $04
000AA5DC                            	smpsVcDecayRate2    $00, $00, $16, $1F
000AA5DC                            	smpsVcDecayLevel    $0F, $00, $00, $0E
000AA5DC                            	smpsVcReleaseRate   $0A, $09, $00, $00
000AA5DC 3970 3271 01DF DFDF 1F04+  	smpsVcTotalLevel    $00, $00, $00, $12
000AA5F5                            
000AA5F5                            ;	Voice $01
000AA5F5                            ;	$00
000AA5F5                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000AA5F5                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000AA5F5                            	smpsVcAlgorithm     $00
000AA5F5                            	smpsVcFeedback      $00
000AA5F5                            	smpsVcUnusedBits    $00
000AA5F5                            	smpsVcDetune        $00, $00, $00, $00
000AA5F5                            	smpsVcCoarseFreq    $00, $00, $00, $00
000AA5F5                            	smpsVcRateScale     $00, $00, $00, $00
000AA5F5                            	smpsVcAttackRate    $00, $00, $00, $00
000AA5F5                            	smpsVcAmpMod        $00, $00, $00, $00
000AA5F5                            	smpsVcDecayRate1    $00, $00, $00, $00
000AA5F5                            	smpsVcDecayRate2    $00, $00, $00, $00
000AA5F5                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000AA5F5                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000AA5F5 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000AA5F5 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000AA60E                            		even
000AA60E                            SoundA6:	incbin	sound\soundA6.bin
000AA63E                            		even
000AA63E                            SoundA7:	incbin	sound\soundA7.bin
000AA66E                            		even
000AA66E                            SoundA8:	incbin	sound\soundA8.bin
000AA6A2                            		even
000AA6A2                            SoundA9:	incbin	sound\soundA9.bin
000AA6B4                            		even
000AA6B4                            SoundAA:	incbin	sound\soundAA.bin
000AA6F6                            		even
000AA6F6                            SoundAB:	incbin	sound\soundAB.bin
000AA716                            		even
000AA716                            SoundAC:	incbin	sound\soundAC.bin
000AA74A                            		even
000AA74A                            SoundAD:	incbin	sound\soundAD.bin
000AA780                            		even
000AA780                            SoundAE:	incbin	sound\soundAE.bin
000AA7CA                            		even
000AA7CA                            SoundAF:	incbin	sound\soundAF.bin
000AA7F8                            		even
000AA7F8                            SoundB0:	incbin	sound\soundB0.bin
000AA82A                            		even
000AA82A                            SoundB1:	incbin	sound\soundB1.bin
000AA856                            		even
000AA856                            SoundB2:	incbin	sound\soundB2.bin
000AA8A6                            		even
000AA8A6                            SoundB3:	incbin	sound\soundB3.bin
000AA8F0                            		even
000AA8F0                            SoundB4:	include	sound\soundB4.asm
000AA8F0                            SndB4_Bumper_Header:
000AA8F0 =00000001                  smpsHeaderStartSong = 1
000AA8F0 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
000AA8F2 01                         	smpsHeaderTempoSFX  $01
000AA8F3 03                         	smpsHeaderChanSFX   $03
000AA8F4                            
000AA906                            
000AA906                            ; FM5 Data
000AA906                            SndB4_Bumper_FM5:
000AA908 F600 00                    	smpsJump            SndB4_Bumper_Jump00
000AA90B                            
000AA90B                            ; FM4 Data
000AA90B                            SndB4_Bumper_FM4:
000AA90B F2                         	smpsStop
000AA90C                            
000AA90C                            SndB4_Bumper_Jump00:
000AA90C A020                       	dc.b	nG2, $20
000AA90E F2                         	smpsStop
000AA90F                            
000AA90F                            ; FM3 Data
000AA90F                            SndB4_Bumper_FM3:
000AA90F F2                         	smpsStop
000AA910                            
000AA910                            SndB4_Bumper_Voices:
000AA910                            ;	Voice $00
000AA910                            ;	$32
000AA910                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
000AA910                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
000AA910                            	smpsVcAlgorithm     $02
000AA910                            	smpsVcFeedback      $06
000AA910                            	smpsVcUnusedBits    $00
000AA910                            	smpsVcDetune        $07, $07, $02, $00
000AA910                            	smpsVcCoarseFreq    $00, $00, $00, $04
000AA910                            	smpsVcRateScale     $00, $00, $00, $00
000AA910                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AA910                            	smpsVcAmpMod        $00, $00, $00, $00
000AA910                            	smpsVcDecayRate1    $08, $00, $00, $09
000AA910                            	smpsVcDecayRate2    $0B, $00, $00, $09
000AA910                            	smpsVcDecayLevel    $00, $00, $00, $00
000AA910                            	smpsVcReleaseRate   $0F, $00, $00, $00
000AA910 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000AA910 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000AA92A 00                         		even
000AA92A                            SoundB5:	incbin	sound\soundB5.bin
000AA948 00                         		even
000AA948                            SoundB6:	incbin	sound\soundB6.bin
000AA966                            		even
000AA966                            SoundB7:	incbin	sound\soundB7.bin
000AA9A2                            		even
000AA9A2                            SoundB8:	incbin	sound\soundB8.bin
000AA9C0                            		even
000AA9C0                            SoundB9:	incbin	sound\soundB9.bin
000AAA24                            		even
000AAA24                            SoundBA:	incbin	sound\soundBA.bin
000AAA88                            		even
000AAA88                            SoundBB:	incbin	sound\soundBB.bin
000AAAB4                            		even
000AAAB4                            SoundBC:	incbin	sound\soundBC.bin
000AAAF6                            		even
000AAAF6                            SoundBD:	incbin	sound\soundBD.bin
000AAB4A                            		even
000AAB4A                            SoundBE:	incbin	sound\soundBE.bin
000AAB84                            		even
000AAB84                            SoundBF:	incbin	sound\soundBF.bin
000AABF6                            		even
000AABF6                            SoundC0:	incbin	sound\soundC0.bin
000AAC24                            		even
000AAC24                            SoundC1:	incbin	sound\soundC1.bin
000AAC7E                            		even
000AAC7E                            SoundC2:	incbin	sound\soundC2.bin
000AACA8                            		even
000AACA8                            SoundC3:	incbin	sound\soundC3.bin
000AAD22                            		even
000AAD22                            SoundC4:	incbin	sound\soundC4.bin
000AAE20                            		even
000AAE20                            SoundC5:	incbin	sound\soundC5.bin
000AAE88                            		even
000AAE88                            SoundC6:	incbin	sound\soundC6.bin
000AAECA                            		even
000AAECA                            SoundC7:	incbin	sound\soundC7.bin
000AAEF8                            		even
000AAEF8                            SoundC8:	incbin	sound\soundC8.bin
000AAF0A                            		even
000AAF0A                            SoundC9:	incbin	sound\soundC9.bin
000AAF38                            		even
000AAF38                            SoundCA:	incbin	sound\soundCA.bin
000AAF66                            		even
000AAF66                            SoundCB:	incbin	sound\soundCB.bin
000AAFB2                            		even
000AAFB2                            SoundCC:	incbin	sound\C9.ssf
000AAFE0                            		even
000AAFE0                            SoundCD:	incbin	sound\soundCD.bin
000AB00C                            		even
000AB00C                            SoundCE:	incbin	sound\soundCE.bin
000AB02A 00                         		even
000AB02A                            SoundCF:	incbin	sound\soundCF.bin
000AB062                            		even
000AB062                            SoundD0:	incbin	sound\soundD0.bin
000AB09C                            		even
000AB09C                            SegaPCM:	incbin	sound\segapcm.bin
00334C07                            SegaPCM_end:
00334C08 00                         	even
00334C08                            
00334C08                            IdiotPCM:	incbin	sound\youare.bin
0033ECD9                            IdiotPCM_end:
0033ECDA 00                         	even
0033ECDA                            
0033ECDA                            GM_AntiTMSS:	include _inc/GM_AntiTMSS.asm
0033ECDA                            ;GM_AntiTMSS:
0033ECDA 4EB8 150E                  		jsr	ClearScreen
0033ECDE                            
0033ECDE 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0033ECE8 41FA 0000                  		lea	@nem(pc),a0		; load Gomer patterns
0033ECEC 4EB8 168A                  		jsr	NemDec
0033ECF0 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
0033ECFA 41F9 0006 BAF0             		lea	(Nem_CreditText).l,a0	; load alphabet
0033ED00 4EB8 168A                  		jsr	NemDec
0033ED04 43F9 00FF 0000             		lea	($FF0000).l,a1
0033ED0A 41FA 0000                  		lea	@eni(pc),a0		; load mappings for Gomer credits
0033ED0E 7000                       		moveq	#0,d0
0033ED10 4EB8 1968                  		jsr	EniDec
0033ED14 43F9 00FF 0000             		lea	($FF0000).l,a1
0033ED1A 203C 4000 0003             		move.l	#$40000003,d0
0033ED20 7227                       		moveq	#$27,d1
0033ED22 741B                       		moveq	#$1B,d2
0033ED24 4EB8 166A                  		jsr	ShowVDPGraphics
0033ED28 41FA 0000                  		lea	@pal(pc),a0
0033ED2C 43F8 FB80                  		lea	($FFFFFB80).w,a1
0033ED30 701F                       		moveq	#$1F,d0
0033ED32                            @palset:
0033ED32 22D8                       		move.l	(a0)+,(a1)+
0033ED34 51C8 FFFC                  		dbf	d0,@palset
0033ED38                            
0033ED38 33FC 8C8B 00C0 0004        		move.w	#$8C8B,($C00004).l	; S/H mode, single res interlace
0033ED40 11FC 0000 F600             		move.b	#0,($FFFFF600).w	; make sure not to be assumed to be the title screen
0033ED46 31FC 000B FFF4             		move.w	#$B,($FFFFFFF4).w	; set frame
0033ED4C 41F8 D080                  		lea	($FFFFD080).w,a0
0033ED50 10BC 0001                  		move.b	#1,(a0)
0033ED54 4EB9 0001 7FB2             		jsr	Obj8A
0033ED5A 0068 E000 0002             		or.w	#$E000,2(a0)		; S/H brightness, palette 4
0033ED60 4EB9 0000 E2FC             		jsr	BuildSprites
0033ED66                            
0033ED66 3038 F60C                  		move.w	($FFFFF60C).w,d0
0033ED6A 0000 0040                  		ori.b	#$40,d0
0033ED6E 0880 0003                  		bclr	#3,d0
0033ED72 33C0 00C0 0004             		move.w	d0,($C00004).l
0033ED78 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w	; SMPS needs a frame to init
0033ED7E 4EB8 2D4E                  		jsr	DelayProgram
0033ED82 303C 0086                  		move.w	#$86,d0			; play title screen music
0033ED86 4EB8 15E0                  		jsr	PlaySound
0033ED8A                            
0033ED8A 4EB8 1FBE                  		jsr	Pal_FadeTo
0033ED8E 31FC 00B4 F614             		move.w	#180,($FFFFF614).w
0033ED94                            @mainloop:
0033ED94 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
0033ED9A 4EB8 2D4E                  		jsr	DelayProgram
0033ED9E 4A78 F614                  		tst.w	($FFFFF614).w		; if timer isn't up, loop
0033EDA2 66F0                       		bne.s	@mainloop
0033EDA4 303C 0080                  		move.w	#$80,d0			; if player is holding start, exit
0033EDA8 C038 F604                  		and.b	($FFFFF604).w,d0
0033EDAC 67E6                       		beq.s	@mainloop
0033EDAE 4E75                       		rts
0033EDB0                            @nem:	incbin artnem\tmss.bin
00340940                            	even
00340940                            @eni:	incbin mapeni\tmss.bin
00340A48                            	even
00340A48                            @pal:	incbin pallet\tmss.bin
00340AC8                            	even
00340AC8                            	even
00340AC8                            
00340AC8                            Minecraft:	include	minecraft\code\main.asm
00340AC8                            ; Minecraft: Very Legacy Console Edition
00340AC8                            ; Main file
00340AC8                            
00340AC8                            ;	align	$20000
00340AC8                            	opt	l.
00340AC8                            	include	"minecraft\code\variables.asm"
00340AC8                            ; Minecraft: Very Legacy Console Edition
00340AC8                            ; Variable Definitions
00340AC8                            
00340AC8 =00000040                  MAP_HEIGHT	equ	64
00340AC8 =00000100                  MAP_WIDTH	equ	256
00340AC8                            
00340AC8                            		rsset	$FF0000
00340AC8 =00FF0000                  mcRAM		rs.b	0
00340AC8 =00FF0000                  mapWallBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; wall layer layout data
00340AC8 =00FF4000                  mapCollBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; collision layer layout data
00340AC8                            
00340AC8                            		rsset	$FFFF8000
00340AC8 =FFFF8000                  planeBuffer	rs.w	29*64			; foreground plane buffer
00340AC8 =FFFF8E80                  planeBuffer_End	rs.b	0
00340AC8 =00000E80                  PLANE_BUFF_SIZE	equ	planeBuffer_End-planeBuffer
00340AC8                            
00340AC8 =FFFF8E80                  camXPosFG	rs.w	1			; camera foreground layout x position
00340AC8 =FFFF8E82                  camYposFG	rs.w	1			; camera foreground layout y position
00340AC8 =FFFF8E84                  camXPosBG	rs.w	1			; camera background layout x position
00340AC8 =FFFF8E86                  camYposBG	rs.w	1			; camera background layout y position
00340AC8                            
00340AC8                            		rsset	__rs&$FFFFFF
00340AC8 =00FF8E88                  mcRAM_End	rs.b	0
00340AC8 =00FF8E88                  mcRAM_End	rs.b	0
00340AC8                            	include	"minecraft\code\macros.asm"
00340AC8                            ; =========================================================================================================================================================
00340AC8                            ; MegaDrive macros
00340AC8                            ; =========================================================================================================================================================
00340AC8                            clrRAM		macro	starta, enda
00340AC8                            		local	endaddr
00340AC8                            		if narg<2
00340AC8                            endaddr			EQUS	"\starta\_End"
00340AC8                            		else
00340AC8                            endaddr			EQUS	"\enda"
00340AC8                            		endif
00340AC8                            
00340AC8                            		moveq	#0,d0
00340AC8                            
00340AC8                            		if ((\starta)&$8000)=0
00340AC8                            			lea	\starta,a1
00340AC8                            		else
00340AC8                            			lea	(\starta).w,a1
00340AC8                            		endif
00340AC8                            		if (\starta)&1
00340AC8                            			move.b	d0,(a1)+
00340AC8                            		endif
00340AC8                            
00340AC8                            		move.w	#(((\endaddr)-(\starta))-((\starta)&1))>>2-1,d1
00340AC8                            .Clear\@:	move.l	d0,(a1)+
00340AC8                            		dbf	d1,.Clear\@
00340AC8                            
00340AC8                            		if (((\endaddr)-(\starta))-((\starta)&1))&2
00340AC8                            			move.w	d0,(a1)+
00340AC8                            		endif
00340AC8                            		if (((\endaddr)-(\starta))-((\starta)&1))&1
00340AC8                            			move.b	d0,(a1)+
00340AC8                            		endif
00340AC8                            		endm
00340AC8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00340AC8                            ; Disable interrupts
00340AC8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00340AC8                            ; ARGUMENTS:
00340AC8                            ;	Nothing
00340AC8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00340AC8                            ; RETURNS:
00340AC8                            ;	Nothing
00340AC8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00340AC8                            intsOff		macros
00340AC8                            		ori	#$700,sr
00340AC8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00340AC8                            ; Enable interrupts
00340AC8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00340AC8                            ; ARGUMENTS:
00340AC8                            ;	Nothing
00340AC8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00340AC8                            ; RETURNS:
00340AC8                            ;	Nothing
00340AC8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00340AC8                            intsOn		macros
00340AC8                            		andi	#$F8FF,sr
00340AC8                            
00340AC8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00340AC8                            ; VDP command instruction
00340AC8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00340AC8                            ; ARGUMENTS:
00340AC8                            ;	addr	- Address in VDP memory
00340AC8                            ;	type	- Type of VDP memory
00340AC8                            ;	rwd	- VDP command
00340AC8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00340AC8                            ; RETURNS:
00340AC8                            ;	Nothing
00340AC8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00340AC8 =00000021                  VRAM		EQU	%100001		; VRAM
00340AC8 =0000002B                  CRAM		EQU	%101011		; CRAM
00340AC8 =00000025                  VSRAM		EQU	%100101		; VSRAM
00340AC8 =0000000C                  READ		EQU	%001100		; VDP read
00340AC8 =00000007                  WRITE		EQU	%000111		; VDP write
00340AC8 =00000027                  DMA		EQU	%100111		; VDP DMA
00340AC8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00340AC8                            vdpCmd		macro	ins, addr, type, rwd, end, end2
00340AC8                            		if narg=5
00340AC8                            			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14)), \end
00340AC8                            		elseif narg>=6
00340AC8                            			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))\end, \end2
00340AC8                            		else
00340AC8                            			\ins	((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))
00340AC8                            		endif
00340AC8                            		endm
00340AC8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00340AC8                            ; VDP DMA from 68000 memory to VDP memory
00340AC8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00340AC8                            ; ARGUMENTS:
00340AC8                            ;	src	- Source address in 68000 memory
00340AC8                            ;	dest	- Destination address in VDP memory
00340AC8                            ;	len	- Length of data in bytes
00340AC8                            ;	type	- Type of VDP memory
00340AC8                            ;	a6.l	- VDP control port
00340AC8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00340AC8                            ; RETURNS:
00340AC8                            ;	Nothing
00340AC8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00340AC8                            dma68k		macro	src, dest, len, type
00340AC8                            		move.l	#$94009300|((((\len)/2)&$FF00)<<8)|(((\len)/2)&$FF),(a6)
00340AC8                            		move.l	#$96009500|((((\src)/2)&$FF00)<<8)|(((\src)/2)&$FF),(a6)
00340AC8                            		move.w	#$9700|(((\src)>>17)&$7F),(a6)
00340AC8                            		vdpCmd	move.w, \dest, \type, DMA, >>16, (a6)
00340AC8                            		vdpCmd	move.w, \dest, \type, DMA, &$FFFF, -(sp)
00340AC8                            		move.w	(sp)+,(a6)
00340AC8                            		endm
00340AC8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00340AC8                            ; Fill VRAM with byte
00340AC8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00340AC8                            ; ARGUMENTS:
00340AC8                            ;	byte	- Byte to fill VRAM with
00340AC8                            ;	addr	- Address in VRAM
00340AC8                            ;	len	- Length of fill in bytes
00340AC8                            ;	a6.l	- VDP control port
00340AC8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00340AC8                            ; RETURNS:
00340AC8                            ;	Nothing
00340AC8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00340AC8                            dmaFill		macro	byte, addr, len
00340AC8                            		move.w	#$8F01,(a6)
00340AC8                            		move.l	#$94009300|((((\len)-1)&$FF00)<<8)|(((\len)-1)&$FF),(a6)
00340AC8                            		move.w	#$9780,(a6)
00340AC8                            		move.l	#$40000080|(((\addr)&$3FFF)<<16)|(((\addr)&$C000)>>14),(a6)
00340AC8                            		move.w	#(\byte)<<8,-4(a6)
00340AC8                            		waitDMA	(a6)
00340AC8                            		move.w	#$8F02,(a6)
00340AC8                            		endm
00340AC8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00340AC8                            ; Copy a region of VRAM to a location in VRAM
00340AC8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00340AC8                            ; ARGUMENTS:
00340AC8                            ;	src	- Source address in VRAM
00340AC8                            ;	dest	- Destination address in VRAM
00340AC8                            ;	len	- Length of copy in bytes
00340AC8                            ;	a6.l	- VDP control port
00340AC8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00340AC8                            ; RETURNS:
00340AC8                            ;	Nothing
00340AC8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00340AC8                            dmaCopy		macro	src, dest, len
00340AC8                            		move.w	#$8F01,(a6)
00340AC8                            		move.l	#$94009300|((((\len)-1)&$FF00)<<8)|(((\len)-1)&$FF),(a6)
00340AC8                            		move.l	#$96009500|(((\src)&$FF00)<<8)|((\src)&$FF),(a6)
00340AC8                            		move.w	#$97C0,(a6)
00340AC8                            		move.l	#$000000C0|(((\dest)&$3FFF)<<16)|(((\dest)&$C000)>>14),(a6)
00340AC8                            		waitDMA	(a6)
00340AC8                            		move.w	#$8F02,(a6)
00340AC8                            		endm
00340AC8                            		endm
00340AC8                            
00340AC8                            MC_Init:
00340AC8 007C 0700                  		intsOff						; disable CPU interrupts
00340ACC 21FC 0000 0000 FFC6        		move.l	#MC_VInt,(vBlankAdress).w
00340AD4                            
00340AD4 4DF9 00C0 0004             		lea	($C00004).l,a6				; load the address of the VDP control port into a6
00340ADA 3CBC 8134                  		move.w	#$8134,(a6)				; disable display
00340ADE                            
00340ADE 3CBC 8230                  		move.w	#$8200+($C000>>10),(a6)			; set plane A address
00340AE2 3CBC 8334                  		move.w	#$8300+($D000>>10),(a6)			; set plane W address
00340AE6 3CBC 8407                  		move.w	#$8400+($E000>>13),(a6)			; set plane B address
00340AEA 3CBC 857C                  		move.w	#$8500+($F800>>9),(a6)			; set sprite table address
00340AEE                            		
00340AEE 3CBC 8B00                  		move.w	#$8B00,(a6)				; EXT-INT off, VScroll by screen, HScroll by screen
00340AF2 3CBC 8C89                  		move.w	#$8C89,(a6)				; set screen size and enable shadow/highlight mode
00340AF6 3CBC 8D3F                  		move.w	#$8D00+($FC00>>10),(a6)			; set HScroll table address
00340AFA 3CBC 8F02                  		move.w	#$8F02,(a6)				; set auto-incremement size to word
00340AFE 3CBC 9001                  		move.w	#$9001,(a6)				; set plane size 64x32
00340B02                            
00340B14 6100 0000                  		bsr.w	MC_ClearScreen				; clear VRAM, CRAM, and VSRAM
00340B18                            
00340B18                            .waitVBlank:	
00340B18 44D6                       		move.w	(a6),ccr				; is v-blank active?
00340B1A 6AFC                       		bpl.s	.waitVBlank				; if not, wait for it to start
00340B1C                            
00340B50                            
00340B50 3CBC 8174                  		move.w	#$8174,(a6)				; enable display
00340B54 027C F8FF                  		intsOn						; enable CPU interrupts
00340B58                            
00340B58 41FA 0000                  		lea	MC_BlockRender(pc),a0
00340B5C 43F8 8000                  		lea	(planeBuffer).w,a1
00340B60 7E2E                       		moveq	#$2F-1,d7
00340B62                            
00340B62                            .loopLo:
00340B62 32D8                       		move.w	(a0)+,(a1)+
00340B64 51CF FFFC                  		dbf	d7,.loopLo
00340B68                            
00340B68 41FA 0000                  		lea	MC_BlockRender(pc),a0
00340B6C 43F8 8080                  		lea	(planeBuffer+(64*2)).w,a1
00340B70 7E2E                       		moveq	#$2F-1,d7
00340B72                            
00340B72                            .loopHi:
00340B72 303C 8000                  		move.w	#$8000,d0
00340B76 8058                       		or.w	(a0)+,d0
00340B78 32C0                       		move.w	d0,(a1)+
00340B7A 51CF FFF6                  		dbf	d7,.loopHi
00340B7E                            
00340B7E 6000 FFFE                  		bra.w	*					; spin infinitely
00340B82                            
00340B82                            ; ===========================================================================
00340B82                            ; ---------------------------------------------------------------------------
00340B82                            ; Clear The Screen
00340B82                            ; ---------------------------------------------------------------------------
00340B82                            MC_ClearScreen:
00340B82 3CBC 8F01                  		move.w	#$8F01,(a6)				; set auto-incremement size to byte
00340B86                            
00340B86 2CBC 94FF 93FF             		move.l	#$94FF93FF,(a6)				; clear the VRAM
00340B8C 3CBC 9780                  		move.w	#$9780,(a6)				; ^
00340B90 2CBC 4000 0080             		move.l	#$40000080,(a6)				; ^
00340B96 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
00340B9C                            
00340B9C 44D6                       .waitVRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
00340B9E 69FC                       		bvs.s	.waitVRAMClr				; if so, loop until DMA is complete
00340BA0                            
00340BA0 2CBC 9400 937F             		move.l	#$9400937F,(a6)				; clear the CRAM
00340BA6 3CBC 9780                  		move.w	#$9780,(a6)				; ^
00340BAA 2CBC C000 0080             		move.l	#$C0000080,(a6)				; ^
00340BB0 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
00340BB6                            
00340BB6 44D6                       .waitCRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
00340BB8 69FC                       		bvs.s	.waitCRAMClr				; if so, loop until DMA is complete
00340BBA                            
00340BBA 2CBC 9400 935F             		move.l	#$9400935F,(a6)				; clear the VSRAM
00340BC0 3CBC 9780                  		move.w	#$9780,(a6)				; ^
00340BC4 2CBC 4000 0090             		move.l	#$40000090,(a6)				; ^
00340BCA 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
00340BD0                            
00340BD0 44D6                       .waitVSRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
00340BD2 69FC                       		bvs.s	.waitVSRAMClr				; if so, loop until DMA is complete
00340BD4                            
00340BD4 3CBC 8F02                  		move.w	#$8F02,(a6)				; set auto-incremement size to word
00340BD8 4E75                       		rts						; return
00340BDA                            ; ---------------------------------------------------------------------------
00340BDA                            
00340BDA                            ; ===========================================================================
00340BDA                            ; ---------------------------------------------------------------------------
00340BDA                            ; VBlank Interrupt
00340BDA                            ; ---------------------------------------------------------------------------
00340BDA                            MC_VInt:
00340BF4                            
00340BF4 5278 8E80                  		addq.w	#1,(camXPosFG).w			; update scrolling
00340BFE 3D78 8E80 FFFC             		move.w	(camXPosFG).w,-4(a6)			; ^
00340C04                            
00340C04                            
00340C04 4E73                       		rte						; return
00340C06                            ; ---------------------------------------------------------------------------
00340C06                            
00340C06                            block_entry	macro	tileID, palLine, priority
00340C06                            	if (narg<3)
00340C06                            		dc.w	(palLine<<13)|tileID
00340C06                            	else
00340C06                            		dc.w	$8000|(palLine<<13)|tileID
00340C06                            	endif
00340C06                            		endm
00340C06                            
00340C06                            MC_BlockRender:
00340C46                            
00340C64                            
00340C64                            ; ---------------------------------------------------------------------------
00340C64                            MC_Palette:
00340C64 0E86 08AE 068E 046C 0EE0+  	dc.w	$E86, $8AE, $68E, $46C, $EE0, $CC0, $AA0, $E68, $C46, $824, $444, $222, $000, $EEE, $246, $024
00340C84 0000 0CCC 0AAA 0888 0666+  	dc.w	$000, $CCC, $AAA, $888, $666, $444, $222, $4E6, $2C4, $0A2, $080, $6AE, $48C, $26A, $048, $026
00340CA4 0000 0EEE 0CCC 0AAA 04CE+  	dc.w	$000, $EEE, $CCC, $AAA, $4CE, $2AC, $08A, $E6C, $C4A, $A08, $44E, $22C, $00A, $EE0, $888, $666
00340CC4 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
00340CE4                            ; ---------------------------------------------------------------------------
00340CE4                            MC_Terrain:
00340CE4                            	incbin	"minecraft\assets\bin\terrain.bin"
00341164                            MC_Terrain_End:
00341164                            ; ---------------------------------------------------------------------------
00341164                            ; ---------------------------------------------------------------------------
00341164                            ; end of 'ROM'
00341164                            EndOfRom:
00341164                            
00341164                            
