00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            
00000000                            ; NOTES FOR ANYONE MAKING CHARACTERS
00000000 =FFFFFFE8                  v_character = $FFFFFFE8
00000000                            ; pointers for:
00000000                            ; PLAYER MAPPINGS -> Player_Maps
00000000                            ; PLAYER ANIM SCRIPTS -> Player_Anim
00000000                            ; PLAYER ART -> Player_Art
00000000                            ; PLAYER DPLC -> Player_DPLC
00000000                            ; PLAYER PALETTE -> Player_Palette
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2943 4144 4520 4341+  Date:		dc.b '(C)CADE CADE C  ' ; Release date
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            loc_32C:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bcc.s	loc_32C
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            
00000348                            loc_348:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,loc_348
0000034E 1039 00A1 0001             		move.b	($A10001).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            
00000370                            GameClrRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000376 6100 0000                  		bsr.w	VDPSetupGame
0000037A 6100 0000                  		bsr.w	SoundDriverLoad
0000037E 6100 0000                  		bsr.w	JoypadInit
00000382 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000388                            
00000388                            MainGameLoop:
00000388 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000038C 0240 001C                  		andi.w	#$1C,d0
00000390 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000394 60F2                       		bra.s	MainGameLoop
00000396                            ; ===========================================================================
00000396                            ; ---------------------------------------------------------------------------
00000396                            ; Main game mode array
00000396                            ; ---------------------------------------------------------------------------
00000396                            
00000396                            GameModeArray:
00000396 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000039A                            ; ===========================================================================
0000039A 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
0000039E                            ; ===========================================================================
0000039E 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003A2                            ; ===========================================================================
000003A2 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003A6                            ; ===========================================================================
000003A6 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003AA                            ; ===========================================================================
000003AA 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003AE                            ; ===========================================================================
000003AE 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003B2                            ; ===========================================================================
000003B2 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003B6                            ; ===========================================================================
000003B6 4E75                       		rts	
000003B8                            ; ===========================================================================
000003B8                            
000003B8                            CheckSumError:
000003B8 6100 0000                  		bsr.w	VDPSetupGame
000003BC 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003C6 7E3F                       		moveq	#$3F,d7
000003C8                            
000003C8                            CheckSum_Red:
000003C8 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003D0 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003D4                            
000003D4                            CheckSum_Loop:
000003D4 60FE                       		bra.s	CheckSum_Loop
000003D6                            ; ===========================================================================
000003D6                            
000003D6                            BusError:
000003D6 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003DC 6000                       		bra.s	loc_43A
000003DE                            ; ===========================================================================
000003DE                            
000003DE                            AddressError:
000003DE 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003E4 6000                       		bra.s	loc_43A
000003E6                            ; ===========================================================================
000003E6                            
000003E6                            IllegalInstr:
000003E6 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
000003EC 54AF 0002                  		addq.l	#2,2(sp)
000003F0 6000                       		bra.s	loc_462
000003F2                            ; ===========================================================================
000003F2                            
000003F2                            ZeroDivide:
000003F2 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
000003F8 6000                       		bra.s	loc_462
000003FA                            ; ===========================================================================
000003FA                            
000003FA                            ChkInstr:
000003FA 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000400 6000                       		bra.s	loc_462
00000402                            ; ===========================================================================
00000402                            
00000402                            TrapvInstr:
00000402 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
00000408 6000                       		bra.s	loc_462
0000040A                            ; ===========================================================================
0000040A                            
0000040A                            PrivilegeViol:
0000040A 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000410 6000                       		bra.s	loc_462
00000412                            ; ===========================================================================
00000412                            
00000412                            Trace:
00000412 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
00000418 6000                       		bra.s	loc_462
0000041A                            ; ===========================================================================
0000041A                            
0000041A                            Line1010Emu:
0000041A 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000420 54AF 0002                  		addq.l	#2,2(sp)
00000424 6000                       		bra.s	loc_462
00000426                            ; ===========================================================================
00000426                            
00000426                            Line1111Emu:
00000426 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
0000042C 54AF 0002                  		addq.l	#2,2(sp)
00000430 6000                       		bra.s	loc_462
00000432                            ; ===========================================================================
00000432                            
00000432                            ErrorExcept:
00000432 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
00000438 6000                       		bra.s	loc_462
0000043A                            ; ===========================================================================
0000043A                            
0000043A                            loc_43A:
0000043A 46FC 2700                  		move	#$2700,sr
0000043E 544F                       		addq.w	#2,sp
00000440 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000444 544F                       		addq.w	#2,sp
00000446 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000044C 6100 0000                  		bsr.w	ShowErrorMsg
00000450 202F 0002                  		move.l	2(sp),d0
00000454 6100 0000                  		bsr.w	sub_5BA
00000458 2038 FC40                  		move.l	($FFFFFC40).w,d0
0000045C 6100 0000                  		bsr.w	sub_5BA
00000460 6000                       		bra.s	loc_478
00000462                            ; ===========================================================================
00000462                            
00000462                            loc_462:
00000462 46FC 2700                  		move	#$2700,sr
00000466 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000046C 6100 0000                  		bsr.w	ShowErrorMsg
00000470 202F 0002                  		move.l	2(sp),d0
00000474 6100 0000                  		bsr.w	sub_5BA
00000478                            
00000478                            loc_478:
00000478 6100 0000                  		bsr.w	ErrorWaitForC
0000047C 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000482 46FC 2300                  		move	#$2300,sr
00000486 4E73                       		rte	
00000488                            
00000488                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000488                            
00000488                            
00000488                            ShowErrorMsg:				; XREF: loc_43A; loc_462
00000488 4DF9 00C0 0000             		lea	($C00000).l,a6
0000048E 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
00000498 41F9 0000 0000             		lea	(Art_Text).l,a0
0000049E 323C 027F                  		move.w	#$27F,d1
000004A2                            
000004A2                            Error_LoadGfx:
000004A2 3C98                       		move.w	(a0)+,(a6)
000004A4 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004A8 7000                       		moveq	#0,d0		; clear	d0
000004AA 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004AE 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004B2 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004B6 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004C0 7212                       		moveq	#$12,d1		; number of characters
000004C2                            
000004C2                            Error_LoopChars:
000004C2 7000                       		moveq	#0,d0
000004C4 1018                       		move.b	(a0)+,d0
000004C6 0640 0790                  		addi.w	#$790,d0
000004CA 3C80                       		move.w	d0,(a6)
000004CC 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004D0 4E75                       		rts	
000004D2                            ; End of function ShowErrorMsg
000004D2                            
000004D2                            ; ===========================================================================
000004D2 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004D6 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004DA 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004DE 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004E2 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004E6 0000                       		dc.w asc_5A6-ErrorText
000004E8 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
000004FB 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
0000050E 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000521 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000534 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
00000547 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000055A 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
0000056D 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000580 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000593 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005A6 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005BA 00                         		even
000005BA                            
000005BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005BA                            
000005BA                            
000005BA                            sub_5BA:				; XREF: loc_43A; loc_462
000005BA 3CBC 07CA                  		move.w	#$7CA,(a6)
000005BE 7407                       		moveq	#7,d2
000005C0                            
000005C0                            loc_5C0:
000005C0 E998                       		rol.l	#4,d0
000005C2 6100                       		bsr.s	sub_5CA
000005C4 51CA FFFA                  		dbf	d2,loc_5C0
000005C8 4E75                       		rts	
000005CA                            ; End of function sub_5BA
000005CA                            
000005CA                            
000005CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005CA                            
000005CA                            
000005CA                            sub_5CA:				; XREF: sub_5BA
000005CA 3200                       		move.w	d0,d1
000005CC 0241 000F                  		andi.w	#$F,d1
000005D0 0C41 000A                  		cmpi.w	#$A,d1
000005D4 6500                       		bcs.s	loc_5D8
000005D6 5E41                       		addq.w	#7,d1
000005D8                            
000005D8                            loc_5D8:
000005D8 0641 07C0                  		addi.w	#$7C0,d1
000005DC 3C81                       		move.w	d1,(a6)
000005DE 4E75                       		rts	
000005E0                            ; End of function sub_5CA
000005E0                            
000005E0                            
000005E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E0                            
000005E0                            
000005E0                            ErrorWaitForC:				; XREF: loc_478
000005E0 6100 0000                  		bsr.w	ReadJoypads
000005E4 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000005EA 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005EE 4E75                       		rts	
000005F0                            ; End of function ErrorWaitForC
000005F0                            
000005F0                            ; ===========================================================================
000005F0                            
000005F0                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D30                            Art_Text_end:		even
00000D30                            
00000D30                            ; ===========================================================================
00000D30                            ;VBlank
00000D30                            loc_B10:				; XREF: Vectors
00000D30 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000D34 4A38 F62A                  		tst.b	($FFFFF62A).w
00000D38 6700                       		beq.s	loc_B88
00000D3A 3039 00C0 0004             		move.w	($C00004).l,d0
00000D40 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000D4A 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000D52 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000D58 6700                       		beq.s	loc_B42
00000D5A 303C 0700                  		move.w	#$700,d0
00000D5E                            
00000D5E                            loc_B3E:
00000D5E 51C8 FFFE                  		dbf	d0,loc_B3E
00000D62                            
00000D62                            loc_B42:
00000D62 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000D66 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000D6C 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000D72 0240 003E                  		andi.w	#$3E,d0
00000D76 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000D7A 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000D7E                            
00000D7E                            loc_B5E:				; XREF: loc_B88
00000D7E 4EB9 0000 0000             		jsr	sub_71B4C
00000D84                            
00000D84                            loc_B64:				; XREF: loc_D50
00000D84 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000D88 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000D8C 4E73                       		rte	
00000D8E                            ; ===========================================================================
00000D8E 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000D92 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000D96 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000D9A 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000D9E 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000DA2 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000DA6 0000                       		dc.w loc_E72-off_B6E
00000DA8                            ; ===========================================================================
00000DA8                            
00000DA8                            loc_B88:				; XREF: loc_B10; off_B6E
00000DA8 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000DAE 6700                       		beq.s	loc_B9A
00000DB0 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000DB6 6600 FFC6                  		bne.w	loc_B5E
00000DBA                            
00000DBA                            loc_B9A:
00000DBA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000DC0 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000DC4 3039 00C0 0004             		move.w	($C00004).l,d0
00000DCA 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000DD0 6700                       		beq.s	loc_BBA
00000DD2 303C 0700                  		move.w	#$700,d0
00000DD6                            
00000DD6                            loc_BB6:
00000DD6 51C8 FFFE                  		dbf	d0,loc_BB6
00000DDA                            
00000DDA                            loc_BBA:
00000DDA 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000DE0 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000DE8                            
00000DE8                            loc_BC8:
00000DE8 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000DF0 66F6                       		bne.s	loc_BC8
00000DF2 4A38 F64E                  		tst.b	($FFFFF64E).w
00000DF6 6600                       		bne.s	loc_BFE
00000DF8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DFE 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E04 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E0A 3ABC 977F                  		move.w	#$977F,(a5)
00000E0E 3ABC C000                  		move.w	#$C000,(a5)
00000E12 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E18 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E1C 6000                       		bra.s	loc_C22
00000E1E                            ; ===========================================================================
00000E1E                            
00000E1E                            loc_BFE:				; XREF: loc_BC8
00000E1E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E24 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E2A 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E30 3ABC 977F                  		move.w	#$977F,(a5)
00000E34 3ABC C000                  		move.w	#$C000,(a5)
00000E38 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E3E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E42                            
00000E42                            loc_C22:				; XREF: loc_BC8
00000E42 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E46 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E4E 6000 FF2E                  		bra.w	loc_B5E
00000E52                            ; ===========================================================================
00000E52                            
00000E52                            loc_C32:				; XREF: off_B6E
00000E52 6100 0000                  		bsr.w	sub_106E
00000E56                            
00000E56                            loc_C36:				; XREF: off_B6E
00000E56 4A78 F614                  		tst.w	($FFFFF614).w
00000E5A 6700 0000                  		beq.w	locret_C42
00000E5E 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E62                            
00000E62                            locret_C42:
00000E62 4E75                       		rts	
00000E64                            ; ===========================================================================
00000E64                            
00000E64                            loc_C44:				; XREF: off_B6E
00000E64 6100 0000                  		bsr.w	sub_106E
00000E68 6100 0000                  		bsr.w	sub_6886
00000E6C 6100 0000                  		bsr.w	sub_1642
00000E70 4A78 F614                  		tst.w	($FFFFF614).w
00000E74 6700 0000                  		beq.w	locret_C5C
00000E78 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E7C                            
00000E7C                            locret_C5C:
00000E7C 4E75                       		rts	
00000E7E                            ; ===========================================================================
00000E7E                            
00000E7E                            loc_C5E:				; XREF: off_B6E
00000E7E 6100 0000                  		bsr.w	sub_106E
00000E82 4E75                       		rts	
00000E84                            ; ===========================================================================
00000E84                            
00000E84                            loc_C64:				; XREF: off_B6E
00000E84 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000E8A 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000E8E                            
00000E8E                            loc_C6E:				; XREF: off_B6E
00000E8E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E96                            
00000E96                            loc_C76:
00000E96 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000E9E 66F6                       		bne.s	loc_C76		; if not, branch
00000EA0 6100 0000                  		bsr.w	ReadJoypads
00000EA4 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EA8 6600                       		bne.s	loc_CB0
00000EAA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EB0 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EB6 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EBC 3ABC 977F                  		move.w	#$977F,(a5)
00000EC0 3ABC C000                  		move.w	#$C000,(a5)
00000EC4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000ECA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000ECE 6000                       		bra.s	loc_CD4
00000ED0                            ; ===========================================================================
00000ED0                            
00000ED0                            loc_CB0:				; XREF: loc_C76
00000ED0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000ED6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EDC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EE2 3ABC 977F                  		move.w	#$977F,(a5)
00000EE6 3ABC C000                  		move.w	#$C000,(a5)
00000EEA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EF0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EF4                            
00000EF4                            loc_CD4:				; XREF: loc_C76
00000EF4 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EF8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EFE 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F04 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F0A 3ABC 977F                  		move.w	#$977F,(a5)
00000F0E 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F12 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F18 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F1C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F22 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F28 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F2E 3ABC 977F                  		move.w	#$977F,(a5)
00000F32 3ABC 7800                  		move.w	#$7800,(a5)
00000F36 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F3C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F40 4A38 F767                  		tst.b	($FFFFF767).w
00000F44 6700                       		beq.s	loc_D50
00000F46 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F4C 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F52 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F58 3ABC 977F                  		move.w	#$977F,(a5)
00000F5C 3ABC 7000                  		move.w	#$7000,(a5)
00000F60 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F66 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F6A 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F70                            
00000F70                            loc_D50:
00000F70 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000F78 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F7E 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F84 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F8A 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F90 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000F96 6400                       		bcc.s	Demo_Time
00000F98 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000F9E 588F                       		addq.l	#4,sp
00000FA0 6000 FDE2                  		bra.w	loc_B64
00000FA4                            
00000FA4                            ; ---------------------------------------------------------------------------
00000FA4                            ; Subroutine to	run a demo for an amount of time
00000FA4                            ; ---------------------------------------------------------------------------
00000FA4                            
00000FA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FA4                            
00000FA4                            
00000FA4                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000FA4 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000FA8 4EB9 0000 0000             		jsr	AniArt_Load
00000FAE 4EB9 0000 0000             		jsr	HudUpdate
00000FB4 6100 0000                  		bsr.w	sub_165E
00000FB8 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000FBC 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000FC0 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000FC4                            
00000FC4                            Demo_TimeEnd:
00000FC4 4E75                       		rts	
00000FC6                            ; End of function Demo_Time
00000FC6                            
00000FC6                            ; ===========================================================================
00000FC6                            
00000FC6                            loc_DA6:				; XREF: off_B6E
00000FC6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FCE                            
00000FCE                            loc_DAE:
00000FCE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FD6 66F6                       		bne.s	loc_DAE		; if not, branch
00000FD8 6100 0000                  		bsr.w	ReadJoypads
00000FDC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FE2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FE8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FEE 3ABC 977F                  		move.w	#$977F,(a5)
00000FF2 3ABC C000                  		move.w	#$C000,(a5)
00000FF6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000FFC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001000 4BF9 00C0 0004             		lea	($C00004).l,a5
00001006 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000100C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001012 3ABC 977F                  		move.w	#$977F,(a5)
00001016 3ABC 7800                  		move.w	#$7800,(a5)
0000101A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001020 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001024 4BF9 00C0 0004             		lea	($C00004).l,a5
0000102A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001030 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001036 3ABC 977F                  		move.w	#$977F,(a5)
0000103A 3ABC 7C00                  		move.w	#$7C00,(a5)
0000103E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001044 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001048 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00001050 6100 0000                  		bsr.w	PalCycle_SS
00001054 4A38 F767                  		tst.b	($FFFFF767).w
00001058 6700                       		beq.s	loc_E64
0000105A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001060 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001066 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000106C 3ABC 977F                  		move.w	#$977F,(a5)
00001070 3ABC 7000                  		move.w	#$7000,(a5)
00001074 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000107A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000107E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001084                            
00001084                            loc_E64:
00001084 4A78 F614                  		tst.w	($FFFFF614).w
00001088 6700 0000                  		beq.w	locret_E70
0000108C 5378 F614                  		subq.w	#1,($FFFFF614).w
00001090                            
00001090                            locret_E70:
00001090 4E75                       		rts	
00001092                            ; ===========================================================================
00001092                            
00001092                            loc_E72:				; XREF: off_B6E
00001092 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000109A                            
0000109A                            loc_E7A:
0000109A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000010A2 66F6                       		bne.s	loc_E7A		; if not, branch
000010A4 6100 0000                  		bsr.w	ReadJoypads
000010A8 4A38 F64E                  		tst.b	($FFFFF64E).w
000010AC 6600                       		bne.s	loc_EB4
000010AE 4BF9 00C0 0004             		lea	($C00004).l,a5
000010B4 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010BA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000010C0 3ABC 977F                  		move.w	#$977F,(a5)
000010C4 3ABC C000                  		move.w	#$C000,(a5)
000010C8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010CE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010D2 6000                       		bra.s	loc_ED8
000010D4                            ; ===========================================================================
000010D4                            
000010D4                            loc_EB4:				; XREF: loc_E7A
000010D4 4BF9 00C0 0004             		lea	($C00004).l,a5
000010DA 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010E0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010E6 3ABC 977F                  		move.w	#$977F,(a5)
000010EA 3ABC C000                  		move.w	#$C000,(a5)
000010EE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010F4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010F8                            
000010F8                            loc_ED8:				; XREF: loc_E7A
000010F8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000010FC 4BF9 00C0 0004             		lea	($C00004).l,a5
00001102 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001108 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000110E                            
0000110E                            loc_EEE:
0000110E 3ABC 977F                  		move.w	#$977F,(a5)
00001112 3ABC 7C00                  		move.w	#$7C00,(a5)
00001116 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000111C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001120 4BF9 00C0 0004             		lea	($C00004).l,a5
00001126 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000112C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001132 3ABC 977F                  		move.w	#$977F,(a5)
00001136 3ABC 7800                  		move.w	#$7800,(a5)
0000113A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001140 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001144 4A38 F767                  		tst.b	($FFFFF767).w
00001148 6700                       		beq.s	loc_F54
0000114A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001150 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001156 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000115C 3ABC 977F                  		move.w	#$977F,(a5)
00001160 3ABC 7000                  		move.w	#$7000,(a5)
00001164 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000116A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000116E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001174                            
00001174                            loc_F54:
00001174 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000117C 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00001182 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00001188 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
0000118E 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00001194 6100 0000                  		bsr.w	LoadTilesAsYouMove
00001198 4EB9 0000 0000             		jsr	AniArt_Load
0000119E 4EB9 0000 0000             		jsr	HudUpdate
000011A4 6100 0000                  		bsr.w	sub_1642
000011A8 4E75                       		rts	
000011AA                            ; ===========================================================================
000011AA                            
000011AA                            loc_F8A:				; XREF: off_B6E
000011AA 6100 0000                  		bsr.w	sub_106E
000011AE 5238 F628                  		addq.b	#1,($FFFFF628).w
000011B2 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
000011B8 4E75                       		rts	
000011BA                            ; ===========================================================================
000011BA                            
000011BA                            loc_F9A:				; XREF: off_B6E
000011BA 6100 0000                  		bsr.w	sub_106E
000011BE 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000011C2 6000 0000                  		bra.w	sub_1642
000011C6                            ; ===========================================================================
000011C6                            
000011C6                            loc_FA6:				; XREF: off_B6E
000011C6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011CE                            
000011CE                            loc_FAE:
000011CE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000011D6 66F6                       		bne.s	loc_FAE		; if not, branch
000011D8 6100 0000                  		bsr.w	ReadJoypads
000011DC 4BF9 00C0 0004             		lea	($C00004).l,a5
000011E2 2ABC 9400 9340             		move.l	#$94009340,(a5)
000011E8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000011EE 3ABC 977F                  		move.w	#$977F,(a5)
000011F2 3ABC C000                  		move.w	#$C000,(a5)
000011F6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000011FC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001200 4BF9 00C0 0004             		lea	($C00004).l,a5
00001206 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000120C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001212 3ABC 977F                  		move.w	#$977F,(a5)
00001216 3ABC 7800                  		move.w	#$7800,(a5)
0000121A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001220 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001224 4BF9 00C0 0004             		lea	($C00004).l,a5
0000122A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001230 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001236 3ABC 977F                  		move.w	#$977F,(a5)
0000123A 3ABC 7C00                  		move.w	#$7C00,(a5)
0000123E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001244 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001248 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001250 4A38 F767                  		tst.b	($FFFFF767).w
00001254 6700                       		beq.s	loc_1060
00001256 4BF9 00C0 0004             		lea	($C00004).l,a5
0000125C 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001262 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001268 3ABC 977F                  		move.w	#$977F,(a5)
0000126C 3ABC 7000                  		move.w	#$7000,(a5)
00001270 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001276 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000127A 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001280                            
00001280                            loc_1060:
00001280 4A78 F614                  		tst.w	($FFFFF614).w
00001284 6700 0000                  		beq.w	locret_106C
00001288 5378 F614                  		subq.w	#1,($FFFFF614).w
0000128C                            
0000128C                            locret_106C:
0000128C 4E75                       		rts	
0000128E                            
0000128E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000128E                            
0000128E                            
0000128E                            sub_106E:				; XREF: loc_C32; et al
0000128E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001296                            
00001296                            loc_1076:
00001296 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
0000129E 66F6                       		bne.s	loc_1076	; if not, branch
000012A0 6100 0000                  		bsr.w	ReadJoypads
000012A4 4A38 F64E                  		tst.b	($FFFFF64E).w
000012A8 6600                       		bne.s	loc_10B0
000012AA 4BF9 00C0 0004             		lea	($C00004).l,a5
000012B0 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012B6 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000012BC 3ABC 977F                  		move.w	#$977F,(a5)
000012C0 3ABC C000                  		move.w	#$C000,(a5)
000012C4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012CA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012CE 6000                       		bra.s	loc_10D4
000012D0                            ; ===========================================================================
000012D0                            
000012D0                            loc_10B0:				; XREF: sub_106E
000012D0 4BF9 00C0 0004             		lea	($C00004).l,a5
000012D6 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012DC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000012E2 3ABC 977F                  		move.w	#$977F,(a5)
000012E6 3ABC C000                  		move.w	#$C000,(a5)
000012EA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012F0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012F4                            
000012F4                            loc_10D4:				; XREF: sub_106E
000012F4 4BF9 00C0 0004             		lea	($C00004).l,a5
000012FA 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001300 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001306 3ABC 977F                  		move.w	#$977F,(a5)
0000130A 3ABC 7800                  		move.w	#$7800,(a5)
0000130E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001314 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001318 4BF9 00C0 0004             		lea	($C00004).l,a5
0000131E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001324 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000132A 3ABC 977F                  		move.w	#$977F,(a5)
0000132E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001332 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001338 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000133C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001344 4E75                       		rts	
00001346                            ; End of function sub_106E
00001346                            
00001346                            ; ---------------------------------------------------------------------------
00001346                            ; Subroutine to	move pallets from the RAM to CRAM
00001346                            ; ---------------------------------------------------------------------------
00001346                            
00001346                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001346                            
00001346                            
00001346                            PalToCRAM:
00001346 46FC 2700                  		move	#$2700,sr
0000134A 4A78 F644                  		tst.w	($FFFFF644).w
0000134E 6700                       		beq.s	locret_119C
00001350 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00001356 48E7 00C0                  		movem.l	a0-a1,-(sp)
0000135A 43F9 00C0 0000             		lea	($C00000).l,a1
00001360 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001364 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
0000136C 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
0000136E 2298                       		move.l	(a0)+,(a1)
00001370 2298                       		move.l	(a0)+,(a1)
00001372 2298                       		move.l	(a0)+,(a1)
00001374 2298                       		move.l	(a0)+,(a1)
00001376 2298                       		move.l	(a0)+,(a1)
00001378 2298                       		move.l	(a0)+,(a1)
0000137A 2298                       		move.l	(a0)+,(a1)
0000137C 2298                       		move.l	(a0)+,(a1)
0000137E 2298                       		move.l	(a0)+,(a1)
00001380 2298                       		move.l	(a0)+,(a1)
00001382 2298                       		move.l	(a0)+,(a1)
00001384 2298                       		move.l	(a0)+,(a1)
00001386 2298                       		move.l	(a0)+,(a1)
00001388 2298                       		move.l	(a0)+,(a1)
0000138A 2298                       		move.l	(a0)+,(a1)
0000138C 2298                       		move.l	(a0)+,(a1)
0000138E 2298                       		move.l	(a0)+,(a1)
00001390 2298                       		move.l	(a0)+,(a1)
00001392 2298                       		move.l	(a0)+,(a1)
00001394 2298                       		move.l	(a0)+,(a1)
00001396 2298                       		move.l	(a0)+,(a1)
00001398 2298                       		move.l	(a0)+,(a1)
0000139A 2298                       		move.l	(a0)+,(a1)
0000139C 2298                       		move.l	(a0)+,(a1)
0000139E 2298                       		move.l	(a0)+,(a1)
000013A0 2298                       		move.l	(a0)+,(a1)
000013A2 2298                       		move.l	(a0)+,(a1)
000013A4 2298                       		move.l	(a0)+,(a1)
000013A6 2298                       		move.l	(a0)+,(a1)
000013A8 2298                       		move.l	(a0)+,(a1)
000013AA 2298                       		move.l	(a0)+,(a1)
000013AC 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
000013B2 4CDF 0300                  		movem.l	(sp)+,a0-a1
000013B6 4A38 F64F                  		tst.b	($FFFFF64F).w
000013BA 6600                       		bne.s	loc_119E
000013BC                            
000013BC                            locret_119C:
000013BC 4E73                       		rte	
000013BE                            ; ===========================================================================
000013BE                            
000013BE                            loc_119E:				; XREF: PalToCRAM
000013BE 4238 F64F                  		clr.b	($FFFFF64F).w
000013C2 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000013C6 6100 FBDC                  		bsr.w	Demo_Time
000013CA 4EB9 0000 0000             		jsr	sub_71B4C
000013D0 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000013D4 4E73                       		rte	
000013D6                            ; End of function PalToCRAM
000013D6                            
000013D6                            ; ---------------------------------------------------------------------------
000013D6                            ; Subroutine to	initialise joypads
000013D6                            ; ---------------------------------------------------------------------------
000013D6                            
000013D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013D6                            
000013D6                            
000013D6                            JoypadInit:				; XREF: GameClrRAM
000013D6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000013DE                            
000013DE                            Joypad_WaitZ80:
000013DE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000013E6 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000013E8 7040                       		moveq	#$40,d0
000013EA 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000013F0 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000013F6 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
000013FC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001404 4E75                       		rts	
00001406                            ; End of function JoypadInit
00001406                            
00001406                            ; ---------------------------------------------------------------------------
00001406                            ; Subroutine to	read joypad input, and send it to the RAM
00001406                            ; ---------------------------------------------------------------------------
00001406                            
00001406                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001406                            
00001406                            
00001406                            ReadJoypads:
00001406 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
0000140A 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00001410 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001412 5449                       		addq.w	#2,a1		; do the second	joypad
00001414                            
00001414                            Joypad_Read:
00001414 12BC 0000                  		move.b	#0,(a1)
00001418 4E71                       		nop	
0000141A 4E71                       		nop	
0000141C 1011                       		move.b	(a1),d0
0000141E E508                       		lsl.b	#2,d0
00001420 0200 00C0                  		andi.b	#$C0,d0
00001424 12BC 0040                  		move.b	#$40,(a1)
00001428 4E71                       		nop	
0000142A 4E71                       		nop	
0000142C 1211                       		move.b	(a1),d1
0000142E 0201 003F                  		andi.b	#$3F,d1
00001432 8001                       		or.b	d1,d0
00001434 4600                       		not.b	d0
00001436 1210                       		move.b	(a0),d1
00001438 B101                       		eor.b	d0,d1
0000143A 10C0                       		move.b	d0,(a0)+
0000143C C200                       		and.b	d0,d1
0000143E 10C1                       		move.b	d1,(a0)+
00001440 4E75                       		rts	
00001442                            ; End of function ReadJoypads
00001442                            
00001442                            
00001442                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001442                            
00001442                            
00001442                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001442 41F9 00C0 0004             		lea	($C00004).l,a0
00001448 43F9 00C0 0000             		lea	($C00000).l,a1
0000144E 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001454 7E12                       		moveq	#$12,d7
00001456                            
00001456                            VDP_Loop:
00001456 309A                       		move.w	(a2)+,(a0)
00001458 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
0000145C                            
0000145C 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001462 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001466 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000146C 7000                       		moveq	#0,d0
0000146E 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001478 3E3C 003F                  		move.w	#$3F,d7
0000147C                            
0000147C                            VDP_ClrCRAM:
0000147C 3280                       		move.w	d0,(a1)
0000147E 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001482                            
00001482 42B8 F616                  		clr.l	($FFFFF616).w
00001486 42B8 F61A                  		clr.l	($FFFFF61A).w
0000148A 2F01                       		move.l	d1,-(sp)
0000148C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001492 3ABC 8F01                  		move.w	#$8F01,(a5)
00001496 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
0000149C 3ABC 9780                  		move.w	#$9780,(a5)
000014A0 2ABC 4000 0080             		move.l	#$40000080,(a5)
000014A6 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000014AE                            
000014AE                            loc_128E:
000014AE 3215                       		move.w	(a5),d1
000014B0 0801 0001                  		btst	#1,d1
000014B4 66F8                       		bne.s	loc_128E
000014B6                            
000014B6 3ABC 8F02                  		move.w	#$8F02,(a5)
000014BA 221F                       		move.l	(sp)+,d1
000014BC 4E75                       		rts	
000014BE                            ; End of function VDPSetupGame
000014BE                            
000014BE                            ; ===========================================================================
000014BE 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000014C6 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000014CE 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000014D6 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000014DE 9001 9100 9200             		dc.w $9001, $9100, $9200
000014E4                            
000014E4                            ; ---------------------------------------------------------------------------
000014E4                            ; Subroutine to	clear the screen
000014E4                            ; ---------------------------------------------------------------------------
000014E4                            
000014E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014E4                            
000014E4                            
000014E4                            ClearScreen:
000014E4 4BF9 00C0 0004             		lea	($C00004).l,a5
000014EA 3ABC 8F01                  		move.w	#$8F01,(a5)
000014EE 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000014F4 3ABC 9780                  		move.w	#$9780,(a5)
000014F8 2ABC 4000 0083             		move.l	#$40000083,(a5)
000014FE 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001506                            
00001506                            loc_12E6:
00001506 3215                       		move.w	(a5),d1
00001508 0801 0001                  		btst	#1,d1
0000150C 66F8                       		bne.s	loc_12E6
0000150E                            
0000150E 3ABC 8F02                  		move.w	#$8F02,(a5)
00001512 4BF9 00C0 0004             		lea	($C00004).l,a5
00001518 3ABC 8F01                  		move.w	#$8F01,(a5)
0000151C 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001522 3ABC 9780                  		move.w	#$9780,(a5)
00001526 2ABC 6000 0083             		move.l	#$60000083,(a5)
0000152C 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001534                            
00001534                            loc_1314:
00001534 3215                       		move.w	(a5),d1
00001536 0801 0001                  		btst	#1,d1
0000153A 66F8                       		bne.s	loc_1314
0000153C                            
0000153C 3ABC 8F02                  		move.w	#$8F02,(a5)
00001540 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001548 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001550 43F8 F800                  		lea	($FFFFF800).w,a1
00001554 7000                       		moveq	#0,d0
00001556 323C 00A0                  		move.w	#$A0,d1
0000155A                            
0000155A                            loc_133A:
0000155A 22C0                       		move.l	d0,(a1)+
0000155C 51C9 FFFC                  		dbf	d1,loc_133A
00001560                            
00001560 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001564 7000                       		moveq	#0,d0
00001566 323C 0100                  		move.w	#$100,d1
0000156A                            
0000156A                            loc_134A:
0000156A 22C0                       		move.l	d0,(a1)+
0000156C 51C9 FFFC                  		dbf	d1,loc_134A
00001570 4E75                       		rts	
00001572                            ; End of function ClearScreen
00001572                            
00001572                            ; ---------------------------------------------------------------------------
00001572                            ; Subroutine to	load the sound driver
00001572                            ; ---------------------------------------------------------------------------
00001572                            
00001572                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001572                            
00001572                            
00001572                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001572 4E71                       		nop	
00001574 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000157C 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001584 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000158A 43F9 00A0 0000             		lea	($A00000).l,a1
00001590 6100 0000                  		bsr.w	KosDec		; decompress
00001594 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
0000159C 4E71                       		nop	
0000159E 4E71                       		nop	
000015A0 4E71                       		nop	
000015A2 4E71                       		nop	
000015A4 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
000015AC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000015B4 4E75                       		rts	
000015B6                            ; End of function SoundDriverLoad
000015B6                            
000015B6                            ; ---------------------------------------------------------------------------
000015B6                            ; Subroutine to	play a sound or	music track
000015B6                            ; ---------------------------------------------------------------------------
000015B6                            
000015B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015B6                            
000015B6                            
000015B6                            PlaySound:
000015B6 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000015BA 4E75                       		rts	
000015BC                            ; End of function PlaySound
000015BC                            
000015BC                            ; ---------------------------------------------------------------------------
000015BC                            ; Subroutine to	play a special sound/music (E0-E4)
000015BC                            ;
000015BC                            ; E0 - Fade out
000015BC                            ; E1 - Sega
000015BC                            ; E2 - Speed up
000015BC                            ; E3 - Normal speed
000015BC                            ; E4 - Stop
000015BC                            ; ---------------------------------------------------------------------------
000015BC                            
000015BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015BC                            
000015BC                            
000015BC                            PlaySound_Special:
000015BC 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000015C0 4E75                       		rts	
000015C2                            ; End of function PlaySound_Special
000015C2                            
000015C2                            ; ===========================================================================
000015C2                            ; ---------------------------------------------------------------------------
000015C2                            ; Unused sound/music subroutine
000015C2                            ; ---------------------------------------------------------------------------
000015C2                            
000015C2                            PlaySound_Unk:
000015C2 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000015C6 4E75                       		rts	
000015C8                            
000015C8                            ; ---------------------------------------------------------------------------
000015C8                            ; Subroutine to	pause the game
000015C8                            ; ---------------------------------------------------------------------------
000015C8                            
000015C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015C8                            
000015C8                            
000015C8                            PauseGame:				; XREF: Level_MainLoop; et al
000015C8 4E71                       		nop	
000015CA 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000015CE 6700                       		beq.s	Unpause		; if not, branch
000015D0 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000015D4 6600                       		bne.s	loc_13BE	; if yes, branch
000015D6 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000015DC 6700                       		beq.s	Pause_DoNothing	; if not, branch
000015DE                            
000015DE                            loc_13BE:
000015DE 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000015E4 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000015EA                            
000015EA                            loc_13CA:
000015EA 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000015F0 6100 0000                  		bsr.w	DelayProgram
000015F4 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000015F8 6700                       		beq.s	Pause_ChkStart	; if not, branch
000015FA 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001600 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001602 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
00001608 4E71                       		nop	
0000160A 6000                       		bra.s	loc_1404
0000160C                            ; ===========================================================================
0000160C                            
0000160C                            Pause_ChkBC:				; XREF: PauseGame
0000160C 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001612 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001614 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0000161A 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000161C                            
0000161C                            Pause_ChkStart:				; XREF: PauseGame
0000161C 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001622 67C6                       		beq.s	loc_13CA	; if not, branch
00001624                            
00001624                            loc_1404:				; XREF: PauseGame
00001624 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000162A                            
0000162A                            Unpause:				; XREF: PauseGame
0000162A 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001630                            
00001630                            Pause_DoNothing:			; XREF: PauseGame
00001630 4E75                       		rts	
00001632                            ; ===========================================================================
00001632                            
00001632                            Pause_SlowMo:				; XREF: PauseGame
00001632 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001638 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000163E 4E75                       		rts	
00001640                            ; End of function PauseGame
00001640                            
00001640                            ; ---------------------------------------------------------------------------
00001640                            ; Subroutine to	display	patterns via the VDP
00001640                            ; ---------------------------------------------------------------------------
00001640                            
00001640                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001640                            
00001640                            
00001640                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001640 4DF9 00C0 0000             		lea	($C00000).l,a6
00001646 283C 0080 0000             		move.l	#$800000,d4
0000164C                            
0000164C                            loc_142C:
0000164C 2D40 0004                  		move.l	d0,4(a6)
00001650 3601                       		move.w	d1,d3
00001652                            
00001652                            loc_1432:
00001652 3C99                       		move.w	(a1)+,(a6)
00001654 51CB FFFC                  		dbf	d3,loc_1432
00001658 D084                       		add.l	d4,d0
0000165A 51CA FFF0                  		dbf	d2,loc_142C
0000165E 4E75                       		rts	
00001660                            ; End of function ShowVDPGraphics
00001660                            
00001660                            ; ---------------------------------------------------------------------------
00001660                            ; Nemesis decompression	algorithm
00001660                            ; ---------------------------------------------------------------------------
00001660                            
00001660                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001660                            
00001660                            
00001660                            NemDec:
00001660 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001664 47F9 0000 0000             		lea	(loc_1502).l,a3
0000166A 49F9 00C0 0000             		lea	($C00000).l,a4
00001670 6000                       		bra.s	loc_145C
00001672                            ; ===========================================================================
00001672 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001676 47F9 0000 0000             		lea	(loc_1518).l,a3
0000167C                            
0000167C                            loc_145C:				; XREF: NemDec
0000167C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001680 3418                       		move.w	(a0)+,d2
00001682 E34A                       		lsl.w	#1,d2
00001684 6400                       		bcc.s	loc_146A
00001686 D6FC 000A                  		adda.w	#$A,a3
0000168A                            
0000168A                            loc_146A:
0000168A E54A                       		lsl.w	#2,d2
0000168C 3A42                       		movea.w	d2,a5
0000168E 7608                       		moveq	#8,d3
00001690 7400                       		moveq	#0,d2
00001692 7800                       		moveq	#0,d4
00001694 6100 0000                  		bsr.w	NemDec4
00001698 1A18                       		move.b	(a0)+,d5
0000169A E145                       		asl.w	#8,d5
0000169C 1A18                       		move.b	(a0)+,d5
0000169E 3C3C 0010                  		move.w	#$10,d6
000016A2 6100                       		bsr.s	NemDec2
000016A4 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000016A8 4E75                       		rts	
000016AA                            ; End of function NemDec
000016AA                            
000016AA                            
000016AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016AA                            
000016AA                            
000016AA                            NemDec2:				; XREF: NemDec
000016AA 3E06                       		move.w	d6,d7
000016AC 5147                       		subq.w	#8,d7
000016AE 3205                       		move.w	d5,d1
000016B0 EE69                       		lsr.w	d7,d1
000016B2 0C01 00FC                  		cmpi.b	#-4,d1
000016B6 6400                       		bcc.s	loc_14D6
000016B8 0241 00FF                  		andi.w	#$FF,d1
000016BC D241                       		add.w	d1,d1
000016BE 1031 1000                  		move.b	(a1,d1.w),d0
000016C2 4880                       		ext.w	d0
000016C4 9C40                       		sub.w	d0,d6
000016C6 0C46 0009                  		cmpi.w	#9,d6
000016CA 6400                       		bcc.s	loc_14B2
000016CC 5046                       		addq.w	#8,d6
000016CE E145                       		asl.w	#8,d5
000016D0 1A18                       		move.b	(a0)+,d5
000016D2                            
000016D2                            loc_14B2:
000016D2 1231 1001                  		move.b	1(a1,d1.w),d1
000016D6 3001                       		move.w	d1,d0
000016D8 0241 000F                  		andi.w	#$F,d1
000016DC 0240 00F0                  		andi.w	#$F0,d0
000016E0                            
000016E0                            loc_14C0:				; XREF: NemDec3
000016E0 E848                       		lsr.w	#4,d0
000016E2                            
000016E2                            loc_14C2:				; XREF: NemDec3
000016E2 E98C                       		lsl.l	#4,d4
000016E4 8801                       		or.b	d1,d4
000016E6 5343                       		subq.w	#1,d3
000016E8 6600                       		bne.s	loc_14D0
000016EA 4ED3                       		jmp	(a3)
000016EC                            ; End of function NemDec2
000016EC                            
000016EC                            
000016EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016EC                            
000016EC                            
000016EC                            NemDec3:				; XREF: loc_1502
000016EC 7800                       		moveq	#0,d4
000016EE 7608                       		moveq	#8,d3
000016F0                            
000016F0                            loc_14D0:				; XREF: NemDec2
000016F0 51C8 FFF0                  		dbf	d0,loc_14C2
000016F4 60B4                       		bra.s	NemDec2
000016F6                            ; ===========================================================================
000016F6                            
000016F6                            loc_14D6:				; XREF: NemDec2
000016F6 5D46                       		subq.w	#6,d6
000016F8 0C46 0009                  		cmpi.w	#9,d6
000016FC 6400                       		bcc.s	loc_14E4
000016FE 5046                       		addq.w	#8,d6
00001700 E145                       		asl.w	#8,d5
00001702 1A18                       		move.b	(a0)+,d5
00001704                            
00001704                            loc_14E4:				; XREF: NemDec3
00001704 5F46                       		subq.w	#7,d6
00001706 3205                       		move.w	d5,d1
00001708 EC69                       		lsr.w	d6,d1
0000170A 3001                       		move.w	d1,d0
0000170C 0241 000F                  		andi.w	#$F,d1
00001710 0240 0070                  		andi.w	#$70,d0
00001714 0C46 0009                  		cmpi.w	#9,d6
00001718 64C6                       		bcc.s	loc_14C0
0000171A 5046                       		addq.w	#8,d6
0000171C E145                       		asl.w	#8,d5
0000171E 1A18                       		move.b	(a0)+,d5
00001720 60BE                       		bra.s	loc_14C0
00001722                            ; End of function NemDec3
00001722                            
00001722                            ; ===========================================================================
00001722                            
00001722                            loc_1502:				; XREF: NemDec
00001722 2884                       		move.l	d4,(a4)
00001724 534D                       		subq.w	#1,a5
00001726 380D                       		move.w	a5,d4
00001728 66C2                       		bne.s	NemDec3
0000172A 4E75                       		rts	
0000172C                            ; ===========================================================================
0000172C B982                       		eor.l	d4,d2
0000172E 2882                       		move.l	d2,(a4)
00001730 534D                       		subq.w	#1,a5
00001732 380D                       		move.w	a5,d4
00001734 66B6                       		bne.s	NemDec3
00001736 4E75                       		rts	
00001738                            ; ===========================================================================
00001738                            
00001738                            loc_1518:				; XREF: NemDec
00001738 28C4                       		move.l	d4,(a4)+
0000173A 534D                       		subq.w	#1,a5
0000173C 380D                       		move.w	a5,d4
0000173E 66AC                       		bne.s	NemDec3
00001740 4E75                       		rts	
00001742                            ; ===========================================================================
00001742 B982                       		eor.l	d4,d2
00001744 28C2                       		move.l	d2,(a4)+
00001746 534D                       		subq.w	#1,a5
00001748 380D                       		move.w	a5,d4
0000174A 66A0                       		bne.s	NemDec3
0000174C 4E75                       		rts	
0000174E                            
0000174E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000174E                            
0000174E                            
0000174E                            NemDec4:				; XREF: NemDec
0000174E 1018                       		move.b	(a0)+,d0
00001750                            
00001750                            loc_1530:
00001750 0C00 00FF                  		cmpi.b	#-1,d0
00001754 6600                       		bne.s	loc_1538
00001756 4E75                       		rts	
00001758                            ; ===========================================================================
00001758                            
00001758                            loc_1538:				; XREF: NemDec4
00001758 3E00                       		move.w	d0,d7
0000175A                            
0000175A                            loc_153A:
0000175A 1018                       		move.b	(a0)+,d0
0000175C 0C00 0080                  		cmpi.b	#$80,d0
00001760 64EE                       		bcc.s	loc_1530
00001762 1200                       		move.b	d0,d1
00001764 0247 000F                  		andi.w	#$F,d7
00001768 0241 0070                  		andi.w	#$70,d1
0000176C 8E41                       		or.w	d1,d7
0000176E 0240 000F                  		andi.w	#$F,d0
00001772 1200                       		move.b	d0,d1
00001774 E149                       		lsl.w	#8,d1
00001776 8E41                       		or.w	d1,d7
00001778 7208                       		moveq	#8,d1
0000177A 9240                       		sub.w	d0,d1
0000177C 6600                       		bne.s	loc_1568
0000177E 1018                       		move.b	(a0)+,d0
00001780 D040                       		add.w	d0,d0
00001782 3387 0000                  		move.w	d7,(a1,d0.w)
00001786 60D2                       		bra.s	loc_153A
00001788                            ; ===========================================================================
00001788                            
00001788                            loc_1568:				; XREF: NemDec4
00001788 1018                       		move.b	(a0)+,d0
0000178A E368                       		lsl.w	d1,d0
0000178C D040                       		add.w	d0,d0
0000178E 7A01                       		moveq	#1,d5
00001790 E36D                       		lsl.w	d1,d5
00001792 5345                       		subq.w	#1,d5
00001794                            
00001794                            loc_1574:
00001794 3387 0000                  		move.w	d7,(a1,d0.w)
00001798 5440                       		addq.w	#2,d0
0000179A 51CD FFF8                  		dbf	d5,loc_1574
0000179E 60BA                       		bra.s	loc_153A
000017A0                            ; End of function NemDec4
000017A0                            
000017A0                            ; ---------------------------------------------------------------------------
000017A0                            ; Subroutine to	load pattern load cues
000017A0                            ; ---------------------------------------------------------------------------
000017A0                            
000017A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017A0                            
000017A0                            
000017A0                            LoadPLC:
000017A0 48E7 0060                  		movem.l	a1-a2,-(sp)
000017A4 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017AA D040                       		add.w	d0,d0
000017AC 3031 0000                  		move.w	(a1,d0.w),d0
000017B0 43F1 0000                  		lea	(a1,d0.w),a1
000017B4 45F8 F680                  		lea	($FFFFF680).w,a2
000017B8                            
000017B8                            loc_1598:
000017B8 4A92                       		tst.l	(a2)
000017BA 6700                       		beq.s	loc_15A0
000017BC 5C4A                       		addq.w	#6,a2
000017BE 60F8                       		bra.s	loc_1598
000017C0                            ; ===========================================================================
000017C0                            
000017C0                            loc_15A0:				; XREF: LoadPLC
000017C0 3019                       		move.w	(a1)+,d0
000017C2 6B00                       		bmi.s	loc_15AC
000017C4                            
000017C4                            loc_15A4:
000017C4 24D9                       		move.l	(a1)+,(a2)+
000017C6 34D9                       		move.w	(a1)+,(a2)+
000017C8 51C8 FFFA                  		dbf	d0,loc_15A4
000017CC                            
000017CC                            loc_15AC:
000017CC 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017D0 4E75                       		rts	
000017D2                            ; End of function LoadPLC
000017D2                            
000017D2                            
000017D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017D2                            
000017D2                            
000017D2                            LoadPLC2:
000017D2 48E7 0060                  		movem.l	a1-a2,-(sp)
000017D6 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017DC D040                       		add.w	d0,d0
000017DE 3031 0000                  		move.w	(a1,d0.w),d0
000017E2 43F1 0000                  		lea	(a1,d0.w),a1
000017E6 6100                       		bsr.s	ClearPLC
000017E8 45F8 F680                  		lea	($FFFFF680).w,a2
000017EC 3019                       		move.w	(a1)+,d0
000017EE 6B00                       		bmi.s	loc_15D8
000017F0                            
000017F0                            loc_15D0:
000017F0 24D9                       		move.l	(a1)+,(a2)+
000017F2 34D9                       		move.w	(a1)+,(a2)+
000017F4 51C8 FFFA                  		dbf	d0,loc_15D0
000017F8                            
000017F8                            loc_15D8:
000017F8 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017FC 4E75                       		rts	
000017FE                            ; End of function LoadPLC2
000017FE                            
000017FE                            ; ---------------------------------------------------------------------------
000017FE                            ; Subroutine to	clear the pattern load cues
000017FE                            ; ---------------------------------------------------------------------------
000017FE                            
000017FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017FE                            
000017FE                            
000017FE                            ClearPLC:				; XREF: LoadPLC2
000017FE 45F8 F680                  		lea	($FFFFF680).w,a2
00001802 701F                       		moveq	#$1F,d0
00001804                            
00001804                            ClearPLC_Loop:
00001804 429A                       		clr.l	(a2)+
00001806 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
0000180A 4E75                       		rts	
0000180C                            ; End of function ClearPLC
0000180C                            
0000180C                            ; ---------------------------------------------------------------------------
0000180C                            ; Subroutine to	use graphics listed in a pattern load cue
0000180C                            ; ---------------------------------------------------------------------------
0000180C                            
0000180C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000180C                            
0000180C                            
0000180C                            RunPLC_RAM:				; XREF: Pal_FadeTo
0000180C 4AB8 F680                  		tst.l	($FFFFF680).w
00001810 6700                       		beq.s	locret_1640
00001812 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001816 6600                       		bne.s	locret_1640
00001818 2078 F680                  		movea.l	($FFFFF680).w,a0
0000181C 47F9 0000 1722             		lea	(loc_1502).l,a3
00001822 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001826 3418                       		move.w	(a0)+,d2
00001828 6A00                       		bpl.s	loc_160E
0000182A D6FC 000A                  		adda.w	#$A,a3
0000182E                            
0000182E                            loc_160E:
0000182E 0242 7FFF                  		andi.w	#$7FFF,d2
00001832 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001836 6100 FF16                  		bsr.w	NemDec4
0000183A 1A18                       		move.b	(a0)+,d5
0000183C E145                       		asl.w	#8,d5
0000183E 1A18                       		move.b	(a0)+,d5
00001840 7C10                       		moveq	#$10,d6
00001842 7000                       		moveq	#0,d0
00001844 21C8 F680                  		move.l	a0,($FFFFF680).w
00001848 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000184C 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001850 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001854 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001858 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000185C 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001860                            
00001860                            locret_1640:
00001860 4E75                       		rts	
00001862                            ; End of function RunPLC_RAM
00001862                            
00001862                            
00001862                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001862                            
00001862                            
00001862                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001862 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001866 6700 0000                  		beq.w	locret_16DA
0000186A 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001870 7000                       		moveq	#0,d0
00001872 3038 F684                  		move.w	($FFFFF684).w,d0
00001876 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
0000187C 6000                       		bra.s	loc_1676
0000187E                            ; End of function sub_1642
0000187E                            
0000187E                            
0000187E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000187E                            
0000187E                            
0000187E                            sub_165E:				; XREF: Demo_Time
0000187E 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001882 6700                       		beq.s	locret_16DA
00001884 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
0000188A 7000                       		moveq	#0,d0
0000188C 3038 F684                  		move.w	($FFFFF684).w,d0
00001890 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001896                            
00001896                            loc_1676:				; XREF: sub_1642
00001896 49F9 00C0 0004             		lea	($C00004).l,a4
0000189C E588                       		lsl.l	#2,d0
0000189E E448                       		lsr.w	#2,d0
000018A0 0040 4000                  		ori.w	#$4000,d0
000018A4 4840                       		swap	d0
000018A6 2880                       		move.l	d0,(a4)
000018A8 594C                       		subq.w	#4,a4
000018AA 2078 F680                  		movea.l	($FFFFF680).w,a0
000018AE 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000018B2 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000018B6 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000018BA 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000018BE 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000018C2 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000018C6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000018CA                            
000018CA                            loc_16AA:				; XREF: sub_165E
000018CA 3A7C 0008                  		movea.w	#8,a5
000018CE 6100 FE1C                  		bsr.w	NemDec3
000018D2 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000018D6 6700                       		beq.s	loc_16DC
000018D8 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000018DC 66EC                       		bne.s	loc_16AA
000018DE 21C8 F680                  		move.l	a0,($FFFFF680).w
000018E2 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000018E6 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000018EA 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000018EE 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000018F2 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000018F6 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000018FA                            
000018FA                            locret_16DA:				; XREF: sub_1642
000018FA 4E75                       		rts	
000018FC                            ; ===========================================================================
000018FC                            
000018FC                            loc_16DC:				; XREF: sub_165E
000018FC 41F8 F680                  		lea	($FFFFF680).w,a0
00001900 7015                       		moveq	#$15,d0
00001902                            
00001902                            loc_16E2:				; XREF: sub_165E
00001902 20E8 0006                  		move.l	6(a0),(a0)+
00001906 51C8 FFFA                  		dbf	d0,loc_16E2
0000190A 4E75                       		rts	
0000190C                            ; End of function sub_165E
0000190C                            
0000190C                            ; ---------------------------------------------------------------------------
0000190C                            ; Subroutine to	execute	the pattern load cue
0000190C                            ; ---------------------------------------------------------------------------
0000190C                            
0000190C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000190C                            
0000190C                            
0000190C                            RunPLC_ROM:
0000190C 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001912 D040                       		add.w	d0,d0
00001914 3031 0000                  		move.w	(a1,d0.w),d0
00001918 43F1 0000                  		lea	(a1,d0.w),a1
0000191C 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
0000191E                            
0000191E                            RunPLC_Loop:
0000191E 2059                       		movea.l	(a1)+,a0	; get art pointer
00001920 7000                       		moveq	#0,d0
00001922 3019                       		move.w	(a1)+,d0	; get VRAM address
00001924 E588                       		lsl.l	#2,d0		; divide address by $20
00001926 E448                       		lsr.w	#2,d0
00001928 0040 4000                  		ori.w	#$4000,d0
0000192C 4840                       		swap	d0
0000192E 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001934 6100 FD2A                  		bsr.w	NemDec		; decompress
00001938 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
0000193C 4E75                       		rts	
0000193E                            ; End of function RunPLC_ROM
0000193E                            
0000193E                            ; ---------------------------------------------------------------------------
0000193E                            ; Enigma decompression algorithm
0000193E                            ; ---------------------------------------------------------------------------
0000193E                            
0000193E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000193E                            
0000193E                            
0000193E                            EniDec:
0000193E 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001942 3640                       		movea.w	d0,a3
00001944 1018                       		move.b	(a0)+,d0
00001946 4880                       		ext.w	d0
00001948 3A40                       		movea.w	d0,a5
0000194A 1818                       		move.b	(a0)+,d4
0000194C E70C                       		lsl.b	#3,d4
0000194E 3458                       		movea.w	(a0)+,a2
00001950 D4CB                       		adda.w	a3,a2
00001952 3858                       		movea.w	(a0)+,a4
00001954 D8CB                       		adda.w	a3,a4
00001956 1A18                       		move.b	(a0)+,d5
00001958 E145                       		asl.w	#8,d5
0000195A 1A18                       		move.b	(a0)+,d5
0000195C 7C10                       		moveq	#$10,d6
0000195E                            
0000195E                            loc_173E:				; XREF: loc_1768
0000195E 7007                       		moveq	#7,d0
00001960 3E06                       		move.w	d6,d7
00001962 9E40                       		sub.w	d0,d7
00001964 3205                       		move.w	d5,d1
00001966 EE69                       		lsr.w	d7,d1
00001968 0241 007F                  		andi.w	#$7F,d1
0000196C 3401                       		move.w	d1,d2
0000196E 0C41 0040                  		cmpi.w	#$40,d1
00001972 6400                       		bcc.s	loc_1758
00001974 7006                       		moveq	#6,d0
00001976 E24A                       		lsr.w	#1,d2
00001978                            
00001978                            loc_1758:
00001978 6100 0000                  		bsr.w	sub_188C
0000197C 0242 000F                  		andi.w	#$F,d2
00001980 E849                       		lsr.w	#4,d1
00001982 D241                       		add.w	d1,d1
00001984 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
00001988                            ; End of function EniDec
00001988                            
00001988                            ; ===========================================================================
00001988                            
00001988                            loc_1768:				; XREF: loc_17B4
00001988 32CA                       		move.w	a2,(a1)+
0000198A 524A                       		addq.w	#1,a2
0000198C 51CA FFFA                  		dbf	d2,loc_1768
00001990 60CC                       		bra.s	loc_173E
00001992                            ; ===========================================================================
00001992                            
00001992                            loc_1772:				; XREF: loc_17B4
00001992 32CC                       		move.w	a4,(a1)+
00001994 51CA FFFC                  		dbf	d2,loc_1772
00001998 60C4                       		bra.s	loc_173E
0000199A                            ; ===========================================================================
0000199A                            
0000199A                            loc_177A:				; XREF: loc_17B4
0000199A 6100 0000                  		bsr.w	loc_17DC
0000199E                            
0000199E                            loc_177E:
0000199E 32C1                       		move.w	d1,(a1)+
000019A0 51CA FFFC                  		dbf	d2,loc_177E
000019A4 60B8                       		bra.s	loc_173E
000019A6                            ; ===========================================================================
000019A6                            
000019A6                            loc_1786:				; XREF: loc_17B4
000019A6 6100 0000                  		bsr.w	loc_17DC
000019AA                            
000019AA                            loc_178A:
000019AA 32C1                       		move.w	d1,(a1)+
000019AC 5241                       		addq.w	#1,d1
000019AE 51CA FFFA                  		dbf	d2,loc_178A
000019B2 60AA                       		bra.s	loc_173E
000019B4                            ; ===========================================================================
000019B4                            
000019B4                            loc_1794:				; XREF: loc_17B4
000019B4 6100 0000                  		bsr.w	loc_17DC
000019B8                            
000019B8                            loc_1798:
000019B8 32C1                       		move.w	d1,(a1)+
000019BA 5341                       		subq.w	#1,d1
000019BC 51CA FFFA                  		dbf	d2,loc_1798
000019C0 609C                       		bra.s	loc_173E
000019C2                            ; ===========================================================================
000019C2                            
000019C2                            loc_17A2:				; XREF: loc_17B4
000019C2 0C42 000F                  		cmpi.w	#$F,d2
000019C6 6700                       		beq.s	loc_17C4
000019C8                            
000019C8                            loc_17A8:
000019C8 6100 0000                  		bsr.w	loc_17DC
000019CC 32C1                       		move.w	d1,(a1)+
000019CE 51CA FFF8                  		dbf	d2,loc_17A8
000019D2 608A                       		bra.s	loc_173E
000019D4                            ; ===========================================================================
000019D4                            
000019D4                            loc_17B4:				; XREF: EniDec
000019D4 60B2                       		bra.s	loc_1768
000019D6                            ; ===========================================================================
000019D6 60B0                       		bra.s	loc_1768
000019D8                            ; ===========================================================================
000019D8 60B8                       		bra.s	loc_1772
000019DA                            ; ===========================================================================
000019DA 60B6                       		bra.s	loc_1772
000019DC                            ; ===========================================================================
000019DC 60BC                       		bra.s	loc_177A
000019DE                            ; ===========================================================================
000019DE 60C6                       		bra.s	loc_1786
000019E0                            ; ===========================================================================
000019E0 60D2                       		bra.s	loc_1794
000019E2                            ; ===========================================================================
000019E2 60DE                       		bra.s	loc_17A2
000019E4                            ; ===========================================================================
000019E4                            
000019E4                            loc_17C4:				; XREF: loc_17A2
000019E4 5348                       		subq.w	#1,a0
000019E6 0C46 0010                  		cmpi.w	#$10,d6
000019EA 6600                       		bne.s	loc_17CE
000019EC 5348                       		subq.w	#1,a0
000019EE                            
000019EE                            loc_17CE:
000019EE 3008                       		move.w	a0,d0
000019F0 E248                       		lsr.w	#1,d0
000019F2 6400                       		bcc.s	loc_17D6
000019F4 5248                       		addq.w	#1,a0
000019F6                            
000019F6                            loc_17D6:
000019F6 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000019FA 4E75                       		rts	
000019FC                            ; ===========================================================================
000019FC                            
000019FC                            loc_17DC:				; XREF: loc_17A2
000019FC 360B                       		move.w	a3,d3
000019FE 1204                       		move.b	d4,d1
00001A00 D201                       		add.b	d1,d1
00001A02 6400                       		bcc.s	loc_17EE
00001A04 5346                       		subq.w	#1,d6
00001A06 0D05                       		btst	d6,d5
00001A08 6700                       		beq.s	loc_17EE
00001A0A 0043 8000                  		ori.w	#-$8000,d3
00001A0E                            
00001A0E                            loc_17EE:
00001A0E D201                       		add.b	d1,d1
00001A10 6400                       		bcc.s	loc_17FC
00001A12 5346                       		subq.w	#1,d6
00001A14 0D05                       		btst	d6,d5
00001A16 6700                       		beq.s	loc_17FC
00001A18 0643 4000                  		addi.w	#$4000,d3
00001A1C                            
00001A1C                            loc_17FC:
00001A1C D201                       		add.b	d1,d1
00001A1E 6400                       		bcc.s	loc_180A
00001A20 5346                       		subq.w	#1,d6
00001A22 0D05                       		btst	d6,d5
00001A24 6700                       		beq.s	loc_180A
00001A26 0643 2000                  		addi.w	#$2000,d3
00001A2A                            
00001A2A                            loc_180A:
00001A2A D201                       		add.b	d1,d1
00001A2C 6400                       		bcc.s	loc_1818
00001A2E 5346                       		subq.w	#1,d6
00001A30 0D05                       		btst	d6,d5
00001A32 6700                       		beq.s	loc_1818
00001A34 0043 1000                  		ori.w	#$1000,d3
00001A38                            
00001A38                            loc_1818:
00001A38 D201                       		add.b	d1,d1
00001A3A 6400                       		bcc.s	loc_1826
00001A3C 5346                       		subq.w	#1,d6
00001A3E 0D05                       		btst	d6,d5
00001A40 6700                       		beq.s	loc_1826
00001A42 0043 0800                  		ori.w	#$800,d3
00001A46                            
00001A46                            loc_1826:
00001A46 3205                       		move.w	d5,d1
00001A48 3E06                       		move.w	d6,d7
00001A4A 9E4D                       		sub.w	a5,d7
00001A4C 6400                       		bcc.s	loc_1856
00001A4E 3C07                       		move.w	d7,d6
00001A50 0646 0010                  		addi.w	#$10,d6
00001A54 4447                       		neg.w	d7
00001A56 EF69                       		lsl.w	d7,d1
00001A58 1A10                       		move.b	(a0),d5
00001A5A EF3D                       		rol.b	d7,d5
00001A5C DE47                       		add.w	d7,d7
00001A5E CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001A62 D245                       		add.w	d5,d1
00001A64                            
00001A64                            loc_1844:				; XREF: loc_1868
00001A64 300D                       		move.w	a5,d0
00001A66 D040                       		add.w	d0,d0
00001A68 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A6C D243                       		add.w	d3,d1
00001A6E 1A18                       		move.b	(a0)+,d5
00001A70 E14D                       		lsl.w	#8,d5
00001A72 1A18                       		move.b	(a0)+,d5
00001A74 4E75                       		rts	
00001A76                            ; ===========================================================================
00001A76                            
00001A76                            loc_1856:				; XREF: loc_1826
00001A76 6700                       		beq.s	loc_1868
00001A78 EE69                       		lsr.w	d7,d1
00001A7A 300D                       		move.w	a5,d0
00001A7C D040                       		add.w	d0,d0
00001A7E C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A82 D243                       		add.w	d3,d1
00001A84 300D                       		move.w	a5,d0
00001A86 6000                       		bra.s	sub_188C
00001A88                            ; ===========================================================================
00001A88                            
00001A88                            loc_1868:				; XREF: loc_1856
00001A88 7C10                       		moveq	#$10,d6
00001A8A                            
00001A8A                            loc_186A:
00001A8A 60D8                       		bra.s	loc_1844
00001A8C                            ; ===========================================================================
00001A8C 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001AA2 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001AAC                            
00001AAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AAC                            
00001AAC                            
00001AAC                            sub_188C:				; XREF: EniDec
00001AAC 9C40                       		sub.w	d0,d6
00001AAE 0C46 0009                  		cmpi.w	#9,d6
00001AB2 6400                       		bcc.s	locret_189A
00001AB4 5046                       		addq.w	#8,d6
00001AB6 E145                       		asl.w	#8,d5
00001AB8 1A18                       		move.b	(a0)+,d5
00001ABA                            
00001ABA                            locret_189A:
00001ABA 4E75                       		rts	
00001ABC                            ; End of function sub_188C
00001ABC                            
00001ABC                            ; ---------------------------------------------------------------------------
00001ABC                            ; Kosinski decompression algorithm
00001ABC                            ; ---------------------------------------------------------------------------
00001ABC                            
00001ABC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ABC                            
00001ABC                            
00001ABC                            KosDec:
00001ABC                            
00001ABC =FFFFFFFE                  var_2		= -2
00001ABC =FFFFFFFF                  var_1		= -1
00001ABC                            
00001ABC 558F                       		subq.l	#2,sp
00001ABE 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AC2 1E98                       		move.b	(a0)+,(sp)
00001AC4 3A17                       		move.w	(sp),d5
00001AC6 780F                       		moveq	#$F,d4
00001AC8                            
00001AC8                            loc_18A8:
00001AC8 E24D                       		lsr.w	#1,d5
00001ACA 40C6                       		move	sr,d6
00001ACC 51CC 0000                  		dbf	d4,loc_18BA
00001AD0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AD4 1E98                       		move.b	(a0)+,(sp)
00001AD6 3A17                       		move.w	(sp),d5
00001AD8 780F                       		moveq	#$F,d4
00001ADA                            
00001ADA                            loc_18BA:
00001ADA 44C6                       		move	d6,ccr
00001ADC 6400                       		bcc.s	loc_18C2
00001ADE 12D8                       		move.b	(a0)+,(a1)+
00001AE0 60E6                       		bra.s	loc_18A8
00001AE2                            ; ===========================================================================
00001AE2                            
00001AE2                            loc_18C2:				; XREF: KosDec
00001AE2 7600                       		moveq	#0,d3
00001AE4 E24D                       		lsr.w	#1,d5
00001AE6 40C6                       		move	sr,d6
00001AE8 51CC 0000                  		dbf	d4,loc_18D6
00001AEC 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AF0 1E98                       		move.b	(a0)+,(sp)
00001AF2 3A17                       		move.w	(sp),d5
00001AF4 780F                       		moveq	#$F,d4
00001AF6                            
00001AF6                            loc_18D6:
00001AF6 44C6                       		move	d6,ccr
00001AF8 6500                       		bcs.s	loc_1906
00001AFA E24D                       		lsr.w	#1,d5
00001AFC 51CC 0000                  		dbf	d4,loc_18EA
00001B00 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B04 1E98                       		move.b	(a0)+,(sp)
00001B06 3A17                       		move.w	(sp),d5
00001B08 780F                       		moveq	#$F,d4
00001B0A                            
00001B0A                            loc_18EA:
00001B0A E353                       		roxl.w	#1,d3
00001B0C E24D                       		lsr.w	#1,d5
00001B0E 51CC 0000                  		dbf	d4,loc_18FC
00001B12 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B16 1E98                       		move.b	(a0)+,(sp)
00001B18 3A17                       		move.w	(sp),d5
00001B1A 780F                       		moveq	#$F,d4
00001B1C                            
00001B1C                            loc_18FC:
00001B1C E353                       		roxl.w	#1,d3
00001B1E 5243                       		addq.w	#1,d3
00001B20 74FF                       		moveq	#-1,d2
00001B22 1418                       		move.b	(a0)+,d2
00001B24 6000                       		bra.s	loc_191C
00001B26                            ; ===========================================================================
00001B26                            
00001B26                            loc_1906:				; XREF: loc_18C2
00001B26 1018                       		move.b	(a0)+,d0
00001B28 1218                       		move.b	(a0)+,d1
00001B2A 74FF                       		moveq	#-1,d2
00001B2C 1401                       		move.b	d1,d2
00001B2E EB4A                       		lsl.w	#5,d2
00001B30 1400                       		move.b	d0,d2
00001B32 0241 0007                  		andi.w	#7,d1
00001B36 6700                       		beq.s	loc_1928
00001B38 1601                       		move.b	d1,d3
00001B3A 5243                       		addq.w	#1,d3
00001B3C                            
00001B3C                            loc_191C:
00001B3C 1031 2000                  		move.b	(a1,d2.w),d0
00001B40 12C0                       		move.b	d0,(a1)+
00001B42 51CB FFF8                  		dbf	d3,loc_191C
00001B46 6080                       		bra.s	loc_18A8
00001B48                            ; ===========================================================================
00001B48                            
00001B48                            loc_1928:				; XREF: loc_1906
00001B48 1218                       		move.b	(a0)+,d1
00001B4A 6700                       		beq.s	loc_1938
00001B4C 0C01 0001                  		cmpi.b	#1,d1
00001B50 6700 FF76                  		beq.w	loc_18A8
00001B54 1601                       		move.b	d1,d3
00001B56 60E4                       		bra.s	loc_191C
00001B58                            ; ===========================================================================
00001B58                            
00001B58                            loc_1938:				; XREF: loc_1928
00001B58 548F                       		addq.l	#2,sp
00001B5A 4E75                       		rts	
00001B5C                            ; End of function KosDec
00001B5C                            
00001B5C                            ; ---------------------------------------------------------------------------
00001B5C                            ; Pallet cycling routine loading subroutine
00001B5C                            ; ---------------------------------------------------------------------------
00001B5C                            
00001B5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B5C                            
00001B5C                            
00001B5C                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001B5C 7400                       		moveq	#0,d2
00001B5E 7000                       		moveq	#0,d0
00001B60 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001B64 D040                       		add.w	d0,d0		; multiply by 2
00001B66 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001B6A 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001B6E                            ; End of function PalCycle_Load
00001B6E                            
00001B6E                            ; ===========================================================================
00001B6E                            ; ---------------------------------------------------------------------------
00001B6E                            ; Pallet cycling routines
00001B6E                            ; ---------------------------------------------------------------------------
00001B6E 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001B70 0000                       		dc.w PalCycle_LZ-PalCycle
00001B72 0000                       		dc.w PalCycle_MZ-PalCycle
00001B74 0000                       		dc.w PalCycle_SLZ-PalCycle
00001B76 0000                       		dc.w PalCycle_SYZ-PalCycle
00001B78 0000                       		dc.w PalCycle_SBZ-PalCycle
00001B7A 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B7C                            
00001B7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B7C                            
00001B7C                            
00001B7C                            PalCycle_Title:				; XREF: TitleScreen
00001B7C 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001B82 6000                       		bra.s	loc_196A
00001B84                            ; ===========================================================================
00001B84                            
00001B84                            PalCycle_GHZ:				; XREF: PalCycle
00001B84 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001B8A                            
00001B8A                            loc_196A:				; XREF: PalCycle_Title
00001B8A 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B8E 6A00                       		bpl.s	locret_1990
00001B90 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001B96 3038 F632                  		move.w	($FFFFF632).w,d0
00001B9A 5278 F632                  		addq.w	#1,($FFFFF632).w
00001B9E 0240 0003                  		andi.w	#3,d0
00001BA2 E748                       		lsl.w	#3,d0
00001BA4 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001BA8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BAC 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BB0                            
00001BB0                            locret_1990:
00001BB0 4E75                       		rts	
00001BB2                            ; End of function PalCycle_Title
00001BB2                            
00001BB2                            
00001BB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BB2                            
00001BB2                            
00001BB2                            PalCycle_LZ:				; XREF: PalCycle
00001BB2 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BB6 6A00                       		bpl.s	loc_19D8
00001BB8 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001BBE 3038 F632                  		move.w	($FFFFF632).w,d0
00001BC2 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BC6 0240 0003                  		andi.w	#3,d0
00001BCA E748                       		lsl.w	#3,d0
00001BCC 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001BD2 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001BD8 6600                       		bne.s	loc_19C0
00001BDA 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001BE0                            
00001BE0                            loc_19C0:
00001BE0 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BE4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BE8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BEC 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001BF0 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BF4 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BF8                            
00001BF8                            loc_19D8:
00001BF8 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001BFC 0240 0007                  		andi.w	#7,d0
00001C00 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001C04 6700                       		beq.s	locret_1A3A
00001C06 7201                       		moveq	#1,d1
00001C08 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001C0C 6700                       		beq.s	loc_19F0
00001C0E 4441                       		neg.w	d1
00001C10                            
00001C10                            loc_19F0:
00001C10 3038 F650                  		move.w	($FFFFF650).w,d0
00001C14 0240 0003                  		andi.w	#3,d0
00001C18 D041                       		add.w	d1,d0
00001C1A 0C40 0003                  		cmpi.w	#3,d0
00001C1E 6500                       		bcs.s	loc_1A0A
00001C20 3200                       		move.w	d0,d1
00001C22 7000                       		moveq	#0,d0
00001C24 4A41                       		tst.w	d1
00001C26 6A00                       		bpl.s	loc_1A0A
00001C28 7002                       		moveq	#2,d0
00001C2A                            
00001C2A                            loc_1A0A:
00001C2A 31C0 F650                  		move.w	d0,($FFFFF650).w
00001C2E D040                       		add.w	d0,d0
00001C30 3200                       		move.w	d0,d1
00001C32 D040                       		add.w	d0,d0
00001C34 D041                       		add.w	d1,d0
00001C36 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001C3C 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C40 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C44 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C48 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001C4E 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001C52 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C56 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C5A                            
00001C5A                            locret_1A3A:
00001C5A 4E75                       		rts	
00001C5C                            ; End of function PalCycle_LZ
00001C5C                            
00001C5C                            ; ===========================================================================
00001C5C 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001C64                            ; ===========================================================================
00001C64                            
00001C64                            PalCycle_MZ:				; XREF: PalCycle
00001C64 4E75                       		rts	
00001C66                            
00001C66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C66                            
00001C66                            
00001C66                            PalCycle_SLZ:				; XREF: PalCycle
00001C66 4E75                       		rts	
00001C68                            ; End of function PalCycle_SLZ
00001C68                            
00001C68                            
00001C68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C68                            
00001C68                            
00001C68                            PalCycle_SYZ:				; XREF: PalCycle
00001C68 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C6C 6A00                       		bpl.s	locret_1AC6
00001C6E 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001C74 3038 F632                  		move.w	($FFFFF632).w,d0
00001C78 5278 F632                  		addq.w	#1,($FFFFF632).w
00001C7C 0240 0003                  		andi.w	#3,d0
00001C80 E548                       		lsl.w	#2,d0
00001C82 3200                       		move.w	d0,d1
00001C84 D040                       		add.w	d0,d0
00001C86 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001C8C 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001C90 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C94 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C98 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001C9E 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001CA2 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001CA6 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001CAC                            
00001CAC                            locret_1AC6:
00001CAC 4E75                       		rts	
00001CAE                            ; End of function PalCycle_SYZ
00001CAE                            
00001CAE                            
00001CAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CAE                            
00001CAE                            
00001CAE                            PalCycle_SBZ:				; XREF: PalCycle
00001CAE 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001CB4 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CB8 6700                       		beq.s	loc_1ADA
00001CBA 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001CC0                            
00001CC0                            loc_1ADA:
00001CC0 43F8 F650                  		lea	($FFFFF650).w,a1
00001CC4 321A                       		move.w	(a2)+,d1
00001CC6                            
00001CC6                            loc_1AE0:
00001CC6 5311                       		subq.b	#1,(a1)
00001CC8 6B00                       		bmi.s	loc_1AEA
00001CCA 5489                       		addq.l	#2,a1
00001CCC 5C8A                       		addq.l	#6,a2
00001CCE 6000                       		bra.s	loc_1B06
00001CD0                            ; ===========================================================================
00001CD0                            
00001CD0                            loc_1AEA:				; XREF: PalCycle_SBZ
00001CD0 12DA                       		move.b	(a2)+,(a1)+
00001CD2 1011                       		move.b	(a1),d0
00001CD4 5200                       		addq.b	#1,d0
00001CD6 B01A                       		cmp.b	(a2)+,d0
00001CD8 6500                       		bcs.s	loc_1AF6
00001CDA 7000                       		moveq	#0,d0
00001CDC                            
00001CDC                            loc_1AF6:
00001CDC 12C0                       		move.b	d0,(a1)+
00001CDE 0240 000F                  		andi.w	#$F,d0
00001CE2 D040                       		add.w	d0,d0
00001CE4 305A                       		movea.w	(a2)+,a0
00001CE6 365A                       		movea.w	(a2)+,a3
00001CE8 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001CEC                            
00001CEC                            loc_1B06:				; XREF: PalCycle_SBZ
00001CEC 51C9 FFD8                  		dbf	d1,loc_1AE0
00001CF0 5378 F634                  		subq.w	#1,($FFFFF634).w
00001CF4 6A00                       		bpl.s	locret_1B64
00001CF6 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001CFC 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001D02 4A38 FE11                  		tst.b	($FFFFFE11).w
00001D06 6700                       		beq.s	loc_1B2E
00001D08 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001D0E 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001D14                            
00001D14                            loc_1B2E:
00001D14 72FF                       		moveq	#-1,d1
00001D16 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001D1A 6700                       		beq.s	loc_1B38
00001D1C 4441                       		neg.w	d1
00001D1E                            
00001D1E                            loc_1B38:
00001D1E 3038 F632                  		move.w	($FFFFF632).w,d0
00001D22 0240 0003                  		andi.w	#3,d0
00001D26 D041                       		add.w	d1,d0
00001D28 0C40 0003                  		cmpi.w	#3,d0
00001D2C 6500                       		bcs.s	loc_1B52
00001D2E 3200                       		move.w	d0,d1
00001D30 7000                       		moveq	#0,d0
00001D32 4A41                       		tst.w	d1
00001D34 6A00                       		bpl.s	loc_1B52
00001D36 7002                       		moveq	#2,d0
00001D38                            
00001D38                            loc_1B52:
00001D38 31C0 F632                  		move.w	d0,($FFFFF632).w
00001D3C D040                       		add.w	d0,d0
00001D3E 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001D42 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D46 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001D4A                            
00001D4A                            locret_1B64:
00001D4A 4E75                       		rts	
00001D4C                            ; End of function PalCycle_SBZ
00001D4C                            
00001D4C                            ; ===========================================================================
00001D4C                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001D6C                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001D8C                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001DAC                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001DBE                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001DD0                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001E38                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001E5C                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001E7C                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001E8C                            
00001E8C                            Pal_SBZCycList:
00001E8C                            	include "_inc\SBZ pallet script 1.asm"
00001E8C                            ; ---------------------------------------------------------------------------
00001E8C                            ; Scrap Brain Zone 1 pallet cycling script
00001E8C                            ; ---------------------------------------------------------------------------
00001E8C 0008                       	dc.w 8			; number of entries - 1
00001E8E 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001E90 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001E92 FB50                       	dc.w $FB50		; RAM address
00001E94 0D08                       	dc.b $D, 8
00001E96 0000                       	dc.w Pal_SBZCyc2
00001E98 FB52                       	dc.w $FB52
00001E9A 0E08                       	dc.b $E, 8
00001E9C 0000                       	dc.w Pal_SBZCyc3
00001E9E FB6E                       	dc.w $FB6E
00001EA0 0B08                       	dc.b $B, 8
00001EA2 0000                       	dc.w Pal_SBZCyc5
00001EA4 FB70                       	dc.w $FB70
00001EA6 0708                       	dc.b 7,	8
00001EA8 0000                       	dc.w Pal_SBZCyc6
00001EAA FB72                       	dc.w $FB72
00001EAC 1C10                       	dc.b $1C, $10
00001EAE 0000                       	dc.w Pal_SBZCyc7
00001EB0 FB7E                       	dc.w $FB7E
00001EB2 0303                       	dc.b 3,	3
00001EB4 0000                       	dc.w Pal_SBZCyc8
00001EB6 FB78                       	dc.w $FB78
00001EB8 0303                       	dc.b 3,	3
00001EBA 0000                       	dc.w Pal_SBZCyc8+2
00001EBC FB7A                       	dc.w $FB7A
00001EBE 0303                       	dc.b 3,	3
00001EC0 0000                       	dc.w Pal_SBZCyc8+4
00001EC2 FB7C                       	dc.w $FB7C
00001EC4                            	even
00001EC4                            	even
00001EC4                            
00001EC4                            Pal_SBZCycList2:
00001EC4                            	include "_inc\SBZ pallet script 2.asm"
00001EC4                            ; ---------------------------------------------------------------------------
00001EC4                            ; Scrap Brain Zone 2 pallet cycling script
00001EC4                            ; ---------------------------------------------------------------------------
00001EC4 0006                       	dc.w 6
00001EC6 0708                       	dc.b 7,	8
00001EC8 0000                       	dc.w Pal_SBZCyc1
00001ECA FB50                       	dc.w $FB50
00001ECC 0D08                       	dc.b $D, 8
00001ECE 0000                       	dc.w Pal_SBZCyc2
00001ED0 FB52                       	dc.w $FB52
00001ED2 0908                       	dc.b 9,	8
00001ED4 0000                       	dc.w Pal_SBZCyc9
00001ED6 FB70                       	dc.w $FB70
00001ED8 0708                       	dc.b 7,	8
00001EDA 0000                       	dc.w Pal_SBZCyc6
00001EDC FB72                       	dc.w $FB72
00001EDE 0303                       	dc.b 3,	3
00001EE0 0000                       	dc.w Pal_SBZCyc8
00001EE2 FB78                       	dc.w $FB78
00001EE4 0303                       	dc.b 3,	3
00001EE6 0000                       	dc.w Pal_SBZCyc8+2
00001EE8 FB7A                       	dc.w $FB7A
00001EEA 0303                       	dc.b 3,	3
00001EEC 0000                       	dc.w Pal_SBZCyc8+4
00001EEE FB7C                       	dc.w $FB7C
00001EF0                            	even
00001EF0                            	even
00001EF0                            
00001EF0                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001F00                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001F10                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001F20                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001F2C                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001F3C                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001F4C                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001F6C                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001F76                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001F86                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001F92                            ; ---------------------------------------------------------------------------
00001F92                            ; Subroutine to	fade out and fade in
00001F92                            ; ---------------------------------------------------------------------------
00001F92                            
00001F92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F92                            
00001F92                            
00001F92                            Pal_FadeTo:
00001F92 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001F98                            
00001F98                            Pal_FadeTo2:
00001F98 7000                       		moveq	#0,d0
00001F9A 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F9E 1038 F626                  		move.b	($FFFFF626).w,d0
00001FA2 D0C0                       		adda.w	d0,a0
00001FA4 7200                       		moveq	#0,d1
00001FA6 1038 F627                  		move.b	($FFFFF627).w,d0
00001FAA                            
00001FAA                            Pal_ToBlack:
00001FAA 30C1                       		move.w	d1,(a0)+
00001FAC 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001FB0                            
00001FB0 383C 0015                  		move.w	#$15,d4
00001FB4                            
00001FB4                            loc_1DCE:
00001FB4 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FBA 6100 0000                  		bsr.w	DelayProgram
00001FBE 6100                       		bsr.s	Pal_FadeIn
00001FC0 6100 F84A                  		bsr.w	RunPLC_RAM
00001FC4 51CC FFEE                  		dbf	d4,loc_1DCE
00001FC8 4E75                       		rts	
00001FCA                            ; End of function Pal_FadeTo
00001FCA                            
00001FCA                            ; ---------------------------------------------------------------------------
00001FCA                            ; Pallet fade-in subroutine
00001FCA                            ; ---------------------------------------------------------------------------
00001FCA                            
00001FCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FCA                            
00001FCA                            
00001FCA                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001FCA 7000                       		moveq	#0,d0
00001FCC 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FD0 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001FD4 1038 F626                  		move.b	($FFFFF626).w,d0
00001FD8 D0C0                       		adda.w	d0,a0
00001FDA D2C0                       		adda.w	d0,a1
00001FDC 1038 F627                  		move.b	($FFFFF627).w,d0
00001FE0                            
00001FE0                            loc_1DFA:
00001FE0 6100                       		bsr.s	Pal_AddColor
00001FE2 51C8 FFFC                  		dbf	d0,loc_1DFA
00001FE6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001FEC 6600                       		bne.s	locret_1E24
00001FEE 7000                       		moveq	#0,d0
00001FF0 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001FF4 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001FF8 1038 F626                  		move.b	($FFFFF626).w,d0
00001FFC D0C0                       		adda.w	d0,a0
00001FFE D2C0                       		adda.w	d0,a1
00002000 1038 F627                  		move.b	($FFFFF627).w,d0
00002004                            
00002004                            loc_1E1E:
00002004 6100                       		bsr.s	Pal_AddColor
00002006 51C8 FFFC                  		dbf	d0,loc_1E1E
0000200A                            
0000200A                            locret_1E24:
0000200A 4E75                       		rts	
0000200C                            ; End of function Pal_FadeIn
0000200C                            
0000200C                            
0000200C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000200C                            
0000200C                            
0000200C                            Pal_AddColor:				; XREF: Pal_FadeIn
0000200C 3419                       		move.w	(a1)+,d2
0000200E 3610                       		move.w	(a0),d3
00002010 B642                       		cmp.w	d2,d3
00002012 6700                       		beq.s	loc_1E4E
00002014 3203                       		move.w	d3,d1
00002016 0641 0200                  		addi.w	#$200,d1	; increase blue	value
0000201A B242                       		cmp.w	d2,d1		; has blue reached threshold level?
0000201C 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
0000201E 30C1                       		move.w	d1,(a0)+	; update pallet
00002020 4E75                       		rts	
00002022                            ; ===========================================================================
00002022                            
00002022                            Pal_AddGreen:				; XREF: Pal_AddColor
00002022 3203                       		move.w	d3,d1
00002024 0641 0020                  		addi.w	#$20,d1		; increase green value
00002028 B242                       		cmp.w	d2,d1
0000202A 6200                       		bhi.s	Pal_AddRed
0000202C 30C1                       		move.w	d1,(a0)+	; update pallet
0000202E 4E75                       		rts	
00002030                            ; ===========================================================================
00002030                            
00002030                            Pal_AddRed:				; XREF: Pal_AddGreen
00002030 5458                       		addq.w	#2,(a0)+	; increase red value
00002032 4E75                       		rts	
00002034                            ; ===========================================================================
00002034                            
00002034                            loc_1E4E:				; XREF: Pal_AddColor
00002034 5448                       		addq.w	#2,a0
00002036 4E75                       		rts	
00002038                            ; End of function Pal_AddColor
00002038                            
00002038                            
00002038                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002038                            
00002038                            
00002038                            Pal_FadeFrom:
00002038 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000203E 383C 0015                  		move.w	#$15,d4
00002042                            
00002042                            loc_1E5C:
00002042 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002048 6100 0000                  		bsr.w	DelayProgram
0000204C 6100                       		bsr.s	Pal_FadeOut
0000204E 6100 F7BC                  		bsr.w	RunPLC_RAM
00002052 51CC FFEE                  		dbf	d4,loc_1E5C
00002056 4E75                       		rts	
00002058                            ; End of function Pal_FadeFrom
00002058                            
00002058                            ; ---------------------------------------------------------------------------
00002058                            ; Pallet fade-out subroutine
00002058                            ; ---------------------------------------------------------------------------
00002058                            
00002058                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002058                            
00002058                            
00002058                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00002058 7000                       		moveq	#0,d0
0000205A 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000205E 1038 F626                  		move.b	($FFFFF626).w,d0
00002062 D0C0                       		adda.w	d0,a0
00002064 1038 F627                  		move.b	($FFFFF627).w,d0
00002068                            
00002068                            loc_1E82:
00002068 6100                       		bsr.s	Pal_DecColor
0000206A 51C8 FFFC                  		dbf	d0,loc_1E82
0000206E                            
0000206E 7000                       		moveq	#0,d0
00002070 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002074 1038 F626                  		move.b	($FFFFF626).w,d0
00002078 D0C0                       		adda.w	d0,a0
0000207A 1038 F627                  		move.b	($FFFFF627).w,d0
0000207E                            
0000207E                            loc_1E98:
0000207E 6100                       		bsr.s	Pal_DecColor
00002080 51C8 FFFC                  		dbf	d0,loc_1E98
00002084 4E75                       		rts	
00002086                            ; End of function Pal_FadeOut
00002086                            
00002086                            
00002086                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002086                            
00002086                            
00002086                            Pal_DecColor:				; XREF: Pal_FadeOut
00002086 3410                       		move.w	(a0),d2
00002088 6700                       		beq.s	loc_1ECC
0000208A 3202                       		move.w	d2,d1
0000208C 0241 000E                  		andi.w	#$E,d1
00002090 6700                       		beq.s	Pal_DecGreen
00002092 5558                       		subq.w	#2,(a0)+	; decrease red value
00002094 4E75                       		rts	
00002096                            ; ===========================================================================
00002096                            
00002096                            Pal_DecGreen:				; XREF: Pal_DecColor
00002096 3202                       		move.w	d2,d1
00002098 0241 00E0                  		andi.w	#$E0,d1
0000209C 6700                       		beq.s	Pal_DecBlue
0000209E 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000020A2 4E75                       		rts	
000020A4                            ; ===========================================================================
000020A4                            
000020A4                            Pal_DecBlue:				; XREF: Pal_DecGreen
000020A4 3202                       		move.w	d2,d1
000020A6 0241 0E00                  		andi.w	#$E00,d1
000020AA 6700                       		beq.s	loc_1ECC
000020AC 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000020B0 4E75                       		rts	
000020B2                            ; ===========================================================================
000020B2                            
000020B2                            loc_1ECC:				; XREF: Pal_DecColor
000020B2 5448                       		addq.w	#2,a0
000020B4 4E75                       		rts	
000020B6                            ; End of function Pal_DecColor
000020B6                            
000020B6                            ; ---------------------------------------------------------------------------
000020B6                            ; Subroutine to	fill the pallet	with white (special stage)
000020B6                            ; ---------------------------------------------------------------------------
000020B6                            
000020B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020B6                            
000020B6                            
000020B6                            Pal_MakeWhite:				; XREF: SpecialStage
000020B6 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020BC 7000                       		moveq	#0,d0
000020BE 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020C2 1038 F626                  		move.b	($FFFFF626).w,d0
000020C6 D0C0                       		adda.w	d0,a0
000020C8 323C 0EEE                  		move.w	#$EEE,d1
000020CC 1038 F627                  		move.b	($FFFFF627).w,d0
000020D0                            
000020D0                            PalWhite_Loop:
000020D0 30C1                       		move.w	d1,(a0)+
000020D2 51C8 FFFC                  		dbf	d0,PalWhite_Loop
000020D6 383C 0015                  		move.w	#$15,d4
000020DA                            
000020DA                            loc_1EF4:
000020DA 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000020E0 6100 0000                  		bsr.w	DelayProgram
000020E4 6100                       		bsr.s	Pal_WhiteToBlack
000020E6 6100 F724                  		bsr.w	RunPLC_RAM
000020EA 51CC FFEE                  		dbf	d4,loc_1EF4
000020EE 4E75                       		rts	
000020F0                            ; End of function Pal_MakeWhite
000020F0                            
000020F0                            
000020F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020F0                            
000020F0                            
000020F0                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
000020F0 7000                       		moveq	#0,d0
000020F2 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020F6 43F8 FB80                  		lea	($FFFFFB80).w,a1
000020FA 1038 F626                  		move.b	($FFFFF626).w,d0
000020FE D0C0                       		adda.w	d0,a0
00002100 D2C0                       		adda.w	d0,a1
00002102 1038 F627                  		move.b	($FFFFF627).w,d0
00002106                            
00002106                            loc_1F20:
00002106 6100                       		bsr.s	Pal_DecColor2
00002108 51C8 FFFC                  		dbf	d0,loc_1F20
0000210C                            
0000210C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002112 6600                       		bne.s	locret_1F4A
00002114 7000                       		moveq	#0,d0
00002116 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000211A 43F8 FA00                  		lea	($FFFFFA00).w,a1
0000211E 1038 F626                  		move.b	($FFFFF626).w,d0
00002122 D0C0                       		adda.w	d0,a0
00002124 D2C0                       		adda.w	d0,a1
00002126 1038 F627                  		move.b	($FFFFF627).w,d0
0000212A                            
0000212A                            loc_1F44:
0000212A 6100                       		bsr.s	Pal_DecColor2
0000212C 51C8 FFFC                  		dbf	d0,loc_1F44
00002130                            
00002130                            locret_1F4A:
00002130 4E75                       		rts	
00002132                            ; End of function Pal_WhiteToBlack
00002132                            
00002132                            
00002132                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002132                            
00002132                            
00002132                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00002132 3419                       		move.w	(a1)+,d2
00002134 3610                       		move.w	(a0),d3
00002136 B642                       		cmp.w	d2,d3
00002138 6700                       		beq.s	loc_1F78
0000213A 3203                       		move.w	d3,d1
0000213C 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00002140 6500                       		bcs.s	loc_1F64
00002142 B242                       		cmp.w	d2,d1
00002144 6500                       		bcs.s	loc_1F64
00002146 30C1                       		move.w	d1,(a0)+
00002148 4E75                       		rts	
0000214A                            ; ===========================================================================
0000214A                            
0000214A                            loc_1F64:				; XREF: Pal_DecColor2
0000214A 3203                       		move.w	d3,d1
0000214C 0441 0020                  		subi.w	#$20,d1		; decrease green value
00002150 6500                       		bcs.s	loc_1F74
00002152 B242                       		cmp.w	d2,d1
00002154 6500                       		bcs.s	loc_1F74
00002156 30C1                       		move.w	d1,(a0)+
00002158 4E75                       		rts	
0000215A                            ; ===========================================================================
0000215A                            
0000215A                            loc_1F74:				; XREF: loc_1F64
0000215A 5558                       		subq.w	#2,(a0)+	; decrease red value
0000215C 4E75                       		rts	
0000215E                            ; ===========================================================================
0000215E                            
0000215E                            loc_1F78:				; XREF: Pal_DecColor2
0000215E 5448                       		addq.w	#2,a0
00002160 4E75                       		rts	
00002162                            ; End of function Pal_DecColor2
00002162                            
00002162                            ; ---------------------------------------------------------------------------
00002162                            ; Subroutine to	make a white flash when	you enter a special stage
00002162                            ; ---------------------------------------------------------------------------
00002162                            
00002162                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002162                            
00002162                            
00002162                            Pal_MakeFlash:				; XREF: SpecialStage
00002162 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002168 383C 0015                  		move.w	#$15,d4
0000216C                            
0000216C                            loc_1F86:
0000216C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002172 6100 0000                  		bsr.w	DelayProgram
00002176 6100                       		bsr.s	Pal_ToWhite
00002178 6100 F692                  		bsr.w	RunPLC_RAM
0000217C 51CC FFEE                  		dbf	d4,loc_1F86
00002180 4E75                       		rts	
00002182                            ; End of function Pal_MakeFlash
00002182                            
00002182                            
00002182                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002182                            
00002182                            
00002182                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00002182 7000                       		moveq	#0,d0
00002184 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002188 1038 F626                  		move.b	($FFFFF626).w,d0
0000218C D0C0                       		adda.w	d0,a0
0000218E 1038 F627                  		move.b	($FFFFF627).w,d0
00002192                            
00002192                            loc_1FAC:
00002192 6100                       		bsr.s	Pal_AddColor2
00002194 51C8 FFFC                  		dbf	d0,loc_1FAC
00002198 7000                       		moveq	#0,d0
0000219A 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000219E 1038 F626                  		move.b	($FFFFF626).w,d0
000021A2 D0C0                       		adda.w	d0,a0
000021A4 1038 F627                  		move.b	($FFFFF627).w,d0
000021A8                            
000021A8                            loc_1FC2:
000021A8 6100                       		bsr.s	Pal_AddColor2
000021AA 51C8 FFFC                  		dbf	d0,loc_1FC2
000021AE 4E75                       		rts	
000021B0                            ; End of function Pal_ToWhite
000021B0                            
000021B0                            
000021B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021B0                            
000021B0                            
000021B0                            Pal_AddColor2:				; XREF: Pal_ToWhite
000021B0 3410                       		move.w	(a0),d2
000021B2 0C42 0EEE                  		cmpi.w	#$EEE,d2
000021B6 6700                       		beq.s	loc_2006
000021B8 3202                       		move.w	d2,d1
000021BA 0241 000E                  		andi.w	#$E,d1
000021BE 0C41 000E                  		cmpi.w	#$E,d1
000021C2 6700                       		beq.s	loc_1FE2
000021C4 5458                       		addq.w	#2,(a0)+	; increase red value
000021C6 4E75                       		rts	
000021C8                            ; ===========================================================================
000021C8                            
000021C8                            loc_1FE2:				; XREF: Pal_AddColor2
000021C8 3202                       		move.w	d2,d1
000021CA 0241 00E0                  		andi.w	#$E0,d1
000021CE 0C41 00E0                  		cmpi.w	#$E0,d1
000021D2 6700                       		beq.s	loc_1FF4
000021D4 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
000021D8 4E75                       		rts	
000021DA                            ; ===========================================================================
000021DA                            
000021DA                            loc_1FF4:				; XREF: loc_1FE2
000021DA 3202                       		move.w	d2,d1
000021DC 0241 0E00                  		andi.w	#$E00,d1
000021E0 0C41 0E00                  		cmpi.w	#$E00,d1
000021E4 6700                       		beq.s	loc_2006
000021E6 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
000021EA 4E75                       		rts	
000021EC                            ; ===========================================================================
000021EC                            
000021EC                            loc_2006:				; XREF: Pal_AddColor2
000021EC 5448                       		addq.w	#2,a0
000021EE 4E75                       		rts	
000021F0                            ; End of function Pal_AddColor2
000021F0                            
000021F0                            ; ---------------------------------------------------------------------------
000021F0                            ; Pallet cycling routine - Sega	logo
000021F0                            ; ---------------------------------------------------------------------------
000021F0                            
000021F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021F0                            
000021F0                            
000021F0                            PalCycle_Sega:				; XREF: SegaScreen
000021F0 4A38 F635                  		tst.b	($FFFFF635).w
000021F4 6600                       		bne.s	loc_206A
000021F6 43F8 FB20                  		lea	($FFFFFB20).w,a1
000021FA 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00002200 7205                       		moveq	#5,d1
00002202 3038 F632                  		move.w	($FFFFF632).w,d0
00002206                            
00002206                            loc_2020:
00002206 6A00                       		bpl.s	loc_202A
00002208 5448                       		addq.w	#2,a0
0000220A 5341                       		subq.w	#1,d1
0000220C 5440                       		addq.w	#2,d0
0000220E 60F6                       		bra.s	loc_2020
00002210                            ; ===========================================================================
00002210                            
00002210                            loc_202A:				; XREF: PalCycle_Sega
00002210 3400                       		move.w	d0,d2
00002212 0242 001E                  		andi.w	#$1E,d2
00002216 6600                       		bne.s	loc_2034
00002218 5440                       		addq.w	#2,d0
0000221A                            
0000221A                            loc_2034:
0000221A 0C40 0060                  		cmpi.w	#$60,d0
0000221E 6400                       		bcc.s	loc_203E
00002220 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002224                            
00002224                            loc_203E:
00002224 5440                       		addq.w	#2,d0
00002226 51C9 FFE8                  		dbf	d1,loc_202A
0000222A 3038 F632                  		move.w	($FFFFF632).w,d0
0000222E 5440                       		addq.w	#2,d0
00002230 3400                       		move.w	d0,d2
00002232 0242 001E                  		andi.w	#$1E,d2
00002236 6600                       		bne.s	loc_2054
00002238 5440                       		addq.w	#2,d0
0000223A                            
0000223A                            loc_2054:
0000223A 0C40 0064                  		cmpi.w	#$64,d0
0000223E 6D00                       		blt.s	loc_2062
00002240 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00002246 70F4                       		moveq	#-$C,d0
00002248                            
00002248                            loc_2062:
00002248 31C0 F632                  		move.w	d0,($FFFFF632).w
0000224C 7001                       		moveq	#1,d0
0000224E 4E75                       		rts	
00002250                            ; ===========================================================================
00002250                            
00002250                            loc_206A:				; XREF: loc_202A
00002250 5338 F634                  		subq.b	#1,($FFFFF634).w
00002254 6A00                       		bpl.s	loc_20BC
00002256 11FC 0004 F634             		move.b	#4,($FFFFF634).w
0000225C 3038 F632                  		move.w	($FFFFF632).w,d0
00002260 0640 000C                  		addi.w	#$C,d0
00002264 0C40 0030                  		cmpi.w	#$30,d0
00002268 6500                       		bcs.s	loc_2088
0000226A 7000                       		moveq	#0,d0
0000226C 4E75                       		rts	
0000226E                            ; ===========================================================================
0000226E                            
0000226E                            loc_2088:				; XREF: loc_206A
0000226E 31C0 F632                  		move.w	d0,($FFFFF632).w
00002272 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
00002278 41F0 0000                  		lea	(a0,d0.w),a0
0000227C 43F8 FB04                  		lea	($FFFFFB04).w,a1
00002280 22D8                       		move.l	(a0)+,(a1)+
00002282 22D8                       		move.l	(a0)+,(a1)+
00002284 3298                       		move.w	(a0)+,(a1)
00002286 43F8 FB20                  		lea	($FFFFFB20).w,a1
0000228A 7000                       		moveq	#0,d0
0000228C 722C                       		moveq	#$2C,d1
0000228E                            
0000228E                            loc_20A8:
0000228E 3400                       		move.w	d0,d2
00002290 0242 001E                  		andi.w	#$1E,d2
00002294 6600                       		bne.s	loc_20B2
00002296 5440                       		addq.w	#2,d0
00002298                            
00002298                            loc_20B2:
00002298 3390 0000                  		move.w	(a0),(a1,d0.w)
0000229C 5440                       		addq.w	#2,d0
0000229E 51C9 FFEE                  		dbf	d1,loc_20A8
000022A2                            
000022A2                            loc_20BC:
000022A2 7001                       		moveq	#1,d0
000022A4 4E75                       		rts	
000022A6                            ; End of function PalCycle_Sega
000022A6                            
000022A6                            ; ===========================================================================
000022A6                            
000022A6                            Pal_Sega1:	incbin	pallet\sega1.bin
000022B2                            Pal_Sega2:	incbin	pallet\sega2.bin
000022E2                            
000022E2                            ; ---------------------------------------------------------------------------
000022E2                            ; Subroutines to load pallets
000022E2                            ; ---------------------------------------------------------------------------
000022E2                            
000022E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022E2                            
000022E2                            
000022E2                            PalLoad1:
000022E2 43F9 0000 0000             		lea	(PalPointers).l,a1
000022E8 E748                       		lsl.w	#3,d0
000022EA D2C0                       		adda.w	d0,a1
000022EC 2459                       		movea.l	(a1)+,a2
000022EE 3659                       		movea.w	(a1)+,a3
000022F0 D6FC 0080                  		adda.w	#$80,a3
000022F4 3E19                       		move.w	(a1)+,d7
000022F6                            
000022F6                            loc_2110:
000022F6 26DA                       		move.l	(a2)+,(a3)+
000022F8 51CF FFFC                  		dbf	d7,loc_2110
000022FC 4E75                       		rts	
000022FE                            ; End of function PalLoad1
000022FE                            
000022FE                            
000022FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022FE                            
000022FE                            
000022FE                            PalLoad2:
000022FE 43F9 0000 0000             		lea	(PalPointers).l,a1
00002304 E748                       		lsl.w	#3,d0
00002306 D2C0                       		adda.w	d0,a1
00002308 2459                       		movea.l	(a1)+,a2
0000230A 3659                       		movea.w	(a1)+,a3
0000230C 3E19                       		move.w	(a1)+,d7
0000230E                            
0000230E                            loc_2128:
0000230E 26DA                       		move.l	(a2)+,(a3)+
00002310 51CF FFFC                  		dbf	d7,loc_2128
00002314 4E75                       		rts	
00002316                            ; End of function PalLoad2
00002316                            
00002316                            ; ---------------------------------------------------------------------------
00002316                            ; Underwater pallet loading subroutine
00002316                            ; ---------------------------------------------------------------------------
00002316                            
00002316                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002316                            
00002316                            
00002316                            PalLoad3_Water:
00002316 43F9 0000 0000             		lea	(PalPointers).l,a1
0000231C E748                       		lsl.w	#3,d0
0000231E D2C0                       		adda.w	d0,a1
00002320 2459                       		movea.l	(a1)+,a2
00002322 3659                       		movea.w	(a1)+,a3
00002324 96FC 0080                  		suba.w	#$80,a3
00002328 3E19                       		move.w	(a1)+,d7
0000232A                            
0000232A                            loc_2144:
0000232A 26DA                       		move.l	(a2)+,(a3)+
0000232C 51CF FFFC                  		dbf	d7,loc_2144
00002330 4E75                       		rts	
00002332                            ; End of function PalLoad3_Water
00002332                            
00002332                            
00002332                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002332                            
00002332                            
00002332                            PalLoad4_Water:
00002332 43F9 0000 0000             		lea	(PalPointers).l,a1
00002338 E748                       		lsl.w	#3,d0
0000233A D2C0                       		adda.w	d0,a1
0000233C 2459                       		movea.l	(a1)+,a2
0000233E 3659                       		movea.w	(a1)+,a3
00002340 96FC 0100                  		suba.w	#$100,a3
00002344 3E19                       		move.w	(a1)+,d7
00002346                            
00002346                            loc_2160:
00002346 26DA                       		move.l	(a2)+,(a3)+
00002348 51CF FFFC                  		dbf	d7,loc_2160
0000234C 4E75                       		rts	
0000234E                            ; End of function PalLoad4_Water
0000234E                            
0000234E                            ; ===========================================================================
0000234E                            ; ---------------------------------------------------------------------------
0000234E                            ; Pallet pointers
0000234E                            ; ---------------------------------------------------------------------------
0000234E                            PalPointers:
0000234E                            	include "_inc\Pallet pointers.asm"
0000234E                            ; ---------------------------------------------------------------------------
0000234E                            ; Pallet pointers
0000234E                            ; ---------------------------------------------------------------------------
0000234E 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002352 FB00                       	dc.w $FB00		; RAM address
00002354 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002356 0000 0000                  	dc.l Pal_Title
0000235A FB00                       	dc.w $FB00
0000235C 001F                       	dc.w $1F
0000235E 0000 0000                  	dc.l Pal_LevelSel
00002362 FB00                       	dc.w $FB00
00002364 001F                       	dc.w $1F
00002366 0000 0000                  	dc.l Pal_Sonic
0000236A FB00                       	dc.w $FB00
0000236C 0007                       	dc.w 7
0000236E 0000 0000                  	dc.l Pal_GHZ
00002372 FB20                       	dc.w $FB20
00002374 0017                       	dc.w $17
00002376 0000 0000                  	dc.l Pal_LZ
0000237A FB20                       	dc.w $FB20
0000237C 0017                       	dc.w $17
0000237E 0000 0000                  	dc.l Pal_MZ
00002382 FB20                       	dc.w $FB20
00002384 0017                       	dc.w $17
00002386 0000 0000                  	dc.l Pal_SLZ
0000238A FB20                       	dc.w $FB20
0000238C 0017                       	dc.w $17
0000238E 0000 0000                  	dc.l Pal_SYZ
00002392 FB20                       	dc.w $FB20
00002394 0017                       	dc.w $17
00002396 0000 0000                  	dc.l Pal_SBZ1
0000239A FB20                       	dc.w $FB20
0000239C 0017                       	dc.w $17
0000239E 0000 0000                  	dc.l Pal_Special
000023A2 FB00                       	dc.w $FB00
000023A4 001F                       	dc.w $1F
000023A6 0000 0000                  	dc.l Pal_LZWater
000023AA FB00                       	dc.w $FB00
000023AC 001F                       	dc.w $1F
000023AE 0000 0000                  	dc.l Pal_SBZ3
000023B2 FB20                       	dc.w $FB20
000023B4 0017                       	dc.w $17
000023B6 0000 0000                  	dc.l Pal_SBZ3Water
000023BA FB00                       	dc.w $FB00
000023BC 001F                       	dc.w $1F
000023BE 0000 0000                  	dc.l Pal_SBZ2
000023C2 FB20                       	dc.w $FB20
000023C4 0017                       	dc.w $17
000023C6 0000 0000                  	dc.l Pal_LZSonWater
000023CA FB00                       	dc.w $FB00
000023CC 0007                       	dc.w 7
000023CE 0000 0000                  	dc.l Pal_SBZ3SonWat
000023D2 FB00                       	dc.w $FB00
000023D4 0007                       	dc.w 7
000023D6 0000 0000                  	dc.l Pal_SpeResult
000023DA FB00                       	dc.w $FB00
000023DC 001F                       	dc.w $1F
000023DE 0000 0000                  	dc.l Pal_SpeContinue
000023E2 FB00                       	dc.w $FB00
000023E4 000F                       	dc.w $F
000023E6 0000 0000                  	dc.l Pal_Ending
000023EA FB00                       	dc.w $FB00
000023EC 001F                       	dc.w $1F
000023EE 0000 0000                  	dc.l Pal_Idiot
000023F2 FB20                       	dc.w $FB20
000023F4 0007                       	dc.w 7
000023F6 0000 0000                  	dc.l Pal_Gronic
000023FA FB00                       	dc.w $FB00
000023FC 0007                       	dc.w 7
000023FE 0000 0000                  	dc.l Pal_LZGroWater
00002402 FB00                       	dc.w $FB00
00002404 0007                       	dc.w 7
00002406 0000 0000                  	dc.l Pal_SBZ3GroWat
0000240A FB00                       	dc.w $FB00
0000240C 0007                       	dc.w 7
0000240C 0007                       	dc.w 7
0000240E                            
0000240E                            ; ---------------------------------------------------------------------------
0000240E                            ; Pallet data
0000240E                            ; ---------------------------------------------------------------------------
0000240E                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
0000248E                            Pal_Title:	incbin	pallet\title.bin
0000250E                            Pal_LevelSel:	incbin	pallet\levelsel.bin
0000258E                            Pal_Sonic:	incbin	pallet\sonic.bin
000025AE                            Pal_GHZ:	incbin	pallet\ghz.bin
0000260E                            Pal_LZ:		incbin	pallet\lz.bin
0000266E                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
000026EE                            Pal_MZ:		incbin	pallet\mz.bin
0000274E                            Pal_SLZ:	incbin	pallet\slz.bin
000027AE                            Pal_SYZ:	incbin	pallet\syz.bin
0000280E                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
0000286E                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000028CE                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
0000294E                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000029AE                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002A2E                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002A4E                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002A6E                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002AEE                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002B2E                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002BAE                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00002BCE                            Pal_Gronic:	incbin	pallet\gronic.bin	; gronic char
00002BEE                            Pal_LZGroWater:	incbin	pallet\groniclzuw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C0E                            Pal_SBZ3GroWat:	incbin	pallet\gronicsbz3uw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C2E                            
00002C2E                            ; ---------------------------------------------------------------------------
00002C2E                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002C2E                            ; ---------------------------------------------------------------------------
00002C2E                            
00002C2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C2E                            
00002C2E                            
00002C2E                            DelayProgram:				; XREF: PauseGame
00002C2E 46FC 2300                  		move	#$2300,sr
00002C32                            
00002C32                            loc_29AC:
00002C32 4A38 F62A                  		tst.b	($FFFFF62A).w
00002C36 66FA                       		bne.s	loc_29AC
00002C38 4E75                       		rts	
00002C3A                            ; End of function DelayProgram
00002C3A                            
00002C3A                            ; ---------------------------------------------------------------------------
00002C3A                            ; Subroutine to	generate a pseudo-random number	in d0
00002C3A                            ; ---------------------------------------------------------------------------
00002C3A                            
00002C3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C3A                            
00002C3A                            
00002C3A                            RandomNumber:
00002C3A 2238 F636                  		move.l	($FFFFF636).w,d1
00002C3E 6600                       		bne.s	loc_29C0
00002C40 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002C46                            
00002C46                            loc_29C0:
00002C46 2001                       		move.l	d1,d0
00002C48 E581                       		asl.l	#2,d1
00002C4A D280                       		add.l	d0,d1
00002C4C E781                       		asl.l	#3,d1
00002C4E D280                       		add.l	d0,d1
00002C50 3001                       		move.w	d1,d0
00002C52 4841                       		swap	d1
00002C54 D041                       		add.w	d1,d0
00002C56 3200                       		move.w	d0,d1
00002C58 4841                       		swap	d1
00002C5A 21C1 F636                  		move.l	d1,($FFFFF636).w
00002C5E 4E75                       		rts	
00002C60                            ; End of function RandomNumber
00002C60                            
00002C60                            
00002C60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C60                            
00002C60                            
00002C60                            CalcSine:				; XREF: SS_BGAnimate; et al
00002C60 0240 00FF                  		andi.w	#$FF,d0
00002C64 D040                       		add.w	d0,d0
00002C66 0640 0080                  		addi.w	#$80,d0
00002C6A 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002C6E 0440 0080                  		subi.w	#$80,d0
00002C72 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002C76 4E75                       		rts	
00002C78                            ; End of function CalcSine
00002C78                            
00002C78                            ; ===========================================================================
00002C78                            
00002C78                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002EF8                            
00002EF8                            ; ===========================================================================
00002EF8 48E7 6000                  		movem.l	d1-d2,-(sp)
00002EFC 3200                       		move.w	d0,d1
00002EFE 4841                       		swap	d1
00002F00 7000                       		moveq	#0,d0
00002F02 3200                       		move.w	d0,d1
00002F04 7407                       		moveq	#7,d2
00002F06                            
00002F06                            loc_2C80:
00002F06 E599                       		rol.l	#2,d1
00002F08 D040                       		add.w	d0,d0
00002F0A 5240                       		addq.w	#1,d0
00002F0C 9240                       		sub.w	d0,d1
00002F0E 6400                       		bcc.s	loc_2C9A
00002F10 D240                       		add.w	d0,d1
00002F12 5340                       		subq.w	#1,d0
00002F14 51CA FFF0                  		dbf	d2,loc_2C80
00002F18 E248                       		lsr.w	#1,d0
00002F1A 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002F1E 4E75                       		rts	
00002F20                            ; ===========================================================================
00002F20                            
00002F20                            loc_2C9A:
00002F20 5240                       		addq.w	#1,d0
00002F22 51CA FFE2                  		dbf	d2,loc_2C80
00002F26 E248                       		lsr.w	#1,d0
00002F28 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002F2C 4E75                       		rts	
00002F2E                            
00002F2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002F2E                            
00002F2E                            
00002F2E                            CalcAngle:
00002F2E 48E7 1800                  		movem.l	d3-d4,-(sp)
00002F32 7600                       		moveq	#0,d3
00002F34 7800                       		moveq	#0,d4
00002F36 3601                       		move.w	d1,d3
00002F38 3802                       		move.w	d2,d4
00002F3A 8843                       		or.w	d3,d4
00002F3C 6700                       		beq.s	loc_2D04
00002F3E 3802                       		move.w	d2,d4
00002F40 4A43                       		tst.w	d3
00002F42 6A00 0000                  		bpl.w	loc_2CC2
00002F46 4443                       		neg.w	d3
00002F48                            
00002F48                            loc_2CC2:
00002F48 4A44                       		tst.w	d4
00002F4A 6A00 0000                  		bpl.w	loc_2CCA
00002F4E 4444                       		neg.w	d4
00002F50                            
00002F50                            loc_2CCA:
00002F50 B843                       		cmp.w	d3,d4
00002F52 6400 0000                  		bcc.w	loc_2CDC
00002F56 E18C                       		lsl.l	#8,d4
00002F58 88C3                       		divu.w	d3,d4
00002F5A 7000                       		moveq	#0,d0
00002F5C 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002F60 6000                       		bra.s	loc_2CE6
00002F62                            ; ===========================================================================
00002F62                            
00002F62                            loc_2CDC:				; XREF: CalcAngle
00002F62 E18B                       		lsl.l	#8,d3
00002F64 86C4                       		divu.w	d4,d3
00002F66 7040                       		moveq	#$40,d0
00002F68 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002F6C                            
00002F6C                            loc_2CE6:
00002F6C 4A41                       		tst.w	d1
00002F6E 6A00 0000                  		bpl.w	loc_2CF2
00002F72 4440                       		neg.w	d0
00002F74 0640 0080                  		addi.w	#$80,d0
00002F78                            
00002F78                            loc_2CF2:
00002F78 4A42                       		tst.w	d2
00002F7A 6A00 0000                  		bpl.w	loc_2CFE
00002F7E 4440                       		neg.w	d0
00002F80 0640 0100                  		addi.w	#$100,d0
00002F84                            
00002F84                            loc_2CFE:
00002F84 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002F88 4E75                       		rts	
00002F8A                            ; ===========================================================================
00002F8A                            
00002F8A                            loc_2D04:				; XREF: CalcAngle
00002F8A 303C 0040                  		move.w	#$40,d0
00002F8E 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002F92 4E75                       		rts	
00002F94                            ; End of function CalcAngle
00002F94                            
00002F94                            ; ===========================================================================
00002F94                            
00002F94                            Angle_Data:	incbin	misc\angles.bin
00003096                            
00003096                            ; ===========================================================================
00003096                            
00003096                            ; ---------------------------------------------------------------------------
00003096                            ; Sega screen
00003096                            ; ---------------------------------------------------------------------------
00003096                            
00003096                            SegaScreen:				; XREF: GameModeArray
00003096 103C 00E4                  		move.b	#$E4,d0
0000309A 6100 E520                  		bsr.w	PlaySound_Special ; stop music
0000309E 6100 E75E                  		bsr.w	ClearPLC
000030A2 6100 EF94                  		bsr.w	Pal_FadeFrom
000030A6 4DF9 00C0 0004             		lea	($C00004).l,a6
000030AC 3CBC 8004                  		move.w	#$8004,(a6)
000030B0 3CBC 8230                  		move.w	#$8230,(a6)
000030B4 3CBC 8407                  		move.w	#$8407,(a6)
000030B8 3CBC 8700                  		move.w	#$8700,(a6)
000030BC 3CBC 8B00                  		move.w	#$8B00,(a6)
000030C0 4238 F64E                  		clr.b	($FFFFF64E).w
000030C4 46FC 2700                  		move	#$2700,sr
000030C8 3038 F60C                  		move.w	($FFFFF60C).w,d0
000030CC 0200 00BF                  		andi.b	#$BF,d0
000030D0 33C0 00C0 0004             		move.w	d0,($C00004).l
000030D6 6100 E40C                  		bsr.w	ClearScreen
000030DA 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000030E4 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
000030EA 6100 E574                  		bsr.w	NemDec
000030EE 43F9 00FF 0000             		lea	($FF0000).l,a1
000030F4 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
000030FA 303C 0000                  		move.w	#0,d0
000030FE 6100 E83E                  		bsr.w	EniDec
00003102 43F9 00FF 0000             		lea	($FF0000).l,a1
00003108 203C 6510 0003             		move.l	#$65100003,d0
0000310E 7217                       		moveq	#$17,d1
00003110 7407                       		moveq	#7,d2
00003112 6100 E52C                  		bsr.w	ShowVDPGraphics
00003116 43F9 00FF 0180             		lea	($FF0180).l,a1
0000311C 203C 4000 0003             		move.l	#$40000003,d0
00003122 7227                       		moveq	#$27,d1
00003124 741B                       		moveq	#$1B,d2
00003126 6100 E518                  		bsr.w	ShowVDPGraphics
0000312A 7000                       		moveq	#0,d0
0000312C 6100 F1D0                  		bsr.w	PalLoad2	; load Sega logo pallet
00003130 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
00003136 31FC 0000 F634             		move.w	#0,($FFFFF634).w
0000313C 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00003142 31FC 0000 F660             		move.w	#0,($FFFFF660).w
00003148 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000314C 0000 0040                  		ori.b	#$40,d0
00003150 33C0 00C0 0004             		move.w	d0,($C00004).l
00003156                            
00003156                            Sega_WaitPallet:
00003156 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
0000315C 6100 FAD0                  		bsr.w	DelayProgram
00003160 6100 F08E                  		bsr.w	PalCycle_Sega
00003164 66F0                       		bne.s	Sega_WaitPallet
00003166                            
00003166 103C 00E1                  		move.b	#$E1,d0
0000316A 6100 E450                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
0000316E 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00003174 6100 FAB8                  		bsr.w	DelayProgram
00003178 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
0000317E                            
0000317E                            Sega_WaitEnd:
0000317E 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003184 6100 FAA8                  		bsr.w	DelayProgram
00003188 4A78 F614                  		tst.w	($FFFFF614).w
0000318C 6700                       		beq.s	Sega_GotoTitle
0000318E 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003194 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00003196                            
00003196                            Sega_GotoTitle:
00003196 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
0000319C 4E75                       		rts	
0000319E                            ; ===========================================================================
0000319E                            
0000319E                            ; ---------------------------------------------------------------------------
0000319E                            ; Title	screen
0000319E                            ; ---------------------------------------------------------------------------
0000319E                            
0000319E                            TitleScreen:				; XREF: GameModeArray
0000319E 103C 00E4                  		move.b	#$E4,d0
000031A2 6100 E418                  		bsr.w	PlaySound_Special ; stop music
000031A6 6100 E656                  		bsr.w	ClearPLC
000031AA 6100 EE8C                  		bsr.w	Pal_FadeFrom
000031AE 46FC 2700                  		move	#$2700,sr
000031B2 6100 E3BE                  		bsr.w	SoundDriverLoad
000031B6 4DF9 00C0 0004             		lea	($C00004).l,a6
000031BC 3CBC 8004                  		move.w	#$8004,(a6)
000031C0 3CBC 8230                  		move.w	#$8230,(a6)
000031C4 3CBC 8407                  		move.w	#$8407,(a6)
000031C8 3CBC 9001                  		move.w	#$9001,(a6)
000031CC 3CBC 9200                  		move.w	#$9200,(a6)
000031D0 3CBC 8B03                  		move.w	#$8B03,(a6)
000031D4 3CBC 8720                  		move.w	#$8720,(a6)
000031D8 4238 F64E                  		clr.b	($FFFFF64E).w
000031DC 6100 E306                  		bsr.w	ClearScreen
000031E0 43F8 D000                  		lea	($FFFFD000).w,a1
000031E4 7000                       		moveq	#0,d0
000031E6 323C 07FF                  		move.w	#$7FF,d1
000031EA                            
000031EA                            Title_ClrObjRam:
000031EA 22C0                       		move.l	d0,(a1)+
000031EC 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
000031F0                            
000031F0 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000031FA 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00003200 6100 E45E                  		bsr.w	NemDec
00003204 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
0000320E 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00003214 6100 E44A                  		bsr.w	NemDec
00003218 43F9 00FF 0000             		lea	($FF0000).l,a1
0000321E 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00003224 303C 0000                  		move.w	#0,d0
00003228 6100 E714                  		bsr.w	EniDec
0000322C 43F9 00FF 0000             		lea	($FF0000).l,a1
00003232 203C 4000 0003             		move.l	#$40000003,d0
00003238 7227                       		moveq	#$27,d1
0000323A 741B                       		moveq	#$1B,d2
0000323C 6100 E402                  		bsr.w	ShowVDPGraphics
00003240 43F8 FB80                  		lea	($FFFFFB80).w,a1
00003244 7000                       		moveq	#0,d0
00003246 323C 001F                  		move.w	#$1F,d1
0000324A                            
0000324A                            Title_ClrPallet:
0000324A 22C0                       		move.l	d0,(a1)+
0000324C 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00003250                            
00003250 7003                       		moveq	#3,d0		; load Sonic's pallet
00003252 6100 F08E                  		bsr.w	PalLoad1
00003256 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
0000325C 4EB9 0000 0000             		jsr	ObjectsLoad
00003262 4EB9 0000 0000             		jsr	BuildSprites
00003268 6100 ED28                  		bsr.w	Pal_FadeTo
0000326C 46FC 2700                  		move	#$2700,sr
00003270 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
0000327A 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00003280 6100 E3DE                  		bsr.w	NemDec
00003284 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
0000328E 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00003294 6100 E3CA                  		bsr.w	NemDec
00003298 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
000032A2 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
000032A8 6100 E3B6                  		bsr.w	NemDec
000032AC 4DF9 00C0 0000             		lea	($C00000).l,a6
000032B2 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
000032BA 4BF9 0000 05F0             		lea	(Art_Text).l,a5
000032C0 323C 0BB3                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
000032C4                            
000032C4                            Title_LoadText:
000032C4 2C9D                       		move.l	(a5)+,(a6)
000032C6 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
000032CA                            
000032CA 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
000032D0 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
000032D6 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
000032DC 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
000032E2 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
000032E8 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
000032EE 6100 0000                  		bsr.w	LevelSizeLoad
000032F2 6100 0000                  		bsr.w	DeformBgLayer
000032F6 43F8 B000                  		lea	($FFFFB000).w,a1
000032FA 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
00003300 303C 0000                  		move.w	#0,d0
00003304 6100 E638                  		bsr.w	EniDec
00003308 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
0000330E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003314 6100 E7A6                  		bsr.w	KosDec
00003318 6100 0000                  		bsr.w	LevelLayoutLoad
0000331C 6100 ED1A                  		bsr.w	Pal_FadeFrom
00003320 46FC 2700                  		move	#$2700,sr
00003324 6100 E1BE                  		bsr.w	ClearScreen
00003328 4BF9 00C0 0004             		lea	($C00004).l,a5
0000332E 4DF9 00C0 0000             		lea	($C00000).l,a6
00003334 47F8 F708                  		lea	($FFFFF708).w,a3
00003338 49F8 A440                  		lea	($FFFFA440).w,a4
0000333C 343C 6000                  		move.w	#$6000,d2
00003340 6100 0000                  		bsr.w	LoadTilesFromStart2
00003344 43F9 00FF 0000             		lea	($FF0000).l,a1
0000334A 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00003350 303C 0000                  		move.w	#0,d0
00003354 6100 E5E8                  		bsr.w	EniDec
00003358 43F9 00FF 0000             		lea	($FF0000).l,a1
0000335E 203C 4206 0003             		move.l	#$42060003,d0
00003364 7221                       		moveq	#$21,d1
00003366 7415                       		moveq	#$15,d2
00003368 6100 E2D6                  		bsr.w	ShowVDPGraphics
0000336C 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003376 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
0000337C 6100 E2E2                  		bsr.w	NemDec
00003380 7001                       		moveq	#1,d0		; load title screen pallet
00003382 6100 EF5E                  		bsr.w	PalLoad1
00003386 103C 008A                  		move.b	#$8A,d0		; play title screen music
0000338A 6100 E230                  		bsr.w	PlaySound_Special
0000338E 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00003394 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
0000339A 43F8 D080                  		lea	($FFFFD080).w,a1
0000339E 7000                       		moveq	#0,d0
000033A0 323C 0007                  		move.w	#7,d1
000033A4                            
000033A4                            Title_ClrObjRam2:
000033A4 22C0                       		move.l	d0,(a1)+
000033A6 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
000033AA                            
000033AA 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
000033B0 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
000033B6 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
000033BC 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
000033C2 11FC 000F D100             		move.b	#$F,($FFFFD100).w
000033C8 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
000033CE 4EB9 0000 0000             		jsr	ObjectsLoad
000033D4 6100 0000                  		bsr.w	DeformBgLayer
000033D8 4EB9 0000 0000             		jsr	BuildSprites
000033DE 7000                       		moveq	#0,d0
000033E0 6100 E3F0                  		bsr.w	LoadPLC2
000033E4 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000033EA 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
000033F0 3038 F60C                  		move.w	($FFFFF60C).w,d0
000033F4 0000 0040                  		ori.b	#$40,d0
000033F8 33C0 00C0 0004             		move.w	d0,($C00004).l
000033FE 6100 EB92                  		bsr.w	Pal_FadeTo
00003402                            
00003402                            loc_317C:
00003402 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003408 6100 F824                  		bsr.w	DelayProgram
0000340C 4EB9 0000 0000             		jsr	ObjectsLoad
00003412 6100 0000                  		bsr.w	DeformBgLayer
00003416 4EB9 0000 0000             		jsr	BuildSprites
0000341C 6100 E75E                  		bsr.w	PalCycle_Title
00003420 6100 E3EA                  		bsr.w	RunPLC_RAM
00003424 3038 D008                  		move.w	($FFFFD008).w,d0
00003428 5440                       		addq.w	#2,d0
0000342A 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
0000342E 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
00003432 6500                       		bcs.s	Title_ChkRegion	; if not, branch
00003434 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000343A 4E75                       		rts	
0000343C                            ; ===========================================================================
0000343C                            
0000343C                            Title_ChkRegion:
0000343C 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003440 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00003442 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
00003448 6000                       		bra.s	Title_EnterCheat
0000344A                            ; ===========================================================================
0000344A                            
0000344A                            Title_RegionJ:				; XREF: Title_ChkRegion
0000344A 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00003450                            
00003450                            Title_EnterCheat:			; XREF: Title_ChkRegion
00003450 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00003454 D0C0                       		adda.w	d0,a0
00003456 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
0000345A 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
0000345E B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003460 6600                       		bne.s	loc_3210	; if not, branch
00003462 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00003466 4A00                       		tst.b	d0
00003468 6600                       		bne.s	Title_CountC
0000346A 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
0000346E 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
00003472 E249                       		lsr.w	#1,d1
00003474 0241 0003                  		andi.w	#3,d1
00003478 6700                       		beq.s	Title_PlayRing
0000347A 4A38 FFF8                  		tst.b	($FFFFFFF8).w
0000347E 6A00                       		bpl.s	Title_PlayRing
00003480 7201                       		moveq	#1,d1
00003482 1181 1001                  		move.b	d1,1(a0,d1.w)
00003486                            
00003486                            Title_PlayRing:
00003486 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
0000348C 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003490 6100 E12A                  		bsr.w	PlaySound_Special
00003494 6000                       		bra.s	Title_CountC
00003496                            ; ===========================================================================
00003496                            
00003496                            loc_3210:				; XREF: Title_EnterCheat
00003496 4A00                       		tst.b	d0
00003498 6700                       		beq.s	Title_CountC
0000349A 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
000034A0 6700                       		beq.s	Title_CountC
000034A2 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000034A8                            
000034A8                            Title_CountC:
000034A8 1038 F605                  		move.b	($FFFFF605).w,d0
000034AC 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
000034B0 6700                       		beq.s	loc_3230	; if not, branch
000034B2 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
000034B6                            
000034B6                            loc_3230:
000034B6 4A78 F614                  		tst.w	($FFFFF614).w
000034BA 6700 0000                  		beq.w	Demo
000034BE                            		; (temporary until we have an actual options screen)
000034BE 0838 0005 F605             		btst	#5,	($FFFFF605).w ; check if c pressed
000034C4 6700                       		beq.s	@notc
000034C6                            
000034C6 0A38 0001 FFE8             		eor.b	#1,(v_character) ; sonic/gronic 
000034CC 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
000034D0 6100 E0EA                  		bsr.w	PlaySound_Special
000034D4                            	@notc:
000034D4 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
000034DA 6700 FF26                  		beq.w	loc_317C	; if not, branch
000034DE                            
000034DE                            Title_ChkLevSel:
000034DE 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
000034E2 6700 0000                  		beq.w	PlayLevel	; if not, play level
000034E6 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
000034EC 6700 0000                  		beq.w	PlayLevel	; if not, play level
000034F0                            		
000034F0                            		
000034F0 7002                       		moveq	#2,d0
000034F2 6100 EE0A                  		bsr.w	PalLoad2	; load level select pallet
000034F6 43F8 CC00                  		lea	($FFFFCC00).w,a1
000034FA 7000                       		moveq	#0,d0
000034FC 323C 00DF                  		move.w	#$DF,d1
00003500                            
00003500                            Title_ClrScroll:
00003500 22C0                       		move.l	d0,(a1)+
00003502 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
00003506                            
00003506 21C0 F616                  		move.l	d0,($FFFFF616).w
0000350A 46FC 2700                  		move	#$2700,sr
0000350E 4DF9 00C0 0000             		lea	($C00000).l,a6
00003514 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
0000351E 323C 03FF                  		move.w	#$3FF,d1
00003522                            
00003522                            Title_ClrVram:
00003522 2C80                       		move.l	d0,(a6)
00003524 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
00003528                            
00003528 6100 0000                  		bsr.w	LevSelTextLoad
0000352C                            		
0000352C                            		; sound test fix
0000352C 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003530 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
00003536 363C E65F                  		move.w	#$E680-$21,d3
0000353A 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
0000353E 31C6 FF82                  		move.w	d6,($FFFFFF82).w
00003542 6000 0000                  		bra.w	LevelSelect
00003546                            ; ---------------------------------------------------------------------------
00003546                            ; Level	Select
00003546                            ; ---------------------------------------------------------------------------
00003546                            YouAreAnIdiot:
00003546 6100 DF9C                  		bsr.w	ClearScreen
0000354A                            		
0000354A 4DF9 00C0 0004             		lea	($C00004).l,a6
00003550 3CBC 8700                  		move.w	#$8700,(a6) ; first colour is bg now
00003554                            		
00003554 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000355E 41F9 0000 0000             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
00003564 6100 E0FA                  		bsr.w	NemDec
00003568 43F9 00FF 0000             		lea	($FF0000).l,a1
0000356E 41F9 0000 0000             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
00003574 303C 0000                  		move.w	#0,d0
00003578 6100 E3C4                  		bsr.w	EniDec
0000357C 43F9 00FF 0000             		lea	($FF0000).l,a1
00003582 203C 4304 0003             		move.l	#$43040003,d0
00003588 7223                       		moveq	#35,d1
0000358A 740D                       		moveq	#13,d2
0000358C 6100 E0B2                  		bsr.w	ShowVDPGraphics
00003590 7014                       		moveq	#20,d0
00003592 6100 ED6A                  		bsr.w	PalLoad2	; load Sega logo pallet
00003596                            		
00003596 303C 00E5                  		move.w	#$E5,d0		; YOU ARE AN IDIOT BOOM
0000359A 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
0000359E                            	@wait:
0000359E 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000035A4 6100 F688                  		bsr.w	DelayProgram
000035A8 60F4                       		bra.s	@wait
000035AA                            LevelSelect:
000035AA 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000035B0 6100 F67C                  		bsr.w	DelayProgram
000035B4 6100 0000                  		bsr.w	LevSelControls
000035B8 6100 E252                  		bsr.w	RunPLC_RAM
000035BC 4AB8 F680                  		tst.l	($FFFFF680).w
000035C0 66E8                       		bne.s	LevelSelect
000035C2 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
000035C8 67E0                       		beq.s	LevelSelect	; if not, branch
000035CA 3038 FF82                  		move.w	($FFFFFF82).w,d0
000035CE 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
000035D2 6700 FF72                  		beq.w	YouAreAnIdiot	; if not, dont blow this place up
000035D6                            		
000035D6 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
000035DA 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
000035DC                            		
000035DC 3038 FF84                  		move.w	($FFFFFF84).w,d0
000035E0 0640 0080                  		addi.w	#$80,d0
000035E4 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
000035E8                            		
000035E8 4EB9 0000 0000             		jsr		ShowNow_Playing
000035EE 60BA                       		bra.s	LevelSelect
000035F0                            ; ===========================================================================
000035F0                            
000035F0                            LevSel_Ending:				; XREF: LevelSelect
000035F0 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
000035F6 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
000035FC 4E75                       		rts	
000035FE                            ; ===========================================================================
000035FE                            
000035FE                            LevSel_Credits:				; XREF: LevelSelect
000035FE 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00003604 103C 0091                  		move.b	#$91,d0
00003608 6100 DFB2                  		bsr.w	PlaySound_Special ; play credits music
0000360C 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00003612 4E75                       		rts	
00003614                            ; ===========================================================================
00003614                            
00003614                            LevSel_Level_SS:			; XREF: LevelSelect
00003614 D040                       		add.w	d0,d0
00003616 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
0000361A 6B00 FF8E                  		bmi.w	LevelSelect
0000361E 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
00003622 6600                       		bne.s	LevSel_Level	; if not, branch
00003624 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
0000362A 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
0000362E 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003634 7000                       		moveq	#0,d0
00003636 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000363A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000363E 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003642 4E75                       		rts	
00003644                            ; ===========================================================================
00003644                            
00003644                            LevSel_Level:				; XREF: LevSel_Level_SS
00003644 0240 3FFF                  		andi.w	#$3FFF,d0
00003648 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000364C                            
0000364C                            PlayLevel:				; XREF: ROM:00003246j ...
0000364C 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00003652 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003658 7000                       		moveq	#0,d0
0000365A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000365E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003662 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003666 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
0000366A 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
0000366E 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
00003672 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
00003676 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
0000367A 103C 00E0                  		move.b	#$E0,d0
0000367E 6100 DF3C                  		bsr.w	PlaySound_Special ; fade out music
00003682 4E75                       		rts	
00003684                            ; ===========================================================================
00003684                            ; ---------------------------------------------------------------------------
00003684                            ; Level	select - level pointers
00003684                            ; ---------------------------------------------------------------------------
00003684                            LSelectPointers:
00003684                            		incbin	misc\ls_point.bin
000036AE                            		even
000036AE                            ; ---------------------------------------------------------------------------
000036AE                            ; Level	select codes
000036AE                            ; ---------------------------------------------------------------------------
000036AE                            LevelSelectCode_J:
000036AE                            		incbin	misc\ls_jcode.bin
000036B4                            		even
000036B4                            
000036B4                            LevelSelectCode_US:
000036B4                            		incbin	misc\ls_ucode.bin
000036BA                            		even
000036BA                            ; ===========================================================================
000036BA                            
000036BA                            ; ---------------------------------------------------------------------------
000036BA                            ; Demo mode
000036BA                            ; ---------------------------------------------------------------------------
000036BA                            
000036BA                            Demo:					; XREF: TitleScreen
000036BA 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000036C0                            
000036C0                            loc_33B6:				; XREF: loc_33E4
000036C0 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000036C6 6100 F566                  		bsr.w	DelayProgram
000036CA 6100 0000                  		bsr.w	DeformBgLayer
000036CE 6100 E48C                  		bsr.w	PalCycle_Load
000036D2 6100 E138                  		bsr.w	RunPLC_RAM
000036D6 3038 D008                  		move.w	($FFFFD008).w,d0
000036DA 5440                       		addq.w	#2,d0
000036DC 31C0 D008                  		move.w	d0,($FFFFD008).w
000036E0 0C40 1C00                  		cmpi.w	#$1C00,d0
000036E4 6500                       		bcs.s	loc_33E4
000036E6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
000036EC 4E75                       		rts	
000036EE                            ; ===========================================================================
000036EE                            
000036EE                            loc_33E4:				; XREF: Demo
000036EE 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000036F4 6600 FDE8                  		bne.w	Title_ChkLevSel	; if yes, branch
000036F8 4A78 F614                  		tst.w	($FFFFF614).w
000036FC 6600 FFC2                  		bne.w	loc_33B6
00003700 103C 00E0                  		move.b	#$E0,d0
00003704 6100 DEB6                  		bsr.w	PlaySound_Special ; fade out music
00003708 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
0000370C 0240 0007                  		andi.w	#7,d0
00003710 D040                       		add.w	d0,d0
00003712 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00003716 31C0 FE10                  		move.w	d0,($FFFFFE10).w
0000371A 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
0000371E 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00003724 6500                       		bcs.s	loc_3422	; if yes, branch
00003726 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
0000372C                            
0000372C                            loc_3422:
0000372C 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00003732 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
00003738 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
0000373C 6600                       		bne.s	Demo_Level	; if not, branch
0000373E 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003744 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
00003748 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
0000374C                            
0000374C                            Demo_Level:
0000374C 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003752 7000                       		moveq	#0,d0
00003754 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003758 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000375C 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003760 4E75                       		rts	
00003762                            ; ===========================================================================
00003762                            ; ---------------------------------------------------------------------------
00003762                            ; Levels used in demos
00003762                            ; ---------------------------------------------------------------------------
00003762                            Demo_Levels:	incbin	misc\dm_ord1.bin
0000376A                            		even
0000376A                            
0000376A                            ; ---------------------------------------------------------------------------
0000376A                            ; Subroutine to	change what you're selecting in the level select
0000376A                            ; ---------------------------------------------------------------------------
0000376A                            
0000376A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000376A                            
0000376A                            
0000376A                            LevSelControls:				; XREF: LevelSelect
0000376A 1238 F605                  		move.b	($FFFFF605).w,d1
0000376E 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003772 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00003774 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003778 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
0000377A                            
0000377A                            LevSel_UpDown:
0000377A 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003780 1238 F604                  		move.b	($FFFFF604).w,d1
00003784 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00003788 6700                       		beq.s	LevSel_SndTest	; if not, branch
0000378A 3C38 FF82                  		move.w	($FFFFFF82).w,d6
0000378E 0801 0000                  		btst	#0,d1		; is up	pressed?
00003792 6700                       		beq.s	LevSel_Down	; if not, branch
00003794 5346                       		subq.w	#1,d6		; move up 1 selection
00003796 6400                       		bcc.s	LevSel_Down
00003798 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
0000379A                            
0000379A                            LevSel_Down:
0000379A 0801 0001                  		btst	#1,d1		; is down pressed?
0000379E 6700                       		beq.s	LevSel_Refresh	; if not, branch
000037A0 5246                       		addq.w	#1,d6		; move down 1 selection
000037A2 0C46 0000                  		cmpi.w	#lsselectable+1,d6
000037A6 6500                       		bcs.s	LevSel_Refresh
000037A8 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
000037AA 6000                       		bra.s	LevSel_Refresh
000037AC                            		
000037AC                            LevSel_GoLR:
000037AC 0801 0002                  		btst	#2,d1		; is left pressed?
000037B0 6700                       		beq.s	LevSel_GoRight	; if not, branch
000037B2 0446 0000                  		sub.w	#lsrow2size,d6
000037B6 64E2                       		bcc.s	LevSel_Down
000037B8 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
000037BC 6000                       		bra.s	LevSel_Refresh
000037BE                            LevSel_GoRight:
000037BE 0646 0000                  		add.w	#lsrow1size,d6
000037C2 0C46 0000                  		cmpi.w	#lsselectable+1,d6
000037C6 6500                       		bcs.s	LevSel_Refresh
000037C8 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
000037CC                            ; ===========================================================================
000037CC                            LevSel_Refresh:
000037CC 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
000037D0 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
000037D4 363C C65F                  		move.w	#$C680-$21,d3
000037D8 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
000037DC 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
000037E0 4E75                       		rts	
000037E2                            		
000037E2                            LevSel_SndTest:				; XREF: LevSelControls
000037E2 1238 F605                  		move.b	($FFFFF605).w,d1
000037E6 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
000037EA 6700                       		beq.s	LevSel_NoMove	; if not, branch
000037EC 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is	item $14 selected?
000037F2 66B8                       		bne.s	LevSel_GoLR	; if not, branch
000037F4                            		
000037F4 3038 FF84                  		move.w	($FFFFFF84).w,d0
000037F8 0801 0002                  		btst	#2,d1		; is left pressed?
000037FC 6700                       		beq.s	LevSel_Right	; if not, branch
000037FE 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
00003800 6400                       		bcc.s	LevSel_Right
00003802 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
00003804                            
00003804                            LevSel_Right:
00003804 0801 0003                  		btst	#3,d1		; is right pressed?
00003808 6700                       		beq.s	LevSel_Refresh2	; if not, branch
0000380A 5240                       		addq.w	#1,d0		; add 1	to sound test
0000380C 0C40 0050                  		cmpi.w	#$50,d0
00003810 6500                       		bcs.s	LevSel_Refresh2
00003812 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
00003814                            
00003814                            LevSel_Refresh2:
00003814 363C C65F                  		move.w	#$C680-$21,d3
00003818 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
0000381C 6000 0000                  		bra.w	LevSelSndTest	; refresh text
00003820                            
00003820                            LevSel_NoMove:
00003820 4E75                       		rts	
00003822                            ; End of function LevSelControls
00003822                            
00003822                            ; ---------------------------------------------------------------------------
00003822                            ; Subroutine to load level select text
00003822                            ; ---------------------------------------------------------------------------
00003822                            
00003822                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003822 =60860003                  lsscrpos = $60860003
00003822 =00240000                  lsoff = $240000
00003822 =64C00003                  lsstpos = lsscrpos+$43A0000
00003822                            
00003822                            LevSelTextLoad_loop:
00003822 2D44 0004                  		move.l	d4,4(a6)
00003826 6100 0000                  		bsr.w	LevSel_ChgLine
0000382A 0684 0080 0000             		addi.l	#$800000,d4
00003830 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
00003834 4E75                       		rts
00003836                            LevSelTextLoad:				; XREF: TitleScreen
00003836 43F9 0000 0000             		lea	(LevelMenuText).l,a1
0000383C 4DF9 00C0 0000             		lea	($C00000).l,a6
00003842 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003846 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
0000384C                            		
0000384C 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
00003850 61D0                       		bsr.s	LevSelTextLoad_loop
00003852                            		
00003852                            		
00003852 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
00003858 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
0000385C 61C4                       		bsr.s	LevSelTextLoad_loop
0000385E 363C C65F                  		move.w	#$C680-$21,d3
00003862                            		
00003862                            LevSelHighlightCode:
00003862 4DF9 00C0 0000             		lea	($C00000).l,a6
00003868 7000                       		moveq	#0,d0
0000386A 3038 FF82                  		move.w	($FFFFFF82).w,d0
0000386E 3200                       		move.w	d0,d1
00003870 283C 6086 0003             		move.l	#lsscrpos,d4
00003876                            		
00003876 0C40 0000                  		cmpi.w	#lsrow1size,d0
0000387A 6D00                       		blt.s	@notsecond
0000387C                            		
0000387C 0440 0000                  		sub.w	#lsrow1size,d0
00003880 0684 0024 0000             		addi.l	#lsoff,d4
00003886                            	@notsecond:
00003886 EF48                       		lsl.w	#7,d0
00003888 4840                       		swap	d0
0000388A D880                       		add.l	d0,d4
0000388C 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003892 E749                       		lsl.w	#3,d1
00003894 D241                       		add.w	d1,d1
00003896 D2C1                       		adda.w	d1,a1
00003898 2D44 0004                  		move.l	d4,4(a6)
0000389C 6100 0000                  		bsr.w	LevSel_ChgLine
000038A0 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
000038A6 6700                       		beq.s	LevSelSndTest
000038A8 4E75                       		rts
000038AA                            
000038AA                            LevSelSndTest:
000038AA 0643 0030                  		add.w	#$30,d3
000038AE 23FC 64C0 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
000038B8 3038 FF84                  		move.w	($FFFFFF84).w,d0
000038BC 0640 0080                  		addi.w	#$80,d0
000038C0 1400                       		move.b	d0,d2
000038C2 E808                       		lsr.b	#4,d0
000038C4 6100 0000                  		bsr.w	LevSel_ChgSnd
000038C8 1002                       		move.b	d2,d0
000038CA 6100 0000                  		bsr.w	LevSel_ChgSnd
000038CE 4E75                       		rts	
000038D0                            ; End of function LevSelTextLoad
000038D0                            
000038D0                            
000038D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000038D0                            
000038D0                            
000038D0                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
000038D0 0240 000F                  		andi.w	#$F,d0
000038D4 0C00 000A                  		cmpi.b	#$A,d0
000038D8 6500                       		bcs.s	loc_3580
000038DA 5E00                       		addi.b	#7,d0
000038DC                            
000038DC                            loc_3580:
000038DC D043                       		add.w	d3,d0
000038DE 3C80                       		move.w	d0,(a6)
000038E0 4E75                       		rts	
000038E2                            ; End of function LevSel_ChgSnd
000038E2                            
000038E2                            
000038E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000038E2                            
000038E2                            
000038E2                            LevSel_ChgLine:				; XREF: LevSelTextLoad
000038E2 740F                       		moveq	#$10-1,d2		; number of characters per line
000038E4                            
000038E4                            @loop:
000038E4 7000                       		moveq	#0,d0
000038E6 1019                       		move.b	(a1)+,d0
000038E8 0C00 0020                  		cmpi.b	#$20,d0
000038EC 6E00                       		bgt.s	@draw
000038EE 3CBC 0000                  		move.w	#0,(a6)
000038F2 51CA FFF0                  		dbf	d2,@loop
000038F6 4E75                       		rts	
000038F8                            ; ===========================================================================
000038F8                            
000038F8                            @draw:				; XREF: LevSel_ChgLine
000038F8 D043                       		add.w	d3,d0
000038FA 3C80                       		move.w	d0,(a6)
000038FC 51CA FFE6                  		dbf	d2,@loop
00003900 4E75                       		rts	
00003902                            ; End of function LevSel_ChgLine
00003902                            		
00003902                            CStringSlop_draw:
00003902 D043                       		add.w	d3,d0
00003904 3C80                       		move.w	d0,(a6)
00003906                            CStringSlop:				; XREF: LevSelTextLoad
00003906 7000                       		moveq	#0,d0
00003908 1019                       		move.b	(a1)+,d0
0000390A 0C00 0020                  		cmpi.b	#$20,d0
0000390E 6EF2                       		bgt.s	CStringSlop_draw
00003910 4A00                       		tst.b	d0
00003912 6700                       		beq.s	@end
00003914 3CBC 0000                  		move.w	#0,(a6)
00003918 60EC                       		bra.s	CStringSlop
0000391A                            	@end:
0000391A 4E75                       		rts
0000391C                            ; End of function LevSel_ChgLine
0000391C                            
0000391C                            ; ===========================================================================
0000391C                            ; ---------------------------------------------------------------------------
0000391C                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
0000391C                            ; ---------------------------------------------------------------------------
0000391C                            LevelMenuText:	
0000391C 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
0000392C 2020 2020 2020 2020 2020+          dc.b    "               2"
0000393C 2020 2020 2020 2020 2020+          dc.b    "               3"
0000394C 4920 4C49 4B45 2046 494C+          dc.b    "I LIKE FILE    1"
0000395C 2045 5850 4C4F 5245 5220+          dc.b    " EXPLORER      2"
0000396C 2020 2020 2020 2020 2020+          dc.b    "               3"
0000397C 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
0000398C 2020 2020 2020 2020 2020+          dc.b    "               2"
0000399C 2020 2020 2020 2020 2020+          dc.b    "               3"
000039AC 444F 4E54 4745 5452 4944+          dc.b    "DONTGETRIDOTHIS1"
000039BC 2020 2020 2020 2020 2020+          dc.b    "               2"
000039CC 2020 2020 2020 2020 2020+          dc.b    "               3"
000039DC                            LMTSecondRow:
000039DC 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
000039EC 2042 4152 4E59 4152 4420+          dc.b    " BARNYARD      2"
000039FC 2020 2020 2020 2020 2020+          dc.b    "               3"
00003A0C 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
00003A1C 2020 2020 2020 2020 2020+          dc.b    "               2"
00003A2C 2020 2020 2020 2020 2020+          dc.b    "               3"
00003A3C 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
00003A4C 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
00003A5C 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST      "
00003A6C 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
00003A7C 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
00003A8C                            LMTSelectableEnd:
00003A8C 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00003A9C                            LMTEnd:
00003A9C                            
00003A9C                            
00003A9C =0000000C                  lsrow1size = (LMTSecondRow-LevelMenuText)/16
00003A9C =0000000C                  lsrow2size = (LMTEnd-LMTSecondRow)/16
00003A9C =00000016                  lsselectable = ((LMTSelectableEnd-LevelMenuText)/16)-1
00003A9C                            ; just to not break these
00003A9C =00000014                  lssndtest = lsrow2size+8
00003A9C =00000015                  lswifi = lsrow2size+9
00003A9C                            
00003A9C =6C820003                  nppos = $6C820003
00003A9C                            Now_Playing:
00003A9C 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
00003AAC                            		even
00003AAC                            NP_Track:
00003AAC 5452 4143 4B20 2400        		dc.b	"TRACK $",0
00003AB4                            		even
00003AB4                            NP_SFX:
00003AB4 534F 554E 4420 2400        		dc.b	"SOUND $",0
00003ABC                            		even
00003ABC                            
00003ABC                            ShowNow_Playing:
00003ABC 1C00                       		move.b	d0,d6
00003ABE 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003AC2 43FA FFD8                  		lea	Now_Playing(pc),a1
00003AC6 4DF9 00C0 0000             		lea		($C00000).l,a6
00003ACC 2D7C 6C82 0003 0004        		move.l	#nppos,4(a6)
00003AD4 6100 FE30                  		bsr.w	CStringSlop
00003AD8                            		
00003AD8 43FA FFD2                  		lea	NP_Track(pc),a1
00003ADC 0C06 00A0                  		cmpi.b	#$A0,d6
00003AE0 6D00                       		blt.s	@track
00003AE2                            		
00003AE2 43FA FFD0                  		lea	NP_SFX(pc),a1
00003AE6                            	@track:
00003AE6 6100 FE1E                  		bsr.w	CStringSlop
00003AEA                            		
00003AEA 0643 0030                  		add.w	#$30,d3
00003AEE 1006                       		move.b	d6,d0
00003AF0 1400                       		move.b	d0,d2
00003AF2 E808                       		lsr.b	#4,d0
00003AF4 6100 FDDA                  		bsr.w	LevSel_ChgSnd
00003AF8 1002                       		move.b	d2,d0
00003AFA 6100 FDD4                  		bsr.w	LevSel_ChgSnd
00003AFE 4E75                       		rts	
00003B00                            ; ---------------------------------------------------------------------------
00003B00                            ; Music	playlist
00003B00                            ; ---------------------------------------------------------------------------
00003B00                            MusicList1:	incbin	misc\muslist1.bin
00003B08                            		even
00003B08                            MusicList2:	incbin	misc\muslist2.bin
00003B0E                            		even
00003B0E                            MusicList3:	incbin	misc\muslist3.bin
00003B14                            		even
00003B14                            MusicList4:	incbin	misc\muslist4.bin
00003B1A                            		even
00003B1A                            ; ===========================================================================
00003B1A                            
00003B1A                            ; ---------------------------------------------------------------------------
00003B1A                            ; Level
00003B1A                            ; ---------------------------------------------------------------------------
00003B1A                            
00003B1A                            Level:					; XREF: GameModeArray
00003B1A 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003B20 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003B24 6B00                       		bmi.s	loc_37B6
00003B26 103C 00E0                  		move.b	#$E0,d0
00003B2A 6100 DA90                  		bsr.w	PlaySound_Special ; fade out music
00003B2E                            
00003B2E                            loc_37B6:
00003B2E 6100 DCCE                  		bsr.w	ClearPLC
00003B32 6100 E504                  		bsr.w	Pal_FadeFrom
00003B36 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003B3A 6B00                       		bmi.s	Level_ClrRam
00003B3C 46FC 2700                  		move	#$2700,sr
00003B40 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003B4A 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00003B50 6100 DB0E                  		bsr.w	NemDec
00003B54 46FC 2300                  		move	#$2300,sr
00003B58 7000                       		moveq	#0,d0
00003B5A 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003B5E E948                       		lsl.w	#4,d0
00003B60 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003B66 45F2 0000                  		lea	(a2,d0.w),a2
00003B6A 7000                       		moveq	#0,d0
00003B6C 1012                       		move.b	(a2),d0
00003B6E 6700                       		beq.s	loc_37FC
00003B70 6100 DC2E                  		bsr.w	LoadPLC		; load level patterns
00003B74                            
00003B74                            loc_37FC:
00003B74 7001                       		moveq	#1,d0
00003B76 6100 DC28                  		bsr.w	LoadPLC		; load standard	patterns
00003B7A                            
00003B7A                            Level_ClrRam:
00003B7A 43F8 D000                  		lea	($FFFFD000).w,a1
00003B7E 7000                       		moveq	#0,d0
00003B80 323C 07FF                  		move.w	#$7FF,d1
00003B84                            
00003B84                            Level_ClrObjRam:
00003B84 22C0                       		move.l	d0,(a1)+
00003B86 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003B8A                            
00003B8A 43F8 F628                  		lea	($FFFFF628).w,a1
00003B8E 7000                       		moveq	#0,d0
00003B90 323C 0015                  		move.w	#$15,d1
00003B94                            
00003B94                            Level_ClrVars:
00003B94 22C0                       		move.l	d0,(a1)+
00003B96 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003B9A                            
00003B9A 43F8 F700                  		lea	($FFFFF700).w,a1
00003B9E 7000                       		moveq	#0,d0
00003BA0 323C 003F                  		move.w	#$3F,d1
00003BA4                            
00003BA4                            Level_ClrVars2:
00003BA4 22C0                       		move.l	d0,(a1)+
00003BA6 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003BAA                            
00003BAA 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003BAE 7000                       		moveq	#0,d0
00003BB0 323C 0047                  		move.w	#$47,d1
00003BB4                            
00003BB4                            Level_ClrVars3:
00003BB4 22C0                       		move.l	d0,(a1)+
00003BB6 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003BBA                            
00003BBA 46FC 2700                  		move	#$2700,sr
00003BBE 6100 D924                  		bsr.w	ClearScreen
00003BC2 4DF9 00C0 0004             		lea	($C00004).l,a6
00003BC8 3CBC 8B03                  		move.w	#$8B03,(a6)
00003BCC 3CBC 8230                  		move.w	#$8230,(a6)
00003BD0 3CBC 8407                  		move.w	#$8407,(a6)
00003BD4 3CBC 857C                  		move.w	#$857C,(a6)
00003BD8 3CBC 9001                  		move.w	#$9001,(a6)
00003BDC 3CBC 8004                  		move.w	#$8004,(a6)
00003BE0 3CBC 8720                  		move.w	#$8720,(a6)
00003BE4 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003BEA 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003BEE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003BF4 6600                       		bne.s	Level_LoadPal	; if not, branch
00003BF6 3CBC 8014                  		move.w	#$8014,(a6)
00003BFA 7000                       		moveq	#0,d0
00003BFC 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003C00 D040                       		add.w	d0,d0
00003C02 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003C08 3031 0000                  		move.w	(a1,d0.w),d0
00003C0C 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003C10 31C0 F648                  		move.w	d0,($FFFFF648).w
00003C14 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003C18 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003C1C 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003C20 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003C26 6000 0000                  		bra.w	Level_LoadPal
00003C2A                            Player_Palette:
00003C2A                            		; normal, lz, sbz, blank
00003C2A 0003 000F 0010 0000        		dc.w	3,$F,$10,0 ; Sonic 
00003C32                            		
00003C32 0015 0016 0017 0000        		dc.w	21,22,23,0 ; Pal_Gronic 
00003C3A                            		; add more player palettes
00003C3A                            Level_LoadPal:
00003C3A 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003C40 46FC 2300                  		move	#$2300,sr
00003C44                            
00003C44 7200                       		moveq	#0,d1
00003C46 1238 FFE8                  		move.b	(v_character),d1
00003C4A D241                       		add.w	d1,d1
00003C4C D241                       		add.w	d1,d1
00003C4E D241                       		add.w	d1,d1
00003C50 303B 10D8                  		move.w	Player_Palette(pc,d1.w),d0	; load palette
00003C54                            		
00003C54 6100 E6A8                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003C58 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003C5E 6600                       		bne.s	Level_GetBgm	; if not, branch
00003C60 303B 10CA                  		move.w	Player_Palette+2(pc,d1.w),d0	; load palette
00003C64 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003C6A 6600                       		bne.s	Level_WaterPal	; if not, branch
00003C6C 303B 10C0                  		move.w	Player_Palette+4(pc,d1.w),d0	; load palette
00003C70                            
00003C70                            Level_WaterPal:
00003C70 6100 E6A4                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003C74 4A38 FE30                  		tst.b	($FFFFFE30).w
00003C78 6700                       		beq.s	Level_GetBgm
00003C7A 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003C80                            
00003C80                            ; NineKode begins here - How to play different songs on different acts
00003C80                             
00003C80                            Level_GetBgm:
00003C80 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003C84 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00003C88 7000                       		moveq	#0,d0
00003C8A 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003C8E                             
00003C8E 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003C94 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003C96 43F9 0000 3B00             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00003C9C 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003C9E                             
00003C9E                            Level_GetBgm2:
00003C9E 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003CA4 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003CA6 43F9 0000 3B08             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00003CAC 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003CAE                             
00003CAE                            Level_GetBgm3:
00003CAE 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003CB4 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003CB6 43F9 0000 3B0E             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00003CBC 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003CBE                             
00003CBE                            Level_GetBgm4:
00003CBE 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003CC4 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003CC6 43F9 0000 3B14             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00003CCC                             
00003CCC                            Level_PlayBgm:
00003CCC 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003CD0 6100 D8E4                  		bsr.w	PlaySound	; play music
00003CD4 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003CDA                             
00003CDA                            ; NineKode ends here
00003CDA                            
00003CDA                            Level_TtlCard:
00003CDA 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003CE0 6100 EF4C                  		bsr.w	DelayProgram
00003CE4 4EB9 0000 0000             		jsr	ObjectsLoad
00003CEA 4EB9 0000 0000             		jsr	BuildSprites
00003CF0 6100 DB1A                  		bsr.w	RunPLC_RAM
00003CF4 3038 D108                  		move.w	($FFFFD108).w,d0
00003CF8 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003CFC 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003CFE 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003D02 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003D04 4EB9 0000 0000             		jsr	Hud_Base
00003D0A                            
00003D0A                            loc_3946:
00003D0A 7003                       		moveq	#3,d0
00003D0C 6100 E5D4                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003D10 6100 0000                  		bsr.w	LevelSizeLoad
00003D14 6100 0000                  		bsr.w	DeformBgLayer
00003D18 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003D1E 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003D22 6100 0000                  		bsr.w	LoadTilesFromStart
00003D26 4EB9 0000 0000             		jsr	FloorLog_Unk
00003D2C 6100 0000                  		bsr.w	ColIndexLoad
00003D30 6100 0000                  		bsr.w	LZWaterEffects
00003D34 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003D3A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003D3E 6B00                       		bmi.s	Level_ChkDebug
00003D40 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003D46                            
00003D46                            Level_ChkDebug:
00003D46 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003D4A 6700                       		beq.s	Level_ChkWater	; if not, branch
00003D4C 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003D52 6700                       		beq.s	Level_ChkWater	; if not, branch
00003D54 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003D5A                            
00003D5A                            Level_ChkWater:
00003D5A 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00003D60 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00003D66 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003D6C 6600                       		bne.s	Level_LoadObj	; if not, branch
00003D6E 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00003D74 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00003D7A 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00003D80 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00003D86                            
00003D86                            Level_LoadObj:
00003D86 4EB9 0000 0000             		jsr	ObjPosLoad
00003D8C 4EB9 0000 0000             		jsr	ObjectsLoad
00003D92 4EB9 0000 0000             		jsr	BuildSprites
00003D98 7000                       		moveq	#0,d0
00003D9A 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00003D9E 6600                       		bne.s	loc_39E8	; if yes, branch
00003DA0 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003DA4 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003DA8 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00003DAC                            
00003DAC                            loc_39E8:
00003DAC 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00003DB0 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003DB4 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003DB8 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00003DBC                            		; move.b	d0,($FFFFFE2F).w
00003DBC 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
00003DC2 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003DC6 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003DCA 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003DCE 6100 0000                  		bsr.w	OscillateNumInit
00003DD2 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003DD8 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003DDE 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003DE4 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003DEA 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003DF0 7000                       		moveq	#0,d0
00003DF2 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003DF6 E548                       		lsl.w	#2,d0
00003DF8 2271 0000                  		movea.l	(a1,d0.w),a1
00003DFC 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003E00 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003E02 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003E08 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003E0C 5340                       		subq.w	#1,d0
00003E0E E548                       		lsl.w	#2,d0
00003E10 2271 0000                  		movea.l	(a1,d0.w),a1
00003E14                            
00003E14                            Level_Demo:
00003E14 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003E1A 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003E1E 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003E24 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003E28 6A00                       		bpl.s	Level_ChkWaterPal
00003E2A 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003E30 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003E36 6600                       		bne.s	Level_ChkWaterPal
00003E38 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003E3E                            
00003E3E                            Level_ChkWaterPal:
00003E3E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003E44 6600                       		bne.s	Level_Delay	; if not, branch
00003E46 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003E48 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003E4E 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003E50 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003E52                            
00003E52                            Level_WaterPal2:
00003E52 6100 E4DE                  		bsr.w	PalLoad4_Water
00003E56                            
00003E56                            Level_Delay:
00003E56 323C 0003                  		move.w	#3,d1
00003E5A                            
00003E5A                            Level_DelayLoop:
00003E5A 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003E60 6100 EDCC                  		bsr.w	DelayProgram
00003E64 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003E68                            
00003E68 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003E6E 6100 E128                  		bsr.w	Pal_FadeTo2
00003E72 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003E76 6B00                       		bmi.s	Level_ClrCardArt
00003E78 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003E7C 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003E80 5838 D124                  		addq.b	#4,($FFFFD124).w
00003E84 5838 D164                  		addq.b	#4,($FFFFD164).w
00003E88 6000                       		bra.s	Level_StartGame
00003E8A                            ; ===========================================================================
00003E8A                            
00003E8A                            Level_ClrCardArt:
00003E8A 7002                       		moveq	#2,d0
00003E8C 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load explosion patterns
00003E92 7000                       		moveq	#0,d0
00003E94 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003E98 0640 0015                  		addi.w	#$15,d0
00003E9C 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00003EA2                            
00003EA2                            Level_StartGame:
00003EA2 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003EA8                            
00003EA8                            ; ---------------------------------------------------------------------------
00003EA8                            ; Main level loop (when	all title card and loading sequences are finished)
00003EA8                            ; ---------------------------------------------------------------------------
00003EA8                            
00003EA8                            Level_MainLoop:
00003EA8 6100 D71E                  		bsr.w	PauseGame
00003EAC 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003EB2 6100 ED7A                  		bsr.w	DelayProgram
00003EB6 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003EBA 6100 0000                  		bsr.w	MoveSonicInDemo
00003EBE 6100 0000                  		bsr.w	LZWaterEffects
00003EC2 4EB9 0000 0000             		jsr	ObjectsLoad
00003EC8 4A78 FE08                  		tst.w	($FFFFFE08).w
00003ECC 6600                       		bne.s	loc_3B10
00003ECE 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003ED4 6400                       		bcc.s	loc_3B14
00003ED6                            
00003ED6                            loc_3B10:
00003ED6 6100 0000                  		bsr.w	DeformBgLayer
00003EDA                            
00003EDA                            loc_3B14:
00003EDA 4EB9 0000 0000             		jsr	BuildSprites
00003EE0 4EB9 0000 0000             		jsr	ObjPosLoad
00003EE6 6100 DC74                  		bsr.w	PalCycle_Load
00003EEA 6100 D920                  		bsr.w	RunPLC_RAM
00003EEE 6100 0000                  		bsr.w	OscillateNumDo
00003EF2 6100 0000                  		bsr.w	ChangeRingFrame
00003EF6 6100 0000                  		bsr.w	SignpostArtLoad
00003EFA 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003F00 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00003F02 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00003F06 6600 FC12                  		bne.w	Level		; if yes, branch
00003F0A 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00003F10 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00003F14 4E75                       		rts	
00003F16                            ; ===========================================================================
00003F16                            
00003F16                            Level_ChkDemo:				; XREF: Level_MainLoop
00003F16 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00003F1A 6600                       		bne.s	Level_EndDemo	; if yes, branch
00003F1C 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00003F20 6700                       		beq.s	Level_EndDemo	; if not, branch
00003F22 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003F28 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00003F2C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003F32 4E75                       		rts	
00003F34                            ; ===========================================================================
00003F34                            
00003F34                            Level_EndDemo:				; XREF: Level_ChkDemo
00003F34 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00003F3A 6600                       		bne.s	loc_3B88	; if not, branch
00003F3C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003F42 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003F46 6A00                       		bpl.s	loc_3B88	; if yes, branch
00003F48 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00003F4E                            
00003F4E                            loc_3B88:
00003F4E 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00003F54 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00003F5A 4278 F794                  		clr.w	($FFFFF794).w
00003F5E                            
00003F5E                            loc_3B98:
00003F5E 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003F64 6100 ECC8                  		bsr.w	DelayProgram
00003F68 6100 0000                  		bsr.w	MoveSonicInDemo
00003F6C 4EB9 0000 0000             		jsr	ObjectsLoad
00003F72 4EB9 0000 0000             		jsr	BuildSprites
00003F78 4EB9 0000 0000             		jsr	ObjPosLoad
00003F7E 5378 F794                  		subq.w	#1,($FFFFF794).w
00003F82 6A00                       		bpl.s	loc_3BC8
00003F84 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00003F8A 6100 E0CC                  		bsr.w	Pal_FadeOut
00003F8E                            
00003F8E                            loc_3BC8:
00003F8E 4A78 F614                  		tst.w	($FFFFF614).w
00003F92 66CA                       		bne.s	loc_3B98
00003F94 4E75                       		rts	
00003F96                            ; ===========================================================================
00003F96                            ; ---------------------------------------------------------------------------
00003F96                            ; Subroutine to	do special water effects in Labyrinth Zone
00003F96                            ; ---------------------------------------------------------------------------
00003F96                            
00003F96                            LZWaterEffects:				; XREF: Level
00003F96 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00003F9C 6600                       		bne.s	locret_3C28	; if not, branch
00003F9E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003FA4 6400                       		bcc.s	LZMoveWater
00003FA6 6100 0000                  		bsr.w	LZWindTunnels
00003FAA 6100 0000                  		bsr.w	LZWaterSlides
00003FAE 6100 0000                  		bsr.w	LZDynamicWater
00003FB2                            
00003FB2                            LZMoveWater:
00003FB2 4238 F64E                  		clr.b	($FFFFF64E).w
00003FB6 7000                       		moveq	#0,d0
00003FB8 1038 FE60                  		move.b	($FFFFFE60).w,d0
00003FBC E248                       		lsr.w	#1,d0
00003FBE D078 F648                  		add.w	($FFFFF648).w,d0
00003FC2 31C0 F646                  		move.w	d0,($FFFFF646).w
00003FC6 3038 F646                  		move.w	($FFFFF646).w,d0
00003FCA 9078 F704                  		sub.w	($FFFFF704).w,d0
00003FCE 6400                       		bcc.s	loc_3C1A
00003FD0 4A40                       		tst.w	d0
00003FD2 6A00                       		bpl.s	loc_3C1A
00003FD4 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00003FDA 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00003FE0                            
00003FE0                            loc_3C1A:
00003FE0 0C40 00DF                  		cmpi.w	#$DF,d0
00003FE4 6500                       		bcs.s	loc_3C24
00003FE6 303C 00DF                  		move.w	#$DF,d0
00003FEA                            
00003FEA                            loc_3C24:
00003FEA 11C0 F625                  		move.b	d0,($FFFFF625).w
00003FEE                            
00003FEE                            locret_3C28:
00003FEE 4E75                       		rts	
00003FF0                            ; ===========================================================================
00003FF0                            ; ---------------------------------------------------------------------------
00003FF0                            ; Labyrinth default water heights
00003FF0                            ; ---------------------------------------------------------------------------
00003FF0                            WaterHeight:	incbin	misc\lz_heigh.bin
00003FF8                            		even
00003FF8                            ; ===========================================================================
00003FF8                            
00003FF8                            ; ---------------------------------------------------------------------------
00003FF8                            ; Labyrinth dynamic water routines
00003FF8                            ; ---------------------------------------------------------------------------
00003FF8                            
00003FF8                            LZDynamicWater:				; XREF: LZWaterEffects
00003FF8 7000                       		moveq	#0,d0
00003FFA 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003FFE D040                       		add.w	d0,d0
00004000 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00004004 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00004008 7200                       		moveq	#0,d1
0000400A 1238 F64C                  		move.b	($FFFFF64C).w,d1
0000400E 3038 F64A                  		move.w	($FFFFF64A).w,d0
00004012 9078 F648                  		sub.w	($FFFFF648).w,d0
00004016 6700                       		beq.s	locret_3C5A
00004018 6400                       		bcc.s	loc_3C56
0000401A 4441                       		neg.w	d1
0000401C                            
0000401C                            loc_3C56:
0000401C D378 F648                  		add.w	d1,($FFFFF648).w
00004020                            
00004020                            locret_3C5A:
00004020 4E75                       		rts	
00004022                            ; ===========================================================================
00004022 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00004024 0000                       		dc.w DynWater_LZ2-DynWater_Index
00004026 0000                       		dc.w DynWater_LZ3-DynWater_Index
00004028 0000                       		dc.w DynWater_SBZ3-DynWater_Index
0000402A                            ; ===========================================================================
0000402A                            
0000402A                            DynWater_LZ1:				; XREF: DynWater_Index
0000402A 3038 F700                  		move.w	($FFFFF700).w,d0
0000402E 1438 F64D                  		move.b	($FFFFF64D).w,d2
00004032 6600                       		bne.s	loc_3CD0
00004034 323C 00B8                  		move.w	#$B8,d1
00004038 0C40 0600                  		cmpi.w	#$600,d0
0000403C 6500                       		bcs.s	loc_3CB4
0000403E 323C 0108                  		move.w	#$108,d1
00004042 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00004048 6500                       		bcs.s	loc_3CBA
0000404A 0C40 0C00                  		cmpi.w	#$C00,d0
0000404E 6500                       		bcs.s	loc_3CB4
00004050 323C 0318                  		move.w	#$318,d1
00004054 0C40 1080                  		cmpi.w	#$1080,d0
00004058 6500                       		bcs.s	loc_3CB4
0000405A 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00004060 323C 05C8                  		move.w	#$5C8,d1
00004064 0C40 1380                  		cmpi.w	#$1380,d0
00004068 6500                       		bcs.s	loc_3CB4
0000406A 323C 03A8                  		move.w	#$3A8,d1
0000406E B278 F648                  		cmp.w	($FFFFF648).w,d1
00004072 6600                       		bne.s	loc_3CB4
00004074 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
0000407A                            
0000407A                            loc_3CB4:
0000407A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000407E 4E75                       		rts	
00004080                            ; ===========================================================================
00004080                            
00004080                            loc_3CBA:				; XREF: DynWater_LZ1
00004080 0C40 0C80                  		cmpi.w	#$C80,d0
00004084 65F4                       		bcs.s	loc_3CB4
00004086 323C 00E8                  		move.w	#$E8,d1
0000408A 0C40 1500                  		cmpi.w	#$1500,d0
0000408E 65EA                       		bcs.s	loc_3CB4
00004090 323C 0108                  		move.w	#$108,d1
00004094 60E4                       		bra.s	loc_3CB4
00004096                            ; ===========================================================================
00004096                            
00004096                            loc_3CD0:				; XREF: DynWater_LZ1
00004096 5302                       		subq.b	#1,d2
00004098 6600                       		bne.s	locret_3CF4
0000409A 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
000040A0 6400                       		bcc.s	locret_3CF4
000040A2 323C 03A8                  		move.w	#$3A8,d1
000040A6 0C40 1300                  		cmpi.w	#$1300,d0
000040AA 6500                       		bcs.s	loc_3CF0
000040AC 323C 0108                  		move.w	#$108,d1
000040B0 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
000040B6                            
000040B6                            loc_3CF0:
000040B6 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000040BA                            
000040BA                            locret_3CF4:
000040BA 4E75                       		rts	
000040BC                            ; ===========================================================================
000040BC                            
000040BC                            DynWater_LZ2:				; XREF: DynWater_Index
000040BC 3038 F700                  		move.w	($FFFFF700).w,d0
000040C0 323C 0328                  		move.w	#$328,d1
000040C4 0C40 0500                  		cmpi.w	#$500,d0
000040C8 6500                       		bcs.s	loc_3D12
000040CA 323C 03C8                  		move.w	#$3C8,d1
000040CE 0C40 0B00                  		cmpi.w	#$B00,d0
000040D2 6500                       		bcs.s	loc_3D12
000040D4 323C 0428                  		move.w	#$428,d1
000040D8                            
000040D8                            loc_3D12:
000040D8 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000040DC 4E75                       		rts	
000040DE                            ; ===========================================================================
000040DE                            
000040DE                            DynWater_LZ3:				; XREF: DynWater_Index
000040DE 3038 F700                  		move.w	($FFFFF700).w,d0
000040E2 1438 F64D                  		move.b	($FFFFF64D).w,d2
000040E6 6600                       		bne.s	loc_3D5E
000040E8 323C 0900                  		move.w	#$900,d1
000040EC 0C40 0600                  		cmpi.w	#$600,d0
000040F0 6500                       		bcs.s	loc_3D54
000040F2 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
000040F8 6500                       		bcs.s	loc_3D54
000040FA 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00004100 6400                       		bcc.s	loc_3D54
00004102 323C 04C8                  		move.w	#$4C8,d1
00004106 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
0000410C 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004112 303C 00B7                  		move.w	#$B7,d0
00004116 6100 D4A4                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
0000411A                            
0000411A                            loc_3D54:
0000411A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000411E 31C1 F648                  		move.w	d1,($FFFFF648).w
00004122 4E75                       		rts	
00004124                            ; ===========================================================================
00004124                            
00004124                            loc_3D5E:				; XREF: DynWater_LZ3
00004124 5302                       		subq.b	#1,d2
00004126 6600                       		bne.s	loc_3DA8
00004128 323C 04C8                  		move.w	#$4C8,d1
0000412C 0C40 0770                  		cmpi.w	#$770,d0
00004130 6500                       		bcs.s	loc_3DA2
00004132 323C 0308                  		move.w	#$308,d1
00004136 0C40 1400                  		cmpi.w	#$1400,d0
0000413A 6500                       		bcs.s	loc_3DA2
0000413C 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
00004142 6700                       		beq.s	loc_3D8E
00004144 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
0000414A 6400                       		bcc.s	loc_3D8E
0000414C 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00004152 6400                       		bcc.s	loc_3DA2
00004154                            
00004154                            loc_3D8E:
00004154 323C 0508                  		move.w	#$508,d1
00004158 31C1 F648                  		move.w	d1,($FFFFF648).w
0000415C 0C40 1770                  		cmpi.w	#$1770,d0
00004160 6500                       		bcs.s	loc_3DA2
00004162 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004168                            
00004168                            loc_3DA2:
00004168 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000416C 4E75                       		rts	
0000416E                            ; ===========================================================================
0000416E                            
0000416E                            loc_3DA8:
0000416E 5302                       		subq.b	#1,d2
00004170 6600                       		bne.s	loc_3DD2
00004172 323C 0508                  		move.w	#$508,d1
00004176 0C40 1860                  		cmpi.w	#$1860,d0
0000417A 6500                       		bcs.s	loc_3DCC
0000417C 323C 0188                  		move.w	#$188,d1
00004180 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004184 6400                       		bcc.s	loc_3DC6
00004186 B278 F648                  		cmp.w	($FFFFF648).w,d1
0000418A 6600                       		bne.s	loc_3DCC
0000418C                            
0000418C                            loc_3DC6:
0000418C 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00004192                            
00004192                            loc_3DCC:
00004192 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004196 4E75                       		rts	
00004198                            ; ===========================================================================
00004198                            
00004198                            loc_3DD2:
00004198 5302                       		subq.b	#1,d2
0000419A 6600                       		bne.s	loc_3E0E
0000419C 323C 0188                  		move.w	#$188,d1
000041A0 0C40 1AF0                  		cmpi.w	#$1AF0,d0
000041A4 6500                       		bcs.s	loc_3E04
000041A6 323C 0900                  		move.w	#$900,d1
000041AA 0C40 1BC0                  		cmpi.w	#$1BC0,d0
000041AE 6500                       		bcs.s	loc_3E04
000041B0 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
000041B6 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
000041BC 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
000041C2 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
000041C8 4E75                       		rts	
000041CA                            ; ===========================================================================
000041CA                            
000041CA                            loc_3E04:
000041CA 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000041CE 31C1 F648                  		move.w	d1,($FFFFF648).w
000041D2 4E75                       		rts	
000041D4                            ; ===========================================================================
000041D4                            
000041D4                            loc_3E0E:
000041D4 0C40 1E00                  		cmpi.w	#$1E00,d0
000041D8 6500                       		bcs.s	locret_3E1A
000041DA 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
000041E0                            
000041E0                            locret_3E1A:
000041E0 4E75                       		rts	
000041E2                            ; ===========================================================================
000041E2                            
000041E2                            DynWater_SBZ3:				; XREF: DynWater_Index
000041E2 323C 0228                  		move.w	#$228,d1
000041E6 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
000041EC 6500                       		bcs.s	loc_3E2C
000041EE 323C 04C8                  		move.w	#$4C8,d1
000041F2                            
000041F2                            loc_3E2C:
000041F2 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000041F6 4E75                       		rts
000041F8                            
000041F8                            ; ---------------------------------------------------------------------------
000041F8                            ; Labyrinth Zone "wind tunnels"	subroutine
000041F8                            ; ---------------------------------------------------------------------------
000041F8                            
000041F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000041F8                            
000041F8                            
000041F8                            LZWindTunnels:				; XREF: LZWaterEffects
000041F8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000041FC 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00004200 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00004206 7000                       		moveq	#0,d0
00004208 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000420C E748                       		lsl.w	#3,d0
0000420E D4C0                       		adda.w	d0,a2
00004210 7200                       		moveq	#0,d1
00004212 4A38 FE11                  		tst.b	($FFFFFE11).w
00004216 6600                       		bne.s	loc_3E56
00004218 7201                       		moveq	#1,d1
0000421A 514A                       		subq.w	#8,a2
0000421C                            
0000421C                            loc_3E56:
0000421C 43F8 D000                  		lea	($FFFFD000).w,a1
00004220                            
00004220                            LZWind_Loop:
00004220 3029 0008                  		move.w	8(a1),d0
00004224 B052                       		cmp.w	(a2),d0
00004226 6500 0000                  		bcs.w	loc_3EF4
0000422A B06A 0004                  		cmp.w	4(a2),d0
0000422E 6400 0000                  		bcc.w	loc_3EF4
00004232 3429 000C                  		move.w	$C(a1),d2
00004236 B46A 0002                  		cmp.w	2(a2),d2
0000423A 6500                       		bcs.s	loc_3EF4
0000423C B46A 0006                  		cmp.w	6(a2),d2
00004240 6400                       		bcc.s	loc_3EF4
00004242 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004246 0200 003F                  		andi.b	#$3F,d0
0000424A 6600                       		bne.s	loc_3E90
0000424C 303C 00D0                  		move.w	#$D0,d0
00004250 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rushing water sound
00004256                            
00004256                            loc_3E90:
00004256 4A38 F7C9                  		tst.b	($FFFFF7C9).w
0000425A 6600 0000                  		bne.w	locret_3F0A
0000425E 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00004264 6400                       		bcc.s	loc_3F06
00004266 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
0000426C 0440 0080                  		subi.w	#$80,d0
00004270 B052                       		cmp.w	(a2),d0
00004272 6400                       		bcc.s	LZWind_Move
00004274 7002                       		moveq	#2,d0
00004276 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
0000427C 6600                       		bne.s	loc_3EBA
0000427E 4440                       		neg.w	d0
00004280                            
00004280                            loc_3EBA:
00004280 D169 000C                  		add.w	d0,$C(a1)
00004284                            
00004284                            LZWind_Move:
00004284 5869 0008                  		addq.w	#4,8(a1)
00004288 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
0000428E 337C 0000 0012             		move.w	#0,$12(a1)
00004294 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
0000429A 08E9 0001 0022             		bset	#1,$22(a1)
000042A0 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
000042A6 6700                       		beq.s	LZWind_MoveDown	; if not, branch
000042A8 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
000042AC                            
000042AC                            LZWind_MoveDown:
000042AC 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000042B2 6700                       		beq.s	locret_3EF2	; if not, branch
000042B4 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
000042B8                            
000042B8                            locret_3EF2:
000042B8 4E75                       		rts	
000042BA                            ; ===========================================================================
000042BA                            
000042BA                            loc_3EF4:				; XREF: LZWindTunnels
000042BA 504A                       		addq.w	#8,a2
000042BC 51C9 FF62                  		dbf	d1,LZWind_Loop
000042C0 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000042C4 6700                       		beq.s	locret_3F0A
000042C6 137C 0000 001C             		move.b	#0,$1C(a1)
000042CC                            
000042CC                            loc_3F06:
000042CC 4238 F7C7                  		clr.b	($FFFFF7C7).w
000042D0                            
000042D0                            locret_3F0A:
000042D0 4E75                       		rts	
000042D2                            ; End of function LZWindTunnels
000042D2                            
000042D2                            ; ===========================================================================
000042D2 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
000042DA 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
000042EC 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
000042FA                            					; XREF: LZWindTunnels
000042FA                            		even
000042FA                            
000042FA                            ; ---------------------------------------------------------------------------
000042FA                            ; Labyrinth Zone water slide subroutine
000042FA                            ; ---------------------------------------------------------------------------
000042FA                            
000042FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000042FA                            
000042FA                            
000042FA                            LZWaterSlides:				; XREF: LZWaterEffects
000042FA 43F8 D000                  		lea	($FFFFD000).w,a1
000042FE 0829 0001 0022             		btst	#1,$22(a1)
00004304 6600                       		bne.s	loc_3F6A
00004306 3029 000C                  		move.w	$C(a1),d0
0000430A E248                       		lsr.w	#1,d0
0000430C 0240 0380                  		andi.w	#$380,d0
00004310 1229 0008                  		move.b	8(a1),d1
00004314 0241 007F                  		andi.w	#$7F,d1
00004318 D041                       		add.w	d1,d0
0000431A 45F8 A400                  		lea	($FFFFA400).w,a2
0000431E 1032 0000                  		move.b	(a2,d0.w),d0
00004322 45FA 0000                  		lea	byte_3FCF(pc),a2
00004326 7206                       		moveq	#6,d1
00004328                            
00004328                            loc_3F62:
00004328 B022                       		cmp.b	-(a2),d0
0000432A 57C9 FFFC                  		dbeq	d1,loc_3F62
0000432E 6700                       		beq.s	LZSlide_Move
00004330                            
00004330                            loc_3F6A:
00004330 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00004334 6700                       		beq.s	locret_3F7A
00004336 337C 0005 003E             		move.w	#5,$3E(a1)
0000433C 4238 F7CA                  		clr.b	($FFFFF7CA).w
00004340                            
00004340                            locret_3F7A:
00004340 4E75                       		rts	
00004342                            ; ===========================================================================
00004342                            
00004342                            LZSlide_Move:				; XREF: LZWaterSlides
00004342 0C41 0003                  		cmpi.w	#3,d1
00004346 6400                       		bcc.s	loc_3F84
00004348 4E71                       		nop	
0000434A                            
0000434A                            loc_3F84:
0000434A 08A9 0000 0022             		bclr	#0,$22(a1)
00004350 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
00004354 1340 0014                  		move.b	d0,$14(a1)
00004358 6A00                       		bpl.s	loc_3F9A
0000435A 08E9 0000 0022             		bset	#0,$22(a1)
00004360                            
00004360                            loc_3F9A:
00004360 4229 0015                  		clr.b	$15(a1)
00004364 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
0000436A 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
00004370 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004374 0200 001F                  		andi.b	#$1F,d0
00004378 6600                       		bne.s	locret_3FBE
0000437A 303C 00D0                  		move.w	#$D0,d0
0000437E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play water sound
00004384                            
00004384                            locret_3FBE:
00004384 4E75                       		rts	
00004386                            ; End of function LZWaterSlides
00004386                            
00004386                            ; ===========================================================================
00004386 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00004395 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00004396                            		even
00004396                            
00004396                            ; ---------------------------------------------------------------------------
00004396                            ; Subroutine to	move Sonic in demo mode
00004396                            ; ---------------------------------------------------------------------------
00004396                            
00004396                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004396                            
00004396                            
00004396                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00004396 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000439A 6600                       		bne.s	MoveDemo_On	; if yes, branch
0000439C 4E75                       		rts	
0000439E                            ; ===========================================================================
0000439E                            
0000439E                            ; This is an unused subroutine for recording a demo
0000439E                            
0000439E                            MoveDemo_Record:
0000439E 43F9 0008 0000             		lea	($80000).l,a1
000043A4 3038 F790                  		move.w	($FFFFF790).w,d0
000043A8 D2C0                       		adda.w	d0,a1
000043AA 1038 F604                  		move.b	($FFFFF604).w,d0
000043AE B011                       		cmp.b	(a1),d0
000043B0 6600                       		bne.s	loc_3FFA
000043B2 5229 0001                  		addq.b	#1,1(a1)
000043B6 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
000043BC 6700                       		beq.s	loc_3FFA
000043BE 4E75                       		rts	
000043C0                            ; ===========================================================================
000043C0                            
000043C0                            loc_3FFA:				; XREF: MoveDemo_Record
000043C0 1340 0002                  		move.b	d0,2(a1)
000043C4 137C 0000 0003             		move.b	#0,3(a1)
000043CA 5478 F790                  		addq.w	#2,($FFFFF790).w
000043CE 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
000043D4 4E75                       		rts	
000043D6                            ; ===========================================================================
000043D6                            
000043D6                            MoveDemo_On:				; XREF: MoveSonicInDemo
000043D6 4A38 F604                  		tst.b	($FFFFF604).w
000043DA 6A00                       		bpl.s	loc_4022
000043DC 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000043E0 6B00                       		bmi.s	loc_4022
000043E2 11FC 0004 F600             		move.b	#4,($FFFFF600).w
000043E8                            
000043E8                            loc_4022:
000043E8 43F9 0000 0000             		lea	(Demo_Index).l,a1
000043EE 7000                       		moveq	#0,d0
000043F0 1038 FE10                  		move.b	($FFFFFE10).w,d0
000043F4 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
000043FA 6600                       		bne.s	loc_4038
000043FC 7006                       		moveq	#6,d0
000043FE                            
000043FE                            loc_4038:
000043FE E548                       		lsl.w	#2,d0
00004400 2271 0000                  		movea.l	(a1,d0.w),a1
00004404 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004408 6A00                       		bpl.s	loc_4056
0000440A 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00004410 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00004414 5340                       		subq.w	#1,d0
00004416 E548                       		lsl.w	#2,d0
00004418 2271 0000                  		movea.l	(a1,d0.w),a1
0000441C                            
0000441C                            loc_4056:
0000441C 3038 F790                  		move.w	($FFFFF790).w,d0
00004420 D2C0                       		adda.w	d0,a1
00004422 1011                       		move.b	(a1),d0
00004424 41F8 F604                  		lea	($FFFFF604).w,a0
00004428 1200                       		move.b	d0,d1
0000442A 1410                       		move.b	(a0),d2
0000442C B500                       		eor.b	d2,d0
0000442E 10C1                       		move.b	d1,(a0)+
00004430 C001                       		and.b	d1,d0
00004432 10C0                       		move.b	d0,(a0)+
00004434 5338 F792                  		subq.b	#1,($FFFFF792).w
00004438 6400                       		bcc.s	locret_407E
0000443A 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
00004440 5478 F790                  		addq.w	#2,($FFFFF790).w
00004444                            
00004444                            locret_407E:
00004444 4E75                       		rts	
00004446                            ; End of function MoveSonicInDemo
00004446                            
00004446                            ; ===========================================================================
00004446                            ; ---------------------------------------------------------------------------
00004446                            ; Demo sequence	pointers
00004446                            ; ---------------------------------------------------------------------------
00004446                            Demo_Index:
00004446                            	include "_inc\Demo pointers for intro.asm"
00004446                            ; ---------------------------------------------------------------------------
00004446                            ; Demo sequence	pointers
00004446                            ; ---------------------------------------------------------------------------
00004446 0000 0000                  	dc.l Demo_GHZ
0000444A 0000 0000                  	dc.l Demo_GHZ
0000444E 0000 0000                  	dc.l Demo_MZ
00004452 0000 0000                  	dc.l Demo_MZ
00004456 0000 0000                  	dc.l Demo_SYZ
0000445A 0000 0000                  	dc.l Demo_SYZ
0000445E 0000 0000                  	dc.l Demo_SS
00004462 0000 0000                  	dc.l Demo_SS
00004462 0000 0000                  	dc.l Demo_SS
00004466                            
00004466                            Demo_EndIndex:
00004466                            	include "_inc\Demo pointers for ending.asm"
00004466                            ; ---------------------------------------------------------------------------
00004466                            ; Demo (ending) sequence pointers
00004466                            ; ---------------------------------------------------------------------------
00004466 0000 0000                  	dc.l Demo_EndGHZ1
0000446A 0000 0000                  	dc.l Demo_EndMZ
0000446E 0000 0000                  	dc.l Demo_EndSYZ
00004472 0000 0000                  	dc.l Demo_EndLZ
00004476 0000 0000                  	dc.l Demo_EndSLZ
0000447A 0000 0000                  	dc.l Demo_EndSBZ1
0000447E 0000 0000                  	dc.l Demo_EndSBZ2
00004482 0000 0000                  	dc.l Demo_EndGHZ2
00004482 0000 0000                  	dc.l Demo_EndGHZ2
00004486                            
00004486 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00004496 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
000044A6 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
000044B6                            		even
000044B6                            
000044B6                            ; ---------------------------------------------------------------------------
000044B6                            ; Collision index loading subroutine
000044B6                            ; ---------------------------------------------------------------------------
000044B6                            
000044B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000044B6                            
000044B6                            
000044B6                            ColIndexLoad:				; XREF: Level
000044B6 7000                       		moveq	#0,d0
000044B8 1038 FE10                  		move.b	($FFFFFE10).w,d0
000044BC E548                       		lsl.w	#2,d0
000044BE 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
000044C4 4E75                       		rts	
000044C6                            ; End of function ColIndexLoad
000044C6                            
000044C6                            ; ===========================================================================
000044C6                            ; ---------------------------------------------------------------------------
000044C6                            ; Collision index pointers
000044C6                            ; ---------------------------------------------------------------------------
000044C6                            ColPointers:
000044C6                            	include "_inc\Collision index pointers.asm"
000044C6                            ; ---------------------------------------------------------------------------
000044C6                            ; Collision index pointers
000044C6                            ; ---------------------------------------------------------------------------
000044C6 0000 0000                  	dc.l Col_GHZ
000044CA 0000 0000                  	dc.l Col_LZ
000044CE 0000 0000                  	dc.l Col_MZ
000044D2 0000 0000                  	dc.l Col_SLZ
000044D6 0000 0000                  	dc.l Col_SYZ
000044DA 0000 0000                  	dc.l Col_SBZ
000044DA 0000 0000                  	dc.l Col_SBZ
000044DE                            
000044DE                            ; ---------------------------------------------------------------------------
000044DE                            ; Oscillating number subroutine
000044DE                            ; ---------------------------------------------------------------------------
000044DE                            
000044DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000044DE                            
000044DE                            
000044DE                            OscillateNumInit:			; XREF: Level
000044DE 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000044E2 45F9 0000 0000             		lea	(Osc_Data).l,a2
000044E8 7220                       		moveq	#$20,d1
000044EA                            
000044EA                            Osc_Loop:
000044EA 32DA                       		move.w	(a2)+,(a1)+
000044EC 51C9 FFFC                  		dbf	d1,Osc_Loop
000044F0 4E75                       		rts	
000044F2                            ; End of function OscillateNumInit
000044F2                            
000044F2                            ; ===========================================================================
000044F2 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
000044F6 0000 0080                  		dc.w 0,	$80
000044FA 0000 0080                  		dc.w 0,	$80
000044FE 0000 0080                  		dc.w 0,	$80
00004502 0000 0080                  		dc.w 0,	$80
00004506 0000 0080                  		dc.w 0,	$80
0000450A 0000 0080                  		dc.w 0,	$80
0000450E 0000 0080                  		dc.w 0,	$80
00004512 0000 0080                  		dc.w 0,	$80
00004516 0000 50F0                  		dc.w 0,	$50F0
0000451A 011E 2080                  		dc.w $11E, $2080
0000451E 00B4 3080                  		dc.w $B4, $3080
00004522 010E 5080                  		dc.w $10E, $5080
00004526 01C2 7080                  		dc.w $1C2, $7080
0000452A 0276 0080                  		dc.w $276, $80
0000452E 0000 0080                  		dc.w 0,	$80
00004532 0000                       		dc.w 0
00004534                            		even
00004534                            
00004534                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004534                            
00004534                            
00004534                            OscillateNumDo:				; XREF: Level
00004534 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000453A 6400                       		bcc.s	locret_41C4
0000453C 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004540 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00004546 3619                       		move.w	(a1)+,d3
00004548 720F                       		moveq	#$F,d1
0000454A                            
0000454A                            loc_4184:
0000454A 341A                       		move.w	(a2)+,d2
0000454C 381A                       		move.w	(a2)+,d4
0000454E 0303                       		btst	d1,d3
00004550 6600                       		bne.s	loc_41A4
00004552 3029 0002                  		move.w	2(a1),d0
00004556 D042                       		add.w	d2,d0
00004558 3340 0002                  		move.w	d0,2(a1)
0000455C D151                       		add.w	d0,0(a1)
0000455E B811                       		cmp.b	0(a1),d4
00004560 6200                       		bhi.s	loc_41BA
00004562 03C3                       		bset	d1,d3
00004564 6000                       		bra.s	loc_41BA
00004566                            ; ===========================================================================
00004566                            
00004566                            loc_41A4:				; XREF: OscillateNumDo
00004566 3029 0002                  		move.w	2(a1),d0
0000456A 9042                       		sub.w	d2,d0
0000456C 3340 0002                  		move.w	d0,2(a1)
00004570 D151                       		add.w	d0,0(a1)
00004572 B811                       		cmp.b	0(a1),d4
00004574 6300                       		bls.s	loc_41BA
00004576 0383                       		bclr	d1,d3
00004578                            
00004578                            loc_41BA:
00004578 5849                       		addq.w	#4,a1
0000457A 51C9 FFCE                  		dbf	d1,loc_4184
0000457E 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00004582                            
00004582                            locret_41C4:
00004582 4E75                       		rts	
00004584                            ; End of function OscillateNumDo
00004584                            
00004584                            ; ===========================================================================
00004584 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
00004588 0002 0018                  		dc.w 2,	$18
0000458C 0002 0020                  		dc.w 2,	$20
00004590 0002 0030                  		dc.w 2,	$30
00004594 0004 0020                  		dc.w 4,	$20
00004598 0008 0008                  		dc.w 8,	8
0000459C 0008 0040                  		dc.w 8,	$40
000045A0 0004 0040                  		dc.w 4,	$40
000045A4 0002 0050                  		dc.w 2,	$50
000045A8 0002 0050                  		dc.w 2,	$50
000045AC 0002 0020                  		dc.w 2,	$20
000045B0 0003 0030                  		dc.w 3,	$30
000045B4 0005 0050                  		dc.w 5,	$50
000045B8 0007 0070                  		dc.w 7,	$70
000045BC 0002 0010                  		dc.w 2,	$10
000045C0 0002 0010                  		dc.w 2,	$10
000045C4                            		even
000045C4                            
000045C4                            ; ---------------------------------------------------------------------------
000045C4                            ; Subroutine to	change object animation	variables (rings, giant	rings)
000045C4                            ; ---------------------------------------------------------------------------
000045C4                            
000045C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045C4                            
000045C4                            
000045C4                            ChangeRingFrame:			; XREF: Level
000045C4 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
000045C8 6A00                       		bpl.s	loc_421C
000045CA 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
000045D0 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
000045D4 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
000045DA                            
000045DA                            loc_421C:
000045DA 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
000045DE 6A00                       		bpl.s	loc_4232
000045E0 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
000045E6 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
000045EA 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
000045F0                            
000045F0                            loc_4232:
000045F0 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
000045F4 6A00                       		bpl.s	loc_4250
000045F6 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
000045FC 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00004600 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00004606 6500                       		bcs.s	loc_4250
00004608 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
0000460E                            
0000460E                            loc_4250:
0000460E 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00004612 6700                       		beq.s	locret_4272
00004614 7000                       		moveq	#0,d0
00004616 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
0000461A D078 FEC8                  		add.w	($FFFFFEC8).w,d0
0000461E 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
00004622 EF58                       		rol.w	#7,d0
00004624 0240 0003                  		andi.w	#3,d0
00004628 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
0000462C 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
00004630                            
00004630                            locret_4272:
00004630 4E75                       		rts	
00004632                            ; End of function ChangeRingFrame
00004632                            
00004632                            ; ---------------------------------------------------------------------------
00004632                            ; End-of-act signpost pattern loading subroutine
00004632                            ; ---------------------------------------------------------------------------
00004632                            
00004632                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004632                            
00004632                            
00004632                            SignpostArtLoad:			; XREF: Level
00004632 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004636 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
0000463A 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
00004640 6700                       		beq.s	Signpost_Exit	; if yes, branch
00004642 3038 F700                  		move.w	($FFFFF700).w,d0
00004646 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000464A 0441 0100                  		subi.w	#$100,d1
0000464E B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00004650 6D00                       		blt.s	Signpost_Exit	; if not, branch
00004652 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00004656 6700                       		beq.s	Signpost_Exit
00004658 B278 F728                  		cmp.w	($FFFFF728).w,d1
0000465C 6700                       		beq.s	Signpost_Exit
0000465E 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
00004662 7012                       		moveq	#$12,d0
00004664 6000 D16C                  		bra.w	LoadPLC2	; load signpost	patterns
00004668                            ; ===========================================================================
00004668                            
00004668                            Signpost_Exit:
00004668 4E75                       		rts	
0000466A                            ; End of function SignpostArtLoad
0000466A                            
0000466A                            ; ===========================================================================
0000466A                            Demo_GHZ:	incbin	demodata\i_ghz.bin
000046EA                            Demo_MZ:	incbin	demodata\i_mz.bin
0000481A                            Demo_SYZ:	incbin	demodata\i_syz.bin
0000489A                            Demo_SS:	incbin	demodata\i_ss.bin
0000499A                            ; ===========================================================================
0000499A                            
0000499A                            ; ---------------------------------------------------------------------------
0000499A                            ; Special Stage
0000499A                            ; ---------------------------------------------------------------------------
0000499A                            
0000499A                            SpecialStage:				; XREF: GameModeArray
0000499A 303C 00CA                  		move.w	#$CA,d0
0000499E 6100 CC1C                  		bsr.w	PlaySound_Special ; play special stage entry sound
000049A2 6100 D7BE                  		bsr.w	Pal_MakeFlash
000049A6 46FC 2700                  		move	#$2700,sr
000049AA 4DF9 00C0 0004             		lea	($C00004).l,a6
000049B0 3CBC 8B03                  		move.w	#$8B03,(a6)
000049B4 3CBC 8004                  		move.w	#$8004,(a6)
000049B8 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
000049BE 3CBC 9011                  		move.w	#$9011,(a6)
000049C2 3038 F60C                  		move.w	($FFFFF60C).w,d0
000049C6 0200 00BF                  		andi.b	#$BF,d0
000049CA 33C0 00C0 0004             		move.w	d0,($C00004).l
000049D0 6100 CB12                  		bsr.w	ClearScreen
000049D4 46FC 2300                  		move	#$2300,sr
000049D8 4BF9 00C0 0004             		lea	($C00004).l,a5
000049DE 3ABC 8F01                  		move.w	#$8F01,(a5)
000049E2 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
000049E8 3ABC 9780                  		move.w	#$9780,(a5)
000049EC 2ABC 5000 0081             		move.l	#$50000081,(a5)
000049F2 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000049FA                            
000049FA                            loc_463C:
000049FA 3215                       		move.w	(a5),d1
000049FC 0801 0001                  		btst	#1,d1
00004A00 66F8                       		bne.s	loc_463C
00004A02 3ABC 8F02                  		move.w	#$8F02,(a5)
00004A06 6100 0000                  		bsr.w	SS_BGLoad
00004A0A 7014                       		moveq	#$14,d0
00004A0C 6100 CEFE                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004A10 43F8 D000                  		lea	($FFFFD000).w,a1
00004A14 7000                       		moveq	#0,d0
00004A16 323C 07FF                  		move.w	#$7FF,d1
00004A1A                            
00004A1A                            SS_ClrObjRam:
00004A1A 22C0                       		move.l	d0,(a1)+
00004A1C 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004A20                            
00004A20 43F8 F700                  		lea	($FFFFF700).w,a1
00004A24 7000                       		moveq	#0,d0
00004A26 323C 003F                  		move.w	#$3F,d1
00004A2A                            
00004A2A                            SS_ClrRam:
00004A2A 22C0                       		move.l	d0,(a1)+
00004A2C 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00004A30                            
00004A30 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004A34 7000                       		moveq	#0,d0
00004A36 323C 0027                  		move.w	#$27,d1
00004A3A                            
00004A3A                            SS_ClrRam2:
00004A3A 22C0                       		move.l	d0,(a1)+
00004A3C 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004A40                            
00004A40 43F8 AA00                  		lea	($FFFFAA00).w,a1
00004A44 7000                       		moveq	#0,d0
00004A46 323C 007F                  		move.w	#$7F,d1
00004A4A                            
00004A4A                            SS_ClrNemRam:
00004A4A 22C0                       		move.l	d0,(a1)+
00004A4C 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004A50                            
00004A50 4238 F64E                  		clr.b	($FFFFF64E).w
00004A54 4278 FE02                  		clr.w	($FFFFFE02).w
00004A58 700A                       		moveq	#$A,d0
00004A5A 6100 D886                  		bsr.w	PalLoad1	; load special stage pallet
00004A5E 4EB9 0000 0000             		jsr	SS_Load
00004A64 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00004A6C 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00004A74 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00004A7A 6100 0000                  		bsr.w	PalCycle_SS
00004A7E 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004A82 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
00004A88 303C 0089                  		move.w	#$89,d0
00004A8C 6100 CB28                  		bsr.w	PlaySound	; play special stage BG	music
00004A90 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004A96 43F9 0000 4446             		lea	(Demo_Index).l,a1
00004A9C 7006                       		moveq	#6,d0
00004A9E E548                       		lsl.w	#2,d0
00004AA0 2271 0000                  		movea.l	(a1,d0.w),a1
00004AA4 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004AAA 5338 F792                  		subq.b	#1,($FFFFF792).w
00004AAE 4278 FE20                  		clr.w	($FFFFFE20).w
00004AB2 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004AB6 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004ABC 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004AC2 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004AC6 6700                       		beq.s	SS_NoDebug	; if not, branch
00004AC8 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00004ACE 6700                       		beq.s	SS_NoDebug	; if not, branch
00004AD0 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004AD6                            
00004AD6                            SS_NoDebug:
00004AD6 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004ADA 0000 0040                  		ori.b	#$40,d0
00004ADE 33C0 00C0 0004             		move.w	d0,($C00004).l
00004AE4 6100 D5D0                  		bsr.w	Pal_MakeWhite
00004AE8                            
00004AE8                            ; ---------------------------------------------------------------------------
00004AE8                            ; Main Special Stage loop
00004AE8                            ; ---------------------------------------------------------------------------
00004AE8                            
00004AE8                            SS_MainLoop:
00004AE8 6100 CADE                  		bsr.w	PauseGame
00004AEC 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004AF2 6100 E13A                  		bsr.w	DelayProgram
00004AF6 6100 F89E                  		bsr.w	MoveSonicInDemo
00004AFA 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004B00 4EB9 0000 0000             		jsr	ObjectsLoad
00004B06 4EB9 0000 0000             		jsr	BuildSprites
00004B0C 4EB9 0000 0000             		jsr	SS_ShowLayout
00004B12 6100 0000                  		bsr.w	SS_BGAnimate
00004B16 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004B1A 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004B1C 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004B20 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004B24                            
00004B24                            SS_ChkEnd:
00004B24 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004B2A 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00004B2E                            
00004B2E 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004B32 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004B36 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004B3C 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004B42 6500                       		bcs.s	SS_End		; if not, branch
00004B44 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004B48                            
00004B48                            SS_End:
00004B48 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004B4E 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004B54 4278 F794                  		clr.w	($FFFFF794).w
00004B58                            
00004B58                            SS_EndLoop:
00004B58 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004B5E 6100 E0CE                  		bsr.w	DelayProgram
00004B62 6100 F832                  		bsr.w	MoveSonicInDemo
00004B66 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004B6C 4EB9 0000 0000             		jsr	ObjectsLoad
00004B72 4EB9 0000 0000             		jsr	BuildSprites
00004B78 4EB9 0000 0000             		jsr	SS_ShowLayout
00004B7E 6100 0000                  		bsr.w	SS_BGAnimate
00004B82 5378 F794                  		subq.w	#1,($FFFFF794).w
00004B86 6A00                       		bpl.s	loc_47D4
00004B88 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004B8E 6100 D5F2                  		bsr.w	Pal_ToWhite
00004B92                            
00004B92                            loc_47D4:
00004B92 4A78 F614                  		tst.w	($FFFFF614).w
00004B96 66C0                       		bne.s	SS_EndLoop
00004B98                            
00004B98 46FC 2700                  		move	#$2700,sr
00004B9C 4DF9 00C0 0004             		lea	($C00004).l,a6
00004BA2 3CBC 8230                  		move.w	#$8230,(a6)
00004BA6 3CBC 8407                  		move.w	#$8407,(a6)
00004BAA 3CBC 9001                  		move.w	#$9001,(a6)
00004BAE 6100 C934                  		bsr.w	ClearScreen
00004BB2 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004BBC 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004BC2 6100 CA9C                  		bsr.w	NemDec
00004BC6 4EB9 0000 0000             		jsr	Hud_Base
00004BCC 46FC 2300                  		move	#$2300,sr
00004BD0 7011                       		moveq	#$11,d0
00004BD2 6100 D72A                  		bsr.w	PalLoad2	; load results screen pallet
00004BD6 7000                       		moveq	#0,d0
00004BD8 6100 CBF8                  		bsr.w	LoadPLC2
00004BDC 701B                       		moveq	#$1B,d0
00004BDE 6100 CBC0                  		bsr.w	LoadPLC		; load results screen patterns
00004BE2 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004BE8 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004BEE 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004BF2 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004BF6 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004BFA 303C 008E                  		move.w	#$8E,d0
00004BFE 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004C04 43F8 D000                  		lea	($FFFFD000).w,a1
00004C08 7000                       		moveq	#0,d0
00004C0A 323C 07FF                  		move.w	#$7FF,d1
00004C0E                            
00004C0E                            SS_EndClrObjRam:
00004C0E 22C0                       		move.l	d0,(a1)+
00004C10 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004C14                            
00004C14 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004C1A                            
00004C1A                            SS_NormalExit:
00004C1A 6100 C9AC                  		bsr.w	PauseGame
00004C1E 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004C24 6100 E008                  		bsr.w	DelayProgram
00004C28 4EB9 0000 0000             		jsr	ObjectsLoad
00004C2E 4EB9 0000 0000             		jsr	BuildSprites
00004C34 6100 CBD6                  		bsr.w	RunPLC_RAM
00004C38 4A78 FE02                  		tst.w	($FFFFFE02).w
00004C3C 67DC                       		beq.s	SS_NormalExit
00004C3E 4AB8 F680                  		tst.l	($FFFFF680).w
00004C42 66D6                       		bne.s	SS_NormalExit
00004C44 303C 00CA                  		move.w	#$CA,d0
00004C48 6100 C972                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004C4C 6100 D514                  		bsr.w	Pal_MakeFlash
00004C50 4E75                       		rts	
00004C52                            ; ===========================================================================
00004C52                            
00004C52                            SS_ToSegaScreen:
00004C52 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004C58 4E75                       		rts
00004C5A                            
00004C5A                            ; ---------------------------------------------------------------------------
00004C5A                            ; Special stage	background loading subroutine
00004C5A                            ; ---------------------------------------------------------------------------
00004C5A                            
00004C5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004C5A                            
00004C5A                            
00004C5A                            SS_BGLoad:				; XREF: SpecialStage
00004C5A 43F9 00FF 0000             		lea	($FF0000).l,a1
00004C60 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004C66 303C 4051                  		move.w	#$4051,d0
00004C6A 6100 CCD2                  		bsr.w	EniDec
00004C6E 263C 5000 0001             		move.l	#$50000001,d3
00004C74 45F9 00FF 0080             		lea	($FF0080).l,a2
00004C7A 7E06                       		moveq	#6,d7
00004C7C                            
00004C7C                            loc_48BE:
00004C7C 2003                       		move.l	d3,d0
00004C7E 7C03                       		moveq	#3,d6
00004C80 7800                       		moveq	#0,d4
00004C82 0C47 0003                  		cmpi.w	#3,d7
00004C86 6400                       		bcc.s	loc_48CC
00004C88 7801                       		moveq	#1,d4
00004C8A                            
00004C8A                            loc_48CC:
00004C8A 7A07                       		moveq	#7,d5
00004C8C                            
00004C8C                            loc_48CE:
00004C8C 224A                       		movea.l	a2,a1
00004C8E 0A04 0001                  		eori.b	#1,d4
00004C92 6600                       		bne.s	loc_48E2
00004C94 0C47 0006                  		cmpi.w	#6,d7
00004C98 6600                       		bne.s	loc_48F2
00004C9A 43F9 00FF 0000             		lea	($FF0000).l,a1
00004CA0                            
00004CA0                            loc_48E2:
00004CA0 48E7 F800                  		movem.l	d0-d4,-(sp)
00004CA4 7207                       		moveq	#7,d1
00004CA6 7407                       		moveq	#7,d2
00004CA8 6100 C996                  		bsr.w	ShowVDPGraphics
00004CAC 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004CB0                            
00004CB0                            loc_48F2:
00004CB0 0680 0010 0000             		addi.l	#$100000,d0
00004CB6 51CD FFD4                  		dbf	d5,loc_48CE
00004CBA 0680 0380 0000             		addi.l	#$3800000,d0
00004CC0 0A04 0001                  		eori.b	#1,d4
00004CC4 51CE FFC4                  		dbf	d6,loc_48CC
00004CC8 0683 1000 0000             		addi.l	#$10000000,d3
00004CCE 6A00                       		bpl.s	loc_491C
00004CD0 4843                       		swap	d3
00004CD2 0683 0000 C000             		addi.l	#$C000,d3
00004CD8 4843                       		swap	d3
00004CDA                            
00004CDA                            loc_491C:
00004CDA D4FC 0080                  		adda.w	#$80,a2
00004CDE 51CF FF9C                  		dbf	d7,loc_48BE
00004CE2 43F9 00FF 0000             		lea	($FF0000).l,a1
00004CE8 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004CEE 303C 4000                  		move.w	#$4000,d0
00004CF2 6100 CC4A                  		bsr.w	EniDec
00004CF6 43F9 00FF 0000             		lea	($FF0000).l,a1
00004CFC 203C 4000 0003             		move.l	#$40000003,d0
00004D02 723F                       		moveq	#$3F,d1
00004D04 741F                       		moveq	#$1F,d2
00004D06 6100 C938                  		bsr.w	ShowVDPGraphics
00004D0A 43F9 00FF 0000             		lea	($FF0000).l,a1
00004D10 203C 5000 0003             		move.l	#$50000003,d0
00004D16 723F                       		moveq	#$3F,d1
00004D18 743F                       		moveq	#$3F,d2
00004D1A 6100 C924                  		bsr.w	ShowVDPGraphics
00004D1E 4E75                       		rts	
00004D20                            ; End of function SS_BGLoad
00004D20                            
00004D20                            ; ---------------------------------------------------------------------------
00004D20                            ; Pallet cycling routine - special stage
00004D20                            ; ---------------------------------------------------------------------------
00004D20                            
00004D20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004D20                            
00004D20                            
00004D20                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004D20 4A78 F63A                  		tst.w	($FFFFF63A).w
00004D24 6600                       		bne.s	locret_49E6
00004D26 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004D2A 6A00                       		bpl.s	locret_49E6
00004D2C 4DF9 00C0 0004             		lea	($C00004).l,a6
00004D32 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004D36 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004D3A 0240 001F                  		andi.w	#$1F,d0
00004D3E E548                       		lsl.w	#2,d0
00004D40 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004D46 D0C0                       		adda.w	d0,a0
00004D48 1018                       		move.b	(a0)+,d0
00004D4A 6A00                       		bpl.s	loc_4992
00004D4C 303C 01FF                  		move.w	#$1FF,d0
00004D50                            
00004D50                            loc_4992:
00004D50 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004D54 7000                       		moveq	#0,d0
00004D56 1018                       		move.b	(a0)+,d0
00004D58 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004D5C 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004D62 43F1 0000                  		lea	(a1,d0.w),a1
00004D66 303C 8200                  		move.w	#-$7E00,d0
00004D6A 1019                       		move.b	(a1)+,d0
00004D6C 3C80                       		move.w	d0,(a6)
00004D6E 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004D72 303C 8400                  		move.w	#-$7C00,d0
00004D76 1018                       		move.b	(a0)+,d0
00004D78 3C80                       		move.w	d0,(a6)
00004D7A 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00004D84 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00004D8C 7000                       		moveq	#0,d0
00004D8E 1018                       		move.b	(a0)+,d0
00004D90 6B00                       		bmi.s	loc_49E8
00004D92 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00004D98 D2C0                       		adda.w	d0,a1
00004D9A 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00004D9E 24D9                       		move.l	(a1)+,(a2)+
00004DA0 24D9                       		move.l	(a1)+,(a2)+
00004DA2 24D9                       		move.l	(a1)+,(a2)+
00004DA4                            
00004DA4                            locret_49E6:
00004DA4 4E75                       		rts	
00004DA6                            ; ===========================================================================
00004DA6                            
00004DA6                            loc_49E8:				; XREF: PalCycle_SS
00004DA6 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004DAA 0C40 008A                  		cmpi.w	#$8A,d0
00004DAE 6500                       		bcs.s	loc_49F4
00004DB0 5241                       		addq.w	#1,d1
00004DB2                            
00004DB2                            loc_49F4:
00004DB2 C2FC 002A                  		mulu.w	#$2A,d1
00004DB6 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004DBC D2C1                       		adda.w	d1,a1
00004DBE 0240 007F                  		andi.w	#$7F,d0
00004DC2 0880 0000                  		bclr	#0,d0
00004DC6 6700                       		beq.s	loc_4A18
00004DC8 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004DCC 24D1                       		move.l	(a1),(a2)+
00004DCE 24E9 0004                  		move.l	4(a1),(a2)+
00004DD2 24E9 0008                  		move.l	8(a1),(a2)+
00004DD6                            
00004DD6                            loc_4A18:
00004DD6 D2FC 000C                  		adda.w	#$C,a1
00004DDA 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004DDE 0C40 000A                  		cmpi.w	#$A,d0
00004DE2 6500                       		bcs.s	loc_4A2E
00004DE4 0440 000A                  		subi.w	#$A,d0
00004DE8 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004DEC                            
00004DEC                            loc_4A2E:
00004DEC 3200                       		move.w	d0,d1
00004DEE D040                       		add.w	d0,d0
00004DF0 D041                       		add.w	d1,d0
00004DF2 D2C0                       		adda.w	d0,a1
00004DF4 24D9                       		move.l	(a1)+,(a2)+
00004DF6 34D9                       		move.w	(a1)+,(a2)+
00004DF8 4E75                       		rts	
00004DFA                            ; End of function PalCycle_SS
00004DFA                            
00004DFA                            ; ===========================================================================
00004DFA 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004E0A                            					; XREF: PalCycle_SS
00004E0A 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004E1A 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004E2A FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004E3A 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004E4A 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004E5A 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004E6A FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004E7A                            		even
00004E7A 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004E88                            					; XREF: PalCycle_SS
00004E88                            		even
00004E88                            
00004E88                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00004ED0                            		even
00004ED0                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00004FA2                            		even
00004FA2                            
00004FA2                            ; ---------------------------------------------------------------------------
00004FA2                            ; Subroutine to	make the special stage background animated
00004FA2                            ; ---------------------------------------------------------------------------
00004FA2                            
00004FA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004FA2                            
00004FA2                            
00004FA2                            SS_BGAnimate:				; XREF: SpecialStage
00004FA2 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00004FA6 6600                       		bne.s	loc_4BF6
00004FA8 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00004FAE 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004FB4                            
00004FB4                            loc_4BF6:
00004FB4 0C40 0008                  		cmpi.w	#8,d0
00004FB8 6400                       		bcc.s	loc_4C4E
00004FBA 0C40 0006                  		cmpi.w	#6,d0
00004FBE 6600                       		bne.s	loc_4C10
00004FC0 5278 F718                  		addq.w	#1,($FFFFF718).w
00004FC4 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00004FC8 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004FCE                            
00004FCE                            loc_4C10:
00004FCE 7000                       		moveq	#0,d0
00004FD0 3038 F708                  		move.w	($FFFFF708).w,d0
00004FD4 4440                       		neg.w	d0
00004FD6 4840                       		swap	d0
00004FD8 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00004FDE 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004FE2 7609                       		moveq	#9,d3
00004FE4                            
00004FE4                            loc_4C26:
00004FE4 302B 0002                  		move.w	2(a3),d0
00004FE8 6100 DC76                  		bsr.w	CalcSine
00004FEC 7400                       		moveq	#0,d2
00004FEE 1419                       		move.b	(a1)+,d2
00004FF0 C1C2                       		muls.w	d2,d0
00004FF2 E080                       		asr.l	#8,d0
00004FF4 36C0                       		move.w	d0,(a3)+
00004FF6 1419                       		move.b	(a1)+,d2
00004FF8 4882                       		ext.w	d2
00004FFA D55B                       		add.w	d2,(a3)+
00004FFC 51CB FFE6                  		dbf	d3,loc_4C26
00005000 47F8 AA00                  		lea	($FFFFAA00).w,a3
00005004 45F9 0000 0000             		lea	(byte_4CB8).l,a2
0000500A 6000                       		bra.s	loc_4C7E
0000500C                            ; ===========================================================================
0000500C                            
0000500C                            loc_4C4E:				; XREF: SS_BGAnimate
0000500C 0C40 000C                  		cmpi.w	#$C,d0
00005010 6600                       		bne.s	loc_4C74
00005012 5378 F718                  		subq.w	#1,($FFFFF718).w
00005016 47F8 AB00                  		lea	($FFFFAB00).w,a3
0000501A 243C 0001 8000             		move.l	#$18000,d2
00005020 7206                       		moveq	#6,d1
00005022                            
00005022                            loc_4C64:
00005022 2013                       		move.l	(a3),d0
00005024 9082                       		sub.l	d2,d0
00005026 26C0                       		move.l	d0,(a3)+
00005028 0482 0000 2000             		subi.l	#$2000,d2
0000502E 51C9 FFF2                  		dbf	d1,loc_4C64
00005032                            
00005032                            loc_4C74:
00005032 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005036 45F9 0000 0000             		lea	(byte_4CC4).l,a2
0000503C                            
0000503C                            loc_4C7E:
0000503C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00005040 3038 F718                  		move.w	($FFFFF718).w,d0
00005044 4440                       		neg.w	d0
00005046 4840                       		swap	d0
00005048 7600                       		moveq	#0,d3
0000504A 161A                       		move.b	(a2)+,d3
0000504C 3438 F70C                  		move.w	($FFFFF70C).w,d2
00005050 4442                       		neg.w	d2
00005052 0242 00FF                  		andi.w	#$FF,d2
00005056 E54A                       		lsl.w	#2,d2
00005058                            
00005058                            loc_4C9A:
00005058 301B                       		move.w	(a3)+,d0
0000505A 544B                       		addq.w	#2,a3
0000505C 7200                       		moveq	#0,d1
0000505E 121A                       		move.b	(a2)+,d1
00005060 5341                       		subq.w	#1,d1
00005062                            
00005062                            loc_4CA4:
00005062 2380 2000                  		move.l	d0,(a1,d2.w)
00005066 5842                       		addq.w	#4,d2
00005068 0242 03FC                  		andi.w	#$3FC,d2
0000506C 51C9 FFF4                  		dbf	d1,loc_4CA4
00005070 51CB FFE6                  		dbf	d3,loc_4C9A
00005074 4E75                       		rts	
00005076                            ; End of function SS_BGAnimate
00005076                            
00005076                            ; ===========================================================================
00005076 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005082                            		even
00005082 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
0000508A                            		even
0000508A 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
0000509E                            		even
0000509E                            					; XREF: SS_BGAnimate
0000509E                            ; ===========================================================================
0000509E                            
0000509E                            ; ---------------------------------------------------------------------------
0000509E                            ; Continue screen
0000509E                            ; ---------------------------------------------------------------------------
0000509E                            
0000509E                            ContinueScreen:				; XREF: GameModeArray
0000509E 6100 CF98                  		bsr.w	Pal_FadeFrom
000050A2 46FC 2700                  		move	#$2700,sr
000050A6 3038 F60C                  		move.w	($FFFFF60C).w,d0
000050AA 0200 00BF                  		andi.b	#$BF,d0
000050AE 33C0 00C0 0004             		move.w	d0,($C00004).l
000050B4 4DF9 00C0 0004             		lea	($C00004).l,a6
000050BA 3CBC 8004                  		move.w	#$8004,(a6)
000050BE 3CBC 8700                  		move.w	#$8700,(a6)
000050C2 6100 C420                  		bsr.w	ClearScreen
000050C6 43F8 D000                  		lea	($FFFFD000).w,a1
000050CA 7000                       		moveq	#0,d0
000050CC 323C 07FF                  		move.w	#$7FF,d1
000050D0                            
000050D0                            Cont_ClrObjRam:
000050D0 22C0                       		move.l	d0,(a1)+
000050D2 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
000050D6                            
000050D6 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000050E0 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000050E6 6100 C578                  		bsr.w	NemDec
000050EA 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
000050F4 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
000050FA 6100 C564                  		bsr.w	NemDec
000050FE 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00005108 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
0000510E 6100 C550                  		bsr.w	NemDec
00005112 720A                       		moveq	#10,d1
00005114 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
0000511A 7012                       		moveq	#$12,d0
0000511C 6100 D1C4                  		bsr.w	PalLoad1	; load continue	screen pallet
00005120 103C 0090                  		move.b	#$90,d0
00005124 6100 C490                  		bsr.w	PlaySound	; play continue	music
00005128 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
0000512E 42B8 F700                  		clr.l	($FFFFF700).w
00005132 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
0000513A 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
00005140 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00005146 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
0000514C 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00005152 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
00005158 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
0000515E 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
00005164 4EB9 0000 0000             		jsr	ObjectsLoad
0000516A 4EB9 0000 0000             		jsr	BuildSprites
00005170 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005174 0000 0040                  		ori.b	#$40,d0
00005178 33C0 00C0 0004             		move.w	d0,($C00004).l
0000517E 6100 CE12                  		bsr.w	Pal_FadeTo
00005182                            
00005182                            ; ---------------------------------------------------------------------------
00005182                            ; Continue screen main loop
00005182                            ; ---------------------------------------------------------------------------
00005182                            
00005182                            Cont_MainLoop:
00005182 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00005188 6100 DAA4                  		bsr.w	DelayProgram
0000518C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005192 6400                       		bcc.s	loc_4DF2
00005194 46FC 2700                  		move	#$2700,sr
00005198 3238 F614                  		move.w	($FFFFF614).w,d1
0000519C 82FC 003C                  		divu.w	#$3C,d1
000051A0 0281 0000 000F             		andi.l	#$F,d1
000051A6 4EB9 0000 0000             		jsr	ContScrCounter
000051AC 46FC 2300                  		move	#$2300,sr
000051B0                            
000051B0                            loc_4DF2:
000051B0 4EB9 0000 0000             		jsr	ObjectsLoad
000051B6 4EB9 0000 0000             		jsr	BuildSprites
000051BC 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
000051C2 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
000051C4 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000051CA 64B6                       		bcc.s	Cont_MainLoop
000051CC 4A78 F614                  		tst.w	($FFFFF614).w
000051D0 6600 FFB0                  		bne.w	Cont_MainLoop
000051D4 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000051DA 4E75                       		rts	
000051DC                            ; ===========================================================================
000051DC                            
000051DC                            Cont_GotoLevel:				; XREF: Cont_MainLoop
000051DC 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000051E2 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000051E8 7000                       		moveq	#0,d0
000051EA 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000051EE 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000051F2 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000051F6 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
000051FA 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
000051FE 4E75                       		rts	
00005200                            ; ===========================================================================
00005200                            
00005200                            ; ---------------------------------------------------------------------------
00005200                            ; Object 80 - Continue screen elements
00005200                            ; ---------------------------------------------------------------------------
00005200                            
00005200                            Obj80:					; XREF: Obj_Index
00005200 7000                       		moveq	#0,d0
00005202 1028 0024                  		move.b	$24(a0),d0
00005206 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
0000520A 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
0000520E                            ; ===========================================================================
0000520E 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00005210 0000                       		dc.w Obj80_Display-Obj80_Index
00005212 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
00005214 0000                       		dc.w Obj80_ChkType-Obj80_Index
00005216                            ; ===========================================================================
00005216                            
00005216                            Obj80_Main:				; XREF: Obj80_Index
00005216 5428 0024                  		addq.b	#2,$24(a0)
0000521A 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005222 317C 8500 0002             		move.w	#$8500,2(a0)
00005228 117C 0000 0001             		move.b	#0,1(a0)
0000522E 117C 003C 0019             		move.b	#$3C,$19(a0)
00005234 317C 0120 0008             		move.w	#$120,8(a0)
0000523A 317C 00C0 000A             		move.w	#$C0,$A(a0)
00005240 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
00005246                            
00005246                            Obj80_Display:				; XREF: Obj80_Index
00005246 4EF9 0000 0000             		jmp	DisplaySprite
0000524C                            ; ===========================================================================
0000524C                            Obj80_MiniSonicPos:
0000524C 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
0000525E 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
0000526A                            ; ===========================================================================
0000526A                            
0000526A                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
0000526A 2248                       		movea.l	a0,a1
0000526C 45F9 0000 524C             		lea	(Obj80_MiniSonicPos).l,a2
00005272 7200                       		moveq	#0,d1
00005274 1238 FE18                  		move.b	($FFFFFE18).w,d1
00005278 5501                       		subq.b	#2,d1
0000527A 6400                       		bcc.s	loc_4EC4
0000527C 4EF9 0000 0000             		jmp	DeleteObject
00005282                            ; ===========================================================================
00005282                            
00005282                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00005282 7601                       		moveq	#1,d3
00005284 0C01 000E                  		cmpi.b	#$E,d1
00005288 6500                       		bcs.s	loc_4ED0
0000528A 7600                       		moveq	#0,d3
0000528C 720E                       		moveq	#$E,d1
0000528E                            
0000528E                            loc_4ED0:
0000528E 1401                       		move.b	d1,d2
00005290 0202 0001                  		andi.b	#1,d2
00005294                            
00005294                            Obj80_MiniSonLoop:
00005294 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
00005298 335A 0008                  		move.w	(a2)+,8(a1)
0000529C 4A02                       		tst.b	d2
0000529E 6700                       		beq.s	loc_4EEA
000052A0 0469 000A 0008             		subi.w	#$A,8(a1)
000052A6                            
000052A6                            loc_4EEA:
000052A6 337C 00D0 000A             		move.w	#$D0,$A(a1)
000052AC 137C 0006 001A             		move.b	#6,$1A(a1)
000052B2 137C 0006 0024             		move.b	#6,$24(a1)
000052B8 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
000052C0 337C 8551 0002             		move.w	#$8551,2(a1)
000052C6 137C 0000 0001             		move.b	#0,1(a1)
000052CC 43E9 0040                  		lea	$40(a1),a1
000052D0 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
000052D4 43E9 FFC0                  		lea	-$40(a1),a1
000052D8 1343 0028                  		move.b	d3,$28(a1)
000052DC                            
000052DC                            Obj80_ChkType:				; XREF: Obj80_Index
000052DC 4A28 0028                  		tst.b	$28(a0)
000052E0 6700                       		beq.s	loc_4F40
000052E2 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000052E8 6500                       		bcs.s	loc_4F40
000052EA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000052EE 0200 0001                  		andi.b	#1,d0
000052F2 6600                       		bne.s	loc_4F40
000052F4 4A78 D010                  		tst.w	($FFFFD010).w
000052F8 6600                       		bne.s	Obj80_Delete
000052FA 4E75                       		rts	
000052FC                            ; ===========================================================================
000052FC                            
000052FC                            loc_4F40:				; XREF: Obj80_ChkType
000052FC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005300 0200 000F                  		andi.b	#$F,d0
00005304 6600                       		bne.s	Obj80_Display2
00005306 0868 0000 001A             		bchg	#0,$1A(a0)
0000530C                            
0000530C                            Obj80_Display2:
0000530C 4EF9 0000 0000             		jmp	DisplaySprite
00005312                            ; ===========================================================================
00005312                            
00005312                            Obj80_Delete:				; XREF: Obj80_ChkType
00005312 4EF9 0000 0000             		jmp	DeleteObject
00005318                            ; ===========================================================================
00005318                            
00005318                            ; ---------------------------------------------------------------------------
00005318                            ; Object 81 - Sonic on the continue screen
00005318                            ; ---------------------------------------------------------------------------
00005318                            
00005318                            Obj81:					; XREF: Obj_Index
00005318 7000                       		moveq	#0,d0
0000531A 1028 0024                  		move.b	$24(a0),d0
0000531E 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
00005322 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00005326 4EF9 0000 0000             		jmp	DisplaySprite
0000532C                            ; ===========================================================================
0000532C 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
0000532E 0000                       		dc.w Obj81_ChkLand-Obj81_Index
00005330 0000                       		dc.w Obj81_Animate-Obj81_Index
00005332 0000                       		dc.w Obj81_Run-Obj81_Index
00005334                            ; ===========================================================================
00005334                            
00005334                            Obj81_Main:				; XREF: Obj81_Index
00005334 5428 0024                  		addq.b	#2,$24(a0)
00005338 317C 00A0 0008             		move.w	#$A0,8(a0)
0000533E 317C 00C0 000C             		move.w	#$C0,$C(a0)
00005344 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0000534C 317C 0780 0002             		move.w	#$780,2(a0)
00005352 117C 0004 0001             		move.b	#4,1(a0)
00005358 117C 0002 0018             		move.b	#2,$18(a0)
0000535E 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
00005364 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
0000536A                            
0000536A                            Obj81_ChkLand:				; XREF: Obj81_Index
0000536A 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
00005370 6600                       		bne.s	Obj81_ShowFall	; if not, branch
00005372 5428 0024                  		addq.b	#2,$24(a0)
00005376 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
0000537A 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005382 317C 8500 0002             		move.w	#$8500,2(a0)
00005388 117C 0000 001C             		move.b	#0,$1C(a0)
0000538E 6000                       		bra.s	Obj81_Animate
00005390                            ; ===========================================================================
00005390                            
00005390                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005390 4EB9 0000 0000             		jsr	SpeedToPos
00005396 4EB9 0000 0000             		jsr	Sonic_Animate
0000539C 4EF9 0000 0000             		jmp	LoadSonicDynPLC
000053A2                            ; ===========================================================================
000053A2                            
000053A2                            Obj81_Animate:				; XREF: Obj81_Index
000053A2 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
000053A6 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
000053A8 43F9 0000 0000             		lea	(Ani_obj81).l,a1
000053AE 4EF9 0000 0000             		jmp	AnimateSprite
000053B4                            ; ===========================================================================
000053B4                            
000053B4                            Obj81_GetUp:				; XREF: Obj81_Animate
000053B4 5428 0024                  		addq.b	#2,$24(a0)
000053B8 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000053C0 317C 0780 0002             		move.w	#$780,2(a0)
000053C6 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
000053CC 4268 0014                  		clr.w	$14(a0)
000053D0 5168 000C                  		subq.w	#8,$C(a0)
000053D4 103C 00E0                  		move.b	#$E0,d0
000053D8 6100 C1E2                  		bsr.w	PlaySound_Special ; fade out music
000053DC                            
000053DC                            Obj81_Run:				; XREF: Obj81_Index
000053DC 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
000053E2 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
000053E4 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
000053EA 6000                       		bra.s	Obj81_ShowRun
000053EC                            ; ===========================================================================
000053EC                            
000053EC                            Obj81_AddSpeed:				; XREF: Obj81_Run
000053EC 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
000053F2                            
000053F2                            Obj81_ShowRun:				; XREF: Obj81_Run
000053F2 4EB9 0000 0000             		jsr	SpeedToPos
000053F8 4EB9 0000 0000             		jsr	Sonic_Animate
000053FE 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005404                            ; ===========================================================================
00005404                            Ani_obj81:
00005404                            	include "_anim\obj81.asm"
00005404                            ; ---------------------------------------------------------------------------
00005404                            ; Animation script - Sonic on the continue screen
00005404                            ; ---------------------------------------------------------------------------
00005404 0000                       		dc.w byte_504A-Ani_obj81
00005406 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
00005412 00                         		even
00005412 00                         		even
00005412                            
00005412                            ; ---------------------------------------------------------------------------
00005412                            ; Sprite mappings - Continue screen
00005412                            ; ---------------------------------------------------------------------------
00005412                            Map_obj80:
00005412                            	include "_maps\obj80.asm"
00005412                            ; ---------------------------------------------------------------------------
00005412                            ; Sprite mappings - Continue screen
00005412                            ; ---------------------------------------------------------------------------
00005412 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
00005416 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
0000541A 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
0000541E 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
00005422 0B                         byte_5066:	dc.b $B
00005423 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00005428 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
0000542D F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
00005432 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00005437 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
0000543C F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
00005441 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
00005446 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
0000544B 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
00005450 3805 2021 08               		dc.b $38, 5, $20, $21, 8
00005455 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
0000545A 03                         byte_509E:	dc.b 3
0000545B 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
00005460 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005465 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
0000546A 03                         byte_50AE:	dc.b 3
0000546B 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
00005470 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005475 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
0000547A 03                         byte_50BE:	dc.b 3
0000547B 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005480 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005485 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
0000548A 02                         byte_50CE:	dc.b 2
0000548B 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005490 6009 2800 00               		dc.b $60, 9, $28, 0, 0
00005495 01                         byte_50D9:	dc.b 1
00005496 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
0000549B 01                         byte_50DF:	dc.b 1
0000549C 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
000054A2 00                         		even
000054A2 00                         		even
000054A2                            
000054A2                            ; ===========================================================================
000054A2                            ; ---------------------------------------------------------------------------
000054A2                            ; Ending sequence in Green Hill	Zone
000054A2                            ; ---------------------------------------------------------------------------
000054A2                            
000054A2                            EndingSequence:				; XREF: GameModeArray
000054A2 103C 00E4                  		move.b	#$E4,d0
000054A6 6100 C114                  		bsr.w	PlaySound_Special ; stop music
000054AA 6100 CB8C                  		bsr.w	Pal_FadeFrom
000054AE 43F8 D000                  		lea	($FFFFD000).w,a1
000054B2 7000                       		moveq	#0,d0
000054B4 323C 07FF                  		move.w	#$7FF,d1
000054B8                            
000054B8                            End_ClrObjRam:
000054B8 22C0                       		move.l	d0,(a1)+
000054BA 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
000054BE                            
000054BE 43F8 F628                  		lea	($FFFFF628).w,a1
000054C2 7000                       		moveq	#0,d0
000054C4 323C 0015                  		move.w	#$15,d1
000054C8                            
000054C8                            End_ClrRam:
000054C8 22C0                       		move.l	d0,(a1)+
000054CA 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
000054CE                            
000054CE 43F8 F700                  		lea	($FFFFF700).w,a1
000054D2 7000                       		moveq	#0,d0
000054D4 323C 003F                  		move.w	#$3F,d1
000054D8                            
000054D8                            End_ClrRam2:
000054D8 22C0                       		move.l	d0,(a1)+
000054DA 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
000054DE                            
000054DE 43F8 FE60                  		lea	($FFFFFE60).w,a1
000054E2 7000                       		moveq	#0,d0
000054E4 323C 0047                  		move.w	#$47,d1
000054E8                            
000054E8                            End_ClrRam3:
000054E8 22C0                       		move.l	d0,(a1)+
000054EA 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
000054EE                            
000054EE 46FC 2700                  		move	#$2700,sr
000054F2 3038 F60C                  		move.w	($FFFFF60C).w,d0
000054F6 0200 00BF                  		andi.b	#$BF,d0
000054FA 33C0 00C0 0004             		move.w	d0,($C00004).l
00005500 6100 BFE2                  		bsr.w	ClearScreen
00005504 4DF9 00C0 0004             		lea	($C00004).l,a6
0000550A 3CBC 8B03                  		move.w	#$8B03,(a6)
0000550E 3CBC 8230                  		move.w	#$8230,(a6)
00005512 3CBC 8407                  		move.w	#$8407,(a6)
00005516 3CBC 857C                  		move.w	#$857C,(a6)
0000551A 3CBC 9001                  		move.w	#$9001,(a6)
0000551E 3CBC 8004                  		move.w	#$8004,(a6)
00005522 3CBC 8720                  		move.w	#$8720,(a6)
00005526 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000552C 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00005530 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00005536 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
0000553C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005542 6700                       		beq.s	End_LoadData	; if yes, branch
00005544 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
0000554A                            
0000554A                            End_LoadData:
0000554A 701C                       		moveq	#$1C,d0
0000554C 6100 C3BE                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
00005550 4EB9 0000 0000             		jsr	Hud_Base
00005556 6100 0000                  		bsr.w	LevelSizeLoad
0000555A 6100 0000                  		bsr.w	DeformBgLayer
0000555E 08F8 0002 F754             		bset	#2,($FFFFF754).w
00005564 6100 0000                  		bsr.w	MainLoadBlockLoad
00005568 6100 0000                  		bsr.w	LoadTilesFromStart
0000556C 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
00005574 46FC 2300                  		move	#$2300,sr
00005578 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
0000557E 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00005582 6100 C538                  		bsr.w	KosDec
00005586 7003                       		moveq	#3,d0
00005588 6100 CD58                  		bsr.w	PalLoad1	; load Sonic's pallet
0000558C 303C 008B                  		move.w	#$8B,d0
00005590 6100 C024                  		bsr.w	PlaySound	; play ending sequence music
00005594 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0000559A 6700                       		beq.s	End_LoadSonic	; if not, branch
0000559C 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000055A2                            
000055A2                            End_LoadSonic:
000055A2 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000055A8 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
000055AE 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
000055B4 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
000055BA 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
000055C0 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
000055C6 4EB9 0000 0000             		jsr	ObjPosLoad
000055CC 4EB9 0000 0000             		jsr	ObjectsLoad
000055D2 4EB9 0000 0000             		jsr	BuildSprites
000055D8 7000                       		moveq	#0,d0
000055DA 31C0 FE20                  		move.w	d0,($FFFFFE20).w
000055DE 21C0 FE22                  		move.l	d0,($FFFFFE22).w
000055E2 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
000055E6 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
000055EA 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
000055EE 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
000055F2 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
000055F6 31C0 FE08                  		move.w	d0,($FFFFFE08).w
000055FA 31C0 FE02                  		move.w	d0,($FFFFFE02).w
000055FE 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00005602 6100 EEDA                  		bsr.w	OscillateNumInit
00005606 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
0000560C 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00005612 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00005618 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
0000561E 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005624 6100 D608                  		bsr.w	DelayProgram
00005628 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000562C 0000 0040                  		ori.b	#$40,d0
00005630 33C0 00C0 0004             		move.w	d0,($C00004).l
00005636 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000563C 6100 C954                  		bsr.w	Pal_FadeTo
00005640                            
00005640                            ; ---------------------------------------------------------------------------
00005640                            ; Main ending sequence loop
00005640                            ; ---------------------------------------------------------------------------
00005640                            
00005640                            End_MainLoop:
00005640 6100 BF86                  		bsr.w	PauseGame
00005644 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000564A 6100 D5E2                  		bsr.w	DelayProgram
0000564E 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005652 6100 0000                  		bsr.w	End_MoveSonic
00005656 4EB9 0000 0000             		jsr	ObjectsLoad
0000565C 6100 0000                  		bsr.w	DeformBgLayer
00005660 4EB9 0000 0000             		jsr	BuildSprites
00005666 4EB9 0000 0000             		jsr	ObjPosLoad
0000566C 6100 C4EE                  		bsr.w	PalCycle_Load
00005670 6100 EEC2                  		bsr.w	OscillateNumDo
00005674 6100 EF4E                  		bsr.w	ChangeRingFrame
00005678 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
0000567E 6700                       		beq.s	loc_52DA	; if yes, branch
00005680 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
00005686 103C 0091                  		move.b	#$91,d0
0000568A 6100 BF30                  		bsr.w	PlaySound_Special ; play credits music
0000568E 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
00005694 4E75                       		rts	
00005696                            ; ===========================================================================
00005696                            
00005696                            loc_52DA:
00005696 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
0000569A 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
0000569E                            
0000569E 4278 FE02                  		clr.w	($FFFFFE02).w
000056A2 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000056A8 4278 F794                  		clr.w	($FFFFF794).w
000056AC                            
000056AC                            End_AllEmlds:				; XREF: loc_5334
000056AC 6100 BF1A                  		bsr.w	PauseGame
000056B0 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000056B6 6100 D576                  		bsr.w	DelayProgram
000056BA 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000056BE 6100 0000                  		bsr.w	End_MoveSonic
000056C2 4EB9 0000 0000             		jsr	ObjectsLoad
000056C8 6100 0000                  		bsr.w	DeformBgLayer
000056CC 4EB9 0000 0000             		jsr	BuildSprites
000056D2 4EB9 0000 0000             		jsr	ObjPosLoad
000056D8 6100 EE5A                  		bsr.w	OscillateNumDo
000056DC 6100 EEE6                  		bsr.w	ChangeRingFrame
000056E0 5378 F794                  		subq.w	#1,($FFFFF794).w
000056E4 6A00                       		bpl.s	loc_5334
000056E6 31FC 0002 F794             		move.w	#2,($FFFFF794).w
000056EC 6100 CA94                  		bsr.w	Pal_ToWhite
000056F0                            
000056F0                            loc_5334:
000056F0 4A78 FE02                  		tst.w	($FFFFFE02).w
000056F4 6700 FFB6                  		beq.w	End_AllEmlds
000056F8 4278 FE02                  		clr.w	($FFFFFE02).w
000056FC 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00005702 4BF9 00C0 0004             		lea	($C00004).l,a5
00005708 4DF9 00C0 0000             		lea	($C00000).l,a6
0000570E 47F8 F700                  		lea	($FFFFF700).w,a3
00005712 49F8 A400                  		lea	($FFFFA400).w,a4
00005716 343C 4000                  		move.w	#$4000,d2
0000571A 6100 0000                  		bsr.w	LoadTilesFromStart2
0000571E 7013                       		moveq	#$13,d0
00005720 6100 CBC0                  		bsr.w	PalLoad1	; load ending pallet
00005724 6100 C990                  		bsr.w	Pal_MakeWhite
00005728 6000 FF16                  		bra.w	End_MainLoop
0000572C                            
0000572C                            ; ---------------------------------------------------------------------------
0000572C                            ; Subroutine controlling Sonic on the ending sequence
0000572C                            ; ---------------------------------------------------------------------------
0000572C                            
0000572C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000572C                            
0000572C                            
0000572C                            End_MoveSonic:				; XREF: End_MainLoop
0000572C 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
00005730 6600                       		bne.s	End_MoveSonic2
00005732 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
00005738 6400                       		bcc.s	End_MoveSonExit	; if not, branch
0000573A 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000573E 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
00005744 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
0000574A 4E75                       		rts	
0000574C                            ; ===========================================================================
0000574C                            
0000574C                            End_MoveSonic2:				; XREF: End_MoveSonic
0000574C 5500                       		subq.b	#2,d0
0000574E 6600                       		bne.s	End_MoveSonic3
00005750 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
00005756 6500                       		bcs.s	End_MoveSonExit	; if not, branch
00005758 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000575C 7000                       		moveq	#0,d0
0000575E 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
00005762 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
00005766 31C0 D014                  		move.w	d0,($FFFFD014).w
0000576A 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
00005770 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
00005776 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
0000577C 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00005782 4E75                       		rts	
00005784                            ; ===========================================================================
00005784                            
00005784                            End_MoveSonic3:				; XREF: End_MoveSonic
00005784 5500                       		subq.b	#2,d0
00005786 6600                       		bne.s	End_MoveSonExit
00005788 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000578C 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00005792 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
00005798 4278 D024                  		clr.w	($FFFFD024).w
0000579C                            
0000579C                            End_MoveSonExit:
0000579C 4E75                       		rts	
0000579E                            ; End of function End_MoveSonic
0000579E                            
0000579E                            ; ===========================================================================
0000579E                            ; ---------------------------------------------------------------------------
0000579E                            ; Object 87 - Sonic on ending sequence
0000579E                            ; ---------------------------------------------------------------------------
0000579E                            
0000579E                            Obj87:					; XREF: Obj_Index
0000579E 7000                       		moveq	#0,d0
000057A0 1028 0025                  		move.b	$25(a0),d0
000057A4 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
000057A8 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
000057AC 4EF9 0000 0000             		jmp	DisplaySprite
000057B2                            ; ===========================================================================
000057B2 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
000057B6 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
000057BA 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
000057BE 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
000057C2 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
000057C6                            ; ===========================================================================
000057C6                            
000057C6                            Obj87_Main:				; XREF: Obj87_Index
000057C6 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000057CC 6700                       		beq.s	Obj87_Main2	; if yes, branch
000057CE 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
000057D4 317C 00D8 0030             		move.w	#$D8,$30(a0)
000057DA 4E75                       		rts	
000057DC                            ; ===========================================================================
000057DC                            
000057DC                            Obj87_Main2:				; XREF: Obj87_Main
000057DC 5428 0025                  		addq.b	#2,$25(a0)
000057E0 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
000057E8 317C 03E1 0002             		move.w	#$3E1,2(a0)
000057EE 117C 0004 0001             		move.b	#4,1(a0)
000057F4 4228 0022                  		clr.b	$22(a0)
000057F8 117C 0002 0018             		move.b	#2,$18(a0)
000057FE 117C 0000 001A             		move.b	#0,$1A(a0)
00005804 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
0000580A                            
0000580A                            Obj87_MakeEmlds:			; XREF: Obj87_Index
0000580A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
0000580E 6600                       		bne.s	Obj87_Wait
00005810 5428 0025                  		addq.b	#2,$25(a0)
00005814 317C 0001 001C             		move.w	#1,$1C(a0)
0000581A 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00005820                            
00005820                            Obj87_Wait:
00005820 4E75                       		rts	
00005822                            ; ===========================================================================
00005822                            
00005822                            Obj87_LookUp:				; XREF: Obj87_Index
00005822 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
0000582A 6600                       		bne.s	locret_5480
0000582C 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00005832 317C 005A 0030             		move.w	#$5A,$30(a0)
00005838 5428 0025                  		addq.b	#2,$25(a0)
0000583C                            
0000583C                            locret_5480:
0000583C 4E75                       		rts	
0000583E                            ; ===========================================================================
0000583E                            
0000583E                            Obj87_ClrObjRam:			; XREF: Obj87_Index
0000583E 5368 0030                  		subq.w	#1,$30(a0)
00005842 6600                       		bne.s	Obj87_Wait2
00005844 43F8 D400                  		lea	($FFFFD400).w,a1
00005848 323C 00FF                  		move.w	#$FF,d1
0000584C                            
0000584C                            Obj87_ClrLoop:
0000584C 4299                       		clr.l	(a1)+
0000584E 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00005852 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00005858 5428 0025                  		addq.b	#2,$25(a0)
0000585C 117C 0001 001C             		move.b	#1,$1C(a0)
00005862 317C 003C 0030             		move.w	#$3C,$30(a0)
00005868                            
00005868                            Obj87_Wait2:
00005868 4E75                       		rts	
0000586A                            ; ===========================================================================
0000586A                            
0000586A                            Obj87_MakeLogo:				; XREF: Obj87_Index
0000586A 5368 0030                  		subq.w	#1,$30(a0)
0000586E 6600                       		bne.s	Obj87_Wait3
00005870 5428 0025                  		addq.b	#2,$25(a0)
00005874 317C 00B4 0030             		move.w	#$B4,$30(a0)
0000587A 117C 0002 001C             		move.b	#2,$1C(a0)
00005880 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005886                            
00005886                            Obj87_Wait3:
00005886 4E75                       		rts	
00005888                            ; ===========================================================================
00005888                            
00005888                            Obj87_Animate:				; XREF: Obj87_Index
00005888 43F9 0000 0000             		lea	(Ani_obj87).l,a1
0000588E 4EF9 0000 0000             		jmp	AnimateSprite
00005894                            ; ===========================================================================
00005894                            
00005894                            Obj87_Leap:				; XREF: Obj87_Index
00005894 5368 0030                  		subq.w	#1,$30(a0)
00005898 6600                       		bne.s	Obj87_Wait4
0000589A 5428 0025                  		addq.b	#2,$25(a0)
0000589E 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
000058A6 317C 03E1 0002             		move.w	#$3E1,2(a0)
000058AC 117C 0004 0001             		move.b	#4,1(a0)
000058B2 4228 0022                  		clr.b	$22(a0)
000058B6 117C 0002 0018             		move.b	#2,$18(a0)
000058BC 117C 0005 001A             		move.b	#5,$1A(a0)
000058C2 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
000058C8 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
000058CE 60B8                       		bra.s	Obj87_Animate
000058D0                            ; ===========================================================================
000058D0                            
000058D0                            Obj87_Wait4:				; XREF: Obj87_Leap
000058D0 4E75                       		rts	
000058D2                            ; ===========================================================================
000058D2                            Ani_obj87:
000058D2                            	include "_anim\obj87.asm"
000058D2                            ; ---------------------------------------------------------------------------
000058D2                            ; Animation script - Sonic on the ending sequence
000058D2                            ; ---------------------------------------------------------------------------
000058D2 0000                       		dc.w byte_551C-Ani_obj87
000058D4 0000                       		dc.w byte_552A-Ani_obj87
000058D6 0000                       		dc.w byte_5534-Ani_obj87
000058D8 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
000058E6 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
000058F0 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
000058F8                            		even
000058F8                            		even
000058F8                            
000058F8                            ; ===========================================================================
000058F8                            ; ---------------------------------------------------------------------------
000058F8                            ; Object 88 - chaos emeralds on	the ending sequence
000058F8                            ; ---------------------------------------------------------------------------
000058F8                            
000058F8                            Obj88:					; XREF: Obj_Index
000058F8 7000                       		moveq	#0,d0
000058FA 1028 0024                  		move.b	$24(a0),d0
000058FE 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005902 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005906 4EF9 0000 0000             		jmp	DisplaySprite
0000590C                            ; ===========================================================================
0000590C 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
0000590E 0000                       		dc.w Obj88_Move-Obj88_Index
00005910                            ; ===========================================================================
00005910                            
00005910                            Obj88_Main:				; XREF: Obj88_Index
00005910 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005916 6700                       		beq.s	Obj88_Main2
00005918 588F                       		addq.l	#4,sp
0000591A 4E75                       		rts	
0000591C                            ; ===========================================================================
0000591C                            
0000591C                            Obj88_Main2:				; XREF: Obj88_Main
0000591C 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00005922 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005928 2248                       		movea.l	a0,a1
0000592A 7600                       		moveq	#0,d3
0000592C 7401                       		moveq	#1,d2
0000592E 7205                       		moveq	#5,d1
00005930                            
00005930                            Obj88_MainLoop:
00005930 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00005934 5429 0024                  		addq.b	#2,$24(a1)
00005938 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00005940 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005946 137C 0004 0001             		move.b	#4,1(a1)
0000594C 137C 0001 0018             		move.b	#1,$18(a1)
00005952 3368 0008 0038             		move.w	8(a0),$38(a1)
00005958 3368 000C 003A             		move.w	$C(a0),$3A(a1)
0000595E 1342 001C                  		move.b	d2,$1C(a1)
00005962 1342 001A                  		move.b	d2,$1A(a1)
00005966 5202                       		addq.b	#1,d2
00005968 1343 0026                  		move.b	d3,$26(a1)
0000596C 0603 002A                  		addi.b	#$2A,d3
00005970 43E9 0040                  		lea	$40(a1),a1
00005974 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00005978                            
00005978                            Obj88_Move:				; XREF: Obj88_Index
00005978 3028 003E                  		move.w	$3E(a0),d0
0000597C D168 0026                  		add.w	d0,$26(a0)
00005980 1028 0026                  		move.b	$26(a0),d0
00005984 4EB9 0000 2C60             		jsr	(CalcSine).l
0000598A 7800                       		moveq	#0,d4
0000598C 1828 003C                  		move.b	$3C(a0),d4
00005990 C3C4                       		muls.w	d4,d1
00005992 E081                       		asr.l	#8,d1
00005994 C1C4                       		muls.w	d4,d0
00005996 E080                       		asr.l	#8,d0
00005998 D268 0038                  		add.w	$38(a0),d1
0000599C D068 003A                  		add.w	$3A(a0),d0
000059A0 3141 0008                  		move.w	d1,8(a0)
000059A4 3140 000C                  		move.w	d0,$C(a0)
000059A8 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
000059AE 6700                       		beq.s	loc_55FA
000059B0 0668 0020 003C             		addi.w	#$20,$3C(a0)
000059B6                            
000059B6                            loc_55FA:
000059B6 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
000059BC 6700                       		beq.s	loc_5608
000059BE 0668 0020 003E             		addi.w	#$20,$3E(a0)
000059C4                            
000059C4                            loc_5608:
000059C4 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
000059CA 6700                       		beq.s	locret_5614
000059CC 5368 003A                  		subq.w	#1,$3A(a0)
000059D0                            
000059D0                            locret_5614:
000059D0 4E75                       		rts	
000059D2                            ; ===========================================================================
000059D2                            ; ---------------------------------------------------------------------------
000059D2                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
000059D2                            ; ---------------------------------------------------------------------------
000059D2                            
000059D2                            Obj89:					; XREF: Obj_Index
000059D2 7000                       		moveq	#0,d0
000059D4 1028 0024                  		move.b	$24(a0),d0
000059D8 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
000059DC 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
000059E0                            ; ===========================================================================
000059E0 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
000059E2 0000                       		dc.w Obj89_Move-Obj89_Index
000059E4 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
000059E6                            ; ===========================================================================
000059E6                            
000059E6                            Obj89_Main:				; XREF: Obj89_Index
000059E6 5428 0024                  		addq.b	#2,$24(a0)
000059EA 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
000059F0 317C 00D8 000A             		move.w	#$D8,$A(a0)
000059F6 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
000059FE 317C 05C5 0002             		move.w	#$5C5,2(a0)
00005A04 117C 0000 0001             		move.b	#0,1(a0)
00005A0A 117C 0000 0018             		move.b	#0,$18(a0)
00005A10                            
00005A10                            Obj89_Move:				; XREF: Obj89_Index
00005A10 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005A16 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005A18 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005A1E 4EB9 0000 0000             		jsr	DisplaySprite
00005A24                            ; ===========================================================================
00005A24                            
00005A24                            Obj89_Delay:				; XREF: Obj89_Move
00005A24 5428 0024                  		addq.b	#2,$24(a0)
00005A28 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005A2E                            
00005A2E                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005A2E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005A32 6A00                       		bpl.s	Obj89_Display
00005A34 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005A3A                            
00005A3A                            Obj89_Display:
00005A3A 4EB9 0000 0000             		jsr	DisplaySprite
00005A40                            ; ===========================================================================
00005A40                            ; ---------------------------------------------------------------------------
00005A40                            ; Sprite mappings - Sonic on the ending	sequence
00005A40                            ; ---------------------------------------------------------------------------
00005A40                            Map_obj87:
00005A40                            	include "_maps\obj87.asm"
00005A40                            ; ---------------------------------------------------------------------------
00005A40                            ; Sprite mappings - Sonic on the ending	sequence
00005A40                            ; ---------------------------------------------------------------------------
00005A40 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00005A44 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005A48 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00005A4C 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00005A50 02                         byte_5690:	dc.b 2
00005A51 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005A56 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005A5B 03                         byte_569B:	dc.b 3
00005A5C FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00005A61 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00005A66 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005A6B 02                         byte_56AB:	dc.b 2
00005A6C EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00005A71 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00005A76 02                         byte_56B6:	dc.b 2
00005A77 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00005A7C FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005A81 02                         byte_56C1:	dc.b 2
00005A82 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005A87 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00005A8C 03                         byte_56CC:	dc.b 3
00005A8D EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005A92 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00005A97 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005A9C 07                         byte_56DC:	dc.b 7
00005A9D B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005AA2 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005AA7 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005AAC CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005AB1 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005AB6 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005ABB EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005AC0 18                         byte_5700:	dc.b $18
00005AC1 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005AC6 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005ACB 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005AD0 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005AD5 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005ADA 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005ADF 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005AE4 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005AE9 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005AEE B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005AF3 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005AF8 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005AFD C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005B02 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005B07 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005B0C D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005B11 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005B16 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005B1B E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005B20 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005B25 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005B2A E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005B2F F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005B34 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005B3A 00                         		even
00005B3A 00                         		even
00005B3A                            
00005B3A                            ; ---------------------------------------------------------------------------
00005B3A                            ; Sprite mappings - chaos emeralds on the ending sequence
00005B3A                            ; ---------------------------------------------------------------------------
00005B3A                            Map_obj88:
00005B3A                            	include "_maps\obj88.asm"
00005B3A                            ; ---------------------------------------------------------------------------
00005B3A                            ; Sprite mappings - chaos emeralds on the ending sequence
00005B3A                            ; ---------------------------------------------------------------------------
00005B3A 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005B3E 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005B42 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005B46 0000                       		dc.w byte_57AC-Map_obj88
00005B48 01                         byte_5788:	dc.b 1
00005B49 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005B4E 01                         byte_578E:	dc.b 1
00005B4F F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005B54 01                         byte_5794:	dc.b 1
00005B55 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005B5A 01                         byte_579A:	dc.b 1
00005B5B F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005B60 01                         byte_57A0:	dc.b 1
00005B61 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005B66 01                         byte_57A6:	dc.b 1
00005B67 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00005B6C 01                         byte_57AC:	dc.b 1
00005B6D F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005B72                            		even
00005B72                            		even
00005B72                            
00005B72                            ; ---------------------------------------------------------------------------
00005B72                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005B72                            ; ---------------------------------------------------------------------------
00005B72                            Map_obj89:
00005B72                            	include "_maps\obj89.asm"
00005B72                            ; ---------------------------------------------------------------------------
00005B72                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005B72                            ; ---------------------------------------------------------------------------
00005B72 0000                       		dc.w byte_57B4-Map_obj89
00005B74 03                         byte_57B4:	dc.b 3
00005B75 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005B7A F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005B7F F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005B84                            		even
00005B84                            		even
00005B84                            
00005B84                            ; ===========================================================================
00005B84                            ; ---------------------------------------------------------------------------
00005B84                            ; Credits ending sequence
00005B84                            ; ---------------------------------------------------------------------------
00005B84                            
00005B84                            Credits:				; XREF: GameModeArray
00005B84 6100 BC78                  		bsr.w	ClearPLC
00005B88 6100 C4AE                  		bsr.w	Pal_FadeFrom
00005B8C 4DF9 00C0 0004             		lea	($C00004).l,a6
00005B92 3CBC 8004                  		move.w	#$8004,(a6)
00005B96 3CBC 8230                  		move.w	#$8230,(a6)
00005B9A 3CBC 8407                  		move.w	#$8407,(a6)
00005B9E 3CBC 9001                  		move.w	#$9001,(a6)
00005BA2 3CBC 9200                  		move.w	#$9200,(a6)
00005BA6 3CBC 8B03                  		move.w	#$8B03,(a6)
00005BAA 3CBC 8720                  		move.w	#$8720,(a6)
00005BAE 4238 F64E                  		clr.b	($FFFFF64E).w
00005BB2 6100 B930                  		bsr.w	ClearScreen
00005BB6 43F8 D000                  		lea	($FFFFD000).w,a1
00005BBA 7000                       		moveq	#0,d0
00005BBC 323C 07FF                  		move.w	#$7FF,d1
00005BC0                            
00005BC0                            Cred_ClrObjRam:
00005BC0 22C0                       		move.l	d0,(a1)+
00005BC2 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005BC6                            
00005BC6 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005BD0 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005BD6 6100 BA88                  		bsr.w	NemDec
00005BDA 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005BDE 7000                       		moveq	#0,d0
00005BE0 323C 001F                  		move.w	#$1F,d1
00005BE4                            
00005BE4                            Cred_ClrPallet:
00005BE4 22C0                       		move.l	d0,(a1)+
00005BE6 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005BEA                            
00005BEA 7003                       		moveq	#3,d0
00005BEC 6100 C6F4                  		bsr.w	PalLoad1	; load Sonic's pallet
00005BF0 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005BF6 4EB9 0000 0000             		jsr	ObjectsLoad
00005BFC 4EB9 0000 0000             		jsr	BuildSprites
00005C02 6100 0000                  		bsr.w	EndingDemoLoad
00005C06 7000                       		moveq	#0,d0
00005C08 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005C0C E948                       		lsl.w	#4,d0
00005C0E 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005C14 45F2 0000                  		lea	(a2,d0.w),a2
00005C18 7000                       		moveq	#0,d0
00005C1A 1012                       		move.b	(a2),d0
00005C1C 6700                       		beq.s	loc_5862
00005C1E 6100 BB80                  		bsr.w	LoadPLC		; load level patterns
00005C22                            
00005C22                            loc_5862:
00005C22 7001                       		moveq	#1,d0
00005C24 6100 BB7A                  		bsr.w	LoadPLC		; load standard	level patterns
00005C28 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005C2E 6100 C362                  		bsr.w	Pal_FadeTo
00005C32                            
00005C32                            Cred_WaitLoop:
00005C32 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005C38 6100 CFF4                  		bsr.w	DelayProgram
00005C3C 6100 BBCE                  		bsr.w	RunPLC_RAM
00005C40 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005C44 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005C46 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005C4A 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005C4C 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005C52 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005C56 4E75                       		rts	
00005C58                            
00005C58                            ; ---------------------------------------------------------------------------
00005C58                            ; Ending sequence demo loading subroutine
00005C58                            ; ---------------------------------------------------------------------------
00005C58                            
00005C58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005C58                            
00005C58                            
00005C58                            EndingDemoLoad:				; XREF: Credits
00005C58 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005C5C 0240 000F                  		andi.w	#$F,d0
00005C60 D040                       		add.w	d0,d0
00005C62 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005C66 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005C6A 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005C6E 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005C74 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005C76 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005C7C 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005C82 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005C88 7000                       		moveq	#0,d0
00005C8A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005C8E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005C92 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005C96 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005C9A 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005CA0 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005CA2 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005CA8 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005CAC 303C 0008                  		move.w	#8,d0
00005CB0                            
00005CB0                            EndDemo_LampLoad:
00005CB0 24D9                       		move.l	(a1)+,(a2)+
00005CB2 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005CB6                            
00005CB6                            EndDemo_Exit:
00005CB6 4E75                       		rts	
00005CB8                            ; End of function EndingDemoLoad
00005CB8                            
00005CB8                            ; ===========================================================================
00005CB8                            ; ---------------------------------------------------------------------------
00005CB8                            ; Levels used in the end sequence demos
00005CB8                            ; ---------------------------------------------------------------------------
00005CB8                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005CC8                            
00005CC8                            ; ---------------------------------------------------------------------------
00005CC8                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005CC8                            ; ---------------------------------------------------------------------------
00005CC8                            EndDemo_LampVar:
00005CC8 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005CCA 0A00 062C 000D             		dc.w $A00, $62C, $D
00005CD0 0000 0000                  		dc.l 0
00005CD4 0000                       		dc.b 0,	0
00005CD6 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005CEA 0101                       		dc.b 1,	1
00005CEC                            ; ===========================================================================
00005CEC                            ; ---------------------------------------------------------------------------
00005CEC                            ; "TRY AGAIN" and "END"	screens
00005CEC                            ; ---------------------------------------------------------------------------
00005CEC                            
00005CEC                            TryAgainEnd:				; XREF: Credits
00005CEC 6100 BB10                  		bsr.w	ClearPLC
00005CF0 6100 C346                  		bsr.w	Pal_FadeFrom
00005CF4 4DF9 00C0 0004             		lea	($C00004).l,a6
00005CFA 3CBC 8004                  		move.w	#$8004,(a6)
00005CFE 3CBC 8230                  		move.w	#$8230,(a6)
00005D02 3CBC 8407                  		move.w	#$8407,(a6)
00005D06 3CBC 9001                  		move.w	#$9001,(a6)
00005D0A 3CBC 9200                  		move.w	#$9200,(a6)
00005D0E 3CBC 8B03                  		move.w	#$8B03,(a6)
00005D12 3CBC 8720                  		move.w	#$8720,(a6)
00005D16 4238 F64E                  		clr.b	($FFFFF64E).w
00005D1A 6100 B7C8                  		bsr.w	ClearScreen
00005D1E 43F8 D000                  		lea	($FFFFD000).w,a1
00005D22 7000                       		moveq	#0,d0
00005D24 323C 07FF                  		move.w	#$7FF,d1
00005D28                            
00005D28                            TryAg_ClrObjRam:
00005D28 22C0                       		move.l	d0,(a1)+
00005D2A 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005D2E                            
00005D2E 701D                       		moveq	#$1D,d0
00005D30 6100 BBDA                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005D34 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005D38 7000                       		moveq	#0,d0
00005D3A 323C 001F                  		move.w	#$1F,d1
00005D3E                            
00005D3E                            TryAg_ClrPallet:
00005D3E 22C0                       		move.l	d0,(a1)+
00005D40 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005D44                            
00005D44 7013                       		moveq	#$13,d0
00005D46 6100 C59A                  		bsr.w	PalLoad1	; load ending pallet
00005D4A 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005D4E 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005D54 4EB9 0000 0000             		jsr	ObjectsLoad
00005D5A 4EB9 0000 0000             		jsr	BuildSprites
00005D60 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005D66 6100 C22A                  		bsr.w	Pal_FadeTo
00005D6A                            
00005D6A                            ; ---------------------------------------------------------------------------
00005D6A                            ; "TRY AGAIN" and "END"	screen main loop
00005D6A                            ; ---------------------------------------------------------------------------
00005D6A                            TryAg_MainLoop:
00005D6A 6100 B85C                  		bsr.w	PauseGame
00005D6E 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005D74 6100 CEB8                  		bsr.w	DelayProgram
00005D78 4EB9 0000 0000             		jsr	ObjectsLoad
00005D7E 4EB9 0000 0000             		jsr	BuildSprites
00005D84 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00005D8A 6600                       		bne.s	TryAg_Exit	; if yes, branch
00005D8C 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00005D90 6700                       		beq.s	TryAg_Exit	; if yes, branch
00005D92 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00005D98 67D0                       		beq.s	TryAg_MainLoop
00005D9A                            
00005D9A                            TryAg_Exit:
00005D9A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005DA0 4E75                       		rts	
00005DA2                            
00005DA2                            ; ===========================================================================
00005DA2                            ; ---------------------------------------------------------------------------
00005DA2                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00005DA2                            ; ---------------------------------------------------------------------------
00005DA2                            
00005DA2                            Obj8B:					; XREF: Obj_Index
00005DA2 7000                       		moveq	#0,d0
00005DA4 1028 0024                  		move.b	$24(a0),d0
00005DA8 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00005DAC 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00005DB0 4EF9 0000 0000             		jmp	DisplaySprite
00005DB6                            ; ===========================================================================
00005DB6 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00005DB8 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00005DBA 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00005DBC 0000                       		dc.w loc_5A8E-Obj8B_Index
00005DBE                            ; ===========================================================================
00005DBE                            
00005DBE                            Obj8B_Main:				; XREF: Obj8B_Index
00005DBE 5428 0024                  		addq.b	#2,$24(a0)
00005DC2 317C 0120 0008             		move.w	#$120,8(a0)
00005DC8 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005DCE 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005DD6 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005DDC 117C 0000 0001             		move.b	#0,1(a0)
00005DE2 117C 0002 0018             		move.b	#2,$18(a0)
00005DE8 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005DEE 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005DF4 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005DF6 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005DFC 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005E02 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005E08 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005E0E                            
00005E0E                            Obj8B_Animate:				; XREF: Obj8B_Index
00005E0E 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005E14 4EF9 0000 0000             		jmp	AnimateSprite
00005E1A                            ; ===========================================================================
00005E1A                            
00005E1A                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005E1A 5428 0024                  		addq.b	#2,$24(a0)
00005E1E 7002                       		moveq	#2,d0
00005E20 0828 0000 001C             		btst	#0,$1C(a0)
00005E26 6700                       		beq.s	loc_5A6A
00005E28 4440                       		neg.w	d0
00005E2A                            
00005E2A                            loc_5A6A:
00005E2A 43F8 D800                  		lea	($FFFFD800).w,a1
00005E2E 7205                       		moveq	#5,d1
00005E30                            
00005E30                            loc_5A70:
00005E30 1340 003E                  		move.b	d0,$3E(a1)
00005E34 3400                       		move.w	d0,d2
00005E36 E742                       		asl.w	#3,d2
00005E38 D529 0026                  		add.b	d2,$26(a1)
00005E3C 43E9 0040                  		lea	$40(a1),a1
00005E40 51C9 FFEE                  		dbf	d1,loc_5A70
00005E44 5228 001A                  		addq.b	#1,$1A(a0)
00005E48 317C 0070 0030             		move.w	#112,$30(a0)
00005E4E                            
00005E4E                            loc_5A8E:				; XREF: Obj8B_Index
00005E4E 5368 0030                  		subq.w	#1,$30(a0)
00005E52 6A00                       		bpl.s	locret_5AA0
00005E54 0868 0000 001C             		bchg	#0,$1C(a0)
00005E5A 117C 0002 0024             		move.b	#2,$24(a0)
00005E60                            
00005E60                            locret_5AA0:
00005E60 4E75                       		rts	
00005E62                            ; ===========================================================================
00005E62                            Ani_obj8B:
00005E62                            	include "_anim\obj8B.asm"
00005E62                            ; ---------------------------------------------------------------------------
00005E62                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005E62                            ; ---------------------------------------------------------------------------
00005E62 0000                       		dc.w byte_5AA8-Ani_obj8B
00005E64 0000                       		dc.w byte_5AAC-Ani_obj8B
00005E66 0000                       		dc.w byte_5AB0-Ani_obj8B
00005E68 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005E6C 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005E70 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005E82                            		even
00005E82                            		even
00005E82                            
00005E82                            ; ===========================================================================
00005E82                            ; ---------------------------------------------------------------------------
00005E82                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005E82                            ; ---------------------------------------------------------------------------
00005E82                            
00005E82                            Obj8C:					; XREF: Obj_Index
00005E82 7000                       		moveq	#0,d0
00005E84 1028 0024                  		move.b	$24(a0),d0
00005E88 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005E8C 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005E90 4EF9 0000 0000             		jmp	DisplaySprite
00005E96                            ; ===========================================================================
00005E96 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005E98 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005E9A                            ; ===========================================================================
00005E9A                            
00005E9A                            Obj8C_Main:				; XREF: Obj8C_Index
00005E9A 2248                       		movea.l	a0,a1
00005E9C 7400                       		moveq	#0,d2
00005E9E 7600                       		moveq	#0,d3
00005EA0 7205                       		moveq	#5,d1
00005EA2 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005EA6                            
00005EA6                            Obj8C_MakeEms:				; XREF: loc_5B42
00005EA6 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00005EAA 5429 0024                  		addq.b	#2,$24(a1)
00005EAE 237C 0000 5B3A 0004        		move.l	#Map_obj88,4(a1)
00005EB6 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005EBC 137C 0000 0001             		move.b	#0,1(a1)
00005EC2 137C 0001 0018             		move.b	#1,$18(a1)
00005EC8 337C 0104 0008             		move.w	#$104,8(a1)
00005ECE 337C 0120 0038             		move.w	#$120,$38(a1)
00005ED4 337C 00EC 000A             		move.w	#$EC,$A(a1)
00005EDA 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00005EE0 137C 001C 003C             		move.b	#$1C,$3C(a1)
00005EE6 47F8 FE58                  		lea	($FFFFFE58).w,a3
00005EEA                            
00005EEA                            Obj8C_ChkEms:
00005EEA 7000                       		moveq	#0,d0
00005EEC 1038 FE57                  		move.b	($FFFFFE57).w,d0
00005EF0 5340                       		subq.w	#1,d0
00005EF2 6500                       		bcs.s	loc_5B42
00005EF4                            
00005EF4                            Obj8C_ChkEmLoop:
00005EF4 B433 0000                  		cmp.b	(a3,d0.w),d2
00005EF8 6600                       		bne.s	loc_5B3E
00005EFA 5202                       		addq.b	#1,d2
00005EFC 60EC                       		bra.s	Obj8C_ChkEms
00005EFE                            ; ===========================================================================
00005EFE                            
00005EFE                            loc_5B3E:
00005EFE 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00005F02                            
00005F02                            loc_5B42:
00005F02 1342 001A                  		move.b	d2,$1A(a1)
00005F06 5229 001A                  		addq.b	#1,$1A(a1)
00005F0A 5202                       		addq.b	#1,d2
00005F0C 137C 0080 0026             		move.b	#$80,$26(a1)
00005F12 1343 001E                  		move.b	d3,$1E(a1)
00005F16 1343 001F                  		move.b	d3,$1F(a1)
00005F1A 0643 000A                  		addi.w	#$A,d3
00005F1E 43E9 0040                  		lea	$40(a1),a1
00005F22 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00005F26                            
00005F26                            Obj8C_Move:				; XREF: Obj8C_Index
00005F26 4A68 003E                  		tst.w	$3E(a0)
00005F2A 6700                       		beq.s	locret_5BBA
00005F2C 4A28 001E                  		tst.b	$1E(a0)
00005F30 6700                       		beq.s	loc_5B78
00005F32 5328 001E                  		subq.b	#1,$1E(a0)
00005F36 6600                       		bne.s	loc_5B80
00005F38                            
00005F38                            loc_5B78:
00005F38 3028 003E                  		move.w	$3E(a0),d0
00005F3C D168 0026                  		add.w	d0,$26(a0)
00005F40                            
00005F40                            loc_5B80:
00005F40 1028 0026                  		move.b	$26(a0),d0
00005F44 6700                       		beq.s	loc_5B8C
00005F46 0C00 0080                  		cmpi.b	#$80,d0
00005F4A 6600                       		bne.s	loc_5B96
00005F4C                            
00005F4C                            loc_5B8C:
00005F4C 4268 003E                  		clr.w	$3E(a0)
00005F50 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00005F56                            
00005F56                            loc_5B96:
00005F56 4EB9 0000 2C60             		jsr	(CalcSine).l
00005F5C 7800                       		moveq	#0,d4
00005F5E 1828 003C                  		move.b	$3C(a0),d4
00005F62 C3C4                       		muls.w	d4,d1
00005F64 E081                       		asr.l	#8,d1
00005F66 C1C4                       		muls.w	d4,d0
00005F68 E080                       		asr.l	#8,d0
00005F6A D268 0038                  		add.w	$38(a0),d1
00005F6E D068 003A                  		add.w	$3A(a0),d0
00005F72 3141 0008                  		move.w	d1,8(a0)
00005F76 3140 000A                  		move.w	d0,$A(a0)
00005F7A                            
00005F7A                            locret_5BBA:
00005F7A 4E75                       		rts	
00005F7C                            ; ===========================================================================
00005F7C                            ; ---------------------------------------------------------------------------
00005F7C                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00005F7C                            ; ---------------------------------------------------------------------------
00005F7C                            Map_obj8B:
00005F7C                            	include "_maps\obj8B.asm"
00005F7C                            ; ---------------------------------------------------------------------------
00005F7C                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00005F7C                            ; ---------------------------------------------------------------------------
00005F7C 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00005F80 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00005F84 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00005F88 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00005F8C 08                         byte_5BCC:	dc.b 8
00005F8D E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00005F92 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00005F97 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00005F9C F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00005FA1 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005FA6 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005FAB 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005FB0 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005FB5 08                         byte_5BF5:	dc.b 8
00005FB6 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00005FBB F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00005FC0 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00005FC5 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00005FCA 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005FCF 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005FD4 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005FD9 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005FDE 08                         byte_5C1E:	dc.b 8
00005FDF E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00005FE4 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00005FE9 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00005FEE F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00005FF3 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005FF8 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005FFD 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006002 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006007 08                         byte_5C47:	dc.b 8
00006008 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
0000600D F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00006012 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00006017 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
0000601C 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006021 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006026 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000602B 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006030 0C                         byte_5C70:	dc.b $C
00006031 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00006036 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
0000603B 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00006040 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00006045 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
0000604A F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
0000604F 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00006054 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00006059 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
0000605E 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00006063 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006068 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
0000606D 0A                         byte_5CAD:	dc.b $A
0000606E D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00006073 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006078 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
0000607D D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006082 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006087 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
0000608C 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006091 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006096 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
0000609B 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
000060A0 0A                         byte_5CE0:	dc.b $A
000060A1 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
000060A6 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
000060AB EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
000060B0 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
000060B5 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
000060BA EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
000060BF 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
000060C4 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
000060C9 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
000060CE 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
000060D3 0C                         byte_5D13:	dc.b $C
000060D4 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
000060D9 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
000060DE 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
000060E3 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
000060E8 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
000060ED FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
000060F2 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
000060F7 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
000060FC 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006101 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00006106 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
0000610B 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006110                            		even
00006110                            		even
00006110                            
00006110                            ; ---------------------------------------------------------------------------
00006110                            ; Ending sequence demos
00006110                            ; ---------------------------------------------------------------------------
00006110                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
0000613E                            		even
0000613E                            Demo_EndMZ:	incbin	demodata\e_mz.bin
0000617E                            		even
0000617E                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
000061AE                            		even
000061AE                            Demo_EndLZ:	incbin	demodata\e_lz.bin
000061DE                            		even
000061DE                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
000061FE                            		even
000061FE                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
0000621E                            		even
0000621E                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
0000624E                            		even
0000624E                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
0000627E                            		even
0000627E                            
0000627E                            ; ---------------------------------------------------------------------------
0000627E                            ; Subroutine to	load level boundaries and start	locations
0000627E                            ; ---------------------------------------------------------------------------
0000627E                            
0000627E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000627E                            
0000627E                            
0000627E                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
0000627E 7000                       		moveq	#0,d0
00006280 11C0 F740                  		move.b	d0,($FFFFF740).w
00006284 11C0 F741                  		move.b	d0,($FFFFF741).w
00006288 11C0 F746                  		move.b	d0,($FFFFF746).w
0000628C 11C0 F748                  		move.b	d0,($FFFFF748).w
00006290 11C0 F742                  		move.b	d0,($FFFFF742).w
00006294 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006298 ED08                       		lsl.b	#6,d0
0000629A E848                       		lsr.w	#4,d0
0000629C 3200                       		move.w	d0,d1
0000629E D040                       		add.w	d0,d0
000062A0 D041                       		add.w	d1,d0
000062A2 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
000062A6 3018                       		move.w	(a0)+,d0
000062A8 31C0 F730                  		move.w	d0,($FFFFF730).w
000062AC 2018                       		move.l	(a0)+,d0
000062AE 21C0 F728                  		move.l	d0,($FFFFF728).w
000062B2 21C0 F720                  		move.l	d0,($FFFFF720).w
000062B6 2018                       		move.l	(a0)+,d0
000062B8 21C0 F72C                  		move.l	d0,($FFFFF72C).w
000062BC 21C0 F724                  		move.l	d0,($FFFFF724).w
000062C0 3038 F728                  		move.w	($FFFFF728).w,d0
000062C4 0640 0240                  		addi.w	#$240,d0
000062C8 31C0 F732                  		move.w	d0,($FFFFF732).w
000062CC 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
000062D2 3018                       		move.w	(a0)+,d0
000062D4 31C0 F73E                  		move.w	d0,($FFFFF73E).w
000062D8 6000 0000                  		bra.w	LevSz_ChkLamp
000062DC                            ; ===========================================================================
000062DC                            ; ---------------------------------------------------------------------------
000062DC                            ; Level size array and ending start location array
000062DC                            ; ---------------------------------------------------------------------------
000062DC                            LevelSizeArray:	incbin	misc\lvl_size.bin
0000642C                            		even
0000642C                            
0000642C                            EndingStLocArray:
0000642C                            		incbin	misc\sloc_end.bin
0000644C                            		even
0000644C                            
0000644C                            ; ===========================================================================
0000644C                            
0000644C                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
0000644C 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
00006450 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006452 4EB9 0000 0000             		jsr	Obj79_LoadInfo
00006458 3238 D008                  		move.w	($FFFFD008).w,d1
0000645C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006460 6000                       		bra.s	loc_60D0
00006462                            ; ===========================================================================
00006462                            
00006462                            LevSz_StartLoc:				; XREF: LevelSizeLoad
00006462 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006466 ED08                       		lsl.b	#6,d0
00006468 E848                       		lsr.w	#4,d0
0000646A 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
0000646E 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00006472 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00006474 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00006478 5340                       		subq.w	#1,d0
0000647A E548                       		lsl.w	#2,d0
0000647C 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006480                            
00006480                            LevSz_SonicPos:
00006480 7200                       		moveq	#0,d1
00006482 3219                       		move.w	(a1)+,d1
00006484 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
00006488 7000                       		moveq	#0,d0
0000648A 3011                       		move.w	(a1),d0
0000648C 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00006490                            
00006490                            loc_60D0:				; XREF: LevSz_ChkLamp
00006490 0441 00A0                  		subi.w	#$A0,d1
00006494 6400                       		bcc.s	loc_60D8
00006496 7200                       		moveq	#0,d1
00006498                            
00006498                            loc_60D8:
00006498 3438 F72A                  		move.w	($FFFFF72A).w,d2
0000649C B242                       		cmp.w	d2,d1
0000649E 6500                       		bcs.s	loc_60E2
000064A0 3202                       		move.w	d2,d1
000064A2                            
000064A2                            loc_60E2:
000064A2 31C1 F700                  		move.w	d1,($FFFFF700).w
000064A6 0440 0060                  		subi.w	#$60,d0
000064AA 6400                       		bcc.s	loc_60EE
000064AC 7000                       		moveq	#0,d0
000064AE                            
000064AE                            loc_60EE:
000064AE B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000064B2 6D00                       		blt.s	loc_60F8
000064B4 3038 F72E                  		move.w	($FFFFF72E).w,d0
000064B8                            
000064B8                            loc_60F8:
000064B8 31C0 F704                  		move.w	d0,($FFFFF704).w
000064BC 6100 0000                  		bsr.w	BgScrollSpeed
000064C0 7000                       		moveq	#0,d0
000064C2 1038 FE10                  		move.b	($FFFFFE10).w,d0
000064C6 E508                       		lsl.b	#2,d0
000064C8 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
000064CE 6000 0000                  		bra.w	LevSz_Unk
000064D2                            ; ===========================================================================
000064D2                            ; ---------------------------------------------------------------------------
000064D2                            ; Sonic	start location array
000064D2                            ; ---------------------------------------------------------------------------
000064D2                            StartLocArray:	incbin	misc\sloc_lev.bin
00006542                            		even
00006542                            
00006542                            ; ---------------------------------------------------------------------------
00006542                            ; Which	256x256	tiles contain loops or roll-tunnels
00006542                            ; ---------------------------------------------------------------------------
00006542                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00006542                            ; loop,	loop, tunnel, tunnel
00006542                            ; ---------------------------------------------------------------------------
00006542                            LoopTileNums:	incbin	misc\loopnums.bin
0000655E                            		even
0000655E                            
0000655E                            ; ===========================================================================
0000655E                            
0000655E                            LevSz_Unk:				; XREF: LevelSizeLoad
0000655E 7000                       		moveq	#0,d0
00006560 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006564 E748                       		lsl.w	#3,d0
00006566 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
0000656A 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
0000656E 24D9                       		move.l	(a1)+,(a2)+
00006570 24D9                       		move.l	(a1)+,(a2)+
00006572 4E75                       		rts	
00006574                            ; End of function LevelSizeLoad
00006574                            
00006574                            ; ===========================================================================
00006574 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
0000657C 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006584 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000658C 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006594 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000659C 0800 0100 0100 0000        		dc.l $8000100, $1000000
000065A4 0070 0100 0100 0100        		dc.l $700100, $1000100
000065AC                            
000065AC                            ; ---------------------------------------------------------------------------
000065AC                            ; Subroutine to	set scroll speed of some backgrounds
000065AC                            ; ---------------------------------------------------------------------------
000065AC                            
000065AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000065AC                            
000065AC                            
000065AC                            BgScrollSpeed:				; XREF: LevelSizeLoad
000065AC 4A38 FE30                  		tst.b	($FFFFFE30).w
000065B0 6600                       		bne.s	loc_6206
000065B2 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000065B6 31C0 F714                  		move.w	d0,($FFFFF714).w
000065BA 31C1 F708                  		move.w	d1,($FFFFF708).w
000065BE 31C1 F710                  		move.w	d1,($FFFFF710).w
000065C2 31C1 F718                  		move.w	d1,($FFFFF718).w
000065C6                            
000065C6                            loc_6206:
000065C6 7400                       		moveq	#0,d2
000065C8 1438 FE10                  		move.b	($FFFFFE10).w,d2
000065CC D442                       		add.w	d2,d2
000065CE 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
000065D2 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
000065D6                            ; End of function BgScrollSpeed
000065D6                            
000065D6                            ; ===========================================================================
000065D6 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
000065DA 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
000065DE 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
000065E2 0000                       		dc.w BgScroll_End-BgScroll_Index
000065E4                            ; ===========================================================================
000065E4                            
000065E4                            BgScroll_GHZ:				; XREF: BgScroll_Index
000065E4 6000 0000                  		bra.w	Deform_GHZ
000065E8                            ; ===========================================================================
000065E8                            
000065E8                            BgScroll_LZ:				; XREF: BgScroll_Index
000065E8 E280                       		asr.l	#1,d0
000065EA 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000065EE 4E75                       		rts	
000065F0                            ; ===========================================================================
000065F0                            
000065F0                            BgScroll_MZ:				; XREF: BgScroll_Index
000065F0 4E75                       		rts	
000065F2                            ; ===========================================================================
000065F2                            
000065F2                            BgScroll_SLZ:				; XREF: BgScroll_Index
000065F2 E280                       		asr.l	#1,d0
000065F4 0640 00C0                  		addi.w	#$C0,d0
000065F8 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000065FC 4E75                       		rts	
000065FE                            ; ===========================================================================
000065FE                            
000065FE                            BgScroll_SYZ:				; XREF: BgScroll_Index
000065FE E980                       		asl.l	#4,d0
00006600 2400                       		move.l	d0,d2
00006602 E380                       		asl.l	#1,d0
00006604 D082                       		add.l	d2,d0
00006606 E080                       		asr.l	#8,d0
00006608 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000660C 31C0 F714                  		move.w	d0,($FFFFF714).w
00006610 4E75                       		rts	
00006612                            ; ===========================================================================
00006612                            
00006612                            BgScroll_SBZ:				; XREF: BgScroll_Index
00006612 E980                       		asl.l	#4,d0
00006614 E380                       		asl.l	#1,d0
00006616 E080                       		asr.l	#8,d0
00006618 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000661C 4E75                       		rts	
0000661E                            ; ===========================================================================
0000661E                            
0000661E                            BgScroll_End:				; XREF: BgScroll_Index
0000661E 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006624 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
0000662A 4E75                       		rts	
0000662C                            ; ===========================================================================
0000662C 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
00006632 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006638 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
0000663E 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006644 4E75                       		rts
00006646                            
00006646                            ; ---------------------------------------------------------------------------
00006646                            ; Background layer deformation subroutines
00006646                            ; ---------------------------------------------------------------------------
00006646                            
00006646                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006646                            
00006646                            
00006646                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00006646 4A38 F744                  		tst.b	($FFFFF744).w
0000664A 6700                       		beq.s	loc_628E
0000664C 4E75                       		rts	
0000664E                            ; ===========================================================================
0000664E                            
0000664E                            loc_628E:
0000664E 4278 F754                  		clr.w	($FFFFF754).w
00006652 4278 F756                  		clr.w	($FFFFF756).w
00006656 4278 F758                  		clr.w	($FFFFF758).w
0000665A 4278 F75A                  		clr.w	($FFFFF75A).w
0000665E 6100 0000                  		bsr.w	ScrollHoriz
00006662 6100 0000                  		bsr.w	ScrollVertical
00006666 6100 0000                  		bsr.w	DynScrResizeLoad
0000666A 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
00006670 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
00006676 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
0000667C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006682 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
00006688 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
0000668E 7000                       		moveq	#0,d0
00006690 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006694 D040                       		add.w	d0,d0
00006696 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
0000669A 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
0000669E                            ; End of function DeformBgLayer
0000669E                            
0000669E                            ; ===========================================================================
0000669E                            ; ---------------------------------------------------------------------------
0000669E                            ; Offset index for background layer deformation	code
0000669E                            ; ---------------------------------------------------------------------------
0000669E 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
000066A2 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
000066A6 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
000066AA 0000                       		dc.w Deform_GHZ-Deform_Index
000066AC                            ; ---------------------------------------------------------------------------
000066AC                            ; Green	Hill Zone background layer deformation code
000066AC                            ; ---------------------------------------------------------------------------
000066AC                            
000066AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000066AC                            
000066AC                            
000066AC                            Deform_GHZ:				; XREF: Deform_Index
000066AC 3838 F73A                  		move.w	($FFFFF73A).w,d4
000066B0 48C4                       		ext.l	d4
000066B2 EB84                       		asl.l	#5,d4
000066B4 2204                       		move.l	d4,d1
000066B6 E384                       		asl.l	#1,d4
000066B8 D881                       		add.l	d1,d4
000066BA 7A00                       		moveq	#0,d5
000066BC 6100 0000                  		bsr.w	ScrollBlock1
000066C0 6100 0000                  		bsr.w	ScrollBlock4
000066C4 43F8 CC00                  		lea	($FFFFCC00).w,a1
000066C8 3038 F704                  		move.w	($FFFFF704).w,d0
000066CC 0240 07FF                  		andi.w	#$7FF,d0
000066D0 EA48                       		lsr.w	#5,d0
000066D2 4440                       		neg.w	d0
000066D4 0640 0026                  		addi.w	#$26,d0
000066D8 31C0 F714                  		move.w	d0,($FFFFF714).w
000066DC 3800                       		move.w	d0,d4
000066DE 6100 0000                  		bsr.w	ScrollBlock3
000066E2 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000066E8 323C 006F                  		move.w	#$6F,d1
000066EC 9244                       		sub.w	d4,d1
000066EE 3038 F700                  		move.w	($FFFFF700).w,d0
000066F2 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
000066F8 6600                       		bne.s	loc_633C
000066FA 7000                       		moveq	#0,d0
000066FC                            
000066FC                            loc_633C:
000066FC 4440                       		neg.w	d0
000066FE 4840                       		swap	d0
00006700 3038 F708                  		move.w	($FFFFF708).w,d0
00006704 4440                       		neg.w	d0
00006706                            
00006706                            loc_6346:
00006706 22C0                       		move.l	d0,(a1)+
00006708 51C9 FFFC                  		dbf	d1,loc_6346
0000670C 323C 0027                  		move.w	#$27,d1
00006710 3038 F710                  		move.w	($FFFFF710).w,d0
00006714 4440                       		neg.w	d0
00006716                            
00006716                            loc_6356:
00006716 22C0                       		move.l	d0,(a1)+
00006718 51C9 FFFC                  		dbf	d1,loc_6356
0000671C 3038 F710                  		move.w	($FFFFF710).w,d0
00006720 0640 0000                  		addi.w	#0,d0
00006724 3438 F700                  		move.w	($FFFFF700).w,d2
00006728 0642 FE00                  		addi.w	#-$200,d2
0000672C 9440                       		sub.w	d0,d2
0000672E 48C2                       		ext.l	d2
00006730 E182                       		asl.l	#8,d2
00006732 85FC 0068                  		divs.w	#$68,d2
00006736 48C2                       		ext.l	d2
00006738 E182                       		asl.l	#8,d2
0000673A 7600                       		moveq	#0,d3
0000673C 3600                       		move.w	d0,d3
0000673E 323C 0047                  		move.w	#$47,d1
00006742 D244                       		add.w	d4,d1
00006744                            
00006744                            loc_6384:
00006744 3003                       		move.w	d3,d0
00006746 4440                       		neg.w	d0
00006748 22C0                       		move.l	d0,(a1)+
0000674A 4843                       		swap	d3
0000674C D682                       		add.l	d2,d3
0000674E 4843                       		swap	d3
00006750 51C9 FFF2                  		dbf	d1,loc_6384
00006754 4E75                       		rts	
00006756                            ; End of function Deform_GHZ
00006756                            
00006756                            ; ---------------------------------------------------------------------------
00006756                            ; Labyrinth Zone background layer deformation code
00006756                            ; ---------------------------------------------------------------------------
00006756                            
00006756                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006756                            
00006756                            
00006756                            Deform_LZ:				; XREF: Deform_Index
00006756 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000675A 48C4                       		ext.l	d4
0000675C EF84                       		asl.l	#7,d4
0000675E 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006762 48C5                       		ext.l	d5
00006764 EF85                       		asl.l	#7,d5
00006766 6100 0000                  		bsr.w	ScrollBlock1
0000676A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006770 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006774 323C 00DF                  		move.w	#$DF,d1
00006778 3038 F700                  		move.w	($FFFFF700).w,d0
0000677C 4440                       		neg.w	d0
0000677E 4840                       		swap	d0
00006780 3038 F708                  		move.w	($FFFFF708).w,d0
00006784 4440                       		neg.w	d0
00006786                            
00006786                            loc_63C6:
00006786 22C0                       		move.l	d0,(a1)+
00006788 51C9 FFFC                  		dbf	d1,loc_63C6
0000678C 3038 F646                  		move.w	($FFFFF646).w,d0
00006790 9078 F704                  		sub.w	($FFFFF704).w,d0
00006794 4E75                       		rts	
00006796                            ; End of function Deform_LZ
00006796                            
00006796                            ; ---------------------------------------------------------------------------
00006796                            ; Marble Zone background layer deformation code
00006796                            ; ---------------------------------------------------------------------------
00006796                            
00006796                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006796                            
00006796                            
00006796                            Deform_MZ:				; XREF: Deform_Index
00006796 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000679A 48C4                       		ext.l	d4
0000679C ED84                       		asl.l	#6,d4
0000679E 2204                       		move.l	d4,d1
000067A0 E384                       		asl.l	#1,d4
000067A2 D881                       		add.l	d1,d4
000067A4 7A00                       		moveq	#0,d5
000067A6 6100 0000                  		bsr.w	ScrollBlock1
000067AA 303C 0200                  		move.w	#$200,d0
000067AE 3238 F704                  		move.w	($FFFFF704).w,d1
000067B2 0441 01C8                  		subi.w	#$1C8,d1
000067B6 6500                       		bcs.s	loc_6402
000067B8 3401                       		move.w	d1,d2
000067BA D241                       		add.w	d1,d1
000067BC D242                       		add.w	d2,d1
000067BE E441                       		asr.w	#2,d1
000067C0 D041                       		add.w	d1,d0
000067C2                            
000067C2                            loc_6402:
000067C2 31C0 F714                  		move.w	d0,($FFFFF714).w
000067C6 6100 0000                  		bsr.w	ScrollBlock3
000067CA 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000067D0 43F8 CC00                  		lea	($FFFFCC00).w,a1
000067D4 323C 00DF                  		move.w	#$DF,d1
000067D8 3038 F700                  		move.w	($FFFFF700).w,d0
000067DC 4440                       		neg.w	d0
000067DE 4840                       		swap	d0
000067E0 3038 F708                  		move.w	($FFFFF708).w,d0
000067E4 4440                       		neg.w	d0
000067E6                            
000067E6                            loc_6426:
000067E6 22C0                       		move.l	d0,(a1)+
000067E8 51C9 FFFC                  		dbf	d1,loc_6426
000067EC 4E75                       		rts	
000067EE                            ; End of function Deform_MZ
000067EE                            
000067EE                            ; ---------------------------------------------------------------------------
000067EE                            ; Star Light Zone background layer deformation code
000067EE                            ; ---------------------------------------------------------------------------
000067EE                            
000067EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000067EE                            
000067EE                            
000067EE                            Deform_SLZ:				; XREF: Deform_Index
000067EE 3838 F73A                  		move.w	($FFFFF73A).w,d4
000067F2 48C4                       		ext.l	d4
000067F4 EB84                       		asl.l	#5,d4
000067F6 2204                       		move.l	d4,d1
000067F8 E384                       		asl.l	#1,d4
000067FA D881                       		add.l	d1,d4
000067FC 7A00                       		moveq	#0,d5
000067FE 6100 0000                  		bsr.w	ScrollBlock1
00006802 6100 0000                  		bsr.w	ScrollBlock3
00006806 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000680A                            	;	move.w	($FFFFF704).w,d0
0000680A                            	;	andi.w	#$7FF,d0
0000680A EA48                       		lsr.w	#5,d0
0000680C 4440                       		neg.w	d0
0000680E 0640 0026                  		addi.w	#$26,d0
00006812 31C0 F714                  		move.w	d0,($FFFFF714).w
00006816 3800                       		move.w	d0,d4
00006818                            	;	bsr.w	ScrollBlock3
00006818 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
0000681E 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
00006822                            
00006822 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006826 4440                       		neg.w	d0			; negate (positive to negative)
00006828 4840                       		swap	d0			; send to the left side of d0
0000682A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000682E 45F8 A800                  		lea	($FFFFA800).w,a2
00006832 069A 0000 5000             		addi.l	#$5000,(a2)+
00006838 069A 0000 C000             		addi.l	#$C000,(a2)+
0000683E 3038 A800                  		move.w	($FFFFA800).w,d0
00006842 4440                       		neg.w	d0			; negate (positive to negative)
00006844 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006846 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000684A                            slz_DeformLoop_1:
0000684A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000684C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
00006850                            
00006850 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006854 4440                       		neg.w	d0			; negate (positive to negative)
00006856 4840                       		swap	d0			; send to the left side of d0
00006858 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000685C 45F8 A800                  		lea	($FFFFA800).w,a2
00006860 069A 0000 5000             		addi.l	#$5000,(a2)+
00006866 069A 0000 C000             		addi.l	#$C000,(a2)+
0000686C 3038 A800                  		move.w	($FFFFA800).w,d0
00006870 4440                       		neg.w	d0			; negate (positive to negative)
00006872 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006874 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006878                            slz_DeformLoop_2:
00006878 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000687A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
0000687E                            
0000687E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006882 4440                       		neg.w	d0			; negate (positive to negative)
00006884 4840                       		swap	d0			; send to the left side of d0
00006886 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000688A 45F8 A800                  		lea	($FFFFA800).w,a2
0000688E 069A 0000 5000             		addi.l	#$5000,(a2)+
00006894 069A 0000 C000             		addi.l	#$C000,(a2)+
0000689A 3038 A800                  		move.w	($FFFFA800).w,d0
0000689E 4440                       		neg.w	d0			; negate (positive to negative)
000068A0 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
000068A2 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068A6                            slz_DeformLoop_3:
000068A6 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068A8 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
000068AC                            
000068AC 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068B0 4440                       		neg.w	d0			; negate (positive to negative)
000068B2 4840                       		swap	d0			; send to the left side of d0
000068B4 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000068B8 45F8 A800                  		lea	($FFFFA800).w,a2
000068BC 069A 0000 5000             		addi.l	#$5000,(a2)+
000068C2 069A 0000 C000             		addi.l	#$C000,(a2)+
000068C8 3038 A800                  		move.w	($FFFFA800).w,d0
000068CC 4440                       		neg.w	d0			; negate (positive to negative)
000068CE E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
000068D0 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068D4                            slz_DeformLoop_4:
000068D4 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068D6 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
000068DA                            
000068DA 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068DE 4440                       		neg.w	d0			; negate (positive to negative)
000068E0 4840                       		swap	d0			; send to the left side of d0
000068E2 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000068E6 45F8 A800                  		lea	($FFFFA800).w,a2
000068EA 069A 0000 5000             		addi.l	#$5000,(a2)+
000068F0 069A 0000 C000             		addi.l	#$C000,(a2)+
000068F6 3038 A800                  		move.w	($FFFFA800).w,d0
000068FA 4440                       		neg.w	d0			; negate (positive to negative)
000068FC E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
000068FE 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006902                            slz_DeformLoop_5:
00006902 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006904 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
00006908                            
00006908 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000690C 4440                       		neg.w	d0			; negate (positive to negative)
0000690E 4840                       		swap	d0			; send to the left side of d0
00006910 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006914 4440                       		neg.w	d0			; negate (positive to negative)
00006916 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006918 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000691C                            slz_DeformLoop_6:
0000691C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000691E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
00006922                            
00006922 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006926 4440                       		neg.w	d0			; negate (positive to negative)
00006928 4840                       		swap	d0			; send to the left side of d0
0000692A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000692E 4440                       		neg.w	d0			; negate (positive to negative)
00006930 EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
00006932 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006936                            slz_DeformLoop_7:
00006936 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006938 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
0000693C                            
0000693C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006940 4440                       		neg.w	d0			; negate (positive to negative)
00006942 4840                       		swap	d0			; send to the left side of d0
00006944 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006948 4440                       		neg.w	d0			; negate (positive to negative)
0000694A EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
0000694C 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006950                            slz_DeformLoop_8:
00006950 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006952 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
00006956                            
00006956 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000695A 4440                       		neg.w	d0			; negate (positive to negative)
0000695C 4840                       		swap	d0			; send to the left side of d0
0000695E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006962 4440                       		neg.w	d0			; negate (positive to negative)
00006964 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006966 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000696A                            slz_DeformLoop_9:
0000696A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000696C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
00006970                            
00006970 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006974 4440                       		neg.w	d0			; negate (positive to negative)
00006976 4840                       		swap	d0			; send to the left side of d0
00006978 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000697C 4440                       		neg.w	d0			; negate (positive to negative)
0000697E E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006980 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006984                            slz_DeformLoop_10:
00006984 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006986 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
0000698A                            
0000698A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000698E 4440                       		neg.w	d0			; negate (positive to negative)
00006990 4840                       		swap	d0			; send to the left side of d0
00006992 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006996 4440                       		neg.w	d0			; negate (positive to negative)
00006998 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
0000699A 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000699E                            slz_DeformLoop_11:
0000699E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069A0 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
000069A4                            
000069A4 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069A8 4440                       		neg.w	d0			; negate (positive to negative)
000069AA 4840                       		swap	d0			; send to the left side of d0
000069AC 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069B0 4440                       		neg.w	d0			; negate (positive to negative)
000069B2 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
000069B4 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069B8                            slz_DeformLoop_12:
000069B8 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069BA 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
000069BE                            
000069BE 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069C2 4440                       		neg.w	d0			; negate (positive to negative)
000069C4 4840                       		swap	d0			; send to the left side of d0
000069C6 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069CA 4440                       		neg.w	d0			; negate (positive to negative)
000069CC E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
000069CE 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069D2                            slz_DeformLoop_13:
000069D2 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069D4 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
000069D8 4E75                       		rts	
000069DA                            ; End of function Deform_SLZ
000069DA 4E75                       		rts	
000069DC                            ; End of function Deform_SLZ_2
000069DC                            
000069DC                            ; ---------------------------------------------------------------------------
000069DC                            ; Spring Yard Zone background layer deformation	code
000069DC                            ; ---------------------------------------------------------------------------
000069DC                            
000069DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000069DC                            
000069DC                            
000069DC                            Deform_SYZ:				; XREF: Deform_Index
000069DC 3838 F73A                  		move.w	($FFFFF73A).w,d4
000069E0 48C4                       		ext.l	d4
000069E2 ED84                       		asl.l	#6,d4
000069E4 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000069E8 48C5                       		ext.l	d5
000069EA E985                       		asl.l	#4,d5
000069EC 2205                       		move.l	d5,d1
000069EE E385                       		asl.l	#1,d5
000069F0 DA81                       		add.l	d1,d5
000069F2 6100 0000                  		bsr.w	ScrollBlock1
000069F6 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000069FC 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006A00 323C 00DF                  		move.w	#$DF,d1
00006A04 3038 F700                  		move.w	($FFFFF700).w,d0
00006A08 4440                       		neg.w	d0
00006A0A 4840                       		swap	d0
00006A0C 3038 F708                  		move.w	($FFFFF708).w,d0
00006A10 4440                       		neg.w	d0
00006A12                            
00006A12                            loc_653C:
00006A12 22C0                       		move.l	d0,(a1)+
00006A14 51C9 FFFC                  		dbf	d1,loc_653C
00006A18 4E75                       		rts	
00006A1A                            ; End of function Deform_SYZ
00006A1A                            
00006A1A                            ; ---------------------------------------------------------------------------
00006A1A                            ; Scrap	Brain Zone background layer deformation	code
00006A1A                            ; ---------------------------------------------------------------------------
00006A1A                            
00006A1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A1A                            
00006A1A                            
00006A1A                            Deform_SBZ:				; XREF: Deform_Index
00006A1A 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006A1E 48C4                       		ext.l	d4
00006A20 ED84                       		asl.l	#6,d4
00006A22 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006A26 48C5                       		ext.l	d5
00006A28 E985                       		asl.l	#4,d5
00006A2A E385                       		asl.l	#1,d5
00006A2C 6100 0000                  		bsr.w	ScrollBlock1
00006A30 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006A36 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006A3A 323C 00DF                  		move.w	#$DF,d1
00006A3E 3038 F700                  		move.w	($FFFFF700).w,d0
00006A42 4440                       		neg.w	d0
00006A44 4840                       		swap	d0
00006A46 3038 F708                  		move.w	($FFFFF708).w,d0
00006A4A 4440                       		neg.w	d0
00006A4C                            
00006A4C                            loc_6576:
00006A4C 22C0                       		move.l	d0,(a1)+
00006A4E 51C9 FFFC                  		dbf	d1,loc_6576
00006A52 4E75                       		rts	
00006A54                            ; End of function Deform_SBZ
00006A54                            
00006A54                            ; ---------------------------------------------------------------------------
00006A54                            ; Subroutine to	scroll the level horizontally as Sonic moves
00006A54                            ; ---------------------------------------------------------------------------
00006A54                            
00006A54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A54                            
00006A54                            
00006A54                            ScrollHoriz:				; XREF: DeformBgLayer
00006A54 3838 F700                  		move.w	($FFFFF700).w,d4
00006A58 6100                       		bsr.s	ScrollHoriz2
00006A5A 3038 F700                  		move.w	($FFFFF700).w,d0
00006A5E 0240 0010                  		andi.w	#$10,d0
00006A62 1238 F74A                  		move.b	($FFFFF74A).w,d1
00006A66 B300                       		eor.b	d1,d0
00006A68 6600                       		bne.s	locret_65B0
00006A6A 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00006A70 3038 F700                  		move.w	($FFFFF700).w,d0
00006A74 9044                       		sub.w	d4,d0
00006A76 6A00                       		bpl.s	loc_65AA
00006A78 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006A7E 4E75                       		rts	
00006A80                            ; ===========================================================================
00006A80                            
00006A80                            loc_65AA:
00006A80 08F8 0003 F754             		bset	#3,($FFFFF754).w
00006A86                            
00006A86                            locret_65B0:
00006A86 4E75                       		rts	
00006A88                            ; End of function ScrollHoriz
00006A88                            
00006A88                            
00006A88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A88                            
00006A88                            
00006A88                            ScrollHoriz2:				; XREF: ScrollHoriz
00006A88 3038 D008                  		move.w	($FFFFD008).w,d0
00006A8C 9078 F700                  		sub.w	($FFFFF700).w,d0
00006A90 0440 0090                  		subi.w	#$90,d0
00006A94 6500                       		bcs.s	loc_65F6
00006A96 0440 0010                  		subi.w	#$10,d0
00006A9A 6400                       		bcc.s	loc_65CC
00006A9C 4278 F73A                  		clr.w	($FFFFF73A).w
00006AA0 4E75                       		rts	
00006AA2                            ; ===========================================================================
00006AA2                            
00006AA2                            loc_65CC:
00006AA2 0C40 0010                  		cmpi.w	#$10,d0
00006AA6 6500                       		bcs.s	loc_65D6
00006AA8 303C 0010                  		move.w	#$10,d0
00006AAC                            
00006AAC                            loc_65D6:
00006AAC D078 F700                  		add.w	($FFFFF700).w,d0
00006AB0 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00006AB4 6D00                       		blt.s	loc_65E4
00006AB6 3038 F72A                  		move.w	($FFFFF72A).w,d0
00006ABA                            
00006ABA                            loc_65E4:
00006ABA 3200                       		move.w	d0,d1
00006ABC 9278 F700                  		sub.w	($FFFFF700).w,d1
00006AC0 E141                       		asl.w	#8,d1
00006AC2 31C0 F700                  		move.w	d0,($FFFFF700).w
00006AC6 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006ACA 4E75                       		rts	
00006ACC                            ; ===========================================================================
00006ACC                            
00006ACC                            loc_65F6:				; XREF: ScrollHoriz2
00006ACC D078 F700                  		add.w	($FFFFF700).w,d0
00006AD0 B078 F728                  		cmp.w	($FFFFF728).w,d0
00006AD4 6EE4                       		bgt.s	loc_65E4
00006AD6 3038 F728                  		move.w	($FFFFF728).w,d0
00006ADA 60DE                       		bra.s	loc_65E4
00006ADC                            ; End of function ScrollHoriz2
00006ADC                            
00006ADC                            ; ===========================================================================
00006ADC 4A40                       		tst.w	d0
00006ADE 6A00                       		bpl.s	loc_6610
00006AE0 303C FFFE                  		move.w	#-2,d0
00006AE4 60E6                       		bra.s	loc_65F6
00006AE6                            ; ===========================================================================
00006AE6                            
00006AE6                            loc_6610:
00006AE6 303C 0002                  		move.w	#2,d0
00006AEA 60B6                       		bra.s	loc_65CC
00006AEC                            
00006AEC                            ; ---------------------------------------------------------------------------
00006AEC                            ; Subroutine to	scroll the level vertically as Sonic moves
00006AEC                            ; ---------------------------------------------------------------------------
00006AEC                            
00006AEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006AEC                            
00006AEC                            
00006AEC                            ScrollVertical:				; XREF: DeformBgLayer
00006AEC 7200                       		moveq	#0,d1
00006AEE 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006AF2 9078 F704                  		sub.w	($FFFFF704).w,d0
00006AF6 0838 0002 D022             		btst	#2,($FFFFD022).w
00006AFC 6700                       		beq.s	loc_662A
00006AFE 5B40                       		subq.w	#5,d0
00006B00                            
00006B00                            loc_662A:
00006B00 0838 0001 D022             		btst	#1,($FFFFD022).w
00006B06 6700                       		beq.s	loc_664A
00006B08 0640 0020                  		addi.w	#$20,d0
00006B0C 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006B10 6500                       		bcs.s	loc_6696
00006B12 0440 0040                  		subi.w	#$40,d0
00006B16 6400                       		bcc.s	loc_6696
00006B18 4A38 F75C                  		tst.b	($FFFFF75C).w
00006B1C 6600                       		bne.s	loc_66A8
00006B1E 6000                       		bra.s	loc_6656
00006B20                            ; ===========================================================================
00006B20                            
00006B20                            loc_664A:
00006B20 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006B24 6600                       		bne.s	loc_665C
00006B26 4A38 F75C                  		tst.b	($FFFFF75C).w
00006B2A 6600                       		bne.s	loc_66A8
00006B2C                            
00006B2C                            loc_6656:
00006B2C 4278 F73C                  		clr.w	($FFFFF73C).w
00006B30 4E75                       		rts	
00006B32                            ; ===========================================================================
00006B32                            
00006B32                            loc_665C:
00006B32 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006B38 6600                       		bne.s	loc_6684
00006B3A 3238 D014                  		move.w	($FFFFD014).w,d1
00006B3E 6A00                       		bpl.s	loc_666C
00006B40 4441                       		neg.w	d1
00006B42                            
00006B42                            loc_666C:
00006B42 0C41 0800                  		cmpi.w	#$800,d1
00006B46 6400                       		bcc.s	loc_6696
00006B48 323C 0600                  		move.w	#$600,d1
00006B4C 0C40 0006                  		cmpi.w	#6,d0
00006B50 6E00                       		bgt.s	loc_66F6
00006B52 0C40 FFFA                  		cmpi.w	#-6,d0
00006B56 6D00                       		blt.s	loc_66C0
00006B58 6000                       		bra.s	loc_66AE
00006B5A                            ; ===========================================================================
00006B5A                            
00006B5A                            loc_6684:
00006B5A 323C 0200                  		move.w	#$200,d1
00006B5E 0C40 0002                  		cmpi.w	#2,d0
00006B62 6E00                       		bgt.s	loc_66F6
00006B64 0C40 FFFE                  		cmpi.w	#-2,d0
00006B68 6D00                       		blt.s	loc_66C0
00006B6A 6000                       		bra.s	loc_66AE
00006B6C                            ; ===========================================================================
00006B6C                            
00006B6C                            loc_6696:
00006B6C 323C 1000                  		move.w	#$1000,d1
00006B70 0C40 0010                  		cmpi.w	#$10,d0
00006B74 6E00                       		bgt.s	loc_66F6
00006B76 0C40 FFF0                  		cmpi.w	#-$10,d0
00006B7A 6D00                       		blt.s	loc_66C0
00006B7C 6000                       		bra.s	loc_66AE
00006B7E                            ; ===========================================================================
00006B7E                            
00006B7E                            loc_66A8:
00006B7E 7000                       		moveq	#0,d0
00006B80 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00006B84                            
00006B84                            loc_66AE:
00006B84 7200                       		moveq	#0,d1
00006B86 3200                       		move.w	d0,d1
00006B88 D278 F704                  		add.w	($FFFFF704).w,d1
00006B8C 4A40                       		tst.w	d0
00006B8E 6A00 0000                  		bpl.w	loc_6700
00006B92 6000 0000                  		bra.w	loc_66CC
00006B96                            ; ===========================================================================
00006B96                            
00006B96                            loc_66C0:
00006B96 4441                       		neg.w	d1
00006B98 48C1                       		ext.l	d1
00006B9A E181                       		asl.l	#8,d1
00006B9C D2B8 F704                  		add.l	($FFFFF704).w,d1
00006BA0 4841                       		swap	d1
00006BA2                            
00006BA2                            loc_66CC:
00006BA2 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006BA6 6E00                       		bgt.s	loc_6724
00006BA8 0C41 FF00                  		cmpi.w	#-$100,d1
00006BAC 6E00                       		bgt.s	loc_66F0
00006BAE 0241 07FF                  		andi.w	#$7FF,d1
00006BB2 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006BB8 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00006BBE 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006BC4 6000                       		bra.s	loc_6724
00006BC6                            ; ===========================================================================
00006BC6                            
00006BC6                            loc_66F0:
00006BC6 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006BCA 6000                       		bra.s	loc_6724
00006BCC                            ; ===========================================================================
00006BCC                            
00006BCC                            loc_66F6:
00006BCC 48C1                       		ext.l	d1
00006BCE E181                       		asl.l	#8,d1
00006BD0 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006BD4 4841                       		swap	d1
00006BD6                            
00006BD6                            loc_6700:
00006BD6 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006BDA 6D00                       		blt.s	loc_6724
00006BDC 0441 0800                  		subi.w	#$800,d1
00006BE0 6500                       		bcs.s	loc_6720
00006BE2 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006BE8 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006BEE 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006BF4 6000                       		bra.s	loc_6724
00006BF6                            ; ===========================================================================
00006BF6                            
00006BF6                            loc_6720:
00006BF6 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006BFA                            
00006BFA                            loc_6724:
00006BFA 3838 F704                  		move.w	($FFFFF704).w,d4
00006BFE 4841                       		swap	d1
00006C00 2601                       		move.l	d1,d3
00006C02 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006C06 E09B                       		ror.l	#8,d3
00006C08 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006C0C 21C1 F704                  		move.l	d1,($FFFFF704).w
00006C10 3038 F704                  		move.w	($FFFFF704).w,d0
00006C14 0240 0010                  		andi.w	#$10,d0
00006C18 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006C1C B300                       		eor.b	d1,d0
00006C1E 6600                       		bne.s	locret_6766
00006C20 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006C26 3038 F704                  		move.w	($FFFFF704).w,d0
00006C2A 9044                       		sub.w	d4,d0
00006C2C 6A00                       		bpl.s	loc_6760
00006C2E 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006C34 4E75                       		rts	
00006C36                            ; ===========================================================================
00006C36                            
00006C36                            loc_6760:
00006C36 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006C3C                            
00006C3C                            locret_6766:
00006C3C 4E75                       		rts	
00006C3E                            ; End of function ScrollVertical
00006C3E                            
00006C3E                            
00006C3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C3E                            
00006C3E                            
00006C3E                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006C3E 2438 F708                  		move.l	($FFFFF708).w,d2
00006C42 2002                       		move.l	d2,d0
00006C44 D084                       		add.l	d4,d0
00006C46 21C0 F708                  		move.l	d0,($FFFFF708).w
00006C4A 2200                       		move.l	d0,d1
00006C4C 4841                       		swap	d1
00006C4E 0241 0010                  		andi.w	#$10,d1
00006C52 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006C56 B701                       		eor.b	d3,d1
00006C58 6600                       		bne.s	loc_679C
00006C5A 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006C60 9082                       		sub.l	d2,d0
00006C62 6A00                       		bpl.s	loc_6796
00006C64 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006C6A 6000                       		bra.s	loc_679C
00006C6C                            ; ===========================================================================
00006C6C                            
00006C6C                            loc_6796:
00006C6C 08F8 0003 F756             		bset	#3,($FFFFF756).w
00006C72                            
00006C72                            loc_679C:
00006C72 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006C76 2003                       		move.l	d3,d0
00006C78 D085                       		add.l	d5,d0
00006C7A 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006C7E 2200                       		move.l	d0,d1
00006C80 4841                       		swap	d1
00006C82 0241 0010                  		andi.w	#$10,d1
00006C86 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006C8A B501                       		eor.b	d2,d1
00006C8C 6600                       		bne.s	locret_67D0
00006C8E 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006C94 9083                       		sub.l	d3,d0
00006C96 6A00                       		bpl.s	loc_67CA
00006C98 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006C9E 4E75                       		rts	
00006CA0                            ; ===========================================================================
00006CA0                            
00006CA0                            loc_67CA:
00006CA0 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006CA6                            
00006CA6                            locret_67D0:
00006CA6 4E75                       		rts	
00006CA8                            ; End of function ScrollBlock1
00006CA8                            
00006CA8                            
00006CA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CA8                            
00006CA8                            
00006CA8                            ScrollBlock2:				; XREF: Deform_SLZ
00006CA8 2438 F708                  		move.l	($FFFFF708).w,d2
00006CAC 2002                       		move.l	d2,d0
00006CAE D084                       		add.l	d4,d0
00006CB0 21C0 F708                  		move.l	d0,($FFFFF708).w
00006CB4 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006CB8 2003                       		move.l	d3,d0
00006CBA D085                       		add.l	d5,d0
00006CBC 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006CC0 2200                       		move.l	d0,d1
00006CC2 4841                       		swap	d1
00006CC4 0241 0010                  		andi.w	#$10,d1
00006CC8 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006CCC B501                       		eor.b	d2,d1
00006CCE 6600                       		bne.s	locret_6812
00006CD0 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006CD6 9083                       		sub.l	d3,d0
00006CD8 6A00                       		bpl.s	loc_680C
00006CDA 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006CE0 4E75                       		rts	
00006CE2                            ; ===========================================================================
00006CE2                            
00006CE2                            loc_680C:
00006CE2 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006CE8                            
00006CE8                            locret_6812:
00006CE8 4E75                       		rts	
00006CEA                            ; End of function ScrollBlock2
00006CEA                            
00006CEA                            
00006CEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CEA                            
00006CEA                            
00006CEA                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006CEA 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006CEE 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006CF2 3200                       		move.w	d0,d1
00006CF4 0241 0010                  		andi.w	#$10,d1
00006CF8 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006CFC B501                       		eor.b	d2,d1
00006CFE 6600                       		bne.s	locret_6842
00006D00 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006D06 9043                       		sub.w	d3,d0
00006D08 6A00                       		bpl.s	loc_683C
00006D0A 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006D10 4E75                       		rts	
00006D12                            ; ===========================================================================
00006D12                            
00006D12                            loc_683C:
00006D12 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006D18                            
00006D18                            locret_6842:
00006D18 4E75                       		rts	
00006D1A                            ; End of function ScrollBlock3
00006D1A                            
00006D1A                            
00006D1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D1A                            
00006D1A                            
00006D1A                            ScrollBlock4:				; XREF: Deform_GHZ
00006D1A 3438 F710                  		move.w	($FFFFF710).w,d2
00006D1E 3638 F714                  		move.w	($FFFFF714).w,d3
00006D22 3038 F73A                  		move.w	($FFFFF73A).w,d0
00006D26 48C0                       		ext.l	d0
00006D28 EF80                       		asl.l	#7,d0
00006D2A D1B8 F710                  		add.l	d0,($FFFFF710).w
00006D2E 3038 F710                  		move.w	($FFFFF710).w,d0
00006D32 0240 0010                  		andi.w	#$10,d0
00006D36 1238 F74E                  		move.b	($FFFFF74E).w,d1
00006D3A B300                       		eor.b	d1,d0
00006D3C 6600                       		bne.s	locret_6884
00006D3E 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00006D44 3038 F710                  		move.w	($FFFFF710).w,d0
00006D48 9042                       		sub.w	d2,d0
00006D4A 6A00                       		bpl.s	loc_687E
00006D4C 08F8 0002 F758             		bset	#2,($FFFFF758).w
00006D52 6000                       		bra.s	locret_6884
00006D54                            ; ===========================================================================
00006D54                            
00006D54                            loc_687E:
00006D54 08F8 0003 F758             		bset	#3,($FFFFF758).w
00006D5A                            
00006D5A                            locret_6884:
00006D5A 4E75                       		rts	
00006D5C                            ; End of function ScrollBlock4
00006D5C                            
00006D5C                            
00006D5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D5C                            
00006D5C                            
00006D5C                            sub_6886:				; XREF: loc_C44
00006D5C 4BF9 00C0 0004             		lea	($C00004).l,a5
00006D62 4DF9 00C0 0000             		lea	($C00000).l,a6
00006D68 45F8 F756                  		lea	($FFFFF756).w,a2
00006D6C 47F8 F708                  		lea	($FFFFF708).w,a3
00006D70 49F8 A440                  		lea	($FFFFA440).w,a4
00006D74 343C 6000                  		move.w	#$6000,d2
00006D78 6100 0000                  		bsr.w	sub_6954
00006D7C 45F8 F758                  		lea	($FFFFF758).w,a2
00006D80 47F8 F710                  		lea	($FFFFF710).w,a3
00006D84 6000 0000                  		bra.w	sub_69F4
00006D88                            ; End of function sub_6886
00006D88                            
00006D88                            ; ---------------------------------------------------------------------------
00006D88                            ; Subroutine to	display	correct	tiles as you move
00006D88                            ; ---------------------------------------------------------------------------
00006D88                            
00006D88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D88                            
00006D88                            
00006D88                            LoadTilesAsYouMove:			; XREF: Demo_Time
00006D88 4BF9 00C0 0004             		lea	($C00004).l,a5
00006D8E 4DF9 00C0 0000             		lea	($C00000).l,a6
00006D94 45F8 FF32                  		lea	($FFFFFF32).w,a2
00006D98 47F8 FF18                  		lea	($FFFFFF18).w,a3
00006D9C 49F8 A440                  		lea	($FFFFA440).w,a4
00006DA0 343C 6000                  		move.w	#$6000,d2
00006DA4 6100 0000                  		bsr.w	sub_6954
00006DA8 45F8 FF34                  		lea	($FFFFFF34).w,a2
00006DAC 47F8 FF20                  		lea	($FFFFFF20).w,a3
00006DB0 6100 0000                  		bsr.w	sub_69F4
00006DB4 45F8 FF30                  		lea	($FFFFFF30).w,a2
00006DB8 47F8 FF10                  		lea	($FFFFFF10).w,a3
00006DBC 49F8 A400                  		lea	($FFFFA400).w,a4
00006DC0 343C 4000                  		move.w	#$4000,d2
00006DC4 4A12                       		tst.b	(a2)
00006DC6 6700                       		beq.s	locret_6952
00006DC8 0892 0000                  		bclr	#0,(a2)
00006DCC 6700                       		beq.s	loc_6908
00006DCE 78F0                       		moveq	#-$10,d4
00006DD0 7AF0                       		moveq	#-$10,d5
00006DD2 6100 0000                  		bsr.w	sub_6C20
00006DD6 78F0                       		moveq	#-$10,d4
00006DD8 7AF0                       		moveq	#-$10,d5
00006DDA 6100 0000                  		bsr.w	sub_6AD8
00006DDE                            
00006DDE                            loc_6908:
00006DDE 0892 0001                  		bclr	#1,(a2)
00006DE2 6700                       		beq.s	loc_6922
00006DE4 383C 00E0                  		move.w	#$E0,d4
00006DE8 7AF0                       		moveq	#-$10,d5
00006DEA 6100 0000                  		bsr.w	sub_6C20
00006DEE 383C 00E0                  		move.w	#$E0,d4
00006DF2 7AF0                       		moveq	#-$10,d5
00006DF4 6100 0000                  		bsr.w	sub_6AD8
00006DF8                            
00006DF8                            loc_6922:
00006DF8 0892 0002                  		bclr	#2,(a2)
00006DFC 6700                       		beq.s	loc_6938
00006DFE 78F0                       		moveq	#-$10,d4
00006E00 7AF0                       		moveq	#-$10,d5
00006E02 6100 0000                  		bsr.w	sub_6C20
00006E06 78F0                       		moveq	#-$10,d4
00006E08 7AF0                       		moveq	#-$10,d5
00006E0A 6100 0000                  		bsr.w	sub_6B04
00006E0E                            
00006E0E                            loc_6938:
00006E0E 0892 0003                  		bclr	#3,(a2)
00006E12 6700                       		beq.s	locret_6952
00006E14 78F0                       		moveq	#-$10,d4
00006E16 3A3C 0140                  		move.w	#$140,d5
00006E1A 6100 0000                  		bsr.w	sub_6C20
00006E1E 78F0                       		moveq	#-$10,d4
00006E20 3A3C 0140                  		move.w	#$140,d5
00006E24 6100 0000                  		bsr.w	sub_6B04
00006E28                            
00006E28                            locret_6952:
00006E28 4E75                       		rts	
00006E2A                            ; End of function LoadTilesAsYouMove
00006E2A                            
00006E2A                            
00006E2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E2A                            
00006E2A                            
00006E2A                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00006E2A 4A12                       		tst.b	(a2)
00006E2C 6700 0000                  		beq.w	locret_69F2
00006E30 0892 0000                  		bclr	#0,(a2)
00006E34 6700                       		beq.s	loc_6972
00006E36 78F0                       		moveq	#-$10,d4
00006E38 7AF0                       		moveq	#-$10,d5
00006E3A 6100 0000                  		bsr.w	sub_6C20
00006E3E 78F0                       		moveq	#-$10,d4
00006E40 7AF0                       		moveq	#-$10,d5
00006E42 7C1F                       		moveq	#$1F,d6
00006E44 6100 0000                  		bsr.w	sub_6ADA
00006E48                            
00006E48                            loc_6972:
00006E48 0892 0001                  		bclr	#1,(a2)
00006E4C 6700                       		beq.s	loc_698E
00006E4E 383C 00E0                  		move.w	#$E0,d4
00006E52 7AF0                       		moveq	#-$10,d5
00006E54 6100 0000                  		bsr.w	sub_6C20
00006E58 383C 00E0                  		move.w	#$E0,d4
00006E5C 7AF0                       		moveq	#-$10,d5
00006E5E 7C1F                       		moveq	#$1F,d6
00006E60 6100 0000                  		bsr.w	sub_6ADA
00006E64                            
00006E64                            loc_698E:
00006E64 0892 0002                  		bclr	#2,(a2)
00006E68 6700                       		beq.s	loc_69BE
00006E6A 78F0                       		moveq	#-$10,d4
00006E6C 7AF0                       		moveq	#-$10,d5
00006E6E 6100 0000                  		bsr.w	sub_6C20
00006E72 78F0                       		moveq	#-$10,d4
00006E74 7AF0                       		moveq	#-$10,d5
00006E76 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006E7A 322B 0004                  		move.w	4(a3),d1
00006E7E 0241 FFF0                  		andi.w	#-$10,d1
00006E82 9C41                       		sub.w	d1,d6
00006E84 6D00                       		blt.s	loc_69BE
00006E86 E84E                       		lsr.w	#4,d6
00006E88 0C46 000F                  		cmpi.w	#$F,d6
00006E8C 6500                       		bcs.s	loc_69BA
00006E8E 7C0F                       		moveq	#$F,d6
00006E90                            
00006E90                            loc_69BA:
00006E90 6100 0000                  		bsr.w	sub_6B06
00006E94                            
00006E94                            loc_69BE:
00006E94 0892 0003                  		bclr	#3,(a2)
00006E98 6700                       		beq.s	locret_69F2
00006E9A 78F0                       		moveq	#-$10,d4
00006E9C 3A3C 0140                  		move.w	#$140,d5
00006EA0 6100 0000                  		bsr.w	sub_6C20
00006EA4 78F0                       		moveq	#-$10,d4
00006EA6 3A3C 0140                  		move.w	#$140,d5
00006EAA 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006EAE 322B 0004                  		move.w	4(a3),d1
00006EB2 0241 FFF0                  		andi.w	#-$10,d1
00006EB6 9C41                       		sub.w	d1,d6
00006EB8 6D00                       		blt.s	locret_69F2
00006EBA E84E                       		lsr.w	#4,d6
00006EBC 0C46 000F                  		cmpi.w	#$F,d6
00006EC0 6500                       		bcs.s	loc_69EE
00006EC2 7C0F                       		moveq	#$F,d6
00006EC4                            
00006EC4                            loc_69EE:
00006EC4 6100 0000                  		bsr.w	sub_6B06
00006EC8                            
00006EC8                            locret_69F2:
00006EC8 4E75                       		rts	
00006ECA                            ; End of function sub_6954
00006ECA                            
00006ECA                            
00006ECA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006ECA                            
00006ECA                            
00006ECA                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00006ECA 4A12                       		tst.b	(a2)
00006ECC 6700 0000                  		beq.w	locret_6A80
00006ED0 0892 0002                  		bclr	#2,(a2)
00006ED4 6700                       		beq.s	loc_6A3E
00006ED6 0C53 0010                  		cmpi.w	#$10,(a3)
00006EDA 6500                       		bcs.s	loc_6A3E
00006EDC 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006EE0 322B 0004                  		move.w	4(a3),d1
00006EE4 0241 FFF0                  		andi.w	#-$10,d1
00006EE8 9841                       		sub.w	d1,d4
00006EEA 3F04                       		move.w	d4,-(sp)
00006EEC 7AF0                       		moveq	#-$10,d5
00006EEE 6100 0000                  		bsr.w	sub_6C20
00006EF2 381F                       		move.w	(sp)+,d4
00006EF4 7AF0                       		moveq	#-$10,d5
00006EF6 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006EFA 322B 0004                  		move.w	4(a3),d1
00006EFE 0241 FFF0                  		andi.w	#-$10,d1
00006F02 9C41                       		sub.w	d1,d6
00006F04 6D00                       		blt.s	loc_6A3E
00006F06 E84E                       		lsr.w	#4,d6
00006F08 0446 000E                  		subi.w	#$E,d6
00006F0C 6400                       		bcc.s	loc_6A3E
00006F0E 4446                       		neg.w	d6
00006F10 6100 0000                  		bsr.w	sub_6B06
00006F14                            
00006F14                            loc_6A3E:
00006F14 0892 0003                  		bclr	#3,(a2)
00006F18 6700                       		beq.s	locret_6A80
00006F1A 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006F1E 322B 0004                  		move.w	4(a3),d1
00006F22 0241 FFF0                  		andi.w	#-$10,d1
00006F26 9841                       		sub.w	d1,d4
00006F28 3F04                       		move.w	d4,-(sp)
00006F2A 3A3C 0140                  		move.w	#$140,d5
00006F2E 6100 0000                  		bsr.w	sub_6C20
00006F32 381F                       		move.w	(sp)+,d4
00006F34 3A3C 0140                  		move.w	#$140,d5
00006F38 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006F3C 322B 0004                  		move.w	4(a3),d1
00006F40 0241 FFF0                  		andi.w	#-$10,d1
00006F44 9C41                       		sub.w	d1,d6
00006F46 6D00                       		blt.s	locret_6A80
00006F48 E84E                       		lsr.w	#4,d6
00006F4A 0446 000E                  		subi.w	#$E,d6
00006F4E 6400                       		bcc.s	locret_6A80
00006F50 4446                       		neg.w	d6
00006F52 6100 0000                  		bsr.w	sub_6B06
00006F56                            
00006F56                            locret_6A80:
00006F56 4E75                       		rts	
00006F58                            ; End of function sub_69F4
00006F58                            
00006F58                            ; ===========================================================================
00006F58 4A12                       		tst.b	(a2)
00006F5A 6700                       		beq.s	locret_6AD6
00006F5C 0892 0002                  		bclr	#2,(a2)
00006F60 6700                       		beq.s	loc_6AAC
00006F62 383C 00D0                  		move.w	#$D0,d4
00006F66 322B 0004                  		move.w	4(a3),d1
00006F6A 0241 FFF0                  		andi.w	#-$10,d1
00006F6E 9841                       		sub.w	d1,d4
00006F70 3F04                       		move.w	d4,-(sp)
00006F72 7AF0                       		moveq	#-$10,d5
00006F74 6100 0000                  		bsr.w	sub_6C3C
00006F78 381F                       		move.w	(sp)+,d4
00006F7A 7AF0                       		moveq	#-$10,d5
00006F7C 7C02                       		moveq	#2,d6
00006F7E 6100 0000                  		bsr.w	sub_6B06
00006F82                            
00006F82                            loc_6AAC:
00006F82 0892 0003                  		bclr	#3,(a2)
00006F86 6700                       		beq.s	locret_6AD6
00006F88 383C 00D0                  		move.w	#$D0,d4
00006F8C 322B 0004                  		move.w	4(a3),d1
00006F90 0241 FFF0                  		andi.w	#-$10,d1
00006F94 9841                       		sub.w	d1,d4
00006F96 3F04                       		move.w	d4,-(sp)
00006F98 3A3C 0140                  		move.w	#$140,d5
00006F9C 6100 0000                  		bsr.w	sub_6C3C
00006FA0 381F                       		move.w	(sp)+,d4
00006FA2 3A3C 0140                  		move.w	#$140,d5
00006FA6 7C02                       		moveq	#2,d6
00006FA8 6100 0000                  		bsr.w	sub_6B06
00006FAC                            
00006FAC                            locret_6AD6:
00006FAC 4E75                       		rts	
00006FAE                            
00006FAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FAE                            
00006FAE                            
00006FAE                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00006FAE 7C15                       		moveq	#$15,d6
00006FB0                            ; End of function sub_6AD8
00006FB0                            
00006FB0                            
00006FB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FB0                            
00006FB0                            
00006FB0                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00006FB0 2E3C 0080 0000             		move.l	#$800000,d7
00006FB6 2200                       		move.l	d0,d1
00006FB8                            
00006FB8                            loc_6AE2:
00006FB8 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006FBC 6100 0000                  		bsr.w	sub_6BD6
00006FC0 2001                       		move.l	d1,d0
00006FC2 6100 0000                  		bsr.w	sub_6B32
00006FC6 5801                       		addq.b	#4,d1
00006FC8 0201 007F                  		andi.b	#$7F,d1
00006FCC 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006FD0 0645 0010                  		addi.w	#$10,d5
00006FD4 51CE FFE2                  		dbf	d6,loc_6AE2
00006FD8 4E75                       		rts	
00006FDA                            ; End of function sub_6ADA
00006FDA                            
00006FDA                            
00006FDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FDA                            
00006FDA                            
00006FDA                            sub_6B04:				; XREF: LoadTilesAsYouMove
00006FDA 7C0F                       		moveq	#$F,d6
00006FDC                            ; End of function sub_6B04
00006FDC                            
00006FDC                            
00006FDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FDC                            
00006FDC                            
00006FDC                            sub_6B06:				; XREF: sub_6954
00006FDC 2E3C 0080 0000             		move.l	#$800000,d7
00006FE2 2200                       		move.l	d0,d1
00006FE4                            
00006FE4                            loc_6B0E:
00006FE4 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006FE8 6100 0000                  		bsr.w	sub_6BD6
00006FEC 2001                       		move.l	d1,d0
00006FEE 6100 0000                  		bsr.w	sub_6B32
00006FF2 0641 0100                  		addi.w	#$100,d1
00006FF6 0241 0FFF                  		andi.w	#$FFF,d1
00006FFA 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006FFE 0644 0010                  		addi.w	#$10,d4
00007002 51CE FFE0                  		dbf	d6,loc_6B0E
00007006 4E75                       		rts	
00007008                            ; End of function sub_6B06
00007008                            
00007008                            
00007008                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007008                            
00007008                            
00007008                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00007008 8042                       		or.w	d2,d0
0000700A 4840                       		swap	d0
0000700C 0810 0004                  		btst	#4,(a0)
00007010 6600                       		bne.s	loc_6B6E
00007012 0810 0003                  		btst	#3,(a0)
00007016 6600                       		bne.s	loc_6B4E
00007018 2A80                       		move.l	d0,(a5)
0000701A 2C99                       		move.l	(a1)+,(a6)
0000701C D087                       		add.l	d7,d0
0000701E 2A80                       		move.l	d0,(a5)
00007020 2C99                       		move.l	(a1)+,(a6)
00007022 4E75                       		rts	
00007024                            ; ===========================================================================
00007024                            
00007024                            loc_6B4E:
00007024 2A80                       		move.l	d0,(a5)
00007026 2819                       		move.l	(a1)+,d4
00007028 0A84 0800 0800             		eori.l	#$8000800,d4
0000702E 4844                       		swap	d4
00007030 2C84                       		move.l	d4,(a6)
00007032 D087                       		add.l	d7,d0
00007034 2A80                       		move.l	d0,(a5)
00007036 2819                       		move.l	(a1)+,d4
00007038 0A84 0800 0800             		eori.l	#$8000800,d4
0000703E 4844                       		swap	d4
00007040 2C84                       		move.l	d4,(a6)
00007042 4E75                       		rts	
00007044                            ; ===========================================================================
00007044                            
00007044                            loc_6B6E:
00007044 0810 0003                  		btst	#3,(a0)
00007048 6600                       		bne.s	loc_6B90
0000704A 2A80                       		move.l	d0,(a5)
0000704C 2A19                       		move.l	(a1)+,d5
0000704E 2819                       		move.l	(a1)+,d4
00007050 0A84 1000 1000             		eori.l	#$10001000,d4
00007056 2C84                       		move.l	d4,(a6)
00007058 D087                       		add.l	d7,d0
0000705A 2A80                       		move.l	d0,(a5)
0000705C 0A85 1000 1000             		eori.l	#$10001000,d5
00007062 2C85                       		move.l	d5,(a6)
00007064 4E75                       		rts	
00007066                            ; ===========================================================================
00007066                            
00007066                            loc_6B90:
00007066 2A80                       		move.l	d0,(a5)
00007068 2A19                       		move.l	(a1)+,d5
0000706A 2819                       		move.l	(a1)+,d4
0000706C 0A84 1800 1800             		eori.l	#$18001800,d4
00007072 4844                       		swap	d4
00007074 2C84                       		move.l	d4,(a6)
00007076 D087                       		add.l	d7,d0
00007078 2A80                       		move.l	d0,(a5)
0000707A 0A85 1800 1800             		eori.l	#$18001800,d5
00007080 4845                       		swap	d5
00007082 2C85                       		move.l	d5,(a6)
00007084 4E75                       		rts	
00007086                            ; End of function sub_6B32
00007086                            
00007086                            ; ===========================================================================
00007086 4E75                       		rts	
00007088                            ; ===========================================================================
00007088 2A80                       		move.l	d0,(a5)
0000708A 3A3C 2000                  		move.w	#$2000,d5
0000708E 3819                       		move.w	(a1)+,d4
00007090 D845                       		add.w	d5,d4
00007092 3C84                       		move.w	d4,(a6)
00007094 3819                       		move.w	(a1)+,d4
00007096 D845                       		add.w	d5,d4
00007098 3C84                       		move.w	d4,(a6)
0000709A D087                       		add.l	d7,d0
0000709C 2A80                       		move.l	d0,(a5)
0000709E 3819                       		move.w	(a1)+,d4
000070A0 D845                       		add.w	d5,d4
000070A2 3C84                       		move.w	d4,(a6)
000070A4 3819                       		move.w	(a1)+,d4
000070A6 D845                       		add.w	d5,d4
000070A8 3C84                       		move.w	d4,(a6)
000070AA 4E75                       		rts	
000070AC                            
000070AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070AC                            
000070AC                            
000070AC                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
000070AC 43F8 B000                  		lea	($FFFFB000).w,a1
000070B0 D86B 0004                  		add.w	4(a3),d4
000070B4 DA53                       		add.w	(a3),d5
000070B6 3604                       		move.w	d4,d3
000070B8 E24B                       		lsr.w	#1,d3
000070BA 0243 0380                  		andi.w	#$380,d3
000070BE E64D                       		lsr.w	#3,d5
000070C0 3005                       		move.w	d5,d0
000070C2 EA48                       		lsr.w	#5,d0
000070C4 0240 007F                  		andi.w	#$7F,d0
000070C8 D043                       		add.w	d3,d0
000070CA 76FF                       		moveq	#-1,d3
000070CC 1634 0000                  		move.b	(a4,d0.w),d3
000070D0 6700                       		beq.s	locret_6C1E
000070D2 5303                       		subq.b	#1,d3
000070D4 0243 007F                  		andi.w	#$7F,d3
000070D8 EE5B                       		ror.w	#7,d3
000070DA D844                       		add.w	d4,d4
000070DC 0244 01E0                  		andi.w	#$1E0,d4
000070E0 0245 001E                  		andi.w	#$1E,d5
000070E4 D644                       		add.w	d4,d3
000070E6 D645                       		add.w	d5,d3
000070E8 2043                       		movea.l	d3,a0
000070EA 3610                       		move.w	(a0),d3
000070EC 0243 03FF                  		andi.w	#$3FF,d3
000070F0 E74B                       		lsl.w	#3,d3
000070F2 D2C3                       		adda.w	d3,a1
000070F4                            
000070F4                            locret_6C1E:
000070F4 4E75                       		rts	
000070F6                            ; End of function sub_6BD6
000070F6                            
000070F6                            
000070F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070F6                            
000070F6                            
000070F6                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
000070F6 D86B 0004                  		add.w	4(a3),d4
000070FA DA53                       		add.w	(a3),d5
000070FC 0244 00F0                  		andi.w	#$F0,d4
00007100 0245 01F0                  		andi.w	#$1F0,d5
00007104 E94C                       		lsl.w	#4,d4
00007106 E44D                       		lsr.w	#2,d5
00007108 D845                       		add.w	d5,d4
0000710A 7003                       		moveq	#3,d0
0000710C 4840                       		swap	d0
0000710E 3004                       		move.w	d4,d0
00007110 4E75                       		rts	
00007112                            ; End of function sub_6C20
00007112                            
00007112                            
00007112                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007112                            ; not used
00007112                            
00007112                            
00007112                            sub_6C3C:
00007112 D86B 0004                  		add.w	4(a3),d4
00007116 DA53                       		add.w	(a3),d5
00007118 0244 00F0                  		andi.w	#$F0,d4
0000711C 0245 01F0                  		andi.w	#$1F0,d5
00007120 E94C                       		lsl.w	#4,d4
00007122 E44D                       		lsr.w	#2,d5
00007124 D845                       		add.w	d5,d4
00007126 7002                       		moveq	#2,d0
00007128 4840                       		swap	d0
0000712A 3004                       		move.w	d4,d0
0000712C 4E75                       		rts	
0000712E                            ; End of function sub_6C3C
0000712E                            
0000712E                            ; ---------------------------------------------------------------------------
0000712E                            ; Subroutine to	load tiles as soon as the level	appears
0000712E                            ; ---------------------------------------------------------------------------
0000712E                            
0000712E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000712E                            
0000712E                            
0000712E                            LoadTilesFromStart:			; XREF: Level; EndingSequence
0000712E 4BF9 00C0 0004             		lea	($C00004).l,a5
00007134 4DF9 00C0 0000             		lea	($C00000).l,a6
0000713A 47F8 F700                  		lea	($FFFFF700).w,a3
0000713E 49F8 A400                  		lea	($FFFFA400).w,a4
00007142 343C 4000                  		move.w	#$4000,d2
00007146 6100                       		bsr.s	LoadTilesFromStart2
00007148 47F8 F708                  		lea	($FFFFF708).w,a3
0000714C 49F8 A440                  		lea	($FFFFA440).w,a4
00007150 343C 6000                  		move.w	#$6000,d2
00007154                            ; End of function LoadTilesFromStart
00007154                            
00007154                            
00007154                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007154                            
00007154                            
00007154                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
00007154 78F0                       		moveq	#-$10,d4
00007156 7C0F                       		moveq	#$F,d6
00007158                            
00007158                            loc_6C82:
00007158 48E7 0E00                  		movem.l	d4-d6,-(sp)
0000715C 7A00                       		moveq	#0,d5
0000715E 3204                       		move.w	d4,d1
00007160 6100 FF94                  		bsr.w	sub_6C20
00007164 3801                       		move.w	d1,d4
00007166 7A00                       		moveq	#0,d5
00007168 7C1F                       		moveq	#$1F,d6
0000716A 6100 FE44                  		bsr.w	sub_6ADA
0000716E 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007172 0644 0010                  		addi.w	#$10,d4
00007176 51CE FFE0                  		dbf	d6,loc_6C82
0000717A 4E75                       		rts	
0000717C                            ; End of function LoadTilesFromStart2
0000717C                            
0000717C                            ; ---------------------------------------------------------------------------
0000717C                            ; Main Load Block loading subroutine
0000717C                            ; ---------------------------------------------------------------------------
0000717C                            
0000717C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000717C                            
0000717C                            
0000717C                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
0000717C 7000                       		moveq	#0,d0
0000717E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007182 E948                       		lsl.w	#4,d0
00007184 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
0000718A 45F2 0000                  		lea	(a2,d0.w),a2
0000718E 2F0A                       		move.l	a2,-(sp)
00007190 588A                       		addq.l	#4,a2
00007192 205A                       		movea.l	(a2)+,a0
00007194 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00007198 303C 0000                  		move.w	#0,d0
0000719C 6100 A7A0                  		bsr.w	EniDec
000071A0 205A                       		movea.l	(a2)+,a0
000071A2 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
000071A8 6100 A912                  		bsr.w	KosDec
000071AC 6100 0000                  		bsr.w	LevelLayoutLoad
000071B0 301A                       		move.w	(a2)+,d0
000071B2 3012                       		move.w	(a2),d0
000071B4 0240 00FF                  		andi.w	#$FF,d0
000071B8 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
000071BE 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
000071C0 700C                       		moveq	#$C,d0		; use SB3 pallet
000071C2                            
000071C2                            MLB_ChkSBZPal:
000071C2 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
000071C8 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
000071CA 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
000071D0 6600                       		bne.s	MLB_NormalPal	; if not, branch
000071D2                            
000071D2                            MLB_UsePal0E:
000071D2 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
000071D4                            
000071D4                            MLB_NormalPal:
000071D4 6100 B10C                  		bsr.w	PalLoad1	; load pallet (based on	d0)
000071D8 245F                       		movea.l	(sp)+,a2
000071DA 584A                       		addq.w	#4,a2
000071DC 7000                       		moveq	#0,d0
000071DE 1012                       		move.b	(a2),d0
000071E0 6700                       		beq.s	locret_6D10
000071E2 6100 A5BC                  		bsr.w	LoadPLC		; load pattern load cues
000071E6                            
000071E6                            locret_6D10:
000071E6 4E75                       		rts	
000071E8                            ; End of function MainLoadBlockLoad
000071E8                            
000071E8                            ; ---------------------------------------------------------------------------
000071E8                            ; Level	layout loading subroutine
000071E8                            ; ---------------------------------------------------------------------------
000071E8                            
000071E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071E8                            
000071E8                            
000071E8                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
000071E8 47F8 A400                  		lea	($FFFFA400).w,a3
000071EC 323C 01FF                  		move.w	#$1FF,d1
000071F0 7000                       		moveq	#0,d0
000071F2                            
000071F2                            LevLoad_ClrRam:
000071F2 26C0                       		move.l	d0,(a3)+
000071F4 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
000071F8                            
000071F8 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
000071FC 7200                       		moveq	#0,d1
000071FE 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00007202 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00007206 7202                       		moveq	#2,d1
00007208                            ; End of function LevelLayoutLoad
00007208                            
00007208                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00007208                            
00007208                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007208                            
00007208                            
00007208                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00007208 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000720C ED08                       		lsl.b	#6,d0
0000720E EA48                       		lsr.w	#5,d0
00007210 3400                       		move.w	d0,d2
00007212 D040                       		add.w	d0,d0
00007214 D042                       		add.w	d2,d0
00007216 D041                       		add.w	d1,d0
00007218 43F9 0000 0000             		lea	(Level_Index).l,a1
0000721E 3031 0000                  		move.w	(a1,d0.w),d0
00007222 43F1 0000                  		lea	(a1,d0.w),a1
00007226 7200                       		moveq	#0,d1
00007228 3401                       		move.w	d1,d2
0000722A 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
0000722C 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
0000722E                            
0000722E                            LevLoad_NumRows:
0000722E 3001                       		move.w	d1,d0
00007230 204B                       		movea.l	a3,a0
00007232                            
00007232                            LevLoad_Row:
00007232 10D9                       		move.b	(a1)+,(a0)+
00007234 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00007238 47EB 0080                  		lea	$80(a3),a3	; do next row
0000723C 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00007240 4E75                       		rts	
00007242                            ; End of function LevelLayoutLoad2
00007242                            
00007242                            ; ---------------------------------------------------------------------------
00007242                            ; Dynamic screen resize	loading	subroutine
00007242                            ; ---------------------------------------------------------------------------
00007242                            
00007242                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007242                            
00007242                            
00007242                            DynScrResizeLoad:			; XREF: DeformBgLayer
00007242 7000                       		moveq	#0,d0
00007244 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007248 D040                       		add.w	d0,d0
0000724A 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
0000724E 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00007252 7202                       		moveq	#2,d1
00007254 3038 F726                  		move.w	($FFFFF726).w,d0
00007258 9078 F72E                  		sub.w	($FFFFF72E).w,d0
0000725C 6700                       		beq.s	locret_6DAA
0000725E 6400                       		bcc.s	loc_6DAC
00007260 4441                       		neg.w	d1
00007262 3038 F704                  		move.w	($FFFFF704).w,d0
00007266 B078 F726                  		cmp.w	($FFFFF726).w,d0
0000726A 6300                       		bls.s	loc_6DA0
0000726C 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00007270 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00007276                            
00007276                            loc_6DA0:
00007276 D378 F72E                  		add.w	d1,($FFFFF72E).w
0000727A 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007280                            
00007280                            locret_6DAA:
00007280 4E75                       		rts	
00007282                            ; ===========================================================================
00007282                            
00007282                            loc_6DAC:				; XREF: DynScrResizeLoad
00007282 3038 F704                  		move.w	($FFFFF704).w,d0
00007286 5040                       		addq.w	#8,d0
00007288 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
0000728C 6500                       		bcs.s	loc_6DC4
0000728E 0838 0001 D022             		btst	#1,($FFFFD022).w
00007294 6700                       		beq.s	loc_6DC4
00007296 D241                       		add.w	d1,d1
00007298 D241                       		add.w	d1,d1
0000729A                            
0000729A                            loc_6DC4:
0000729A D378 F72E                  		add.w	d1,($FFFFF72E).w
0000729E 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
000072A4 4E75                       		rts	
000072A6                            ; End of function DynScrResizeLoad
000072A6                            
000072A6                            ; ===========================================================================
000072A6                            ; ---------------------------------------------------------------------------
000072A6                            ; Offset index for dynamic screen resizing
000072A6                            ; ---------------------------------------------------------------------------
000072A6 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
000072AA 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
000072AE 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
000072B2 0000                       		dc.w Resize_Ending-Resize_Index
000072B4                            ; ===========================================================================
000072B4                            ; ---------------------------------------------------------------------------
000072B4                            ; Green	Hill Zone dynamic screen resizing
000072B4                            ; ---------------------------------------------------------------------------
000072B4                            
000072B4                            Resize_GHZ:				; XREF: Resize_Index
000072B4 7000                       		moveq	#0,d0
000072B6 1038 FE11                  		move.b	($FFFFFE11).w,d0
000072BA D040                       		add.w	d0,d0
000072BC 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
000072C0 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
000072C4                            ; ===========================================================================
000072C4 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
000072C6 0000                       		dc.w Resize_GHZ2-Resize_GHZx
000072C8 0000                       		dc.w Resize_GHZ3-Resize_GHZx
000072CA                            ; ===========================================================================
000072CA                            
000072CA                            Resize_GHZ1:
000072CA 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
000072D0 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
000072D6 6500                       		bcs.s	locret_6E08	; if not, branch
000072D8 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
000072DE                            
000072DE                            locret_6E08:
000072DE 4E75                       		rts	
000072E0                            ; ===========================================================================
000072E0                            
000072E0                            Resize_GHZ2:
000072E0 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000072E6 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
000072EC 6500                       		bcs.s	locret_6E3A
000072EE 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000072F4 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
000072FA 6500                       		bcs.s	locret_6E3A
000072FC 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007302 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
00007308 6500                       		bcs.s	locret_6E3A
0000730A 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007310                            
00007310                            locret_6E3A:
00007310 4E75                       		rts	
00007312                            ; ===========================================================================
00007312                            
00007312                            Resize_GHZ3:
00007312 7000                       		moveq	#0,d0
00007314 1038 F742                  		move.b	($FFFFF742).w,d0
00007318 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
0000731C 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00007320                            ; ===========================================================================
00007320 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00007322 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00007324 0000                       		dc.w Resize_GHZ3end-off_6E4A
00007326                            ; ===========================================================================
00007326                            
00007326                            Resize_GHZ3main:
00007326 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000732C 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00007332 6500                       		bcs.s	locret_6E96
00007334 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
0000733A 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007340 6500                       		bcs.s	locret_6E96
00007342 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00007348 6500                       		bcs.s	loc_6E98
0000734A 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007350 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00007356 6400                       		bcc.s	loc_6E8E
00007358 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
0000735E 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00007364                            
00007364                            loc_6E8E:
00007364 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000736A 6400                       		bcc.s	loc_6E98
0000736C                            
0000736C                            locret_6E96:
0000736C 4E75                       		rts	
0000736E                            ; ===========================================================================
0000736E                            
0000736E                            loc_6E98:
0000736E 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007374 5438 F742                  		addq.b	#2,($FFFFF742).w
00007378 4E75                       		rts	
0000737A                            ; ===========================================================================
0000737A                            
0000737A                            Resize_GHZ3boss:
0000737A 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007380 6400                       		bcc.s	loc_6EB0
00007382 5538 F742                  		subq.b	#2,($FFFFF742).w
00007386                            
00007386                            loc_6EB0:
00007386 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
0000738C 6500                       		bcs.s	locret_6EE8
0000738E 6100 0000                  		bsr.w	SingleObjLoad
00007392 6600                       		bne.s	loc_6ED0
00007394 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
00007398 337C 2A60 0008             		move.w	#$2A60,8(a1)
0000739E 337C 0280 000C             		move.w	#$280,$C(a1)
000073A4                            
000073A4                            loc_6ED0:
000073A4 303C 008C                  		move.w	#$8C,d0
000073A8 6100 A20C                  		bsr.w	PlaySound	; play boss music
000073AC 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000073B2 5438 F742                  		addq.b	#2,($FFFFF742).w
000073B6 7011                       		moveq	#$11,d0
000073B8 6000 A3E6                  		bra.w	LoadPLC		; load boss patterns
000073BC                            ; ===========================================================================
000073BC                            
000073BC                            locret_6EE8:
000073BC 4E75                       		rts	
000073BE                            ; ===========================================================================
000073BE                            
000073BE                            Resize_GHZ3end:
000073BE 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000073C4 4E75                       		rts	
000073C6                            ; ===========================================================================
000073C6                            ; ---------------------------------------------------------------------------
000073C6                            ; Labyrinth Zone dynamic screen	resizing
000073C6                            ; ---------------------------------------------------------------------------
000073C6                            
000073C6                            Resize_LZ:				; XREF: Resize_Index
000073C6 7000                       		moveq	#0,d0
000073C8 1038 FE11                  		move.b	($FFFFFE11).w,d0
000073CC D040                       		add.w	d0,d0
000073CE 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
000073D2 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
000073D6                            ; ===========================================================================
000073D6 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
000073D8 0000                       		dc.w Resize_LZ12-Resize_LZx
000073DA 0000                       		dc.w Resize_LZ3-Resize_LZx
000073DC 0000                       		dc.w Resize_SBZ3-Resize_LZx
000073DE                            ; ===========================================================================
000073DE                            
000073DE                            Resize_LZ12:
000073DE 4E75                       		rts	
000073E0                            ; ===========================================================================
000073E0                            
000073E0                            Resize_LZ3:
000073E0 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
000073E4 6700                       		beq.s	loc_6F28	; if not, branch
000073E6 43F8 A506                  		lea	($FFFFA506).w,a1
000073EA 0C11 0007                  		cmpi.b	#7,(a1)
000073EE 6700                       		beq.s	loc_6F28
000073F0 12BC 0007                  		move.b	#7,(a1)		; modify level layout
000073F4 303C 00B7                  		move.w	#$B7,d0
000073F8 6100 A1C2                  		bsr.w	PlaySound_Special ; play rumbling sound
000073FC                            
000073FC                            loc_6F28:
000073FC 4A38 F742                  		tst.b	($FFFFF742).w
00007400 6600                       		bne.s	locret_6F64
00007402 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
00007408 6500                       		bcs.s	locret_6F62
0000740A 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
00007410 6400                       		bcc.s	locret_6F62
00007412 6100 0000                  		bsr.w	SingleObjLoad
00007416 6600                       		bne.s	loc_6F4A
00007418 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
0000741C                            
0000741C                            loc_6F4A:
0000741C 303C 008C                  		move.w	#$8C,d0
00007420 6100 A194                  		bsr.w	PlaySound	; play boss music
00007424 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000742A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000742E 7011                       		moveq	#$11,d0
00007430 6000 A36E                  		bra.w	LoadPLC		; load boss patterns
00007434                            ; ===========================================================================
00007434                            
00007434                            locret_6F62:
00007434 4E75                       		rts	
00007436                            ; ===========================================================================
00007436                            
00007436                            locret_6F64:
00007436 4E75                       		rts	
00007438                            ; ===========================================================================
00007438                            
00007438                            Resize_SBZ3:
00007438 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
0000743E 6500                       		bcs.s	locret_6F8C
00007440 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00007446 6400                       		bcc.s	locret_6F8C	; if not, branch
00007448 4238 FE30                  		clr.b	($FFFFFE30).w
0000744C 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
00007452 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00007458 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
0000745E                            
0000745E                            locret_6F8C:
0000745E 4E75                       		rts	
00007460                            ; ===========================================================================
00007460                            ; ---------------------------------------------------------------------------
00007460                            ; Marble Zone dynamic screen resizing
00007460                            ; ---------------------------------------------------------------------------
00007460                            
00007460                            Resize_MZ:				; XREF: Resize_Index
00007460 7000                       		moveq	#0,d0
00007462 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007466 D040                       		add.w	d0,d0
00007468 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
0000746C 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
00007470                            ; ===========================================================================
00007470 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
00007472 0000                       		dc.w Resize_MZ2-Resize_MZx
00007474 0000                       		dc.w Resize_MZ3-Resize_MZx
00007476                            ; ===========================================================================
00007476                            
00007476                            Resize_MZ1:
00007476 7000                       		moveq	#0,d0
00007478 1038 F742                  		move.b	($FFFFF742).w,d0
0000747C 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00007480 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
00007484                            ; ===========================================================================
00007484 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
00007486 0000                       		dc.w loc_6FEA-off_6FB2
00007488 0000                       		dc.w loc_702E-off_6FB2
0000748A 0000                       		dc.w loc_7050-off_6FB2
0000748C                            ; ===========================================================================
0000748C                            
0000748C                            loc_6FBA:
0000748C 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
00007492 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
00007498 6500                       		bcs.s	locret_6FE8
0000749A 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
000074A0 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000074A6 6500                       		bcs.s	locret_6FE8
000074A8 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000074AE 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000074B4 6500                       		bcs.s	locret_6FE8
000074B6 5438 F742                  		addq.b	#2,($FFFFF742).w
000074BA                            
000074BA                            locret_6FE8:
000074BA 4E75                       		rts	
000074BC                            ; ===========================================================================
000074BC                            
000074BC                            loc_6FEA:
000074BC 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000074C2 6400                       		bcc.s	loc_6FF8
000074C4 5538 F742                  		subq.b	#2,($FFFFF742).w
000074C8 4E75                       		rts	
000074CA                            ; ===========================================================================
000074CA                            
000074CA                            loc_6FF8:
000074CA 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
000074D0 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
000074D6 6400                       		bcc.s	locret_702C
000074D8 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
000074DE 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000074E4 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
000074EA 6400                       		bcc.s	locret_702C
000074EC 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
000074F2 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
000074F8 6500                       		bcs.s	locret_702C
000074FA 5438 F742                  		addq.b	#2,($FFFFF742).w
000074FE                            
000074FE                            locret_702C:
000074FE 4E75                       		rts	
00007500                            ; ===========================================================================
00007500                            
00007500                            loc_702E:
00007500 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007506 6400                       		bcc.s	loc_703C
00007508 5538 F742                  		subq.b	#2,($FFFFF742).w
0000750C 4E75                       		rts	
0000750E                            ; ===========================================================================
0000750E                            
0000750E                            loc_703C:
0000750E 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00007514 6500                       		bcs.s	locret_704E
00007516 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
0000751C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007520                            
00007520                            locret_704E:
00007520 4E75                       		rts	
00007522                            ; ===========================================================================
00007522                            
00007522                            loc_7050:
00007522 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00007528 6500                       		bcs.s	locret_7072
0000752A 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007530 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007536 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
0000753C 6500                       		bcs.s	locret_7072
0000753E 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007544                            
00007544                            locret_7072:
00007544 4E75                       		rts	
00007546                            ; ===========================================================================
00007546                            
00007546                            Resize_MZ2:
00007546 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000754C 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007552 6500                       		bcs.s	locret_7088
00007554 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
0000755A                            
0000755A                            locret_7088:
0000755A 4E75                       		rts	
0000755C                            ; ===========================================================================
0000755C                            
0000755C                            Resize_MZ3:
0000755C 7000                       		moveq	#0,d0
0000755E 1038 F742                  		move.b	($FFFFF742).w,d0
00007562 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00007566 4EFB 0000                  		jmp	off_7098(pc,d0.w)
0000756A                            ; ===========================================================================
0000756A 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
0000756C 0000                       		dc.w Resize_MZ3end-off_7098
0000756E                            ; ===========================================================================
0000756E                            
0000756E                            Resize_MZ3boss:
0000756E 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007574 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
0000757A 6500                       		bcs.s	locret_70E8
0000757C 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007582 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
00007588 6500                       		bcs.s	locret_70E8
0000758A 6100 0000                  		bsr.w	SingleObjLoad
0000758E 6600                       		bne.s	loc_70D0
00007590 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
00007594 337C 19F0 0008             		move.w	#$19F0,8(a1)
0000759A 337C 022C 000C             		move.w	#$22C,$C(a1)
000075A0                            
000075A0                            loc_70D0:
000075A0 303C 008C                  		move.w	#$8C,d0
000075A4 6100 A010                  		bsr.w	PlaySound	; play boss music
000075A8 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000075AE 5438 F742                  		addq.b	#2,($FFFFF742).w
000075B2 7011                       		moveq	#$11,d0
000075B4 6000 A1EA                  		bra.w	LoadPLC		; load boss patterns
000075B8                            ; ===========================================================================
000075B8                            
000075B8                            locret_70E8:
000075B8 4E75                       		rts	
000075BA                            ; ===========================================================================
000075BA                            
000075BA                            Resize_MZ3end:
000075BA 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000075C0 4E75                       		rts	
000075C2                            ; ===========================================================================
000075C2                            ; ---------------------------------------------------------------------------
000075C2                            ; Star Light Zone dynamic screen resizing
000075C2                            ; ---------------------------------------------------------------------------
000075C2                            
000075C2                            Resize_SLZ:				; XREF: Resize_Index
000075C2 7000                       		moveq	#0,d0
000075C4 1038 FE11                  		move.b	($FFFFFE11).w,d0
000075C8 D040                       		add.w	d0,d0
000075CA 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
000075CE 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
000075D2                            ; ===========================================================================
000075D2 0000                       Resize_SLZx:	dc.w Resize_SLZ1-Resize_SLZx
000075D4 0000                       		dc.w Resize_SLZ2-Resize_SLZx
000075D6 0000                       		dc.w Resize_SLZ3-Resize_SLZx
000075D8                            ; ===========================================================================
000075D8                            
000075D8                            Resize_SLZ1:
000075D8 31FC 0100 F726             		move.w	#$100,($FFFFF726).w ; set lower	y-boundary
000075DE 4E75                       		rts	
000075E0                            
000075E0                            Resize_SLZ2:
000075E0 4E75                       		rts	
000075E2                            ; ===========================================================================
000075E2                            
000075E2                            Resize_SLZ3:
000075E2 7000                       		moveq	#0,d0
000075E4 1038 F742                  		move.b	($FFFFF742).w,d0
000075E8 303B 0000                  		move.w	off_7118(pc,d0.w),d0
000075EC 4EFB 0000                  		jmp	off_7118(pc,d0.w)
000075F0                            ; ===========================================================================
000075F0 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
000075F2 0000                       		dc.w Resize_SLZ3boss-off_7118
000075F4 0000                       		dc.w Resize_SLZ3end-off_7118
000075F6                            ; ===========================================================================
000075F6                            
000075F6                            Resize_SLZ3main:
000075F6 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
000075FC 6500                       		bcs.s	locret_7130
000075FE 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007604 5438 F742                  		addq.b	#2,($FFFFF742).w
00007608                            
00007608                            locret_7130:
00007608 4E75                       		rts	
0000760A                            ; ===========================================================================
0000760A                            
0000760A                            Resize_SLZ3boss:
0000760A 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007610 6500                       		bcs.s	locret_715C
00007612 6100 0000                  		bsr.w	SingleObjLoad
00007616 6600                       		bne.s	loc_7144
00007618 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
0000761C                            
0000761C                            loc_7144:
0000761C 303C 008C                  		move.w	#$8C,d0
00007620 6100 9F94                  		bsr.w	PlaySound	; play boss music
00007624 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000762A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000762E 7011                       		moveq	#$11,d0
00007630 6000 A16E                  		bra.w	LoadPLC		; load boss patterns
00007634                            ; ===========================================================================
00007634                            
00007634                            locret_715C:
00007634 4E75                       		rts	
00007636                            ; ===========================================================================
00007636                            
00007636                            Resize_SLZ3end:
00007636 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000763C 4E75                       		rts
0000763E 4E75                       		rts
00007640                            ; ===========================================================================
00007640                            ; ---------------------------------------------------------------------------
00007640                            ; Spring Yard Zone dynamic screen resizing
00007640                            ; ---------------------------------------------------------------------------
00007640                            
00007640                            Resize_SYZ:				; XREF: Resize_Index
00007640 7000                       		moveq	#0,d0
00007642 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007646 D040                       		add.w	d0,d0
00007648 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
0000764C 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
00007650                            ; ===========================================================================
00007650 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
00007652 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00007654 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00007656                            ; ===========================================================================
00007656                            
00007656                            Resize_SYZ1:
00007656 4E75                       		rts	
00007658                            ; ===========================================================================
00007658                            
00007658                            Resize_SYZ2:
00007658 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000765E 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
00007664 6500                       		bcs.s	locret_71A2
00007666 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
0000766C 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
00007672 6500                       		bcs.s	locret_71A2
00007674 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000767A                            
0000767A                            locret_71A2:
0000767A 4E75                       		rts	
0000767C                            ; ===========================================================================
0000767C                            
0000767C                            Resize_SYZ3:
0000767C 7000                       		moveq	#0,d0
0000767E 1038 F742                  		move.b	($FFFFF742).w,d0
00007682 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00007686 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
0000768A                            ; ===========================================================================
0000768A 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
0000768C 0000                       		dc.w Resize_SYZ3boss-off_71B2
0000768E 0000                       		dc.w Resize_SYZ3end-off_71B2
00007690                            ; ===========================================================================
00007690                            
00007690                            Resize_SYZ3main:
00007690 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
00007696 6500                       		bcs.s	locret_71CE
00007698 6100 0000                  		bsr.w	SingleObjLoad
0000769C 6600                       		bne.s	locret_71CE
0000769E 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
000076A2 5438 F742                  		addq.b	#2,($FFFFF742).w
000076A6                            
000076A6                            locret_71CE:
000076A6 4E75                       		rts	
000076A8                            ; ===========================================================================
000076A8                            
000076A8                            Resize_SYZ3boss:
000076A8 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
000076AE 6500                       		bcs.s	locret_7200
000076B0 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
000076B6 6100 0000                  		bsr.w	SingleObjLoad
000076BA 6600                       		bne.s	loc_71EC
000076BC 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
000076C0 5438 F742                  		addq.b	#2,($FFFFF742).w
000076C4                            
000076C4                            loc_71EC:
000076C4 303C 008C                  		move.w	#$8C,d0
000076C8 6100 9EEC                  		bsr.w	PlaySound	; play boss music
000076CC 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000076D2 7011                       		moveq	#$11,d0
000076D4 6000 A0CA                  		bra.w	LoadPLC		; load boss patterns
000076D8                            ; ===========================================================================
000076D8                            
000076D8                            locret_7200:
000076D8 4E75                       		rts	
000076DA                            ; ===========================================================================
000076DA                            
000076DA                            Resize_SYZ3end:
000076DA 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000076E0 4E75                       		rts	
000076E2                            ; ===========================================================================
000076E2                            ; ---------------------------------------------------------------------------
000076E2                            ; Scrap	Brain Zone dynamic screen resizing
000076E2                            ; ---------------------------------------------------------------------------
000076E2                            
000076E2                            Resize_SBZ:				; XREF: Resize_Index
000076E2 7000                       		moveq	#0,d0
000076E4 1038 FE11                  		move.b	($FFFFFE11).w,d0
000076E8 D040                       		add.w	d0,d0
000076EA 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
000076EE 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
000076F2                            ; ===========================================================================
000076F2 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
000076F4 0000                       		dc.w Resize_SBZ2-Resize_SBZx
000076F6 0000                       		dc.w Resize_FZ-Resize_SBZx
000076F8                            ; ===========================================================================
000076F8                            
000076F8                            Resize_SBZ1:
000076F8 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000076FE 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00007704 6500                       		bcs.s	locret_7242
00007706 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
0000770C 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007712 6500                       		bcs.s	locret_7242
00007714 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
0000771A                            
0000771A                            locret_7242:
0000771A 4E75                       		rts	
0000771C                            ; ===========================================================================
0000771C                            
0000771C                            Resize_SBZ2:
0000771C 7000                       		moveq	#0,d0
0000771E 1038 F742                  		move.b	($FFFFF742).w,d0
00007722 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00007726 4EFB 0000                  		jmp	off_7252(pc,d0.w)
0000772A                            ; ===========================================================================
0000772A 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
0000772C 0000                       		dc.w Resize_SBZ2boss-off_7252
0000772E 0000                       		dc.w Resize_SBZ2boss2-off_7252
00007730 0000                       		dc.w Resize_SBZ2end-off_7252
00007732                            ; ===========================================================================
00007732                            
00007732                            Resize_SBZ2main:
00007732 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00007738 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
0000773E 6500                       		bcs.s	locret_727A
00007740 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00007746 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
0000774C 6500                       		bcs.s	locret_727A
0000774E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007752                            
00007752                            locret_727A:
00007752 4E75                       		rts	
00007754                            ; ===========================================================================
00007754                            
00007754                            Resize_SBZ2boss:
00007754 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
0000775A 6500                       		bcs.s	locret_7298
0000775C 6100 0000                  		bsr.w	SingleObjLoad
00007760 6600                       		bne.s	locret_7298
00007762 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00007766 5438 F742                  		addq.b	#2,($FFFFF742).w
0000776A 701E                       		moveq	#$1E,d0
0000776C 6000 A032                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
00007770                            ; ===========================================================================
00007770                            
00007770                            locret_7298:
00007770 4E75                       		rts	
00007772                            ; ===========================================================================
00007772                            
00007772                            Resize_SBZ2boss2:
00007772 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
00007778 6500                       		bcs.s	loc_72B6
0000777A 6100 0000                  		bsr.w	SingleObjLoad
0000777E 6600                       		bne.s	loc_72B0
00007780 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00007784 5438 F742                  		addq.b	#2,($FFFFF742).w
00007788                            
00007788                            loc_72B0:
00007788 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000778E                            
0000778E                            loc_72B6:
0000778E 6000                       		bra.s	loc_72C2
00007790                            ; ===========================================================================
00007790                            
00007790                            Resize_SBZ2end:
00007790 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00007796 6500                       		bcs.s	loc_72C2
00007798 4E75                       		rts	
0000779A                            ; ===========================================================================
0000779A                            
0000779A                            loc_72C2:
0000779A 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000077A0 4E75                       		rts	
000077A2                            ; ===========================================================================
000077A2                            
000077A2                            Resize_FZ:
000077A2 7000                       		moveq	#0,d0
000077A4 1038 F742                  		move.b	($FFFFF742).w,d0
000077A8 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
000077AC 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
000077B0                            ; ===========================================================================
000077B0 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
000077B4 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
000077B8 0000                       		dc.w Resize_FZend2-off_72D8
000077BA                            ; ===========================================================================
000077BA                            
000077BA                            Resize_FZmain:
000077BA 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
000077C0 6500                       		bcs.s	loc_72F4
000077C2 5438 F742                  		addq.b	#2,($FFFFF742).w
000077C6 701F                       		moveq	#$1F,d0
000077C8 6100 9FD6                  		bsr.w	LoadPLC		; load FZ boss patterns
000077CC                            
000077CC                            loc_72F4:
000077CC 60CC                       		bra.s	loc_72C2
000077CE                            ; ===========================================================================
000077CE                            
000077CE                            Resize_FZboss:
000077CE 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
000077D4 6500                       		bcs.s	loc_7312
000077D6 6100 0000                  		bsr.w	SingleObjLoad
000077DA 6600                       		bne.s	loc_7312
000077DC 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
000077E0 5438 F742                  		addq.b	#2,($FFFFF742).w
000077E4 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000077EA                            
000077EA                            loc_7312:
000077EA 60AE                       		bra.s	loc_72C2
000077EC                            ; ===========================================================================
000077EC                            
000077EC                            Resize_FZend:
000077EC 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
000077F2 6500                       		bcs.s	loc_7320
000077F4 5438 F742                  		addq.b	#2,($FFFFF742).w
000077F8                            
000077F8                            loc_7320:
000077F8 60A0                       		bra.s	loc_72C2
000077FA                            ; ===========================================================================
000077FA                            
000077FA                            locret_7322:
000077FA 4E75                       		rts	
000077FC                            ; ===========================================================================
000077FC                            
000077FC                            Resize_FZend2:
000077FC 609C                       		bra.s	loc_72C2
000077FE                            ; ===========================================================================
000077FE                            ; ---------------------------------------------------------------------------
000077FE                            ; Ending sequence dynamic screen resizing (empty)
000077FE                            ; ---------------------------------------------------------------------------
000077FE                            
000077FE                            Resize_Ending:				; XREF: Resize_Index
000077FE 4E75                       		rts	
00007800                            ; ===========================================================================
00007800                            ; ---------------------------------------------------------------------------
00007800                            ; Object 11 - GHZ bridge
00007800                            ; ---------------------------------------------------------------------------
00007800                            
00007800                            Obj11:					; XREF: Obj_Index
00007800 7000                       		moveq	#0,d0
00007802 1028 0024                  		move.b	$24(a0),d0
00007806 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
0000780A 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
0000780E                            ; ===========================================================================
0000780E 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00007812 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00007816 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
0000781A                            ; ===========================================================================
0000781A                            
0000781A                            Obj11_Main:				; XREF: Obj11_Index
0000781A 5428 0024                  		addq.b	#2,$24(a0)
0000781E 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00007826 317C 438E 0002             		move.w	#$438E,2(a0)
0000782C 117C 0004 0001             		move.b	#4,1(a0)
00007832 117C 0003 0018             		move.b	#3,$18(a0)
00007838 117C 0080 0019             		move.b	#$80,$19(a0)
0000783E 3428 000C                  		move.w	$C(a0),d2
00007842 3628 0008                  		move.w	8(a0),d3
00007846 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00007848 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
0000784C 7200                       		moveq	#0,d1
0000784E 1212                       		move.b	(a2),d1		; copy a2 to d1
00007850 14FC 0000                  		move.b	#0,(a2)+
00007854 3001                       		move.w	d1,d0
00007856 E248                       		lsr.w	#1,d0
00007858 E948                       		lsl.w	#4,d0
0000785A 9640                       		sub.w	d0,d3
0000785C 5501                       		subq.b	#2,d1
0000785E 6500                       		bcs.s	Obj11_Action
00007860                            
00007860                            Obj11_MakeBdg:
00007860 6100 0000                  		bsr.w	SingleObjLoad
00007864 6600                       		bne.s	Obj11_Action
00007866 5228 0028                  		addq.b	#1,$28(a0)
0000786A B668 0008                  		cmp.w	8(a0),d3
0000786E 6600                       		bne.s	loc_73B8
00007870 0643 0010                  		addi.w	#$10,d3
00007874 3142 000C                  		move.w	d2,$C(a0)
00007878 3142 003C                  		move.w	d2,$3C(a0)
0000787C 3A08                       		move.w	a0,d5
0000787E 0445 D000                  		subi.w	#-$3000,d5
00007882 EC4D                       		lsr.w	#6,d5
00007884 0245 007F                  		andi.w	#$7F,d5
00007888 14C5                       		move.b	d5,(a2)+
0000788A 5228 0028                  		addq.b	#1,$28(a0)
0000788E                            
0000788E                            loc_73B8:				; XREF: ROM:00007398j
0000788E 3A09                       		move.w	a1,d5
00007890 0445 D000                  		subi.w	#-$3000,d5
00007894 EC4D                       		lsr.w	#6,d5
00007896 0245 007F                  		andi.w	#$7F,d5
0000789A 14C5                       		move.b	d5,(a2)+
0000789C 137C 000A 0024             		move.b	#$A,$24(a1)
000078A2 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
000078A4 3342 000C                  		move.w	d2,$C(a1)
000078A8 3342 003C                  		move.w	d2,$3C(a1)
000078AC 3343 0008                  		move.w	d3,8(a1)
000078B0 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
000078B8 337C 438E 0002             		move.w	#$438E,2(a1)
000078BE 137C 0004 0001             		move.b	#4,1(a1)
000078C4 137C 0003 0018             		move.b	#3,$18(a1)
000078CA 137C 0008 0019             		move.b	#8,$19(a1)
000078D0 0643 0010                  		addi.w	#$10,d3
000078D4 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
000078D8                            
000078D8                            Obj11_Action:				; XREF: Obj11_Index
000078D8 6100                       		bsr.s	Obj11_Solid
000078DA 4A28 003E                  		tst.b	$3E(a0)
000078DE 6700                       		beq.s	Obj11_Display
000078E0 5928 003E                  		subq.b	#4,$3E(a0)
000078E4 6100 0000                  		bsr.w	Obj11_Bend
000078E8                            
000078E8                            Obj11_Display:
000078E8 6100 0000                  		bsr.w	DisplaySprite
000078EC 6000 0000                  		bra.w	Obj11_ChkDel
000078F0                            
000078F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000078F0                            
000078F0                            
000078F0                            Obj11_Solid:				; XREF: Obj11_Action
000078F0 7200                       		moveq	#0,d1
000078F2 1228 0028                  		move.b	$28(a0),d1
000078F6 E749                       		lsl.w	#3,d1
000078F8 3401                       		move.w	d1,d2
000078FA 5041                       		addq.w	#8,d1
000078FC D442                       		add.w	d2,d2
000078FE 43F8 D000                  		lea	($FFFFD000).w,a1
00007902 4A69 0012                  		tst.w	$12(a1)
00007906 6B00 0000                  		bmi.w	locret_751E
0000790A 3029 0008                  		move.w	8(a1),d0
0000790E 9068 0008                  		sub.w	8(a0),d0
00007912 D041                       		add.w	d1,d0
00007914 6B00 0000                  		bmi.w	locret_751E
00007918 B042                       		cmp.w	d2,d0
0000791A 6400 0000                  		bcc.w	locret_751E
0000791E 6000                       		bra.s	Platform2
00007920                            ; End of function Obj11_Solid
00007920                            
00007920                            ; ---------------------------------------------------------------------------
00007920                            ; Platform subroutine
00007920                            ; ---------------------------------------------------------------------------
00007920                            
00007920                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007920                            
00007920                            
00007920                            PlatformObject:
00007920 43F8 D000                  		lea	($FFFFD000).w,a1
00007924 4A69 0012                  		tst.w	$12(a1)
00007928 6B00 0000                  		bmi.w	locret_751E
0000792C 3029 0008                  		move.w	8(a1),d0
00007930 9068 0008                  		sub.w	8(a0),d0
00007934 D041                       		add.w	d1,d0
00007936 6B00 0000                  		bmi.w	locret_751E
0000793A D241                       		add.w	d1,d1
0000793C B041                       		cmp.w	d1,d0
0000793E 6400 0000                  		bcc.w	locret_751E
00007942                            
00007942                            Platform2:
00007942 3028 000C                  		move.w	$C(a0),d0
00007946 5140                       		subq.w	#8,d0
00007948                            
00007948                            Platform3:
00007948 3429 000C                  		move.w	$C(a1),d2
0000794C 1229 0016                  		move.b	$16(a1),d1
00007950 4881                       		ext.w	d1
00007952 D242                       		add.w	d2,d1
00007954 5841                       		addq.w	#4,d1
00007956 9041                       		sub.w	d1,d0
00007958 6200 0000                  		bhi.w	locret_751E
0000795C 0C40 FFF0                  		cmpi.w	#-$10,d0
00007960 6500 0000                  		bcs.w	locret_751E
00007964 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007968 6B00 0000                  		bmi.w	locret_751E
0000796C 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00007972 6400 0000                  		bcc.w	locret_751E
00007976 D440                       		add.w	d0,d2
00007978 5642                       		addq.w	#3,d2
0000797A 3342 000C                  		move.w	d2,$C(a1)
0000797E 5428 0024                  		addq.b	#2,$24(a0)
00007982                            
00007982                            loc_74AE:
00007982 0829 0003 0022             		btst	#3,$22(a1)
00007988 6700                       		beq.s	loc_74DC
0000798A 7000                       		moveq	#0,d0
0000798C 1029 003D                  		move.b	$3D(a1),d0
00007990 ED48                       		lsl.w	#6,d0
00007992 0680 00FF D000             		addi.l	#$FFD000,d0
00007998 2440                       		movea.l	d0,a2
0000799A 08AA 0003 0022             		bclr	#3,$22(a2)
000079A0 422A 0025                  		clr.b	$25(a2)
000079A4 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
000079AA 6600                       		bne.s	loc_74DC
000079AC 552A 0024                  		subq.b	#2,$24(a2)
000079B0                            
000079B0                            loc_74DC:
000079B0 3008                       		move.w	a0,d0
000079B2 0440 D000                  		subi.w	#-$3000,d0
000079B6 EC48                       		lsr.w	#6,d0
000079B8 0240 007F                  		andi.w	#$7F,d0
000079BC 1340 003D                  		move.b	d0,$3D(a1)
000079C0 137C 0000 0026             		move.b	#0,$26(a1)
000079C6 337C 0000 0012             		move.w	#0,$12(a1)
000079CC 3369 0010 0014             		move.w	$10(a1),$14(a1)
000079D2 0829 0001 0022             		btst	#1,$22(a1)
000079D8 6700                       		beq.s	loc_7512
000079DA 2F08                       		move.l	a0,-(sp)
000079DC 2049                       		movea.l	a1,a0
000079DE 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
000079E4 205F                       		movea.l	(sp)+,a0
000079E6                            
000079E6                            loc_7512:
000079E6 08E9 0003 0022             		bset	#3,$22(a1)
000079EC 08E8 0003 0022             		bset	#3,$22(a0)
000079F2                            
000079F2                            locret_751E:
000079F2 4E75                       		rts	
000079F4                            ; End of function PlatformObject
000079F4                            
000079F4                            ; ---------------------------------------------------------------------------
000079F4                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
000079F4                            ; ---------------------------------------------------------------------------
000079F4                            
000079F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079F4                            
000079F4                            
000079F4                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
000079F4 43F8 D000                  		lea	($FFFFD000).w,a1
000079F8 4A69 0012                  		tst.w	$12(a1)
000079FC 6B00 FFF4                  		bmi.w	locret_751E
00007A00 3029 0008                  		move.w	8(a1),d0
00007A04 9068 0008                  		sub.w	8(a0),d0
00007A08 D041                       		add.w	d1,d0
00007A0A 6BE6                       		bmi.s	locret_751E
00007A0C D241                       		add.w	d1,d1
00007A0E B041                       		cmp.w	d1,d0
00007A10 64E0                       		bcc.s	locret_751E
00007A12 0828 0000 0001             		btst	#0,1(a0)
00007A18 6700                       		beq.s	loc_754A
00007A1A 4640                       		not.w	d0
00007A1C D041                       		add.w	d1,d0
00007A1E                            
00007A1E                            loc_754A:
00007A1E E248                       		lsr.w	#1,d0
00007A20 7600                       		moveq	#0,d3
00007A22 1632 0000                  		move.b	(a2,d0.w),d3
00007A26 3028 000C                  		move.w	$C(a0),d0
00007A2A 9043                       		sub.w	d3,d0
00007A2C 6000 FF1A                  		bra.w	Platform3
00007A30                            ; End of function SlopeObject
00007A30                            
00007A30                            
00007A30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A30                            
00007A30                            
00007A30                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007A30 43F8 D000                  		lea	($FFFFD000).w,a1
00007A34 4A69 0012                  		tst.w	$12(a1)
00007A38 6B00 FFB8                  		bmi.w	locret_751E
00007A3C 3029 0008                  		move.w	8(a1),d0
00007A40 9068 0008                  		sub.w	8(a0),d0
00007A44 D041                       		add.w	d1,d0
00007A46 6B00 FFAA                  		bmi.w	locret_751E
00007A4A D241                       		add.w	d1,d1
00007A4C B041                       		cmp.w	d1,d0
00007A4E 6400 FFA2                  		bcc.w	locret_751E
00007A52 3028 000C                  		move.w	$C(a0),d0
00007A56 9043                       		sub.w	d3,d0
00007A58 6000 FEEE                  		bra.w	Platform3
00007A5C                            ; End of function Obj15_Solid
00007A5C                            
00007A5C                            ; ===========================================================================
00007A5C                            
00007A5C                            Obj11_Action2:				; XREF: Obj11_Index
00007A5C 6100                       		bsr.s	Obj11_WalkOff
00007A5E 6100 0000                  		bsr.w	DisplaySprite
00007A62 6000 0000                  		bra.w	Obj11_ChkDel
00007A66                            
00007A66                            ; ---------------------------------------------------------------------------
00007A66                            ; Subroutine allowing Sonic to walk off a bridge
00007A66                            ; ---------------------------------------------------------------------------
00007A66                            
00007A66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A66                            
00007A66                            
00007A66                            Obj11_WalkOff:				; XREF: Obj11_Action2
00007A66 7200                       		moveq	#0,d1
00007A68 1228 0028                  		move.b	$28(a0),d1
00007A6C E749                       		lsl.w	#3,d1
00007A6E 3401                       		move.w	d1,d2
00007A70 5041                       		addq.w	#8,d1
00007A72 6100                       		bsr.s	ExitPlatform2
00007A74 6400                       		bcc.s	locret_75BE
00007A76 E848                       		lsr.w	#4,d0
00007A78 1140 003F                  		move.b	d0,$3F(a0)
00007A7C 1028 003E                  		move.b	$3E(a0),d0
00007A80 0C00 0040                  		cmpi.b	#$40,d0
00007A84 6700                       		beq.s	loc_75B6
00007A86 5828 003E                  		addq.b	#4,$3E(a0)
00007A8A                            
00007A8A                            loc_75B6:
00007A8A 6100 0000                  		bsr.w	Obj11_Bend
00007A8E 6100 0000                  		bsr.w	Obj11_MoveSonic
00007A92                            
00007A92                            locret_75BE:
00007A92 4E75                       		rts	
00007A94                            ; End of function Obj11_WalkOff
00007A94                            
00007A94                            ; ---------------------------------------------------------------------------
00007A94                            ; Subroutine allowing Sonic to walk or jump off	a platform
00007A94                            ; ---------------------------------------------------------------------------
00007A94                            
00007A94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A94                            
00007A94                            
00007A94                            ExitPlatform:
00007A94 3401                       		move.w	d1,d2
00007A96                            
00007A96                            ExitPlatform2:
00007A96 D442                       		add.w	d2,d2
00007A98 43F8 D000                  		lea	($FFFFD000).w,a1
00007A9C 0829 0001 0022             		btst	#1,$22(a1)
00007AA2 6600                       		bne.s	loc_75E0
00007AA4 3029 0008                  		move.w	8(a1),d0
00007AA8 9068 0008                  		sub.w	8(a0),d0
00007AAC D041                       		add.w	d1,d0
00007AAE 6B00                       		bmi.s	loc_75E0
00007AB0 B042                       		cmp.w	d2,d0
00007AB2 6500                       		bcs.s	locret_75F2
00007AB4                            
00007AB4                            loc_75E0:
00007AB4 08A9 0003 0022             		bclr	#3,$22(a1)
00007ABA 117C 0002 0024             		move.b	#2,$24(a0)
00007AC0 08A8 0003 0022             		bclr	#3,$22(a0)
00007AC6                            
00007AC6                            locret_75F2:
00007AC6 4E75                       		rts	
00007AC8                            ; End of function ExitPlatform
00007AC8                            
00007AC8                            
00007AC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007AC8                            
00007AC8                            
00007AC8                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00007AC8 7000                       		moveq	#0,d0
00007ACA 1028 003F                  		move.b	$3F(a0),d0
00007ACE 1030 0029                  		move.b	$29(a0,d0.w),d0
00007AD2 ED48                       		lsl.w	#6,d0
00007AD4 0680 00FF D000             		addi.l	#$FFD000,d0
00007ADA 2440                       		movea.l	d0,a2
00007ADC 43F8 D000                  		lea	($FFFFD000).w,a1
00007AE0 302A 000C                  		move.w	$C(a2),d0
00007AE4 5140                       		subq.w	#8,d0
00007AE6 7200                       		moveq	#0,d1
00007AE8 1229 0016                  		move.b	$16(a1),d1
00007AEC 9041                       		sub.w	d1,d0
00007AEE 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007AF2 4E75                       		rts	
00007AF4                            ; End of function Obj11_MoveSonic
00007AF4                            
00007AF4                            
00007AF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007AF4                            
00007AF4                            
00007AF4                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007AF4 1028 003E                  		move.b	$3E(a0),d0
00007AF8 6100 B166                  		bsr.w	CalcSine
00007AFC 3800                       		move.w	d0,d4
00007AFE 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007B04 7000                       		moveq	#0,d0
00007B06 1028 0028                  		move.b	$28(a0),d0
00007B0A E948                       		lsl.w	#4,d0
00007B0C 7600                       		moveq	#0,d3
00007B0E 1628 003F                  		move.b	$3F(a0),d3
00007B12 3403                       		move.w	d3,d2
00007B14 D640                       		add.w	d0,d3
00007B16 7A00                       		moveq	#0,d5
00007B18 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007B1E 1A35 3000                  		move.b	(a5,d3.w),d5
00007B22 0243 000F                  		andi.w	#$F,d3
00007B26 E94B                       		lsl.w	#4,d3
00007B28 47F4 3000                  		lea	(a4,d3.w),a3
00007B2C 45E8 0029                  		lea	$29(a0),a2
00007B30                            
00007B30                            loc_765C:
00007B30 7000                       		moveq	#0,d0
00007B32 101A                       		move.b	(a2)+,d0
00007B34 ED48                       		lsl.w	#6,d0
00007B36 0680 00FF D000             		addi.l	#$FFD000,d0
00007B3C 2240                       		movea.l	d0,a1
00007B3E 7000                       		moveq	#0,d0
00007B40 101B                       		move.b	(a3)+,d0
00007B42 5240                       		addq.w	#1,d0
00007B44 C0C5                       		mulu.w	d5,d0
00007B46 C0C4                       		mulu.w	d4,d0
00007B48 4840                       		swap	d0
00007B4A D069 003C                  		add.w	$3C(a1),d0
00007B4E 3340 000C                  		move.w	d0,$C(a1)
00007B52 51CA FFDC                  		dbf	d2,loc_765C
00007B56 7000                       		moveq	#0,d0
00007B58 1028 0028                  		move.b	$28(a0),d0
00007B5C 7600                       		moveq	#0,d3
00007B5E 1628 003F                  		move.b	$3F(a0),d3
00007B62 5203                       		addq.b	#1,d3
00007B64 9600                       		sub.b	d0,d3
00007B66 4403                       		neg.b	d3
00007B68 6B00                       		bmi.s	locret_76CA
00007B6A 3403                       		move.w	d3,d2
00007B6C E94B                       		lsl.w	#4,d3
00007B6E 47F4 3000                  		lea	(a4,d3.w),a3
00007B72 D6C2                       		adda.w	d2,a3
00007B74 5342                       		subq.w	#1,d2
00007B76 6500                       		bcs.s	locret_76CA
00007B78                            
00007B78                            loc_76A4:
00007B78 7000                       		moveq	#0,d0
00007B7A 101A                       		move.b	(a2)+,d0
00007B7C ED48                       		lsl.w	#6,d0
00007B7E 0680 00FF D000             		addi.l	#$FFD000,d0
00007B84 2240                       		movea.l	d0,a1
00007B86 7000                       		moveq	#0,d0
00007B88 1023                       		move.b	-(a3),d0
00007B8A 5240                       		addq.w	#1,d0
00007B8C C0C5                       		mulu.w	d5,d0
00007B8E C0C4                       		mulu.w	d4,d0
00007B90 4840                       		swap	d0
00007B92 D069 003C                  		add.w	$3C(a1),d0
00007B96 3340 000C                  		move.w	d0,$C(a1)
00007B9A 51CA FFDC                  		dbf	d2,loc_76A4
00007B9E                            
00007B9E                            locret_76CA:
00007B9E 4E75                       		rts	
00007BA0                            ; End of function Obj11_Bend
00007BA0                            
00007BA0                            ; ===========================================================================
00007BA0                            ; ---------------------------------------------------------------------------
00007BA0                            ; GHZ bridge-bending data
00007BA0                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007BA0                            ; ---------------------------------------------------------------------------
00007BA0                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00007CB0                            		even
00007CB0                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00007DB0                            		even
00007DB0                            
00007DB0                            ; ===========================================================================
00007DB0                            
00007DB0                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00007DB0 3028 0008                  		move.w	8(a0),d0
00007DB4 0240 FF80                  		andi.w	#$FF80,d0
00007DB8 3238 F700                  		move.w	($FFFFF700).w,d1
00007DBC 0441 0080                  		subi.w	#$80,d1
00007DC0 0241 FF80                  		andi.w	#$FF80,d1
00007DC4 9041                       		sub.w	d1,d0
00007DC6 0C40 0280                  		cmpi.w	#$280,d0
00007DCA 6200 0000                  		bhi.w	Obj11_DelAll
00007DCE 4E75                       		rts	
00007DD0                            ; ===========================================================================
00007DD0                            
00007DD0                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00007DD0 7400                       		moveq	#0,d2
00007DD2 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00007DD6 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00007DD8 5302                       		subq.b	#1,d2		; subtract 1
00007DDA 6500                       		bcs.s	Obj11_Delete
00007DDC                            
00007DDC                            Obj11_DelLoop:
00007DDC 7000                       		moveq	#0,d0
00007DDE 101A                       		move.b	(a2)+,d0
00007DE0 ED48                       		lsl.w	#6,d0
00007DE2 0680 00FF D000             		addi.l	#$FFD000,d0
00007DE8 2240                       		movea.l	d0,a1
00007DEA B048                       		cmp.w	a0,d0
00007DEC 6700                       		beq.s	loc_791E
00007DEE 6100 0000                  		bsr.w	DeleteObject2
00007DF2                            
00007DF2                            loc_791E:
00007DF2 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00007DF6                            
00007DF6                            Obj11_Delete:
00007DF6 6100 0000                  		bsr.w	DeleteObject
00007DFA 4E75                       		rts	
00007DFC                            ; ===========================================================================
00007DFC                            
00007DFC                            Obj11_Delete2:				; XREF: Obj11_Index
00007DFC 6100 0000                  		bsr.w	DeleteObject
00007E00 4E75                       		rts	
00007E02                            ; ===========================================================================
00007E02                            
00007E02                            Obj11_Display2:				; XREF: Obj11_Index
00007E02 6100 0000                  		bsr.w	DisplaySprite
00007E06 4E75                       		rts	
00007E08                            ; ===========================================================================
00007E08                            ; ---------------------------------------------------------------------------
00007E08                            ; Sprite mappings - GHZ	bridge
00007E08                            ; ---------------------------------------------------------------------------
00007E08                            Map_obj11:
00007E08                            	include "_maps\obj11.asm"
00007E08                            ; ---------------------------------------------------------------------------
00007E08                            ; Sprite mappings - GHZ	bridge
00007E08                            ; ---------------------------------------------------------------------------
00007E08 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00007E0C 0000                       		dc.w byte_794B-Map_obj11
00007E0E 01                         byte_793A:	dc.b 1
00007E0F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007E14 02                         byte_7940:	dc.b 2
00007E15 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00007E1A 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00007E1F 01                         byte_794B:	dc.b 1
00007E20 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00007E26 00                         		even
00007E26 00                         		even
00007E26                            
00007E26                            ; ===========================================================================
00007E26                            ; ---------------------------------------------------------------------------
00007E26                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00007E26                            ;	    - spiked ball on a chain (SBZ)
00007E26                            ; ---------------------------------------------------------------------------
00007E26                            
00007E26                            Obj15:					; XREF: Obj_Index
00007E26 7000                       		moveq	#0,d0
00007E28 1028 0024                  		move.b	$24(a0),d0
00007E2C 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00007E30 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00007E34                            ; ===========================================================================
00007E34 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00007E38 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00007E3C 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00007E40 0000                       		dc.w Obj15_Action-Obj15_Index
00007E42                            ; ===========================================================================
00007E42                            
00007E42                            Obj15_Main:				; XREF: Obj15_Index
00007E42 5428 0024                  		addq.b	#2,$24(a0)
00007E46 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00007E4E 317C 4380 0002             		move.w	#$4380,2(a0)
00007E54 117C 0004 0001             		move.b	#4,1(a0)
00007E5A 117C 0003 0018             		move.b	#3,$18(a0)
00007E60 117C 0018 0019             		move.b	#$18,$19(a0)
00007E66 117C 0008 0016             		move.b	#8,$16(a0)
00007E6C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00007E72 3168 0008 003A             		move.w	8(a0),$3A(a0)
00007E78 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007E7E 6600                       		bne.s	Obj15_NotSLZ
00007E80 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00007E88 317C 43DC 0002             		move.w	#$43DC,2(a0)
00007E8E 117C 0020 0019             		move.b	#$20,$19(a0)
00007E94 117C 0010 0016             		move.b	#$10,$16(a0)
00007E9A 117C 0099 0020             		move.b	#$99,$20(a0)
00007EA0                            
00007EA0                            Obj15_NotSLZ:
00007EA0 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00007EA6 6600                       		bne.s	Obj15_SetLength
00007EA8 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00007EB0 317C 0391 0002             		move.w	#$391,2(a0)
00007EB6 117C 0018 0019             		move.b	#$18,$19(a0)
00007EBC 117C 0018 0016             		move.b	#$18,$16(a0)
00007EC2 117C 0086 0020             		move.b	#$86,$20(a0)
00007EC8 117C 000C 0024             		move.b	#$C,$24(a0)
00007ECE                            
00007ECE                            Obj15_SetLength:
00007ECE 1810                       		move.b	0(a0),d4
00007ED0 7200                       		moveq	#0,d1
00007ED2 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00007ED6 1212                       		move.b	(a2),d1		; move a2 to d1
00007ED8 3F01                       		move.w	d1,-(sp)
00007EDA 0241 000F                  		andi.w	#$F,d1
00007EDE 14FC 0000                  		move.b	#0,(a2)+
00007EE2 3601                       		move.w	d1,d3
00007EE4 E94B                       		lsl.w	#4,d3
00007EE6 5003                       		addq.b	#8,d3
00007EE8 1143 003C                  		move.b	d3,$3C(a0)
00007EEC 5103                       		subq.b	#8,d3
00007EEE 4A28 001A                  		tst.b	$1A(a0)
00007EF2 6700                       		beq.s	Obj15_MakeChain
00007EF4 5003                       		addq.b	#8,d3
00007EF6 5341                       		subq.w	#1,d1
00007EF8                            
00007EF8                            Obj15_MakeChain:
00007EF8 6100 0000                  		bsr.w	SingleObjLoad
00007EFC 6600                       		bne.s	loc_7A92
00007EFE 5228 0028                  		addq.b	#1,$28(a0)
00007F02 3A09                       		move.w	a1,d5
00007F04 0445 D000                  		subi.w	#-$3000,d5
00007F08 EC4D                       		lsr.w	#6,d5
00007F0A 0245 007F                  		andi.w	#$7F,d5
00007F0E 14C5                       		move.b	d5,(a2)+
00007F10 137C 000A 0024             		move.b	#$A,$24(a1)
00007F16 1284                       		move.b	d4,0(a1)	; load swinging	object
00007F18 2368 0004 0004             		move.l	4(a0),4(a1)
00007F1E 3368 0002 0002             		move.w	2(a0),2(a1)
00007F24 08A9 0006 0002             		bclr	#6,2(a1)
00007F2A 137C 0004 0001             		move.b	#4,1(a1)
00007F30 137C 0004 0018             		move.b	#4,$18(a1)
00007F36 137C 0008 0019             		move.b	#8,$19(a1)
00007F3C 137C 0001 001A             		move.b	#1,$1A(a1)
00007F42 1343 003C                  		move.b	d3,$3C(a1)
00007F46 0403 0010                  		subi.b	#$10,d3
00007F4A 6400                       		bcc.s	loc_7A8E
00007F4C 137C 0002 001A             		move.b	#2,$1A(a1)
00007F52 137C 0003 0018             		move.b	#3,$18(a1)
00007F58 08E9 0006 0002             		bset	#6,2(a1)
00007F5E                            
00007F5E                            loc_7A8E:
00007F5E 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00007F62                            
00007F62                            loc_7A92:
00007F62 3A08                       		move.w	a0,d5
00007F64 0445 D000                  		subi.w	#-$3000,d5
00007F68 EC4D                       		lsr.w	#6,d5
00007F6A 0245 007F                  		andi.w	#$7F,d5
00007F6E 14C5                       		move.b	d5,(a2)+
00007F70 317C 4080 0026             		move.w	#$4080,$26(a0)
00007F76 317C FE00 003E             		move.w	#-$200,$3E(a0)
00007F7C 321F                       		move.w	(sp)+,d1
00007F7E 0801 0004                  		btst	#4,d1		; is object type $8X ?
00007F82 6700                       		beq.s	loc_7AD4	; if not, branch
00007F84 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00007F8C 317C 43AA 0002             		move.w	#$43AA,2(a0)
00007F92 117C 0001 001A             		move.b	#1,$1A(a0)
00007F98 117C 0002 0018             		move.b	#2,$18(a0)
00007F9E 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00007FA4                            
00007FA4                            loc_7AD4:
00007FA4 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00007FAA 6700                       		beq.s	Obj15_Action	; if yes, branch
00007FAC                            
00007FAC                            Obj15_SetSolid:				; XREF: Obj15_Index
00007FAC 7200                       		moveq	#0,d1
00007FAE 1228 0019                  		move.b	$19(a0),d1
00007FB2 7600                       		moveq	#0,d3
00007FB4 1628 0016                  		move.b	$16(a0),d3
00007FB8 6100 FA76                  		bsr.w	Obj15_Solid
00007FBC                            
00007FBC                            Obj15_Action:				; XREF: Obj15_Index
00007FBC 6100 0000                  		bsr.w	Obj15_Move
00007FC0 6100 0000                  		bsr.w	DisplaySprite
00007FC4 6000 0000                  		bra.w	Obj15_ChkDel
00007FC8                            ; ===========================================================================
00007FC8                            
00007FC8                            Obj15_Action2:				; XREF: Obj15_Index
00007FC8 7200                       		moveq	#0,d1
00007FCA 1228 0019                  		move.b	$19(a0),d1
00007FCE 6100 FAC4                  		bsr.w	ExitPlatform
00007FD2 3F28 0008                  		move.w	8(a0),-(sp)
00007FD6 6100 0000                  		bsr.w	Obj15_Move
00007FDA 341F                       		move.w	(sp)+,d2
00007FDC 7600                       		moveq	#0,d3
00007FDE 1628 0016                  		move.b	$16(a0),d3
00007FE2 5203                       		addq.b	#1,d3
00007FE4 6100 0000                  		bsr.w	MvSonicOnPtfm
00007FE8 6100 0000                  		bsr.w	DisplaySprite
00007FEC 6000 0000                  		bra.w	Obj15_ChkDel
00007FF0                            
00007FF0 4E75                       		rts
00007FF2                            
00007FF2                            ; ---------------------------------------------------------------------------
00007FF2                            ; Subroutine to	change Sonic's position with a platform
00007FF2                            ; ---------------------------------------------------------------------------
00007FF2                            
00007FF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FF2                            
00007FF2                            
00007FF2                            MvSonicOnPtfm:
00007FF2 43F8 D000                  		lea	($FFFFD000).w,a1
00007FF6 3028 000C                  		move.w	$C(a0),d0
00007FFA 9043                       		sub.w	d3,d0
00007FFC 6000                       		bra.s	MvSonic2
00007FFE                            ; End of function MvSonicOnPtfm
00007FFE                            
00007FFE                            ; ---------------------------------------------------------------------------
00007FFE                            ; Subroutine to	change Sonic's position with a platform
00007FFE                            ; ---------------------------------------------------------------------------
00007FFE                            
00007FFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FFE                            
00007FFE                            
00007FFE                            MvSonicOnPtfm2:
00007FFE 43F8 D000                  		lea	($FFFFD000).w,a1
00008002 3028 000C                  		move.w	$C(a0),d0
00008006 0440 0009                  		subi.w	#9,d0
0000800A                            
0000800A                            MvSonic2:
0000800A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000800E 6B00                       		bmi.s	locret_7B62
00008010 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008016 6400                       		bcc.s	locret_7B62
00008018 4A78 FE08                  		tst.w	($FFFFFE08).w
0000801C 6600                       		bne.s	locret_7B62
0000801E 7200                       		moveq	#0,d1
00008020 1229 0016                  		move.b	$16(a1),d1
00008024 9041                       		sub.w	d1,d0
00008026 3340 000C                  		move.w	d0,$C(a1)
0000802A 9468 0008                  		sub.w	8(a0),d2
0000802E 9569 0008                  		sub.w	d2,8(a1)
00008032                            
00008032                            locret_7B62:
00008032 4E75                       		rts	
00008034                            ; End of function MvSonicOnPtfm2
00008034                            
00008034                            
00008034                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008034                            
00008034                            
00008034                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00008034 1038 FE78                  		move.b	($FFFFFE78).w,d0
00008038 323C 0080                  		move.w	#$80,d1
0000803C 0828 0000 0022             		btst	#0,$22(a0)
00008042 6700                       		beq.s	loc_7B78
00008044 4440                       		neg.w	d0
00008046 D041                       		add.w	d1,d0
00008048                            
00008048                            loc_7B78:
00008048 6000                       		bra.s	Obj15_Move2
0000804A                            ; End of function Obj15_Move
0000804A                            
0000804A                            
0000804A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000804A                            
0000804A                            
0000804A                            Obj48_Move:				; XREF: Obj48_Display2
0000804A 4A28 003D                  		tst.b	$3D(a0)
0000804E 6600                       		bne.s	loc_7B9C
00008050 3028 003E                  		move.w	$3E(a0),d0
00008054 5040                       		addq.w	#8,d0
00008056 3140 003E                  		move.w	d0,$3E(a0)
0000805A D168 0026                  		add.w	d0,$26(a0)
0000805E 0C40 0200                  		cmpi.w	#$200,d0
00008062 6600                       		bne.s	loc_7BB6
00008064 117C 0001 003D             		move.b	#1,$3D(a0)
0000806A 6000                       		bra.s	loc_7BB6
0000806C                            ; ===========================================================================
0000806C                            
0000806C                            loc_7B9C:
0000806C 3028 003E                  		move.w	$3E(a0),d0
00008070 5140                       		subq.w	#8,d0
00008072 3140 003E                  		move.w	d0,$3E(a0)
00008076 D168 0026                  		add.w	d0,$26(a0)
0000807A 0C40 FE00                  		cmpi.w	#-$200,d0
0000807E 6600                       		bne.s	loc_7BB6
00008080 117C 0000 003D             		move.b	#0,$3D(a0)
00008086                            
00008086                            loc_7BB6:
00008086 1028 0026                  		move.b	$26(a0),d0
0000808A                            ; End of function Obj48_Move
0000808A                            
0000808A                            
0000808A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000808A                            
0000808A                            
0000808A                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
0000808A 6100 ABD4                  		bsr.w	CalcSine
0000808E 3428 0038                  		move.w	$38(a0),d2
00008092 3628 003A                  		move.w	$3A(a0),d3
00008096 45E8 0028                  		lea	$28(a0),a2
0000809A 7C00                       		moveq	#0,d6
0000809C 1C1A                       		move.b	(a2)+,d6
0000809E                            
0000809E                            loc_7BCE:
0000809E 7800                       		moveq	#0,d4
000080A0 181A                       		move.b	(a2)+,d4
000080A2 ED4C                       		lsl.w	#6,d4
000080A4 0684 00FF D000             		addi.l	#$FFD000,d4
000080AA 2244                       		movea.l	d4,a1
000080AC 7800                       		moveq	#0,d4
000080AE 1829 003C                  		move.b	$3C(a1),d4
000080B2 2A04                       		move.l	d4,d5
000080B4 C9C0                       		muls.w	d0,d4
000080B6 E084                       		asr.l	#8,d4
000080B8 CBC1                       		muls.w	d1,d5
000080BA E085                       		asr.l	#8,d5
000080BC D842                       		add.w	d2,d4
000080BE DA43                       		add.w	d3,d5
000080C0 3344 000C                  		move.w	d4,$C(a1)
000080C4 3345 0008                  		move.w	d5,8(a1)
000080C8 51CE FFD4                  		dbf	d6,loc_7BCE
000080CC 4E75                       		rts	
000080CE                            ; End of function Obj15_Move2
000080CE                            
000080CE                            ; ===========================================================================
000080CE                            
000080CE                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
000080CE 3028 003A                  		move.w	$3A(a0),d0
000080D2 0240 FF80                  		andi.w	#$FF80,d0
000080D6 3238 F700                  		move.w	($FFFFF700).w,d1
000080DA 0441 0080                  		subi.w	#$80,d1
000080DE 0241 FF80                  		andi.w	#$FF80,d1
000080E2 9041                       		sub.w	d1,d0
000080E4 0C40 0280                  		cmpi.w	#$280,d0
000080E8 6200 0000                  		bhi.w	Obj15_DelAll
000080EC 4E75                       		rts	
000080EE                            ; ===========================================================================
000080EE                            
000080EE                            Obj15_DelAll:				; XREF: Obj15_ChkDel
000080EE 7400                       		moveq	#0,d2
000080F0 45E8 0028                  		lea	$28(a0),a2
000080F4 141A                       		move.b	(a2)+,d2
000080F6                            
000080F6                            Obj15_DelLoop:
000080F6 7000                       		moveq	#0,d0
000080F8 101A                       		move.b	(a2)+,d0
000080FA ED48                       		lsl.w	#6,d0
000080FC 0680 00FF D000             		addi.l	#$FFD000,d0
00008102 2240                       		movea.l	d0,a1
00008104 6100 0000                  		bsr.w	DeleteObject2
00008108 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
0000810C 4E75                       		rts	
0000810E                            ; ===========================================================================
0000810E                            
0000810E                            Obj15_Delete:				; XREF: Obj15_Index
0000810E 6100 0000                  		bsr.w	DeleteObject
00008112 4E75                       		rts	
00008114                            ; ===========================================================================
00008114                            
00008114                            Obj15_Display:				; XREF: Obj15_Index
00008114 6000 0000                  		bra.w	DisplaySprite
00008118                            ; ===========================================================================
00008118                            ; ---------------------------------------------------------------------------
00008118                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008118                            ; ---------------------------------------------------------------------------
00008118                            Map_obj15:
00008118                            	include "_maps\obj15ghz.asm"
00008118                            ; ---------------------------------------------------------------------------
00008118                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008118                            ; ---------------------------------------------------------------------------
00008118 0000                       		dc.w byte_7C4E-Map_obj15
0000811A 0000                       		dc.w byte_7C59-Map_obj15
0000811C 0000                       		dc.w byte_7C5F-Map_obj15
0000811E 02                         byte_7C4E:	dc.b 2
0000811F F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00008124 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00008129 01                         byte_7C59:	dc.b 1
0000812A F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000812F 01                         byte_7C5F:	dc.b 1
00008130 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00008136 00                         		even
00008136 00                         		even
00008136                            
00008136                            ; ---------------------------------------------------------------------------
00008136                            ; Sprite mappings - SLZ	swinging platforms
00008136                            ; ---------------------------------------------------------------------------
00008136                            Map_obj15a:
00008136                            	include "_maps\obj15slz.asm"
00008136                            ; ---------------------------------------------------------------------------
00008136                            ; Sprite mappings - SLZ	swinging platforms
00008136                            ; ---------------------------------------------------------------------------
00008136 0000                       		dc.w byte_7C6C-Map_obj15a
00008138 0000                       		dc.w byte_7C95-Map_obj15a
0000813A 0000                       		dc.w byte_7C9B-Map_obj15a
0000813C 08                         byte_7C6C:	dc.b 8
0000813D F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00008142 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00008147 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
0000814C F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00008151 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00008156 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
0000815B 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00008160 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00008165 01                         byte_7C95:	dc.b 1
00008166 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
0000816B 01                         byte_7C9B:	dc.b 1
0000816C F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00008172 00                         		even
00008172 00                         		even
00008172                            
00008172                            ; ===========================================================================
00008172                            ; ---------------------------------------------------------------------------
00008172                            ; Object 17 - helix of spikes on a pole	(GHZ)
00008172                            ; ---------------------------------------------------------------------------
00008172                            
00008172                            Obj17:					; XREF: Obj_Index
00008172 7000                       		moveq	#0,d0
00008174 1028 0024                  		move.b	$24(a0),d0
00008178 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
0000817C 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00008180                            ; ===========================================================================
00008180 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00008182 0000                       		dc.w Obj17_Action-Obj17_Index
00008184 0000                       		dc.w Obj17_Action-Obj17_Index
00008186 0000                       		dc.w Obj17_Delete-Obj17_Index
00008188 0000                       		dc.w Obj17_Display-Obj17_Index
0000818A                            ; ===========================================================================
0000818A                            
0000818A                            Obj17_Main:				; XREF: Obj17_Index
0000818A 5428 0024                  		addq.b	#2,$24(a0)
0000818E 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00008196 317C 4398 0002             		move.w	#$4398,2(a0)
0000819C 117C 0007 0022             		move.b	#7,$22(a0)
000081A2 117C 0004 0001             		move.b	#4,1(a0)
000081A8 117C 0003 0018             		move.b	#3,$18(a0)
000081AE 117C 0008 0019             		move.b	#8,$19(a0)
000081B4 3428 000C                  		move.w	$C(a0),d2
000081B8 3628 0008                  		move.w	8(a0),d3
000081BC 1810                       		move.b	0(a0),d4
000081BE 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
000081C2 7200                       		moveq	#0,d1
000081C4 1212                       		move.b	(a2),d1		; move a2 to d1
000081C6 14FC 0000                  		move.b	#0,(a2)+
000081CA 3001                       		move.w	d1,d0
000081CC E248                       		lsr.w	#1,d0
000081CE E948                       		lsl.w	#4,d0
000081D0 9640                       		sub.w	d0,d3
000081D2 5501                       		subq.b	#2,d1
000081D4 6500                       		bcs.s	Obj17_Action
000081D6 7C00                       		moveq	#0,d6
000081D8                            
000081D8                            Obj17_MakeHelix:
000081D8 6100 0000                  		bsr.w	SingleObjLoad
000081DC 6600                       		bne.s	Obj17_Action
000081DE 5228 0028                  		addq.b	#1,$28(a0)
000081E2 3A09                       		move.w	a1,d5
000081E4 0445 D000                  		subi.w	#$D000,d5
000081E8 EC4D                       		lsr.w	#6,d5
000081EA 0245 007F                  		andi.w	#$7F,d5
000081EE 14C5                       		move.b	d5,(a2)+
000081F0 137C 0008 0024             		move.b	#8,$24(a1)
000081F6 1284                       		move.b	d4,0(a1)
000081F8 3342 000C                  		move.w	d2,$C(a1)
000081FC 3343 0008                  		move.w	d3,8(a1)
00008200 2368 0004 0004             		move.l	4(a0),4(a1)
00008206 337C 4398 0002             		move.w	#$4398,2(a1)
0000820C 137C 0004 0001             		move.b	#4,1(a1)
00008212 137C 0003 0018             		move.b	#3,$18(a1)
00008218 137C 0008 0019             		move.b	#8,$19(a1)
0000821E 1346 003E                  		move.b	d6,$3E(a1)
00008222 5206                       		addq.b	#1,d6
00008224 0206 0007                  		andi.b	#7,d6
00008228 0643 0010                  		addi.w	#$10,d3
0000822C B668 0008                  		cmp.w	8(a0),d3
00008230 6600                       		bne.s	loc_7D78
00008232 1146 003E                  		move.b	d6,$3E(a0)
00008236 5206                       		addq.b	#1,d6
00008238 0206 0007                  		andi.b	#7,d6
0000823C 0643 0010                  		addi.w	#$10,d3
00008240 5228 0028                  		addq.b	#1,$28(a0)
00008244                            
00008244                            loc_7D78:
00008244 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00008248                            
00008248                            Obj17_Action:				; XREF: Obj17_Index
00008248 6100 0000                  		bsr.w	Obj17_RotateSpikes
0000824C 6100 0000                  		bsr.w	DisplaySprite
00008250 6000 0000                  		bra.w	Obj17_ChkDel
00008254                            
00008254                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008254                            
00008254                            
00008254                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00008254 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00008258 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
0000825E D028 003E                  		add.b	$3E(a0),d0
00008262 0200 0007                  		andi.b	#7,d0
00008266 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
0000826A 6600                       		bne.s	locret_7DA6
0000826C 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
00008272                            
00008272                            locret_7DA6:
00008272 4E75                       		rts	
00008274                            ; End of function Obj17_RotateSpikes
00008274                            
00008274                            ; ===========================================================================
00008274                            
00008274                            Obj17_ChkDel:				; XREF: Obj17_Action
00008274 3028 0008                  		move.w	8(a0),d0
00008278 0240 FF80                  		andi.w	#$FF80,d0
0000827C 3238 F700                  		move.w	($FFFFF700).w,d1
00008280 0441 0080                  		subi.w	#$80,d1
00008284 0241 FF80                  		andi.w	#$FF80,d1
00008288 9041                       		sub.w	d1,d0
0000828A 0C40 0280                  		cmpi.w	#$280,d0
0000828E 6200 0000                  		bhi.w	Obj17_DelAll
00008292 4E75                       		rts	
00008294                            ; ===========================================================================
00008294                            
00008294                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00008294 7400                       		moveq	#0,d2
00008296 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
0000829A 141A                       		move.b	(a2)+,d2	; move a2 to d2
0000829C 5502                       		subq.b	#2,d2
0000829E 6500                       		bcs.s	Obj17_Delete
000082A0                            
000082A0                            Obj17_DelLoop:
000082A0 7000                       		moveq	#0,d0
000082A2 101A                       		move.b	(a2)+,d0
000082A4 ED48                       		lsl.w	#6,d0
000082A6 0680 00FF D000             		addi.l	#$FFD000,d0
000082AC 2240                       		movea.l	d0,a1
000082AE 6100 0000                  		bsr.w	DeleteObject2	; delete object
000082B2 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
000082B6                            
000082B6                            Obj17_Delete:				; XREF: Obj17_Index
000082B6 6100 0000                  		bsr.w	DeleteObject
000082BA 4E75                       		rts	
000082BC                            ; ===========================================================================
000082BC                            
000082BC                            Obj17_Display:				; XREF: Obj17_Index
000082BC 6100 FF96                  		bsr.w	Obj17_RotateSpikes
000082C0 6000 0000                  		bra.w	DisplaySprite
000082C4                            ; ===========================================================================
000082C4                            ; ---------------------------------------------------------------------------
000082C4                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000082C4                            ; ---------------------------------------------------------------------------
000082C4                            Map_obj17:
000082C4                            	include "_maps\obj17.asm"
000082C4                            ; ---------------------------------------------------------------------------
000082C4                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000082C4                            ; ---------------------------------------------------------------------------
000082C4 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
000082C8 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
000082CC 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
000082D0 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
000082D4 01                         byte_7E08:	dc.b 1
000082D5 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
000082DA 01                         byte_7E0E:	dc.b 1
000082DB F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
000082E0 01                         byte_7E14:	dc.b 1
000082E1 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
000082E6 01                         byte_7E1A:	dc.b 1
000082E7 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
000082EC 01                         byte_7E20:	dc.b 1
000082ED 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
000082F2 01                         byte_7E26:	dc.b 1
000082F3 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
000082F8 01                         byte_7E2C:	dc.b 1
000082F9 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
000082FE                            		even
000082FE                            		even
000082FE                            
000082FE                            ; ===========================================================================
000082FE                            ; ---------------------------------------------------------------------------
000082FE                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
000082FE                            ; ---------------------------------------------------------------------------
000082FE                            
000082FE                            Obj18:					; XREF: Obj_Index
000082FE 7000                       		moveq	#0,d0
00008300 1028 0024                  		move.b	$24(a0),d0
00008304 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00008308 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
0000830C                            ; ===========================================================================
0000830C 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
0000830E 0000                       		dc.w Obj18_Solid-Obj18_Index
00008310 0000                       		dc.w Obj18_Action2-Obj18_Index
00008312 0000                       		dc.w Obj18_Delete-Obj18_Index
00008314 0000                       		dc.w Obj18_Action-Obj18_Index
00008316                            ; ===========================================================================
00008316                            
00008316                            Obj18_Main:				; XREF: Obj18_Index
00008316 5428 0024                  		addq.b	#2,$24(a0)
0000831A 317C 4000 0002             		move.w	#$4000,2(a0)
00008320 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00008328 117C 0020 0019             		move.b	#$20,$19(a0)
0000832E 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00008334 6600                       		bne.s	Obj18_NotSYZ
00008336 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
0000833E 117C 0020 0019             		move.b	#$20,$19(a0)
00008344                            
00008344                            Obj18_NotSYZ:
00008344 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000834A 6600                       		bne.s	Obj18_NotSLZ
0000834C 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00008354 117C 0020 0019             		move.b	#$20,$19(a0)
0000835A 317C 4000 0002             		move.w	#$4000,2(a0)
00008360 117C 0003 0028             		move.b	#3,$28(a0)
00008366                            
00008366                            Obj18_NotSLZ:
00008366 117C 0004 0001             		move.b	#4,1(a0)
0000836C 117C 0004 0018             		move.b	#4,$18(a0)
00008372 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00008378 3168 000C 0034             		move.w	$C(a0),$34(a0)
0000837E 3168 0008 0032             		move.w	8(a0),$32(a0)
00008384 317C 0080 0026             		move.w	#$80,$26(a0)
0000838A 7200                       		moveq	#0,d1
0000838C 1028 0028                  		move.b	$28(a0),d0
00008390 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00008394 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00008396 5201                       		addq.b	#1,d1		; use frame #1
00008398 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
0000839E                            
0000839E                            Obj18_SetFrame:
0000839E 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
000083A2                            
000083A2                            Obj18_Solid:				; XREF: Obj18_Index
000083A2 4A28 0038                  		tst.b	$38(a0)
000083A6 6700                       		beq.s	loc_7EE0
000083A8 5928 0038                  		subq.b	#4,$38(a0)
000083AC                            
000083AC                            loc_7EE0:
000083AC 7200                       		moveq	#0,d1
000083AE 1228 0019                  		move.b	$19(a0),d1
000083B2 6100 F56C                  		bsr.w	PlatformObject
000083B6                            
000083B6                            Obj18_Action:				; XREF: Obj18_Index
000083B6 6100 0000                  		bsr.w	Obj18_Move
000083BA 6100 0000                  		bsr.w	Obj18_Nudge
000083BE 6100 0000                  		bsr.w	DisplaySprite
000083C2 6000 0000                  		bra.w	Obj18_ChkDel
000083C6                            ; ===========================================================================
000083C6                            
000083C6                            Obj18_Action2:				; XREF: Obj18_Index
000083C6 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
000083CC 6700                       		beq.s	loc_7F06
000083CE 5828 0038                  		addq.b	#4,$38(a0)
000083D2                            
000083D2                            loc_7F06:
000083D2 7200                       		moveq	#0,d1
000083D4 1228 0019                  		move.b	$19(a0),d1
000083D8 6100 F6BA                  		bsr.w	ExitPlatform
000083DC 3F28 0008                  		move.w	8(a0),-(sp)
000083E0 6100 0000                  		bsr.w	Obj18_Move
000083E4 6100 0000                  		bsr.w	Obj18_Nudge
000083E8 341F                       		move.w	(sp)+,d2
000083EA 6100 FC12                  		bsr.w	MvSonicOnPtfm2
000083EE 6100 0000                  		bsr.w	DisplaySprite
000083F2 6000 0000                  		bra.w	Obj18_ChkDel
000083F6                            
000083F6 4E75                       		rts
000083F8                            
000083F8                            ; ---------------------------------------------------------------------------
000083F8                            ; Subroutine to	move platform slightly when you	stand on it
000083F8                            ; ---------------------------------------------------------------------------
000083F8                            
000083F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000083F8                            
000083F8                            
000083F8                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
000083F8 1028 0038                  		move.b	$38(a0),d0
000083FC 6100 A862                  		bsr.w	CalcSine
00008400 323C 0400                  		move.w	#$400,d1
00008404 C1C1                       		muls.w	d1,d0
00008406 4840                       		swap	d0
00008408 D068 002C                  		add.w	$2C(a0),d0
0000840C 3140 000C                  		move.w	d0,$C(a0)
00008410 4E75                       		rts	
00008412                            ; End of function Obj18_Nudge
00008412                            
00008412                            ; ---------------------------------------------------------------------------
00008412                            ; Subroutine to	move platforms
00008412                            ; ---------------------------------------------------------------------------
00008412                            
00008412                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008412                            
00008412                            
00008412                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
00008412 7000                       		moveq	#0,d0
00008414 1028 0028                  		move.b	$28(a0),d0
00008418 0240 000F                  		andi.w	#$F,d0
0000841C D040                       		add.w	d0,d0
0000841E 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
00008422 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
00008426                            ; End of function Obj18_Move
00008426                            
00008426                            ; ===========================================================================
00008426 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
0000842A 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
0000842E 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
00008432 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
00008436 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
0000843A 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
0000843E 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
00008440                            ; ===========================================================================
00008440                            
00008440                            Obj18_Type00:
00008440 4E75                       		rts			; platform 00 doesn't move
00008442                            ; ===========================================================================
00008442                            
00008442                            Obj18_Type05:
00008442 3028 0032                  		move.w	$32(a0),d0
00008446 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000844A 4401                       		neg.b	d1		; reverse platform-motion
0000844C 0601 0040                  		addi.b	#$40,d1
00008450 6000                       		bra.s	Obj18_01_Move
00008452                            ; ===========================================================================
00008452                            
00008452                            Obj18_Type01:
00008452 3028 0032                  		move.w	$32(a0),d0
00008456 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000845A 0401 0040                  		subi.b	#$40,d1
0000845E                            
0000845E                            Obj18_01_Move:
0000845E 4881                       		ext.w	d1
00008460 D041                       		add.w	d1,d0
00008462 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
00008466 6000 0000                  		bra.w	Obj18_ChgMotion
0000846A                            ; ===========================================================================
0000846A                            
0000846A                            Obj18_Type0C:
0000846A 3028 0034                  		move.w	$34(a0),d0
0000846E 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008472 4401                       		neg.b	d1		; reverse platform-motion
00008474 0601 0030                  		addi.b	#$30,d1
00008478 6000                       		bra.s	Obj18_02_Move
0000847A                            ; ===========================================================================
0000847A                            
0000847A                            Obj18_Type0B:
0000847A 3028 0034                  		move.w	$34(a0),d0
0000847E 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008482 0401 0030                  		subi.b	#$30,d1
00008486 6000                       		bra.s	Obj18_02_Move
00008488                            ; ===========================================================================
00008488                            
00008488                            Obj18_Type06:
00008488 3028 0034                  		move.w	$34(a0),d0
0000848C 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008490 4401                       		neg.b	d1		; reverse platform-motion
00008492 0601 0040                  		addi.b	#$40,d1
00008496 6000                       		bra.s	Obj18_02_Move
00008498                            ; ===========================================================================
00008498                            
00008498                            Obj18_Type02:
00008498 3028 0034                  		move.w	$34(a0),d0
0000849C 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000084A0 0401 0040                  		subi.b	#$40,d1
000084A4                            
000084A4                            Obj18_02_Move:
000084A4 4881                       		ext.w	d1
000084A6 D041                       		add.w	d1,d0
000084A8 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000084AC 6000 0000                  		bra.w	Obj18_ChgMotion
000084B0                            ; ===========================================================================
000084B0                            
000084B0                            Obj18_Type03:
000084B0 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000084B4 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
000084B6 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
000084BC 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
000084BE 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
000084C4                            
000084C4                            Obj18_03_NoMove:
000084C4 4E75                       		rts	
000084C6                            ; ===========================================================================
000084C6                            
000084C6                            Obj18_03_Wait:
000084C6 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
000084CA 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
000084CC 317C 0020 003A             		move.w	#32,$3A(a0)
000084D2 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
000084D6 4E75                       		rts	
000084D8                            ; ===========================================================================
000084D8                            
000084D8                            Obj18_Type04:
000084D8 4A68 003A                  		tst.w	$3A(a0)
000084DC 6700                       		beq.s	loc_8048
000084DE 5368 003A                  		subq.w	#1,$3A(a0)
000084E2 6600                       		bne.s	loc_8048
000084E4 0828 0003 0022             		btst	#3,$22(a0)
000084EA 6700                       		beq.s	loc_8042
000084EC 08E9 0001 0022             		bset	#1,$22(a1)
000084F2 08A9 0003 0022             		bclr	#3,$22(a1)
000084F8 137C 0002 0024             		move.b	#2,$24(a1)
000084FE 08A8 0003 0022             		bclr	#3,$22(a0)
00008504 4228 0025                  		clr.b	$25(a0)
00008508 3368 0012 0012             		move.w	$12(a0),$12(a1)
0000850E                            
0000850E                            loc_8042:
0000850E 117C 0008 0024             		move.b	#8,$24(a0)
00008514                            
00008514                            loc_8048:
00008514 2628 002C                  		move.l	$2C(a0),d3
00008518 3028 0012                  		move.w	$12(a0),d0
0000851C 48C0                       		ext.l	d0
0000851E E180                       		asl.l	#8,d0
00008520 D680                       		add.l	d0,d3
00008522 2143 002C                  		move.l	d3,$2C(a0)
00008526 0668 0038 0012             		addi.w	#$38,$12(a0)
0000852C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008530 0640 00E0                  		addi.w	#$E0,d0
00008534 B068 002C                  		cmp.w	$2C(a0),d0
00008538 6400                       		bcc.s	locret_8074
0000853A 117C 0006 0024             		move.b	#6,$24(a0)
00008540                            
00008540                            locret_8074:
00008540 4E75                       		rts	
00008542                            ; ===========================================================================
00008542                            
00008542                            Obj18_Type07:
00008542 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008546 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
00008548 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000854C 7000                       		moveq	#0,d0
0000854E 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
00008552 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00008554 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00008558 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
0000855A 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00008560                            
00008560                            Obj18_07_NoMove:
00008560 4E75                       		rts	
00008562                            ; ===========================================================================
00008562                            
00008562                            Obj18_07_Wait:
00008562 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00008566 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
00008568 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
0000856C 4E75                       		rts	
0000856E                            ; ===========================================================================
0000856E                            
0000856E                            Obj18_Type08:
0000856E 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00008572 3028 0034                  		move.w	$34(a0),d0
00008576 0440 0200                  		subi.w	#$200,d0
0000857A B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
0000857E 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
00008580 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00008584                            
00008584                            Obj18_08_NoStop:
00008584 4E75                       		rts	
00008586                            ; ===========================================================================
00008586                            
00008586                            Obj18_Type0A:
00008586 3028 0034                  		move.w	$34(a0),d0
0000858A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000858E 0401 0040                  		subi.b	#$40,d1
00008592 4881                       		ext.w	d1
00008594 E241                       		asr.w	#1,d1
00008596 D041                       		add.w	d1,d0
00008598 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000859C                            
0000859C                            Obj18_ChgMotion:
0000859C 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
000085A2 4E75                       		rts	
000085A4                            ; ===========================================================================
000085A4                            
000085A4                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
000085A4 3028 0032                  		move.w	$32(a0),d0
000085A8 0240 FF80                  		andi.w	#$FF80,d0
000085AC 3238 F700                  		move.w	($FFFFF700).w,d1
000085B0 0441 0080                  		subi.w	#$80,d1
000085B4 0241 FF80                  		andi.w	#$FF80,d1
000085B8 9041                       		sub.w	d1,d0
000085BA 0C40 0280                  		cmpi.w	#$280,d0
000085BE 6200                       		bhi.s	Obj18_Delete
000085C0 4E75                       		rts	
000085C2                            ; ===========================================================================
000085C2                            
000085C2                            Obj18_Delete:				; XREF: Obj18_Index
000085C2 6000 0000                  		bra.w	DeleteObject
000085C6                            ; ===========================================================================
000085C6                            ; ---------------------------------------------------------------------------
000085C6                            ; Sprite mappings - unused
000085C6                            ; ---------------------------------------------------------------------------
000085C6                            Map_obj18x:
000085C6                            	include "_maps\obj18x.asm"
000085C6                            ; ---------------------------------------------------------------------------
000085C6                            ; Sprite mappings - unused
000085C6                            ; ---------------------------------------------------------------------------
000085C6 0000                       		dc.w byte_80FE-Map_obj18x
000085C8 0000                       		dc.w byte_8109-Map_obj18x
000085CA 02                         byte_80FE:	dc.b 2
000085CB F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
000085D0 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
000085D5 0A                         byte_8109:	dc.b $A
000085D6 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
000085DB 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
000085E0 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
000085E5 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
000085EA 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
000085EF F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
000085F4 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
000085F9 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
000085FE 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00008603 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00008608                            		even
00008608                            		even
00008608                            
00008608                            ; ---------------------------------------------------------------------------
00008608                            ; Sprite mappings - GHZ	platforms
00008608                            ; ---------------------------------------------------------------------------
00008608                            Map_obj18:
00008608                            	include "_maps\obj18ghz.asm"
00008608                            ; ---------------------------------------------------------------------------
00008608                            ; Sprite mappings - GHZ	platforms
00008608                            ; ---------------------------------------------------------------------------
00008608 0000                       		dc.w byte_8140-Map_obj18
0000860A 0000                       		dc.w byte_8155-Map_obj18
0000860C 04                         byte_8140:	dc.b 4
0000860D F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00008612 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00008617 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
0000861C F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00008621 0A                         byte_8155:	dc.b $A
00008622 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00008627 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
0000862C 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00008631 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00008636 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
0000863B F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00008640 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00008645 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
0000864A 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
0000864F 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00008654                            		even
00008654                            		even
00008654                            
00008654                            ; ---------------------------------------------------------------------------
00008654                            ; Sprite mappings - SYZ	platforms
00008654                            ; ---------------------------------------------------------------------------
00008654                            Map_obj18a:
00008654                            	include "_maps\obj18syz.asm"
00008654                            ; ---------------------------------------------------------------------------
00008654                            ; Sprite mappings - SYZ	platforms
00008654                            ; ---------------------------------------------------------------------------
00008654 0000                       		dc.w byte_818A-Map_obj18a
00008656 03                         byte_818A:	dc.b 3
00008657 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
0000865C F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00008661 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00008666                            		even
00008666                            		even
00008666                            
00008666                            ; ---------------------------------------------------------------------------
00008666                            ; Sprite mappings - SLZ	platforms
00008666                            ; ---------------------------------------------------------------------------
00008666                            Map_obj18b:
00008666                            	include "_maps\obj18slz.asm"
00008666                            ; ---------------------------------------------------------------------------
00008666                            ; Sprite mappings - SLZ	platforms
00008666                            ; ---------------------------------------------------------------------------
00008666 0000                       		dc.w byte_819C-Map_obj18b
00008668 02                         byte_819C:	dc.b 2
00008669 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
0000866E F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00008674 00                         		even
00008674 00                         		even
00008674                            
00008674                            ; ===========================================================================
00008674                            ; ---------------------------------------------------------------------------
00008674                            ; Object 19 - blank
00008674                            ; ---------------------------------------------------------------------------
00008674                            
00008674                            Obj19:					; XREF: Obj_Index
00008674 4E75                       		rts	
00008676                            ; ===========================================================================
00008676                            ; ---------------------------------------------------------------------------
00008676                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008676                            ; ---------------------------------------------------------------------------
00008676                            Map_obj48:
00008676                            	include "_maps\obj48.asm"
00008676                            ; ---------------------------------------------------------------------------
00008676                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008676                            ; ---------------------------------------------------------------------------
00008676 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
0000867A 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
0000867E 06                         byte_81B2:	dc.b 6
0000867F F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00008684 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00008689 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
0000868E E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00008693 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00008698 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0000869D 04                         byte_81D1:	dc.b 4
0000869E E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
000086A3 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
000086A8 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
000086AD 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
000086B2 04                         byte_81E6:	dc.b 4
000086B3 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
000086B8 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
000086BD 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
000086C2 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
000086C7 04                         byte_81FB:	dc.b 4
000086C8 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
000086CD E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
000086D2 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
000086D7 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
000086DC                            		even
000086DC                            		even
000086DC                            
000086DC                            ; ===========================================================================
000086DC                            ; ---------------------------------------------------------------------------
000086DC                            ; Object 1A - GHZ collapsing ledge
000086DC                            ; ---------------------------------------------------------------------------
000086DC                            
000086DC                            Obj1A:					; XREF: Obj_Index
000086DC 7000                       		moveq	#0,d0
000086DE 1028 0024                  		move.b	$24(a0),d0
000086E2 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
000086E6 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
000086EA                            ; ===========================================================================
000086EA 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
000086EE 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
000086F2 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
000086F6                            ; ===========================================================================
000086F6                            
000086F6                            Obj1A_Main:				; XREF: Obj1A_Index
000086F6 5428 0024                  		addq.b	#2,$24(a0)
000086FA 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008702 317C 4000 0002             		move.w	#$4000,2(a0)
00008708 0028 0004 0001             		ori.b	#4,1(a0)
0000870E 117C 0004 0018             		move.b	#4,$18(a0)
00008714 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
0000871A 117C 0064 0019             		move.b	#$64,$19(a0)
00008720 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00008726 117C 0038 0016             		move.b	#$38,$16(a0)
0000872C 08E8 0004 0001             		bset	#4,1(a0)
00008732                            
00008732                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00008732 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00008736 6700                       		beq.s	Obj1A_Slope	; if not, branch
00008738 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
0000873C 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00008740 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008744                            
00008744                            Obj1A_Slope:
00008744 323C 0030                  		move.w	#$30,d1
00008748 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
0000874E 6100 F2A4                  		bsr.w	SlopeObject
00008752 6000 0000                  		bra.w	MarkObjGone
00008756                            ; ===========================================================================
00008756                            
00008756                            Obj1A_Touch:				; XREF: Obj1A_Index
00008756 4A28 0038                  		tst.b	$38(a0)
0000875A 6700 0000                  		beq.w	loc_847A
0000875E 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008764 5328 0038                  		subq.b	#1,$38(a0)
00008768                            
00008768                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008768                            
00008768                            
00008768                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00008768 323C 0030                  		move.w	#$30,d1
0000876C 6100 F326                  		bsr.w	ExitPlatform
00008770 323C 0030                  		move.w	#$30,d1
00008774 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
0000877A 3428 0008                  		move.w	8(a0),d2
0000877E 6100 0000                  		bsr.w	SlopeObject2
00008782 6000 0000                  		bra.w	MarkObjGone
00008786                            ; End of function Obj1A_WalkOff
00008786                            
00008786                            ; ===========================================================================
00008786                            
00008786                            Obj1A_Display:				; XREF: Obj1A_Index
00008786 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000878A 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
0000878C 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008790 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00008794 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008798 6000 0000                  		bra.w	DisplaySprite
0000879C                            ; ===========================================================================
0000879C                            
0000879C                            loc_82D0:				; XREF: Obj1A_Display
0000879C 5328 0038                  		subq.b	#1,$38(a0)
000087A0 6100 FFC6                  		bsr.w	Obj1A_WalkOff
000087A4 43F8 D000                  		lea	($FFFFD000).w,a1
000087A8 0829 0003 0022             		btst	#3,$22(a1)
000087AE 6700                       		beq.s	loc_82FC
000087B0 4A28 0038                  		tst.b	$38(a0)
000087B4 6600                       		bne.s	locret_8308
000087B6 08A9 0003 0022             		bclr	#3,$22(a1)
000087BC 08A9 0005 0022             		bclr	#5,$22(a1)
000087C2 137C 0001 001D             		move.b	#1,$1D(a1)
000087C8                            
000087C8                            loc_82FC:
000087C8 117C 0000 003A             		move.b	#0,$3A(a0)
000087CE 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
000087D4                            
000087D4                            locret_8308:
000087D4 4E75                       		rts	
000087D6                            ; ===========================================================================
000087D6                            
000087D6                            Obj1A_TimeZero:				; XREF: Obj1A_Display
000087D6 6100 0000                  		bsr.w	ObjectFall
000087DA 6100 0000                  		bsr.w	DisplaySprite
000087DE 4A28 0001                  		tst.b	1(a0)
000087E2 6A00                       		bpl.s	Obj1A_Delete
000087E4 4E75                       		rts	
000087E6                            ; ===========================================================================
000087E6                            
000087E6                            Obj1A_Delete:				; XREF: Obj1A_Index
000087E6 6100 0000                  		bsr.w	DeleteObject
000087EA 4E75                       		rts	
000087EC                            ; ===========================================================================
000087EC                            ; ---------------------------------------------------------------------------
000087EC                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
000087EC                            ; ---------------------------------------------------------------------------
000087EC                            
000087EC                            Obj53:					; XREF: Obj_Index
000087EC 7000                       		moveq	#0,d0
000087EE 1028 0024                  		move.b	$24(a0),d0
000087F2 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
000087F6 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
000087FA                            ; ===========================================================================
000087FA 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
000087FE 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008802 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008806                            ; ===========================================================================
00008806                            
00008806                            Obj53_Main:				; XREF: Obj53_Index
00008806 5428 0024                  		addq.b	#2,$24(a0)
0000880A 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008812 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008818 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000881E 6600                       		bne.s	Obj53_NotSLZ
00008820 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008826 5428 001A                  		addq.b	#2,$1A(a0)
0000882A                            
0000882A                            Obj53_NotSLZ:
0000882A 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008830 6600                       		bne.s	Obj53_NotSBZ
00008832 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00008838                            
00008838                            Obj53_NotSBZ:
00008838 0028 0004 0001             		ori.b	#4,1(a0)
0000883E 117C 0004 0018             		move.b	#4,$18(a0)
00008844 117C 0007 0038             		move.b	#7,$38(a0)
0000884A 117C 0044 0019             		move.b	#$44,$19(a0)
00008850                            
00008850                            Obj53_ChkTouch:				; XREF: Obj53_Index
00008850 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008854 6700                       		beq.s	Obj53_Solid	; if not, branch
00008856 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000885A 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
0000885E 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008862                            
00008862                            Obj53_Solid:
00008862 323C 0020                  		move.w	#$20,d1
00008866 6100 F0B8                  		bsr.w	PlatformObject
0000886A 4A28 0028                  		tst.b	$28(a0)
0000886E 6A00                       		bpl.s	Obj53_MarkAsGone
00008870 0829 0003 0022             		btst	#3,$22(a1)
00008876 6700                       		beq.s	Obj53_MarkAsGone
00008878 08A8 0000 0001             		bclr	#0,1(a0)
0000887E 3029 0008                  		move.w	8(a1),d0
00008882 9068 0008                  		sub.w	8(a0),d0
00008886 6400                       		bcc.s	Obj53_MarkAsGone
00008888 08E8 0000 0001             		bset	#0,1(a0)
0000888E                            
0000888E                            Obj53_MarkAsGone:
0000888E 6000 0000                  		bra.w	MarkObjGone
00008892                            ; ===========================================================================
00008892                            
00008892                            Obj53_Touch:				; XREF: Obj53_Index
00008892 4A28 0038                  		tst.b	$38(a0)
00008896 6700 0000                  		beq.w	loc_8458
0000889A 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
000088A0 5328 0038                  		subq.b	#1,$38(a0)
000088A4                            
000088A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000088A4                            
000088A4                            
000088A4                            Obj53_WalkOff:				; XREF: Obj53_Index
000088A4 323C 0020                  		move.w	#$20,d1
000088A8 6100 F1EA                  		bsr.w	ExitPlatform
000088AC 3428 0008                  		move.w	8(a0),d2
000088B0 6100 F74C                  		bsr.w	MvSonicOnPtfm2
000088B4 6000 0000                  		bra.w	MarkObjGone
000088B8                            ; End of function Obj53_WalkOff
000088B8                            
000088B8                            ; ===========================================================================
000088B8                            
000088B8                            Obj53_Display:				; XREF: Obj53_Index
000088B8 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000088BC 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
000088BE 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000088C2 6600 0000                  		bne.w	loc_8402	; if yes, branch
000088C6 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000088CA 6000 0000                  		bra.w	DisplaySprite
000088CE                            ; ===========================================================================
000088CE                            
000088CE                            loc_8402:
000088CE 5328 0038                  		subq.b	#1,$38(a0)
000088D2 6100 FFD0                  		bsr.w	Obj53_WalkOff
000088D6 43F8 D000                  		lea	($FFFFD000).w,a1
000088DA 0829 0003 0022             		btst	#3,$22(a1)
000088E0 6700                       		beq.s	loc_842E
000088E2 4A28 0038                  		tst.b	$38(a0)
000088E6 6600                       		bne.s	locret_843A
000088E8 08A9 0003 0022             		bclr	#3,$22(a1)
000088EE 08A9 0005 0022             		bclr	#5,$22(a1)
000088F4 137C 0001 001D             		move.b	#1,$1D(a1)
000088FA                            
000088FA                            loc_842E:
000088FA 117C 0000 003A             		move.b	#0,$3A(a0)
00008900 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008906                            
00008906                            locret_843A:
00008906 4E75                       		rts	
00008908                            ; ===========================================================================
00008908                            
00008908                            Obj53_TimeZero:				; XREF: Obj53_Display
00008908 6100 0000                  		bsr.w	ObjectFall
0000890C 6100 0000                  		bsr.w	DisplaySprite
00008910 4A28 0001                  		tst.b	1(a0)
00008914 6A00                       		bpl.s	Obj53_Delete
00008916 4E75                       		rts	
00008918                            ; ===========================================================================
00008918                            
00008918                            Obj53_Delete:				; XREF: Obj53_Index
00008918 6100 0000                  		bsr.w	DeleteObject
0000891C 4E75                       		rts	
0000891E                            ; ===========================================================================
0000891E                            
0000891E                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
0000891E 117C 0000 003A             		move.b	#0,$3A(a0)
00008924                            
00008924                            loc_8458:				; XREF: Obj53_Touch
00008924 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
0000892A 0828 0000 0028             		btst	#0,$28(a0)
00008930 6700                       		beq.s	loc_846C
00008932 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00008938                            
00008938                            loc_846C:
00008938 7207                       		moveq	#7,d1
0000893A 5228 001A                  		addq.b	#1,$1A(a0)
0000893E 6000                       		bra.s	loc_8486
00008940                            ; ===========================================================================
00008940                            
00008940                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008940 117C 0000 003A             		move.b	#0,$3A(a0)
00008946                            
00008946                            loc_847A:				; XREF: Obj1A_Touch
00008946 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
0000894C 7218                       		moveq	#$18,d1
0000894E 5428 001A                  		addq.b	#2,$1A(a0)
00008952                            
00008952                            loc_8486:				; XREF: Obj53_Collapse
00008952 7000                       		moveq	#0,d0
00008954 1028 001A                  		move.b	$1A(a0),d0
00008958 D040                       		add.w	d0,d0
0000895A 2668 0004                  		movea.l	4(a0),a3
0000895E D6F3 0000                  		adda.w	(a3,d0.w),a3
00008962 524B                       		addq.w	#1,a3
00008964 08E8 0005 0001             		bset	#5,1(a0)
0000896A 1810                       		move.b	0(a0),d4
0000896C 1A28 0001                  		move.b	1(a0),d5
00008970 2248                       		movea.l	a0,a1
00008972 6000                       		bra.s	loc_84B2
00008974                            ; ===========================================================================
00008974                            
00008974                            loc_84AA:
00008974 6100 0000                  		bsr.w	SingleObjLoad
00008978 6600                       		bne.s	loc_84F2
0000897A 5A4B                       		addq.w	#5,a3
0000897C                            
0000897C                            loc_84B2:
0000897C 137C 0006 0024             		move.b	#6,$24(a1)
00008982 1284                       		move.b	d4,0(a1)
00008984 234B 0004                  		move.l	a3,4(a1)
00008988 1345 0001                  		move.b	d5,1(a1)
0000898C 3368 0008 0008             		move.w	8(a0),8(a1)
00008992 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008998 3368 0002 0002             		move.w	2(a0),2(a1)
0000899E 1368 0018 0018             		move.b	$18(a0),$18(a1)
000089A4 1368 0019 0019             		move.b	$19(a0),$19(a1)
000089AA 135C 0038                  		move.b	(a4)+,$38(a1)
000089AE B3C8                       		cmpa.l	a0,a1
000089B0 6400                       		bcc.s	loc_84EE
000089B2 6100 0000                  		bsr.w	DisplaySprite2
000089B6                            
000089B6                            loc_84EE:
000089B6 51C9 FFBC                  		dbf	d1,loc_84AA
000089BA                            
000089BA                            loc_84F2:
000089BA 6100 0000                  		bsr.w	DisplaySprite
000089BE 303C 00B9                  		move.w	#$B9,d0
000089C2 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play collapsing	sound
000089C8                            ; ===========================================================================
000089C8                            ; ---------------------------------------------------------------------------
000089C8                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
000089C8                            ; ---------------------------------------------------------------------------
000089C8 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
000089D8 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
000089E2 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
000089EA 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
000089F2                            
000089F2                            ; ---------------------------------------------------------------------------
000089F2                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
000089F2                            ; ---------------------------------------------------------------------------
000089F2                            
000089F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000089F2                            
000089F2                            
000089F2                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
000089F2 43F8 D000                  		lea	($FFFFD000).w,a1
000089F6 0829 0003 0022             		btst	#3,$22(a1)
000089FC 6700                       		beq.s	locret_856E
000089FE 3029 0008                  		move.w	8(a1),d0
00008A02 9068 0008                  		sub.w	8(a0),d0
00008A06 D041                       		add.w	d1,d0
00008A08 E248                       		lsr.w	#1,d0
00008A0A 0828 0000 0001             		btst	#0,1(a0)
00008A10 6700                       		beq.s	loc_854E
00008A12 4640                       		not.w	d0
00008A14 D041                       		add.w	d1,d0
00008A16                            
00008A16                            loc_854E:
00008A16 7200                       		moveq	#0,d1
00008A18 1232 0000                  		move.b	(a2,d0.w),d1
00008A1C 3028 000C                  		move.w	$C(a0),d0
00008A20 9041                       		sub.w	d1,d0
00008A22 7200                       		moveq	#0,d1
00008A24 1229 0016                  		move.b	$16(a1),d1
00008A28 9041                       		sub.w	d1,d0
00008A2A 3340 000C                  		move.w	d0,$C(a1)
00008A2E 9468 0008                  		sub.w	8(a0),d2
00008A32 9569 0008                  		sub.w	d2,8(a1)
00008A36                            
00008A36                            locret_856E:
00008A36 4E75                       		rts	
00008A38                            ; End of function SlopeObject2
00008A38                            
00008A38                            ; ===========================================================================
00008A38                            ; ---------------------------------------------------------------------------
00008A38                            ; Collision data for GHZ collapsing ledge
00008A38                            ; ---------------------------------------------------------------------------
00008A38                            Obj1A_SlopeData:
00008A38                            		incbin	misc\ghzledge.bin
00008A68                            		even
00008A68                            
00008A68                            ; ---------------------------------------------------------------------------
00008A68                            ; Sprite mappings - GHZ	collapsing ledge
00008A68                            ; ---------------------------------------------------------------------------
00008A68                            Map_obj1A:
00008A68                            	include "_maps\obj1A.asm"
00008A68                            ; ---------------------------------------------------------------------------
00008A68                            ; Sprite mappings - GHZ	collapsing ledge
00008A68                            ; ---------------------------------------------------------------------------
00008A68 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00008A6C 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00008A70 10                         byte_85A8:	dc.b $10
00008A71 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00008A76 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008A7B E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008A80 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008A85 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008A8A D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008A8F F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008A94 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008A99 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008A9E F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008AA3 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008AA8 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008AAD 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008AB2 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008AB7 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008ABC 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008AC1 10                         byte_85F9:	dc.b $10
00008AC2 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00008AC7 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008ACC E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008AD1 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008AD6 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008ADB D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008AE0 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008AE5 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008AEA F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008AEF F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008AF4 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008AF9 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008AFE 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008B03 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008B08 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008B0D 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008B12 19                         byte_864A:	dc.b $19
00008B13 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008B18 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008B1D D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008B22 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008B27 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008B2C E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008B31 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008B36 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008B3B D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008B40 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008B45 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008B4A F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008B4F F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008B54 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008B59 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008B5E F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008B63 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008B68 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008B6D 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008B72 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008B77 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008B7C 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008B81 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008B86 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008B8B 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008B90 19                         byte_86C8:	dc.b $19
00008B91 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008B96 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008B9B D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008BA0 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008BA5 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008BAA E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008BAF E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008BB4 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008BB9 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008BBE D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008BC3 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008BC8 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008BCD F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008BD2 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008BD7 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008BDC F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008BE1 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008BE6 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008BEB 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008BF0 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008BF5 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008BFA 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008BFF 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008C04 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008C09 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008C0E                            		even
00008C0E                            		even
00008C0E                            
00008C0E                            ; ---------------------------------------------------------------------------
00008C0E                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008C0E                            ; ---------------------------------------------------------------------------
00008C0E                            Map_obj53:
00008C0E                            	include "_maps\obj53.asm"
00008C0E                            ; ---------------------------------------------------------------------------
00008C0E                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008C0E                            ; ---------------------------------------------------------------------------
00008C0E 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008C12 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008C16 04                         byte_874E:	dc.b 4
00008C17 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008C1C 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008C21 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008C26 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008C2B 08                         byte_8763:	dc.b 8
00008C2C F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008C31 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008C36 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008C3B F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008C40 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008C45 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00008C4A 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008C4F 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008C54 04                         byte_878C:	dc.b 4
00008C55 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00008C5A 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008C5F F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008C64 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00008C69 08                         byte_87A1:	dc.b 8
00008C6A F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008C6F F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00008C74 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008C79 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00008C7E 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00008C83 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00008C88 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00008C8D 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00008C92                            		even
00008C92                            		even
00008C92                            
00008C92                            ; ===========================================================================
00008C92                            ; ---------------------------------------------------------------------------
00008C92                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00008C92                            ; ---------------------------------------------------------------------------
00008C92                            
00008C92                            Obj1C:					; XREF: Obj_Index
00008C92 7000                       		moveq	#0,d0
00008C94 1028 0024                  		move.b	$24(a0),d0
00008C98 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00008C9C 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00008CA0                            ; ===========================================================================
00008CA0 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00008CA2 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00008CA4                            ; ===========================================================================
00008CA4                            
00008CA4                            Obj1C_Main:				; XREF: Obj1C_Index
00008CA4 5428 0024                  		addq.b	#2,$24(a0)
00008CA8 7000                       		moveq	#0,d0
00008CAA 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00008CAE C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00008CB2 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00008CB6 2159 0004                  		move.l	(a1)+,4(a0)
00008CBA 3159 0002                  		move.w	(a1)+,2(a0)
00008CBE 0028 0004 0001             		ori.b	#4,1(a0)
00008CC4 1159 001A                  		move.b	(a1)+,$1A(a0)
00008CC8 1159 0019                  		move.b	(a1)+,$19(a0)
00008CCC 1159 0018                  		move.b	(a1)+,$18(a0)
00008CD0 1159 0020                  		move.b	(a1)+,$20(a0)
00008CD4                            
00008CD4                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00008CD4 3028 0008                  		move.w	8(a0),d0
00008CD8 0240 FF80                  		andi.w	#$FF80,d0
00008CDC 3238 F700                  		move.w	($FFFFF700).w,d1
00008CE0 0441 0080                  		subi.w	#$80,d1
00008CE4 0241 FF80                  		andi.w	#$FF80,d1
00008CE8 9041                       		sub.w	d1,d0
00008CEA 0C40 0280                  		cmpi.w	#$280,d0
00008CEE 6200 0000                  		bhi.w	DeleteObject
00008CF2 6000 0000                  		bra.w	DisplaySprite
00008CF6                            ; ===========================================================================
00008CF6                            ; ---------------------------------------------------------------------------
00008CF6                            ; Variables for	object $1C are stored in an array
00008CF6                            ; ---------------------------------------------------------------------------
00008CF6 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00008CFA 44D8                       		dc.w $44D8		; VRAM setting
00008CFC 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00008D00 0000 0000                  		dc.l Map_obj1C
00008D04 44D8                       		dc.w $44D8
00008D06 0008 0200                  		dc.b 0,	8, 2, 0
00008D0A 0000 0000                  		dc.l Map_obj1C
00008D0E 44D8                       		dc.w $44D8
00008D10 0008 0200                  		dc.b 0,	8, 2, 0
00008D14 0000 7E08                  		dc.l Map_obj11
00008D18 438E                       		dc.w $438E
00008D1A 0110 0100                  		dc.b 1,	$10, 1,	0
00008D1E                            ; ---------------------------------------------------------------------------
00008D1E                            ; Sprite mappings - SLZ	lava thrower
00008D1E                            ; ---------------------------------------------------------------------------
00008D1E                            Map_obj1C:
00008D1E                            	include "_maps\obj1C.asm"
00008D1E                            ; ---------------------------------------------------------------------------
00008D1E                            ; Sprite mappings - SLZ	lava thrower
00008D1E                            ; ---------------------------------------------------------------------------
00008D1E 0000                       		dc.w byte_8858-Map_obj1C
00008D20 01                         byte_8858:	dc.b 1
00008D21 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00008D26                            		even
00008D26                            		even
00008D26                            
00008D26                            ; ===========================================================================
00008D26                            ; ---------------------------------------------------------------------------
00008D26                            ; Object 1D - switch that activates when Sonic touches it
00008D26                            ; (this	is not used anywhere in	the game)
00008D26                            ; ---------------------------------------------------------------------------
00008D26                            
00008D26                            Obj1D:					; XREF: Obj_Index
00008D26 7000                       		moveq	#0,d0
00008D28 1028 0024                  		move.b	$24(a0),d0
00008D2C 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00008D30 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00008D34                            ; ===========================================================================
00008D34 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00008D36 0000                       		dc.w Obj1D_Action-Obj1D_Index
00008D38 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00008D3A                            ; ===========================================================================
00008D3A                            
00008D3A                            Obj1D_Main:				; XREF: Obj1D_Index
00008D3A 5428 0024                  		addq.b	#2,$24(a0)
00008D3E 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00008D46 317C 4000 0002             		move.w	#$4000,2(a0)
00008D4C 117C 0004 0001             		move.b	#4,1(a0)
00008D52 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00008D58 117C 0010 0019             		move.b	#$10,$19(a0)
00008D5E 117C 0005 0018             		move.b	#5,$18(a0)
00008D64                            
00008D64                            Obj1D_Action:				; XREF: Obj1D_Index
00008D64 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00008D6A 323C 0010                  		move.w	#$10,d1
00008D6E 6100 0000                  		bsr.w	Obj1D_ChkTouch
00008D72 6700                       		beq.s	Obj1D_ChkDel
00008D74 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00008D78 7001                       		moveq	#1,d0
00008D7A 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00008D7E                            
00008D7E                            Obj1D_ChkDel:
00008D7E 6100 0000                  		bsr.w	DisplaySprite
00008D82 3028 0008                  		move.w	8(a0),d0
00008D86 0240 FF80                  		andi.w	#$FF80,d0
00008D8A 3238 F700                  		move.w	($FFFFF700).w,d1
00008D8E 0441 0080                  		subi.w	#$80,d1
00008D92 0241 FF80                  		andi.w	#$FF80,d1
00008D96 9041                       		sub.w	d1,d0
00008D98 0C40 0280                  		cmpi.w	#$280,d0
00008D9C 6200 0000                  		bhi.w	Obj1D_Delete
00008DA0 4E75                       		rts	
00008DA2                            ; ===========================================================================
00008DA2                            
00008DA2                            Obj1D_Delete:				; XREF: Obj1D_Index
00008DA2 6100 0000                  		bsr.w	DeleteObject
00008DA6 4E75                       		rts	
00008DA8                            ; ---------------------------------------------------------------------------
00008DA8                            ; Subroutine to	check if Sonic touches the object
00008DA8                            ; ---------------------------------------------------------------------------
00008DA8                            
00008DA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008DA8                            
00008DA8                            
00008DA8                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00008DA8 43F8 D000                  		lea	($FFFFD000).w,a1
00008DAC 3029 0008                  		move.w	8(a1),d0
00008DB0 9068 0008                  		sub.w	8(a0),d0
00008DB4 D041                       		add.w	d1,d0
00008DB6 6B00                       		bmi.s	loc_8918
00008DB8 D241                       		add.w	d1,d1
00008DBA B041                       		cmp.w	d1,d0
00008DBC 6400                       		bcc.s	loc_8918
00008DBE 3429 000C                  		move.w	$C(a1),d2
00008DC2 1229 0016                  		move.b	$16(a1),d1
00008DC6 4881                       		ext.w	d1
00008DC8 D242                       		add.w	d2,d1
00008DCA 3028 000C                  		move.w	$C(a0),d0
00008DCE 0440 0010                  		subi.w	#$10,d0
00008DD2 9041                       		sub.w	d1,d0
00008DD4 6200                       		bhi.s	loc_8918
00008DD6 0C40 FFF0                  		cmpi.w	#-$10,d0
00008DDA 6500                       		bcs.s	loc_8918
00008DDC 70FF                       		moveq	#-1,d0
00008DDE 4E75                       		rts	
00008DE0                            ; ===========================================================================
00008DE0                            
00008DE0                            loc_8918:
00008DE0 7000                       		moveq	#0,d0
00008DE2 4E75                       		rts	
00008DE4                            ; End of function Obj1D_ChkTouch
00008DE4                            
00008DE4                            ; ===========================================================================
00008DE4                            ; ---------------------------------------------------------------------------
00008DE4                            ; Sprite mappings - object 1D
00008DE4                            ; ---------------------------------------------------------------------------
00008DE4                            Map_obj1D:
00008DE4                            	include "_maps\obj1D.asm"
00008DE4                            ; ---------------------------------------------------------------------------
00008DE4                            ; Sprite mappings - object 1D
00008DE4                            ; ---------------------------------------------------------------------------
00008DE4 0000                       		dc.w byte_891E-Map_obj1D
00008DE6 04                         byte_891E:	dc.b 4
00008DE7 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00008DEC 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00008DF1 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00008DF6 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00008DFC 00                         		even
00008DFC 00                         		even
00008DFC                            
00008DFC                            ; ===========================================================================
00008DFC                            ; ---------------------------------------------------------------------------
00008DFC                            ; Object 2A - doors (SBZ)
00008DFC                            ; ---------------------------------------------------------------------------
00008DFC                            
00008DFC                            Obj2A:					; XREF: Obj_Index
00008DFC 7000                       		moveq	#0,d0
00008DFE 1028 0024                  		move.b	$24(a0),d0
00008E02 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00008E06 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00008E0A                            ; ===========================================================================
00008E0A 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00008E0C 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00008E0E                            ; ===========================================================================
00008E0E                            
00008E0E                            Obj2A_Main:				; XREF: Obj2A_Index
00008E0E 5428 0024                  		addq.b	#2,$24(a0)
00008E12 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00008E1A 317C 42E8 0002             		move.w	#$42E8,2(a0)
00008E20 0028 0004 0001             		ori.b	#4,1(a0)
00008E26 117C 0008 0019             		move.b	#8,$19(a0)
00008E2C 117C 0004 0018             		move.b	#4,$18(a0)
00008E32                            
00008E32                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00008E32 323C 0040                  		move.w	#$40,d1
00008E36 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00008E3A 3038 D008                  		move.w	($FFFFD008).w,d0
00008E3E D041                       		add.w	d1,d0
00008E40 B068 0008                  		cmp.w	8(a0),d0
00008E44 6500                       		bcs.s	Obj2A_Animate
00008E46 9041                       		sub.w	d1,d0
00008E48 9041                       		sub.w	d1,d0
00008E4A B068 0008                  		cmp.w	8(a0),d0
00008E4E 6400                       		bcc.s	Obj2A_Animate
00008E50 D041                       		add.w	d1,d0
00008E52 B068 0008                  		cmp.w	8(a0),d0
00008E56 6400                       		bcc.s	loc_899A
00008E58 0828 0000 0022             		btst	#0,$22(a0)
00008E5E 6600                       		bne.s	Obj2A_Animate
00008E60 6000                       		bra.s	Obj2A_Open
00008E62                            ; ===========================================================================
00008E62                            
00008E62                            loc_899A:				; XREF: Obj2A_OpenShut
00008E62 0828 0000 0022             		btst	#0,$22(a0)
00008E68 6700                       		beq.s	Obj2A_Animate
00008E6A                            
00008E6A                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00008E6A 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00008E70                            
00008E70                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00008E70 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00008E76 6100 0000                  		bsr.w	AnimateSprite
00008E7A 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00008E7E 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00008E80 323C 0011                  		move.w	#$11,d1
00008E84 343C 0020                  		move.w	#$20,d2
00008E88 3602                       		move.w	d2,d3
00008E8A 5243                       		addq.w	#1,d3
00008E8C 3828 0008                  		move.w	8(a0),d4
00008E90 6100 0000                  		bsr.w	SolidObject
00008E94                            
00008E94                            Obj2A_MarkAsUsed:
00008E94 6000 0000                  		bra.w	MarkObjGone
00008E98                            ; ===========================================================================
00008E98                            Ani_obj2A:
00008E98                            	include "_anim\obj2A.asm"
00008E98                            ; ---------------------------------------------------------------------------
00008E98                            ; Animation script - doors (SBZ)
00008E98                            ; ---------------------------------------------------------------------------
00008E98 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00008E9A 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00008E9C 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00008EA8 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00008EB4                            		even
00008EB4                            		even
00008EB4                            
00008EB4                            ; ---------------------------------------------------------------------------
00008EB4                            ; Sprite mappings - doors (SBZ)
00008EB4                            ; ---------------------------------------------------------------------------
00008EB4                            Map_obj2A:
00008EB4                            	include "_maps\obj2A.asm"
00008EB4                            ; ---------------------------------------------------------------------------
00008EB4                            ; Sprite mappings - doors (SBZ)
00008EB4                            ; ---------------------------------------------------------------------------
00008EB4 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00008EB8 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00008EBC 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00008EC0 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00008EC4 0000                       		dc.w byte_8A56-Map_obj2A
00008EC6 02                         byte_89FE:	dc.b 2
00008EC7 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00008ECC 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00008ED1 02                         byte_8A09:	dc.b 2
00008ED2 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00008ED7 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00008EDC 02                         byte_8A14:	dc.b 2
00008EDD D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00008EE2 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00008EE7 02                         byte_8A1F:	dc.b 2
00008EE8 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00008EED 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00008EF2 02                         byte_8A2A:	dc.b 2
00008EF3 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00008EF8 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00008EFD 02                         byte_8A35:	dc.b 2
00008EFE CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00008F03 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00008F08 02                         byte_8A40:	dc.b 2
00008F09 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00008F0E 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00008F13 02                         byte_8A4B:	dc.b 2
00008F14 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00008F19 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00008F1E 02                         byte_8A56:	dc.b 2
00008F1F C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00008F24 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00008F2A 00                         		even
00008F2A 00                         		even
00008F2A                            
00008F2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F2A                            
00008F2A                            
00008F2A                            Obj44_SolidWall:			; XREF: Obj44_Solid
00008F2A 6100 0000                  		bsr.w	Obj44_SolidWall2
00008F2E 6700                       		beq.s	loc_8AA8
00008F30 6B00 0000                  		bmi.w	loc_8AC4
00008F34 4A40                       		tst.w	d0
00008F36 6700 0000                  		beq.w	loc_8A92
00008F3A 6B00                       		bmi.s	loc_8A7C
00008F3C 4A69 0010                  		tst.w	$10(a1)
00008F40 6B00                       		bmi.s	loc_8A92
00008F42 6000                       		bra.s	loc_8A82
00008F44                            ; ===========================================================================
00008F44                            
00008F44                            loc_8A7C:
00008F44 4A69 0010                  		tst.w	$10(a1)
00008F48 6A00                       		bpl.s	loc_8A92
00008F4A                            
00008F4A                            loc_8A82:
00008F4A 9169 0008                  		sub.w	d0,8(a1)
00008F4E 337C 0000 0014             		move.w	#0,$14(a1)
00008F54 337C 0000 0010             		move.w	#0,$10(a1)
00008F5A                            
00008F5A                            loc_8A92:
00008F5A 0829 0001 0022             		btst	#1,$22(a1)
00008F60 6600                       		bne.s	loc_8AB6
00008F62 08E9 0005 0022             		bset	#5,$22(a1)
00008F68 08E8 0005 0022             		bset	#5,$22(a0)
00008F6E 4E75                       		rts	
00008F70                            ; ===========================================================================
00008F70                            
00008F70                            loc_8AA8:
00008F70 0828 0005 0022             		btst	#5,$22(a0)
00008F76 6700                       		beq.s	locret_8AC2
00008F78 337C 0001 001C             		move.w	#1,$1C(a1)
00008F7E                            
00008F7E                            loc_8AB6:
00008F7E 08A8 0005 0022             		bclr	#5,$22(a0)
00008F84 08A9 0005 0022             		bclr	#5,$22(a1)
00008F8A                            
00008F8A                            locret_8AC2:
00008F8A 4E75                       		rts	
00008F8C                            ; ===========================================================================
00008F8C                            
00008F8C                            loc_8AC4:
00008F8C 4A69 0012                  		tst.w	$12(a1)
00008F90 6A00                       		bpl.s	locret_8AD8
00008F92 4A43                       		tst.w	d3
00008F94 6A00                       		bpl.s	locret_8AD8
00008F96 9769 000C                  		sub.w	d3,$C(a1)
00008F9A 337C 0000 0012             		move.w	#0,$12(a1)
00008FA0                            
00008FA0                            locret_8AD8:
00008FA0 4E75                       		rts	
00008FA2                            ; End of function Obj44_SolidWall
00008FA2                            
00008FA2                            
00008FA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008FA2                            
00008FA2                            
00008FA2                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00008FA2 43F8 D000                  		lea	($FFFFD000).w,a1
00008FA6 3029 0008                  		move.w	8(a1),d0
00008FAA 9068 0008                  		sub.w	8(a0),d0
00008FAE D041                       		add.w	d1,d0
00008FB0 6B00                       		bmi.s	loc_8B48
00008FB2 3601                       		move.w	d1,d3
00008FB4 D643                       		add.w	d3,d3
00008FB6 B043                       		cmp.w	d3,d0
00008FB8 6200                       		bhi.s	loc_8B48
00008FBA 1629 0016                  		move.b	$16(a1),d3
00008FBE 4883                       		ext.w	d3
00008FC0 D443                       		add.w	d3,d2
00008FC2 3629 000C                  		move.w	$C(a1),d3
00008FC6 9668 000C                  		sub.w	$C(a0),d3
00008FCA D642                       		add.w	d2,d3
00008FCC 6B00                       		bmi.s	loc_8B48
00008FCE 3802                       		move.w	d2,d4
00008FD0 D844                       		add.w	d4,d4
00008FD2 B644                       		cmp.w	d4,d3
00008FD4 6400                       		bcc.s	loc_8B48
00008FD6 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008FDA 6B00                       		bmi.s	loc_8B48
00008FDC 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008FE2 6400                       		bcc.s	loc_8B48
00008FE4 4A78 FE08                  		tst.w	($FFFFFE08).w
00008FE8 6600                       		bne.s	loc_8B48
00008FEA 3A00                       		move.w	d0,d5
00008FEC B240                       		cmp.w	d0,d1
00008FEE 6400                       		bcc.s	loc_8B30
00008FF0 D241                       		add.w	d1,d1
00008FF2 9041                       		sub.w	d1,d0
00008FF4 3A00                       		move.w	d0,d5
00008FF6 4445                       		neg.w	d5
00008FF8                            
00008FF8                            loc_8B30:
00008FF8 3203                       		move.w	d3,d1
00008FFA B443                       		cmp.w	d3,d2
00008FFC 6400                       		bcc.s	loc_8B3C
00008FFE 9644                       		sub.w	d4,d3
00009000 3203                       		move.w	d3,d1
00009002 4441                       		neg.w	d1
00009004                            
00009004                            loc_8B3C:
00009004 BA41                       		cmp.w	d1,d5
00009006 6200                       		bhi.s	loc_8B44
00009008 7801                       		moveq	#1,d4
0000900A 4E75                       		rts	
0000900C                            ; ===========================================================================
0000900C                            
0000900C                            loc_8B44:
0000900C 78FF                       		moveq	#-1,d4
0000900E 4E75                       		rts	
00009010                            ; ===========================================================================
00009010                            
00009010                            loc_8B48:
00009010 7800                       		moveq	#0,d4
00009012 4E75                       		rts	
00009014                            ; End of function Obj44_SolidWall2
00009014                            
00009014                            ; ===========================================================================
00009014                            ; ---------------------------------------------------------------------------
00009014                            ; Object 1E - Ball Hog enemy (SBZ)
00009014                            ; ---------------------------------------------------------------------------
00009014                            
00009014                            Obj1E:					; XREF: Obj_Index
00009014 7000                       		moveq	#0,d0
00009016 1028 0024                  		move.b	$24(a0),d0
0000901A 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
0000901E 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00009022                            ; ===========================================================================
00009022 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00009024 0000                       		dc.w Obj1E_Action-Obj1E_Index
00009026                            ; ===========================================================================
00009026                            
00009026                            Obj1E_Main:				; XREF: Obj1E_Index
00009026 117C 0013 0016             		move.b	#$13,$16(a0)
0000902C 117C 0008 0017             		move.b	#8,$17(a0)
00009032 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
0000903A 317C 2302 0002             		move.w	#$2302,2(a0)
00009040 117C 0004 0001             		move.b	#4,1(a0)
00009046 117C 0004 0018             		move.b	#4,$18(a0)
0000904C 117C 0005 0020             		move.b	#5,$20(a0)
00009052 117C 000C 0019             		move.b	#$C,$19(a0)
00009058 6100 0000                  		bsr.w	ObjectFall
0000905C 4EB9 0000 0000             		jsr	ObjHitFloor
00009062 4A41                       		tst.w	d1
00009064 6A00                       		bpl.s	locret_8BAC
00009066 D368 000C                  		add.w	d1,$C(a0)
0000906A 317C 0000 0012             		move.w	#0,$12(a0)
00009070 5428 0024                  		addq.b	#2,$24(a0)
00009074                            
00009074                            locret_8BAC:
00009074 4E75                       		rts	
00009076                            ; ===========================================================================
00009076                            
00009076                            Obj1E_Action:				; XREF: Obj1E_Index
00009076 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
0000907C 6100 0000                  		bsr.w	AnimateSprite
00009080 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00009086 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00009088 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
0000908C 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
0000908E 6000                       		bra.s	Obj1E_MarkAsGone
00009090                            ; ===========================================================================
00009090                            
00009090                            Obj1E_SetBall:				; XREF: Obj1E_Action
00009090 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00009094                            
00009094                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00009094 6000 0000                  		bra.w	MarkObjGone
00009098                            ; ===========================================================================
00009098                            
00009098                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00009098 117C 0001 0032             		move.b	#1,$32(a0)
0000909E 6100 0000                  		bsr.w	SingleObjLoad
000090A2 6600                       		bne.s	loc_8C1A
000090A4 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
000090A8 3368 0008 0008             		move.w	8(a0),8(a1)
000090AE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000090B4 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
000090BA 337C 0000 0012             		move.w	#0,$12(a1)
000090C0 70FC                       		moveq	#-4,d0
000090C2 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
000090C8 6700                       		beq.s	loc_8C0A	; if not, branch
000090CA 4440                       		neg.w	d0
000090CC 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
000090D0                            
000090D0                            loc_8C0A:
000090D0 D169 0008                  		add.w	d0,8(a1)
000090D4 0669 000C 000C             		addi.w	#$C,$C(a1)
000090DA 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
000090E0                            
000090E0                            loc_8C1A:
000090E0 60B2                       		bra.s	Obj1E_MarkAsGone
000090E2                            ; ===========================================================================
000090E2                            ; ---------------------------------------------------------------------------
000090E2                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
000090E2                            ; ---------------------------------------------------------------------------
000090E2                            
000090E2                            Obj20:					; XREF: Obj_Index
000090E2 7000                       		moveq	#0,d0
000090E4 1028 0024                  		move.b	$24(a0),d0
000090E8 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
000090EC 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
000090F0                            ; ===========================================================================
000090F0 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
000090F2 0000                       		dc.w Obj20_Bounce-Obj20_Index
000090F4                            ; ===========================================================================
000090F4                            
000090F4                            Obj20_Main:				; XREF: Obj20_Index
000090F4 5428 0024                  		addq.b	#2,$24(a0)
000090F8 117C 0007 0016             		move.b	#7,$16(a0)
000090FE 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009106 317C 2302 0002             		move.w	#$2302,2(a0)
0000910C 117C 0004 0001             		move.b	#4,1(a0)
00009112 117C 0003 0018             		move.b	#3,$18(a0)
00009118 117C 0087 0020             		move.b	#$87,$20(a0)
0000911E 117C 0008 0019             		move.b	#8,$19(a0)
00009124 7000                       		moveq	#0,d0
00009126 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000912A C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000912E 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
00009132 117C 0004 001A             		move.b	#4,$1A(a0)
00009138                            
00009138                            Obj20_Bounce:				; XREF: Obj20_Index
00009138 4EB9 0000 0000             		jsr	ObjectFall
0000913E 4A68 0012                  		tst.w	$12(a0)
00009142 6B00                       		bmi.s	Obj20_ChkExplode
00009144 4EB9 0000 0000             		jsr	ObjHitFloor
0000914A 4A41                       		tst.w	d1
0000914C 6A00                       		bpl.s	Obj20_ChkExplode
0000914E D368 000C                  		add.w	d1,$C(a0)
00009152 317C FD00 0012             		move.w	#-$300,$12(a0)
00009158 4A03                       		tst.b	d3
0000915A 6700                       		beq.s	Obj20_ChkExplode
0000915C 6B00                       		bmi.s	loc_8CA4
0000915E 4A68 0010                  		tst.w	$10(a0)
00009162 6A00                       		bpl.s	Obj20_ChkExplode
00009164 4468 0010                  		neg.w	$10(a0)
00009168 6000                       		bra.s	Obj20_ChkExplode
0000916A                            ; ===========================================================================
0000916A                            
0000916A                            loc_8CA4:				; XREF: Obj20_Bounce
0000916A 4A68 0010                  		tst.w	$10(a0)
0000916E 6B00                       		bmi.s	Obj20_ChkExplode
00009170 4468 0010                  		neg.w	$10(a0)
00009174                            
00009174                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
00009174 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
00009178 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
0000917A 10BC 0024                  		move.b	#$24,0(a0)
0000917E 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00009182 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00009188 6000 0000                  		bra.w	Obj3F		; jump to explosion code
0000918C                            ; ===========================================================================
0000918C                            
0000918C                            Obj20_Animate:				; XREF: Obj20_ChkExplode
0000918C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009190 6A00                       		bpl.s	Obj20_Display
00009192 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00009198 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0000919E                            
0000919E                            Obj20_Display:
0000919E 6100 0000                  		bsr.w	DisplaySprite
000091A2 3038 F72E                  		move.w	($FFFFF72E).w,d0
000091A6 0640 00E0                  		addi.w	#$E0,d0
000091AA B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
000091AE 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
000091B2 4E75                       		rts	
000091B4                            ; ===========================================================================
000091B4                            ; ---------------------------------------------------------------------------
000091B4                            ; Object 24 - explosion	from a destroyed monitor
000091B4                            ; ---------------------------------------------------------------------------
000091B4                            
000091B4                            Obj24:					; XREF: Obj_Index
000091B4 7000                       		moveq	#0,d0
000091B6 1028 0024                  		move.b	$24(a0),d0
000091BA 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
000091BE 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
000091C2                            ; ===========================================================================
000091C2 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
000091C4 0000                       		dc.w Obj24_Animate-Obj24_Index
000091C6                            ; ===========================================================================
000091C6                            
000091C6                            Obj24_Main:				; XREF: Obj24_Index
000091C6 5428 0024                  		addq.b	#2,$24(a0)
000091CA 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
000091D2 317C 041C 0002             		move.w	#$41C,2(a0)
000091D8 117C 0004 0001             		move.b	#4,1(a0)
000091DE 117C 0001 0018             		move.b	#1,$18(a0)
000091E4 117C 0000 0020             		move.b	#0,$20(a0)
000091EA 117C 000C 0019             		move.b	#$C,$19(a0)
000091F0 117C 0009 001E             		move.b	#9,$1E(a0)
000091F6 117C 0000 001A             		move.b	#0,$1A(a0)
000091FC 303C 00A5                  		move.w	#$A5,d0
00009200 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play explosion sound
00009206                            
00009206                            Obj24_Animate:				; XREF: Obj24_Index
00009206 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000920A 6A00                       		bpl.s	Obj24_Display
0000920C 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
00009212 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009216 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
0000921C 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009220                            
00009220                            Obj24_Display:
00009220 6000 0000                  		bra.w	DisplaySprite
00009224                            ; ===========================================================================
00009224                            ; ---------------------------------------------------------------------------
00009224                            ; Object 27 - explosion	from a destroyed enemy
00009224                            ; ---------------------------------------------------------------------------
00009224                            
00009224                            Obj27:					; XREF: Obj_Index
00009224 7000                       		moveq	#0,d0
00009226 1028 0024                  		move.b	$24(a0),d0
0000922A 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
0000922E 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
00009232                            ; ===========================================================================
00009232 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
00009234 0000                       		dc.w Obj27_Main-Obj27_Index
00009236 0000                       		dc.w Obj27_Animate-Obj27_Index
00009238                            ; ===========================================================================
00009238                            
00009238                            Obj27_LoadAnimal:			; XREF: Obj27_Index
00009238 5428 0024                  		addq.b	#2,$24(a0)
0000923C 6100 0000                  		bsr.w	SingleObjLoad
00009240 6600                       		bne.s	Obj27_Main
00009242 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00009246 3368 0008 0008             		move.w	8(a0),8(a1)
0000924C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009252 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
00009258                            
00009258                            Obj27_Main:				; XREF: Obj27_Index
00009258 5428 0024                  		addq.b	#2,$24(a0)
0000925C 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
00009264 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000926A 117C 0004 0001             		move.b	#4,1(a0)
00009270 117C 0001 0018             		move.b	#1,$18(a0)
00009276 117C 0000 0020             		move.b	#0,$20(a0)
0000927C 117C 000C 0019             		move.b	#$C,$19(a0)
00009282                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009282 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009288 117C 0000 001A             		move.b	#0,$1A(a0)
0000928E 303C 00C1                  		move.w	#$C1,d0
00009292 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00009298                            
00009298 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
0000929E 1028 0028                  		move.b	$28(a0),d0
000092A2 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
000092A8 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
000092AE                            
000092AE                            Obj27_Animate:				; XREF: Obj27_Index
000092AE 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000092B2 6A00                       		bpl.s	Obj27_Display
000092B4                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
000092B4 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
000092BA 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
000092BE 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
000092C4 6700 0000                  		beq.w	DeleteObject	; if yes, branch
000092C8                            
000092C8                            Obj27_Display:
000092C8 4EB9 0000 0000             		jsr	SpeedToPos	; GMZ
000092CE 0668 0038 0012             		addi.w	#$38,$12(a0)	; GMZ: Explosion Gravity
000092D4 6000 0000                  		bra.w	DisplaySprite
000092D8                            ; ===========================================================================
000092D8                            ; ---------------------------------------------------------------------------
000092D8                            Obj27_ExplosionXYSpd:
000092D8                            		; dc.w	-$350, -$300	; Left
000092D8                            		; dc.w	-$200, -$450	; Near middle (left)
000092D8                            		; dc.w	0, -$500	; Middle
000092D8                            		; dc.w	$200, -$450	; Near middle (right)
000092D8                            		; dc.w	$350, -$300	; Right
000092D8                            
000092D8 FEB0 FC00                  		dc.w	-$150, -$400	; Left
000092DC FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
000092E0 0000 FA00                  		dc.w	0, -$600	; Middle
000092E4 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
000092E8 0150 FC00                  		dc.w	$150, -$400	; Right
000092EC                            
000092EC 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
00009306                            ; ---------------------------------------------------------------------------
00009306                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00009306                            ; ---------------------------------------------------------------------------
00009306                            
00009306                            Obj3F:					; XREF: Obj_Index
00009306 7000                       		moveq	#0,d0
00009308 1028 0024                  		move.b	$24(a0),d0
0000930C 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
00009310 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00009314                            ; ===========================================================================
00009314 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00009316 FF9A                       		dc.w Obj27_Animate-Obj3F_Index
00009318                            ; ===========================================================================
00009318                            
00009318                            Obj3F_Main:				; XREF: Obj3F_Index
00009318 5428 0024                  		addq.b	#2,$24(a0)
0000931C 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
00009324 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000932A 117C 0004 0001             		move.b	#4,1(a0)
00009330 117C 0001 0018             		move.b	#1,$18(a0)
00009336 117C 0000 0020             		move.b	#0,$20(a0)
0000933C 117C 000C 0019             		move.b	#$C,$19(a0)
00009342 117C 0007 001E             		move.b	#7,$1E(a0)
00009348 117C 0000 001A             		move.b	#0,$1A(a0)
0000934E 303C 00C4                  		move.w	#$C4,d0
00009352 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
00009358                            ; ===========================================================================
00009358                            Ani_obj1E:
00009358                            	include "_anim\obj1E.asm"
00009358                            ; ---------------------------------------------------------------------------
00009358                            ; Animation script - doors (SBZ)
00009358                            ; ---------------------------------------------------------------------------
00009358 0000                       		dc.w byte_8E4A-Ani_obj1E
0000935A 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
00009372 00                         		even
00009372 00                         		even
00009372                            
00009372                            ; ---------------------------------------------------------------------------
00009372                            ; Sprite mappings - Ball Hog enemy (SBZ)
00009372                            ; ---------------------------------------------------------------------------
00009372                            Map_obj1E:
00009372                            	include "_maps\obj1E.asm"
00009372                            ; ---------------------------------------------------------------------------
00009372                            ; Sprite mappings - Ball Hog enemy (SBZ)
00009372                            ; ---------------------------------------------------------------------------
00009372 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
00009376 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
0000937A 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
0000937E 02                         byte_8E6E:	dc.b 2
0000937F EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00009384 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
00009389 02                         byte_8E79:	dc.b 2
0000938A EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000938F FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
00009394 02                         byte_8E84:	dc.b 2
00009395 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
0000939A 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000939F 02                         byte_8E8F:	dc.b 2
000093A0 E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
000093A5 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
000093AA 01                         byte_8E9A:	dc.b 1
000093AB F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
000093B0 01                         byte_8EA0:	dc.b 1
000093B1 F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
000093B6                            		even
000093B6                            		even
000093B6                            
000093B6                            ; ---------------------------------------------------------------------------
000093B6                            ; Sprite mappings - explosion
000093B6                            ; ---------------------------------------------------------------------------
000093B6                            Map_obj24:
000093B6                            	include "_maps\obj24.asm"
000093B6                            ; ---------------------------------------------------------------------------
000093B6                            ; Sprite mappings - explosion
000093B6                            ; ---------------------------------------------------------------------------
000093B6 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
000093BA 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
000093BE 01                         byte_8EAE:	dc.b 1
000093BF F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000093C4 01                         byte_8EB4:	dc.b 1
000093C5 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
000093CA 01                         byte_8EBA:	dc.b 1
000093CB F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000093D0 01                         byte_8EC0:	dc.b 1
000093D1 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
000093D6                            		even
000093D6                            		even
000093D6                            
000093D6                            ; ---------------------------------------------------------------------------
000093D6                            ; Sprite mappings - explosion
000093D6                            ; ---------------------------------------------------------------------------
000093D6 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
000093DA 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
000093DE 0000                       		dc.w byte_8EF7-Map_obj27
000093E0 01                         byte_8ED0:	dc.b 1
000093E1 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
000093E6 01                         byte_8ED6:	dc.b 1
000093E7 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
000093EC 01                         byte_8EDC:	dc.b 1
000093ED F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
000093F2 04                         byte_8EE2:	dc.b 4
000093F3 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
000093F8 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
000093FD 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00009402 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00009407 04                         byte_8EF7:	dc.b 4
00009408 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000940D EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00009412 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
00009417 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000941C                            		even
0000941C                            ; ---------------------------------------------------------------------------
0000941C                            ; Sprite mappings - explosion from when	a boss is destroyed
0000941C                            ; ---------------------------------------------------------------------------
0000941C FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
0000941E 0000                       		dc.w byte_8F16-Map_obj3F
00009420 0000                       		dc.w byte_8F1C-Map_obj3F
00009422 FFD6                       		dc.w byte_8EE2-Map_obj3F
00009424 FFEB                       		dc.w byte_8EF7-Map_obj3F
00009426 01                         byte_8F16:	dc.b 1
00009427 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000942C 01                         byte_8F1C:	dc.b 1
0000942D F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
00009432                            		even
00009432                            ; ===========================================================================
00009432                            ; ---------------------------------------------------------------------------
00009432                            ; Object 28 - animals
00009432                            ; ---------------------------------------------------------------------------
00009432                            
00009432                            Obj28:					; XREF: Obj_Index
00009432 7000                       		moveq	#0,d0
00009434 1028 0024                  		move.b	$24(a0),d0
00009438 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
0000943C 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
00009440                            ; ===========================================================================
00009440 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
00009444 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009448 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
0000944C 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009450 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
00009454 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
00009458 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
0000945C 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009460 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009464 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
00009468 0000                       		dc.w loc_92D6-Obj28_Index
0000946A                            
0000946A 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
00009476                            
00009476 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
0000947A 0000 0000                  		dc.l Map_obj28
0000947E FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00009482 0000 0000                  		dc.l Map_obj28a		; mappings address
00009486 FE80 FD00                  		dc.w $FE80, $FD00
0000948A 0000 0000                  		dc.l Map_obj28
0000948E FEC0 FE80                  		dc.w $FEC0, $FE80
00009492 0000 0000                  		dc.l Map_obj28a
00009496 FE40 FD00                  		dc.w $FE40, $FD00
0000949A 0000 0000                  		dc.l Map_obj28b
0000949E FD00 FC00                  		dc.w $FD00, $FC00
000094A2 0000 0000                  		dc.l Map_obj28a
000094A6 FD80 FC80                  		dc.w $FD80, $FC80
000094AA 0000 0000                  		dc.l Map_obj28b
000094AE                            
000094AE FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
000094BE FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
000094CE FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
000094DA                            
000094DA 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
000094EE 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00009502 0000 0000                  		dc.l Map_obj28b
00009506                            
00009506 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
00009518 0565 05B3                  		dc.w $565, $5B3
0000951C                            ; ===========================================================================
0000951C                            
0000951C                            Obj28_Ending:				; XREF: Obj28_Index
0000951C 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
00009520 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
00009524 7000                       		moveq	#0,d0
00009526 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000952A D040                       		add.w	d0,d0		; multiply d0 by 2
0000952C 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
00009530 0440 0014                  		subi.w	#$14,d0
00009534 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
0000953A D040                       		add.w	d0,d0
0000953C 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
00009542 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
00009546 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000954C 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
00009552 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
00009558 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
0000955E 117C 000C 0016             		move.b	#$C,$16(a0)
00009564 117C 0004 0001             		move.b	#4,1(a0)
0000956A 08E8 0000 0001             		bset	#0,1(a0)
00009570 117C 0006 0018             		move.b	#6,$18(a0)
00009576 117C 0008 0019             		move.b	#8,$19(a0)
0000957C 117C 0007 001E             		move.b	#7,$1E(a0)
00009582 6000 0000                  		bra.w	DisplaySprite
00009586                            ; ===========================================================================
00009586                            
00009586                            Obj28_FromEnemy:			; XREF: Obj28_Ending
00009586 5428 0024                  		addq.b	#2,$24(a0)
0000958A 6100 96AE                  		bsr.w	RandomNumber
0000958E 0240 0001                  		andi.w	#1,d0
00009592 7200                       		moveq	#0,d1
00009594 1238 FE10                  		move.b	($FFFFFE10).w,d1
00009598 D241                       		add.w	d1,d1
0000959A D240                       		add.w	d0,d1
0000959C 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
000095A0 1031 1000                  		move.b	(a1,d1.w),d0
000095A4 1140 0030                  		move.b	d0,$30(a0)
000095A8 E748                       		lsl.w	#3,d0
000095AA 43FA FECA                  		lea	Obj28_Variables(pc),a1
000095AE D2C0                       		adda.w	d0,a1
000095B0 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
000095B4 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
000095B8 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
000095BC 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
000095C2 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
000095C8 6700                       		beq.s	loc_90C0	; if yes, branch
000095CA 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
000095D0                            
000095D0                            loc_90C0:
000095D0 117C 000C 0016             		move.b	#$C,$16(a0)
000095D6 117C 0004 0001             		move.b	#4,1(a0)
000095DC 08E8 0000 0001             		bset	#0,1(a0)
000095E2 117C 0006 0018             		move.b	#6,$18(a0)
000095E8 117C 0008 0019             		move.b	#8,$19(a0)
000095EE 117C 0007 001E             		move.b	#7,$1E(a0)
000095F4 117C 0002 001A             		move.b	#2,$1A(a0)
000095FA 317C FC00 0012             		move.w	#-$400,$12(a0)
00009600 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009604 6600                       		bne.s	loc_911C
00009606 6100 0000                  		bsr.w	SingleObjLoad
0000960A 6600                       		bne.s	Obj28_Display
0000960C 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00009610 3368 0008 0008             		move.w	8(a0),8(a1)
00009616 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000961C 3028 003E                  		move.w	$3E(a0),d0
00009620 E248                       		lsr.w	#1,d0
00009622 1340 001A                  		move.b	d0,$1A(a1)
00009626                            
00009626                            Obj28_Display:
00009626 6000 0000                  		bra.w	DisplaySprite
0000962A                            ; ===========================================================================
0000962A                            
0000962A                            loc_911C:
0000962A 117C 0012 0024             		move.b	#$12,$24(a0)
00009630 4268 0010                  		clr.w	$10(a0)
00009634 6000 0000                  		bra.w	DisplaySprite
00009638                            ; ===========================================================================
00009638                            
00009638                            loc_912A:				; XREF: Obj28_Index
00009638 4A28 0001                  		tst.b	1(a0)
0000963C 6A00 0000                  		bpl.w	DeleteObject
00009640 6100 0000                  		bsr.w	ObjectFall
00009644 4A68 0012                  		tst.w	$12(a0)
00009648 6B00                       		bmi.s	loc_9180
0000964A 4EB9 0000 0000             		jsr	ObjHitFloor
00009650 4A41                       		tst.w	d1
00009652 6A00                       		bpl.s	loc_9180
00009654 D368 000C                  		add.w	d1,$C(a0)
00009658 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000965E 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009664 117C 0001 001A             		move.b	#1,$1A(a0)
0000966A 1028 0030                  		move.b	$30(a0),d0
0000966E D000                       		add.b	d0,d0
00009670 5800                       		addq.b	#4,d0
00009672 1140 0024                  		move.b	d0,$24(a0)
00009676 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000967A 6700                       		beq.s	loc_9180
0000967C 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009682 6700                       		beq.s	loc_9180
00009684 4468 0010                  		neg.w	$10(a0)
00009688 0868 0000 0001             		bchg	#0,1(a0)
0000968E                            
0000968E                            loc_9180:
0000968E 6000 0000                  		bra.w	DisplaySprite
00009692                            ; ===========================================================================
00009692                            
00009692                            loc_9184:				; XREF: Obj28_Index
00009692 6100 0000                  		bsr.w	ObjectFall
00009696 117C 0001 001A             		move.b	#1,$1A(a0)
0000969C 4A68 0012                  		tst.w	$12(a0)
000096A0 6B00                       		bmi.s	loc_91AE
000096A2 117C 0000 001A             		move.b	#0,$1A(a0)
000096A8 4EB9 0000 0000             		jsr	ObjHitFloor
000096AE 4A41                       		tst.w	d1
000096B0 6A00                       		bpl.s	loc_91AE
000096B2 D368 000C                  		add.w	d1,$C(a0)
000096B6 3168 0034 0012             		move.w	$34(a0),$12(a0)
000096BC                            
000096BC                            loc_91AE:
000096BC 4A28 0028                  		tst.b	$28(a0)
000096C0 6600                       		bne.s	loc_9224
000096C2 4A28 0001                  		tst.b	1(a0)
000096C6 6A00 0000                  		bpl.w	DeleteObject
000096CA 6000 0000                  		bra.w	DisplaySprite
000096CE                            ; ===========================================================================
000096CE                            
000096CE                            loc_91C0:				; XREF: Obj28_Index
000096CE 6100 0000                  		bsr.w	SpeedToPos
000096D2 0668 0018 0012             		addi.w	#$18,$12(a0)
000096D8 4A68 0012                  		tst.w	$12(a0)
000096DC 6B00                       		bmi.s	loc_91FC
000096DE 4EB9 0000 0000             		jsr	ObjHitFloor
000096E4 4A41                       		tst.w	d1
000096E6 6A00                       		bpl.s	loc_91FC
000096E8 D368 000C                  		add.w	d1,$C(a0)
000096EC 3168 0034 0012             		move.w	$34(a0),$12(a0)
000096F2 4A28 0028                  		tst.b	$28(a0)
000096F6 6700                       		beq.s	loc_91FC
000096F8 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
000096FE 6700                       		beq.s	loc_91FC
00009700 4468 0010                  		neg.w	$10(a0)
00009704 0868 0000 0001             		bchg	#0,1(a0)
0000970A                            
0000970A                            loc_91FC:
0000970A 5328 001E                  		subq.b	#1,$1E(a0)
0000970E 6A00                       		bpl.s	loc_9212
00009710 117C 0001 001E             		move.b	#1,$1E(a0)
00009716 5228 001A                  		addq.b	#1,$1A(a0)
0000971A 0228 0001 001A             		andi.b	#1,$1A(a0)
00009720                            
00009720                            loc_9212:
00009720 4A28 0028                  		tst.b	$28(a0)
00009724 6600                       		bne.s	loc_9224
00009726 4A28 0001                  		tst.b	1(a0)
0000972A 6A00 0000                  		bpl.w	DeleteObject
0000972E 6000 0000                  		bra.w	DisplaySprite
00009732                            ; ===========================================================================
00009732                            
00009732                            loc_9224:				; XREF: Obj28_Index
00009732 3028 0008                  		move.w	8(a0),d0
00009736 9078 D008                  		sub.w	($FFFFD008).w,d0
0000973A 6500                       		bcs.s	loc_923C
0000973C 0440 0180                  		subi.w	#$180,d0
00009740 6A00                       		bpl.s	loc_923C
00009742 4A28 0001                  		tst.b	1(a0)
00009746 6A00 0000                  		bpl.w	DeleteObject
0000974A                            
0000974A                            loc_923C:
0000974A 6000 0000                  		bra.w	DisplaySprite
0000974E                            ; ===========================================================================
0000974E                            
0000974E                            loc_9240:				; XREF: Obj28_Index
0000974E 4A28 0001                  		tst.b	1(a0)
00009752 6A00 0000                  		bpl.w	DeleteObject
00009756 5368 0036                  		subq.w	#1,$36(a0)
0000975A 6600 0000                  		bne.w	loc_925C
0000975E 117C 0002 0024             		move.b	#2,$24(a0)
00009764 117C 0003 0018             		move.b	#3,$18(a0)
0000976A                            
0000976A                            loc_925C:
0000976A 6000 0000                  		bra.w	DisplaySprite
0000976E                            ; ===========================================================================
0000976E                            
0000976E                            loc_9260:				; XREF: Obj28_Index
0000976E 6100 0000                  		bsr.w	sub_9404
00009772 6400                       		bcc.s	loc_927C
00009774 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000977A 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009780 117C 000E 0024             		move.b	#$E,$24(a0)
00009786 6000 FF46                  		bra.w	loc_91C0
0000978A                            ; ===========================================================================
0000978A                            
0000978A                            loc_927C:
0000978A 6000 FFA6                  		bra.w	loc_9224
0000978E                            ; ===========================================================================
0000978E                            
0000978E                            loc_9280:				; XREF: Obj28_Index
0000978E 6100 0000                  		bsr.w	sub_9404
00009792 6A00                       		bpl.s	loc_92B6
00009794 4268 0010                  		clr.w	$10(a0)
00009798 4268 0032                  		clr.w	$32(a0)
0000979C 6100 0000                  		bsr.w	SpeedToPos
000097A0 0668 0018 0012             		addi.w	#$18,$12(a0)
000097A6 6100 0000                  		bsr.w	loc_93C4
000097AA 6100 0000                  		bsr.w	loc_93EC
000097AE 5328 001E                  		subq.b	#1,$1E(a0)
000097B2 6A00                       		bpl.s	loc_92B6
000097B4 117C 0001 001E             		move.b	#1,$1E(a0)
000097BA 5228 001A                  		addq.b	#1,$1A(a0)
000097BE 0228 0001 001A             		andi.b	#1,$1A(a0)
000097C4                            
000097C4                            loc_92B6:
000097C4 6000 FF6C                  		bra.w	loc_9224
000097C8                            ; ===========================================================================
000097C8                            
000097C8                            loc_92BA:				; XREF: Obj28_Index
000097C8 6100 0000                  		bsr.w	sub_9404
000097CC 6A00                       		bpl.s	loc_9310
000097CE 3168 0032 0010             		move.w	$32(a0),$10(a0)
000097D4 3168 0034 0012             		move.w	$34(a0),$12(a0)
000097DA 117C 0004 0024             		move.b	#4,$24(a0)
000097E0 6000 FEB0                  		bra.w	loc_9184
000097E4                            ; ===========================================================================
000097E4                            
000097E4                            loc_92D6:				; XREF: Obj28_Index
000097E4 6100 0000                  		bsr.w	ObjectFall
000097E8 117C 0001 001A             		move.b	#1,$1A(a0)
000097EE 4A68 0012                  		tst.w	$12(a0)
000097F2 6B00                       		bmi.s	loc_9310
000097F4 117C 0000 001A             		move.b	#0,$1A(a0)
000097FA 4EB9 0000 0000             		jsr	ObjHitFloor
00009800 4A41                       		tst.w	d1
00009802 6A00                       		bpl.s	loc_9310
00009804 4628 0029                  		not.b	$29(a0)
00009808 6600                       		bne.s	loc_9306
0000980A 4468 0010                  		neg.w	$10(a0)
0000980E 0868 0000 0001             		bchg	#0,1(a0)
00009814                            
00009814                            loc_9306:
00009814 D368 000C                  		add.w	d1,$C(a0)
00009818 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000981E                            
0000981E                            loc_9310:
0000981E 6000 FF12                  		bra.w	loc_9224
00009822                            ; ===========================================================================
00009822                            
00009822                            loc_9314:				; XREF: Obj28_Index
00009822 6100 0000                  		bsr.w	sub_9404
00009826 6A00                       		bpl.s	loc_932E
00009828 4268 0010                  		clr.w	$10(a0)
0000982C 4268 0032                  		clr.w	$32(a0)
00009830 6100 0000                  		bsr.w	ObjectFall
00009834 6100 0000                  		bsr.w	loc_93C4
00009838 6100 0000                  		bsr.w	loc_93EC
0000983C                            
0000983C                            loc_932E:
0000983C 6000 FEF4                  		bra.w	loc_9224
00009840                            ; ===========================================================================
00009840                            
00009840                            loc_9332:				; XREF: Obj28_Index
00009840 6100 0000                  		bsr.w	sub_9404
00009844 6A00                       		bpl.s	loc_936C
00009846 6100 0000                  		bsr.w	ObjectFall
0000984A 117C 0001 001A             		move.b	#1,$1A(a0)
00009850 4A68 0012                  		tst.w	$12(a0)
00009854 6B00                       		bmi.s	loc_936C
00009856 117C 0000 001A             		move.b	#0,$1A(a0)
0000985C 4EB9 0000 0000             		jsr	ObjHitFloor
00009862 4A41                       		tst.w	d1
00009864 6A00                       		bpl.s	loc_936C
00009866 4468 0010                  		neg.w	$10(a0)
0000986A 0868 0000 0001             		bchg	#0,1(a0)
00009870 D368 000C                  		add.w	d1,$C(a0)
00009874 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000987A                            
0000987A                            loc_936C:
0000987A 6000 FEB6                  		bra.w	loc_9224
0000987E                            ; ===========================================================================
0000987E                            
0000987E                            loc_9370:				; XREF: Obj28_Index
0000987E 6100 0000                  		bsr.w	sub_9404
00009882 6A00                       		bpl.s	loc_93C0
00009884 6100 0000                  		bsr.w	SpeedToPos
00009888 0668 0018 0012             		addi.w	#$18,$12(a0)
0000988E 4A68 0012                  		tst.w	$12(a0)
00009892 6B00                       		bmi.s	loc_93AA
00009894 4EB9 0000 0000             		jsr	ObjHitFloor
0000989A 4A41                       		tst.w	d1
0000989C 6A00                       		bpl.s	loc_93AA
0000989E 4628 0029                  		not.b	$29(a0)
000098A2 6600                       		bne.s	loc_93A0
000098A4 4468 0010                  		neg.w	$10(a0)
000098A8 0868 0000 0001             		bchg	#0,1(a0)
000098AE                            
000098AE                            loc_93A0:
000098AE D368 000C                  		add.w	d1,$C(a0)
000098B2 3168 0034 0012             		move.w	$34(a0),$12(a0)
000098B8                            
000098B8                            loc_93AA:
000098B8 5328 001E                  		subq.b	#1,$1E(a0)
000098BC 6A00                       		bpl.s	loc_93C0
000098BE 117C 0001 001E             		move.b	#1,$1E(a0)
000098C4 5228 001A                  		addq.b	#1,$1A(a0)
000098C8 0228 0001 001A             		andi.b	#1,$1A(a0)
000098CE                            
000098CE                            loc_93C0:
000098CE 6000 FE62                  		bra.w	loc_9224
000098D2                            ; ===========================================================================
000098D2                            
000098D2                            loc_93C4:
000098D2 117C 0001 001A             		move.b	#1,$1A(a0)
000098D8 4A68 0012                  		tst.w	$12(a0)
000098DC 6B00                       		bmi.s	locret_93EA
000098DE 117C 0000 001A             		move.b	#0,$1A(a0)
000098E4 4EB9 0000 0000             		jsr	ObjHitFloor
000098EA 4A41                       		tst.w	d1
000098EC 6A00                       		bpl.s	locret_93EA
000098EE D368 000C                  		add.w	d1,$C(a0)
000098F2 3168 0034 0012             		move.w	$34(a0),$12(a0)
000098F8                            
000098F8                            locret_93EA:
000098F8 4E75                       		rts	
000098FA                            ; ===========================================================================
000098FA                            
000098FA                            loc_93EC:
000098FA 08E8 0000 0001             		bset	#0,1(a0)
00009900 3028 0008                  		move.w	8(a0),d0
00009904 9078 D008                  		sub.w	($FFFFD008).w,d0
00009908 6400                       		bcc.s	locret_9402
0000990A 08A8 0000 0001             		bclr	#0,1(a0)
00009910                            
00009910                            locret_9402:
00009910 4E75                       		rts	
00009912                            
00009912                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009912                            
00009912                            
00009912                            sub_9404:
00009912 3038 D008                  		move.w	($FFFFD008).w,d0
00009916 9068 0008                  		sub.w	8(a0),d0
0000991A 0440 00B8                  		subi.w	#$B8,d0
0000991E 4E75                       		rts	
00009920                            ; End of function sub_9404
00009920                            
00009920                            ; ===========================================================================
00009920                            ; ---------------------------------------------------------------------------
00009920                            ; Object 29 - points that appear when you destroy something
00009920                            ; ---------------------------------------------------------------------------
00009920                            
00009920                            Obj29:					; XREF: Obj_Index
00009920 7000                       		moveq	#0,d0
00009922 1028 0024                  		move.b	$24(a0),d0
00009926 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
0000992A 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
0000992E 6000 0000                  		bra.w	DisplaySprite
00009932                            ; ===========================================================================
00009932 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009934 0000                       		dc.w Obj29_Slower-Obj29_Index
00009936                            ; ===========================================================================
00009936                            
00009936                            Obj29_Main:				; XREF: Obj29_Index
00009936 5428 0024                  		addq.b	#2,$24(a0)
0000993A 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009942 317C 2797 0002             		move.w	#$2797,2(a0)
00009948 117C 0004 0001             		move.b	#4,1(a0)
0000994E 117C 0001 0018             		move.b	#1,$18(a0)
00009954 117C 0008 0019             		move.b	#8,$19(a0)
0000995A 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009960                            
00009960                            Obj29_Slower:				; XREF: Obj29_Index
00009960 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009964 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00009968 6100 0000                  		bsr.w	SpeedToPos
0000996C 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009972 4E75                       		rts	
00009974                            ; ===========================================================================
00009974                            ; ---------------------------------------------------------------------------
00009974                            ; Sprite mappings - animals
00009974                            ; ---------------------------------------------------------------------------
00009974                            Map_obj28:
00009974                            	include "_maps\obj28.asm"
00009974                            ; ---------------------------------------------------------------------------
00009974                            ; Sprite mappings - animals
00009974                            ; ---------------------------------------------------------------------------
00009974 0000                       		dc.w byte_9472-Map_obj28
00009976 0000                       		dc.w byte_9478-Map_obj28
00009978 0000                       		dc.w byte_946C-Map_obj28
0000997A 01                         byte_946C:	dc.b 1
0000997B F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009980 01                         byte_9472:	dc.b 1
00009981 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009986 01                         byte_9478:	dc.b 1
00009987 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000998C                            		even
0000998C                            		even
0000998C                            
0000998C                            Map_obj28a:
0000998C                            	include "_maps\obj28a.asm"
0000998C                            ; ---------------------------------------------------------------------------
0000998C                            ; Sprite mappings - animals
0000998C                            ; ---------------------------------------------------------------------------
0000998C 0000                       		dc.w byte_948A-Map_obj28a
0000998E 0000                       		dc.w byte_9490-Map_obj28a
00009990 0000                       		dc.w byte_9484-Map_obj28a
00009992 01                         byte_9484:	dc.b 1
00009993 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009998 01                         byte_948A:	dc.b 1
00009999 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000999E 01                         byte_9490:	dc.b 1
0000999F FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
000099A4                            		even
000099A4                            		even
000099A4                            
000099A4                            Map_obj28b:
000099A4                            	include "_maps\obj28b.asm"
000099A4                            ; ---------------------------------------------------------------------------
000099A4                            ; Sprite mappings - animals
000099A4                            ; ---------------------------------------------------------------------------
000099A4 0000                       		dc.w byte_94A2-Map_obj28b
000099A6 0000                       		dc.w byte_94A8-Map_obj28b
000099A8 0000                       		dc.w byte_949C-Map_obj28b
000099AA 01                         byte_949C:	dc.b 1
000099AB F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000099B0 01                         byte_94A2:	dc.b 1
000099B1 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
000099B6 01                         byte_94A8:	dc.b 1
000099B7 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
000099BC                            		even
000099BC                            		even
000099BC                            
000099BC                            ; ---------------------------------------------------------------------------
000099BC                            ; Sprite mappings - points that	appear when you	destroy	something
000099BC                            ; ---------------------------------------------------------------------------
000099BC                            Map_obj29:
000099BC                            	include "_maps\obj29.asm"
000099BC                            ; ---------------------------------------------------------------------------
000099BC                            ; Sprite mappings - points that	appear when you	destroy	something
000099BC                            ; ---------------------------------------------------------------------------
000099BC 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
000099C0 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
000099C4 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
000099C8 0000                       		dc.w byte_94E5-Map_obj29
000099CA 01                         byte_94BC:	dc.b 1
000099CB FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
000099D0 01                         byte_94C2:	dc.b 1
000099D1 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
000099D6 01                         byte_94C8:	dc.b 1
000099D7 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
000099DC 01                         byte_94CE:	dc.b 1
000099DD FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
000099E2 01                         byte_94D4:	dc.b 1
000099E3 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
000099E8 02                         byte_94DA:	dc.b 2
000099E9 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
000099EE FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
000099F3 02                         byte_94E5:	dc.b 2
000099F4 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
000099F9 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
000099FE                            		even
000099FE                            		even
000099FE                            
000099FE                            ; ===========================================================================
000099FE                            ; ---------------------------------------------------------------------------
000099FE                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
000099FE                            ; ---------------------------------------------------------------------------
000099FE                            
000099FE                            Obj1F:					; XREF: Obj_Index
000099FE 7000                       		moveq	#0,d0
00009A00 1028 0024                  		move.b	$24(a0),d0
00009A04 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009A08 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
00009A0C                            ; ===========================================================================
00009A0C 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
00009A0E 0000                       		dc.w Obj1F_Action-Obj1F_Index
00009A10 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009A12 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009A14 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009A16                            ; ===========================================================================
00009A16                            
00009A16                            Obj1F_Main:				; XREF: Obj1F_Index
00009A16 117C 0010 0016             		move.b	#$10,$16(a0)
00009A1C 117C 0008 0017             		move.b	#8,$17(a0)
00009A22 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009A2A 317C 0400 0002             		move.w	#$400,2(a0)
00009A30 117C 0004 0001             		move.b	#4,1(a0)
00009A36 117C 0003 0018             		move.b	#3,$18(a0)
00009A3C 117C 0006 0020             		move.b	#6,$20(a0)
00009A42 117C 0015 0019             		move.b	#$15,$19(a0)
00009A48 6100 0000                  		bsr.w	ObjectFall
00009A4C 4EB9 0000 0000             		jsr	ObjHitFloor
00009A52 4A41                       		tst.w	d1
00009A54 6A00                       		bpl.s	locret_955A
00009A56 D368 000C                  		add.w	d1,$C(a0)
00009A5A 1143 0026                  		move.b	d3,$26(a0)
00009A5E 317C 0000 0012             		move.w	#0,$12(a0)
00009A64 5428 0024                  		addq.b	#2,$24(a0)
00009A68                            
00009A68                            locret_955A:
00009A68 4E75                       		rts	
00009A6A                            ; ===========================================================================
00009A6A                            
00009A6A                            Obj1F_Action:				; XREF: Obj1F_Index
00009A6A 7000                       		moveq	#0,d0
00009A6C 1028 0025                  		move.b	$25(a0),d0
00009A70 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00009A74 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
00009A78 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009A7E 6100 0000                  		bsr.w	AnimateSprite
00009A82 6000 0000                  		bra.w	MarkObjGone
00009A86                            ; ===========================================================================
00009A86 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009A88 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009A8A                            ; ===========================================================================
00009A8A                            
00009A8A                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009A8A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009A8E 6A00                       		bpl.s	locret_95B6
00009A90 4A28 0001                  		tst.b	1(a0)
00009A94 6A00                       		bpl.s	Obj1F_Move
00009A96 0868 0001 0032             		bchg	#1,$32(a0)
00009A9C 6600                       		bne.s	Obj1F_MakeFire
00009A9E                            
00009A9E                            Obj1F_Move:
00009A9E 5428 0025                  		addq.b	#2,$25(a0)
00009AA2 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00009AA8 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009AAE 6100 0000                  		bsr.w	Obj1F_SetAni
00009AB2 5600                       		addq.b	#3,d0
00009AB4 1140 001C                  		move.b	d0,$1C(a0)
00009AB8 0868 0000 0022             		bchg	#0,$22(a0)
00009ABE 6600                       		bne.s	locret_95B6
00009AC0 4468 0010                  		neg.w	$10(a0)		; change direction
00009AC4                            
00009AC4                            locret_95B6:
00009AC4 4E75                       		rts	
00009AC6                            ; ===========================================================================
00009AC6                            
00009AC6                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00009AC6 317C 003B 0030             		move.w	#$3B,$30(a0)
00009ACC 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00009AD2 6100 0000                  		bsr.w	SingleObjLoad
00009AD6 6600                       		bne.s	Obj1F_MakeFire2
00009AD8 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00009ADC 137C 0006 0024             		move.b	#6,$24(a1)
00009AE2 3368 0008 0008             		move.w	8(a0),8(a1)
00009AE8 0469 0010 0008             		subi.w	#$10,8(a1)
00009AEE 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009AF4 337C FF00 0010             		move.w	#-$100,$10(a1)
00009AFA                            
00009AFA                            Obj1F_MakeFire2:
00009AFA 6100 0000                  		bsr.w	SingleObjLoad
00009AFE 6600                       		bne.s	locret_9618
00009B00 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00009B04 137C 0006 0024             		move.b	#6,$24(a1)
00009B0A 3368 0008 0008             		move.w	8(a0),8(a1)
00009B10 0669 0010 0008             		addi.w	#$10,8(a1)
00009B16 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009B1C 337C 0100 0010             		move.w	#$100,$10(a1)
00009B22                            
00009B22                            locret_9618:
00009B22 4E75                       		rts	
00009B24                            ; ===========================================================================
00009B24                            
00009B24                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009B24 5368 0030                  		subq.w	#1,$30(a0)
00009B28 6B00                       		bmi.s	loc_966E
00009B2A 6100 0000                  		bsr.w	SpeedToPos
00009B2E 0868 0000 0032             		bchg	#0,$32(a0)
00009B34 6600                       		bne.s	loc_9654
00009B36 3628 0008                  		move.w	8(a0),d3
00009B3A 0643 0010                  		addi.w	#$10,d3
00009B3E 0828 0000 0022             		btst	#0,$22(a0)
00009B44 6700                       		beq.s	loc_9640
00009B46 0443 0020                  		subi.w	#$20,d3
00009B4A                            
00009B4A                            loc_9640:
00009B4A 4EB9 0000 0000             		jsr	ObjHitFloor2
00009B50 0C41 FFF8                  		cmpi.w	#-8,d1
00009B54 6D00                       		blt.s	loc_966E
00009B56 0C41 000C                  		cmpi.w	#$C,d1
00009B5A 6C00                       		bge.s	loc_966E
00009B5C 4E75                       		rts	
00009B5E                            ; ===========================================================================
00009B5E                            
00009B5E                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009B5E 4EB9 0000 0000             		jsr	ObjHitFloor
00009B64 D368 000C                  		add.w	d1,$C(a0)
00009B68 1143 0026                  		move.b	d3,$26(a0)
00009B6C 6100 0000                  		bsr.w	Obj1F_SetAni
00009B70 5600                       		addq.b	#3,d0
00009B72 1140 001C                  		move.b	d0,$1C(a0)
00009B76 4E75                       		rts	
00009B78                            ; ===========================================================================
00009B78                            
00009B78                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009B78 5528 0025                  		subq.b	#2,$25(a0)
00009B7C 317C 003B 0030             		move.w	#59,$30(a0)
00009B82 317C 0000 0010             		move.w	#0,$10(a0)
00009B88 6100 0000                  		bsr.w	Obj1F_SetAni
00009B8C 1140 001C                  		move.b	d0,$1C(a0)
00009B90 4E75                       		rts	
00009B92                            ; ---------------------------------------------------------------------------
00009B92                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009B92                            ; ---------------------------------------------------------------------------
00009B92                            
00009B92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B92                            
00009B92                            
00009B92                            Obj1F_SetAni:				; XREF: loc_966E
00009B92 7000                       		moveq	#0,d0
00009B94 1628 0026                  		move.b	$26(a0),d3
00009B98 6B00                       		bmi.s	loc_96A4
00009B9A 0C03 0006                  		cmpi.b	#6,d3
00009B9E 6500                       		bcs.s	locret_96A2
00009BA0 7001                       		moveq	#1,d0
00009BA2 0828 0000 0022             		btst	#0,$22(a0)
00009BA8 6600                       		bne.s	locret_96A2
00009BAA 7002                       		moveq	#2,d0
00009BAC                            
00009BAC                            locret_96A2:
00009BAC 4E75                       		rts	
00009BAE                            ; ===========================================================================
00009BAE                            
00009BAE                            loc_96A4:				; XREF: Obj1F_SetAni
00009BAE 0C03 00FA                  		cmpi.b	#-6,d3
00009BB2 6200                       		bhi.s	locret_96B6
00009BB4 7002                       		moveq	#2,d0
00009BB6 0828 0000 0022             		btst	#0,$22(a0)
00009BBC 6600                       		bne.s	locret_96B6
00009BBE 7001                       		moveq	#1,d0
00009BC0                            
00009BC0                            locret_96B6:
00009BC0 4E75                       		rts	
00009BC2                            ; End of function Obj1F_SetAni
00009BC2                            
00009BC2                            ; ===========================================================================
00009BC2                            
00009BC2                            Obj1F_Delete:				; XREF: Obj1F_Index
00009BC2 6100 0000                  		bsr.w	DeleteObject
00009BC6 4E75                       		rts	
00009BC8                            ; ===========================================================================
00009BC8                            ; ---------------------------------------------------------------------------
00009BC8                            ; Sub-object - missile that the	Crabmeat throws
00009BC8                            ; ---------------------------------------------------------------------------
00009BC8                            
00009BC8                            Obj1F_BallMain:				; XREF: Obj1F_Index
00009BC8 5428 0024                  		addq.b	#2,$24(a0)
00009BCC 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009BD4 317C 0400 0002             		move.w	#$400,2(a0)
00009BDA 117C 0004 0001             		move.b	#4,1(a0)
00009BE0 117C 0003 0018             		move.b	#3,$18(a0)
00009BE6 117C 0087 0020             		move.b	#$87,$20(a0)
00009BEC 117C 0008 0019             		move.b	#8,$19(a0)
00009BF2 317C FC00 0012             		move.w	#-$400,$12(a0)
00009BF8 117C 0007 001C             		move.b	#7,$1C(a0)
00009BFE                            
00009BFE                            Obj1F_BallMove:				; XREF: Obj1F_Index
00009BFE 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009C04 6100 0000                  		bsr.w	AnimateSprite
00009C08 6100 0000                  		bsr.w	ObjectFall
00009C0C 6100 0000                  		bsr.w	DisplaySprite
00009C10 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009C14 0640 00E0                  		addi.w	#$E0,d0
00009C18 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009C1C 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009C1E 4E75                       		rts	
00009C20                            ; ===========================================================================
00009C20                            
00009C20                            Obj1F_Delete2:
00009C20 6000 0000                  		bra.w	DeleteObject
00009C24                            ; ===========================================================================
00009C24                            Ani_obj1F:
00009C24                            	include "_anim\obj1F.asm"
00009C24                            ; ---------------------------------------------------------------------------
00009C24                            ; Animation script - Crabmeat enemy
00009C24                            ; ---------------------------------------------------------------------------
00009C24 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
00009C2A 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009C30 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00009C34 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
00009C38 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
00009C3C 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009C40 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009C46 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
00009C4C 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009C52 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009C56 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
00009C5A                            		even
00009C5A                            		even
00009C5A                            
00009C5A                            ; ---------------------------------------------------------------------------
00009C5A                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009C5A                            ; ---------------------------------------------------------------------------
00009C5A                            Map_obj1F:
00009C5A                            	include "_maps\obj1F.asm"
00009C5A                            Map_1514:
00009C5A 0000                       Map_1514_0: 	dc.w Map_1514_E-Map_1514
00009C5C 0000                       Map_1514_2: 	dc.w Map_1514_1E-Map_1514
00009C5E 0000                       Map_1514_4: 	dc.w Map_1514_2E-Map_1514
00009C60 0000                       Map_1514_6: 	dc.w Map_1514_3E-Map_1514
00009C62 0000                       Map_1514_8: 	dc.w Map_1514_4E-Map_1514
00009C64 0000                       Map_1514_A: 	dc.w Map_1514_5E-Map_1514
00009C66 0000                       Map_1514_C: 	dc.w Map_1514_64-Map_1514
00009C68 03                         Map_1514_E: 	dc.b $3
00009C69 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009C6E F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009C73 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009C78 03                         Map_1514_1E: 	dc.b $3
00009C79 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009C7E F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009C83 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009C88 03                         Map_1514_2E: 	dc.b $3
00009C89 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009C8E F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009C93 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009C98 03                         Map_1514_3E: 	dc.b $3
00009C99 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009C9E F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009CA3 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009CA8 03                         Map_1514_4E: 	dc.b $3
00009CA9 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009CAE F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009CB3 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009CB8 01                         Map_1514_5E: 	dc.b $1
00009CB9 F805 0017 F8               	dc.b $F8, $5, $0, $17, $F8
00009CBE 01                         Map_1514_64: 	dc.b $1
00009CBF F805 2017 F8               	dc.b $F8, $5, $20, $17, $F8
00009CC4                            	even
00009CC4                            	even
00009CC4                            
00009CC4                            ; ===========================================================================
00009CC4                            ; ---------------------------------------------------------------------------
00009CC4                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
00009CC4                            ; ---------------------------------------------------------------------------
00009CC4                            
00009CC4                            Obj22:					; XREF: Obj_Index
00009CC4 7000                       		moveq	#0,d0
00009CC6 1028 0024                  		move.b	$24(a0),d0
00009CCA 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
00009CCE 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
00009CD2                            ; ===========================================================================
00009CD2 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
00009CD4 0000                       		dc.w Obj22_Action-Obj22_Index
00009CD6 0000                       		dc.w Obj22_Delete-Obj22_Index
00009CD8                            ; ===========================================================================
00009CD8                            
00009CD8                            Obj22_Main:				; XREF: Obj22_Index
00009CD8 5428 0024                  		addq.b	#2,$24(a0)
00009CDC 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
00009CE4 317C 0444 0002             		move.w	#$444,2(a0)
00009CEA 117C 0004 0001             		move.b	#4,1(a0)
00009CF0 117C 0003 0018             		move.b	#3,$18(a0)
00009CF6 117C 0008 0020             		move.b	#8,$20(a0)
00009CFC 117C 0018 0019             		move.b	#$18,$19(a0)
00009D02                            
00009D02                            Obj22_Action:				; XREF: Obj22_Index
00009D02 7000                       		moveq	#0,d0
00009D04 1028 0025                  		move.b	$25(a0),d0
00009D08 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
00009D0C 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
00009D10 43F9 0000 0000             		lea	(Ani_obj22).l,a1
00009D16 6100 0000                  		bsr.w	AnimateSprite
00009D1A 6000 0000                  		bra.w	MarkObjGone
00009D1E                            ; ===========================================================================
00009D1E 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
00009D20 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
00009D22                            ; ===========================================================================
00009D22                            
00009D22                            Obj22_Move:				; XREF: Obj22_Index2
00009D22 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009D26 6A00                       		bpl.s	locret_986C	; if time remains, branch
00009D28 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
00009D2E 6600                       		bne.s	Obj22_Fire	; if yes, branch
00009D30 5428 0025                  		addq.b	#2,$25(a0)
00009D34 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
00009D3A 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
00009D40 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
00009D46 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009D4C 6600                       		bne.s	locret_986C	; if not, branch
00009D4E 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
00009D52                            
00009D52                            locret_986C:
00009D52 4E75                       		rts	
00009D54                            ; ===========================================================================
00009D54                            
00009D54                            Obj22_Fire:				; XREF: Obj22_Move
00009D54 6100 0000                  		bsr.w	SingleObjLoad
00009D58 6600                       		bne.s	locret_98D0
00009D5A 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00009D5E 3368 0008 0008             		move.w	8(a0),8(a1)
00009D64 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009D6A 0669 001C 000C             		addi.w	#$1C,$C(a1)
00009D70 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
00009D76 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
00009D7C 303C 0018                  		move.w	#$18,d0
00009D80 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009D86 6600                       		bne.s	loc_98AA	; if not, branch
00009D88 4440                       		neg.w	d0
00009D8A 4469 0010                  		neg.w	$10(a1)		; move missile to the left
00009D8E                            
00009D8E                            loc_98AA:
00009D8E D169 0008                  		add.w	d0,8(a1)
00009D92 1368 0022 0022             		move.b	$22(a0),$22(a1)
00009D98 337C 000E 0032             		move.w	#$E,$32(a1)
00009D9E 2348 003C                  		move.l	a0,$3C(a1)
00009DA2 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
00009DA8 317C 003B 0032             		move.w	#$3B,$32(a0)
00009DAE 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
00009DB4                            
00009DB4                            locret_98D0:
00009DB4 4E75                       		rts	
00009DB6                            ; ===========================================================================
00009DB6                            
00009DB6                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
00009DB6 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009DBA 6B00                       		bmi.s	Obj22_ChgDir
00009DBC 6100 0000                  		bsr.w	SpeedToPos
00009DC0 4A28 0034                  		tst.b	$34(a0)
00009DC4 6600                       		bne.s	locret_992A
00009DC6 3038 D008                  		move.w	($FFFFD008).w,d0
00009DCA 9068 0008                  		sub.w	8(a0),d0
00009DCE 6A00                       		bpl.s	Obj22_SetNrSonic
00009DD0 4440                       		neg.w	d0
00009DD2                            
00009DD2                            Obj22_SetNrSonic:
00009DD2 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
00009DD6 6400                       		bcc.s	locret_992A	; if not, branch
00009DD8 4A28 0001                  		tst.b	1(a0)
00009DDC 6A00                       		bpl.s	locret_992A
00009DDE 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
00009DE4 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
00009DEA 6000                       		bra.s	Obj22_Stop
00009DEC                            ; ===========================================================================
00009DEC                            
00009DEC                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
00009DEC 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
00009DF2 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
00009DF8 317C 003B 0032             		move.w	#59,$32(a0)
00009DFE                            
00009DFE                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
00009DFE 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
00009E02 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
00009E08 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
00009E0E                            
00009E0E                            locret_992A:
00009E0E 4E75                       		rts	
00009E10                            ; ===========================================================================
00009E10                            
00009E10                            Obj22_Delete:				; XREF: Obj22_Index
00009E10 6100 0000                  		bsr.w	DeleteObject
00009E14 4E75                       		rts	
00009E16                            ; ===========================================================================
00009E16                            ; ---------------------------------------------------------------------------
00009E16                            ; Object 23 - missile that Buzz	Bomber throws
00009E16                            ; ---------------------------------------------------------------------------
00009E16                            
00009E16                            Obj23:					; XREF: Obj_Index
00009E16 7000                       		moveq	#0,d0
00009E18 1028 0024                  		move.b	$24(a0),d0
00009E1C 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
00009E20 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
00009E24                            ; ===========================================================================
00009E24 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
00009E26 0000                       		dc.w Obj23_Animate-Obj23_Index
00009E28 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
00009E2A 0000                       		dc.w Obj23_Delete-Obj23_Index
00009E2C 0000                       		dc.w Obj23_FromNewt-Obj23_Index
00009E2E                            ; ===========================================================================
00009E2E                            
00009E2E                            Obj23_Main:				; XREF: Obj23_Index
00009E2E 5368 0032                  		subq.w	#1,$32(a0)
00009E32 6A00                       		bpl.s	Obj23_ChkCancel
00009E34 5428 0024                  		addq.b	#2,$24(a0)
00009E38 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
00009E40 317C 2444 0002             		move.w	#$2444,2(a0)
00009E46 117C 0004 0001             		move.b	#4,1(a0)
00009E4C 117C 0003 0018             		move.b	#3,$18(a0)
00009E52 117C 0008 0019             		move.b	#8,$19(a0)
00009E58 0228 0003 0022             		andi.b	#3,$22(a0)
00009E5E 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
00009E62 6700                       		beq.s	Obj23_Animate	; if not, branch
00009E64 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
00009E6A 117C 0087 0020             		move.b	#$87,$20(a0)
00009E70 117C 0001 001C             		move.b	#1,$1C(a0)
00009E76 6000                       		bra.s	Obj23_Animate2
00009E78                            ; ===========================================================================
00009E78                            
00009E78                            Obj23_Animate:				; XREF: Obj23_Index
00009E78 6100                       		bsr.s	Obj23_ChkCancel
00009E7A 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009E80 6100 0000                  		bsr.w	AnimateSprite
00009E84 6000 0000                  		bra.w	DisplaySprite
00009E88                            ; ---------------------------------------------------------------------------
00009E88                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
00009E88                            ; destroyed, and if it has, then cancel	the missile
00009E88                            ; ---------------------------------------------------------------------------
00009E88                            
00009E88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009E88                            
00009E88                            
00009E88                            Obj23_ChkCancel:			; XREF: Obj23_Main
00009E88 2268 003C                  		movea.l	$3C(a0),a1
00009E8C 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
00009E90 6700                       		beq.s	Obj23_Delete	; if yes, branch
00009E92 4E75                       		rts	
00009E94                            ; End of function Obj23_ChkCancel
00009E94                            
00009E94                            ; ===========================================================================
00009E94                            
00009E94                            Obj23_FromBuzz:				; XREF: Obj23_Index
00009E94 0828 0007 0022             		btst	#7,$22(a0)
00009E9A 6600                       		bne.s	Obj23_Explode
00009E9C 117C 0087 0020             		move.b	#$87,$20(a0)
00009EA2 117C 0001 001C             		move.b	#1,$1C(a0)
00009EA8 6100 0000                  		bsr.w	SpeedToPos
00009EAC 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009EB2 6100 0000                  		bsr.w	AnimateSprite
00009EB6 6100 0000                  		bsr.w	DisplaySprite
00009EBA 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009EBE 0640 00E0                  		addi.w	#$E0,d0
00009EC2 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009EC6 6500                       		bcs.s	Obj23_Delete	; if yes, branch
00009EC8 4E75                       		rts	
00009ECA                            ; ===========================================================================
00009ECA                            
00009ECA                            Obj23_Explode:				; XREF: Obj23_FromBuzz
00009ECA 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
00009ECE 117C 0000 0024             		move.b	#0,$24(a0)
00009ED4 6000 F2DE                  		bra.w	Obj24
00009ED8                            ; ===========================================================================
00009ED8                            
00009ED8                            Obj23_Delete:				; XREF: Obj23_Index
00009ED8 6100 0000                  		bsr.w	DeleteObject
00009EDC 4E75                       		rts	
00009EDE                            ; ===========================================================================
00009EDE                            
00009EDE                            Obj23_FromNewt:				; XREF: Obj23_Index
00009EDE 4A28 0001                  		tst.b	1(a0)
00009EE2 6AF4                       		bpl.s	Obj23_Delete
00009EE4 6100 0000                  		bsr.w	SpeedToPos
00009EE8                            
00009EE8                            Obj23_Animate2:				; XREF: Obj23_Main
00009EE8 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009EEE 6100 0000                  		bsr.w	AnimateSprite
00009EF2 6100 0000                  		bsr.w	DisplaySprite
00009EF6 4E75                       		rts	
00009EF8                            ; ===========================================================================
00009EF8                            Ani_obj22:
00009EF8                            	include "_anim\obj22.asm"
00009EF8                            ; ---------------------------------------------------------------------------
00009EF8                            ; Animation script - Buzz Bomber enemy
00009EF8                            ; ---------------------------------------------------------------------------
00009EF8 0000                       		dc.w byte_9A1E-Ani_obj22
00009EFA 0000                       		dc.w byte_9A22-Ani_obj22
00009EFC 0000                       		dc.w byte_9A26-Ani_obj22
00009EFE 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
00009F02 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
00009F06 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
00009F0A                            		even
00009F0A                            		even
00009F0A                            
00009F0A                            Ani_obj23:
00009F0A                            	include "_anim\obj23.asm"
00009F0A                            ; ---------------------------------------------------------------------------
00009F0A                            ; Animation script - missile that Buzz Bomber throws
00009F0A                            ; ---------------------------------------------------------------------------
00009F0A 0000                       		dc.w byte_9A2E-Ani_obj23
00009F0C 0000                       		dc.w byte_9A32-Ani_obj23
00009F0E 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
00009F12 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
00009F16                            		even
00009F16                            		even
00009F16                            
00009F16                            ; ---------------------------------------------------------------------------
00009F16                            ; Sprite mappings - Buzz Bomber	enemy
00009F16                            ; ---------------------------------------------------------------------------
00009F16                            Map_obj22:
00009F16                            	include "_maps\obj22.asm"
00009F16                            Map_e97a:
00009F16 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
00009F18 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
00009F1A 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
00009F1C 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
00009F1E 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
00009F20 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
00009F22 06                         Map_e97a_C: 	dc.b $6
00009F23 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009F28 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009F2D 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009F32 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009F37 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009F3C F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009F41 06                         Map_e97a_2B: 	dc.b $6
00009F42 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009F47 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009F4C 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009F51 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009F56 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
00009F5B F404 0022 04               	dc.b $F4, $4, $0, $22, $4
00009F60 07                         Map_e97a_4A: 	dc.b $7
00009F61 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
00009F66 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009F6B F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009F70 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009F75 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009F7A F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009F7F F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009F84 07                         Map_e97a_6E: 	dc.b $7
00009F85 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
00009F8A F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009F8F F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009F94 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009F99 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009F9E F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
00009FA3 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
00009FA8 06                         Map_e97a_92: 	dc.b $6
00009FA9 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
00009FAE 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
00009FB3 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
00009FB8 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
00009FBD F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009FC2 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009FC7 04                         Map_e97a_B1: 	dc.b $4
00009FC8 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
00009FCD 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
00009FD2 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
00009FD7 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
00009FDC                            	even
00009FDC                            	even
00009FDC                            
00009FDC                            ; ---------------------------------------------------------------------------
00009FDC                            ; Sprite mappings - missile that Buzz Bomber throws
00009FDC                            ; ---------------------------------------------------------------------------
00009FDC                            Map_obj23:
00009FDC                            	include "_maps\obj23.asm"
00009FDC                            ; ---------------------------------------------------------------------------
00009FDC                            ; Sprite mappings - missile that Buzz Bomber throws
00009FDC                            ; ---------------------------------------------------------------------------
00009FDC 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
00009FE0 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
00009FE4 01                         byte_9B0E:	dc.b 1
00009FE5 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
00009FEA 01                         byte_9B14:	dc.b 1
00009FEB F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
00009FF0 01                         byte_9B1A:	dc.b 1
00009FF1 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
00009FF6 01                         byte_9B20:	dc.b 1
00009FF7 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
00009FFC                            		even
00009FFC                            		even
00009FFC                            
00009FFC                            ; ===========================================================================
00009FFC                            ; ---------------------------------------------------------------------------
00009FFC                            ; Object 25 - rings
00009FFC                            ; ---------------------------------------------------------------------------
00009FFC                            
00009FFC                            Obj25:					; XREF: Obj_Index
00009FFC 7000                       		moveq	#0,d0
00009FFE 1028 0024                  		move.b	$24(a0),d0
0000A002 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000A006 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000A00A                            ; ===========================================================================
0000A00A 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000A00C 0000                       		dc.w Obj25_Animate-Obj25_Index
0000A00E 0000                       		dc.w Obj25_Collect-Obj25_Index
0000A010 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000A012 0000                       		dc.w Obj25_Delete-Obj25_Index
0000A014                            ; ---------------------------------------------------------------------------
0000A014                            ; Distances between rings (format: horizontal, vertical)
0000A014                            ; ---------------------------------------------------------------------------
0000A014 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000A016 1800                       		dc.b $18, 0		; horizontal normal
0000A018 2000                       		dc.b $20, 0		; horizontal wide
0000A01A 0010                       		dc.b 0,	$10		; vertical tight
0000A01C 0018                       		dc.b 0,	$18		; vertical normal
0000A01E 0020                       		dc.b 0,	$20		; vertical wide
0000A020 1010                       		dc.b $10, $10		; diagonal
0000A022 1818                       		dc.b $18, $18
0000A024 2020                       		dc.b $20, $20
0000A026 F010                       		dc.b $F0, $10
0000A028 E818                       		dc.b $E8, $18
0000A02A E020                       		dc.b $E0, $20
0000A02C 1008                       		dc.b $10, 8
0000A02E 1810                       		dc.b $18, $10
0000A030 F008                       		dc.b $F0, 8
0000A032 E810                       		dc.b $E8, $10
0000A034                            ; ===========================================================================
0000A034                            
0000A034                            Obj25_Main:				; XREF: Obj25_Index
0000A034 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A038 7000                       		moveq	#0,d0
0000A03A 1028 0023                  		move.b	$23(a0),d0
0000A03E 45F2 0002                  		lea	2(a2,d0.w),a2
0000A042 1812                       		move.b	(a2),d4
0000A044 1228 0028                  		move.b	$28(a0),d1
0000A048 1001                       		move.b	d1,d0
0000A04A 0241 0007                  		andi.w	#7,d1
0000A04E 0C41 0007                  		cmpi.w	#7,d1
0000A052 6600                       		bne.s	loc_9B80
0000A054 7206                       		moveq	#6,d1
0000A056                            
0000A056                            loc_9B80:
0000A056 4841                       		swap	d1
0000A058 323C 0000                  		move.w	#0,d1
0000A05C E808                       		lsr.b	#4,d0
0000A05E D040                       		add.w	d0,d0
0000A060 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000A064 4885                       		ext.w	d5
0000A066 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000A06A 4886                       		ext.w	d6
0000A06C 2248                       		movea.l	a0,a1
0000A06E 3428 0008                  		move.w	8(a0),d2
0000A072 3628 000C                  		move.w	$C(a0),d3
0000A076 E20C                       		lsr.b	#1,d4
0000A078 6500                       		bcs.s	loc_9C02
0000A07A 0892 0007                  		bclr	#7,(a2)
0000A07E 6000                       		bra.s	loc_9BBA
0000A080                            ; ===========================================================================
0000A080                            
0000A080                            Obj25_MakeRings:
0000A080 4841                       		swap	d1
0000A082 E20C                       		lsr.b	#1,d4
0000A084 6500                       		bcs.s	loc_9C02
0000A086 0892 0007                  		bclr	#7,(a2)
0000A08A 6100 0000                  		bsr.w	SingleObjLoad
0000A08E 6600                       		bne.s	loc_9C0E
0000A090                            
0000A090                            loc_9BBA:				; XREF: Obj25_Main
0000A090 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A094 5429 0024                  		addq.b	#2,$24(a1)
0000A098 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A09C 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A0A2 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A0A6 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A0AE 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A0B4 137C 0004 0001             		move.b	#4,1(a1)
0000A0BA 137C 0002 0018             		move.b	#2,$18(a1)
0000A0C0 137C 0047 0020             		move.b	#$47,$20(a1)
0000A0C6 137C 0008 0019             		move.b	#8,$19(a1)
0000A0CC 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A0D2 1341 0034                  		move.b	d1,$34(a1)
0000A0D6                            
0000A0D6                            loc_9C02:
0000A0D6 5241                       		addq.w	#1,d1
0000A0D8 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A0DA D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A0DC 4841                       		swap	d1
0000A0DE 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A0E2                            
0000A0E2                            loc_9C0E:
0000A0E2 0812 0000                  		btst	#0,(a2)
0000A0E6 6600 0000                  		bne.w	DeleteObject
0000A0EA                            
0000A0EA                            Obj25_Animate:				; XREF: Obj25_Index
0000A0EA 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A0F0 6100 0000                  		bsr.w	DisplaySprite
0000A0F4 3028 0032                  		move.w	$32(a0),d0
0000A0F8 0240 FF80                  		andi.w	#$FF80,d0
0000A0FC 3238 F700                  		move.w	($FFFFF700).w,d1
0000A100 0441 0080                  		subi.w	#$80,d1
0000A104 0241 FF80                  		andi.w	#$FF80,d1
0000A108 9041                       		sub.w	d1,d0
0000A10A 0C40 0280                  		cmpi.w	#$280,d0
0000A10E 6200                       		bhi.s	Obj25_Delete
0000A110 4E75                       		rts	
0000A112                            ; ===========================================================================
0000A112                            
0000A112                            Obj25_Collect:				; XREF: Obj25_Index
0000A112 5428 0024                  		addq.b	#2,$24(a0)
0000A116 117C 0000 0020             		move.b	#0,$20(a0)
0000A11C 117C 0001 0018             		move.b	#1,$18(a0)
0000A122 6100 0000                  		bsr.w	CollectRing
0000A126 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A12A 7000                       		moveq	#0,d0
0000A12C 1028 0023                  		move.b	$23(a0),d0
0000A130 1228 0034                  		move.b	$34(a0),d1
0000A134 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A138                            
0000A138                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A138 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A13E 6100 0000                  		bsr.w	AnimateSprite
0000A142 6000 0000                  		bra.w	DisplaySprite
0000A146                            ; ===========================================================================
0000A146                            
0000A146                            Obj25_Delete:				; XREF: Obj25_Index
0000A146 6000 0000                  		bra.w	DeleteObject
0000A14A                            
0000A14A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A14A                            
0000A14A                            
0000A14A                            CollectRing:				; XREF: Obj25_Collect
0000A14A 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A14E 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A154 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A158 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A15E 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A160 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A166 6700                       		beq.s	loc_9CA4
0000A168 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A16E 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A170 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A176 6600                       		bne.s	Obj25_PlaySnd
0000A178                            
0000A178                            loc_9CA4:
0000A178 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A17C 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A180 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A184                            
0000A184                            Obj25_PlaySnd:
0000A184 4EF9 0000 15BC             		jmp	(PlaySound_Special).l
0000A18A                            ; End of function CollectRing
0000A18A                            
0000A18A                            ; ===========================================================================
0000A18A                            ; ---------------------------------------------------------------------------
0000A18A                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A18A                            ; ---------------------------------------------------------------------------
0000A18A                            
0000A18A                            Obj37:					; XREF: Obj_Index
0000A18A 7000                       		moveq	#0,d0
0000A18C 1028 0024                  		move.b	$24(a0),d0
0000A190 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A194 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A198                            ; ===========================================================================
0000A198 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A19A 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A19C 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A19E 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A1A0 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A1A2                            ; ===========================================================================
0000A1A2                            
0000A1A2                            Obj37_CountRings:			; XREF: Obj37_Index
0000A1A2 2248                       		movea.l	a0,a1
0000A1A4 7A00                       		moveq	#0,d5
0000A1A6 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A1AA 7020                       		moveq	#32,d0
0000A1AC BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A1AE 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A1B0 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A1B2                            
0000A1B2                            loc_9CDE:
0000A1B2 5345                       		subq.w	#1,d5
0000A1B4 383C 0288                  		move.w	#$288,d4
0000A1B8 6000                       		bra.s	Obj37_MakeRings
0000A1BA                            ; ===========================================================================
0000A1BA                            
0000A1BA                            Obj37_Loop:
0000A1BA 6100 0000                  		bsr.w	SingleObjLoad
0000A1BE 6600 0000                  		bne.w	Obj37_ResetCounter
0000A1C2                            
0000A1C2                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A1C2 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A1C6 5429 0024                  		addq.b	#2,$24(a1)
0000A1CA 137C 0008 0016             		move.b	#8,$16(a1)
0000A1D0 137C 0008 0017             		move.b	#8,$17(a1)
0000A1D6 3368 0008 0008             		move.w	8(a0),8(a1)
0000A1DC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A1E2 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A1EA 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A1F0 137C 0004 0001             		move.b	#4,1(a1)
0000A1F6 137C 0003 0018             		move.b	#3,$18(a1)
0000A1FC 137C 0047 0020             		move.b	#$47,$20(a1)
0000A202 137C 0008 0019             		move.b	#8,$19(a1)
0000A208 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A20E 4A44                       		tst.w	d4
0000A210 6B00                       		bmi.s	loc_9D62
0000A212 3004                       		move.w	d4,d0
0000A214 6100 8A4A                  		bsr.w	CalcSine
0000A218 3404                       		move.w	d4,d2
0000A21A E04A                       		lsr.w	#8,d2
0000A21C E560                       		asl.w	d2,d0
0000A21E E561                       		asl.w	d2,d1
0000A220 3400                       		move.w	d0,d2
0000A222 3601                       		move.w	d1,d3
0000A224 0604 0010                  		addi.b	#$10,d4
0000A228 6400                       		bcc.s	loc_9D62
0000A22A 0444 0080                  		subi.w	#$80,d4
0000A22E 6400                       		bcc.s	loc_9D62
0000A230 383C 0288                  		move.w	#$288,d4
0000A234                            
0000A234                            loc_9D62:
0000A234 3342 0010                  		move.w	d2,$10(a1)
0000A238 3343 0012                  		move.w	d3,$12(a1)
0000A23C 4442                       		neg.w	d2
0000A23E 4444                       		neg.w	d4
0000A240 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A244                            
0000A244                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A244 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A24A 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A250 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A256 303C 00C6                  		move.w	#$C6,d0
0000A25A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A260                            
0000A260                            Obj37_Bounce:				; XREF: Obj37_Index
0000A260 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A266 6100 0000                  		bsr.w	SpeedToPos
0000A26A 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A270 6B00                       		bmi.s	Obj37_ChkDel
0000A272 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A276 D007                       		add.b	d7,d0
0000A278 0200 0003                  		andi.b	#3,d0
0000A27C 6600                       		bne.s	Obj37_ChkDel
0000A27E 4EB9 0000 0000             		jsr	ObjHitFloor
0000A284 4A41                       		tst.w	d1
0000A286 6A00                       		bpl.s	Obj37_ChkDel
0000A288 D368 000C                  		add.w	d1,$C(a0)
0000A28C 3028 0012                  		move.w	$12(a0),d0
0000A290 E440                       		asr.w	#2,d0
0000A292 9168 0012                  		sub.w	d0,$12(a0)
0000A296 4468 0012                  		neg.w	$12(a0)
0000A29A                            
0000A29A                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A29A 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A29E 6700                       		beq.s	Obj37_Delete
0000A2A0 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A2A4 0640 00E0                  		addi.w	#$E0,d0
0000A2A8 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A2AC 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A2AE 6000 0000                  		bra.w	DisplaySprite
0000A2B2                            ; ===========================================================================
0000A2B2                            
0000A2B2                            Obj37_Collect:				; XREF: Obj37_Index
0000A2B2 5428 0024                  		addq.b	#2,$24(a0)
0000A2B6 117C 0000 0020             		move.b	#0,$20(a0)
0000A2BC 117C 0001 0018             		move.b	#1,$18(a0)
0000A2C2 6100 FE86                  		bsr.w	CollectRing
0000A2C6                            
0000A2C6                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A2C6 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A2CC 6100 0000                  		bsr.w	AnimateSprite
0000A2D0 6000 0000                  		bra.w	DisplaySprite
0000A2D4                            ; ===========================================================================
0000A2D4                            
0000A2D4                            Obj37_Delete:				; XREF: Obj37_Index
0000A2D4 6000 0000                  		bra.w	DeleteObject
0000A2D8                            ; ===========================================================================
0000A2D8                            ; ---------------------------------------------------------------------------
0000A2D8                            ; Object 4B - giant ring for entry to special stage
0000A2D8                            ; ---------------------------------------------------------------------------
0000A2D8                            
0000A2D8                            Obj4B:					; XREF: Obj_Index
0000A2D8 7000                       		moveq	#0,d0
0000A2DA 1028 0024                  		move.b	$24(a0),d0
0000A2DE 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A2E2 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A2E6                            ; ===========================================================================
0000A2E6 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A2E8 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A2EA 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A2EC 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A2EE                            ; ===========================================================================
0000A2EE                            
0000A2EE                            Obj4B_Main:				; XREF: Obj4B_Index
0000A2EE 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A2F6 317C 2400 0002             		move.w	#$2400,2(a0)
0000A2FC 0028 0004 0001             		ori.b	#4,1(a0)
0000A302 117C 0040 0019             		move.b	#$40,$19(a0)
0000A308 4A28 0001                  		tst.b	1(a0)
0000A30C 6A00                       		bpl.s	Obj4B_Animate
0000A30E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A314 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A318 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A31E 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A320 4E75                       		rts	
0000A322                            ; ===========================================================================
0000A322                            
0000A322                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A322 5428 0024                  		addq.b	#2,$24(a0)
0000A326 117C 0002 0018             		move.b	#2,$18(a0)
0000A32C 117C 0052 0020             		move.b	#$52,$20(a0)
0000A332 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A338                            
0000A338                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A338 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A33E 3028 0008                  		move.w	8(a0),d0
0000A342 0240 FF80                  		andi.w	#$FF80,d0
0000A346 3238 F700                  		move.w	($FFFFF700).w,d1
0000A34A 0441 0080                  		subi.w	#$80,d1
0000A34E 0241 FF80                  		andi.w	#$FF80,d1
0000A352 9041                       		sub.w	d1,d0
0000A354 0C40 0280                  		cmpi.w	#$280,d0
0000A358 6200 0000                  		bhi.w	DeleteObject
0000A35C 6000 0000                  		bra.w	DisplaySprite
0000A360                            ; ===========================================================================
0000A360                            
0000A360                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A360 5528 0024                  		subq.b	#2,$24(a0)
0000A364 117C 0000 0020             		move.b	#0,$20(a0)
0000A36A 6100 0000                  		bsr.w	SingleObjLoad
0000A36E 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A372 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A376 3368 0008 0008             		move.w	8(a0),8(a1)
0000A37C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A382 2348 003C                  		move.l	a0,$3C(a1)
0000A386 3038 D008                  		move.w	($FFFFD008).w,d0
0000A38A B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A38E 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A390 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A396                            
0000A396                            Obj4B_PlaySnd:
0000A396 303C 00C3                  		move.w	#$C3,d0
0000A39A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A3A0 6096                       		bra.s	Obj4B_Animate
0000A3A2                            ; ===========================================================================
0000A3A2                            
0000A3A2                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A3A2 6000 0000                  		bra.w	DeleteObject
0000A3A6                            ; ===========================================================================
0000A3A6                            ; ---------------------------------------------------------------------------
0000A3A6                            ; Object 7C - flash effect when	you collect the	giant ring
0000A3A6                            ; ---------------------------------------------------------------------------
0000A3A6                            
0000A3A6                            Obj7C:					; XREF: Obj_Index
0000A3A6 7000                       		moveq	#0,d0
0000A3A8 1028 0024                  		move.b	$24(a0),d0
0000A3AC 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A3B0 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A3B4                            ; ===========================================================================
0000A3B4 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A3B6 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A3B8 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A3BA                            ; ===========================================================================
0000A3BA                            
0000A3BA                            Obj7C_Main:				; XREF: Obj7C_Index
0000A3BA 5428 0024                  		addq.b	#2,$24(a0)
0000A3BE 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A3C6 317C 2462 0002             		move.w	#$2462,2(a0)
0000A3CC 0028 0004 0001             		ori.b	#4,1(a0)
0000A3D2 117C 0000 0018             		move.b	#0,$18(a0)
0000A3D8 117C 0020 0019             		move.b	#$20,$19(a0)
0000A3DE 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A3E4                            
0000A3E4                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A3E4 6100                       		bsr.s	Obj7C_Collect
0000A3E6 3028 0008                  		move.w	8(a0),d0
0000A3EA 0240 FF80                  		andi.w	#$FF80,d0
0000A3EE 3238 F700                  		move.w	($FFFFF700).w,d1
0000A3F2 0441 0080                  		subi.w	#$80,d1
0000A3F6 0241 FF80                  		andi.w	#$FF80,d1
0000A3FA 9041                       		sub.w	d1,d0
0000A3FC 0C40 0280                  		cmpi.w	#$280,d0
0000A400 6200 0000                  		bhi.w	DeleteObject
0000A404 6000 0000                  		bra.w	DisplaySprite
0000A408                            
0000A408                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A408                            
0000A408                            
0000A408                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A408 5328 001E                  		subq.b	#1,$1E(a0)
0000A40C 6A00                       		bpl.s	locret_9F76
0000A40E 117C 0001 001E             		move.b	#1,$1E(a0)
0000A414 5228 001A                  		addq.b	#1,$1A(a0)
0000A418 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A41E 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A420 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A426 6600                       		bne.s	locret_9F76	; if not, branch
0000A428 2268 003C                  		movea.l	$3C(a0),a1
0000A42C 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A432 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A438 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A43E 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A442 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A446                            
0000A446                            locret_9F76:
0000A446 4E75                       		rts	
0000A448                            ; ===========================================================================
0000A448                            
0000A448                            Obj7C_End:				; XREF: Obj7C_Collect
0000A448 5428 0024                  		addq.b	#2,$24(a0)
0000A44C 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A452 588F                       		addq.l	#4,sp
0000A454 4E75                       		rts	
0000A456                            ; End of function Obj7C_Collect
0000A456                            
0000A456                            ; ===========================================================================
0000A456                            
0000A456                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A456 6000 0000                  		bra.w	DeleteObject
0000A45A                            ; ===========================================================================
0000A45A                            Ani_obj25:
0000A45A                            	include "_anim\obj25.asm"
0000A45A                            ; ---------------------------------------------------------------------------
0000A45A                            ; Animation script - ring
0000A45A                            ; ---------------------------------------------------------------------------
0000A45A 0000                       		dc.w byte_9F8C-Ani_obj25
0000A45C 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A462                            		even
0000A462                            		even
0000A462                            
0000A462                            ; ---------------------------------------------------------------------------
0000A462                            ; Sprite mappings - rings
0000A462                            ; ---------------------------------------------------------------------------
0000A462                            Map_obj25:
0000A462                            	include "_maps\obj25.asm"
0000A462                            ; ---------------------------------------------------------------------------
0000A462                            ; Sprite mappings - rings
0000A462                            ; ---------------------------------------------------------------------------
0000A462 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A466 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A46A 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A46E 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A472 01                         byte_9FA2:	dc.b 1
0000A473 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A478 01                         byte_9FA8:	dc.b 1
0000A479 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A47E 01                         byte_9FAE:	dc.b 1
0000A47F F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A484 01                         byte_9FB4:	dc.b 1
0000A485 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A48A 01                         byte_9FBA:	dc.b 1
0000A48B F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A490 01                         byte_9FC0:	dc.b 1
0000A491 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A496 01                         byte_9FC6:	dc.b 1
0000A497 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A49C 01                         byte_9FCC:	dc.b 1
0000A49D F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A4A2                            		even
0000A4A2                            		even
0000A4A2                            
0000A4A2                            ; ---------------------------------------------------------------------------
0000A4A2                            ; Sprite mappings - giant ring
0000A4A2                            ; ---------------------------------------------------------------------------
0000A4A2                            Map_obj4B:
0000A4A2                            	include "_maps\obj4B.asm"
0000A4A2                            ; ---------------------------------------------------------------------------
0000A4A2                            ; Sprite mappings - giant ring
0000A4A2                            ; ---------------------------------------------------------------------------
0000A4A2 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A4A6 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A4AA 0A                         byte_9FDA:	dc.b $A
0000A4AB E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A4B0 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A4B5 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A4BA E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A4BF F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A4C4 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A4C9 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A4CE 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A4D3 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A4D8 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A4DD 08                         byte_A00D:	dc.b 8
0000A4DE E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A4E3 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A4E8 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A4ED F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A4F2 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A4F7 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A4FC 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A501 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A506 04                         byte_A036:	dc.b 4
0000A507 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A50C E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A511 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A516 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A51B 08                         byte_A04B:	dc.b 8
0000A51C E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A521 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A526 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A52B F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A530 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A535 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A53A 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A53F 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A544                            		even
0000A544                            		even
0000A544                            
0000A544                            ; ---------------------------------------------------------------------------
0000A544                            ; Sprite mappings - flash effect when you collect the giant ring
0000A544                            ; ---------------------------------------------------------------------------
0000A544                            Map_obj7C:
0000A544                            	include "_maps\obj7C.asm"
0000A544                            ; ---------------------------------------------------------------------------
0000A544                            ; Sprite mappings - flash effect when you collect the giant ring
0000A544                            ; ---------------------------------------------------------------------------
0000A544 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A548 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A54C 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A550 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A554 02                         byte_A084:	dc.b 2
0000A555 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A55A 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A55F 04                         byte_A08F:	dc.b 4
0000A560 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A565 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A56A 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A56F 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A574 04                         byte_A0A4:	dc.b 4
0000A575 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A57A E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A57F 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A584 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A589 04                         byte_A0B9:	dc.b 4
0000A58A E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A58F E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A594 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A599 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A59E 04                         byte_A0CE:	dc.b 4
0000A59F E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A5A4 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A5A9 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A5AE 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A5B3 04                         byte_A0E3:	dc.b 4
0000A5B4 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A5B9 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A5BE 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A5C3 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A5C8 02                         byte_A0F8:	dc.b 2
0000A5C9 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A5CE 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A5D3 04                         byte_A103:	dc.b 4
0000A5D4 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A5D9 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A5DE 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A5E3 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A5E8                            		even
0000A5E8                            		even
0000A5E8                            
0000A5E8                            ; ===========================================================================
0000A5E8                            ; ---------------------------------------------------------------------------
0000A5E8                            ; Object 26 - monitors
0000A5E8                            ; ---------------------------------------------------------------------------
0000A5E8                            
0000A5E8                            Obj26:					; XREF: Obj_Index
0000A5E8 7000                       		moveq	#0,d0
0000A5EA 1028 0024                  		move.b	$24(a0),d0
0000A5EE 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A5F2 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A5F6                            ; ===========================================================================
0000A5F6 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A5F8 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A5FA 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A5FC 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A5FE 0000                       		dc.w Obj26_Display-Obj26_Index
0000A600                            ; ===========================================================================
0000A600                            
0000A600                            Obj26_Main:				; XREF: Obj26_Index
0000A600 5428 0024                  		addq.b	#2,$24(a0)
0000A604 117C 000E 0016             		move.b	#$E,$16(a0)
0000A60A 117C 000E 0017             		move.b	#$E,$17(a0)
0000A610 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A618 317C 0680 0002             		move.w	#$680,2(a0)
0000A61E 117C 0004 0001             		move.b	#4,1(a0)
0000A624 117C 0003 0018             		move.b	#3,$18(a0)
0000A62A 117C 000F 0019             		move.b	#$F,$19(a0)
0000A630 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A634 7000                       		moveq	#0,d0
0000A636 1028 0023                  		move.b	$23(a0),d0
0000A63A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A640 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A646 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A648 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A64E 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A654 4E75                       		rts	
0000A656                            ; ===========================================================================
0000A656                            
0000A656                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A656 117C 0046 0020             		move.b	#$46,$20(a0)
0000A65C 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A662                            
0000A662                            Obj26_Solid:				; XREF: Obj26_Index
0000A662 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A666 6700                       		beq.s	loc_A1EC	; if not, branch
0000A668 5500                       		subq.b	#2,d0
0000A66A 6600                       		bne.s	Obj26_Fall
0000A66C 7200                       		moveq	#0,d1
0000A66E 1228 0019                  		move.b	$19(a0),d1
0000A672 0641 000B                  		addi.w	#$B,d1
0000A676 6100 D41C                  		bsr.w	ExitPlatform
0000A67A 0829 0003 0022             		btst	#3,$22(a1)
0000A680 6600 0000                  		bne.w	loc_A1BC
0000A684 4228 0025                  		clr.b	$25(a0)
0000A688 6000 0000                  		bra.w	Obj26_Animate
0000A68C                            ; ===========================================================================
0000A68C                            
0000A68C                            loc_A1BC:				; XREF: Obj26_Solid
0000A68C 363C 0010                  		move.w	#$10,d3
0000A690 3428 0008                  		move.w	8(a0),d2
0000A694 6100 D95C                  		bsr.w	MvSonicOnPtfm
0000A698 6000 0000                  		bra.w	Obj26_Animate
0000A69C                            ; ===========================================================================
0000A69C                            
0000A69C                            Obj26_Fall:				; XREF: Obj26_Solid
0000A69C 6100 0000                  		bsr.w	ObjectFall
0000A6A0 4EB9 0000 0000             		jsr	ObjHitFloor
0000A6A6 4A41                       		tst.w	d1
0000A6A8 6A00 0000                  		bpl.w	Obj26_Animate
0000A6AC D368 000C                  		add.w	d1,$C(a0)
0000A6B0 4268 0012                  		clr.w	$12(a0)
0000A6B4 4228 0025                  		clr.b	$25(a0)
0000A6B8 6000 0000                  		bra.w	Obj26_Animate
0000A6BC                            ; ===========================================================================
0000A6BC                            
0000A6BC                            loc_A1EC:				; XREF: Obj26_Solid
0000A6BC 323C 001A                  		move.w	#$1A,d1
0000A6C0 343C 000F                  		move.w	#$F,d2
0000A6C4 6100 0000                  		bsr.w	Obj26_SolidSides
0000A6C8 6700 0000                  		beq.w	loc_A25C
0000A6CC 4A69 0012                  		tst.w	$12(a1)
0000A6D0 6B00                       		bmi.s	loc_A20A
0000A6D2 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000A6D8 6700                       		beq.s	loc_A25C	; if yes, branch
0000A6DA                            
0000A6DA                            loc_A20A:
0000A6DA 4A41                       		tst.w	d1
0000A6DC 6A00                       		bpl.s	loc_A220
0000A6DE 9769 000C                  		sub.w	d3,$C(a1)
0000A6E2 6100 D29E                  		bsr.w	loc_74AE
0000A6E6 117C 0002 0025             		move.b	#2,$25(a0)
0000A6EC 6000 0000                  		bra.w	Obj26_Animate
0000A6F0                            ; ===========================================================================
0000A6F0                            
0000A6F0                            loc_A220:
0000A6F0 4A40                       		tst.w	d0
0000A6F2 6700 0000                  		beq.w	loc_A246
0000A6F6 6B00                       		bmi.s	loc_A230
0000A6F8 4A69 0010                  		tst.w	$10(a1)
0000A6FC 6B00                       		bmi.s	loc_A246
0000A6FE 6000                       		bra.s	loc_A236
0000A700                            ; ===========================================================================
0000A700                            
0000A700                            loc_A230:
0000A700 4A69 0010                  		tst.w	$10(a1)
0000A704 6A00                       		bpl.s	loc_A246
0000A706                            
0000A706                            loc_A236:
0000A706 9169 0008                  		sub.w	d0,8(a1)
0000A70A 337C 0000 0014             		move.w	#0,$14(a1)
0000A710 337C 0000 0010             		move.w	#0,$10(a1)
0000A716                            
0000A716                            loc_A246:
0000A716 0829 0001 0022             		btst	#1,$22(a1)
0000A71C 6600                       		bne.s	loc_A26A
0000A71E 08E9 0005 0022             		bset	#5,$22(a1)
0000A724 08E8 0005 0022             		bset	#5,$22(a0)
0000A72A 6000                       		bra.s	Obj26_Animate
0000A72C                            ; ===========================================================================
0000A72C                            
0000A72C                            loc_A25C:
0000A72C 0828 0005 0022             		btst	#5,$22(a0)
0000A732 6700                       		beq.s	Obj26_Animate
0000A734 337C 0001 001C             		move.w	#1,$1C(a1)
0000A73A                            
0000A73A                            loc_A26A:
0000A73A 08A8 0005 0022             		bclr	#5,$22(a0)
0000A740 08A9 0005 0022             		bclr	#5,$22(a1)
0000A746                            
0000A746                            Obj26_Animate:				; XREF: Obj26_Index
0000A746 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000A74C 6100 0000                  		bsr.w	AnimateSprite
0000A750                            
0000A750                            Obj26_Display:				; XREF: Obj26_Index
0000A750 6100 0000                  		bsr.w	DisplaySprite
0000A754 3028 0008                  		move.w	8(a0),d0
0000A758 0240 FF80                  		andi.w	#$FF80,d0
0000A75C 3238 F700                  		move.w	($FFFFF700).w,d1
0000A760 0441 0080                  		subi.w	#$80,d1
0000A764 0241 FF80                  		andi.w	#$FF80,d1
0000A768 9041                       		sub.w	d1,d0
0000A76A 0C40 0280                  		cmpi.w	#$280,d0
0000A76E 6200 0000                  		bhi.w	DeleteObject
0000A772 4E75                       		rts	
0000A774                            ; ===========================================================================
0000A774                            
0000A774                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000A774 5428 0024                  		addq.b	#2,$24(a0)
0000A778 117C 0000 0020             		move.b	#0,$20(a0)
0000A77E 6100 0000                  		bsr.w	SingleObjLoad
0000A782 6600                       		bne.s	Obj26_Explode
0000A784 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000A788 3368 0008 0008             		move.w	8(a0),8(a1)
0000A78E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A794 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000A79A 7400                       		moveq	#0,d2	; GMZ
0000A79C 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000A79E                            
0000A79E                            Obj26_Explode:
0000A79E 6100 0000                  		bsr.w	SingleObjLoad
0000A7A2 6600                       		bne.s	Obj26_SetBroken
0000A7A4 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000A7A8 5429 0024                  		addq.b	#2,$24(a1)
0000A7AC 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000A7B0 3368 0008 0008             		move.w	8(a0),8(a1)
0000A7B6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A7BC                            
0000A7BC                            Obj26_NextExplosion:
0000A7BC 5802                       		addq.b	#4,d2
0000A7BE 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000A7C2                            
0000A7C2                            Obj26_SetBroken:
0000A7C2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A7C6 7000                       		moveq	#0,d0
0000A7C8 1028 0023                  		move.b	$23(a0),d0
0000A7CC 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000A7D2 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000A7D8 6000 0000                  		bra.w	DisplaySprite
0000A7DC                            ; ===========================================================================
0000A7DC                            ; ---------------------------------------------------------------------------
0000A7DC                            ; Object 2E - contents of monitors
0000A7DC                            ; ---------------------------------------------------------------------------
0000A7DC                            
0000A7DC                            Obj2E:					; XREF: Obj_Index
0000A7DC 7000                       		moveq	#0,d0
0000A7DE 1028 0024                  		move.b	$24(a0),d0
0000A7E2 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000A7E6 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000A7EA 6000 0000                  		bra.w	DisplaySprite
0000A7EE                            ; ===========================================================================
0000A7EE 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000A7F0 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000A7F2 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000A7F4                            ; ===========================================================================
0000A7F4                            
0000A7F4                            Obj2E_Main:				; XREF: Obj2E_Index
0000A7F4 5428 0024                  		addq.b	#2,$24(a0)
0000A7F8 317C 0680 0002             		move.w	#$680,2(a0)
0000A7FE 117C 0024 0001             		move.b	#$24,1(a0)
0000A804 117C 0003 0018             		move.b	#3,$18(a0)
0000A80A 117C 0008 0019             		move.b	#8,$19(a0)
0000A810 317C FD00 0012             		move.w	#-$300,$12(a0)
0000A816 7000                       		moveq	#0,d0
0000A818 1028 001C                  		move.b	$1C(a0),d0
0000A81C 5400                       		addq.b	#2,d0
0000A81E 1140 001A                  		move.b	d0,$1A(a0)
0000A822 227C 0000 0000             		movea.l	#Map_obj26,a1
0000A828 D000                       		add.b	d0,d0
0000A82A D2F1 0000                  		adda.w	(a1,d0.w),a1
0000A82E 5249                       		addq.w	#1,a1
0000A830 2149 0004                  		move.l	a1,4(a0)
0000A834                            
0000A834                            Obj2E_Move:				; XREF: Obj2E_Index
0000A834 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A838 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000A83C 6100 0000                  		bsr.w	SpeedToPos
0000A840 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000A846 4E75                       		rts	
0000A848                            ; ===========================================================================
0000A848                            
0000A848                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000A848 5428 0024                  		addq.b	#2,$24(a0)
0000A84C 317C 001D 001E             		move.w	#29,$1E(a0)
0000A852 1028 001C                  		move.b	$1C(a0),d0
0000A856 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000A85A 6600                       		bne.s	Obj2E_ChkSonic
0000A85C 4E75                       		rts			; Eggman monitor does nothing
0000A85E                            ; ===========================================================================
0000A85E                            
0000A85E                            Obj2E_ChkSonic:
0000A85E 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000A862 6600                       		bne.s	Obj2E_ChkShoes
0000A864                            
0000A864                            ExtraLife:
0000A864 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A868 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A86C 303C 0088                  		move.w	#$88,d0
0000A870 4EF9 0000 15B6             		jmp	(PlaySound).l	; play extra life music
0000A876                            ; ===========================================================================
0000A876                            
0000A876                            Obj2E_ChkShoes:
0000A876 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000A87A 6600                       		bne.s	Obj2E_ChkShield
0000A87C 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000A882 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000A888 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000A88E 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000A894 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000A89A 303C 00E2                  		move.w	#$E2,d0
0000A89E 4EF9 0000 15B6             		jmp	(PlaySound).l	; Speed	up the music
0000A8A4                            ; ===========================================================================
0000A8A4                            
0000A8A4                            Obj2E_ChkShield:
0000A8A4 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000A8A8 6600                       		bne.s	Obj2E_ChkInvinc
0000A8AA 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000A8B0 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000A8B6 303C 00AF                  		move.w	#$AF,d0
0000A8BA 4EF9 0000 15B6             		jmp	(PlaySound).l	; play shield sound
0000A8C0                            ; ===========================================================================
0000A8C0                            
0000A8C0                            Obj2E_ChkInvinc:
0000A8C0 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000A8C4 6600                       		bne.s	Obj2E_ChkRings
0000A8C6 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000A8CC 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000A8D2 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000A8D8 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000A8DE 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000A8E4 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000A8EA 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000A8F0 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000A8F6 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000A8FC 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000A902 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000A906 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000A908 303C 0087                  		move.w	#$87,d0
0000A90C 4EF9 0000 15B6             		jmp	(PlaySound).l	; play invincibility music
0000A912                            ; ===========================================================================
0000A912                            
0000A912                            Obj2E_NoMusic:
0000A912 4E75                       		rts	
0000A914                            ; ===========================================================================
0000A914                            
0000A914                            Obj2E_ChkRings:
0000A914 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000A918 6600                       		bne.s	Obj2E_ChkS
0000A91A 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000A920 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000A926 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000A92C 6500                       		bcs.s	Obj2E_RingSound
0000A92E 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000A934 6700 FF2E                  		beq.w	ExtraLife
0000A938 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000A93E 6500                       		bcs.s	Obj2E_RingSound
0000A940 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000A946 6700 FF1C                  		beq.w	ExtraLife
0000A94A                            
0000A94A                            Obj2E_RingSound:
0000A94A 303C 00B5                  		move.w	#$B5,d0
0000A94E 4EF9 0000 15B6             		jmp	(PlaySound).l	; play ring sound
0000A954                            ; ===========================================================================
0000A954                            
0000A954                            Obj2E_ChkS:
0000A954 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000A958 6600                       		bne.s	Obj2E_ChkEnd
0000A95A                            		; nop	
0000A95A 7201                       		moveq	#1,d1
0000A95C B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000A960                            
0000A960                            Obj2E_ChkEnd:
0000A960 4E75                       		rts			; 'S' and goggles monitors do nothing
0000A962                            ; ===========================================================================
0000A962                            
0000A962                            Obj2E_Delete:				; XREF: Obj2E_Index
0000A962 5368 001E                  		subq.w	#1,$1E(a0)
0000A966 6B00 0000                  		bmi.w	DeleteObject
0000A96A 4E75                       		rts	
0000A96C                            ; ---------------------------------------------------------------------------
0000A96C                            ; Subroutine to	make the sides of a monitor solid
0000A96C                            ; ---------------------------------------------------------------------------
0000A96C                            
0000A96C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A96C                            
0000A96C                            
0000A96C                            Obj26_SolidSides:			; XREF: loc_A1EC
0000A96C 43F8 D000                  		lea	($FFFFD000).w,a1
0000A970 3029 0008                  		move.w	8(a1),d0
0000A974 9068 0008                  		sub.w	8(a0),d0
0000A978 D041                       		add.w	d1,d0
0000A97A 6B00                       		bmi.s	loc_A4E6
0000A97C 3601                       		move.w	d1,d3
0000A97E D643                       		add.w	d3,d3
0000A980 B043                       		cmp.w	d3,d0
0000A982 6200                       		bhi.s	loc_A4E6
0000A984 1629 0016                  		move.b	$16(a1),d3
0000A988 4883                       		ext.w	d3
0000A98A D443                       		add.w	d3,d2
0000A98C 3629 000C                  		move.w	$C(a1),d3
0000A990 9668 000C                  		sub.w	$C(a0),d3
0000A994 D642                       		add.w	d2,d3
0000A996 6B00                       		bmi.s	loc_A4E6
0000A998 D442                       		add.w	d2,d2
0000A99A B642                       		cmp.w	d2,d3
0000A99C 6400                       		bcc.s	loc_A4E6
0000A99E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000A9A2 6B00                       		bmi.s	loc_A4E6
0000A9A4 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000A9AA 6400                       		bcc.s	loc_A4E6
0000A9AC 4A78 FE08                  		tst.w	($FFFFFE08).w
0000A9B0 6600                       		bne.s	loc_A4E6
0000A9B2 B240                       		cmp.w	d0,d1
0000A9B4 6400                       		bcc.s	loc_A4DC
0000A9B6 D241                       		add.w	d1,d1
0000A9B8 9041                       		sub.w	d1,d0
0000A9BA                            
0000A9BA                            loc_A4DC:
0000A9BA 0C43 0010                  		cmpi.w	#$10,d3
0000A9BE 6500                       		bcs.s	loc_A4EA
0000A9C0                            
0000A9C0                            loc_A4E2:
0000A9C0 7201                       		moveq	#1,d1
0000A9C2 4E75                       		rts	
0000A9C4                            ; ===========================================================================
0000A9C4                            
0000A9C4                            loc_A4E6:
0000A9C4 7200                       		moveq	#0,d1
0000A9C6 4E75                       		rts	
0000A9C8                            ; ===========================================================================
0000A9C8                            
0000A9C8                            loc_A4EA:
0000A9C8 7200                       		moveq	#0,d1
0000A9CA 1228 0019                  		move.b	$19(a0),d1
0000A9CE 5841                       		addq.w	#4,d1
0000A9D0 3401                       		move.w	d1,d2
0000A9D2 D442                       		add.w	d2,d2
0000A9D4 D269 0008                  		add.w	8(a1),d1
0000A9D8 9268 0008                  		sub.w	8(a0),d1
0000A9DC 6BE2                       		bmi.s	loc_A4E2
0000A9DE B242                       		cmp.w	d2,d1
0000A9E0 64DE                       		bcc.s	loc_A4E2
0000A9E2 72FF                       		moveq	#-1,d1
0000A9E4 4E75                       		rts	
0000A9E6                            ; End of function Obj26_SolidSides
0000A9E6                            
0000A9E6                            ; ===========================================================================
0000A9E6                            Ani_obj26:
0000A9E6                            	include "_anim\obj26.asm"
0000A9E6                            ; ---------------------------------------------------------------------------
0000A9E6                            ; Animation script - monitors
0000A9E6                            ; ---------------------------------------------------------------------------
0000A9E6 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000A9EC 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000A9F2 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000A9F8 0000                       		dc.w byte_A582-Ani_obj26
0000A9FA 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000AA00 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000AA0C 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000AA18 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000AA24 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000AA30 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000AA3C 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000AA48 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000AA54 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000AA60 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000AA68                            		even
0000AA68                            		even
0000AA68                            
0000AA68                            ; ---------------------------------------------------------------------------
0000AA68                            ; Sprite mappings - monitors
0000AA68                            ; ---------------------------------------------------------------------------
0000AA68                            Map_obj26:
0000AA68                            	include "_maps\obj26.asm"
0000AA68                            ; ================================================================================
0000AA68                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000AA68                            ; ================================================================================
0000AA68                            
0000AA68                            DATAY1U343IF3L:
0000AA68 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000AA6C 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000AA70 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000AA74 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000AA78 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000AA7C 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000AA80 05                         DATAY1U343IF3L_0: dc.b $5
0000AA81 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA86 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA8B E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA90 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA95 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA9A 06                         DATAY1U343IF3L_1: dc.b $6
0000AA9B F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000AAA0 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AAA5 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AAAA E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AAAF 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AAB4 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AAB9 05                         DATAY1U343IF3L_2: dc.b $5
0000AABA E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AABF 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AAC4 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AAC9 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AACE 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AAD3 05                         DATAY1U343IF3L_3: dc.b $5
0000AAD4 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AAD9 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AADE E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AAE3 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AAE8 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AAED 06                         DATAY1U343IF3L_4: dc.b $6
0000AAEE F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000AAF3 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AAF8 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AAFD E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB02 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB07 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB0C 06                         DATAY1U343IF3L_5: dc.b $6
0000AB0D F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000AB12 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB17 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB1C E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB21 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB26 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB2B 06                         DATAY1U343IF3L_6: dc.b $6
0000AB2C F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000AB31 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB36 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB3B E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB40 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB45 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB4A 06                         DATAY1U343IF3L_7: dc.b $6
0000AB4B F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000AB50 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB55 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB5A E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB5F 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB64 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB69 06                         DATAY1U343IF3L_8: dc.b $6
0000AB6A F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000AB6F E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB74 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB79 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB7E 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB83 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB88 06                         DATAY1U343IF3L_9: dc.b $6
0000AB89 F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000AB8E E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB93 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB98 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB9D 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ABA2 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ABA7 05                         DATAY1U343IF3L_A: dc.b $5
0000ABA8 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ABAD 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ABB2 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ABB7 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ABBC 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ABC1 01                         DATAY1U343IF3L_B: dc.b $1
0000ABC2 FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000ABC8 00                         	even
0000ABC8 00                         	even
0000ABC8                            
0000ABC8                            ; ===========================================================================
0000ABC8                            ; ---------------------------------------------------------------------------
0000ABC8                            ; Object 0E - Sonic on the title screen
0000ABC8                            ; ---------------------------------------------------------------------------
0000ABC8                            
0000ABC8                            Obj0E:					; XREF: Obj_Index
0000ABC8 7000                       		moveq	#0,d0
0000ABCA 1028 0024                  		move.b	$24(a0),d0
0000ABCE 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000ABD2 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000ABD6                            ; ===========================================================================
0000ABD6 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000ABD8 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000ABDA 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000ABDC 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000ABDE                            ; ===========================================================================
0000ABDE                            
0000ABDE                            Obj0E_Main:				; XREF: Obj0E_Index
0000ABDE 5428 0024                  		addq.b	#2,$24(a0)
0000ABE2 317C 00F0 0008             		move.w	#$F0,8(a0)
0000ABE8 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000ABEE 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000ABF6 317C 2300 0002             		move.w	#$2300,2(a0)
0000ABFC 117C 0001 0018             		move.b	#1,$18(a0)
0000AC02 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000AC08 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AC0E 6100 0000                  		bsr.w	AnimateSprite
0000AC12                            
0000AC12                            Obj0E_Delay:				; XREF: Obj0E_Index
0000AC12 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000AC16 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000AC18 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000AC1C 6000 0000                  		bra.w	DisplaySprite
0000AC20                            ; ===========================================================================
0000AC20                            
0000AC20                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000AC20 4E75                       		rts	
0000AC22                            ; ===========================================================================
0000AC22                            
0000AC22                            Obj0E_Move:				; XREF: Obj0E_Index
0000AC22 5168 000A                  		subq.w	#8,$A(a0)
0000AC26 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000AC2C 6600                       		bne.s	Obj0E_Display
0000AC2E 5428 0024                  		addq.b	#2,$24(a0)
0000AC32                            
0000AC32                            Obj0E_Display:
0000AC32 6000 0000                  		bra.w	DisplaySprite
0000AC36                            ; ===========================================================================
0000AC36 4E75                       		rts	
0000AC38                            ; ===========================================================================
0000AC38                            
0000AC38                            Obj0E_Animate:				; XREF: Obj0E_Index
0000AC38 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AC3E 6100 0000                  		bsr.w	AnimateSprite
0000AC42 6000 0000                  		bra.w	DisplaySprite
0000AC46                            ; ===========================================================================
0000AC46 4E75                       		rts	
0000AC48                            ; ===========================================================================
0000AC48                            ; ---------------------------------------------------------------------------
0000AC48                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000AC48                            ; ---------------------------------------------------------------------------
0000AC48                            
0000AC48                            Obj0F:					; XREF: Obj_Index
0000AC48 7000                       		moveq	#0,d0
0000AC4A 1028 0024                  		move.b	$24(a0),d0
0000AC4E 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000AC52 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000AC56 6000 0000                  		bra.w	DisplaySprite
0000AC5A                            ; ===========================================================================
0000AC5A 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000AC5C 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000AC5E 0000                       		dc.w locret_A6F8-Obj0F_Index
0000AC60                            ; ===========================================================================
0000AC60                            
0000AC60                            Obj0F_Main:				; XREF: Obj0F_Index
0000AC60 5428 0024                  		addq.b	#2,$24(a0)
0000AC64 317C 00D0 0008             		move.w	#$D0,8(a0)
0000AC6A 317C 0130 000A             		move.w	#$130,$A(a0)
0000AC70 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000AC78 317C 0200 0002             		move.w	#$200,2(a0)
0000AC7E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000AC84 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000AC86 5428 0024                  		addq.b	#2,$24(a0)
0000AC8A 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000AC90 6600                       		bne.s	locret_A6F8	; if not, branch
0000AC92 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000AC98 317C 0170 0008             		move.w	#$170,8(a0)
0000AC9E 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000ACA4                            
0000ACA4                            locret_A6F8:				; XREF: Obj0F_Index
0000ACA4 4E75                       		rts	
0000ACA6                            ; ===========================================================================
0000ACA6                            
0000ACA6                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000ACA6 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000ACAC 6000 0000                  		bra.w	AnimateSprite
0000ACB0                            ; ===========================================================================
0000ACB0                            Ani_obj0E:
0000ACB0                            	include "_anim\obj0E.asm"
0000ACB0                            ; ---------------------------------------------------------------------------
0000ACB0                            ; Animation script - Sonic on the title screen
0000ACB0                            ; ---------------------------------------------------------------------------
0000ACB0 0000                       		dc.w byte_A706-Ani_obj0E
0000ACB2 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000ACBE                            		even
0000ACBE                            		even
0000ACBE                            
0000ACBE                            Ani_obj0F:
0000ACBE                            	include "_anim\obj0F.asm"
0000ACBE                            ; ---------------------------------------------------------------------------
0000ACBE                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000ACBE                            ; ---------------------------------------------------------------------------
0000ACBE 0000                       		dc.w byte_A714-Ani_obj0F
0000ACC0 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000ACC4                            		even
0000ACC4                            		even
0000ACC4                            
0000ACC4                            ; ---------------------------------------------------------------------------
0000ACC4                            ; Subroutine to	animate	a sprite using an animation script
0000ACC4                            ; ---------------------------------------------------------------------------
0000ACC4                            
0000ACC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ACC4                            
0000ACC4                            
0000ACC4                            AnimateSprite:
0000ACC4 7000                       		moveq	#0,d0
0000ACC6 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000ACCA B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000ACCE 6700                       		beq.s	Anim_Run	; if not, branch
0000ACD0 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000ACD4 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000ACDA 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000ACE0                            
0000ACE0                            Anim_Run:
0000ACE0 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000ACE4 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000ACE6 D040                       		add.w	d0,d0
0000ACE8 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000ACEC 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000ACF0 7200                       		moveq	#0,d1
0000ACF2 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000ACF6 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000ACFA 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000ACFC                            
0000ACFC                            Anim_Next:
0000ACFC 1200                       		move.b	d0,d1
0000ACFE 0200 001F                  		andi.b	#$1F,d0
0000AD02 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000AD06 1028 0022                  		move.b	$22(a0),d0
0000AD0A E719                       		rol.b	#3,d1
0000AD0C B101                       		eor.b	d0,d1
0000AD0E 0201 0003                  		andi.b	#3,d1
0000AD12 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000AD18 8328 0001                  		or.b	d1,1(a0)
0000AD1C 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000AD20                            
0000AD20                            Anim_Wait:
0000AD20 4E75                       		rts	
0000AD22                            ; ===========================================================================
0000AD22                            
0000AD22                            Anim_End_FF:
0000AD22 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000AD24 6600                       		bne.s	Anim_End_FE	; if not, branch
0000AD26 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000AD2C 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000AD30 60CA                       		bra.s	Anim_Next
0000AD32                            ; ===========================================================================
0000AD32                            
0000AD32                            Anim_End_FE:
0000AD32 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000AD34 6600                       		bne.s	Anim_End_FD	; if not, branch
0000AD36 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000AD3A 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000AD3E 9200                       		sub.b	d0,d1
0000AD40 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000AD44 60B6                       		bra.s	Anim_Next
0000AD46                            ; ===========================================================================
0000AD46                            
0000AD46                            Anim_End_FD:
0000AD46 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000AD48 6600                       		bne.s	Anim_End_FC	; if not, branch
0000AD4A 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000AD50                            
0000AD50                            Anim_End_FC:
0000AD50 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000AD52 6600                       		bne.s	Anim_End_FB	; if not, branch
0000AD54 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000AD58                            
0000AD58                            Anim_End_FB:
0000AD58 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000AD5A 6600                       		bne.s	Anim_End_FA	; if not, branch
0000AD5C 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AD62 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000AD66                            
0000AD66                            Anim_End_FA:
0000AD66 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000AD68 6600                       		bne.s	Anim_End	; if not, branch
0000AD6A 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000AD6E                            
0000AD6E                            Anim_End:
0000AD6E 4E75                       		rts	
0000AD70                            ; End of function AnimateSprite
0000AD70                            
0000AD70                            ; ===========================================================================
0000AD70                            ; ---------------------------------------------------------------------------
0000AD70                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AD70                            ; ---------------------------------------------------------------------------
0000AD70                            Map_obj0F:
0000AD70                            	include "_maps\obj0F.asm"
0000AD70                            ; ---------------------------------------------------------------------------
0000AD70                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AD70                            ; ---------------------------------------------------------------------------
0000AD70 0000                       		dc.w byte_A7CD-Map_obj0F
0000AD72 0000                       		dc.w byte_A7CC-Map_obj0F
0000AD74 0000                       		dc.w byte_A7EB-Map_obj0F
0000AD76 0000                       		dc.w byte_A882-Map_obj0F
0000AD78 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000AD79 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000AD7E 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000AD83 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000AD88 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000AD8D 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000AD92 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000AD97 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000AD98 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD9D B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ADA2 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ADA7 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ADAC B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ADB1 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ADB6 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ADBB B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ADC0 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ADC5 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ADCA D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000ADCF D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000ADD4 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000ADD9 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000ADDE D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000ADE3 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000ADE8 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000ADED D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000ADF2 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000ADF7 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000ADFC F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AE01 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AE06 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AE0B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AE10 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AE15 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AE1A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AE1F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AE24 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AE29 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AE2E 01                         byte_A882:	dc.b 1			; "TM"
0000AE2F FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000AE34                            		even
0000AE34                            		even
0000AE34                            
0000AE34                            ; ---------------------------------------------------------------------------
0000AE34                            ; Sprite mappings - Sonic on the title screen
0000AE34                            ; ---------------------------------------------------------------------------
0000AE34                            Map_obj0E:
0000AE34                            	include "_maps\obj0E.asm"
0000AE34                            ; ================================================================================
0000AE34                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 15:32:50 GMT-0500 (Central Daylight Time)
0000AE34                            ; ================================================================================
0000AE34                            
0000AE34                            DATAGKI0HYDQBXP:
0000AE34 0000 0000                  	dc.w DATAGKI0HYDQBXP_0-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_1-DATAGKI0HYDQBXP
0000AE38 0000 0000                  	dc.w DATAGKI0HYDQBXP_2-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_3-DATAGKI0HYDQBXP
0000AE3C 0000 0000                  	dc.w DATAGKI0HYDQBXP_4-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_5-DATAGKI0HYDQBXP
0000AE40 0000 0000                  	dc.w DATAGKI0HYDQBXP_6-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_7-DATAGKI0HYDQBXP
0000AE44 08                         DATAGKI0HYDQBXP_0: dc.b $8
0000AE45 0C0F 0126 08               	dc.b $C, $F, $1, $26, $8
0000AE4A 2C0F 0136 08               	dc.b $2C, $F, $1, $36, $8
0000AE4F 4C0D 0146 08               	dc.b $4C, $D, $1, $46, $8
0000AE54 0408 014E 20               	dc.b $4, $8, $1, $4E, $20
0000AE59 0C0B 0151 28               	dc.b $C, $B, $1, $51, $28
0000AE5E 2C0B 015D 28               	dc.b $2C, $B, $1, $5D, $28
0000AE63 4C05 0169 28               	dc.b $4C, $5, $1, $69, $28
0000AE68 1407 016D 40               	dc.b $14, $7, $1, $6D, $40
0000AE6D 0B                         DATAGKI0HYDQBXP_1: dc.b $B
0000AE6E 060F 0175 01               	dc.b $6, $F, $1, $75, $1
0000AE73 060F 0185 21               	dc.b $6, $F, $1, $85, $21
0000AE78 0607 0195 41               	dc.b $6, $7, $1, $95, $41
0000AE7D 260F 019D 01               	dc.b $26, $F, $1, $9D, $1
0000AE82 260F 01AD 21               	dc.b $26, $F, $1, $AD, $21
0000AE87 2607 01BD 41               	dc.b $26, $7, $1, $BD, $41
0000AE8C 460C 01C5 01               	dc.b $46, $C, $1, $C5, $1
0000AE91 460E 01C9 21               	dc.b $46, $E, $1, $C9, $21
0000AE96 4606 01D5 41               	dc.b $46, $6, $1, $D5, $41
0000AE9B 4E08 01DB 09               	dc.b $4E, $8, $1, $DB, $9
0000AEA0 5604 01DE 11               	dc.b $56, $4, $1, $DE, $11
0000AEA5 0B                         DATAGKI0HYDQBXP_2: dc.b $B
0000AEA6 F20F 0175 01               	dc.b $F2, $F, $1, $75, $1
0000AEAB F20F 0185 21               	dc.b $F2, $F, $1, $85, $21
0000AEB0 F207 0195 41               	dc.b $F2, $7, $1, $95, $41
0000AEB5 120F 019D 01               	dc.b $12, $F, $1, $9D, $1
0000AEBA 120F 01AD 21               	dc.b $12, $F, $1, $AD, $21
0000AEBF 1207 01BD 41               	dc.b $12, $7, $1, $BD, $41
0000AEC4 320C 01C5 01               	dc.b $32, $C, $1, $C5, $1
0000AEC9 320E 01C9 21               	dc.b $32, $E, $1, $C9, $21
0000AECE 3206 01D5 41               	dc.b $32, $6, $1, $D5, $41
0000AED3 3A08 01DB 09               	dc.b $3A, $8, $1, $DB, $9
0000AED8 4204 01DE 11               	dc.b $42, $4, $1, $DE, $11
0000AEDD 0A                         DATAGKI0HYDQBXP_3: dc.b $A
0000AEDE FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000AEE3 F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000AEE8 FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000AEED 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000AEF2 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000AEF7 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000AEFC 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000AF01 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000AF06 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000AF0B 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000AF10 10                         DATAGKI0HYDQBXP_4: dc.b $10
0000AF11 F80F 01E0 09               	dc.b $F8, $F, $1, $E0, $9
0000AF16 F807 01F0 29               	dc.b $F8, $7, $1, $F0, $29
0000AF1B 0003 01F8 01               	dc.b $0, $3, $1, $F8, $1
0000AF20 0003 01FC 39               	dc.b $0, $3, $1, $FC, $39
0000AF25 1001 0200 F9               	dc.b $10, $1, $2, $0, $F9
0000AF2A 180D 0202 09               	dc.b $18, $D, $2, $2, $9
0000AF2F 1807 020A 29               	dc.b $18, $7, $2, $A, $29
0000AF34 1803 0212 41               	dc.b $18, $3, $2, $12, $41
0000AF39 2001 0216 01               	dc.b $20, $1, $2, $16, $1
0000AF3E 2003 0218 39               	dc.b $20, $3, $2, $18, $39
0000AF43 2808 021C 11               	dc.b $28, $8, $2, $1C, $11
0000AF48 3007 021F 19               	dc.b $30, $7, $2, $1F, $19
0000AF4D 3801 0227 11               	dc.b $38, $1, $2, $27, $11
0000AF52 3806 0229 29               	dc.b $38, $6, $2, $29, $29
0000AF57 3801 022F 41               	dc.b $38, $1, $2, $2F, $41
0000AF5C 4001 0231 39               	dc.b $40, $1, $2, $31, $39
0000AF61 0B                         DATAGKI0HYDQBXP_5: dc.b $B
0000AF62 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000AF67 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000AF6C 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000AF71 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000AF76 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000AF7B 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000AF80 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000AF85 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000AF8A 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000AF8F 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000AF94 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000AF99 0F                         DATAGKI0HYDQBXP_6: dc.b $F
0000AF9A EC0F 004E E2               	dc.b $EC, $F, $0, $4E, $E2
0000AF9F 0C0F 005E E2               	dc.b $C, $F, $0, $5E, $E2
0000AFA4 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000AFA9 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000AFAE 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000AFB3 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000AFB8 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000AFBD 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000AFC2 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000AFC7 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000AFCC 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000AFD1 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000AFD6 EC07 010E 62               	dc.b $EC, $7, $1, $E, $62
0000AFDB 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000AFE0 2C07 011E 62               	dc.b $2C, $7, $1, $1E, $62
0000AFE5 0F                         DATAGKI0HYDQBXP_7: dc.b $F
0000AFE6 EC0F 0233 E2               	dc.b $EC, $F, $2, $33, $E2
0000AFEB 0C0F 0243 E2               	dc.b $C, $F, $2, $43, $E2
0000AFF0 2C0F 0253 E2               	dc.b $2C, $F, $2, $53, $E2
0000AFF5 EC0F 0263 02               	dc.b $EC, $F, $2, $63, $2
0000AFFA 0C0F 0273 02               	dc.b $C, $F, $2, $73, $2
0000AFFF 2C0F 0283 02               	dc.b $2C, $F, $2, $83, $2
0000B004 EC0F 0293 22               	dc.b $EC, $F, $2, $93, $22
0000B009 0C0F 02A3 22               	dc.b $C, $F, $2, $A3, $22
0000B00E 2C0F 02B3 22               	dc.b $2C, $F, $2, $B3, $22
0000B013 EC0F 02C3 42               	dc.b $EC, $F, $2, $C3, $42
0000B018 0C0F 02D3 42               	dc.b $C, $F, $2, $D3, $42
0000B01D 2C0F 02E3 42               	dc.b $2C, $F, $2, $E3, $42
0000B022 EC07 02F3 62               	dc.b $EC, $7, $2, $F3, $62
0000B027 0C07 02FB 62               	dc.b $C, $7, $2, $FB, $62
0000B02C 2C07 0303 62               	dc.b $2C, $7, $3, $3, $62
0000B032 00                         	even
0000B032 00                         	even
0000B032                            
0000B032                            ; ===========================================================================
0000B032                            ; ---------------------------------------------------------------------------
0000B032                            ; Object 2B - Chopper enemy (GHZ)
0000B032                            ; ---------------------------------------------------------------------------
0000B032                            
0000B032                            Obj2B:					; XREF: Obj_Index
0000B032 7000                       		moveq	#0,d0
0000B034 1028 0024                  		move.b	$24(a0),d0
0000B038 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000B03C 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000B040 6000 0000                  		bra.w	MarkObjGone
0000B044                            ; ===========================================================================
0000B044 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000B046 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000B048                            ; ===========================================================================
0000B048                            
0000B048                            Obj2B_Main:				; XREF: Obj2B_Index
0000B048 5428 0024                  		addq.b	#2,$24(a0)
0000B04C 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B054 317C 047B 0002             		move.w	#$47B,2(a0)
0000B05A 117C 0004 0001             		move.b	#4,1(a0)
0000B060 117C 0004 0018             		move.b	#4,$18(a0)
0000B066 117C 0009 0020             		move.b	#9,$20(a0)
0000B06C 117C 0010 0019             		move.b	#$10,$19(a0)
0000B072 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B078 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B07E                            
0000B07E                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B07E 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B084 6100 FC3E                  		bsr.w	AnimateSprite
0000B088 6100 0000                  		bsr.w	SpeedToPos
0000B08C 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B092 3028 0030                  		move.w	$30(a0),d0
0000B096 B068 000C                  		cmp.w	$C(a0),d0
0000B09A 6400                       		bcc.s	Obj2B_ChgAni
0000B09C 3140 000C                  		move.w	d0,$C(a0)
0000B0A0 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B0A6                            
0000B0A6                            Obj2B_ChgAni:
0000B0A6 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B0AC 0440 00C0                  		subi.w	#$C0,d0
0000B0B0 B068 000C                  		cmp.w	$C(a0),d0
0000B0B4 6400                       		bcc.s	locret_ABB6
0000B0B6 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B0BC 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B0C0 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B0C2 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B0C8                            
0000B0C8                            locret_ABB6:
0000B0C8 4E75                       		rts	
0000B0CA                            ; ===========================================================================
0000B0CA                            Ani_obj2B:
0000B0CA                            	include "_anim\obj2B.asm"
0000B0CA                            ; ---------------------------------------------------------------------------
0000B0CA                            ; Animation script - Chopper enemy
0000B0CA                            ; ---------------------------------------------------------------------------
0000B0CA 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B0CC 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B0CE 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B0D0 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B0D4 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B0D8 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B0DC 00                         		even
0000B0DC 00                         		even
0000B0DC                            
0000B0DC                            ; ---------------------------------------------------------------------------
0000B0DC                            ; Sprite mappings - Chopper enemy (GHZ)
0000B0DC                            ; ---------------------------------------------------------------------------
0000B0DC                            Map_obj2B:
0000B0DC                            	include "_maps\obj2B.asm"
0000B0DC                            ; ---------------------------------------------------------------------------
0000B0DC                            ; Sprite mappings - Chopper enemy (GHZ)
0000B0DC                            ; ---------------------------------------------------------------------------
0000B0DC 0000                       		dc.w byte_ABCE-Map_obj2B
0000B0DE 0000                       		dc.w byte_ABD4-Map_obj2B
0000B0E0 01                         byte_ABCE:	dc.b 1
0000B0E1 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000B0E6 01                         byte_ABD4:	dc.b 1
0000B0E7 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000B0EC                            		even
0000B0EC                            		even
0000B0EC                            
0000B0EC                            ; ===========================================================================
0000B0EC                            ; ---------------------------------------------------------------------------
0000B0EC                            ; Object 2C - Jaws enemy (LZ)
0000B0EC                            ; ---------------------------------------------------------------------------
0000B0EC                            
0000B0EC                            Obj2C:					; XREF: Obj_Index
0000B0EC 7000                       		moveq	#0,d0
0000B0EE 1028 0024                  		move.b	$24(a0),d0
0000B0F2 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B0F6 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B0FA                            ; ===========================================================================
0000B0FA 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B0FC 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B0FE                            ; ===========================================================================
0000B0FE                            
0000B0FE                            Obj2C_Main:				; XREF: Obj2C_Index
0000B0FE 5428 0024                  		addq.b	#2,$24(a0)
0000B102 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B10A 317C 2486 0002             		move.w	#$2486,2(a0)
0000B110 0028 0004 0001             		ori.b	#4,1(a0)
0000B116 117C 000A 0020             		move.b	#$A,$20(a0)
0000B11C 117C 0004 0018             		move.b	#4,$18(a0)
0000B122 117C 0010 0019             		move.b	#$10,$19(a0)
0000B128 7000                       		moveq	#0,d0
0000B12A 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B12E ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B130 5340                       		subq.w	#1,d0
0000B132 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B136 3140 0032                  		move.w	d0,$32(a0)
0000B13A 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B140 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B146 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B148 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B14C                            
0000B14C                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B14C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B150 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B152 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B158 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B15C 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B162 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B168                            
0000B168                            Obj2C_Animate:
0000B168 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B16E 6100 FB54                  		bsr.w	AnimateSprite
0000B172 6100 0000                  		bsr.w	SpeedToPos
0000B176 6000 0000                  		bra.w	MarkObjGone
0000B17A                            ; ===========================================================================
0000B17A                            Ani_obj2C:
0000B17A                            	include "_anim\obj2C.asm"
0000B17A                            ; ---------------------------------------------------------------------------
0000B17A                            ; Animation script - Jaws enemy
0000B17A                            ; ---------------------------------------------------------------------------
0000B17A 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B17C 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B182                            		even
0000B182                            		even
0000B182                            
0000B182                            ; ---------------------------------------------------------------------------
0000B182                            ; Sprite mappings - Jaws enemy (LZ)
0000B182                            ; ---------------------------------------------------------------------------
0000B182                            Map_obj2C:
0000B182                            	include "_maps\obj2C.asm"
0000B182                            ; ---------------------------------------------------------------------------
0000B182                            ; Sprite mappings - Jaws enemy (LZ)
0000B182                            ; ---------------------------------------------------------------------------
0000B182 0000                       		dc.w byte_AC78-Map_obj2C
0000B184 0000                       		dc.w byte_AC83-Map_obj2C
0000B186 0000                       		dc.w byte_AC8E-Map_obj2C
0000B188 0000                       		dc.w byte_AC99-Map_obj2C
0000B18A 02                         byte_AC78:	dc.b 2
0000B18B F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B190 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B195 02                         byte_AC83:	dc.b 2
0000B196 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B19B F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B1A0 02                         byte_AC8E:	dc.b 2
0000B1A1 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B1A6 F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B1AB 02                         byte_AC99:	dc.b 2
0000B1AC F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B1B1 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B1B6                            		even
0000B1B6                            		even
0000B1B6                            
0000B1B6                            ; ===========================================================================
0000B1B6                            ; ---------------------------------------------------------------------------
0000B1B6                            ; Object 2D - Burrobot enemy (LZ)
0000B1B6                            ; ---------------------------------------------------------------------------
0000B1B6                            
0000B1B6                            Obj2D:					; XREF: Obj_Index
0000B1B6 7000                       		moveq	#0,d0
0000B1B8 1028 0024                  		move.b	$24(a0),d0
0000B1BC 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B1C0 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B1C4                            ; ===========================================================================
0000B1C4 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B1C6 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B1C8                            ; ===========================================================================
0000B1C8                            
0000B1C8                            Obj2D_Main:				; XREF: Obj2D_Index
0000B1C8 5428 0024                  		addq.b	#2,$24(a0)
0000B1CC 117C 0013 0016             		move.b	#$13,$16(a0)
0000B1D2 117C 0008 0017             		move.b	#8,$17(a0)
0000B1D8 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B1E0 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B1E6 0028 0004 0001             		ori.b	#4,1(a0)
0000B1EC 117C 0004 0018             		move.b	#4,$18(a0)
0000B1F2 117C 0005 0020             		move.b	#5,$20(a0)
0000B1F8 117C 000C 0019             		move.b	#$C,$19(a0)
0000B1FE 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B202 117C 0002 001C             		move.b	#2,$1C(a0)
0000B208                            
0000B208                            Obj2D_Action:				; XREF: Obj2D_Index
0000B208 7000                       		moveq	#0,d0
0000B20A 1028 0025                  		move.b	$25(a0),d0
0000B20E 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B212 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B216 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B21C 6100 FAA6                  		bsr.w	AnimateSprite
0000B220 6000 0000                  		bra.w	MarkObjGone
0000B224                            ; ===========================================================================
0000B224 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B226 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B228 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B22A 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B22C                            ; ===========================================================================
0000B22C                            
0000B22C                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B22C 5368 0030                  		subq.w	#1,$30(a0)
0000B230 6A00                       		bpl.s	locret_AD42
0000B232 5428 0025                  		addq.b	#2,$25(a0)
0000B236 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B23C 317C 0080 0010             		move.w	#$80,$10(a0)
0000B242 117C 0001 001C             		move.b	#1,$1C(a0)
0000B248 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B24E 6700                       		beq.s	locret_AD42
0000B250 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B254                            
0000B254                            locret_AD42:
0000B254 4E75                       		rts	
0000B256                            ; ===========================================================================
0000B256                            
0000B256                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B256 5368 0030                  		subq.w	#1,$30(a0)
0000B25A 6B00                       		bmi.s	loc_AD84
0000B25C 6100 0000                  		bsr.w	SpeedToPos
0000B260 0868 0000 0032             		bchg	#0,$32(a0)
0000B266 6600                       		bne.s	loc_AD78
0000B268 3628 0008                  		move.w	8(a0),d3
0000B26C 0643 000C                  		addi.w	#$C,d3
0000B270 0828 0000 0022             		btst	#0,$22(a0)
0000B276 6600                       		bne.s	loc_AD6A
0000B278 0443 0018                  		subi.w	#$18,d3
0000B27C                            
0000B27C                            loc_AD6A:
0000B27C 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B282 0C41 000C                  		cmpi.w	#$C,d1
0000B286 6C00                       		bge.s	loc_AD84
0000B288 4E75                       		rts	
0000B28A                            ; ===========================================================================
0000B28A                            
0000B28A                            loc_AD78:				; XREF: Obj2D_Move
0000B28A 4EB9 0000 0000             		jsr	ObjHitFloor
0000B290 D368 000C                  		add.w	d1,$C(a0)
0000B294 4E75                       		rts	
0000B296                            ; ===========================================================================
0000B296                            
0000B296                            loc_AD84:				; XREF: Obj2D_Move
0000B296 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B29C 6700                       		beq.s	loc_ADA4
0000B29E 5528 0025                  		subq.b	#2,$25(a0)
0000B2A2 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B2A8 317C 0000 0010             		move.w	#0,$10(a0)
0000B2AE 117C 0000 001C             		move.b	#0,$1C(a0)
0000B2B4 4E75                       		rts	
0000B2B6                            ; ===========================================================================
0000B2B6                            
0000B2B6                            loc_ADA4:
0000B2B6 5428 0025                  		addq.b	#2,$25(a0)
0000B2BA 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B2C0 117C 0002 001C             		move.b	#2,$1C(a0)
0000B2C6 4E75                       		rts	
0000B2C8                            ; ===========================================================================
0000B2C8                            
0000B2C8                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B2C8 6100 0000                  		bsr.w	SpeedToPos
0000B2CC 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B2D2 6B00                       		bmi.s	locret_ADF0
0000B2D4 117C 0003 001C             		move.b	#3,$1C(a0)
0000B2DA 4EB9 0000 0000             		jsr	ObjHitFloor
0000B2E0 4A41                       		tst.w	d1
0000B2E2 6A00                       		bpl.s	locret_ADF0
0000B2E4 D368 000C                  		add.w	d1,$C(a0)
0000B2E8 317C 0000 0012             		move.w	#0,$12(a0)
0000B2EE 117C 0001 001C             		move.b	#1,$1C(a0)
0000B2F4 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B2FA 5528 0025                  		subq.b	#2,$25(a0)
0000B2FE 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B302                            
0000B302                            locret_ADF0:
0000B302 4E75                       		rts	
0000B304                            ; ===========================================================================
0000B304                            
0000B304                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B304 343C 0060                  		move.w	#$60,d2
0000B308 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B30C 6400                       		bcc.s	locret_AE20
0000B30E 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B312 9068 000C                  		sub.w	$C(a0),d0
0000B316 6400                       		bcc.s	locret_AE20
0000B318 0C40 FF80                  		cmpi.w	#-$80,d0
0000B31C 6500                       		bcs.s	locret_AE20
0000B31E 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B322 6600                       		bne.s	locret_AE20
0000B324 5528 0025                  		subq.b	#2,$25(a0)
0000B328 3141 0010                  		move.w	d1,$10(a0)
0000B32C 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B332                            
0000B332                            locret_AE20:
0000B332 4E75                       		rts	
0000B334                            
0000B334                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B334                            
0000B334                            
0000B334                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B334 323C 0080                  		move.w	#$80,d1
0000B338 08E8 0000 0022             		bset	#0,$22(a0)
0000B33E 3038 D008                  		move.w	($FFFFD008).w,d0
0000B342 9068 0008                  		sub.w	8(a0),d0
0000B346 6400                       		bcc.s	loc_AE40
0000B348 4440                       		neg.w	d0
0000B34A 4441                       		neg.w	d1
0000B34C 08A8 0000 0022             		bclr	#0,$22(a0)
0000B352                            
0000B352                            loc_AE40:
0000B352 B042                       		cmp.w	d2,d0
0000B354 4E75                       		rts	
0000B356                            ; End of function Obj2D_ChkSonic2
0000B356                            
0000B356                            ; ===========================================================================
0000B356                            Ani_obj2D:
0000B356                            	include "_anim\obj2D.asm"
0000B356                            ; ---------------------------------------------------------------------------
0000B356                            ; Animation script - Burrobot enemy but craig
0000B356                            ; ---------------------------------------------------------------------------
0000B356 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B358 0000                       		dc.w byte_AE50-Ani_obj2D
0000B35A 0000                       		dc.w byte_AE54-Ani_obj2D
0000B35C 0000                       		dc.w byte_AE58-Ani_obj2D
0000B35E 0300 FF                    byte_AE4C:	dc.b 3,	0, $FF ; wait
0000B361 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF ; waddle
0000B365 0100 0102 0304 0506 0708+  byte_AE54:	dc.b 1,	0, 1, 2, 3, 4, 5, 6, 7, 8, 3, 9, $A, $FF ; speen
0000B373 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B376                            		even
0000B376                            		even
0000B376                            
0000B376                            ; ---------------------------------------------------------------------------
0000B376                            ; Sprite mappings - Burrobot enemy (LZ)
0000B376                            ; ---------------------------------------------------------------------------
0000B376                            Map_obj2D:
0000B376                            	include "_maps\obj2D.asm"
0000B376                            Map_e3a3:
0000B376 0000                       Map_e3a3_0: 	dc.w Map_e3a3_16-Map_e3a3
0000B378 0000                       Map_e3a3_2: 	dc.w Map_e3a3_21-Map_e3a3
0000B37A 0000                       Map_e3a3_4: 	dc.w Map_e3a3_2C-Map_e3a3
0000B37C 0000                       Map_e3a3_6: 	dc.w Map_e3a3_37-Map_e3a3
0000B37E 0000                       Map_e3a3_8: 	dc.w Map_e3a3_42-Map_e3a3
0000B380 0000                       Map_e3a3_A: 	dc.w Map_e3a3_4D-Map_e3a3
0000B382 0000                       Map_e3a3_C: 	dc.w Map_e3a3_58-Map_e3a3
0000B384 0000                       Map_e3a3_E: 	dc.w Map_e3a3_63-Map_e3a3
0000B386 0000                       Map_e3a3_10: 	dc.w Map_e3a3_6E-Map_e3a3
0000B388 0000                       Map_e3a3_12: 	dc.w Map_e3a3_79-Map_e3a3
0000B38A 0000                       Map_e3a3_14: 	dc.w Map_e3a3_84-Map_e3a3
0000B38C 02                         Map_e3a3_16: 	dc.b $2
0000B38D EC0B 0800 F4               	dc.b $EC, $B, $8, $0, $F4
0000B392 0C08 080C F4               	dc.b $C, $8, $8, $C, $F4
0000B397 02                         Map_e3a3_21: 	dc.b $2
0000B398 EC07 080F F8               	dc.b $EC, $7, $8, $F, $F8
0000B39D 0C04 0817 F8               	dc.b $C, $4, $8, $17, $F8
0000B3A2 02                         Map_e3a3_2C: 	dc.b $2
0000B3A3 EC07 0819 F8               	dc.b $EC, $7, $8, $19, $F8
0000B3A8 0C04 0821 F8               	dc.b $C, $4, $8, $21, $F8
0000B3AD 02                         Map_e3a3_37: 	dc.b $2
0000B3AE EC02 0823 FC               	dc.b $EC, $2, $8, $23, $FC
0000B3B3 FC02 1823 FC               	dc.b $FC, $2, $18, $23, $FC
0000B3B8 02                         Map_e3a3_42: 	dc.b $2
0000B3B9 EC06 0826 F8               	dc.b $EC, $6, $8, $26, $F8
0000B3BE FC06 1826 F8               	dc.b $FC, $6, $18, $26, $F8
0000B3C3 02                         Map_e3a3_4D: 	dc.b $2
0000B3C4 EC06 082C F8               	dc.b $EC, $6, $8, $2C, $F8
0000B3C9 FC06 182C F8               	dc.b $FC, $6, $18, $2C, $F8
0000B3CE 02                         Map_e3a3_58: 	dc.b $2
0000B3CF EC0A 0832 F4               	dc.b $EC, $A, $8, $32, $F4
0000B3D4 FC0A 1832 F4               	dc.b $FC, $A, $18, $32, $F4
0000B3D9 02                         Map_e3a3_63: 	dc.b $2
0000B3DA EC06 002C F8               	dc.b $EC, $6, $0, $2C, $F8
0000B3DF FC06 102C F8               	dc.b $FC, $6, $10, $2C, $F8
0000B3E4 02                         Map_e3a3_6E: 	dc.b $2
0000B3E5 EC06 0026 F8               	dc.b $EC, $6, $0, $26, $F8
0000B3EA FC06 1026 F8               	dc.b $FC, $6, $10, $26, $F8
0000B3EF 02                         Map_e3a3_79: 	dc.b $2
0000B3F0 EC07 0019 F8               	dc.b $EC, $7, $0, $19, $F8
0000B3F5 0C04 0021 F8               	dc.b $C, $4, $0, $21, $F8
0000B3FA 02                         Map_e3a3_84: 	dc.b $2
0000B3FB EC07 000F F8               	dc.b $EC, $7, $0, $F, $F8
0000B400 0C04 0017 F8               	dc.b $C, $4, $0, $17, $F8
0000B406 00                         	even
0000B406 00                         	even
0000B406                            
0000B406                            ; ===========================================================================
0000B406                            ; ---------------------------------------------------------------------------
0000B406                            ; Object 2F - large moving platforms (MZ)
0000B406                            ; ---------------------------------------------------------------------------
0000B406                            
0000B406                            Obj2F:					; XREF: Obj_Index
0000B406 7000                       		moveq	#0,d0
0000B408 1028 0024                  		move.b	$24(a0),d0
0000B40C 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B410 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B414                            ; ===========================================================================
0000B414 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B416 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B418                            
0000B418 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B41A 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B41C 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B41E 0140                       		dc.b 1,	$40
0000B420 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B422 0220                       		dc.b 2,	$20
0000B424                            ; ===========================================================================
0000B424                            
0000B424                            Obj2F_Main:				; XREF: Obj2F_Index
0000B424 5428 0024                  		addq.b	#2,$24(a0)
0000B428 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B430 317C C000 0002             		move.w	#$C000,2(a0)
0000B436 117C 0004 0001             		move.b	#4,1(a0)
0000B43C 117C 0005 0018             		move.b	#5,$18(a0)
0000B442 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B448 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B44E 7000                       		moveq	#0,d0
0000B450 1028 0028                  		move.b	$28(a0),d0
0000B454 E448                       		lsr.w	#2,d0
0000B456 0240 001C                  		andi.w	#$1C,d0
0000B45A 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B45E 3019                       		move.w	(a1)+,d0
0000B460 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B464 214A 0030                  		move.l	a2,$30(a0)
0000B468 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B46C 1151 0019                  		move.b	(a1),$19(a0)
0000B470 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B476 117C 0040 0016             		move.b	#$40,$16(a0)
0000B47C 08E8 0004 0001             		bset	#4,1(a0)
0000B482                            
0000B482                            Obj2F_Action:				; XREF: Obj2F_Index
0000B482 6100 0000                  		bsr.w	Obj2F_Types
0000B486 4A28 0025                  		tst.b	$25(a0)
0000B48A 6700                       		beq.s	Obj2F_Solid
0000B48C 7200                       		moveq	#0,d1
0000B48E 1228 0019                  		move.b	$19(a0),d1
0000B492 0641 000B                  		addi.w	#$B,d1
0000B496 6100 C5FC                  		bsr.w	ExitPlatform
0000B49A 0829 0003 0022             		btst	#3,$22(a1)
0000B4A0 6600 0000                  		bne.w	Obj2F_Slope
0000B4A4 4228 0025                  		clr.b	$25(a0)
0000B4A8 6000                       		bra.s	Obj2F_Display
0000B4AA                            ; ===========================================================================
0000B4AA                            
0000B4AA                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B4AA 7200                       		moveq	#0,d1
0000B4AC 1228 0019                  		move.b	$19(a0),d1
0000B4B0 0641 000B                  		addi.w	#$B,d1
0000B4B4 2468 0030                  		movea.l	$30(a0),a2
0000B4B8 3428 0008                  		move.w	8(a0),d2
0000B4BC 6100 D534                  		bsr.w	SlopeObject2
0000B4C0 6000                       		bra.s	Obj2F_Display
0000B4C2                            ; ===========================================================================
0000B4C2                            
0000B4C2                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B4C2 7200                       		moveq	#0,d1
0000B4C4 1228 0019                  		move.b	$19(a0),d1
0000B4C8 0641 000B                  		addi.w	#$B,d1
0000B4CC 343C 0020                  		move.w	#$20,d2
0000B4D0 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B4D6 6600                       		bne.s	loc_AF8E
0000B4D8 343C 0030                  		move.w	#$30,d2
0000B4DC                            
0000B4DC                            loc_AF8E:
0000B4DC 2468 0030                  		movea.l	$30(a0),a2
0000B4E0 6100 0000                  		bsr.w	SolidObject2F
0000B4E4                            
0000B4E4                            Obj2F_Display:				; XREF: Obj2F_Action
0000B4E4 6100 0000                  		bsr.w	DisplaySprite
0000B4E8 6000 0000                  		bra.w	Obj2F_ChkDel
0000B4EC                            
0000B4EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B4EC                            
0000B4EC                            
0000B4EC                            Obj2F_Types:				; XREF: Obj2F_Action
0000B4EC 7000                       		moveq	#0,d0
0000B4EE 1028 0028                  		move.b	$28(a0),d0
0000B4F2 0240 0007                  		andi.w	#7,d0
0000B4F6 D040                       		add.w	d0,d0
0000B4F8 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B4FC 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B500                            ; End of function Obj2F_Types
0000B500                            
0000B500                            ; ===========================================================================
0000B500 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B502 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B504 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B506 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B508 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B50A 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B50C                            ; ===========================================================================
0000B50C                            
0000B50C                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B50C 4E75                       		rts			; type 00 platform doesn't move
0000B50E                            ; ===========================================================================
0000B50E                            
0000B50E                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B50E 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B512 323C 0020                  		move.w	#$20,d1
0000B516 6000                       		bra.s	Obj2F_Move
0000B518                            ; ===========================================================================
0000B518                            
0000B518                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B518 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B51C 323C 0030                  		move.w	#$30,d1
0000B520 6000                       		bra.s	Obj2F_Move
0000B522                            ; ===========================================================================
0000B522                            
0000B522                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B522 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B526 323C 0040                  		move.w	#$40,d1
0000B52A 6000                       		bra.s	Obj2F_Move
0000B52C                            ; ===========================================================================
0000B52C                            
0000B52C                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B52C 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B530 323C 0060                  		move.w	#$60,d1
0000B534                            
0000B534                            Obj2F_Move:
0000B534 0828 0003 0028             		btst	#3,$28(a0)
0000B53A 6700                       		beq.s	loc_AFF2
0000B53C 4440                       		neg.w	d0
0000B53E D041                       		add.w	d1,d0
0000B540                            
0000B540                            loc_AFF2:
0000B540 3228 002C                  		move.w	$2C(a0),d1
0000B544 9240                       		sub.w	d0,d1
0000B546 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B54A 4E75                       		rts	
0000B54C                            ; ===========================================================================
0000B54C                            
0000B54C                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B54C 1028 0034                  		move.b	$34(a0),d0
0000B550 4A28 0025                  		tst.b	$25(a0)
0000B554 6600                       		bne.s	loc_B010
0000B556 5500                       		subq.b	#2,d0
0000B558 6400                       		bcc.s	loc_B01C
0000B55A 7000                       		moveq	#0,d0
0000B55C 6000                       		bra.s	loc_B01C
0000B55E                            ; ===========================================================================
0000B55E                            
0000B55E                            loc_B010:
0000B55E 5800                       		addq.b	#4,d0
0000B560 0C00 0040                  		cmpi.b	#$40,d0
0000B564 6500                       		bcs.s	loc_B01C
0000B566 103C 0040                  		move.b	#$40,d0
0000B56A                            
0000B56A                            loc_B01C:
0000B56A 1140 0034                  		move.b	d0,$34(a0)
0000B56E 4EB9 0000 2C60             		jsr	(CalcSine).l
0000B574 E848                       		lsr.w	#4,d0
0000B576 3200                       		move.w	d0,d1
0000B578 D068 002C                  		add.w	$2C(a0),d0
0000B57C 3140 000C                  		move.w	d0,$C(a0)
0000B580 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B586 6600                       		bne.s	loc_B07A
0000B588 4A28 0035                  		tst.b	$35(a0)
0000B58C 6600                       		bne.s	loc_B07A
0000B58E 117C 0001 0035             		move.b	#1,$35(a0)
0000B594 6100 0000                  		bsr.w	SingleObjLoad2
0000B598 6600                       		bne.s	loc_B07A
0000B59A 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B59E 3368 0008 0008             		move.w	8(a0),8(a1)
0000B5A4 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B5AA 5069 002C                  		addq.w	#8,$2C(a1)
0000B5AE 5769 002C                  		subq.w	#3,$2C(a1)
0000B5B2 0469 0040 0008             		subi.w	#$40,8(a1)
0000B5B8 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B5BE 2348 0038                  		move.l	a0,$38(a1)
0000B5C2 2448                       		movea.l	a0,a2
0000B5C4 6100                       		bsr.s	sub_B09C
0000B5C6                            
0000B5C6                            loc_B07A:
0000B5C6 7400                       		moveq	#0,d2
0000B5C8 45E8 0036                  		lea	$36(a0),a2
0000B5CC 141A                       		move.b	(a2)+,d2
0000B5CE 5302                       		subq.b	#1,d2
0000B5D0 6500                       		bcs.s	locret_B09A
0000B5D2                            
0000B5D2                            loc_B086:
0000B5D2 7000                       		moveq	#0,d0
0000B5D4 101A                       		move.b	(a2)+,d0
0000B5D6 ED48                       		lsl.w	#6,d0
0000B5D8 0640 D000                  		addi.w	#-$3000,d0
0000B5DC 3240                       		movea.w	d0,a1
0000B5DE 3341 003C                  		move.w	d1,$3C(a1)
0000B5E2 51CA FFEE                  		dbf	d2,loc_B086
0000B5E6                            
0000B5E6                            locret_B09A:
0000B5E6 4E75                       		rts	
0000B5E8                            
0000B5E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B5E8                            
0000B5E8                            
0000B5E8                            sub_B09C:
0000B5E8 45EA 0036                  		lea	$36(a2),a2
0000B5EC 7000                       		moveq	#0,d0
0000B5EE 1012                       		move.b	(a2),d0
0000B5F0 5212                       		addq.b	#1,(a2)
0000B5F2 45F2 0001                  		lea	1(a2,d0.w),a2
0000B5F6 3009                       		move.w	a1,d0
0000B5F8 0440 D000                  		subi.w	#-$3000,d0
0000B5FC EC48                       		lsr.w	#6,d0
0000B5FE 0240 007F                  		andi.w	#$7F,d0
0000B602 1480                       		move.b	d0,(a2)
0000B604 4E75                       		rts	
0000B606                            ; End of function sub_B09C
0000B606                            
0000B606                            ; ===========================================================================
0000B606                            
0000B606                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B606 4A28 0035                  		tst.b	$35(a0)
0000B60A 6700                       		beq.s	loc_B0C6
0000B60C 4A28 0001                  		tst.b	1(a0)
0000B610 6A00                       		bpl.s	Obj2F_DelFlames
0000B612                            
0000B612                            loc_B0C6:
0000B612 3028 002A                  		move.w	$2A(a0),d0
0000B616 0240 FF80                  		andi.w	#$FF80,d0
0000B61A 3238 F700                  		move.w	($FFFFF700).w,d1
0000B61E 0441 0080                  		subi.w	#$80,d1
0000B622 0241 FF80                  		andi.w	#$FF80,d1
0000B626 9041                       		sub.w	d1,d0
0000B628 0C40 0280                  		cmpi.w	#$280,d0
0000B62C 6200 0000                  		bhi.w	DeleteObject
0000B630 4E75                       		rts	
0000B632                            ; ===========================================================================
0000B632                            
0000B632                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B632 7400                       		moveq	#0,d2
0000B634                            
0000B634                            loc_B0E8:
0000B634 45E8 0036                  		lea	$36(a0),a2
0000B638 1412                       		move.b	(a2),d2
0000B63A 421A                       		clr.b	(a2)+
0000B63C 5302                       		subq.b	#1,d2
0000B63E 6500                       		bcs.s	locret_B116
0000B640                            
0000B640                            loc_B0F4:
0000B640 7000                       		moveq	#0,d0
0000B642 1012                       		move.b	(a2),d0
0000B644 421A                       		clr.b	(a2)+
0000B646 ED48                       		lsl.w	#6,d0
0000B648 0640 D000                  		addi.w	#-$3000,d0
0000B64C 3240                       		movea.w	d0,a1
0000B64E 6100 0000                  		bsr.w	DeleteObject2
0000B652 51CA FFEC                  		dbf	d2,loc_B0F4
0000B656 117C 0000 0035             		move.b	#0,$35(a0)
0000B65C 117C 0000 0034             		move.b	#0,$34(a0)
0000B662                            
0000B662                            locret_B116:
0000B662 4E75                       		rts	
0000B664                            ; ===========================================================================
0000B664                            ; ---------------------------------------------------------------------------
0000B664                            ; Collision data for large moving platforms (MZ)
0000B664                            ; ---------------------------------------------------------------------------
0000B664                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000B6B0                            		even
0000B6B0                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000B6DC                            		even
0000B6DC                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000B728                            		even
0000B728                            ; ===========================================================================
0000B728                            ; ---------------------------------------------------------------------------
0000B728                            ; Object 35 - fireball that sits on the	floor (MZ)
0000B728                            ; (appears when	you walk on sinking platforms)
0000B728                            ; ---------------------------------------------------------------------------
0000B728                            
0000B728                            Obj35:					; XREF: Obj_Index
0000B728 7000                       		moveq	#0,d0
0000B72A 1028 0024                  		move.b	$24(a0),d0
0000B72E 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000B732 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000B736                            ; ===========================================================================
0000B736 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000B738 0000                       		dc.w loc_B238-Obj35_Index
0000B73A 0000                       		dc.w Obj35_Move-Obj35_Index
0000B73C                            ; ===========================================================================
0000B73C                            
0000B73C                            Obj35_Main:				; XREF: Obj35_Index
0000B73C 5428 0024                  		addq.b	#2,$24(a0)
0000B740 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000B748 317C 0345 0002             		move.w	#$345,2(a0)
0000B74E 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B754 117C 0004 0001             		move.b	#4,1(a0)
0000B75A 117C 0001 0018             		move.b	#1,$18(a0)
0000B760 117C 008B 0020             		move.b	#$8B,$20(a0)
0000B766 117C 0008 0019             		move.b	#8,$19(a0)
0000B76C 303C 00C8                  		move.w	#$C8,d0
0000B770 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flame sound
0000B776 4A28 0028                  		tst.b	$28(a0)
0000B77A 6700                       		beq.s	loc_B238
0000B77C 5428 0024                  		addq.b	#2,$24(a0)
0000B780 6000 0000                  		bra.w	Obj35_Move
0000B784                            ; ===========================================================================
0000B784                            
0000B784                            loc_B238:				; XREF: Obj35_Index
0000B784 2268 0030                  		movea.l	$30(a0),a1
0000B788 3228 0008                  		move.w	8(a0),d1
0000B78C 9268 002A                  		sub.w	$2A(a0),d1
0000B790 0641 000C                  		addi.w	#$C,d1
0000B794 3001                       		move.w	d1,d0
0000B796 E248                       		lsr.w	#1,d0
0000B798 1031 0000                  		move.b	(a1,d0.w),d0
0000B79C 4440                       		neg.w	d0
0000B79E D068 002C                  		add.w	$2C(a0),d0
0000B7A2 3400                       		move.w	d0,d2
0000B7A4 D068 003C                  		add.w	$3C(a0),d0
0000B7A8 3140 000C                  		move.w	d0,$C(a0)
0000B7AC 0C41 0084                  		cmpi.w	#$84,d1
0000B7B0 6400                       		bcc.s	loc_B2B0
0000B7B2 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000B7BA 0C41 0080                  		cmpi.w	#$80,d1
0000B7BE 6400                       		bcc.s	loc_B2B0
0000B7C0 2028 0008                  		move.l	8(a0),d0
0000B7C4 0680 0008 0000             		addi.l	#$80000,d0
0000B7CA 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000B7D0 6600                       		bne.s	loc_B2B0
0000B7D2 6100 0000                  		bsr.w	SingleObjLoad2
0000B7D6 6600                       		bne.s	loc_B2B0
0000B7D8 12BC 0035                  		move.b	#$35,0(a1)
0000B7DC 3368 0008 0008             		move.w	8(a0),8(a1)
0000B7E2 3342 002C                  		move.w	d2,$2C(a1)
0000B7E6 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000B7EC 137C 0001 0028             		move.b	#1,$28(a1)
0000B7F2 2468 0038                  		movea.l	$38(a0),a2
0000B7F6 6100 FDF0                  		bsr.w	sub_B09C
0000B7FA                            
0000B7FA                            loc_B2B0:
0000B7FA 6000                       		bra.s	Obj35_Animate
0000B7FC                            ; ===========================================================================
0000B7FC                            
0000B7FC                            Obj35_Move:				; XREF: Obj35_Index
0000B7FC 3028 002C                  		move.w	$2C(a0),d0
0000B800 D068 003C                  		add.w	$3C(a0),d0
0000B804 3140 000C                  		move.w	d0,$C(a0)
0000B808                            
0000B808                            Obj35_Animate:				; XREF: loc_B238
0000B808 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000B80E 6100 F4B4                  		bsr.w	AnimateSprite
0000B812 6000 0000                  		bra.w	DisplaySprite
0000B816                            ; ===========================================================================
0000B816                            Ani_obj35:
0000B816                            	include "_anim\obj35.asm"
0000B816                            ; ---------------------------------------------------------------------------
0000B816                            ; Animation script - fireball that sits on the	floor (MZ)
0000B816                            ; ---------------------------------------------------------------------------
0000B816 0000                       		dc.w byte_B2CE-Ani_obj35
0000B818 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000B81E                            		even
0000B81E                            		even
0000B81E                            
0000B81E                            ; ---------------------------------------------------------------------------
0000B81E                            ; Sprite mappings - large moving platforms (MZ)
0000B81E                            ; ---------------------------------------------------------------------------
0000B81E                            Map_obj2F:
0000B81E                            	include "_maps\obj2F.asm"
0000B81E                            ; ---------------------------------------------------------------------------
0000B81E                            ; Sprite mappings - large moving platforms (MZ)
0000B81E                            ; ---------------------------------------------------------------------------
0000B81E 0000                       		dc.w byte_B2DA-Map_obj2F
0000B820 0000                       		dc.w byte_B31C-Map_obj2F
0000B822 0000                       		dc.w byte_B34F-Map_obj2F
0000B824 0D                         byte_B2DA:	dc.b $D
0000B825 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000B82A F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000B82F 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B834 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000B839 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000B83E F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B843 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000B848 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000B84D F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000B852 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B857 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000B85C D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000B861 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000B866 0A                         byte_B31C:	dc.b $A
0000B867 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000B86C F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000B871 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B876 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000B87B E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000B880 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B885 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000B88A E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000B88F C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000B894 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000B899 06                         byte_B34F:	dc.b 6
0000B89A D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000B89F F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B8A4 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000B8A9 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000B8AE F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B8B3 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000B8B8                            		even
0000B8B8                            		even
0000B8B8                            
0000B8B8                            ; ---------------------------------------------------------------------------
0000B8B8                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B8B8                            ; ---------------------------------------------------------------------------
0000B8B8                            Map_obj14:
0000B8B8                            	include "_maps\obj14.asm"
0000B8B8                            ; --------------------------------------------------------------------------------
0000B8B8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B8B8                            ; --------------------------------------------------------------------------------
0000B8B8                            
0000B8B8                            SME_C6wT7:	
0000B8B8 0000 0000                  		dc.w SME_C6wT7_C-SME_C6wT7, SME_C6wT7_12-SME_C6wT7	
0000B8BC 0000 0000                  		dc.w SME_C6wT7_18-SME_C6wT7, SME_C6wT7_23-SME_C6wT7	
0000B8C0 0000 0000                  		dc.w SME_C6wT7_29-SME_C6wT7, SME_C6wT7_2F-SME_C6wT7	
0000B8C4 01                         SME_C6wT7_C:	dc.b 1	
0000B8C5 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000B8CA 01                         SME_C6wT7_12:	dc.b 1	
0000B8CB E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000B8D0 02                         SME_C6wT7_18:	dc.b 2	
0000B8D1 EF06 0010 F8               		dc.b $EF, 6, 0, $10, $F8	
0000B8D6 E707 0016 08               		dc.b $E7, 7, 0, $16, 8	
0000B8DB 01                         SME_C6wT7_23:	dc.b 1	
0000B8DC F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000B8E1 01                         SME_C6wT7_29:	dc.b 1	
0000B8E2 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000B8E7 01                         SME_C6wT7_2F:	dc.b 1	
0000B8E8 F00B 001E E8               		dc.b $F0, $B, 0, $1E, $E8	
0000B8EE 00                         		even
0000B8EE 00                         		even
0000B8EE                            
0000B8EE                            ; ===========================================================================
0000B8EE                            ; ---------------------------------------------------------------------------
0000B8EE                            ; Object 30 - large green glassy blocks	(MZ)
0000B8EE                            ; ---------------------------------------------------------------------------
0000B8EE                            
0000B8EE                            Obj30:					; XREF: Obj_Index
0000B8EE 7000                       		moveq	#0,d0
0000B8F0 1028 0024                  		move.b	$24(a0),d0
0000B8F4 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000B8F8 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000B8FC 3028 0008                  		move.w	8(a0),d0
0000B900 0240 FF80                  		andi.w	#$FF80,d0
0000B904 3238 F700                  		move.w	($FFFFF700).w,d1
0000B908 0441 0080                  		subi.w	#$80,d1
0000B90C 0241 FF80                  		andi.w	#$FF80,d1
0000B910 9041                       		sub.w	d1,d0
0000B912 0C40 0280                  		cmpi.w	#$280,d0
0000B916 6200 0000                  		bhi.w	Obj30_Delete
0000B91A 6000 0000                  		bra.w	DisplaySprite
0000B91E                            ; ===========================================================================
0000B91E                            
0000B91E                            Obj30_Delete:
0000B91E 6000 0000                  		bra.w	DeleteObject
0000B922                            ; ===========================================================================
0000B922 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000B924 0000                       		dc.w Obj30_Block012-Obj30_Index
0000B926 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000B928 0000                       		dc.w Obj30_Block34-Obj30_Index
0000B92A 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000B92C                            
0000B92C 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000B92F 0400 01                    		dc.b 4,	0, 1
0000B932 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000B935 0800 01                    		dc.b 8,	0, 1
0000B938                            ; ===========================================================================
0000B938                            
0000B938                            Obj30_Main:				; XREF: Obj30_Index
0000B938 45F9 0000 B92C             		lea	(Obj30_Vars1).l,a2
0000B93E 7201                       		moveq	#1,d1
0000B940 117C 0048 0016             		move.b	#$48,$16(a0)
0000B946 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000B94C 6500                       		bcs.s	loc_B40C	; if yes, branch
0000B94E 45F9 0000 B932             		lea	(Obj30_Vars2).l,a2
0000B954 7201                       		moveq	#1,d1
0000B956 117C 0038 0016             		move.b	#$38,$16(a0)
0000B95C                            
0000B95C                            loc_B40C:
0000B95C 2248                       		movea.l	a0,a1
0000B95E 6000                       		bra.s	Obj30_Load	; load main object
0000B960                            ; ===========================================================================
0000B960                            
0000B960                            Obj30_Loop:
0000B960 6100 0000                  		bsr.w	SingleObjLoad2
0000B964 6600                       		bne.s	loc_B480
0000B966                            
0000B966                            Obj30_Load:				; XREF: Obj30_Main
0000B966 135A 0024                  		move.b	(a2)+,$24(a1)
0000B96A 12BC 0030                  		move.b	#$30,0(a1)
0000B96E 3368 0008 0008             		move.w	8(a0),8(a1)
0000B974 101A                       		move.b	(a2)+,d0
0000B976 4880                       		ext.w	d0
0000B978 D068 000C                  		add.w	$C(a0),d0
0000B97C 3340 000C                  		move.w	d0,$C(a1)
0000B980 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000B988 337C C38E 0002             		move.w	#$C38E,2(a1)
0000B98E 137C 0004 0001             		move.b	#4,1(a1)
0000B994 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000B99A 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000B9A0 137C 0020 0019             		move.b	#$20,$19(a1)
0000B9A6 137C 0004 0018             		move.b	#4,$18(a1)
0000B9AC 135A 001A                  		move.b	(a2)+,$1A(a1)
0000B9B0 2348 003C                  		move.l	a0,$3C(a1)
0000B9B4 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000B9B8                            
0000B9B8 137C 0010 0019             		move.b	#$10,$19(a1)
0000B9BE 137C 0003 0018             		move.b	#3,$18(a1)
0000B9C4 5029 0028                  		addq.b	#8,$28(a1)
0000B9C8 0229 000F 0028             		andi.b	#$F,$28(a1)
0000B9CE                            
0000B9CE                            loc_B480:
0000B9CE 317C 0090 0032             		move.w	#$90,$32(a0)
0000B9D4 08E8 0004 0001             		bset	#4,1(a0)
0000B9DA                            
0000B9DA                            Obj30_Block012:				; XREF: Obj30_Index
0000B9DA 6100 0000                  		bsr.w	Obj30_Types
0000B9DE 323C 002B                  		move.w	#$2B,d1
0000B9E2 343C 0048                  		move.w	#$48,d2
0000B9E6 363C 0049                  		move.w	#$49,d3
0000B9EA 3828 0008                  		move.w	8(a0),d4
0000B9EE 6000 0000                  		bra.w	SolidObject
0000B9F2                            ; ===========================================================================
0000B9F2                            
0000B9F2                            Obj30_Reflect012:			; XREF: Obj30_Index
0000B9F2 2268 003C                  		movea.l	$3C(a0),a1
0000B9F6 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B9FC 6000 0000                  		bra.w	Obj30_Types
0000BA00                            ; ===========================================================================
0000BA00                            
0000BA00                            Obj30_Block34:				; XREF: Obj30_Index
0000BA00 6100 0000                  		bsr.w	Obj30_Types
0000BA04 323C 002B                  		move.w	#$2B,d1
0000BA08 343C 0038                  		move.w	#$38,d2
0000BA0C 363C 0039                  		move.w	#$39,d3
0000BA10 3828 0008                  		move.w	8(a0),d4
0000BA14 6000 0000                  		bra.w	SolidObject
0000BA18                            ; ===========================================================================
0000BA18                            
0000BA18                            Obj30_Reflect34:			; XREF: Obj30_Index
0000BA18 2268 003C                  		movea.l	$3C(a0),a1
0000BA1C 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BA22 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000BA28 6000 0002                  		bra.w	*+4
0000BA2C                            
0000BA2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BA2C                            
0000BA2C                            
0000BA2C                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000BA2C 7000                       		moveq	#0,d0
0000BA2E 1028 0028                  		move.b	$28(a0),d0
0000BA32 0240 0007                  		andi.w	#7,d0
0000BA36 D040                       		add.w	d0,d0
0000BA38 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000BA3C 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000BA40                            ; End of function Obj30_Types
0000BA40                            
0000BA40                            ; ===========================================================================
0000BA40 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000BA42 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000BA44 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000BA46 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000BA48 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000BA4A                            ; ===========================================================================
0000BA4A                            
0000BA4A                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000BA4A 4E75                       		rts	
0000BA4C                            ; ===========================================================================
0000BA4C                            
0000BA4C                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000BA4C 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BA50 323C 0040                  		move.w	#$40,d1
0000BA54 6000                       		bra.s	loc_B514
0000BA56                            ; ===========================================================================
0000BA56                            
0000BA56                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000BA56 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BA5A 323C 0040                  		move.w	#$40,d1
0000BA5E 4440                       		neg.w	d0
0000BA60 D041                       		add.w	d1,d0
0000BA62                            
0000BA62                            loc_B514:				; XREF: Obj30_Type01
0000BA62 0828 0003 0028             		btst	#3,$28(a0)
0000BA68 6700                       		beq.s	loc_B526
0000BA6A 4440                       		neg.w	d0
0000BA6C D041                       		add.w	d1,d0
0000BA6E E208                       		lsr.b	#1,d0
0000BA70 0640 0020                  		addi.w	#$20,d0
0000BA74                            
0000BA74                            loc_B526:
0000BA74 6000 0000                  		bra.w	loc_B5EE
0000BA78                            ; ===========================================================================
0000BA78                            
0000BA78                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000BA78 0828 0003 0028             		btst	#3,$28(a0)
0000BA7E 6700                       		beq.s	loc_B53E
0000BA80 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BA84 0440 0010                  		subi.w	#$10,d0
0000BA88 6000 0000                  		bra.w	loc_B5EE
0000BA8C                            ; ===========================================================================
0000BA8C                            
0000BA8C                            loc_B53E:
0000BA8C 0828 0003 0022             		btst	#3,$22(a0)
0000BA92 6600                       		bne.s	loc_B54E
0000BA94 08A8 0000 0034             		bclr	#0,$34(a0)
0000BA9A 6000                       		bra.s	loc_B582
0000BA9C                            ; ===========================================================================
0000BA9C                            
0000BA9C                            loc_B54E:
0000BA9C 4A28 0034                  		tst.b	$34(a0)
0000BAA0 6600                       		bne.s	loc_B582
0000BAA2 117C 0001 0034             		move.b	#1,$34(a0)
0000BAA8 08E8 0000 0035             		bset	#0,$35(a0)
0000BAAE 6700                       		beq.s	loc_B582
0000BAB0 08E8 0007 0034             		bset	#7,$34(a0)
0000BAB6 317C 0010 0036             		move.w	#$10,$36(a0)
0000BABC 117C 000A 0038             		move.b	#$A,$38(a0)
0000BAC2 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000BAC8 6600                       		bne.s	loc_B582
0000BACA 317C 0040 0036             		move.w	#$40,$36(a0)
0000BAD0                            
0000BAD0                            loc_B582:
0000BAD0 4A28 0034                  		tst.b	$34(a0)
0000BAD4 6A00                       		bpl.s	loc_B5AA
0000BAD6 4A28 0038                  		tst.b	$38(a0)
0000BADA 6700                       		beq.s	loc_B594
0000BADC 5328 0038                  		subq.b	#1,$38(a0)
0000BAE0 6600                       		bne.s	loc_B5AA
0000BAE2                            
0000BAE2                            loc_B594:
0000BAE2 4A68 0032                  		tst.w	$32(a0)
0000BAE6 6700                       		beq.s	loc_B5A4
0000BAE8 5368 0032                  		subq.w	#1,$32(a0)
0000BAEC 5368 0036                  		subq.w	#1,$36(a0)
0000BAF0 6600                       		bne.s	loc_B5AA
0000BAF2                            
0000BAF2                            loc_B5A4:
0000BAF2 08A8 0007 0034             		bclr	#7,$34(a0)
0000BAF8                            
0000BAF8                            loc_B5AA:
0000BAF8 3028 0032                  		move.w	$32(a0),d0
0000BAFC 6000                       		bra.s	loc_B5EE
0000BAFE                            ; ===========================================================================
0000BAFE                            
0000BAFE                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000BAFE 0828 0003 0028             		btst	#3,$28(a0)
0000BB04 6700                       		beq.s	Obj30_ChkSwitch
0000BB06 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BB0A 0440 0010                  		subi.w	#$10,d0
0000BB0E 6000                       		bra.s	loc_B5EE
0000BB10                            ; ===========================================================================
0000BB10                            
0000BB10                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000BB10 4A28 0034                  		tst.b	$34(a0)
0000BB14 6600                       		bne.s	loc_B5E0
0000BB16 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000BB1A 7000                       		moveq	#0,d0
0000BB1C 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000BB20 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000BB22 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000BB26 6700                       		beq.s	loc_B5EA	; if not, branch
0000BB28 117C 0001 0034             		move.b	#1,$34(a0)
0000BB2E                            
0000BB2E                            loc_B5E0:
0000BB2E 4A68 0032                  		tst.w	$32(a0)
0000BB32 6700                       		beq.s	loc_B5EA
0000BB34 5568 0032                  		subq.w	#2,$32(a0)
0000BB38                            
0000BB38                            loc_B5EA:
0000BB38 3028 0032                  		move.w	$32(a0),d0
0000BB3C                            
0000BB3C                            loc_B5EE:
0000BB3C 3228 0030                  		move.w	$30(a0),d1
0000BB40 9240                       		sub.w	d0,d1
0000BB42 3141 000C                  		move.w	d1,$C(a0)
0000BB46 4E75                       		rts	
0000BB48                            ; ===========================================================================
0000BB48                            ; ---------------------------------------------------------------------------
0000BB48                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BB48                            ; ---------------------------------------------------------------------------
0000BB48                            Map_obj30:
0000BB48                            	include "_maps\obj30.asm"
0000BB48                            ; ---------------------------------------------------------------------------
0000BB48                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BB48                            ; ---------------------------------------------------------------------------
0000BB48 0000                       		dc.w byte_B600-Map_obj30
0000BB4A 0000                       		dc.w byte_B63D-Map_obj30
0000BB4C 0000                       		dc.w byte_B648-Map_obj30
0000BB4E 0C                         byte_B600:	dc.b $C
0000BB4F B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000BB54 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000BB59 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000BB5E C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000BB63 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000BB68 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000BB6D 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000BB72 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000BB77 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000BB7C 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000BB81 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000BB86 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000BB8B 02                         byte_B63D:	dc.b 2
0000BB8C 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000BB91 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000BB96 0A                         byte_B648:	dc.b $A
0000BB97 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000BB9C C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000BBA1 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000BBA6 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000BBAB F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000BBB0 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000BBB5 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000BBBA 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000BBBF 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000BBC4 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000BBCA 00                         		even
0000BBCA 00                         		even
0000BBCA                            
0000BBCA                            ; ===========================================================================
0000BBCA                            ; ---------------------------------------------------------------------------
0000BBCA                            ; Object 31 - stomping metal blocks on chains (MZ)
0000BBCA                            ; ---------------------------------------------------------------------------
0000BBCA                            
0000BBCA                            Obj31:					; XREF: Obj_Index
0000BBCA 7000                       		moveq	#0,d0
0000BBCC 1028 0024                  		move.b	$24(a0),d0
0000BBD0 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000BBD4 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000BBD8                            ; ===========================================================================
0000BBD8 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000BBDA 0000                       		dc.w loc_B798-Obj31_Index
0000BBDC 0000                       		dc.w loc_B7FE-Obj31_Index
0000BBDE 0000                       		dc.w Obj31_Display2-Obj31_Index
0000BBE0 0000                       		dc.w loc_B7E2-Obj31_Index
0000BBE2                            
0000BBE2 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000BBE4 0100                       		dc.b 1,	0
0000BBE6                            
0000BBE6 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000BBE9 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000BBEC 08CC 03                    		dc.b 8,	$CC, 3
0000BBEF 06F0 02                    		dc.b 6,	$F0, 2
0000BBF2                            
0000BBF2 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000BBF6 5000 7800                  		dc.w $5000, $7800
0000BBFA 3800 5800                  		dc.w $3800, $5800
0000BBFE B800                       		dc.w $B800
0000BC00                            ; ===========================================================================
0000BC00                            
0000BC00                            Obj31_Main:				; XREF: Obj31_Index
0000BC00 7000                       		moveq	#0,d0
0000BC02 1028 0028                  		move.b	$28(a0),d0
0000BC06 6A00                       		bpl.s	loc_B6CE
0000BC08 0240 007F                  		andi.w	#$7F,d0
0000BC0C D040                       		add.w	d0,d0
0000BC0E 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000BC12 115A 003A                  		move.b	(a2)+,$3A(a0)
0000BC16 101A                       		move.b	(a2)+,d0
0000BC18 1140 0028                  		move.b	d0,$28(a0)
0000BC1C                            
0000BC1C                            loc_B6CE:
0000BC1C 0200 000F                  		andi.b	#$F,d0
0000BC20 D040                       		add.w	d0,d0
0000BC22 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000BC26 4A40                       		tst.w	d0
0000BC28 6600                       		bne.s	loc_B6E0
0000BC2A 3142 0032                  		move.w	d2,$32(a0)
0000BC2E                            
0000BC2E                            loc_B6E0:
0000BC2E 45F9 0000 BBE6             		lea	(Obj31_Var).l,a2
0000BC34 2248                       		movea.l	a0,a1
0000BC36 7203                       		moveq	#3,d1
0000BC38 6000                       		bra.s	Obj31_MakeStomper
0000BC3A                            ; ===========================================================================
0000BC3A                            
0000BC3A                            Obj31_Loop:
0000BC3A 6100 0000                  		bsr.w	SingleObjLoad2
0000BC3E 6600 0000                  		bne.w	Obj31_SetSize
0000BC42                            
0000BC42                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000BC42 135A 0024                  		move.b	(a2)+,$24(a1)
0000BC46 12BC 0031                  		move.b	#$31,0(a1)
0000BC4A 3368 0008 0008             		move.w	8(a0),8(a1)
0000BC50 101A                       		move.b	(a2)+,d0
0000BC52 4880                       		ext.w	d0
0000BC54 D068 000C                  		add.w	$C(a0),d0
0000BC58 3340 000C                  		move.w	d0,$C(a1)
0000BC5C 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000BC64 337C 0300 0002             		move.w	#$300,2(a1)
0000BC6A 137C 0004 0001             		move.b	#4,1(a1)
0000BC70 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BC76 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BC7C 137C 0010 0019             		move.b	#$10,$19(a1)
0000BC82 3342 0034                  		move.w	d2,$34(a1)
0000BC86 137C 0004 0018             		move.b	#4,$18(a1)
0000BC8C 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BC90 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000BC96 6600                       		bne.s	loc_B76A
0000BC98 5341                       		subq.w	#1,d1
0000BC9A 1028 0028                  		move.b	$28(a0),d0
0000BC9E 0240 00F0                  		andi.w	#$F0,d0
0000BCA2 0C40 0020                  		cmpi.w	#$20,d0
0000BCA6 679A                       		beq.s	Obj31_MakeStomper
0000BCA8 137C 0038 0019             		move.b	#$38,$19(a1)
0000BCAE 137C 0090 0020             		move.b	#$90,$20(a1)
0000BCB4 5241                       		addq.w	#1,d1
0000BCB6                            
0000BCB6                            loc_B76A:
0000BCB6 2348 003C                  		move.l	a0,$3C(a1)
0000BCBA 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000BCBE                            
0000BCBE 137C 0003 0018             		move.b	#3,$18(a1)
0000BCC4                            
0000BCC4                            Obj31_SetSize:
0000BCC4 7000                       		moveq	#0,d0
0000BCC6 1028 0028                  		move.b	$28(a0),d0
0000BCCA E648                       		lsr.w	#3,d0
0000BCCC 0200 000E                  		andi.b	#$E,d0
0000BCD0 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000BCD4 115A 0019                  		move.b	(a2)+,$19(a0)
0000BCD8 115A 001A                  		move.b	(a2)+,$1A(a0)
0000BCDC 6000                       		bra.s	loc_B798
0000BCDE                            ; ===========================================================================
0000BCDE 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000BCE0 3009                       		dc.b $30, 9
0000BCE2 100A                       		dc.b $10, $A
0000BCE4                            ; ===========================================================================
0000BCE4                            
0000BCE4                            loc_B798:				; XREF: Obj31_Index
0000BCE4 6100 0000                  		bsr.w	Obj31_Types
0000BCE8 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000BCEE 7200                       		moveq	#0,d1
0000BCF0 1228 0019                  		move.b	$19(a0),d1
0000BCF4 0641 000B                  		addi.w	#$B,d1
0000BCF8 343C 000C                  		move.w	#$C,d2
0000BCFC 363C 000D                  		move.w	#$D,d3
0000BD00 3828 0008                  		move.w	8(a0),d4
0000BD04 6100 0000                  		bsr.w	SolidObject
0000BD08 0828 0003 0022             		btst	#3,$22(a0)
0000BD0E 6700                       		beq.s	Obj31_Display
0000BD10 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BD16 6400                       		bcc.s	Obj31_Display
0000BD18 2448                       		movea.l	a0,a2
0000BD1A 41F8 D000                  		lea	($FFFFD000).w,a0
0000BD1E 4EB9 0000 0000             		jsr	KillSonic
0000BD24 204A                       		movea.l	a2,a0
0000BD26                            
0000BD26                            Obj31_Display:
0000BD26 6100 0000                  		bsr.w	DisplaySprite
0000BD2A 6000 0000                  		bra.w	Obj31_ChkDel
0000BD2E                            ; ===========================================================================
0000BD2E                            
0000BD2E                            loc_B7E2:				; XREF: Obj31_Index
0000BD2E 117C 0080 0016             		move.b	#$80,$16(a0)
0000BD34 08E8 0004 0001             		bset	#4,1(a0)
0000BD3A 2268 003C                  		movea.l	$3C(a0),a1
0000BD3E 1029 0032                  		move.b	$32(a1),d0
0000BD42 EA08                       		lsr.b	#5,d0
0000BD44 5600                       		addq.b	#3,d0
0000BD46 1140 001A                  		move.b	d0,$1A(a0)
0000BD4A                            
0000BD4A                            loc_B7FE:				; XREF: Obj31_Index
0000BD4A 2268 003C                  		movea.l	$3C(a0),a1
0000BD4E 7000                       		moveq	#0,d0
0000BD50 1029 0032                  		move.b	$32(a1),d0
0000BD54 D068 0030                  		add.w	$30(a0),d0
0000BD58 3140 000C                  		move.w	d0,$C(a0)
0000BD5C                            
0000BD5C                            Obj31_Display2:				; XREF: Obj31_Index
0000BD5C 6100 0000                  		bsr.w	DisplaySprite
0000BD60                            
0000BD60                            Obj31_ChkDel:				; XREF: Obj31_Display
0000BD60 3028 0008                  		move.w	8(a0),d0
0000BD64 0240 FF80                  		andi.w	#$FF80,d0
0000BD68 3238 F700                  		move.w	($FFFFF700).w,d1
0000BD6C 0441 0080                  		subi.w	#$80,d1
0000BD70 0241 FF80                  		andi.w	#$FF80,d1
0000BD74 9041                       		sub.w	d1,d0
0000BD76 0C40 0280                  		cmpi.w	#$280,d0
0000BD7A 6200 0000                  		bhi.w	DeleteObject
0000BD7E 4E75                       		rts	
0000BD80                            ; ===========================================================================
0000BD80                            
0000BD80                            Obj31_Types:				; XREF: loc_B798
0000BD80 1028 0028                  		move.b	$28(a0),d0
0000BD84 0240 000F                  		andi.w	#$F,d0
0000BD88 D040                       		add.w	d0,d0
0000BD8A 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000BD8E 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000BD92                            ; ===========================================================================
0000BD92 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000BD94 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BD96 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BD98 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BD9A 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BD9C 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BD9E 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BDA0                            ; ===========================================================================
0000BDA0                            
0000BDA0                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000BDA0 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000BDA4 7000                       		moveq	#0,d0
0000BDA6 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000BDAA 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000BDAE 6700                       		beq.s	loc_B8A8	; if not, branch
0000BDB0 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000BDB4 6A00                       		bpl.s	loc_B872
0000BDB6 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BDBC 6700                       		beq.s	loc_B8A0
0000BDBE                            
0000BDBE                            loc_B872:
0000BDBE 4A68 0032                  		tst.w	$32(a0)
0000BDC2 6700                       		beq.s	loc_B8A0
0000BDC4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BDC8 0200 000F                  		andi.b	#$F,d0
0000BDCC 6600                       		bne.s	loc_B892
0000BDCE 4A28 0001                  		tst.b	1(a0)
0000BDD2 6A00                       		bpl.s	loc_B892
0000BDD4 303C 00C7                  		move.w	#$C7,d0
0000BDD8 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BDDE                            
0000BDDE                            loc_B892:
0000BDDE 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BDE4 6400                       		bcc.s	Obj31_Restart
0000BDE6 317C 0000 0032             		move.w	#0,$32(a0)
0000BDEC                            
0000BDEC                            loc_B8A0:
0000BDEC 317C 0000 0012             		move.w	#0,$12(a0)
0000BDF2 6000                       		bra.s	Obj31_Restart
0000BDF4                            ; ===========================================================================
0000BDF4                            
0000BDF4                            loc_B8A8:				; XREF: Obj31_Type00
0000BDF4 3228 0034                  		move.w	$34(a0),d1
0000BDF8 B268 0032                  		cmp.w	$32(a0),d1
0000BDFC 6700                       		beq.s	Obj31_Restart
0000BDFE 3028 0012                  		move.w	$12(a0),d0
0000BE02 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BE08 D168 0032                  		add.w	d0,$32(a0)
0000BE0C B268 0032                  		cmp.w	$32(a0),d1
0000BE10 6200                       		bhi.s	Obj31_Restart
0000BE12 3141 0032                  		move.w	d1,$32(a0)
0000BE16 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BE1C 4A28 0001                  		tst.b	1(a0)
0000BE20 6A00                       		bpl.s	Obj31_Restart
0000BE22 303C 00BD                  		move.w	#$BD,d0
0000BE26 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BE2C                            
0000BE2C                            Obj31_Restart:
0000BE2C 7000                       		moveq	#0,d0
0000BE2E 1028 0032                  		move.b	$32(a0),d0
0000BE32 D068 0030                  		add.w	$30(a0),d0
0000BE36 3140 000C                  		move.w	d0,$C(a0)
0000BE3A 4E75                       		rts	
0000BE3C                            ; ===========================================================================
0000BE3C                            
0000BE3C                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000BE3C 4A68 0036                  		tst.w	$36(a0)
0000BE40 6700                       		beq.s	loc_B938
0000BE42 4A68 0038                  		tst.w	$38(a0)
0000BE46 6700                       		beq.s	loc_B902
0000BE48 5368 0038                  		subq.w	#1,$38(a0)
0000BE4C 6000                       		bra.s	loc_B97C
0000BE4E                            ; ===========================================================================
0000BE4E                            
0000BE4E                            loc_B902:
0000BE4E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BE52 0200 000F                  		andi.b	#$F,d0
0000BE56 6600                       		bne.s	loc_B91C
0000BE58 4A28 0001                  		tst.b	1(a0)
0000BE5C 6A00                       		bpl.s	loc_B91C
0000BE5E 303C 00C7                  		move.w	#$C7,d0
0000BE62 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BE68                            
0000BE68                            loc_B91C:
0000BE68 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BE6E 6400                       		bcc.s	loc_B97C
0000BE70 317C 0000 0032             		move.w	#0,$32(a0)
0000BE76 317C 0000 0012             		move.w	#0,$12(a0)
0000BE7C 317C 0000 0036             		move.w	#0,$36(a0)
0000BE82 6000                       		bra.s	loc_B97C
0000BE84                            ; ===========================================================================
0000BE84                            
0000BE84                            loc_B938:				; XREF: Obj31_Type01
0000BE84 3228 0034                  		move.w	$34(a0),d1
0000BE88 B268 0032                  		cmp.w	$32(a0),d1
0000BE8C 6700                       		beq.s	loc_B97C
0000BE8E 3028 0012                  		move.w	$12(a0),d0
0000BE92 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BE98 D168 0032                  		add.w	d0,$32(a0)
0000BE9C B268 0032                  		cmp.w	$32(a0),d1
0000BEA0 6200                       		bhi.s	loc_B97C
0000BEA2 3141 0032                  		move.w	d1,$32(a0)
0000BEA6 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BEAC 317C 0001 0036             		move.w	#1,$36(a0)
0000BEB2 317C 003C 0038             		move.w	#$3C,$38(a0)
0000BEB8 4A28 0001                  		tst.b	1(a0)
0000BEBC 6A00                       		bpl.s	loc_B97C
0000BEBE 303C 00BD                  		move.w	#$BD,d0
0000BEC2 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BEC8                            
0000BEC8                            loc_B97C:
0000BEC8 6000 FF62                  		bra.w	Obj31_Restart
0000BECC                            ; ===========================================================================
0000BECC                            
0000BECC                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000BECC 3038 D008                  		move.w	($FFFFD008).w,d0
0000BED0 9068 0008                  		sub.w	8(a0),d0
0000BED4 6400                       		bcc.s	loc_B98C
0000BED6 4440                       		neg.w	d0
0000BED8                            
0000BED8                            loc_B98C:
0000BED8 0C40 0090                  		cmpi.w	#$90,d0
0000BEDC 6400                       		bcc.s	loc_B996
0000BEDE 5228 0028                  		addq.b	#1,$28(a0)
0000BEE2                            
0000BEE2                            loc_B996:
0000BEE2 6000 FF48                  		bra.w	Obj31_Restart
0000BEE6                            ; ===========================================================================
0000BEE6                            ; ---------------------------------------------------------------------------
0000BEE6                            ; Object 45 - spiked metal block from beta version (MZ)
0000BEE6                            ; ---------------------------------------------------------------------------
0000BEE6                            
0000BEE6                            Obj45:					; XREF: Obj_Index
0000BEE6 7000                       		moveq	#0,d0
0000BEE8 1028 0024                  		move.b	$24(a0),d0
0000BEEC 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000BEF0 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000BEF4                            ; ===========================================================================
0000BEF4 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000BEF6 0000                       		dc.w Obj45_Solid-Obj45_Index
0000BEF8 0000                       		dc.w loc_BA8E-Obj45_Index
0000BEFA 0000                       		dc.w Obj45_Display-Obj45_Index
0000BEFC 0000                       		dc.w loc_BA7A-Obj45_Index
0000BEFE                            
0000BEFE 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000BF01 04E4 01                    		dc.b	4, $E4,	  1
0000BF04 0834 03                    		dc.b	8, $34,	  3
0000BF07 0628 02                    		dc.b	6, $28,	  2
0000BF0A                            
0000BF0A 3800                       word_B9BE:	dc.w $3800
0000BF0C A000                       		dc.w -$6000
0000BF0E 5000                       		dc.w $5000
0000BF10                            ; ===========================================================================
0000BF10                            
0000BF10                            Obj45_Main:				; XREF: Obj45_Index
0000BF10 7000                       		moveq	#0,d0
0000BF12 1028 0028                  		move.b	$28(a0),d0
0000BF16 D040                       		add.w	d0,d0
0000BF18 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000BF1C 45F9 0000 BEFE             		lea	(Obj45_Var).l,a2
0000BF22 2248                       		movea.l	a0,a1
0000BF24 7203                       		moveq	#3,d1
0000BF26 6000                       		bra.s	Obj45_Load
0000BF28                            ; ===========================================================================
0000BF28                            
0000BF28                            Obj45_Loop:
0000BF28 6100 0000                  		bsr.w	SingleObjLoad2
0000BF2C 6600                       		bne.s	loc_BA52
0000BF2E                            
0000BF2E                            Obj45_Load:				; XREF: Obj45_Main
0000BF2E 135A 0024                  		move.b	(a2)+,$24(a1)
0000BF32 12BC 0045                  		move.b	#$45,0(a1)
0000BF36 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000BF3C 101A                       		move.b	(a2)+,d0
0000BF3E 4880                       		ext.w	d0
0000BF40 D068 0008                  		add.w	8(a0),d0
0000BF44 3340 0008                  		move.w	d0,8(a1)
0000BF48 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000BF50 337C 0300 0002             		move.w	#$300,2(a1)
0000BF56 137C 0004 0001             		move.b	#4,1(a1)
0000BF5C 3369 0008 0030             		move.w	8(a1),$30(a1)
0000BF62 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000BF68 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BF6E 137C 0020 0019             		move.b	#$20,$19(a1)
0000BF74 3342 0034                  		move.w	d2,$34(a1)
0000BF78 137C 0004 0018             		move.b	#4,$18(a1)
0000BF7E 0C12 0001                  		cmpi.b	#1,(a2)
0000BF82 6600                       		bne.s	loc_BA40
0000BF84 137C 0091 0020             		move.b	#$91,$20(a1)
0000BF8A                            
0000BF8A                            loc_BA40:
0000BF8A 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BF8E 2348 003C                  		move.l	a0,$3C(a1)
0000BF92 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000BF96                            
0000BF96 137C 0003 0018             		move.b	#3,$18(a1)
0000BF9C                            
0000BF9C                            loc_BA52:
0000BF9C 117C 0010 0019             		move.b	#$10,$19(a0)
0000BFA2                            
0000BFA2                            Obj45_Solid:				; XREF: Obj45_Index
0000BFA2 3F28 0008                  		move.w	8(a0),-(sp)
0000BFA6 6100 0000                  		bsr.w	Obj45_Move
0000BFAA 323C 0017                  		move.w	#$17,d1
0000BFAE 343C 0020                  		move.w	#$20,d2
0000BFB2 363C 0020                  		move.w	#$20,d3
0000BFB6 381F                       		move.w	(sp)+,d4
0000BFB8 6100 0000                  		bsr.w	SolidObject
0000BFBC 6100 0000                  		bsr.w	DisplaySprite
0000BFC0 6000 0000                  		bra.w	Obj45_ChkDel
0000BFC4                            ; ===========================================================================
0000BFC4                            
0000BFC4                            loc_BA7A:				; XREF: Obj45_Index
0000BFC4 2268 003C                  		movea.l	$3C(a0),a1
0000BFC8 1029 0032                  		move.b	$32(a1),d0
0000BFCC 0600 0010                  		addi.b	#$10,d0
0000BFD0 EA08                       		lsr.b	#5,d0
0000BFD2 5600                       		addq.b	#3,d0
0000BFD4 1140 001A                  		move.b	d0,$1A(a0)
0000BFD8                            
0000BFD8                            loc_BA8E:				; XREF: Obj45_Index
0000BFD8 2268 003C                  		movea.l	$3C(a0),a1
0000BFDC 7000                       		moveq	#0,d0
0000BFDE 1029 0032                  		move.b	$32(a1),d0
0000BFE2 4440                       		neg.w	d0
0000BFE4 D068 0030                  		add.w	$30(a0),d0
0000BFE8 3140 0008                  		move.w	d0,8(a0)
0000BFEC                            
0000BFEC                            Obj45_Display:				; XREF: Obj45_Index
0000BFEC 6100 0000                  		bsr.w	DisplaySprite
0000BFF0                            
0000BFF0                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000BFF0 3028 003A                  		move.w	$3A(a0),d0
0000BFF4 0240 FF80                  		andi.w	#$FF80,d0
0000BFF8 3238 F700                  		move.w	($FFFFF700).w,d1
0000BFFC 0441 0080                  		subi.w	#$80,d1
0000C000 0241 FF80                  		andi.w	#$FF80,d1
0000C004 9041                       		sub.w	d1,d0
0000C006 0C40 0280                  		cmpi.w	#$280,d0
0000C00A 6200 0000                  		bhi.w	DeleteObject
0000C00E 4E75                       		rts	
0000C010                            
0000C010                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C010                            
0000C010                            
0000C010                            Obj45_Move:				; XREF: Obj45_Solid
0000C010 7000                       		moveq	#0,d0
0000C012 1028 0028                  		move.b	$28(a0),d0
0000C016 D040                       		add.w	d0,d0
0000C018 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000C01C 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000C020                            ; End of function Obj45_Move
0000C020                            
0000C020                            ; ===========================================================================
0000C020 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000C022 0000                       		dc.w loc_BADA-off_BAD6
0000C024                            ; ===========================================================================
0000C024                            
0000C024                            loc_BADA:				; XREF: off_BAD6
0000C024 4A68 0036                  		tst.w	$36(a0)
0000C028 6700                       		beq.s	loc_BB08
0000C02A 4A68 0038                  		tst.w	$38(a0)
0000C02E 6700                       		beq.s	loc_BAEC
0000C030 5368 0038                  		subq.w	#1,$38(a0)
0000C034 6000                       		bra.s	loc_BB3C
0000C036                            ; ===========================================================================
0000C036                            
0000C036                            loc_BAEC:
0000C036 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C03C 6400                       		bcc.s	loc_BB3C
0000C03E 317C 0000 0032             		move.w	#0,$32(a0)
0000C044 317C 0000 0010             		move.w	#0,$10(a0)
0000C04A 317C 0000 0036             		move.w	#0,$36(a0)
0000C050 6000                       		bra.s	loc_BB3C
0000C052                            ; ===========================================================================
0000C052                            
0000C052                            loc_BB08:				; XREF: loc_BADA
0000C052 3228 0034                  		move.w	$34(a0),d1
0000C056 B268 0032                  		cmp.w	$32(a0),d1
0000C05A 6700                       		beq.s	loc_BB3C
0000C05C 3028 0010                  		move.w	$10(a0),d0
0000C060 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C066 D168 0032                  		add.w	d0,$32(a0)
0000C06A B268 0032                  		cmp.w	$32(a0),d1
0000C06E 6200                       		bhi.s	loc_BB3C
0000C070 3141 0032                  		move.w	d1,$32(a0)
0000C074 317C 0000 0010             		move.w	#0,$10(a0)
0000C07A 317C 0001 0036             		move.w	#1,$36(a0)
0000C080 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C086                            
0000C086                            loc_BB3C:
0000C086 7000                       		moveq	#0,d0
0000C088 1028 0032                  		move.b	$32(a0),d0
0000C08C 4440                       		neg.w	d0
0000C08E D068 0030                  		add.w	$30(a0),d0
0000C092 3140 0008                  		move.w	d0,8(a0)
0000C096 4E75                       		rts	
0000C098                            ; ===========================================================================
0000C098                            ; ---------------------------------------------------------------------------
0000C098                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C098                            ; ---------------------------------------------------------------------------
0000C098                            Map_obj31:
0000C098                            	include "_maps\obj31.asm"
0000C098                            ; ---------------------------------------------------------------------------
0000C098                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C098                            ; ---------------------------------------------------------------------------
0000C098 0000                       		dc.w byte_BB64-Map_obj31
0000C09A 0000                       		dc.w byte_BB7E-Map_obj31
0000C09C 0000                       		dc.w byte_BB98-Map_obj31
0000C09E 0000                       		dc.w byte_BB9E-Map_obj31
0000C0A0 0000                       		dc.w byte_BBA9-Map_obj31
0000C0A2 0000                       		dc.w byte_BBBE-Map_obj31
0000C0A4 0000                       		dc.w byte_BBDD-Map_obj31
0000C0A6 0000                       		dc.w byte_BC06-Map_obj31
0000C0A8 0000                       		dc.w byte_BC06-Map_obj31
0000C0AA 0000                       		dc.w byte_BC39-Map_obj31
0000C0AC 0000                       		dc.w byte_BC53-Map_obj31
0000C0AE 05                         byte_BB64:	dc.b 5
0000C0AF F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C0B4 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C0B9 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C0BE F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C0C3 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C0C8 05                         byte_BB7E:	dc.b 5
0000C0C9 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C0CE F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C0D3 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C0D8 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C0DD F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C0E2 01                         byte_BB98:	dc.b 1
0000C0E3 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C0E8 02                         byte_BB9E:	dc.b 2
0000C0E9 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C0EE 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C0F3 04                         byte_BBA9:	dc.b 4
0000C0F4 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C0F9 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C0FE 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C103 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C108 06                         byte_BBBE:	dc.b 6
0000C109 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C10E D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C113 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C118 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C11D 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C122 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C127 08                         byte_BBDD:	dc.b 8
0000C128 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C12D B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C132 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C137 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C13C E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C141 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C146 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C14B 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C150 0A                         byte_BC06:	dc.b $A
0000C151 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C156 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C15B A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C160 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C165 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C16A D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C16F E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C174 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C179 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C17E 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C183 05                         byte_BC39:	dc.b 5
0000C184 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C189 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C18E F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C193 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C198 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C19D 01                         byte_BC53:	dc.b 1
0000C19E EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C1A4 00                         		even
0000C1A4 00                         		even
0000C1A4                            
0000C1A4                            ; ---------------------------------------------------------------------------
0000C1A4                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C1A4                            ; ---------------------------------------------------------------------------
0000C1A4                            Map_obj45:
0000C1A4                            	include "_maps\obj45.asm"
0000C1A4                            ; ---------------------------------------------------------------------------
0000C1A4                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C1A4                            ; ---------------------------------------------------------------------------
0000C1A4 0000                       		dc.w byte_BC6C-Map_obj45
0000C1A6 0000                       		dc.w byte_BC7C-Map_obj45
0000C1A8 0000                       		dc.w byte_BC8C-Map_obj45
0000C1AA 0000                       		dc.w byte_BC92-Map_obj45
0000C1AC 0000                       		dc.w byte_BC9D-Map_obj45
0000C1AE 0000                       		dc.w byte_BCB2-Map_obj45
0000C1B0 0000                       		dc.w byte_BCD1-Map_obj45
0000C1B2 0000                       		dc.w byte_BCFA-Map_obj45
0000C1B4 0000                       		dc.w byte_BCFA-Map_obj45
0000C1B6 03                         byte_BC6C:	dc.b 3
0000C1B7 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C1BC 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C1C1 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C1C6 03                         byte_BC7C:	dc.b 3
0000C1C7 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C1CC FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C1D1 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C1D6 01                         byte_BC8C:	dc.b 1
0000C1D7 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C1DC 02                         byte_BC92:	dc.b 2
0000C1DD F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C1E2 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C1E7 04                         byte_BC9D:	dc.b 4
0000C1E8 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C1ED F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C1F2 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C1F7 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C1FC 06                         byte_BCB2:	dc.b 6
0000C1FD F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C202 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C207 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C20C F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C211 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C216 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C21B 08                         byte_BCD1:	dc.b 8
0000C21C F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C221 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C226 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C22B F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C230 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C235 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C23A F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C23F F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C244 08                         byte_BCFA:	dc.b 8
0000C245 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C24A F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C24F F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C254 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C259 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C25E F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C263 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C268 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C26D F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C272 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C278 00                         		even
0000C278 00                         		even
0000C278                            
0000C278                            ; ===========================================================================
0000C278                            ; ---------------------------------------------------------------------------
0000C278                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C278                            ; ---------------------------------------------------------------------------
0000C278                            
0000C278                            Obj32:					; XREF: Obj_Index
0000C278 7000                       		moveq	#0,d0
0000C27A 1028 0024                  		move.b	$24(a0),d0
0000C27E 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C282 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C286                            ; ===========================================================================
0000C286 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C288 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C28A                            ; ===========================================================================
0000C28A                            
0000C28A                            Obj32_Main:				; XREF: Obj32_Index
0000C28A 5428 0024                  		addq.b	#2,$24(a0)
0000C28E 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C296 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C29C 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C2A2 6700                       		beq.s	loc_BD60
0000C2A4 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C2AA                            
0000C2AA                            loc_BD60:
0000C2AA 117C 0004 0001             		move.b	#4,1(a0)
0000C2B0 117C 0010 0019             		move.b	#$10,$19(a0)
0000C2B6 117C 0004 0018             		move.b	#4,$18(a0)
0000C2BC 5668 000C                  		addq.w	#3,$C(a0)
0000C2C0                            
0000C2C0                            Obj32_Pressed:				; XREF: Obj32_Index
0000C2C0 4A28 0001                  		tst.b	1(a0)
0000C2C4 6A00                       		bpl.s	Obj32_Display
0000C2C6 323C 001B                  		move.w	#$1B,d1
0000C2CA 343C 0005                  		move.w	#5,d2
0000C2CE 363C 0005                  		move.w	#5,d3
0000C2D2 3828 0008                  		move.w	8(a0),d4
0000C2D6 6100 0000                  		bsr.w	SolidObject
0000C2DA 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C2E0 1028 0028                  		move.b	$28(a0),d0
0000C2E4 0240 000F                  		andi.w	#$F,d0
0000C2E8 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C2EC 47F3 0000                  		lea	(a3,d0.w),a3
0000C2F0 7600                       		moveq	#0,d3
0000C2F2 0828 0006 0028             		btst	#6,$28(a0)
0000C2F8 6700                       		beq.s	loc_BDB2
0000C2FA 7607                       		moveq	#7,d3
0000C2FC                            
0000C2FC                            loc_BDB2:
0000C2FC 4A28 0028                  		tst.b	$28(a0)
0000C300 6A00                       		bpl.s	loc_BDBE
0000C302 6100 0000                  		bsr.w	Obj32_MZBlock
0000C306 6600                       		bne.s	loc_BDC8
0000C308                            
0000C308                            loc_BDBE:
0000C308 4A28 0025                  		tst.b	$25(a0)
0000C30C 6600                       		bne.s	loc_BDC8
0000C30E 0793                       		bclr	d3,(a3)
0000C310 6000                       		bra.s	loc_BDDE
0000C312                            ; ===========================================================================
0000C312                            
0000C312                            loc_BDC8:
0000C312 4A13                       		tst.b	(a3)
0000C314 6600                       		bne.s	loc_BDD6
0000C316 303C 00CD                  		move.w	#$CD,d0
0000C31A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play switch sound
0000C320                            
0000C320                            loc_BDD6:
0000C320 07D3                       		bset	d3,(a3)
0000C322 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C328                            
0000C328                            loc_BDDE:
0000C328 0828 0005 0028             		btst	#5,$28(a0)
0000C32E 6700                       		beq.s	Obj32_Display
0000C330 5328 001E                  		subq.b	#1,$1E(a0)
0000C334 6A00                       		bpl.s	Obj32_Display
0000C336 117C 0007 001E             		move.b	#7,$1E(a0)
0000C33C 0868 0001 001A             		bchg	#1,$1A(a0)
0000C342                            
0000C342                            Obj32_Display:
0000C342 6100 0000                  		bsr.w	DisplaySprite
0000C346 3028 0008                  		move.w	8(a0),d0
0000C34A 0240 FF80                  		andi.w	#$FF80,d0
0000C34E 3238 F700                  		move.w	($FFFFF700).w,d1
0000C352 0441 0080                  		subi.w	#$80,d1
0000C356 0241 FF80                  		andi.w	#$FF80,d1
0000C35A 9041                       		sub.w	d1,d0
0000C35C 0C40 0280                  		cmpi.w	#$280,d0
0000C360 6200 0000                  		bhi.w	Obj32_Delete
0000C364 4E75                       		rts	
0000C366                            ; ===========================================================================
0000C366                            
0000C366                            Obj32_Delete:
0000C366 6100 0000                  		bsr.w	DeleteObject
0000C36A 4E75                       		rts	
0000C36C                            
0000C36C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C36C                            
0000C36C                            
0000C36C                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C36C 3F03                       		move.w	d3,-(sp)
0000C36E 3428 0008                  		move.w	8(a0),d2
0000C372 3628 000C                  		move.w	$C(a0),d3
0000C376 0442 0010                  		subi.w	#$10,d2
0000C37A 5143                       		subq.w	#8,d3
0000C37C 383C 0020                  		move.w	#$20,d4
0000C380 3A3C 0010                  		move.w	#$10,d5
0000C384 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C388 3C3C 005F                  		move.w	#$5F,d6
0000C38C                            
0000C38C                            Obj32_MZLoop:
0000C38C 4A29 0001                  		tst.b	1(a1)
0000C390 6A00                       		bpl.s	loc_BE4E
0000C392 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C396 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C398                            
0000C398                            loc_BE4E:
0000C398 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C39C 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C3A0                            
0000C3A0 361F                       		move.w	(sp)+,d3
0000C3A2 7000                       		moveq	#0,d0
0000C3A4                            
0000C3A4                            locret_BE5A:
0000C3A4 4E75                       		rts	
0000C3A6                            ; ===========================================================================
0000C3A6 1010                       Obj32_MZData:	dc.b $10, $10
0000C3A8                            ; ===========================================================================
0000C3A8                            
0000C3A8                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C3A8 7001                       		moveq	#1,d0
0000C3AA 0240 003F                  		andi.w	#$3F,d0
0000C3AE D040                       		add.w	d0,d0
0000C3B0 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C3B4 121A                       		move.b	(a2)+,d1
0000C3B6 4881                       		ext.w	d1
0000C3B8 3029 0008                  		move.w	8(a1),d0
0000C3BC 9041                       		sub.w	d1,d0
0000C3BE 9042                       		sub.w	d2,d0
0000C3C0 6400                       		bcc.s	loc_BE80
0000C3C2 D241                       		add.w	d1,d1
0000C3C4 D041                       		add.w	d1,d0
0000C3C6 6500                       		bcs.s	loc_BE84
0000C3C8 60CE                       		bra.s	loc_BE4E
0000C3CA                            ; ===========================================================================
0000C3CA                            
0000C3CA                            loc_BE80:
0000C3CA B044                       		cmp.w	d4,d0
0000C3CC 62CA                       		bhi.s	loc_BE4E
0000C3CE                            
0000C3CE                            loc_BE84:
0000C3CE 121A                       		move.b	(a2)+,d1
0000C3D0 4881                       		ext.w	d1
0000C3D2 3029 000C                  		move.w	$C(a1),d0
0000C3D6 9041                       		sub.w	d1,d0
0000C3D8 9043                       		sub.w	d3,d0
0000C3DA 6400                       		bcc.s	loc_BE9A
0000C3DC D241                       		add.w	d1,d1
0000C3DE D041                       		add.w	d1,d0
0000C3E0 6500                       		bcs.s	loc_BE9E
0000C3E2 60B4                       		bra.s	loc_BE4E
0000C3E4                            ; ===========================================================================
0000C3E4                            
0000C3E4                            loc_BE9A:
0000C3E4 B045                       		cmp.w	d5,d0
0000C3E6 62B0                       		bhi.s	loc_BE4E
0000C3E8                            
0000C3E8                            loc_BE9E:
0000C3E8 361F                       		move.w	(sp)+,d3
0000C3EA 7001                       		moveq	#1,d0
0000C3EC 4E75                       		rts	
0000C3EE                            ; End of function Obj32_MZBlock
0000C3EE                            
0000C3EE                            ; ===========================================================================
0000C3EE                            ; ---------------------------------------------------------------------------
0000C3EE                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C3EE                            ; ---------------------------------------------------------------------------
0000C3EE                            Map_obj32:
0000C3EE                            	include "_maps\obj32.asm"
0000C3EE                            ; ---------------------------------------------------------------------------
0000C3EE                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C3EE                            ; ---------------------------------------------------------------------------
0000C3EE 0000                       		dc.w byte_BEAC-Map_obj32
0000C3F0 0000                       		dc.w byte_BEB7-Map_obj32
0000C3F2 0000                       		dc.w byte_BEC2-Map_obj32
0000C3F4 0000                       		dc.w byte_BEB7-Map_obj32
0000C3F6 02                         byte_BEAC:	dc.b 2
0000C3F7 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C3FC F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C401 02                         byte_BEB7:	dc.b 2
0000C402 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C407 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C40C 02                         byte_BEC2:	dc.b 2
0000C40D F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C412 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C417 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C41C                            		even
0000C41C                            		even
0000C41C                            
0000C41C                            ; ===========================================================================
0000C41C                            ; ---------------------------------------------------------------------------
0000C41C                            ; Object 33 - pushable blocks (MZ, LZ)
0000C41C                            ; ---------------------------------------------------------------------------
0000C41C                            
0000C41C                            Obj33:					; XREF: Obj_Index
0000C41C 7000                       		moveq	#0,d0
0000C41E 1028 0024                  		move.b	$24(a0),d0
0000C422 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C426 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C42A                            ; ===========================================================================
0000C42A 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C42C 0000                       		dc.w loc_BF6E-Obj33_Index
0000C42E 0000                       		dc.w loc_C02C-Obj33_Index
0000C430                            
0000C430 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C432 4001                       		dc.b $40, 1
0000C434                            ; ===========================================================================
0000C434                            
0000C434                            Obj33_Main:				; XREF: Obj33_Index
0000C434 5428 0024                  		addq.b	#2,$24(a0)
0000C438 117C 000F 0016             		move.b	#$F,$16(a0)
0000C43E 117C 000F 0017             		move.b	#$F,$17(a0)
0000C444 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C44C 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C452 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C458 6600                       		bne.s	loc_BF16
0000C45A 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C460                            
0000C460                            loc_BF16:
0000C460 117C 0004 0001             		move.b	#4,1(a0)
0000C466 117C 0003 0018             		move.b	#3,$18(a0)
0000C46C 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C472 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000C478 7000                       		moveq	#0,d0
0000C47A 1028 0028                  		move.b	$28(a0),d0
0000C47E D040                       		add.w	d0,d0
0000C480 0240 000E                  		andi.w	#$E,d0
0000C484 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C488 115A 0019                  		move.b	(a2)+,$19(a0)
0000C48C 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C490 4A28 0028                  		tst.b	$28(a0)
0000C494 6700                       		beq.s	Obj33_ChkGone
0000C496 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C49C                            
0000C49C                            Obj33_ChkGone:
0000C49C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C4A0 7000                       		moveq	#0,d0
0000C4A2 1028 0023                  		move.b	$23(a0),d0
0000C4A6 6700                       		beq.s	loc_BF6E
0000C4A8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C4AE 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C4B4 6600 0000                  		bne.w	DeleteObject
0000C4B8                            
0000C4B8                            loc_BF6E:				; XREF: Obj33_Index
0000C4B8 4A28 0032                  		tst.b	$32(a0)
0000C4BC 6600 0000                  		bne.w	loc_C046
0000C4C0 7200                       		moveq	#0,d1
0000C4C2 1228 0019                  		move.b	$19(a0),d1
0000C4C6 0641 000B                  		addi.w	#$B,d1
0000C4CA 343C 0010                  		move.w	#$10,d2
0000C4CE 363C 0011                  		move.w	#$11,d3
0000C4D2 3828 0008                  		move.w	8(a0),d4
0000C4D6 6100 0000                  		bsr.w	loc_C186
0000C4DA 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C4E0 6600                       		bne.s	loc_BFC6	; if not, branch
0000C4E2 08A8 0007 0028             		bclr	#7,$28(a0)
0000C4E8 3028 0008                  		move.w	8(a0),d0
0000C4EC 0C40 0A20                  		cmpi.w	#$A20,d0
0000C4F0 6500                       		bcs.s	loc_BFC6
0000C4F2 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C4F6 6400                       		bcc.s	loc_BFC6
0000C4F8 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C4FC 0440 001C                  		subi.w	#$1C,d0
0000C500 3140 000C                  		move.w	d0,$C(a0)
0000C504 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C50A 08E8 0007 0028             		bset	#7,$28(a0)
0000C510                            
0000C510                            loc_BFC6:
0000C510 3028 0008                  		move.w	8(a0),d0
0000C514 0240 FF80                  		andi.w	#$FF80,d0
0000C518 3238 F700                  		move.w	($FFFFF700).w,d1
0000C51C 0441 0080                  		subi.w	#$80,d1
0000C520 0241 FF80                  		andi.w	#$FF80,d1
0000C524 9041                       		sub.w	d1,d0
0000C526 0C40 0280                  		cmpi.w	#$280,d0
0000C52A 6200                       		bhi.s	loc_BFE6
0000C52C 6000 0000                  		bra.w	DisplaySprite
0000C530                            ; ===========================================================================
0000C530                            
0000C530                            loc_BFE6:
0000C530 3028 0034                  		move.w	$34(a0),d0
0000C534 0240 FF80                  		andi.w	#$FF80,d0
0000C538 3238 F700                  		move.w	($FFFFF700).w,d1
0000C53C 0441 0080                  		subi.w	#$80,d1
0000C540 0241 FF80                  		andi.w	#$FF80,d1
0000C544 9041                       		sub.w	d1,d0
0000C546 0C40 0280                  		cmpi.w	#$280,d0
0000C54A 6200                       		bhi.s	loc_C016
0000C54C 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C552 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C558 117C 0004 0024             		move.b	#4,$24(a0)
0000C55E 6000                       		bra.s	loc_C02C
0000C560                            ; ===========================================================================
0000C560                            
0000C560                            loc_C016:
0000C560 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C564 7000                       		moveq	#0,d0
0000C566 1028 0023                  		move.b	$23(a0),d0
0000C56A 6700                       		beq.s	loc_C028
0000C56C 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C572                            
0000C572                            loc_C028:
0000C572 6000 0000                  		bra.w	DeleteObject
0000C576                            ; ===========================================================================
0000C576                            
0000C576                            loc_C02C:				; XREF: Obj33_Index
0000C576 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C57A 6700                       		beq.s	locret_C044
0000C57C 117C 0002 0024             		move.b	#2,$24(a0)
0000C582 4228 0032                  		clr.b	$32(a0)
0000C586 4268 0010                  		clr.w	$10(a0)
0000C58A 4268 0012                  		clr.w	$12(a0)
0000C58E                            
0000C58E                            locret_C044:
0000C58E 4E75                       		rts	
0000C590                            ; ===========================================================================
0000C590                            
0000C590                            loc_C046:				; XREF: loc_BF6E
0000C590 3F28 0008                  		move.w	8(a0),-(sp)
0000C594 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C59A 6400                       		bcc.s	loc_C056
0000C59C 6100 0000                  		bsr.w	SpeedToPos
0000C5A0                            
0000C5A0                            loc_C056:
0000C5A0 0828 0001 0022             		btst	#1,$22(a0)
0000C5A6 6700                       		beq.s	loc_C0A0
0000C5A8 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C5AE 4EB9 0000 0000             		jsr	ObjHitFloor
0000C5B4 4A41                       		tst.w	d1
0000C5B6 6A00 0000                  		bpl.w	loc_C09E
0000C5BA D368 000C                  		add.w	d1,$C(a0)
0000C5BE 4268 0012                  		clr.w	$12(a0)
0000C5C2 08A8 0001 0022             		bclr	#1,$22(a0)
0000C5C8 3011                       		move.w	(a1),d0
0000C5CA 0240 03FF                  		andi.w	#$3FF,d0
0000C5CE 0C40 016A                  		cmpi.w	#$16A,d0
0000C5D2 6500                       		bcs.s	loc_C09E
0000C5D4 3028 0030                  		move.w	$30(a0),d0
0000C5D8 E640                       		asr.w	#3,d0
0000C5DA 3140 0010                  		move.w	d0,$10(a0)
0000C5DE 117C 0001 0032             		move.b	#1,$32(a0)
0000C5E4 4268 000E                  		clr.w	$E(a0)
0000C5E8                            
0000C5E8                            loc_C09E:
0000C5E8 6000                       		bra.s	loc_C0E6
0000C5EA                            ; ===========================================================================
0000C5EA                            
0000C5EA                            loc_C0A0:
0000C5EA 4A68 0010                  		tst.w	$10(a0)
0000C5EE 6700 0000                  		beq.w	loc_C0D6
0000C5F2 6B00                       		bmi.s	loc_C0BC
0000C5F4 7600                       		moveq	#0,d3
0000C5F6 1628 0019                  		move.b	$19(a0),d3
0000C5FA 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C600 4A41                       		tst.w	d1		; has block touched a wall?
0000C602 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C604 6000                       		bra.s	loc_C0E6
0000C606                            ; ===========================================================================
0000C606                            
0000C606                            loc_C0BC:
0000C606 7600                       		moveq	#0,d3
0000C608 1628 0019                  		move.b	$19(a0),d3
0000C60C 4643                       		not.w	d3
0000C60E 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C614 4A41                       		tst.w	d1		; has block touched a wall?
0000C616 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C618 6000                       		bra.s	loc_C0E6
0000C61A                            ; ===========================================================================
0000C61A                            
0000C61A                            Obj33_StopPush:
0000C61A 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C61E 6000                       		bra.s	loc_C0E6
0000C620                            ; ===========================================================================
0000C620                            
0000C620                            loc_C0D6:
0000C620 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C628 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C62E 6400                       		bcc.s	loc_C104
0000C630                            
0000C630                            loc_C0E6:
0000C630 7200                       		moveq	#0,d1
0000C632 1228 0019                  		move.b	$19(a0),d1
0000C636 0641 000B                  		addi.w	#$B,d1
0000C63A 343C 0010                  		move.w	#$10,d2
0000C63E 363C 0011                  		move.w	#$11,d3
0000C642 381F                       		move.w	(sp)+,d4
0000C644 6100 0000                  		bsr.w	loc_C186
0000C648 6100                       		bsr.s	Obj33_ChkLava
0000C64A 6000 FEC4                  		bra.w	loc_BFC6
0000C64E                            ; ===========================================================================
0000C64E                            
0000C64E                            loc_C104:
0000C64E 381F                       		move.w	(sp)+,d4
0000C650 43F8 D000                  		lea	($FFFFD000).w,a1
0000C654 08A9 0003 0022             		bclr	#3,$22(a1)
0000C65A 08A8 0003 0022             		bclr	#3,$22(a0)
0000C660 6000 FECE                  		bra.w	loc_BFE6
0000C664                            ; ===========================================================================
0000C664                            
0000C664                            Obj33_ChkLava:
0000C664 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C66A 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C66C 343C FFE0                  		move.w	#-$20,d2
0000C670 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000C676 6700                       		beq.s	Obj33_LoadLava
0000C678 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000C67E 6700                       		beq.s	Obj33_LoadLava
0000C680 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000C686 6700                       		beq.s	Obj33_LoadLava
0000C688 4E75                       		rts	
0000C68A                            ; ===========================================================================
0000C68A                            
0000C68A                            Obj33_ChkLava2:
0000C68A 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000C690 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000C692 343C 0020                  		move.w	#$20,d2
0000C696 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000C69C 6700                       		beq.s	Obj33_LoadLava
0000C69E 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000C6A4 6700                       		beq.s	Obj33_LoadLava
0000C6A6                            
0000C6A6                            Obj33_NoLava:
0000C6A6 4E75                       		rts	
0000C6A8                            ; ===========================================================================
0000C6A8                            
0000C6A8                            Obj33_LoadLava:
0000C6A8 6100 0000                  		bsr.w	SingleObjLoad
0000C6AC 6600                       		bne.s	locret_C184
0000C6AE 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000C6B2 3368 0008 0008             		move.w	8(a0),8(a1)
0000C6B8 D569 0008                  		add.w	d2,8(a1)
0000C6BC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C6C2 0669 0010 000C             		addi.w	#$10,$C(a1)
0000C6C8 2348 003C                  		move.l	a0,$3C(a1)
0000C6CC                            
0000C6CC                            locret_C184:
0000C6CC 4E75                       		rts	
0000C6CE                            ; ===========================================================================
0000C6CE                            
0000C6CE                            loc_C186:				; XREF: loc_BF6E
0000C6CE 1028 0025                  		move.b	$25(a0),d0
0000C6D2 6700 0000                  		beq.w	loc_C218
0000C6D6 5500                       		subq.b	#2,d0
0000C6D8 6600                       		bne.s	loc_C1AA
0000C6DA 6100 B3B8                  		bsr.w	ExitPlatform
0000C6DE 0829 0003 0022             		btst	#3,$22(a1)
0000C6E4 6600                       		bne.s	loc_C1A4
0000C6E6 4228 0025                  		clr.b	$25(a0)
0000C6EA 4E75                       		rts	
0000C6EC                            ; ===========================================================================
0000C6EC                            
0000C6EC                            loc_C1A4:
0000C6EC 3404                       		move.w	d4,d2
0000C6EE 6000 B902                  		bra.w	MvSonicOnPtfm
0000C6F2                            ; ===========================================================================
0000C6F2                            
0000C6F2                            loc_C1AA:
0000C6F2 5500                       		subq.b	#2,d0
0000C6F4 6600                       		bne.s	loc_C1F2
0000C6F6 6100 0000                  		bsr.w	SpeedToPos
0000C6FA 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C700 4EB9 0000 0000             		jsr	ObjHitFloor
0000C706 4A41                       		tst.w	d1
0000C708 6A00 0000                  		bpl.w	locret_C1F0
0000C70C D368 000C                  		add.w	d1,$C(a0)
0000C710 4268 0012                  		clr.w	$12(a0)
0000C714 4228 0025                  		clr.b	$25(a0)
0000C718 3011                       		move.w	(a1),d0
0000C71A 0240 03FF                  		andi.w	#$3FF,d0
0000C71E 0C40 016A                  		cmpi.w	#$16A,d0
0000C722 6500                       		bcs.s	locret_C1F0
0000C724 3028 0030                  		move.w	$30(a0),d0
0000C728 E640                       		asr.w	#3,d0
0000C72A 3140 0010                  		move.w	d0,$10(a0)
0000C72E 117C 0001 0032             		move.b	#1,$32(a0)
0000C734 4268 000E                  		clr.w	$E(a0)
0000C738                            
0000C738                            locret_C1F0:
0000C738 4E75                       		rts	
0000C73A                            ; ===========================================================================
0000C73A                            
0000C73A                            loc_C1F2:
0000C73A 6100 0000                  		bsr.w	SpeedToPos
0000C73E 3028 0008                  		move.w	8(a0),d0
0000C742 0240 000C                  		andi.w	#$C,d0
0000C746 6600 0000                  		bne.w	locret_C2E4
0000C74A 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000C750 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000C756 4268 0010                  		clr.w	$10(a0)
0000C75A 5528 0025                  		subq.b	#2,$25(a0)
0000C75E 4E75                       		rts	
0000C760                            ; ===========================================================================
0000C760                            
0000C760                            loc_C218:
0000C760 6100 0000                  		bsr.w	loc_FAC8
0000C764 4A44                       		tst.w	d4
0000C766 6700 0000                  		beq.w	locret_C2E4
0000C76A 6B00 0000                  		bmi.w	locret_C2E4
0000C76E 4A28 0032                  		tst.b	$32(a0)
0000C772 6700                       		beq.s	loc_C230
0000C774 6000 0000                  		bra.w	locret_C2E4
0000C778                            ; ===========================================================================
0000C778                            
0000C778                            loc_C230:
0000C778 4A40                       		tst.w	d0
0000C77A 6700 0000                  		beq.w	locret_C2E4
0000C77E 6B00                       		bmi.s	loc_C268
0000C780 0829 0000 0022             		btst	#0,$22(a1)
0000C786 6600 0000                  		bne.w	locret_C2E4
0000C78A 3F00                       		move.w	d0,-(sp)
0000C78C 7600                       		moveq	#0,d3
0000C78E 1628 0019                  		move.b	$19(a0),d3
0000C792 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C798 301F                       		move.w	(sp)+,d0
0000C79A 4A41                       		tst.w	d1
0000C79C 6B00 0000                  		bmi.w	locret_C2E4
0000C7A0 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C7A8 7001                       		moveq	#1,d0
0000C7AA 323C 0040                  		move.w	#$40,d1
0000C7AE 6000                       		bra.s	loc_C294
0000C7B0                            ; ===========================================================================
0000C7B0                            
0000C7B0                            loc_C268:
0000C7B0 0829 0000 0022             		btst	#0,$22(a1)
0000C7B6 6700                       		beq.s	locret_C2E4
0000C7B8 3F00                       		move.w	d0,-(sp)
0000C7BA 7600                       		moveq	#0,d3
0000C7BC 1628 0019                  		move.b	$19(a0),d3
0000C7C0 4643                       		not.w	d3
0000C7C2 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C7C8 301F                       		move.w	(sp)+,d0
0000C7CA 4A41                       		tst.w	d1
0000C7CC 6B00                       		bmi.s	locret_C2E4
0000C7CE 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000C7D6 70FF                       		moveq	#-1,d0
0000C7D8 323C FFC0                  		move.w	#-$40,d1
0000C7DC                            
0000C7DC                            loc_C294:
0000C7DC 43F8 D000                  		lea	($FFFFD000).w,a1
0000C7E0 D169 0008                  		add.w	d0,8(a1)
0000C7E4 3341 0014                  		move.w	d1,$14(a1)
0000C7E8 337C 0000 0010             		move.w	#0,$10(a1)
0000C7EE 3F00                       		move.w	d0,-(sp)
0000C7F0 303C 00A7                  		move.w	#$A7,d0
0000C7F4 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play pushing sound
0000C7FA 301F                       		move.w	(sp)+,d0
0000C7FC 4A28 0028                  		tst.b	$28(a0)
0000C800 6B00                       		bmi.s	locret_C2E4
0000C802 3F00                       		move.w	d0,-(sp)
0000C804 4EB9 0000 0000             		jsr	ObjHitFloor
0000C80A 301F                       		move.w	(sp)+,d0
0000C80C 0C41 0004                  		cmpi.w	#4,d1
0000C810 6F00                       		ble.s	loc_C2E0
0000C812 317C 0400 0010             		move.w	#$400,$10(a0)
0000C818 4A40                       		tst.w	d0
0000C81A 6A00                       		bpl.s	loc_C2D8
0000C81C 4468 0010                  		neg.w	$10(a0)
0000C820                            
0000C820                            loc_C2D8:
0000C820 117C 0006 0025             		move.b	#6,$25(a0)
0000C826 6000                       		bra.s	locret_C2E4
0000C828                            ; ===========================================================================
0000C828                            
0000C828                            loc_C2E0:
0000C828 D368 000C                  		add.w	d1,$C(a0)
0000C82C                            
0000C82C                            locret_C2E4:
0000C82C 4E75                       		rts	
0000C82E                            ; ===========================================================================
0000C82E                            ; ---------------------------------------------------------------------------
0000C82E                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C82E                            ; ---------------------------------------------------------------------------
0000C82E                            Map_obj33:
0000C82E                            	include "_maps\obj33.asm"
0000C82E                            ; ---------------------------------------------------------------------------
0000C82E                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C82E                            ; ---------------------------------------------------------------------------
0000C82E 0000                       		dc.w byte_C2EA-Map_obj33
0000C830 0000                       		dc.w byte_C2F0-Map_obj33
0000C832 01                         byte_C2EA:	dc.b 1
0000C833 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000C838 04                         byte_C2F0:	dc.b 4
0000C839 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000C83E F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000C843 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000C848 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000C84E 00                         		even
0000C84E 00                         		even
0000C84E                            
0000C84E                            ; ===========================================================================
0000C84E                            ; ---------------------------------------------------------------------------
0000C84E                            ; Object 34 - zone title cards
0000C84E                            ; ---------------------------------------------------------------------------
0000C84E                            
0000C84E                            Obj34:					; XREF: Obj_Index
0000C84E 7000                       		moveq	#0,d0
0000C850 1028 0024                  		move.b	$24(a0),d0
0000C854 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000C858 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000C85C                            ; ===========================================================================
0000C85C 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000C85E 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000C860 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C862 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C864                            ; ===========================================================================
0000C864                            
0000C864                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000C864 2248                       		movea.l	a0,a1
0000C866 7000                       		moveq	#0,d0
0000C868 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C86C 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000C872 6600                       		bne.s	Obj34_CheckFZ
0000C874 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000C876                            
0000C876                            Obj34_CheckFZ:
0000C876 3400                       		move.w	d0,d2
0000C878 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000C87E 6600                       		bne.s	Obj34_LoadConfig
0000C880 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000C882 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000C884                            
0000C884                            Obj34_LoadConfig:
0000C884 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000C88A E948                       		lsl.w	#4,d0
0000C88C D6C0                       		adda.w	d0,a3
0000C88E 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000C894 7203                       		moveq	#3,d1
0000C896                            
0000C896                            Obj34_Loop:
0000C896 12BC 0034                  		move.b	#$34,0(a1)
0000C89A 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000C89E 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000C8A2 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000C8A6 335A 000A                  		move.w	(a2)+,$A(a1)
0000C8AA 135A 0024                  		move.b	(a2)+,$24(a1)
0000C8AE 101A                       		move.b	(a2)+,d0
0000C8B0 6600                       		bne.s	Obj34_ActNumber
0000C8B2 1002                       		move.b	d2,d0
0000C8B4                            
0000C8B4                            Obj34_ActNumber:
0000C8B4 0C00 0007                  		cmpi.b	#7,d0
0000C8B8 6600                       		bne.s	Obj34_MakeSprite
0000C8BA D038 FE11                  		add.b	($FFFFFE11).w,d0
0000C8BE 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000C8C4 6600                       		bne.s	Obj34_MakeSprite
0000C8C6 5300                       		subq.b	#1,d0
0000C8C8                            
0000C8C8                            Obj34_MakeSprite:
0000C8C8 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000C8CC 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000C8D4 337C 8580 0002             		move.w	#$8580,2(a1)
0000C8DA 137C 0078 0019             		move.b	#$78,$19(a1)
0000C8E0 137C 0000 0001             		move.b	#0,1(a1)
0000C8E6 137C 0000 0018             		move.b	#0,$18(a1)
0000C8EC 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000C8F2 43E9 0040                  		lea	$40(a1),a1	; next object
0000C8F6 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000C8FA                            
0000C8FA                            Obj34_ChkPos:				; XREF: Obj34_Index
0000C8FA 7210                       		moveq	#$10,d1		; set horizontal speed
0000C8FC 3028 0030                  		move.w	$30(a0),d0
0000C900 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000C904 6700                       		beq.s	loc_C3C8	; if yes, branch
0000C906 6C00                       		bge.s	Obj34_Move
0000C908 4441                       		neg.w	d1
0000C90A                            
0000C90A                            Obj34_Move:
0000C90A D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C90E                            
0000C90E                            loc_C3C8:
0000C90E 3028 0008                  		move.w	8(a0),d0
0000C912 6B00                       		bmi.s	locret_C3D8
0000C914 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C918 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000C91A 6000 0000                  		bra.w	DisplaySprite
0000C91E                            ; ===========================================================================
0000C91E                            
0000C91E                            locret_C3D8:
0000C91E 4E75                       		rts	
0000C920                            ; ===========================================================================
0000C920                            
0000C920                            Obj34_Wait:				; XREF: Obj34_Index
0000C920 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000C924 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000C926 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000C92A 6000 0000                  		bra.w	DisplaySprite
0000C92E                            ; ===========================================================================
0000C92E                            
0000C92E                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000C92E 4A28 0001                  		tst.b	1(a0)
0000C932 6A00                       		bpl.s	Obj34_ChangeArt
0000C934 7220                       		moveq	#$20,d1
0000C936 3028 0032                  		move.w	$32(a0),d0
0000C93A B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000C93E 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000C940 6C00                       		bge.s	Obj34_Move2
0000C942 4441                       		neg.w	d1
0000C944                            
0000C944                            Obj34_Move2:
0000C944 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C948 3028 0008                  		move.w	8(a0),d0
0000C94C 6B00                       		bmi.s	locret_C412
0000C94E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C952 6400                       		bcc.s	locret_C412	; if yes, branch
0000C954 6000 0000                  		bra.w	DisplaySprite
0000C958                            ; ===========================================================================
0000C958                            
0000C958                            locret_C412:
0000C958 4E75                       		rts	
0000C95A                            ; ===========================================================================
0000C95A                            
0000C95A                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000C95A 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000C960 6600                       		bne.s	Obj34_Delete
0000C962 7002                       		moveq	#2,d0
0000C964 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load explosion patterns
0000C96A 7000                       		moveq	#0,d0
0000C96C 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C970 0640 0015                  		addi.w	#$15,d0
0000C974 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load animal patterns
0000C97A                            
0000C97A                            Obj34_Delete:
0000C97A 6000 0000                  		bra.w	DeleteObject
0000C97E                            ; ===========================================================================
0000C97E 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000C980 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000C982 00E4                       		dc.w $E4
0000C984 0206                       		dc.b 2,	6
0000C986 00EA                       		dc.w $EA
0000C988 0207                       		dc.b 2,	7
0000C98A 00E0                       		dc.w $E0
0000C98C 020A                       		dc.b 2,	$A
0000C98E                            ; ---------------------------------------------------------------------------
0000C98E                            ; Title	card configuration data
0000C98E                            ; Format:
0000C98E                            ; 4 bytes per item (YYYY XXXX)
0000C98E                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000C98E                            ; ---------------------------------------------------------------------------
0000C98E 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000C99E 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000C9AE 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000C9BE 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000C9CE 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000C9DE 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000C9EE 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000C9FE                            ; ===========================================================================
0000C9FE                            ; ---------------------------------------------------------------------------
0000C9FE                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000C9FE                            ; ---------------------------------------------------------------------------
0000C9FE                            
0000C9FE                            Obj39:					; XREF: Obj_Index
0000C9FE 7000                       		moveq	#0,d0
0000CA00 1028 0024                  		move.b	$24(a0),d0
0000CA04 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000CA08 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000CA0C                            ; ===========================================================================
0000CA0C 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000CA0E 0000                       		dc.w loc_C50C-Obj39_Index
0000CA10 0000                       		dc.w Obj39_Wait-Obj39_Index
0000CA12                            ; ===========================================================================
0000CA12                            
0000CA12                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000CA12 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CA16 6700                       		beq.s	Obj39_Main	; if yes, branch
0000CA18 4E75                       		rts	
0000CA1A                            ; ===========================================================================
0000CA1A                            
0000CA1A                            Obj39_Main:
0000CA1A 5428 0024                  		addq.b	#2,$24(a0)
0000CA1E 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000CA24 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000CA2A 6700                       		beq.s	loc_C4EC	; if not, branch
0000CA2C 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000CA32                            
0000CA32                            loc_C4EC:
0000CA32 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000CA38 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000CA40 317C 855E 0002             		move.w	#$855E,2(a0)
0000CA46 117C 0000 0001             		move.b	#0,1(a0)
0000CA4C 117C 0000 0018             		move.b	#0,$18(a0)
0000CA52                            
0000CA52                            loc_C50C:				; XREF: Obj39_Index
0000CA52 7210                       		moveq	#$10,d1		; set horizontal speed
0000CA54 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000CA5A 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000CA5C 6500                       		bcs.s	Obj39_Move
0000CA5E 4441                       		neg.w	d1
0000CA60                            
0000CA60                            Obj39_Move:
0000CA60 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CA64 6000 0000                  		bra.w	DisplaySprite
0000CA68                            ; ===========================================================================
0000CA68                            
0000CA68                            Obj39_SetWait:				; XREF: Obj39_Main
0000CA68 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000CA6E 5428 0024                  		addq.b	#2,$24(a0)
0000CA72 4E75                       		rts	
0000CA74                            ; ===========================================================================
0000CA74                            
0000CA74                            Obj39_Wait:				; XREF: Obj39_Index
0000CA74 1038 F605                  		move.b	($FFFFF605).w,d0
0000CA78 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000CA7C 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000CA7E 0828 0000 001A             		btst	#0,$1A(a0)
0000CA84 6600                       		bne.s	Obj39_Display
0000CA86 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000CA8A 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000CA8C 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CA90 6000 0000                  		bra.w	DisplaySprite
0000CA94                            ; ===========================================================================
0000CA94                            
0000CA94                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000CA94 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000CA98 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000CA9A 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000CAA0 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000CAA4 6600                       		bne.s	Obj39_Display	; if yes, branch
0000CAA6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000CAAC 6000                       		bra.s	Obj39_Display
0000CAAE                            ; ===========================================================================
0000CAAE                            
0000CAAE                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000CAAE 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CAB4                            
0000CAB4                            Obj39_Display:				; XREF: Obj39_ChgMode
0000CAB4 6000 0000                  		bra.w	DisplaySprite
0000CAB8                            ; ===========================================================================
0000CAB8                            ; ---------------------------------------------------------------------------
0000CAB8                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000CAB8                            ; ---------------------------------------------------------------------------
0000CAB8                            
0000CAB8                            Obj3A:					; XREF: Obj_Index
0000CAB8 7000                       		moveq	#0,d0
0000CABA 1028 0024                  		move.b	$24(a0),d0
0000CABE 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000CAC2 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000CAC6                            ; ===========================================================================
0000CAC6 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000CAC8 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000CACA 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CACC 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000CACE 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CAD0 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000CAD2 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CAD4 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000CAD6 0000                       		dc.w loc_C766-Obj3A_Index
0000CAD8                            ; ===========================================================================
0000CAD8                            
0000CAD8                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000CAD8 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CADC 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000CADE 4E75                       		rts	
0000CAE0                            ; ===========================================================================
0000CAE0                            
0000CAE0                            Obj3A_Main:
0000CAE0 2248                       		movea.l	a0,a1
0000CAE2 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000CAE8 7206                       		moveq	#6,d1
0000CAEA                            
0000CAEA                            Obj3A_Loop:
0000CAEA 12BC 003A                  		move.b	#$3A,0(a1)
0000CAEE 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000CAF2 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000CAF6 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CAFA 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CAFE 135A 0024                  		move.b	(a2)+,$24(a1)
0000CB02 101A                       		move.b	(a2)+,d0
0000CB04 0C00 0006                  		cmpi.b	#6,d0
0000CB08 6600                       		bne.s	loc_C5CA
0000CB0A D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000CB0E                            
0000CB0E                            loc_C5CA:
0000CB0E 1340 001A                  		move.b	d0,$1A(a1)
0000CB12 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000CB1A 337C 8580 0002             		move.w	#$8580,2(a1)
0000CB20 137C 0000 0001             		move.b	#0,1(a1)
0000CB26 43E9 0040                  		lea	$40(a1),a1
0000CB2A 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000CB2E                            
0000CB2E                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000CB2E 7210                       		moveq	#$10,d1		; set horizontal speed
0000CB30 3028 0030                  		move.w	$30(a0),d0
0000CB34 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CB38 6700                       		beq.s	loc_C61A	; if yes, branch
0000CB3A 6C00                       		bge.s	Obj3A_Move
0000CB3C 4441                       		neg.w	d1
0000CB3E                            
0000CB3E                            Obj3A_Move:
0000CB3E D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CB42                            
0000CB42                            loc_C5FE:				; XREF: loc_C61A
0000CB42 3028 0008                  		move.w	8(a0),d0
0000CB46 6B00                       		bmi.s	locret_C60E
0000CB48 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CB4C 6400                       		bcc.s	locret_C60E	; if yes, branch
0000CB4E 6000 0000                  		bra.w	DisplaySprite
0000CB52                            ; ===========================================================================
0000CB52                            
0000CB52                            locret_C60E:
0000CB52 4E75                       		rts	
0000CB54                            ; ===========================================================================
0000CB54                            
0000CB54                            loc_C610:				; XREF: loc_C61A
0000CB54 117C 000E 0024             		move.b	#$E,$24(a0)
0000CB5A 6000 0000                  		bra.w	Obj3A_ChkPos2
0000CB5E                            ; ===========================================================================
0000CB5E                            
0000CB5E                            loc_C61A:				; XREF: Obj3A_ChkPos
0000CB5E 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000CB64 67EE                       		beq.s	loc_C610
0000CB66 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CB6C 66D4                       		bne.s	loc_C5FE
0000CB6E 5428 0024                  		addq.b	#2,$24(a0)
0000CB72 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CB78                            
0000CB78                            Obj3A_Wait:				; XREF: Obj3A_Index
0000CB78 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CB7C 6600                       		bne.s	Obj3A_Display
0000CB7E 5428 0024                  		addq.b	#2,$24(a0)
0000CB82                            
0000CB82                            Obj3A_Display:
0000CB82 6000 0000                  		bra.w	DisplaySprite
0000CB86                            ; ===========================================================================
0000CB86                            
0000CB86                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000CB86 6100 0000                  		bsr.w	DisplaySprite
0000CB8A 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000CB90 7000                       		moveq	#0,d0
0000CB92 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000CB96 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000CB98 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CB9C 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000CBA2                            
0000CBA2                            Obj3A_RingBonus:
0000CBA2 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CBA6 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000CBA8 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CBAC 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CBB2                            
0000CBB2                            Obj3A_ChkBonus:
0000CBB2 4A40                       		tst.w	d0		; is there any bonus?
0000CBB4 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000CBB6 303C 00C5                  		move.w	#$C5,d0
0000CBBA 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CBC0 5428 0024                  		addq.b	#2,$24(a0)
0000CBC4 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000CBCA 6600                       		bne.s	Obj3A_SetDelay
0000CBCC 5828 0024                  		addq.b	#4,$24(a0)
0000CBD0                            
0000CBD0                            Obj3A_SetDelay:
0000CBD0 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CBD6                            
0000CBD6                            locret_C692:
0000CBD6 4E75                       		rts	
0000CBD8                            ; ===========================================================================
0000CBD8                            
0000CBD8                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000CBD8 4EB9 0000 0000             		jsr	AddPoints
0000CBDE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CBE2 0200 0003                  		andi.b	#3,d0
0000CBE6 66EE                       		bne.s	locret_C692
0000CBE8 303C 00CD                  		move.w	#$CD,d0
0000CBEC 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CBF2                            ; ===========================================================================
0000CBF2                            
0000CBF2                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000CBF2 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CBF6 0240 0007                  		andi.w	#7,d0
0000CBFA E748                       		lsl.w	#3,d0
0000CBFC 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000CC00 0241 0003                  		andi.w	#3,d1
0000CC04 D241                       		add.w	d1,d1
0000CC06 D041                       		add.w	d1,d0
0000CC08 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000CC0C 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000CC10 4A40                       		tst.w	d0
0000CC12 6600                       		bne.s	Obj3A_ChkSS
0000CC14 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000CC1A 6000                       		bra.s	Obj3A_Display2
0000CC1C                            ; ===========================================================================
0000CC1C                            
0000CC1C                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000CC1C 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000CC20 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000CC24 6700                       		beq.s	loc_C6EA	; if not, branch
0000CC26 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000CC2C 6000                       		bra.s	Obj3A_Display2
0000CC2E                            ; ===========================================================================
0000CC2E                            
0000CC2E                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000CC2E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CC34                            
0000CC34                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000CC34 6000 0000                  		bra.w	DisplaySprite
0000CC38                            ; ===========================================================================
0000CC38                            ; ---------------------------------------------------------------------------
0000CC38                            ; Level	order array
0000CC38                            ; ---------------------------------------------------------------------------
0000CC38                            LevelOrder:	incbin	misc\lvl_ord.bin
0000CC68                            		even
0000CC68                            ; ===========================================================================
0000CC68                            
0000CC68                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000CC68 7220                       		moveq	#$20,d1		; set horizontal speed
0000CC6A 3028 0032                  		move.w	$32(a0),d0
0000CC6E B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000CC72 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000CC74 6C00                       		bge.s	Obj3A_Move2
0000CC76 4441                       		neg.w	d1
0000CC78                            
0000CC78                            Obj3A_Move2:
0000CC78 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CC7C 3028 0008                  		move.w	8(a0),d0
0000CC80 6B00                       		bmi.s	locret_C748
0000CC82 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CC86 6400                       		bcc.s	locret_C748	; if yes, branch
0000CC88 6000 0000                  		bra.w	DisplaySprite
0000CC8C                            ; ===========================================================================
0000CC8C                            
0000CC8C                            locret_C748:
0000CC8C 4E75                       		rts	
0000CC8E                            ; ===========================================================================
0000CC8E                            
0000CC8E                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000CC8E 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CC94 6600 0000                  		bne.w	DeleteObject
0000CC98 5428 0024                  		addq.b	#2,$24(a0)
0000CC9C 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000CCA0 303C 008D                  		move.w	#$8D,d0
0000CCA4 4EF9 0000 15B6             		jmp	(PlaySound).l	; play FZ music
0000CCAA                            ; ===========================================================================
0000CCAA                            
0000CCAA                            loc_C766:				; XREF: Obj3A_Index
0000CCAA 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000CCAE 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000CCB4 6700 0000                  		beq.w	DeleteObject
0000CCB8 4E75                       		rts	
0000CCBA                            ; ===========================================================================
0000CCBA 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000CCC0 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000CCC2 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000CCC8 0201                       		dc.b 2,	1
0000CCCA 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000CCD0 0206                       		dc.b 2,	6
0000CCD2 0520 0120 00EC             		dc.w $520, $120, $EC
0000CCD8 0202                       		dc.b 2,	2
0000CCDA 0540 0120 00FC             		dc.w $540, $120, $FC
0000CCE0 0203                       		dc.b 2,	3
0000CCE2 0560 0120 010C             		dc.w $560, $120, $10C
0000CCE8 0204                       		dc.b 2,	4
0000CCEA 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000CCF0 0205                       		dc.b 2,	5
0000CCF2                            ; ===========================================================================
0000CCF2                            ; ---------------------------------------------------------------------------
0000CCF2                            ; Object 7E - special stage results screen
0000CCF2                            ; ---------------------------------------------------------------------------
0000CCF2                            
0000CCF2                            Obj7E:					; XREF: Obj_Index
0000CCF2 7000                       		moveq	#0,d0
0000CCF4 1028 0024                  		move.b	$24(a0),d0
0000CCF8 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000CCFC 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000CD00                            ; ===========================================================================
0000CD00 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000CD02 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000CD04 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CD06 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000CD08 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CD0A 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CD0C 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CD0E 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000CD10 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CD12 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CD14 0000                       		dc.w loc_C91A-Obj7E_Index
0000CD16                            ; ===========================================================================
0000CD16                            
0000CD16                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000CD16 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CD1A 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000CD1C 4E75                       		rts	
0000CD1E                            ; ===========================================================================
0000CD1E                            
0000CD1E                            Obj7E_Main:
0000CD1E 2248                       		movea.l	a0,a1
0000CD20 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000CD26 7203                       		moveq	#3,d1
0000CD28 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000CD2E 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000CD30 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000CD32                            
0000CD32                            Obj7E_Loop:
0000CD32 12BC 007E                  		move.b	#$7E,0(a1)
0000CD36 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000CD3A 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CD3E 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CD42 135A 0024                  		move.b	(a2)+,$24(a1)
0000CD46 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CD4A 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000CD52 337C 8580 0002             		move.w	#$8580,2(a1)
0000CD58 137C 0000 0001             		move.b	#0,1(a1)
0000CD5E 43E9 0040                  		lea	$40(a1),a1
0000CD62 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000CD66                            
0000CD66 7007                       		moveq	#7,d0
0000CD68 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000CD6C 6700                       		beq.s	loc_C842
0000CD6E 7000                       		moveq	#0,d0
0000CD70 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000CD74 6600                       		bne.s	loc_C842	; if not, branch
0000CD76 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000CD78 317C 0018 0008             		move.w	#$18,8(a0)
0000CD7E 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000CD84                            
0000CD84                            loc_C842:
0000CD84 1140 001A                  		move.b	d0,$1A(a0)
0000CD88                            
0000CD88                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000CD88 7210                       		moveq	#$10,d1		; set horizontal speed
0000CD8A 3028 0030                  		move.w	$30(a0),d0
0000CD8E B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CD92 6700                       		beq.s	loc_C86C	; if yes, branch
0000CD94 6C00                       		bge.s	Obj7E_Move
0000CD96 4441                       		neg.w	d1
0000CD98                            
0000CD98                            Obj7E_Move:
0000CD98 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CD9C                            
0000CD9C                            loc_C85A:				; XREF: loc_C86C
0000CD9C 3028 0008                  		move.w	8(a0),d0
0000CDA0 6B00                       		bmi.s	locret_C86A
0000CDA2 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CDA6 6400                       		bcc.s	locret_C86A	; if yes, branch
0000CDA8 6000 0000                  		bra.w	DisplaySprite
0000CDAC                            ; ===========================================================================
0000CDAC                            
0000CDAC                            locret_C86A:
0000CDAC 4E75                       		rts	
0000CDAE                            ; ===========================================================================
0000CDAE                            
0000CDAE                            loc_C86C:				; XREF: Obj7E_ChkPos
0000CDAE 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000CDB4 66E6                       		bne.s	loc_C85A
0000CDB6 5428 0024                  		addq.b	#2,$24(a0)
0000CDBA 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CDC0 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000CDC6                            
0000CDC6                            Obj7E_Wait:				; XREF: Obj7E_Index
0000CDC6 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CDCA 6600                       		bne.s	Obj7E_Display
0000CDCC 5428 0024                  		addq.b	#2,$24(a0)
0000CDD0                            
0000CDD0                            Obj7E_Display:
0000CDD0 6000 0000                  		bra.w	DisplaySprite
0000CDD4                            ; ===========================================================================
0000CDD4                            
0000CDD4                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000CDD4 6100 0000                  		bsr.w	DisplaySprite
0000CDD8 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000CDDE 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CDE2 6700                       		beq.s	loc_C8C4	; if yes, branch
0000CDE4 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CDEA 700A                       		moveq	#10,d0		; add 10 to score
0000CDEC 4EB9 0000 0000             		jsr	AddPoints
0000CDF2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CDF6 0200 0003                  		andi.b	#3,d0
0000CDFA 6600                       		bne.s	locret_C8EA
0000CDFC 303C 00CD                  		move.w	#$CD,d0
0000CE00 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CE06                            ; ===========================================================================
0000CE06                            
0000CE06                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000CE06 303C 00C5                  		move.w	#$C5,d0
0000CE0A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CE10 5428 0024                  		addq.b	#2,$24(a0)
0000CE14 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CE1A 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000CE20 6500                       		bcs.s	locret_C8EA	; if not, branch
0000CE22 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000CE28 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000CE2C                            
0000CE2C                            locret_C8EA:
0000CE2C 4E75                       		rts	
0000CE2E                            ; ===========================================================================
0000CE2E                            
0000CE2E                            Obj7E_Exit:				; XREF: Obj7E_Index
0000CE2E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CE34 6000 0000                  		bra.w	DisplaySprite
0000CE38                            ; ===========================================================================
0000CE38                            
0000CE38                            Obj7E_Continue:				; XREF: Obj7E_Index
0000CE38 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000CE3E 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000CE44 303C 00BF                  		move.w	#$BF,d0
0000CE48 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play continues music
0000CE4E 5428 0024                  		addq.b	#2,$24(a0)
0000CE52 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000CE58 6000 0000                  		bra.w	DisplaySprite
0000CE5C                            ; ===========================================================================
0000CE5C                            
0000CE5C                            loc_C91A:				; XREF: Obj7E_Index
0000CE5C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CE60 0200 000F                  		andi.b	#$F,d0
0000CE64 6600                       		bne.s	Obj7E_Display2
0000CE66 0868 0000 001A             		bchg	#0,$1A(a0)
0000CE6C                            
0000CE6C                            Obj7E_Display2:
0000CE6C 6000 0000                  		bra.w	DisplaySprite
0000CE70                            ; ===========================================================================
0000CE70 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000CE76 0200                       		dc.b 2,	0		; rountine number, frame number
0000CE78 0320 0120 0118             		dc.w $320, $120, $118
0000CE7E 0201                       		dc.b 2,	1
0000CE80 0360 0120 0128             		dc.w $360, $120, $128
0000CE86 0202                       		dc.b 2,	2
0000CE88 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000CE8E 0203                       		dc.b 2,	3
0000CE90 03A0 0120 0138             		dc.w $3A0, $120, $138
0000CE96 0206                       		dc.b 2,	6
0000CE98                            ; ===========================================================================
0000CE98                            ; ---------------------------------------------------------------------------
0000CE98                            ; Object 7F - chaos emeralds from the special stage results screen
0000CE98                            ; ---------------------------------------------------------------------------
0000CE98                            
0000CE98                            Obj7F:					; XREF: Obj_Index
0000CE98 7000                       		moveq	#0,d0
0000CE9A 1028 0024                  		move.b	$24(a0),d0
0000CE9E 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000CEA2 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000CEA6                            ; ===========================================================================
0000CEA6 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000CEA8 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000CEAA                            
0000CEAA                            ; ---------------------------------------------------------------------------
0000CEAA                            ; X-axis positions for chaos emeralds
0000CEAA                            ; ---------------------------------------------------------------------------
0000CEAA 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000CEB6                            ; ===========================================================================
0000CEB6                            
0000CEB6                            Obj7F_Main:				; XREF: Obj7F_Index
0000CEB6 2248                       		movea.l	a0,a1
0000CEB8 45F9 0000 CEAA             		lea	(Obj7F_PosData).l,a2
0000CEBE 7400                       		moveq	#0,d2
0000CEC0 7200                       		moveq	#0,d1
0000CEC2 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000CEC6 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000CEC8 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000CECC                            
0000CECC                            Obj7F_Loop:
0000CECC 12BC 007F                  		move.b	#$7F,0(a1)
0000CED0 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000CED4 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000CEDA 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000CEDE 1633 2000                  		move.b	(a3,d2.w),d3
0000CEE2 1343 001A                  		move.b	d3,$1A(a1)
0000CEE6 1343 001C                  		move.b	d3,$1C(a1)
0000CEEA 5202                       		addq.b	#1,d2
0000CEEC 5429 0024                  		addq.b	#2,$24(a1)
0000CEF0 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000CEF8 337C 8541 0002             		move.w	#$8541,2(a1)
0000CEFE 137C 0000 0001             		move.b	#0,1(a1)
0000CF04 43E9 0040                  		lea	$40(a1),a1	; next object
0000CF08 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000CF0C                            
0000CF0C                            Obj7F_Flash:				; XREF: Obj7F_Index
0000CF0C 1028 001A                  		move.b	$1A(a0),d0
0000CF10 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000CF16 0C00 0006                  		cmpi.b	#6,d0
0000CF1A 6600                       		bne.s	Obj7F_Display
0000CF1C 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000CF22                            
0000CF22                            Obj7F_Display:
0000CF22 6000 0000                  		bra.w	DisplaySprite
0000CF26                            ; ===========================================================================
0000CF26                            ; ---------------------------------------------------------------------------
0000CF26                            ; Sprite mappings - zone title cards
0000CF26                            ; ---------------------------------------------------------------------------
0000CF26 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000CF28 0000                       		dc.w byte_CA2C-Map_obj34
0000CF2A 0000                       		dc.w byte_CA5A-Map_obj34
0000CF2C 0000                       		dc.w byte_CA7A-Map_obj34
0000CF2E 0000                       		dc.w byte_CAA8-Map_obj34
0000CF30 0000                       		dc.w byte_CADC-Map_obj34
0000CF32 0000                       		dc.w byte_CB10-Map_obj34
0000CF34 0000                       		dc.w byte_CB26-Map_obj34
0000CF36 0000                       		dc.w byte_CB31-Map_obj34
0000CF38 0000                       		dc.w byte_CB3C-Map_obj34
0000CF3A 0000                       		dc.w byte_CB47-Map_obj34
0000CF3C 0000                       		dc.w byte_CB8A-Map_obj34
0000CF3E 0C                         byte_C9FE:	dc.b $C	;  GREEN HILL | CRUNCHY ROLL
0000CF3F F805 0008 80               		dc.b $F8, 5, 0, 8, $80		; C
0000CF44 F805 003A 90               		dc.b $F8, 5, 0, $3A, $90	; R
0000CF49 F805 0046 A0               		dc.b $F8, 5, 0, $46, $A0	; U
0000CF4E F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	; N
0000CF53 F805 0008 C0               		dc.b $F8, 5, 0, 8, $C0		; C
0000CF58 F805 001C D0               		dc.b $F8, 5, 0, $1C, $D0	; H
0000CF5D F805 004A E0               		dc.b $F8, 5, 0, $4A, $E0	; Y
0000CF62 F800 0056 F0               		dc.b $F8, 0, 0, $56, $F0	; Space
0000CF67 F805 003A 00               		dc.b $F8, 5, 0, $3A, $0	; R
0000CF6C F805 0032 10               		dc.b $F8, 5, 0, $32, $10	; O
0000CF71 F805 0026 20               		dc.b $F8, 5, 0, $26, $20	; L
0000CF76 F805 0026 30               		dc.b $F8, 5, 0, $26, $30	; L
0000CF7B 16                         byte_CA2C:	dc.b $16	;  LABYRINTH | I LIKE FILE EGGSPLORER
0000CF7C F801 0020 80               		dc.b $F8, 1, 0, $20, $80	; I
0000CF81 F800 0056 88               		dc.b $F8, 0, 0, $56, $88	; Space
0000CF86 F805 0026 98               		dc.b $F8, 5, 0, $26, $98	; L
0000CF8B F801 0020 A8               		dc.b $F8, 1, 0, $20, $A8	; I
0000CF90 F805 0022 B0               		dc.b $F8, 5, 0, $22, $B0	; K
0000CF95 F805 0010 C0               		dc.b $F8, 5, 0, $10, $C0	; E
0000CF9A F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000CF9F F805 0014 E0               		dc.b $F8, 5, 0, $14, $E0	; F
0000CFA4 F801 0020 F0               		dc.b $F8, 1, 0, $20, $F0	; I
0000CFA9 F805 0026 F8               		dc.b $F8, 5, 0, $26, $F8	; L
0000CFAE F805 0010 08               		dc.b $F8, 5, 0, $10, $8	; E
0000CFB3 F800 0056 18               		dc.b $F8, 0, 0, $56, $18	; Space
0000CFB8 F805 0010 28               		dc.b $F8, 5, 0, $10, $28	; E
0000CFBD F805 0018 38               		dc.b $F8, 5, 0, $18, $38	; G
0000CFC2 F805 0018 48               		dc.b $F8, 5, 0, $18, $48	; G
0000CFC7 F805 003E 58               		dc.b $F8, 5, 0, $3E, $58	; S
0000CFCC F805 0036 68               		dc.b $F8, 5, 0, $36, $68	; P
0000CFD1 F805 0026 78               		dc.b $F8, 5, 0, $26, $78	; L
0000CFD6 F805 0032 88               		dc.b $F8, 5, 0, $32, $88	; O
0000CFDB F805 003A 98               		dc.b $F8, 5, 0, $3A, $98	; R
0000CFE0 F805 0010 A8               		dc.b $F8, 5, 0, $10, $A8	; E
0000CFE5 F805 003A B8               		dc.b $F8, 5, 0, $3A, $B8	; R
0000CFEA 05                         byte_CA5A:	dc.b 5	;  MARBLE | MARBL
0000CFEB F805 002A 80               		dc.b $F8, 5, 0, $2A, $80	; M
0000CFF0 F805 0000 90               		dc.b $F8, 5, 0, 0, $90		; A
0000CFF5 F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000CFFA F805 0004 B0               		dc.b $F8, 5, 0, 4, $B0		; B
0000CFFF F805 0026 C0               		dc.b $F8, 5, 0, $26, $C0	; L
0000D004 11                         byte_CA7A:	dc.b $11	;  STAR LIGHT | DONT GET RIDOTHIS
0000D005 F805 000C 80               		dc.b $F8, 5, 0, $0C, $80	; D
0000D00A F805 0032 90               		dc.b $F8, 5, 0, $32, $90	; O
0000D00F F805 002E A0               		dc.b $F8, 5, 0, $2E, $A0	; N
0000D014 F805 0042 B0               		dc.b $F8, 5, 0, $42, $B0	; T
0000D019 F800 0056 C0               		dc.b $F8, 0, 0, $56, $C0	; Space
0000D01E F805 0018 D0               		dc.b $F8, 5, 0, $18, $D0	; G
0000D023 F805 0010 E0               		dc.b $F8, 5, 0, $10, $E0	; E
0000D028 F805 0042 F0               		dc.b $F8, 5, 0, $42, $F0	; T
0000D02D F800 0056 00               		dc.b $F8, 0, 0, $56, $0	; Space
0000D032 F805 003A 10               		dc.b $F8, 5, 0, $3A, $10	; R
0000D037 F801 0020 20               		dc.b $F8, 1, 0, $20, $20	; I
0000D03C F805 000C 28               		dc.b $F8, 5, 0, $0C, $28	; D
0000D041 F805 0032 38               		dc.b $F8, 5, 0, $32, $38	; O
0000D046 F805 0042 48               		dc.b $F8, 5, 0, $42, $48	; T
0000D04B F805 001C 58               		dc.b $F8, 5, 0, $1C, $58	; H
0000D050 F801 0020 68               		dc.b $F8, 1, 0, $20, $68	; I
0000D055 F805 003E 70               		dc.b $F8, 5, 0, $3E, $70	; S
0000D05A 15                         byte_CAA8:	dc.b $15	;  SPRING YARD | THE PIG FROM BARNYARD
0000D05B F805 0042 80               		dc.b $F8, 5, 0, $42, $80	; T
0000D060 F805 001C 90               		dc.b $F8, 5, 0, $1C, $90	; H
0000D065 F805 0010 A0               		dc.b $F8, 5, 0, $10, $A0	; E
0000D06A F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D06F F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000D074 F801 0020 D0               		dc.b $F8, 1, 0, $20, $D0	; I
0000D079 F805 0018 D8               		dc.b $F8, 5, 0, $18, $D8	; G
0000D07E F800 0056 E8               		dc.b $F8, 0, 0, $56, $E8	; Space
0000D083 F805 0014 F8               		dc.b $F8, 5, 0, $14, $F8	; F
0000D088 F805 003A 08               		dc.b $F8, 5, 0, $3A, $8	; R
0000D08D F805 0032 18               		dc.b $F8, 5, 0, $32, $18	; O
0000D092 F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	; M
0000D097 F800 0056 38               		dc.b $F8, 0, 0, $56, $38	; Space
0000D09C F805 0004 48               		dc.b $F8, 5, 0, 4, $48		; B
0000D0A1 F805 0000 58               		dc.b $F8, 5, 0, 0, $58		; A
0000D0A6 F805 003A 68               		dc.b $F8, 5, 0, $3A, $68	; R
0000D0AB F805 002E 78               		dc.b $F8, 5, 0, $2E, $78	; N
0000D0B0 F805 004A 88               		dc.b $F8, 5, 0, $4A, $88	; Y
0000D0B5 F805 0000 98               		dc.b $F8, 5, 0, 0, $98		; A
0000D0BA F805 003A A8               		dc.b $F8, 5, 0, $3A, $A8	; R
0000D0BF F805 000C B8               		dc.b $F8, 5, 0, $0C, $B8	; D
0000D0C4 07                         byte_CADC:	dc.b 7	;  SCRAP BRAIN | Z Z Z Z
0000D0C5 F805 004E 80               		dc.b $F8, 5, 0, $4E, $80	; Z
0000D0CA F800 0056 90               		dc.b $F8, 0, 0, $56, $90	; Space
0000D0CF F805 004E A0               		dc.b $F8, 5, 0, $4E, $A0	; Z
0000D0D4 F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D0D9 F805 004E C0               		dc.b $F8, 5, 0, $4E, $C0	; Z
0000D0DE F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000D0E3 F805 004E E0               		dc.b $F8, 5, 0, $4E, $E0	; Z
0000D0E8 04                         byte_CB10:	dc.b 4			; ZONE
0000D0E9 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000D0EE F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000D0F3 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000D0F8 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D0FD 00                         		dc.b 0
0000D0FE 02                         byte_CB26:	dc.b 2			; ACT 1
0000D0FF 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D104 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000D109 02                         byte_CB31:	dc.b 2			; ACT 2
0000D10A 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D10F F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000D114 02                         byte_CB3C:	dc.b 2			; ACT 3
0000D115 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D11A F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000D11F 0D                         byte_CB47:	dc.b $D			; Oval
0000D120 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000D125 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000D12A EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000D12F F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000D134 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000D139 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000D13E 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000D143 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000D148 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000D14D F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000D152 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000D157 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000D15C 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000D161 00                         		dc.b 0
0000D162 05                         byte_CB8A:	dc.b 5			; FINAL
0000D163 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000D168 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000D16D F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000D172 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000D177 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000D17C                            		even
0000D17C                            ; ---------------------------------------------------------------------------
0000D17C                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D17C                            ; ---------------------------------------------------------------------------
0000D17C                            Map_obj39:
0000D17C                            	include "_maps\obj39.asm"
0000D17C                            ; ---------------------------------------------------------------------------
0000D17C                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D17C                            ; ---------------------------------------------------------------------------
0000D17C 0000                       		dc.w byte_CBAC-Map_obj39
0000D17E 0000                       		dc.w byte_CBB7-Map_obj39
0000D180 0000                       		dc.w byte_CBC2-Map_obj39
0000D182 0000                       		dc.w byte_CBCD-Map_obj39
0000D184 02                         byte_CBAC:	dc.b 2
0000D185 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D18A F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D18F 02                         byte_CBB7:	dc.b 2
0000D190 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D195 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D19A 02                         byte_CBC2:	dc.b 2
0000D19B F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D1A0 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D1A5 02                         byte_CBCD:	dc.b 2
0000D1A6 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D1AB F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D1B0                            		even
0000D1B0                            		even
0000D1B0                            
0000D1B0                            ; ---------------------------------------------------------------------------
0000D1B0                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D1B0                            ; ---------------------------------------------------------------------------
0000D1B0 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D1B2 0000                       		dc.w byte_CC13-Map_obj3A
0000D1B4 0000                       		dc.w byte_CC32-Map_obj3A
0000D1B6 0000                       		dc.w byte_CC51-Map_obj3A
0000D1B8 0000                       		dc.w byte_CC75-Map_obj3A
0000D1BA FF6F                       		dc.w byte_CB47-Map_obj3A
0000D1BC FF4E                       		dc.w byte_CB26-Map_obj3A
0000D1BE FF59                       		dc.w byte_CB31-Map_obj3A
0000D1C0 FF64                       		dc.w byte_CB3C-Map_obj3A
0000D1C2 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000D1C3 F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000D1C8 F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000D1CD F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000D1D2 F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000D1D7 F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000D1DC F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000D1E1 F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000D1E6 F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000D1EB F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000D1F0 F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000D1F5 F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000D1FA F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000D1FF F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000D204 F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000D209 F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000D20E 06                         byte_CC13:	dc.b 6			; PASSED
0000D20F F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D214 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D219 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D21E F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D223 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D228 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D22D 06                         byte_CC32:	dc.b 6			; SCORE
0000D22E F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D233 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D238 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D23D F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D242 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D247 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D24C 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D24D F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D252 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D257 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D25C F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D261 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D266 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D26B F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D270 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D271 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D276 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D27B F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D280 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D285 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D28A F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D28F F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D294                            		even
0000D294                            ; ---------------------------------------------------------------------------
0000D294                            ; Sprite mappings - special stage results screen
0000D294                            ; ---------------------------------------------------------------------------
0000D294 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D296 0000                       		dc.w byte_CCEE-Map_obj7E
0000D298 0000                       		dc.w byte_CD0D-Map_obj7E
0000D29A FE8B                       		dc.w byte_CB47-Map_obj7E
0000D29C 0000                       		dc.w byte_CD31-Map_obj7E
0000D29E 0000                       		dc.w byte_CD46-Map_obj7E
0000D2A0 0000                       		dc.w byte_CD5B-Map_obj7E
0000D2A2 0000                       		dc.w byte_CD6B-Map_obj7E
0000D2A4 0000                       		dc.w byte_CDA8-Map_obj7E
0000D2A6 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D2A7 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D2AC F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D2B1 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D2B6 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D2BB F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D2C0 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D2C5 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D2CA F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D2CF F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D2D4 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D2D9 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D2DE F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D2E3 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D2E8 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D2E9 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D2EE F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D2F3 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D2F8 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D2FD F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D302 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D307 07                         byte_CD0D:	dc.b 7
0000D308 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D30D F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D312 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D317 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D31C FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D321 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D326 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D32B 04                         byte_CD31:	dc.b 4
0000D32C F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D331 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D336 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D33B F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D340 04                         byte_CD46:	dc.b 4
0000D341 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D346 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D34B F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D350 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D355 03                         byte_CD5B:	dc.b 3
0000D356 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D35B F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D360 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D365 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D366 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D36B F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D370 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D375 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D37A F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D37F F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D384 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D389 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D38E F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D393 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D398 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D39D F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D3A2 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D3A3 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D3A8 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D3AD F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D3B2 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D3B7 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D3BC F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D3C1 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D3C6 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D3CB F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D3D0 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D3D5 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D3DA F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D3DF F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D3E4 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D3E9 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D3EE                            		even
0000D3EE                            ; ---------------------------------------------------------------------------
0000D3EE                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D3EE                            ; ---------------------------------------------------------------------------
0000D3EE                            Map_obj7F:
0000D3EE                            	include "_maps\obj7F.asm"
0000D3EE                            ; ---------------------------------------------------------------------------
0000D3EE                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D3EE                            ; ---------------------------------------------------------------------------
0000D3EE 0000                       		dc.w byte_CE02-Map_obj7F
0000D3F0 0000                       		dc.w byte_CE08-Map_obj7F
0000D3F2 0000                       		dc.w byte_CE0E-Map_obj7F
0000D3F4 0000                       		dc.w byte_CE14-Map_obj7F
0000D3F6 0000                       		dc.w byte_CE1A-Map_obj7F
0000D3F8 0000                       		dc.w byte_CE20-Map_obj7F
0000D3FA 0000                       		dc.w byte_CE26-Map_obj7F
0000D3FC 01                         byte_CE02:	dc.b 1
0000D3FD F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D402 01                         byte_CE08:	dc.b 1
0000D403 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D408 01                         byte_CE0E:	dc.b 1
0000D409 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D40E 01                         byte_CE14:	dc.b 1
0000D40F F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D414 01                         byte_CE1A:	dc.b 1
0000D415 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D41A 01                         byte_CE20:	dc.b 1
0000D41B F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D420 00                         byte_CE26:	dc.b 0			; Blank frame
0000D422 00                         		even
0000D422 00                         		even
0000D422                            
0000D422                            ; ===========================================================================
0000D422                            ; ---------------------------------------------------------------------------
0000D422                            ; Object 36 - spikes
0000D422                            ; ---------------------------------------------------------------------------
0000D422                            
0000D422                            Obj36:					; XREF: Obj_Index
0000D422 7000                       		moveq	#0,d0
0000D424 1028 0024                  		move.b	$24(a0),d0
0000D428 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D42C 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D430                            ; ===========================================================================
0000D430 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D432 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D434                            
0000D434 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D436 0110                       		dc.b 1,	$10
0000D438 0204                       		dc.b 2,	4
0000D43A 031C                       		dc.b 3,	$1C
0000D43C 0440                       		dc.b 4,	$40
0000D43E 0510                       		dc.b 5,	$10
0000D440                            ; ===========================================================================
0000D440                            
0000D440                            Obj36_Main:				; XREF: Obj36_Index
0000D440 5428 0024                  		addq.b	#2,$24(a0)
0000D444 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D44C 317C 051B 0002             		move.w	#$51B,2(a0)
0000D452 0028 0004 0001             		ori.b	#4,1(a0)
0000D458 117C 0004 0018             		move.b	#4,$18(a0)
0000D45E 1028 0028                  		move.b	$28(a0),d0
0000D462 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D468 0240 00F0                  		andi.w	#$F0,d0
0000D46C 43F9 0000 D434             		lea	(Obj36_Var).l,a1
0000D472 E648                       		lsr.w	#3,d0
0000D474 D2C0                       		adda.w	d0,a1
0000D476 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D47A 1159 0019                  		move.b	(a1)+,$19(a0)
0000D47E 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D484 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D48A                            
0000D48A                            Obj36_Solid:				; XREF: Obj36_Index
0000D48A 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D48E 343C 0004                  		move.w	#4,d2
0000D492 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D498 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D49A 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D4A0 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D4A2 343C 0014                  		move.w	#$14,d2
0000D4A6                            
0000D4A6                            ; Spikes types $1x and $5x face	sideways
0000D4A6                            
0000D4A6                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D4A6 323C 001B                  		move.w	#$1B,d1
0000D4AA 3602                       		move.w	d2,d3
0000D4AC 5243                       		addq.w	#1,d3
0000D4AE 3828 0008                  		move.w	8(a0),d4
0000D4B2 6100 0000                  		bsr.w	SolidObject
0000D4B6 0828 0003 0022             		btst	#3,$22(a0)
0000D4BC 6600                       		bne.s	Obj36_Display
0000D4BE 0C44 0001                  		cmpi.w	#1,d4
0000D4C2 6700                       		beq.s	Obj36_Hurt
0000D4C4 6000                       		bra.s	Obj36_Display
0000D4C6                            ; ===========================================================================
0000D4C6                            
0000D4C6                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D4C6                            
0000D4C6                            Obj36_Upright:				; XREF: Obj36_Solid
0000D4C6 7200                       		moveq	#0,d1
0000D4C8 1228 0019                  		move.b	$19(a0),d1
0000D4CC 0641 000B                  		addi.w	#$B,d1
0000D4D0 343C 0010                  		move.w	#$10,d2
0000D4D4 363C 0011                  		move.w	#$11,d3
0000D4D8 3828 0008                  		move.w	8(a0),d4
0000D4DC 6100 0000                  		bsr.w	SolidObject
0000D4E0 0828 0003 0022             		btst	#3,$22(a0)
0000D4E6 6600                       		bne.s	Obj36_Hurt
0000D4E8 4A44                       		tst.w	d4
0000D4EA 6A00                       		bpl.s	Obj36_Display
0000D4EC                            
0000D4EC                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D4EC 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D4F0 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D4F2 2F08                       		move.l	a0,-(sp)
0000D4F4 2448                       		movea.l	a0,a2
0000D4F6 41F8 D000                  		lea	($FFFFD000).w,a0
0000D4FA 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D500 6400                       		bcc.s	loc_CF20
0000D502 2628 000C                  		move.l	$C(a0),d3
0000D506 3028 0012                  		move.w	$12(a0),d0
0000D50A 48C0                       		ext.l	d0
0000D50C E180                       		asl.l	#8,d0
0000D50E 9680                       		sub.l	d0,d3
0000D510 2143 000C                  		move.l	d3,$C(a0)
0000D514 4EB9 0000 0000             		jsr	HurtSonic
0000D51A                            
0000D51A                            loc_CF20:
0000D51A 205F                       		movea.l	(sp)+,a0
0000D51C                            
0000D51C                            Obj36_Display:
0000D51C 6100 0000                  		bsr.w	DisplaySprite
0000D520 3028 0030                  		move.w	$30(a0),d0
0000D524 0240 FF80                  		andi.w	#$FF80,d0
0000D528 3238 F700                  		move.w	($FFFFF700).w,d1
0000D52C 0441 0080                  		subi.w	#$80,d1
0000D530 0241 FF80                  		andi.w	#$FF80,d1
0000D534 9041                       		sub.w	d1,d0
0000D536 0C40 0280                  		cmpi.w	#$280,d0
0000D53A 6200 0000                  		bhi.w	DeleteObject
0000D53E 4E75                       		rts	
0000D540                            ; ===========================================================================
0000D540                            
0000D540                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D540 7000                       		moveq	#0,d0
0000D542 1028 0028                  		move.b	$28(a0),d0
0000D546 D040                       		add.w	d0,d0
0000D548 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D54C 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D550                            ; ===========================================================================
0000D550 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D552 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D554 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D556                            ; ===========================================================================
0000D556                            
0000D556                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D556 4E75                       		rts			; don't move the object
0000D558                            ; ===========================================================================
0000D558                            
0000D558                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D558 6100 0000                  		bsr.w	Obj36_Wait
0000D55C 7000                       		moveq	#0,d0
0000D55E 1028 0034                  		move.b	$34(a0),d0
0000D562 D068 0032                  		add.w	$32(a0),d0
0000D566 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D56A 4E75                       		rts	
0000D56C                            ; ===========================================================================
0000D56C                            
0000D56C                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D56C 6100 0000                  		bsr.w	Obj36_Wait
0000D570 7000                       		moveq	#0,d0
0000D572 1028 0034                  		move.b	$34(a0),d0
0000D576 D068 0030                  		add.w	$30(a0),d0
0000D57A 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D57E 4E75                       		rts	
0000D580                            ; ===========================================================================
0000D580                            
0000D580                            Obj36_Wait:
0000D580 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D584 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D586 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D58A 6600                       		bne.s	locret_CFE6
0000D58C 4A28 0001                  		tst.b	1(a0)
0000D590 6A00                       		bpl.s	locret_CFE6
0000D592 303C 00B6                  		move.w	#$B6,d0
0000D596 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D59C 6000                       		bra.s	locret_CFE6
0000D59E                            ; ===========================================================================
0000D59E                            
0000D59E                            loc_CFA4:
0000D59E 4A68 0036                  		tst.w	$36(a0)
0000D5A2 6700                       		beq.s	loc_CFC6
0000D5A4 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D5AA 6400                       		bcc.s	locret_CFE6
0000D5AC 317C 0000 0034             		move.w	#0,$34(a0)
0000D5B2 317C 0000 0036             		move.w	#0,$36(a0)
0000D5B8 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D5BE 6000                       		bra.s	locret_CFE6
0000D5C0                            ; ===========================================================================
0000D5C0                            
0000D5C0                            loc_CFC6:
0000D5C0 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D5C6 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D5CC 6500                       		bcs.s	locret_CFE6
0000D5CE 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D5D4 317C 0001 0036             		move.w	#1,$36(a0)
0000D5DA 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D5E0                            
0000D5E0                            locret_CFE6:
0000D5E0 4E75                       		rts	
0000D5E2                            ; ===========================================================================
0000D5E2                            ; ---------------------------------------------------------------------------
0000D5E2                            ; Sprite mappings - spikes
0000D5E2                            ; ---------------------------------------------------------------------------
0000D5E2                            Map_obj36:
0000D5E2                            	include "_maps\obj36.asm"
0000D5E2                            ; ---------------------------------------------------------------------------
0000D5E2                            ; Sprite mappings - spikes
0000D5E2                            ; ---------------------------------------------------------------------------
0000D5E2 0000                       		dc.w byte_CFF4-Map_obj36
0000D5E4 0000                       		dc.w byte_D004-Map_obj36
0000D5E6 0000                       		dc.w byte_D014-Map_obj36
0000D5E8 0000                       		dc.w byte_D01A-Map_obj36
0000D5EA 0000                       		dc.w byte_D02A-Map_obj36
0000D5EC 0000                       		dc.w byte_D049-Map_obj36
0000D5EE 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000D5EF F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000D5F4 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D5F9 F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000D5FE 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000D5FF EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000D604 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D609 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000D60E 01                         byte_D014:	dc.b 1			; 1 spike
0000D60F F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D614 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000D615 F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000D61A F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D61F F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000D624 06                         byte_D02A:	dc.b 6			; 6 spikes
0000D625 F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000D62A F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000D62F F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000D634 F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000D639 F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000D63E F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000D643 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000D644 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D64A 00                         		even
0000D64A 00                         		even
0000D64A                            
0000D64A                            ; ===========================================================================
0000D64A                            ; ---------------------------------------------------------------------------
0000D64A                            ; Object 3B - purple rock (GHZ)
0000D64A                            ; ---------------------------------------------------------------------------
0000D64A                            
0000D64A                            Obj3B:					; XREF: Obj_Index
0000D64A 7000                       		moveq	#0,d0
0000D64C 1028 0024                  		move.b	$24(a0),d0
0000D650 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000D654 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000D658                            ; ===========================================================================
0000D658 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000D65A 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000D65C                            ; ===========================================================================
0000D65C                            
0000D65C                            Obj3B_Main:				; XREF: Obj3B_Index
0000D65C 5428 0024                  		addq.b	#2,$24(a0)
0000D660 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000D668 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000D66E 117C 0004 0001             		move.b	#4,1(a0)
0000D674 117C 0013 0019             		move.b	#$13,$19(a0)
0000D67A 117C 0004 0018             		move.b	#4,$18(a0)
0000D680                            
0000D680                            Obj3B_Solid:				; XREF: Obj3B_Index
0000D680 323C 001B                  		move.w	#$1B,d1
0000D684 343C 0010                  		move.w	#$10,d2
0000D688 363C 0010                  		move.w	#$10,d3
0000D68C 3828 0008                  		move.w	8(a0),d4
0000D690 6100 0000                  		bsr.w	SolidObject
0000D694 6100 0000                  		bsr.w	DisplaySprite
0000D698 3028 0008                  		move.w	8(a0),d0
0000D69C 0240 FF80                  		andi.w	#$FF80,d0
0000D6A0 3238 F700                  		move.w	($FFFFF700).w,d1
0000D6A4 0441 0080                  		subi.w	#$80,d1
0000D6A8 0241 FF80                  		andi.w	#$FF80,d1
0000D6AC 9041                       		sub.w	d1,d0
0000D6AE 0C40 0280                  		cmpi.w	#$280,d0
0000D6B2 6200 0000                  		bhi.w	DeleteObject
0000D6B6 4E75                       		rts	
0000D6B8                            ; ===========================================================================
0000D6B8                            ; ---------------------------------------------------------------------------
0000D6B8                            ; Object 49 - waterfall	sound effect (GHZ)
0000D6B8                            ; ---------------------------------------------------------------------------
0000D6B8                            
0000D6B8                            Obj49:					; XREF: Obj_Index
0000D6B8 7000                       		moveq	#0,d0
0000D6BA 1028 0024                  		move.b	$24(a0),d0
0000D6BE 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000D6C2 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000D6C6                            ; ===========================================================================
0000D6C6 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000D6C8 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000D6CA                            ; ===========================================================================
0000D6CA                            
0000D6CA                            Obj49_Main:				; XREF: Obj49_Index
0000D6CA 5428 0024                  		addq.b	#2,$24(a0)
0000D6CE 117C 0004 0001             		move.b	#4,1(a0)
0000D6D4                            
0000D6D4                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000D6D4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D6D8 0200 003F                  		andi.b	#$3F,d0
0000D6DC 6600                       		bne.s	Obj49_ChkDel
0000D6DE 303C 00D0                  		move.w	#$D0,d0
0000D6E2 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000D6E8                            
0000D6E8                            Obj49_ChkDel:
0000D6E8 3028 0008                  		move.w	8(a0),d0
0000D6EC 0240 FF80                  		andi.w	#$FF80,d0
0000D6F0 3238 F700                  		move.w	($FFFFF700).w,d1
0000D6F4 0441 0080                  		subi.w	#$80,d1
0000D6F8 0241 FF80                  		andi.w	#$FF80,d1
0000D6FC 9041                       		sub.w	d1,d0
0000D6FE 0C40 0280                  		cmpi.w	#$280,d0
0000D702 6200 0000                  		bhi.w	DeleteObject
0000D706 4E75                       		rts	
0000D708                            ; ===========================================================================
0000D708                            ; ---------------------------------------------------------------------------
0000D708                            ; Sprite mappings - purple rock	(GHZ)
0000D708                            ; ---------------------------------------------------------------------------
0000D708                            Map_obj3B:
0000D708                            	include "_maps\obj3B.asm"
0000D708                            ; ---------------------------------------------------------------------------
0000D708                            ; Sprite mappings - purple rock	(GHZ)
0000D708                            ; ---------------------------------------------------------------------------
0000D708 0000                       		dc.w byte_D110-Map_obj3B
0000D70A 02                         byte_D110:	dc.b 2
0000D70B F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D710 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D716 00                         		even
0000D716 00                         		even
0000D716                            
0000D716                            ; ===========================================================================
0000D716                            ; ---------------------------------------------------------------------------
0000D716                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D716                            ; ---------------------------------------------------------------------------
0000D716                            
0000D716                            Obj3C:					; XREF: Obj_Index
0000D716 7000                       		moveq	#0,d0
0000D718 1028 0024                  		move.b	$24(a0),d0
0000D71C 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000D720 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000D724 6000 0000                  		bra.w	MarkObjGone
0000D728                            ; ===========================================================================
0000D728 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000D72A 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000D72C 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000D72E                            ; ===========================================================================
0000D72E                            
0000D72E                            Obj3C_Main:				; XREF: Obj3C_Index
0000D72E 5428 0024                  		addq.b	#2,$24(a0)
0000D732 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000D73A 317C 450F 0002             		move.w	#$450F,2(a0)
0000D740 117C 0004 0001             		move.b	#4,1(a0)
0000D746 117C 0010 0019             		move.b	#$10,$19(a0)
0000D74C 117C 0004 0018             		move.b	#4,$18(a0)
0000D752 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000D758                            
0000D758                            Obj3C_Solid:				; XREF: Obj3C_Index
0000D758 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000D75E 323C 001B                  		move.w	#$1B,d1
0000D762 343C 0020                  		move.w	#$20,d2
0000D766 363C 0020                  		move.w	#$20,d3
0000D76A 3828 0008                  		move.w	8(a0),d4
0000D76E 6100 0000                  		bsr.w	SolidObject
0000D772 0828 0005 0022             		btst	#5,$22(a0)
0000D778 6600                       		bne.s	Obj3C_ChkRoll
0000D77A                            
0000D77A                            locret_D180:
0000D77A 4E75                       		rts	
0000D77C                            ; ===========================================================================
0000D77C                            
0000D77C                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000D77C 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D782 66F6                       		bne.s	locret_D180	; if not, branch
0000D784 3028 0030                  		move.w	$30(a0),d0
0000D788 6A00                       		bpl.s	Obj3C_ChkSpeed
0000D78A 4440                       		neg.w	d0
0000D78C                            
0000D78C                            Obj3C_ChkSpeed:
0000D78C 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D790 65E8                       		bcs.s	locret_D180	; if not, branch
0000D792 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000D798 5869 0008                  		addq.w	#4,8(a1)
0000D79C 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000D7A2 3028 0008                  		move.w	8(a0),d0
0000D7A6 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000D7AA 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000D7AC 5169 0008                  		subq.w	#8,8(a1)
0000D7B0 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000D7B6                            
0000D7B6                            Obj3C_Smash:
0000D7B6 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000D7BC 08A8 0005 0022             		bclr	#5,$22(a0)
0000D7C2 08A9 0005 0022             		bclr	#5,$22(a1)
0000D7C8 7207                       		moveq	#7,d1		; load 8 fragments
0000D7CA 343C 0070                  		move.w	#$70,d2
0000D7CE 6100                       		bsr.s	SmashObject
0000D7D0                            
0000D7D0                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000D7D0 6100 0000                  		bsr.w	SpeedToPos
0000D7D4 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000D7DA 6100 0000                  		bsr.w	DisplaySprite
0000D7DE 4A28 0001                  		tst.b	1(a0)
0000D7E2 6A00 0000                  		bpl.w	DeleteObject
0000D7E6 4E75                       		rts	
0000D7E8                            
0000D7E8                            ; ---------------------------------------------------------------------------
0000D7E8                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000D7E8                            ; ---------------------------------------------------------------------------
0000D7E8                            
0000D7E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D7E8                            
0000D7E8                            
0000D7E8                            SmashObject:				; XREF: Obj3C_Smash
0000D7E8 7000                       		moveq	#0,d0
0000D7EA 1028 001A                  		move.b	$1A(a0),d0
0000D7EE D040                       		add.w	d0,d0
0000D7F0 2668 0004                  		movea.l	4(a0),a3
0000D7F4 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000D7F8 524B                       		addq.w	#1,a3
0000D7FA 08E8 0005 0001             		bset	#5,1(a0)
0000D800 1810                       		move.b	0(a0),d4
0000D802 1A28 0001                  		move.b	1(a0),d5
0000D806 2248                       		movea.l	a0,a1
0000D808 6000                       		bra.s	Smash_LoadFrag
0000D80A                            ; ===========================================================================
0000D80A                            
0000D80A                            Smash_Loop:
0000D80A 6100 0000                  		bsr.w	SingleObjLoad
0000D80E 6600                       		bne.s	Smash_PlaySnd
0000D810 5A4B                       		addq.w	#5,a3
0000D812                            
0000D812                            Smash_LoadFrag:				; XREF: SmashObject
0000D812 137C 0004 0024             		move.b	#4,$24(a1)
0000D818 1284                       		move.b	d4,0(a1)
0000D81A 234B 0004                  		move.l	a3,4(a1)
0000D81E 1345 0001                  		move.b	d5,1(a1)
0000D822 3368 0008 0008             		move.w	8(a0),8(a1)
0000D828 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D82E 3368 0002 0002             		move.w	2(a0),2(a1)
0000D834 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000D83A 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000D840 335C 0010                  		move.w	(a4)+,$10(a1)
0000D844 335C 0012                  		move.w	(a4)+,$12(a1)
0000D848 B3C8                       		cmpa.l	a0,a1
0000D84A 6400                       		bcc.s	loc_D268
0000D84C 2F08                       		move.l	a0,-(sp)
0000D84E 2049                       		movea.l	a1,a0
0000D850 6100 0000                  		bsr.w	SpeedToPos
0000D854 D568 0012                  		add.w	d2,$12(a0)
0000D858 205F                       		movea.l	(sp)+,a0
0000D85A 6100 0000                  		bsr.w	DisplaySprite2
0000D85E                            
0000D85E                            loc_D268:
0000D85E 51C9 FFAA                  		dbf	d1,Smash_Loop
0000D862                            
0000D862                            Smash_PlaySnd:
0000D862 303C 00CB                  		move.w	#$CB,d0
0000D866 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play smashing sound
0000D86C                            ; End of function SmashObject
0000D86C                            
0000D86C                            ; ===========================================================================
0000D86C                            ; Smashed block	fragment speeds
0000D86C                            ;
0000D86C 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000D870 0600 FF00                  		dc.w $600, $FF00
0000D874 0600 0100                  		dc.w $600, $100
0000D878 0400 0500                  		dc.w $400, $500
0000D87C 0600 FA00                  		dc.w $600, $FA00
0000D880 0800 FE00                  		dc.w $800, $FE00
0000D884 0800 0200                  		dc.w $800, $200
0000D888 0600 0600                  		dc.w $600, $600
0000D88C                            
0000D88C FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000D890 F800 FE00                  		dc.w $F800, $FE00
0000D894 F800 0200                  		dc.w $F800, $200
0000D898 FA00 0600                  		dc.w $FA00, $600
0000D89C FC00 FB00                  		dc.w $FC00, $FB00
0000D8A0 FA00 FF00                  		dc.w $FA00, $FF00
0000D8A4 FA00 0100                  		dc.w $FA00, $100
0000D8A8 FC00 0500                  		dc.w $FC00, $500
0000D8AC                            ; ---------------------------------------------------------------------------
0000D8AC                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D8AC                            ; ---------------------------------------------------------------------------
0000D8AC                            Map_obj3C:
0000D8AC                            	include "_maps\obj3C.asm"
0000D8AC                            ; ---------------------------------------------------------------------------
0000D8AC                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D8AC                            ; ---------------------------------------------------------------------------
0000D8AC 0000                       		dc.w byte_D2BC-Map_obj3C
0000D8AE 0000                       		dc.w byte_D2E5-Map_obj3C
0000D8B0 0000                       		dc.w byte_D30E-Map_obj3C
0000D8B2 08                         byte_D2BC:	dc.b 8
0000D8B3 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000D8B8 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000D8BD 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000D8C2 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000D8C7 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D8CC F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D8D1 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D8D6 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D8DB 08                         byte_D2E5:	dc.b 8
0000D8DC E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D8E1 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D8E6 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D8EB 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D8F0 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D8F5 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D8FA 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D8FF 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D904 08                         byte_D30E:	dc.b 8
0000D905 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D90A F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D90F 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D914 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D919 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000D91E F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000D923 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000D928 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000D92E 00                         		even
0000D92E 00                         		even
0000D92E                            
0000D92E                            ; ---------------------------------------------------------------------------
0000D92E                            ; Object code loading subroutine
0000D92E                            ; ---------------------------------------------------------------------------
0000D92E                            
0000D92E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D92E                            
0000D92E                            
0000D92E                            ObjectsLoad:				; XREF: TitleScreen; et al
0000D92E 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000D932 7E7F                       		moveq	#$7F,d7
0000D934 7000                       		moveq	#0,d0
0000D936 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000D93C 6400                       		bcc.s	loc_D362
0000D93E                            
0000D93E                            loc_D348:
0000D93E 1010                       		move.b	(a0),d0		; load object number from RAM
0000D940 6700                       		beq.s	loc_D358
0000D942 D040                       		add.w	d0,d0
0000D944 D040                       		add.w	d0,d0
0000D946 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000D94A 4E91                       		jsr	(a1)		; run the object's code
0000D94C 7000                       		moveq	#0,d0
0000D94E                            
0000D94E                            loc_D358:
0000D94E 41E8 0040                  		lea	$40(a0),a0	; next object
0000D952 51CF FFEA                  		dbf	d7,loc_D348
0000D956 4E75                       		rts	
0000D958                            ; ===========================================================================
0000D958                            
0000D958                            loc_D362:
0000D958 7E1F                       		moveq	#$1F,d7
0000D95A 61E2                       		bsr.s	loc_D348
0000D95C 7E5F                       		moveq	#$5F,d7
0000D95E                            
0000D95E                            loc_D368:
0000D95E 7000                       		moveq	#0,d0
0000D960 1010                       		move.b	(a0),d0
0000D962 6700                       		beq.s	loc_D378
0000D964 4A28 0001                  		tst.b	1(a0)
0000D968 6A00                       		bpl.s	loc_D378
0000D96A 6100 0000                  		bsr.w	DisplaySprite
0000D96E                            
0000D96E                            loc_D378:
0000D96E 41E8 0040                  		lea	$40(a0),a0
0000D972                            
0000D972                            loc_D37C:
0000D972 51CF FFEA                  		dbf	d7,loc_D368
0000D976 4E75                       		rts	
0000D978                            ; End of function ObjectsLoad
0000D978                            
0000D978                            ; ===========================================================================
0000D978                            ; ---------------------------------------------------------------------------
0000D978                            ; Object pointers
0000D978                            ; ---------------------------------------------------------------------------
0000D978                            Obj_Index:
0000D978                            	include "_inc\Object pointers.asm"
0000D978                            ; ---------------------------------------------------------------------------
0000D978                            ; Object pointers
0000D978                            ; ---------------------------------------------------------------------------
0000D978 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000D988 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000D998 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000D9A8 0000 0000 0000 ABC8 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000D9B8 0000 7800 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000D9C8 0000 7E26 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000D9D8 0000 8674 0000 86DC 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000D9E8 0000 8D26 0000 9014 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000D9F8 0000 0000 0000 9CC4 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000DA08 0000 9FFC 0000 A5E8 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000DA18 0000 9920 0000 8DFC 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000DA28 0000 B1B6 0000 A7DC 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000DA38 0000 BBCA 0000 C278 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000DA48 0000 B728 0000 D422 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000DA58 0000 C9FE 0000 CAB8 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000DA68 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000DA78 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DA88 0000 BEE6 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DA98 0000 D6B8 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DAA8 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DAB8 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DAC8 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DAD8 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DAE8 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000DAF8 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000DB08 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000DB18 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000DB28 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000DB38 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000DB48 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000DB58 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000DB68 0000 0000 0000 CCF2 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000DB78 0000 5318 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000DB88 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000DB98 0000 59D2 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DB98 0000 59D2 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DBA8                            
0000DBA8                            ; ---------------------------------------------------------------------------
0000DBA8                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DBA8                            ; ---------------------------------------------------------------------------
0000DBA8                            
0000DBA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBA8                            
0000DBA8                            
0000DBA8                            ObjectFall:
0000DBA8 2428 0008                  		move.l	8(a0),d2
0000DBAC 2628 000C                  		move.l	$C(a0),d3
0000DBB0 3028 0010                  		move.w	$10(a0),d0
0000DBB4 48C0                       		ext.l	d0
0000DBB6 E180                       		asl.l	#8,d0
0000DBB8 D480                       		add.l	d0,d2
0000DBBA 3028 0012                  		move.w	$12(a0),d0
0000DBBE 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000DBC4 48C0                       		ext.l	d0
0000DBC6 E180                       		asl.l	#8,d0
0000DBC8 D680                       		add.l	d0,d3
0000DBCA 2142 0008                  		move.l	d2,8(a0)
0000DBCE 2143 000C                  		move.l	d3,$C(a0)
0000DBD2 4E75                       		rts	
0000DBD4                            ; End of function ObjectFall
0000DBD4                            
0000DBD4                            ; ---------------------------------------------------------------------------
0000DBD4                            ; Subroutine translating object	speed to update	object position
0000DBD4                            ; ---------------------------------------------------------------------------
0000DBD4                            
0000DBD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBD4                            
0000DBD4                            
0000DBD4                            SpeedToPos:
0000DBD4 2428 0008                  		move.l	8(a0),d2
0000DBD8 2628 000C                  		move.l	$C(a0),d3
0000DBDC 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000DBE0 48C0                       		ext.l	d0
0000DBE2 E180                       		asl.l	#8,d0		; multiply speed by $100
0000DBE4 D480                       		add.l	d0,d2		; add to x-axis	position
0000DBE6 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000DBEA 48C0                       		ext.l	d0
0000DBEC E180                       		asl.l	#8,d0		; multiply by $100
0000DBEE D680                       		add.l	d0,d3		; add to y-axis	position
0000DBF0 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000DBF4 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000DBF8 4E75                       		rts	
0000DBFA                            ; End of function SpeedToPos
0000DBFA                            
0000DBFA                            ; ---------------------------------------------------------------------------
0000DBFA                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000DBFA                            ; ---------------------------------------------------------------------------
0000DBFA                            
0000DBFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBFA                            
0000DBFA                            
0000DBFA                            DisplaySprite:
0000DBFA 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000DBFE 3028 0018                  		move.w	$18(a0),d0
0000DC02 E248                       		lsr.w	#1,d0
0000DC04 0240 0380                  		andi.w	#$380,d0
0000DC08 D2C0                       		adda.w	d0,a1
0000DC0A 0C51 007E                  		cmpi.w	#$7E,(a1)
0000DC0E 6400                       		bcc.s	locret_D620
0000DC10 5451                       		addq.w	#2,(a1)
0000DC12 D2D1                       		adda.w	(a1),a1
0000DC14 3288                       		move.w	a0,(a1)
0000DC16                            
0000DC16                            locret_D620:
0000DC16 4E75                       		rts	
0000DC18                            ; End of function DisplaySprite
0000DC18                            
0000DC18                            ; ---------------------------------------------------------------------------
0000DC18                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000DC18                            ; ---------------------------------------------------------------------------
0000DC18                            
0000DC18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DC18                            
0000DC18                            
0000DC18                            DisplaySprite2:
0000DC18 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000DC1C 3029 0018                  		move.w	$18(a1),d0
0000DC20 E248                       		lsr.w	#1,d0
0000DC22 0240 0380                  		andi.w	#$380,d0
0000DC26 D4C0                       		adda.w	d0,a2
0000DC28 0C52 007E                  		cmpi.w	#$7E,(a2)
0000DC2C 6400                       		bcc.s	locret_D63E
0000DC2E 5452                       		addq.w	#2,(a2)
0000DC30 D4D2                       		adda.w	(a2),a2
0000DC32 3489                       		move.w	a1,(a2)
0000DC34                            
0000DC34                            locret_D63E:
0000DC34 4E75                       		rts	
0000DC36                            ; End of function DisplaySprite2
0000DC36                            
0000DC36                            ; ---------------------------------------------------------------------------
0000DC36                            ; Subroutine to	delete an object
0000DC36                            ; ---------------------------------------------------------------------------
0000DC36                            
0000DC36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DC36                            
0000DC36                            
0000DC36                            DeleteObject:
0000DC36 2248                       		movea.l	a0,a1
0000DC38                            
0000DC38                            DeleteObject2:
0000DC38 7200                       		moveq	#0,d1
0000DC3A 700F                       		moveq	#$F,d0
0000DC3C                            
0000DC3C                            loc_D646:
0000DC3C 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000DC3E 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000DC42 4E75                       		rts	
0000DC44                            ; End of function DeleteObject
0000DC44                            
0000DC44                            ; ===========================================================================
0000DC44 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000DC48 00FF F700                  		dc.l $FFF700		; main screen x-position
0000DC4C 00FF F708                  		dc.l $FFF708		; background x-position	1
0000DC50 00FF F718                  		dc.l $FFF718		; background x-position	2
0000DC54                            ; ---------------------------------------------------------------------------
0000DC54                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000DC54                            ; ---------------------------------------------------------------------------
0000DC54                            
0000DC54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DC54                            
0000DC54                            
0000DC54                            BuildSprites:				; XREF: TitleScreen; et al
0000DC54 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000DC58 7A00                       		moveq	#0,d5
0000DC5A 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000DC5E 7E07                       		moveq	#7,d7
0000DC60                            
0000DC60                            loc_D66A:
0000DC60 4A54                       		tst.w	(a4)
0000DC62 6700 0000                  		beq.w	loc_D72E
0000DC66 7C02                       		moveq	#2,d6
0000DC68                            
0000DC68                            loc_D672:
0000DC68 3074 6000                  		movea.w	(a4,d6.w),a0
0000DC6C 4A10                       		tst.b	(a0)
0000DC6E 6700 0000                  		beq.w	loc_D726
0000DC72 08A8 0007 0001             		bclr	#7,1(a0)
0000DC78 1028 0001                  		move.b	1(a0),d0
0000DC7C 1800                       		move.b	d0,d4
0000DC7E 0240 000C                  		andi.w	#$C,d0
0000DC82 6700                       		beq.s	loc_D6DE
0000DC84 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000DC88 7000                       		moveq	#0,d0
0000DC8A 1028 0019                  		move.b	$19(a0),d0
0000DC8E 3628 0008                  		move.w	8(a0),d3
0000DC92 9651                       		sub.w	(a1),d3
0000DC94 3203                       		move.w	d3,d1
0000DC96 D240                       		add.w	d0,d1
0000DC98 6B00 0000                  		bmi.w	loc_D726
0000DC9C 3203                       		move.w	d3,d1
0000DC9E 9240                       		sub.w	d0,d1
0000DCA0 0C41 0140                  		cmpi.w	#$140,d1
0000DCA4 6C00                       		bge.s	loc_D726
0000DCA6 0643 0080                  		addi.w	#$80,d3
0000DCAA 0804 0004                  		btst	#4,d4
0000DCAE 6700                       		beq.s	loc_D6E8
0000DCB0 7000                       		moveq	#0,d0
0000DCB2 1028 0016                  		move.b	$16(a0),d0
0000DCB6 3428 000C                  		move.w	$C(a0),d2
0000DCBA 9469 0004                  		sub.w	4(a1),d2
0000DCBE 3202                       		move.w	d2,d1
0000DCC0 D240                       		add.w	d0,d1
0000DCC2 6B00                       		bmi.s	loc_D726
0000DCC4 3202                       		move.w	d2,d1
0000DCC6 9240                       		sub.w	d0,d1
0000DCC8 0C41 00E0                  		cmpi.w	#$E0,d1
0000DCCC 6C00                       		bge.s	loc_D726
0000DCCE 0642 0080                  		addi.w	#$80,d2
0000DCD2 6000                       		bra.s	loc_D700
0000DCD4                            ; ===========================================================================
0000DCD4                            
0000DCD4                            loc_D6DE:
0000DCD4 3428 000A                  		move.w	$A(a0),d2
0000DCD8 3628 0008                  		move.w	8(a0),d3
0000DCDC 6000                       		bra.s	loc_D700
0000DCDE                            ; ===========================================================================
0000DCDE                            
0000DCDE                            loc_D6E8:
0000DCDE 3428 000C                  		move.w	$C(a0),d2
0000DCE2 9469 0004                  		sub.w	4(a1),d2
0000DCE6 0642 0080                  		addi.w	#$80,d2
0000DCEA 0C42 0060                  		cmpi.w	#$60,d2
0000DCEE 6500                       		bcs.s	loc_D726
0000DCF0 0C42 0180                  		cmpi.w	#$180,d2
0000DCF4 6400                       		bcc.s	loc_D726
0000DCF6                            
0000DCF6                            loc_D700:
0000DCF6 2268 0004                  		movea.l	4(a0),a1
0000DCFA 7200                       		moveq	#0,d1
0000DCFC 0804 0005                  		btst	#5,d4
0000DD00 6600                       		bne.s	loc_D71C
0000DD02 1228 001A                  		move.b	$1A(a0),d1
0000DD06 D201                       		add.b	d1,d1
0000DD08 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000DD0C 1219                       		move.b	(a1)+,d1
0000DD0E 5301                       		subq.b	#1,d1
0000DD10 6B00                       		bmi.s	loc_D720
0000DD12                            
0000DD12                            loc_D71C:
0000DD12 6100 0000                  		bsr.w	sub_D750
0000DD16                            
0000DD16                            loc_D720:
0000DD16 08E8 0007 0001             		bset	#7,1(a0)
0000DD1C                            
0000DD1C                            loc_D726:
0000DD1C 5446                       		addq.w	#2,d6
0000DD1E 5554                       		subq.w	#2,(a4)
0000DD20 6600 FF46                  		bne.w	loc_D672
0000DD24                            
0000DD24                            loc_D72E:
0000DD24 49EC 0080                  		lea	$80(a4),a4
0000DD28 51CF FF36                  		dbf	d7,loc_D66A
0000DD2C 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000DD30 0C05 0050                  		cmpi.b	#$50,d5
0000DD34 6700                       		beq.s	loc_D748
0000DD36 24BC 0000 0000             		move.l	#0,(a2)
0000DD3C 4E75                       		rts	
0000DD3E                            ; ===========================================================================
0000DD3E                            
0000DD3E                            loc_D748:
0000DD3E 157C 0000 FFFB             		move.b	#0,-5(a2)
0000DD44 4E75                       		rts	
0000DD46                            ; End of function BuildSprites
0000DD46                            
0000DD46                            
0000DD46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD46                            
0000DD46                            
0000DD46                            sub_D750:				; XREF: BuildSprites
0000DD46 3668 0002                  		movea.w	2(a0),a3
0000DD4A 0804 0000                  		btst	#0,d4
0000DD4E 6600                       		bne.s	loc_D796
0000DD50 0804 0001                  		btst	#1,d4
0000DD54 6600 0000                  		bne.w	loc_D7E4
0000DD58                            ; End of function sub_D750
0000DD58                            
0000DD58                            
0000DD58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD58                            
0000DD58                            
0000DD58                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000DD58 0C05 0050                  		cmpi.b	#$50,d5
0000DD5C 6700                       		beq.s	locret_D794
0000DD5E 1019                       		move.b	(a1)+,d0
0000DD60 4880                       		ext.w	d0
0000DD62 D042                       		add.w	d2,d0
0000DD64 34C0                       		move.w	d0,(a2)+
0000DD66 14D9                       		move.b	(a1)+,(a2)+
0000DD68 5205                       		addq.b	#1,d5
0000DD6A 14C5                       		move.b	d5,(a2)+
0000DD6C 1019                       		move.b	(a1)+,d0
0000DD6E E148                       		lsl.w	#8,d0
0000DD70 1019                       		move.b	(a1)+,d0
0000DD72 D04B                       		add.w	a3,d0
0000DD74 34C0                       		move.w	d0,(a2)+
0000DD76 1019                       		move.b	(a1)+,d0
0000DD78 4880                       		ext.w	d0
0000DD7A D043                       		add.w	d3,d0
0000DD7C 0240 01FF                  		andi.w	#$1FF,d0
0000DD80 6600                       		bne.s	loc_D78E
0000DD82 5240                       		addq.w	#1,d0
0000DD84                            
0000DD84                            loc_D78E:
0000DD84 34C0                       		move.w	d0,(a2)+
0000DD86 51C9 FFD0                  		dbf	d1,sub_D762
0000DD8A                            
0000DD8A                            locret_D794:
0000DD8A 4E75                       		rts	
0000DD8C                            ; End of function sub_D762
0000DD8C                            
0000DD8C                            ; ===========================================================================
0000DD8C                            
0000DD8C                            loc_D796:
0000DD8C 0804 0001                  		btst	#1,d4
0000DD90 6600 0000                  		bne.w	loc_D82A
0000DD94                            
0000DD94                            loc_D79E:
0000DD94 0C05 0050                  		cmpi.b	#$50,d5
0000DD98 6700                       		beq.s	locret_D7E2
0000DD9A 1019                       		move.b	(a1)+,d0
0000DD9C 4880                       		ext.w	d0
0000DD9E D042                       		add.w	d2,d0
0000DDA0 34C0                       		move.w	d0,(a2)+
0000DDA2 1819                       		move.b	(a1)+,d4
0000DDA4 14C4                       		move.b	d4,(a2)+
0000DDA6 5205                       		addq.b	#1,d5
0000DDA8 14C5                       		move.b	d5,(a2)+
0000DDAA 1019                       		move.b	(a1)+,d0
0000DDAC E148                       		lsl.w	#8,d0
0000DDAE 1019                       		move.b	(a1)+,d0
0000DDB0 D04B                       		add.w	a3,d0
0000DDB2 0A40 0800                  		eori.w	#$800,d0
0000DDB6 34C0                       		move.w	d0,(a2)+
0000DDB8 1019                       		move.b	(a1)+,d0
0000DDBA 4880                       		ext.w	d0
0000DDBC 4440                       		neg.w	d0
0000DDBE D804                       		add.b	d4,d4
0000DDC0 0244 0018                  		andi.w	#$18,d4
0000DDC4 5044                       		addq.w	#8,d4
0000DDC6 9044                       		sub.w	d4,d0
0000DDC8 D043                       		add.w	d3,d0
0000DDCA 0240 01FF                  		andi.w	#$1FF,d0
0000DDCE 6600                       		bne.s	loc_D7DC
0000DDD0 5240                       		addq.w	#1,d0
0000DDD2                            
0000DDD2                            loc_D7DC:
0000DDD2 34C0                       		move.w	d0,(a2)+
0000DDD4 51C9 FFBE                  		dbf	d1,loc_D79E
0000DDD8                            
0000DDD8                            locret_D7E2:
0000DDD8 4E75                       		rts	
0000DDDA                            ; ===========================================================================
0000DDDA                            
0000DDDA                            loc_D7E4:				; XREF: sub_D750
0000DDDA 0C05 0050                  		cmpi.b	#$50,d5
0000DDDE 6700                       		beq.s	locret_D828
0000DDE0 1019                       		move.b	(a1)+,d0
0000DDE2 1811                       		move.b	(a1),d4
0000DDE4 4880                       		ext.w	d0
0000DDE6 4440                       		neg.w	d0
0000DDE8 E70C                       		lsl.b	#3,d4
0000DDEA 0244 0018                  		andi.w	#$18,d4
0000DDEE 5044                       		addq.w	#8,d4
0000DDF0 9044                       		sub.w	d4,d0
0000DDF2 D042                       		add.w	d2,d0
0000DDF4 34C0                       		move.w	d0,(a2)+
0000DDF6 14D9                       		move.b	(a1)+,(a2)+
0000DDF8 5205                       		addq.b	#1,d5
0000DDFA 14C5                       		move.b	d5,(a2)+
0000DDFC 1019                       		move.b	(a1)+,d0
0000DDFE E148                       		lsl.w	#8,d0
0000DE00 1019                       		move.b	(a1)+,d0
0000DE02 D04B                       		add.w	a3,d0
0000DE04 0A40 1000                  		eori.w	#$1000,d0
0000DE08 34C0                       		move.w	d0,(a2)+
0000DE0A 1019                       		move.b	(a1)+,d0
0000DE0C 4880                       		ext.w	d0
0000DE0E D043                       		add.w	d3,d0
0000DE10 0240 01FF                  		andi.w	#$1FF,d0
0000DE14 6600                       		bne.s	loc_D822
0000DE16 5240                       		addq.w	#1,d0
0000DE18                            
0000DE18                            loc_D822:
0000DE18 34C0                       		move.w	d0,(a2)+
0000DE1A 51C9 FFBE                  		dbf	d1,loc_D7E4
0000DE1E                            
0000DE1E                            locret_D828:
0000DE1E 4E75                       		rts	
0000DE20                            ; ===========================================================================
0000DE20                            
0000DE20                            loc_D82A:
0000DE20 0C05 0050                  		cmpi.b	#$50,d5
0000DE24 6700                       		beq.s	locret_D87C
0000DE26 1019                       		move.b	(a1)+,d0
0000DE28 1811                       		move.b	(a1),d4
0000DE2A 4880                       		ext.w	d0
0000DE2C 4440                       		neg.w	d0
0000DE2E E70C                       		lsl.b	#3,d4
0000DE30 0244 0018                  		andi.w	#$18,d4
0000DE34 5044                       		addq.w	#8,d4
0000DE36 9044                       		sub.w	d4,d0
0000DE38 D042                       		add.w	d2,d0
0000DE3A 34C0                       		move.w	d0,(a2)+
0000DE3C 1819                       		move.b	(a1)+,d4
0000DE3E 14C4                       		move.b	d4,(a2)+
0000DE40 5205                       		addq.b	#1,d5
0000DE42 14C5                       		move.b	d5,(a2)+
0000DE44 1019                       		move.b	(a1)+,d0
0000DE46 E148                       		lsl.w	#8,d0
0000DE48 1019                       		move.b	(a1)+,d0
0000DE4A D04B                       		add.w	a3,d0
0000DE4C 0A40 1800                  		eori.w	#$1800,d0
0000DE50 34C0                       		move.w	d0,(a2)+
0000DE52 1019                       		move.b	(a1)+,d0
0000DE54 4880                       		ext.w	d0
0000DE56 4440                       		neg.w	d0
0000DE58 D804                       		add.b	d4,d4
0000DE5A 0244 0018                  		andi.w	#$18,d4
0000DE5E 5044                       		addq.w	#8,d4
0000DE60 9044                       		sub.w	d4,d0
0000DE62 D043                       		add.w	d3,d0
0000DE64 0240 01FF                  		andi.w	#$1FF,d0
0000DE68 6600                       		bne.s	loc_D876
0000DE6A 5240                       		addq.w	#1,d0
0000DE6C                            
0000DE6C                            loc_D876:
0000DE6C 34C0                       		move.w	d0,(a2)+
0000DE6E 51C9 FFB0                  		dbf	d1,loc_D82A
0000DE72                            
0000DE72                            locret_D87C:
0000DE72 4E75                       		rts	
0000DE74                            ; ---------------------------------------------------------------------------
0000DE74                            ; Subroutine to	check if an object is on the screen
0000DE74                            ; ---------------------------------------------------------------------------
0000DE74                            
0000DE74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE74                            
0000DE74                            
0000DE74                            ChkObjOnScreen:
0000DE74 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000DE78 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000DE7C 6B00                       		bmi.s	NotOnScreen
0000DE7E 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000DE82 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DE84                            
0000DE84 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000DE88 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000DE8C 6B00                       		bmi.s	NotOnScreen
0000DE8E 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000DE92 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DE94                            
0000DE94 7000                       		moveq	#0,d0		; set flag to 0
0000DE96 4E75                       		rts	
0000DE98                            ; ===========================================================================
0000DE98                            
0000DE98                            NotOnScreen:				; XREF: ChkObjOnScreen
0000DE98 7001                       		moveq	#1,d0		; set flag to 1
0000DE9A 4E75                       		rts	
0000DE9C                            ; End of function ChkObjOnScreen
0000DE9C                            
0000DE9C                            
0000DE9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE9C                            
0000DE9C                            
0000DE9C                            ChkObjOnScreen2:
0000DE9C 7200                       		moveq	#0,d1
0000DE9E 1228 0019                  		move.b	$19(a0),d1
0000DEA2 3028 0008                  		move.w	8(a0),d0
0000DEA6 9078 F700                  		sub.w	($FFFFF700).w,d0
0000DEAA D041                       		add.w	d1,d0
0000DEAC 6B00                       		bmi.s	NotOnScreen2
0000DEAE D241                       		add.w	d1,d1
0000DEB0 9041                       		sub.w	d1,d0
0000DEB2 0C40 0140                  		cmpi.w	#320,d0
0000DEB6 6C00                       		bge.s	NotOnScreen2
0000DEB8                            
0000DEB8 3228 000C                  		move.w	$C(a0),d1
0000DEBC 9278 F704                  		sub.w	($FFFFF704).w,d1
0000DEC0 6B00                       		bmi.s	NotOnScreen2
0000DEC2 0C41 00E0                  		cmpi.w	#224,d1
0000DEC6 6C00                       		bge.s	NotOnScreen2
0000DEC8                            
0000DEC8 7000                       		moveq	#0,d0
0000DECA 4E75                       		rts	
0000DECC                            ; ===========================================================================
0000DECC                            
0000DECC                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000DECC 7001                       		moveq	#1,d0
0000DECE 4E75                       		rts	
0000DED0                            ; End of function ChkObjOnScreen2
0000DED0                            
0000DED0                            ; ---------------------------------------------------------------------------
0000DED0                            ; Subroutine to	load a level's objects
0000DED0                            ; ---------------------------------------------------------------------------
0000DED0                            
0000DED0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DED0                            
0000DED0                            
0000DED0                            ObjPosLoad:				; XREF: Level; et al
0000DED0 7000                       		moveq	#0,d0
0000DED2 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000DED6 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000DEDA 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000DEDE                            ; End of function ObjPosLoad
0000DEDE                            
0000DEDE                            ; ===========================================================================
0000DEDE 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000DEE0 0000                       		dc.w OPL_Next-OPL_Index
0000DEE2                            ; ===========================================================================
0000DEE2                            
0000DEE2                            OPL_Main:				; XREF: OPL_Index
0000DEE2 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000DEE6 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000DEEA ED08                       		lsl.b	#6,d0
0000DEEC E848                       		lsr.w	#4,d0
0000DEEE 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000DEF4 2248                       		movea.l	a0,a1
0000DEF6 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000DEFA 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DEFE 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DF02 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000DF06 21C9 F778                  		move.l	a1,($FFFFF778).w
0000DF0A 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000DF0E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DF12 34FC 0101                  		move.w	#$101,(a2)+
0000DF16 303C 005E                  		move.w	#$5E,d0
0000DF1A                            
0000DF1A                            OPL_ClrList:
0000DF1A 429A                       		clr.l	(a2)+
0000DF1C 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000DF20                            
0000DF20 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DF24 7400                       		moveq	#0,d2
0000DF26 3C38 F700                  		move.w	($FFFFF700).w,d6
0000DF2A 0446 0080                  		subi.w	#$80,d6
0000DF2E 6400                       		bcc.s	loc_D93C
0000DF30 7C00                       		moveq	#0,d6
0000DF32                            
0000DF32                            loc_D93C:
0000DF32 0246 FF80                  		andi.w	#$FF80,d6
0000DF36 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DF3A                            
0000DF3A                            loc_D944:
0000DF3A BC50                       		cmp.w	(a0),d6
0000DF3C 6300                       		bls.s	loc_D956
0000DF3E 4A28 0004                  		tst.b	4(a0)
0000DF42 6A00                       		bpl.s	loc_D952
0000DF44 1412                       		move.b	(a2),d2
0000DF46 5212                       		addq.b	#1,(a2)
0000DF48                            
0000DF48                            loc_D952:
0000DF48 5C48                       		addq.w	#6,a0
0000DF4A 60EE                       		bra.s	loc_D944
0000DF4C                            ; ===========================================================================
0000DF4C                            
0000DF4C                            loc_D956:
0000DF4C 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DF50 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DF54 0446 0080                  		subi.w	#$80,d6
0000DF58 6500                       		bcs.s	loc_D976
0000DF5A                            
0000DF5A                            loc_D964:
0000DF5A BC50                       		cmp.w	(a0),d6
0000DF5C 6300                       		bls.s	loc_D976
0000DF5E 4A28 0004                  		tst.b	4(a0)
0000DF62 6A00                       		bpl.s	loc_D972
0000DF64 522A 0001                  		addq.b	#1,1(a2)
0000DF68                            
0000DF68                            loc_D972:
0000DF68 5C48                       		addq.w	#6,a0
0000DF6A 60EE                       		bra.s	loc_D964
0000DF6C                            ; ===========================================================================
0000DF6C                            
0000DF6C                            loc_D976:
0000DF6C 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DF70 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000DF76                            
0000DF76                            OPL_Next:				; XREF: OPL_Index
0000DF76 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DF7A 7400                       		moveq	#0,d2
0000DF7C 3C38 F700                  		move.w	($FFFFF700).w,d6
0000DF80 0246 FF80                  		andi.w	#$FF80,d6
0000DF84 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000DF88 6700 0000                  		beq.w	locret_DA3A
0000DF8C 6C00                       		bge.s	loc_D9F6
0000DF8E 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000DF92 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DF96 0446 0080                  		subi.w	#$80,d6
0000DF9A 6500                       		bcs.s	loc_D9D2
0000DF9C                            
0000DF9C                            loc_D9A6:
0000DF9C BC68 FFFA                  		cmp.w	-6(a0),d6
0000DFA0 6C00                       		bge.s	loc_D9D2
0000DFA2 5D48                       		subq.w	#6,a0
0000DFA4 4A28 0004                  		tst.b	4(a0)
0000DFA8 6A00                       		bpl.s	loc_D9BC
0000DFAA 532A 0001                  		subq.b	#1,1(a2)
0000DFAE 142A 0001                  		move.b	1(a2),d2
0000DFB2                            
0000DFB2                            loc_D9BC:
0000DFB2 6100 0000                  		bsr.w	loc_DA3C
0000DFB6 6600                       		bne.s	loc_D9C6
0000DFB8 5D48                       		subq.w	#6,a0
0000DFBA 60E0                       		bra.s	loc_D9A6
0000DFBC                            ; ===========================================================================
0000DFBC                            
0000DFBC                            loc_D9C6:
0000DFBC 4A28 0004                  		tst.b	4(a0)
0000DFC0 6A00                       		bpl.s	loc_D9D0
0000DFC2 522A 0001                  		addq.b	#1,1(a2)
0000DFC6                            
0000DFC6                            loc_D9D0:
0000DFC6 5C48                       		addq.w	#6,a0
0000DFC8                            
0000DFC8                            loc_D9D2:
0000DFC8 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DFCC 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DFD0 0646 0300                  		addi.w	#$300,d6
0000DFD4                            
0000DFD4                            loc_D9DE:
0000DFD4 BC68 FFFA                  		cmp.w	-6(a0),d6
0000DFD8 6E00                       		bgt.s	loc_D9F0
0000DFDA 4A28 FFFE                  		tst.b	-2(a0)
0000DFDE 6A00                       		bpl.s	loc_D9EC
0000DFE0 5312                       		subq.b	#1,(a2)
0000DFE2                            
0000DFE2                            loc_D9EC:
0000DFE2 5D48                       		subq.w	#6,a0
0000DFE4 60EE                       		bra.s	loc_D9DE
0000DFE6                            ; ===========================================================================
0000DFE6                            
0000DFE6                            loc_D9F0:
0000DFE6 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DFEA 4E75                       		rts	
0000DFEC                            ; ===========================================================================
0000DFEC                            
0000DFEC                            loc_D9F6:
0000DFEC 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000DFF0 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DFF4 0646 0280                  		addi.w	#$280,d6
0000DFF8                            
0000DFF8                            loc_DA02:
0000DFF8 BC50                       		cmp.w	(a0),d6
0000DFFA 6300                       		bls.s	loc_DA16
0000DFFC 4A28 0004                  		tst.b	4(a0)
0000E000 6A00                       		bpl.s	loc_DA10
0000E002 1412                       		move.b	(a2),d2
0000E004 5212                       		addq.b	#1,(a2)
0000E006                            
0000E006                            loc_DA10:
0000E006 6100 0000                  		bsr.w	loc_DA3C
0000E00A 67EC                       		beq.s	loc_DA02
0000E00C                            
0000E00C                            loc_DA16:
0000E00C 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E010 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E014 0446 0300                  		subi.w	#$300,d6
0000E018 6500                       		bcs.s	loc_DA36
0000E01A                            
0000E01A                            loc_DA24:
0000E01A BC50                       		cmp.w	(a0),d6
0000E01C 6300                       		bls.s	loc_DA36
0000E01E 4A28 0004                  		tst.b	4(a0)
0000E022 6A00                       		bpl.s	loc_DA32
0000E024 522A 0001                  		addq.b	#1,1(a2)
0000E028                            
0000E028                            loc_DA32:
0000E028 5C48                       		addq.w	#6,a0
0000E02A 60EE                       		bra.s	loc_DA24
0000E02C                            ; ===========================================================================
0000E02C                            
0000E02C                            loc_DA36:
0000E02C 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E030                            
0000E030                            locret_DA3A:
0000E030 4E75                       		rts	
0000E032                            ; ===========================================================================
0000E032                            
0000E032                            loc_DA3C:
0000E032 4A28 0004                  		tst.b	4(a0)
0000E036 6A00                       		bpl.s	OPL_MakeItem
0000E038 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000E03E 6700                       		beq.s	OPL_MakeItem
0000E040 5C48                       		addq.w	#6,a0
0000E042 7000                       		moveq	#0,d0
0000E044 4E75                       		rts	
0000E046                            ; ===========================================================================
0000E046                            
0000E046                            OPL_MakeItem:
0000E046 6100 0000                  		bsr.w	SingleObjLoad
0000E04A 6600                       		bne.s	locret_DA8A
0000E04C 3358 0008                  		move.w	(a0)+,8(a1)
0000E050 3018                       		move.w	(a0)+,d0
0000E052 3200                       		move.w	d0,d1
0000E054 0240 0FFF                  		andi.w	#$FFF,d0
0000E058 3340 000C                  		move.w	d0,$C(a1)
0000E05C E559                       		rol.w	#2,d1
0000E05E 0201 0003                  		andi.b	#3,d1
0000E062 1341 0001                  		move.b	d1,1(a1)
0000E066 1341 0022                  		move.b	d1,$22(a1)
0000E06A 1018                       		move.b	(a0)+,d0
0000E06C 6A00                       		bpl.s	loc_DA80
0000E06E 0200 007F                  		andi.b	#$7F,d0
0000E072 1342 0023                  		move.b	d2,$23(a1)
0000E076                            
0000E076                            loc_DA80:
0000E076 1280                       		move.b	d0,0(a1)
0000E078 1358 0028                  		move.b	(a0)+,$28(a1)
0000E07C 7000                       		moveq	#0,d0
0000E07E                            
0000E07E                            locret_DA8A:
0000E07E 4E75                       		rts	
0000E080                            ; ---------------------------------------------------------------------------
0000E080                            ; Single object	loading	subroutine
0000E080                            ; ---------------------------------------------------------------------------
0000E080                            
0000E080                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E080                            
0000E080                            
0000E080                            SingleObjLoad:
0000E080 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E084 303C 005F                  		move.w	#$5F,d0
0000E088                            
0000E088                            loc_DA94:
0000E088 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E08A 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E08C 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E090 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E094                            
0000E094                            locret_DAA0:
0000E094 4E75                       		rts	
0000E096                            ; End of function SingleObjLoad
0000E096                            
0000E096                            
0000E096                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E096                            
0000E096                            
0000E096                            SingleObjLoad2:
0000E096 2248                       		movea.l	a0,a1
0000E098 303C F000                  		move.w	#-$1000,d0
0000E09C 9048                       		sub.w	a0,d0
0000E09E EC48                       		lsr.w	#6,d0
0000E0A0 5340                       		subq.w	#1,d0
0000E0A2 6500                       		bcs.s	locret_DABC
0000E0A4                            
0000E0A4                            loc_DAB0:
0000E0A4 4A11                       		tst.b	(a1)
0000E0A6 6700                       		beq.s	locret_DABC
0000E0A8 43E9 0040                  		lea	$40(a1),a1
0000E0AC 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E0B0                            
0000E0B0                            locret_DABC:
0000E0B0 4E75                       		rts	
0000E0B2                            ; End of function SingleObjLoad2
0000E0B2                            
0000E0B2                            ; ===========================================================================
0000E0B2                            ; ---------------------------------------------------------------------------
0000E0B2                            ; Object 41 - springs
0000E0B2                            ; ---------------------------------------------------------------------------
0000E0B2                            
0000E0B2                            Obj41:					; XREF: Obj_Index
0000E0B2 7000                       		moveq	#0,d0
0000E0B4 1028 0024                  		move.b	$24(a0),d0
0000E0B8 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E0BC 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E0C0 6100 FB38                  		bsr.w	DisplaySprite
0000E0C4 3028 0008                  		move.w	8(a0),d0
0000E0C8 0240 FF80                  		andi.w	#$FF80,d0
0000E0CC 3238 F700                  		move.w	($FFFFF700).w,d1
0000E0D0 0441 0080                  		subi.w	#$80,d1
0000E0D4 0241 FF80                  		andi.w	#$FF80,d1
0000E0D8 9041                       		sub.w	d1,d0
0000E0DA 0C40 0280                  		cmpi.w	#$280,d0
0000E0DE 6200 FB56                  		bhi.w	DeleteObject
0000E0E2 4E75                       		rts	
0000E0E4                            ; ===========================================================================
0000E0E4 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E0E6 0000                       		dc.w Obj41_Up-Obj41_Index
0000E0E8 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E0EA 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E0EC 0000                       		dc.w Obj41_LR-Obj41_Index
0000E0EE 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E0F0 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E0F2 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E0F4 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E0F6 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E0F8                            
0000E0F8 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E0FA F600                       		dc.w -$A00		; power	of yellow spring
0000E0FC                            ; ===========================================================================
0000E0FC                            
0000E0FC                            Obj41_Main:				; XREF: Obj41_Index
0000E0FC 5428 0024                  		addq.b	#2,$24(a0)
0000E100 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E108 317C 0523 0002             		move.w	#$523,2(a0)
0000E10E 0028 0004 0001             		ori.b	#4,1(a0)
0000E114 117C 0010 0019             		move.b	#$10,$19(a0)
0000E11A 117C 0004 0018             		move.b	#4,$18(a0)
0000E120 1028 0028                  		move.b	$28(a0),d0
0000E124 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E128 6700                       		beq.s	loc_DB54	; if not, branch
0000E12A 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E130 117C 0001 001C             		move.b	#1,$1C(a0)
0000E136 117C 0003 001A             		move.b	#3,$1A(a0)
0000E13C 317C 0533 0002             		move.w	#$533,2(a0)
0000E142 117C 0008 0019             		move.b	#8,$19(a0)
0000E148                            
0000E148                            loc_DB54:
0000E148 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E14C 6700                       		beq.s	loc_DB66	; if not, branch
0000E14E 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E154 08E8 0001 0022             		bset	#1,$22(a0)
0000E15A                            
0000E15A                            loc_DB66:
0000E15A 0800 0001                  		btst	#1,d0
0000E15E 6700                       		beq.s	loc_DB72
0000E160 08E8 0005 0002             		bset	#5,2(a0)
0000E166                            
0000E166                            loc_DB72:
0000E166 0240 000F                  		andi.w	#$F,d0
0000E16A 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E170 4E75                       		rts	
0000E172                            ; ===========================================================================
0000E172                            
0000E172                            Obj41_Up:				; XREF: Obj41_Index
0000E172 323C 001B                  		move.w	#$1B,d1
0000E176 343C 0008                  		move.w	#8,d2
0000E17A 363C 0010                  		move.w	#$10,d3
0000E17E 3828 0008                  		move.w	8(a0),d4
0000E182 6100 0000                  		bsr.w	SolidObject
0000E186 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E18A 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E18C 4E75                       		rts	
0000E18E                            ; ===========================================================================
0000E18E                            
0000E18E                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E18E 5428 0024                  		addq.b	#2,$24(a0)
0000E192 5069 000C                  		addq.w	#8,$C(a1)
0000E196 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E19C 08E9 0001 0022             		bset	#1,$22(a1)
0000E1A2 08A9 0003 0022             		bclr	#3,$22(a1)
0000E1A8 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E1AE 137C 0002 0024             		move.b	#2,$24(a1)
0000E1B4 08A8 0003 0022             		bclr	#3,$22(a0)
0000E1BA 4228 0025                  		clr.b	$25(a0)
0000E1BE 303C 00CC                  		move.w	#$CC,d0
0000E1C2 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
0000E1C8                            
0000E1C8                            Obj41_AniUp:				; XREF: Obj41_Index
0000E1C8 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E1CE 6000 CAF4                  		bra.w	AnimateSprite
0000E1D2                            ; ===========================================================================
0000E1D2                            
0000E1D2                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E1D2 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E1D8 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E1DC 4E75                       		rts	
0000E1DE                            ; ===========================================================================
0000E1DE                            
0000E1DE                            Obj41_LR:				; XREF: Obj41_Index
0000E1DE 323C 0013                  		move.w	#$13,d1
0000E1E2 343C 000E                  		move.w	#$E,d2
0000E1E6 363C 000F                  		move.w	#$F,d3
0000E1EA 3828 0008                  		move.w	8(a0),d4
0000E1EE 6100 0000                  		bsr.w	SolidObject
0000E1F2 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E1F8 6600                       		bne.s	loc_DC0C
0000E1FA 117C 0008 0024             		move.b	#8,$24(a0)
0000E200                            
0000E200                            loc_DC0C:
0000E200 0828 0005 0022             		btst	#5,$22(a0)
0000E206 6600                       		bne.s	Obj41_BounceLR
0000E208 4E75                       		rts	
0000E20A                            ; ===========================================================================
0000E20A                            
0000E20A                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E20A 5428 0024                  		addq.b	#2,$24(a0)
0000E20E 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E214 5069 0008                  		addq.w	#8,8(a1)
0000E218 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E21E 6600                       		bne.s	loc_DC36	; if yes, branch
0000E220 0469 0010 0008             		subi.w	#$10,8(a1)
0000E226 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E22A                            
0000E22A                            loc_DC36:
0000E22A 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E230 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E236 0869 0000 0022             		bchg	#0,$22(a1)
0000E23C 0829 0002 0022             		btst	#2,$22(a1)
0000E242 6600                       		bne.s	loc_DC56
0000E244 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E24A                            
0000E24A                            loc_DC56:
0000E24A 08A8 0005 0022             		bclr	#5,$22(a0)
0000E250 08A9 0005 0022             		bclr	#5,$22(a1)
0000E256 303C 00CC                  		move.w	#$CC,d0
0000E25A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
0000E260                            
0000E260                            Obj41_AniLR:				; XREF: Obj41_Index
0000E260 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E266 6000 CA5C                  		bra.w	AnimateSprite
0000E26A                            ; ===========================================================================
0000E26A                            
0000E26A                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E26A 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E270 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E274 4E75                       		rts	
0000E276                            ; ===========================================================================
0000E276                            
0000E276                            Obj41_Dwn:				; XREF: Obj41_Index
0000E276 323C 001B                  		move.w	#$1B,d1
0000E27A 343C 0008                  		move.w	#8,d2
0000E27E 363C 0010                  		move.w	#$10,d3
0000E282 3828 0008                  		move.w	8(a0),d4
0000E286 6100 0000                  		bsr.w	SolidObject
0000E28A 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E290 6600                       		bne.s	loc_DCA4
0000E292 117C 000E 0024             		move.b	#$E,$24(a0)
0000E298                            
0000E298                            loc_DCA4:
0000E298 4A28 0025                  		tst.b	$25(a0)
0000E29C 6600                       		bne.s	locret_DCAE
0000E29E 4A44                       		tst.w	d4
0000E2A0 6B00                       		bmi.s	Obj41_BounceDwn
0000E2A2                            
0000E2A2                            locret_DCAE:
0000E2A2 4E75                       		rts	
0000E2A4                            ; ===========================================================================
0000E2A4                            
0000E2A4                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E2A4 5428 0024                  		addq.b	#2,$24(a0)
0000E2A8 5169 000C                  		subq.w	#8,$C(a1)
0000E2AC 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E2B2 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E2B6 08E9 0001 0022             		bset	#1,$22(a1)
0000E2BC 08A9 0003 0022             		bclr	#3,$22(a1)
0000E2C2 137C 0002 0024             		move.b	#2,$24(a1)
0000E2C8 08A8 0003 0022             		bclr	#3,$22(a0)
0000E2CE 4228 0025                  		clr.b	$25(a0)
0000E2D2 303C 00CC                  		move.w	#$CC,d0
0000E2D6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
0000E2DC                            
0000E2DC                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E2DC 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E2E2 6000 C9E0                  		bra.w	AnimateSprite
0000E2E6                            ; ===========================================================================
0000E2E6                            
0000E2E6                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E2E6 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E2EC 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E2F0 4E75                       		rts	
0000E2F2                            ; ===========================================================================
0000E2F2                            Ani_obj41:
0000E2F2                            	include "_anim\obj41.asm"
0000E2F2                            ; ---------------------------------------------------------------------------
0000E2F2                            ; Animation script - springs
0000E2F2                            ; ---------------------------------------------------------------------------
0000E2F2 0000                       		dc.w byte_DD02-Ani_obj41
0000E2F4 0000                       		dc.w byte_DD0E-Ani_obj41
0000E2F6 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E302 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E30E                            		even
0000E30E                            		even
0000E30E                            
0000E30E                            ; ---------------------------------------------------------------------------
0000E30E                            ; Sprite mappings - springs
0000E30E                            ; ---------------------------------------------------------------------------
0000E30E                            Map_obj41:
0000E30E                            	include "_maps\obj41.asm"
0000E30E                            ; ---------------------------------------------------------------------------
0000E30E                            ; Sprite mappings - springs
0000E30E                            ; ---------------------------------------------------------------------------
0000E30E 0000                       		dc.w byte_DD26-Map_obj41
0000E310 0000                       		dc.w byte_DD31-Map_obj41
0000E312 0000                       		dc.w byte_DD37-Map_obj41
0000E314 0000                       		dc.w byte_DD47-Map_obj41
0000E316 0000                       		dc.w byte_DD4D-Map_obj41
0000E318 0000                       		dc.w byte_DD53-Map_obj41
0000E31A 02                         byte_DD26:	dc.b 2
0000E31B F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E320 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E325 01                         byte_DD31:	dc.b 1
0000E326 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E32B 03                         byte_DD37:	dc.b 3
0000E32C E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E331 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E336 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E33B 01                         byte_DD47:	dc.b 1
0000E33C F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E341 01                         byte_DD4D:	dc.b 1
0000E342 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E347 04                         byte_DD53:	dc.b 4
0000E348 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E34D F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E352 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E357 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E35C                            		even
0000E35C                            		even
0000E35C                            
0000E35C                            ; ===========================================================================
0000E35C                            ; ---------------------------------------------------------------------------
0000E35C                            ; Object 42 - Newtron enemy (GHZ)
0000E35C                            ; ---------------------------------------------------------------------------
0000E35C                            
0000E35C                            Obj42:					; XREF: Obj_Index
0000E35C 7000                       		moveq	#0,d0
0000E35E 1028 0024                  		move.b	$24(a0),d0
0000E362 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E366 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E36A                            ; ===========================================================================
0000E36A 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E36C 0000                       		dc.w Obj42_Action-Obj42_Index
0000E36E 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E370                            ; ===========================================================================
0000E370                            
0000E370                            Obj42_Main:				; XREF: Obj42_Index
0000E370 5428 0024                  		addq.b	#2,$24(a0)
0000E374 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E37C 317C 049B 0002             		move.w	#$49B,2(a0)
0000E382 117C 0004 0001             		move.b	#4,1(a0)
0000E388 117C 0004 0018             		move.b	#4,$18(a0)
0000E38E 117C 0014 0019             		move.b	#$14,$19(a0)
0000E394 117C 0010 0016             		move.b	#$10,$16(a0)
0000E39A 117C 0008 0017             		move.b	#8,$17(a0)
0000E3A0                            
0000E3A0                            Obj42_Action:				; XREF: Obj42_Index
0000E3A0 7000                       		moveq	#0,d0
0000E3A2 1028 0025                  		move.b	$25(a0),d0
0000E3A6 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E3AA 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E3AE 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E3B4 6100 C90E                  		bsr.w	AnimateSprite
0000E3B8 6000 0000                  		bra.w	MarkObjGone
0000E3BC                            ; ===========================================================================
0000E3BC 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E3BE 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E3C0 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E3C2 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E3C4 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E3C6                            ; ===========================================================================
0000E3C6                            
0000E3C6                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E3C6 08E8 0000 0022             		bset	#0,$22(a0)
0000E3CC 3038 D008                  		move.w	($FFFFD008).w,d0
0000E3D0 9068 0008                  		sub.w	8(a0),d0
0000E3D4 6400                       		bcc.s	loc_DDEA
0000E3D6 4440                       		neg.w	d0
0000E3D8 08A8 0000 0022             		bclr	#0,$22(a0)
0000E3DE                            
0000E3DE                            loc_DDEA:
0000E3DE 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E3E2 6400                       		bcc.s	locret_DE12	; if not, branch
0000E3E4 5428 0025                  		addq.b	#2,$25(a0)
0000E3E8 117C 0001 001C             		move.b	#1,$1C(a0)
0000E3EE 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E3F2 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E3F4 317C 249B 0002             		move.w	#$249B,2(a0)
0000E3FA 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E400 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E406                            
0000E406                            locret_DE12:
0000E406 4E75                       		rts	
0000E408                            ; ===========================================================================
0000E408                            
0000E408                            Obj42_Type00:				; XREF: Obj42_Index2
0000E408 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E40E 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E410 08E8 0000 0022             		bset	#0,$22(a0)
0000E416 3038 D008                  		move.w	($FFFFD008).w,d0
0000E41A 9068 0008                  		sub.w	8(a0),d0
0000E41E 6400                       		bcc.s	locret_DE32
0000E420 08A8 0000 0022             		bclr	#0,$22(a0)
0000E426                            
0000E426                            locret_DE32:
0000E426 4E75                       		rts	
0000E428                            ; ===========================================================================
0000E428                            
0000E428                            Obj42_Fall:				; XREF: Obj42_Type00
0000E428 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E42E 6600                       		bne.s	loc_DE42
0000E430 117C 000C 0020             		move.b	#$C,$20(a0)
0000E436                            
0000E436                            loc_DE42:
0000E436 6100 F770                  		bsr.w	ObjectFall
0000E43A 6100 0000                  		bsr.w	ObjHitFloor
0000E43E 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E440 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E442 D368 000C                  		add.w	d1,$C(a0)
0000E446 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E44C 5428 0025                  		addq.b	#2,$25(a0)
0000E450 117C 0002 001C             		move.b	#2,$1C(a0)
0000E456 0828 0005 0002             		btst	#5,2(a0)
0000E45C 6700                       		beq.s	Obj42_Move
0000E45E 5228 001C                  		addq.b	#1,$1C(a0)
0000E462                            
0000E462                            Obj42_Move:
0000E462 117C 000D 0020             		move.b	#$D,$20(a0)
0000E468 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E46E 0828 0000 0022             		btst	#0,$22(a0)
0000E474 6600                       		bne.s	locret_DE86
0000E476 4468 0010                  		neg.w	$10(a0)
0000E47A                            
0000E47A                            locret_DE86:
0000E47A 4E75                       		rts	
0000E47C                            ; ===========================================================================
0000E47C                            
0000E47C                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E47C 6100 F756                  		bsr.w	SpeedToPos
0000E480 6100 0000                  		bsr.w	ObjHitFloor
0000E484 0C41 FFF8                  		cmpi.w	#-8,d1
0000E488 6D00                       		blt.s	loc_DEA2
0000E48A 0C41 000C                  		cmpi.w	#$C,d1
0000E48E 6C00                       		bge.s	loc_DEA2
0000E490 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E494 4E75                       		rts	
0000E496                            ; ===========================================================================
0000E496                            
0000E496                            loc_DEA2:
0000E496 5428 0025                  		addq.b	#2,$25(a0)
0000E49A 4E75                       		rts	
0000E49C                            ; ===========================================================================
0000E49C                            
0000E49C                            Obj42_Speed:				; XREF: Obj42_Index2
0000E49C 6100 F736                  		bsr.w	SpeedToPos
0000E4A0 4E75                       		rts	
0000E4A2                            ; ===========================================================================
0000E4A2                            
0000E4A2                            Obj42_Type01:				; XREF: Obj42_Index2
0000E4A2 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E4A8 6600                       		bne.s	Obj42_FireMissile
0000E4AA 117C 000C 0020             		move.b	#$C,$20(a0)
0000E4B0                            
0000E4B0                            Obj42_FireMissile:
0000E4B0 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E4B6 6600                       		bne.s	locret_DF14
0000E4B8 4A28 0032                  		tst.b	$32(a0)
0000E4BC 6600                       		bne.s	locret_DF14
0000E4BE 117C 0001 0032             		move.b	#1,$32(a0)
0000E4C4 6100 FBBA                  		bsr.w	SingleObjLoad
0000E4C8 6600                       		bne.s	locret_DF14
0000E4CA 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E4CE 3368 0008 0008             		move.w	8(a0),8(a1)
0000E4D4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E4DA 5169 000C                  		subq.w	#8,$C(a1)
0000E4DE 337C 0200 0010             		move.w	#$200,$10(a1)
0000E4E4 303C 0014                  		move.w	#$14,d0
0000E4E8 0828 0000 0022             		btst	#0,$22(a0)
0000E4EE 6600                       		bne.s	loc_DF04
0000E4F0 4440                       		neg.w	d0
0000E4F2 4469 0010                  		neg.w	$10(a1)
0000E4F6                            
0000E4F6                            loc_DF04:
0000E4F6 D169 0008                  		add.w	d0,8(a1)
0000E4FA 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E500 137C 0001 0028             		move.b	#1,$28(a1)
0000E506                            
0000E506                            locret_DF14:
0000E506 4E75                       		rts	
0000E508                            ; ===========================================================================
0000E508                            
0000E508                            Obj42_Delete:				; XREF: Obj42_Index
0000E508 6000 F72C                  		bra.w	DeleteObject
0000E50C                            ; ===========================================================================
0000E50C                            Ani_obj42:
0000E50C                            	include "_anim\obj42.asm"
0000E50C                            ; ---------------------------------------------------------------------------
0000E50C                            ; Animation script - Newtron enemy
0000E50C                            ; ---------------------------------------------------------------------------
0000E50C 0000                       		dc.w byte_DF24-Ani_obj42
0000E50E 0000                       		dc.w byte_DF28-Ani_obj42
0000E510 0000                       		dc.w byte_DF30-Ani_obj42
0000E512 0000                       		dc.w byte_DF34-Ani_obj42
0000E514 0000                       		dc.w byte_DF38-Ani_obj42
0000E516 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E51A 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E522 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E526 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E52A 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E534                            		even
0000E534                            		even
0000E534                            
0000E534                            ; ---------------------------------------------------------------------------
0000E534                            ; Sprite mappings - Newtron enemy (GHZ)
0000E534                            ; ---------------------------------------------------------------------------
0000E534                            Map_obj42:
0000E534                            	include "_maps\obj42.asm"
0000E534                            ; ---------------------------------------------------------------------------
0000E534                            ; Sprite mappings - Newtron enemy (GHZ)
0000E534                            ; ---------------------------------------------------------------------------
0000E534 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E538 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E53C 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E540 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E544 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E548 0000                       		dc.w byte_DFF8-Map_obj42
0000E54A 03                         byte_DF58:	dc.b 3
0000E54B EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E550 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E555 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E55A 03                         byte_DF68:	dc.b 3
0000E55B EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E560 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E565 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E56A 03                         byte_DF78:	dc.b 3
0000E56B EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E570 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E575 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E57A 04                         byte_DF88:	dc.b 4
0000E57B EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E580 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E585 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E58A 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E58F 03                         byte_DF9D:	dc.b 3
0000E590 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E595 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E59A 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E59F 02                         byte_DFAD:	dc.b 2
0000E5A0 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E5A5 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E5AA 03                         byte_DFB8:	dc.b 3
0000E5AB F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E5B0 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E5B5 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E5BA 03                         byte_DFC8:	dc.b 3
0000E5BB F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E5C0 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E5C5 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E5CA 03                         byte_DFD8:	dc.b 3
0000E5CB F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E5D0 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E5D5 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E5DA 03                         byte_DFE8:	dc.b 3
0000E5DB F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E5E0 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E5E5 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E5EA 00                         byte_DFF8:	dc.b 0
0000E5EC 00                         		even
0000E5EC 00                         		even
0000E5EC                            
0000E5EC                            ; ===========================================================================
0000E5EC                            ; ---------------------------------------------------------------------------
0000E5EC                            ; Object 43 - Roller enemy (SYZ)
0000E5EC                            ; ---------------------------------------------------------------------------
0000E5EC                            
0000E5EC                            Obj43:					; XREF: Obj_Index
0000E5EC 7000                       		moveq	#0,d0
0000E5EE 1028 0024                  		move.b	$24(a0),d0
0000E5F2 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E5F6 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000E5FA                            ; ===========================================================================
0000E5FA 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000E5FC 0000                       		dc.w Obj43_Action-Obj43_Index
0000E5FE                            ; ===========================================================================
0000E5FE                            
0000E5FE                            Obj43_Main:				; XREF: Obj43_Index
0000E5FE 117C 000E 0016             		move.b	#$E,$16(a0)
0000E604 117C 0008 0017             		move.b	#8,$17(a0)
0000E60A 6100 F59C                  		bsr.w	ObjectFall
0000E60E 6100 0000                  		bsr.w	ObjHitFloor
0000E612 4A41                       		tst.w	d1
0000E614 6A00                       		bpl.s	locret_E052
0000E616 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000E61A 317C 0000 0012             		move.w	#0,$12(a0)
0000E620 5428 0024                  		addq.b	#2,$24(a0)
0000E624 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000E62C 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000E632 117C 0004 0001             		move.b	#4,1(a0)
0000E638 117C 0004 0018             		move.b	#4,$18(a0)
0000E63E 117C 0010 0019             		move.b	#$10,$19(a0)
0000E644                            
0000E644                            locret_E052:
0000E644 4E75                       		rts	
0000E646                            ; ===========================================================================
0000E646                            
0000E646                            Obj43_Action:				; XREF: Obj43_Index
0000E646 7000                       		moveq	#0,d0
0000E648 1028 0025                  		move.b	$25(a0),d0
0000E64C 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000E650 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000E654 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000E65A 6100 C668                  		bsr.w	AnimateSprite
0000E65E 3028 0008                  		move.w	8(a0),d0
0000E662 0240 FF80                  		andi.w	#$FF80,d0
0000E666 3238 F700                  		move.w	($FFFFF700).w,d1
0000E66A 0441 0080                  		subi.w	#$80,d1
0000E66E 0241 FF80                  		andi.w	#$FF80,d1
0000E672 9041                       		sub.w	d1,d0
0000E674 0C40 0280                  		cmpi.w	#$280,d0
0000E678 6E00 0000                  		bgt.w	Obj43_ChkGone
0000E67C 6000 F57C                  		bra.w	DisplaySprite
0000E680                            ; ===========================================================================
0000E680                            
0000E680                            Obj43_ChkGone:				; XREF: Obj43_Action
0000E680 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E684 7000                       		moveq	#0,d0
0000E686 1028 0023                  		move.b	$23(a0),d0
0000E68A 6700                       		beq.s	Obj43_Delete
0000E68C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E692                            
0000E692                            Obj43_Delete:
0000E692 6000 F5A2                  		bra.w	DeleteObject
0000E696                            ; ===========================================================================
0000E696 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000E698 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000E69A 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000E69C 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000E69E                            ; ===========================================================================
0000E69E                            
0000E69E                            Obj43_RollChk:				; XREF: Obj43_Index2
0000E69E 3038 D008                  		move.w	($FFFFD008).w,d0
0000E6A2 0440 0100                  		subi.w	#$100,d0
0000E6A6 6500                       		bcs.s	loc_E0D2
0000E6A8 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000E6AC 6500                       		bcs.s	loc_E0D2
0000E6AE 5828 0025                  		addq.b	#4,$25(a0)
0000E6B2 117C 0002 001C             		move.b	#2,$1C(a0)
0000E6B8 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000E6BE 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000E6C4                            
0000E6C4                            loc_E0D2:
0000E6C4 588F                       		addq.l	#4,sp
0000E6C6 4E75                       		rts	
0000E6C8                            ; ===========================================================================
0000E6C8                            
0000E6C8                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000E6C8 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000E6CE 6700                       		beq.s	loc_E0F8
0000E6D0 5368 0030                  		subq.w	#1,$30(a0)
0000E6D4 6A00                       		bpl.s	locret_E0F6
0000E6D6 117C 0001 001C             		move.b	#1,$1C(a0)
0000E6DC 317C 0700 0010             		move.w	#$700,$10(a0)
0000E6E2 117C 008E 0020             		move.b	#$8E,$20(a0)
0000E6E8                            
0000E6E8                            locret_E0F6:
0000E6E8 4E75                       		rts	
0000E6EA                            ; ===========================================================================
0000E6EA                            
0000E6EA                            loc_E0F8:
0000E6EA 5428 0025                  		addq.b	#2,$25(a0)
0000E6EE 4E75                       		rts	
0000E6F0                            ; ===========================================================================
0000E6F0                            
0000E6F0                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000E6F0 6100 0000                  		bsr.w	Obj43_Stop
0000E6F4 6100 F4DE                  		bsr.w	SpeedToPos
0000E6F8 6100 0000                  		bsr.w	ObjHitFloor
0000E6FC 0C41 FFF8                  		cmpi.w	#-8,d1
0000E700 6D00                       		blt.s	Obj43_Jump
0000E702 0C41 000C                  		cmpi.w	#$C,d1
0000E706 6C00                       		bge.s	Obj43_Jump
0000E708 D368 000C                  		add.w	d1,$C(a0)
0000E70C 4E75                       		rts	
0000E70E                            ; ===========================================================================
0000E70E                            
0000E70E                            Obj43_Jump:
0000E70E 5428 0025                  		addq.b	#2,$25(a0)
0000E712 08E8 0000 0032             		bset	#0,$32(a0)
0000E718 6700                       		beq.s	locret_E12E
0000E71A 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000E720                            
0000E720                            locret_E12E:
0000E720 4E75                       		rts	
0000E722                            ; ===========================================================================
0000E722                            
0000E722                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000E722 6100 F484                  		bsr.w	ObjectFall
0000E726 4A68 0012                  		tst.w	$12(a0)
0000E72A 6B00                       		bmi.s	locret_E150
0000E72C 6100 0000                  		bsr.w	ObjHitFloor
0000E730 4A41                       		tst.w	d1
0000E732 6A00                       		bpl.s	locret_E150
0000E734 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000E738 5528 0025                  		subq.b	#2,$25(a0)
0000E73C 317C 0000 0012             		move.w	#0,$12(a0)
0000E742                            
0000E742                            locret_E150:
0000E742 4E75                       		rts	
0000E744                            
0000E744                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E744                            
0000E744                            
0000E744                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000E744 4A28 0032                  		tst.b	$32(a0)
0000E748 6B00                       		bmi.s	locret_E188
0000E74A 3038 D008                  		move.w	($FFFFD008).w,d0
0000E74E 0440 0030                  		subi.w	#$30,d0
0000E752 9068 0008                  		sub.w	8(a0),d0
0000E756 6400                       		bcc.s	locret_E188
0000E758 117C 0000 001C             		move.b	#0,$1C(a0)
0000E75E 117C 000E 0020             		move.b	#$E,$20(a0)
0000E764 4268 0010                  		clr.w	$10(a0)
0000E768 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000E76E 117C 0002 0025             		move.b	#2,$25(a0)
0000E774 08E8 0007 0032             		bset	#7,$32(a0)
0000E77A                            
0000E77A                            locret_E188:
0000E77A 4E75                       		rts	
0000E77C                            ; End of function Obj43_Stop
0000E77C                            
0000E77C                            ; ===========================================================================
0000E77C                            Ani_obj43:
0000E77C                            	include "_anim\obj43.asm"
0000E77C                            ; ---------------------------------------------------------------------------
0000E77C                            ; Animation script - Roller enemy
0000E77C                            ; ---------------------------------------------------------------------------
0000E77C 0000                       		dc.w byte_E190-Ani_obj43
0000E77E 0000                       		dc.w byte_E196-Ani_obj43
0000E780 0000                       		dc.w byte_E19C-Ani_obj43
0000E782 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000E788 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000E78E 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000E794 00                         		even
0000E794 00                         		even
0000E794                            
0000E794                            ; ---------------------------------------------------------------------------
0000E794                            ; Sprite mappings - Roller enemy (SYZ)
0000E794                            ; ---------------------------------------------------------------------------
0000E794                            Map_obj43:
0000E794                            	include "_maps\obj43.asm"
0000E794                            Map_61da:
0000E794 0000                       Map_61da_0: 	dc.w Map_61da_A-Map_61da
0000E796 0000                       Map_61da_2: 	dc.w Map_61da_15-Map_61da
0000E798 0000                       Map_61da_4: 	dc.w Map_61da_20-Map_61da
0000E79A 0000                       Map_61da_6: 	dc.w Map_61da_26-Map_61da
0000E79C 0000                       Map_61da_8: 	dc.w Map_61da_2C-Map_61da
0000E79E 02                         Map_61da_A: 	dc.b $2
0000E79F DE0E 0000 F0               	dc.b $DE, $E, $0, $0, $F0
0000E7A4 F60E 000C F0               	dc.b $F6, $E, $0, $C, $F0
0000E7A9 02                         Map_61da_15: 	dc.b $2
0000E7AA E60E 0000 F0               	dc.b $E6, $E, $0, $0, $F0
0000E7AF FE0D 0018 F0               	dc.b $FE, $D, $0, $18, $F0
0000E7B4 01                         Map_61da_20: 	dc.b $1
0000E7B5 F00F 0020 F0               	dc.b $F0, $F, $0, $20, $F0
0000E7BA 01                         Map_61da_26: 	dc.b $1
0000E7BB F00F 0030 F0               	dc.b $F0, $F, $0, $30, $F0
0000E7C0 01                         Map_61da_2C: 	dc.b $1
0000E7C1 F00F 0040 F0               	dc.b $F0, $F, $0, $40, $F0
0000E7C6                            	even
0000E7C6                            	even
0000E7C6                            
0000E7C6                            ; ===========================================================================
0000E7C6                            ; ---------------------------------------------------------------------------
0000E7C6                            ; Object 44 - walls (GHZ)
0000E7C6                            ; ---------------------------------------------------------------------------
0000E7C6                            
0000E7C6                            Obj44:					; XREF: Obj_Index
0000E7C6 7000                       		moveq	#0,d0
0000E7C8 1028 0024                  		move.b	$24(a0),d0
0000E7CC 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000E7D0 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000E7D4                            ; ===========================================================================
0000E7D4 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000E7D6 0000                       		dc.w Obj44_Solid-Obj44_Index
0000E7D8 0000                       		dc.w Obj44_Display-Obj44_Index
0000E7DA                            ; ===========================================================================
0000E7DA                            
0000E7DA                            Obj44_Main:				; XREF: Obj44_Index
0000E7DA 5428 0024                  		addq.b	#2,$24(a0)
0000E7DE 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000E7E6 317C 434C 0002             		move.w	#$434C,2(a0)
0000E7EC 0028 0004 0001             		ori.b	#4,1(a0)
0000E7F2 117C 0008 0019             		move.b	#8,$19(a0)
0000E7F8 117C 0006 0018             		move.b	#6,$18(a0)
0000E7FE 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000E804 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000E80A 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000E80C 5428 0024                  		addq.b	#2,$24(a0)
0000E810 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000E812                            ; ===========================================================================
0000E812                            
0000E812                            Obj44_Solid:				; XREF: Obj44_Index
0000E812 323C 0013                  		move.w	#$13,d1
0000E816 343C 0028                  		move.w	#$28,d2
0000E81A 6100 A70E                  		bsr.w	Obj44_SolidWall
0000E81E                            
0000E81E                            Obj44_Display:				; XREF: Obj44_Index
0000E81E 6100 F3DA                  		bsr.w	DisplaySprite
0000E822 3028 0008                  		move.w	8(a0),d0
0000E826 0240 FF80                  		andi.w	#$FF80,d0
0000E82A 3238 F700                  		move.w	($FFFFF700).w,d1
0000E82E 0441 0080                  		subi.w	#$80,d1
0000E832 0241 FF80                  		andi.w	#$FF80,d1
0000E836 9041                       		sub.w	d1,d0
0000E838 0C40 0280                  		cmpi.w	#$280,d0
0000E83C 6200 F3F8                  		bhi.w	DeleteObject
0000E840 4E75                       		rts	
0000E842                            ; ===========================================================================
0000E842                            ; ---------------------------------------------------------------------------
0000E842                            ; Sprite mappings - walls (GHZ)
0000E842                            ; ---------------------------------------------------------------------------
0000E842                            Map_obj44:
0000E842                            	include "_maps\obj44.asm"
0000E842                            ; ---------------------------------------------------------------------------
0000E842                            ; Sprite mappings - walls (GHZ)
0000E842                            ; ---------------------------------------------------------------------------
0000E842 0000                       		dc.w byte_E256-Map_obj44
0000E844 0000                       		dc.w byte_E26B-Map_obj44
0000E846 0000                       		dc.w byte_E280-Map_obj44
0000E848 04                         byte_E256:	dc.b 4
0000E849 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000E84E F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E853 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E858 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E85D 04                         byte_E26B:	dc.b 4
0000E85E E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000E863 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E868 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E86D 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E872 04                         byte_E280:	dc.b 4
0000E873 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000E878 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000E87D 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000E882 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000E888 00                         		even
0000E888 00                         		even
0000E888                            
0000E888                            ; ===========================================================================
0000E888                            ; ---------------------------------------------------------------------------
0000E888                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000E888                            ; ---------------------------------------------------------------------------
0000E888                            
0000E888                            Obj13:					; XREF: Obj_Index
0000E888 7000                       		moveq	#0,d0
0000E88A 1028 0024                  		move.b	$24(a0),d0
0000E88E 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000E892 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000E896 6000 0000                  		bra.w	Obj14_ChkDel
0000E89A                            ; ===========================================================================
0000E89A 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000E89C 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000E89E                            ; ---------------------------------------------------------------------------
0000E89E                            ;
0000E89E                            ; Lava ball production rates
0000E89E                            ;
0000E89E 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000E8A4                            ; ===========================================================================
0000E8A4                            
0000E8A4                            Obj13_Main:				; XREF: Obj13_Index
0000E8A4 5428 0024                  		addq.b	#2,$24(a0)
0000E8A8 1028 0028                  		move.b	$28(a0),d0
0000E8AC E848                       		lsr.w	#4,d0
0000E8AE 0240 000F                  		andi.w	#$F,d0
0000E8B2 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000E8B8 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000E8BE 0228 000F 0028             		andi.b	#$F,$28(a0)
0000E8C4                            
0000E8C4                            Obj13_MakeLava:				; XREF: Obj13_Index
0000E8C4 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000E8C8 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000E8CA 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000E8D0 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000E8D4 6600                       		bne.s	locret_E302
0000E8D6 6100 F7A8                  		bsr.w	SingleObjLoad
0000E8DA 6600                       		bne.s	locret_E302
0000E8DC 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000E8E0 3368 0008 0008             		move.w	8(a0),8(a1)
0000E8E6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E8EC 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000E8F2                            
0000E8F2                            locret_E302:
0000E8F2 4E75                       		rts	
0000E8F4                            ; ===========================================================================
0000E8F4                            ; ---------------------------------------------------------------------------
0000E8F4                            ; Object 14 - lava balls (MZ, SLZ)
0000E8F4                            ; ---------------------------------------------------------------------------
0000E8F4                            
0000E8F4                            Obj14:					; XREF: Obj_Index
0000E8F4 7000                       		moveq	#0,d0
0000E8F6 1028 0024                  		move.b	$24(a0),d0
0000E8FA 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000E8FE 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000E902 6000 F2F6                  		bra.w	DisplaySprite
0000E906                            ; ===========================================================================
0000E906 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000E908 0000                       		dc.w Obj14_Action-Obj14_Index
0000E90A 0000                       		dc.w Obj14_Delete-Obj14_Index
0000E90C                            
0000E90C FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000E916 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000E91E                            ; ===========================================================================
0000E91E                            
0000E91E                            Obj14_Main:				; XREF: Obj14_Index
0000E91E 5428 0024                  		addq.b	#2,$24(a0)
0000E922 117C 0008 0016             		move.b	#8,$16(a0)
0000E928 117C 0008 0017             		move.b	#8,$17(a0)
0000E92E 217C 0000 B8B8 0004        		move.l	#Map_obj14,4(a0)
0000E936 317C 0345 0002             		move.w	#$345,2(a0)
0000E93C 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000E942 6600                       		bne.s	loc_E35A
0000E944 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000E94A                            
0000E94A                            loc_E35A:
0000E94A 117C 0004 0001             		move.b	#4,1(a0)
0000E950 117C 0003 0018             		move.b	#3,$18(a0)
0000E956 117C 008B 0020             		move.b	#$8B,$20(a0)
0000E95C 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E962 4A28 0029                  		tst.b	$29(a0)
0000E966 6700                       		beq.s	Obj14_SetSpeed
0000E968 5428 0018                  		addq.b	#2,$18(a0)
0000E96C                            
0000E96C                            Obj14_SetSpeed:
0000E96C 7000                       		moveq	#0,d0
0000E96E 1028 0028                  		move.b	$28(a0),d0
0000E972 D040                       		add.w	d0,d0
0000E974 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000E97A 117C 0008 0019             		move.b	#8,$19(a0)
0000E980 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000E986 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000E988 117C 0010 0019             		move.b	#$10,$19(a0)
0000E98E 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000E994 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000E99A 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000E9A0                            
0000E9A0                            Obj14_PlaySnd:
0000E9A0 303C 00AE                  		move.w	#$AE,d0
0000E9A4 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000E9AA                            
0000E9AA                            Obj14_Action:				; XREF: Obj14_Index
0000E9AA 7000                       		moveq	#0,d0
0000E9AC 1028 0028                  		move.b	$28(a0),d0
0000E9B0 D040                       		add.w	d0,d0
0000E9B2 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000E9B6 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000E9BA 6100 F218                  		bsr.w	SpeedToPos
0000E9BE 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000E9C4 6100 C2FE                  		bsr.w	AnimateSprite
0000E9C8                            
0000E9C8                            Obj14_ChkDel:				; XREF: Obj13
0000E9C8 3028 0008                  		move.w	8(a0),d0
0000E9CC 0240 FF80                  		andi.w	#$FF80,d0
0000E9D0 3238 F700                  		move.w	($FFFFF700).w,d1
0000E9D4 0441 0080                  		subi.w	#$80,d1
0000E9D8 0241 FF80                  		andi.w	#$FF80,d1
0000E9DC 9041                       		sub.w	d1,d0
0000E9DE 0C40 0280                  		cmpi.w	#$280,d0
0000E9E2 6200 F252                  		bhi.w	DeleteObject
0000E9E6 4E75                       		rts	
0000E9E8                            ; ===========================================================================
0000E9E8 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E9EC 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E9F0 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000E9F4 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000E9F8 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000E9FA                            ; ===========================================================================
0000E9FA                            ; lavaball types 00-03 fly up and fall back down
0000E9FA                            
0000E9FA                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000E9FA 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000EA00 3028 0030                  		move.w	$30(a0),d0
0000EA04 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000EA08 6400                       		bcc.s	loc_E41E	; if not, branch
0000EA0A 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000EA0E                            
0000EA0E                            loc_E41E:
0000EA0E 08A8 0001 0022             		bclr	#1,$22(a0)
0000EA14 4A68 0012                  		tst.w	$12(a0)
0000EA18 6A00                       		bpl.s	locret_E430
0000EA1A 08E8 0001 0022             		bset	#1,$22(a0)
0000EA20                            
0000EA20                            locret_E430:
0000EA20 4E75                       		rts	
0000EA22                            ; ===========================================================================
0000EA22                            ; lavaball type	04 flies up until it hits the ceiling
0000EA22                            
0000EA22                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000EA22 08E8 0001 0022             		bset	#1,$22(a0)
0000EA28 6100 0000                  		bsr.w	ObjHitCeiling
0000EA2C 4A41                       		tst.w	d1
0000EA2E 6A00                       		bpl.s	locret_E452
0000EA30 117C 0008 0028             		move.b	#8,$28(a0)
0000EA36 117C 0001 001C             		move.b	#1,$1C(a0)
0000EA3C 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000EA42                            
0000EA42                            locret_E452:
0000EA42 4E75                       		rts	
0000EA44                            ; ===========================================================================
0000EA44                            ; lavaball type	05 falls down until it hits the	floor
0000EA44                            
0000EA44                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000EA44 08A8 0001 0022             		bclr	#1,$22(a0)
0000EA4A 6100 0000                  		bsr.w	ObjHitFloor
0000EA4E 4A41                       		tst.w	d1
0000EA50 6A00                       		bpl.s	locret_E474
0000EA52 117C 0008 0028             		move.b	#8,$28(a0)
0000EA58 117C 0001 001C             		move.b	#1,$1C(a0)
0000EA5E 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000EA64                            
0000EA64                            locret_E474:
0000EA64 4E75                       		rts	
0000EA66                            ; ===========================================================================
0000EA66                            ; lavaball types 06-07 move sideways
0000EA66                            
0000EA66                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000EA66 08E8 0000 0022             		bset	#0,$22(a0)
0000EA6C 76F8                       		moveq	#-8,d3
0000EA6E 6100 0000                  		bsr.w	ObjHitWallLeft
0000EA72 4A41                       		tst.w	d1
0000EA74 6A00                       		bpl.s	locret_E498
0000EA76 117C 0008 0028             		move.b	#8,$28(a0)
0000EA7C 117C 0003 001C             		move.b	#3,$1C(a0)
0000EA82 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EA88                            
0000EA88                            locret_E498:
0000EA88 4E75                       		rts	
0000EA8A                            ; ===========================================================================
0000EA8A                            
0000EA8A                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000EA8A 08A8 0000 0022             		bclr	#0,$22(a0)
0000EA90 7608                       		moveq	#8,d3
0000EA92 6100 0000                  		bsr.w	ObjHitWallRight
0000EA96 4A41                       		tst.w	d1
0000EA98 6A00                       		bpl.s	locret_E4BC
0000EA9A 117C 0008 0028             		move.b	#8,$28(a0)
0000EAA0 117C 0003 001C             		move.b	#3,$1C(a0)
0000EAA6 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EAAC                            
0000EAAC                            locret_E4BC:
0000EAAC 4E75                       		rts	
0000EAAE                            ; ===========================================================================
0000EAAE                            
0000EAAE                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000EAAE 4E75                       		rts	
0000EAB0                            ; ===========================================================================
0000EAB0                            
0000EAB0                            Obj14_Delete:				; XREF: Obj14_Index
0000EAB0 6000 F184                  		bra.w	DeleteObject
0000EAB4                            ; ===========================================================================
0000EAB4                            Ani_obj14:
0000EAB4                            	include "_anim\obj14.asm"
0000EAB4                            ; ---------------------------------------------------------------------------
0000EAB4                            ; Animation script - lava balls
0000EAB4                            ; ---------------------------------------------------------------------------
0000EAB4 0000                       		dc.w byte_E4CC-Ani_obj14
0000EAB6 0000                       		dc.w byte_E4D2-Ani_obj14
0000EAB8 0000                       		dc.w byte_E4D6-Ani_obj14
0000EABA 0000                       		dc.w byte_E4DC-Ani_obj14
0000EABC 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000EAC2 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000EAC6 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000EACC 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000EAD0                            		even
0000EAD0                            		even
0000EAD0                            
0000EAD0                            ; ===========================================================================
0000EAD0                            ; ---------------------------------------------------------------------------
0000EAD0                            ; Object 6D - flame thrower (SBZ)
0000EAD0                            ; ---------------------------------------------------------------------------
0000EAD0                            
0000EAD0                            Obj6D:					; XREF: Obj_Index
0000EAD0 7000                       		moveq	#0,d0
0000EAD2 1028 0024                  		move.b	$24(a0),d0
0000EAD6 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000EADA 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000EADE                            ; ===========================================================================
0000EADE 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000EAE0 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000EAE2                            ; ===========================================================================
0000EAE2                            
0000EAE2                            Obj6D_Main:				; XREF: Obj6D_Index
0000EAE2 5428 0024                  		addq.b	#2,$24(a0)
0000EAE6 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000EAEE 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000EAF4 0028 0004 0001             		ori.b	#4,1(a0)
0000EAFA 117C 0001 0018             		move.b	#1,$18(a0)
0000EB00 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EB06 117C 000C 0019             		move.b	#$C,$19(a0)
0000EB0C 1028 0028                  		move.b	$28(a0),d0
0000EB10 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000EB14 D040                       		add.w	d0,d0		; multiply by 2
0000EB16 3140 0030                  		move.w	d0,$30(a0)
0000EB1A 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000EB1E 1028 0028                  		move.b	$28(a0),d0
0000EB22 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000EB26 EB48                       		lsl.w	#5,d0		; multiply by $20
0000EB28 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000EB2C 117C 000A 0036             		move.b	#$A,$36(a0)
0000EB32 0828 0001 0022             		btst	#1,$22(a0)
0000EB38 6700                       		beq.s	Obj6D_Action
0000EB3A 117C 0002 001C             		move.b	#2,$1C(a0)
0000EB40 117C 0015 0036             		move.b	#$15,$36(a0)
0000EB46                            
0000EB46                            Obj6D_Action:				; XREF: Obj6D_Index
0000EB46 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000EB4A 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000EB4C 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000EB52 0868 0000 001C             		bchg	#0,$1C(a0)
0000EB58 6700                       		beq.s	loc_E57A
0000EB5A 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000EB60 303C 00B3                  		move.w	#$B3,d0
0000EB64 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flame sound
0000EB6A                            
0000EB6A                            loc_E57A:
0000EB6A 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000EB70 6100 C152                  		bsr.w	AnimateSprite
0000EB74 117C 0000 0020             		move.b	#0,$20(a0)
0000EB7A 1028 0036                  		move.b	$36(a0),d0
0000EB7E B028 001A                  		cmp.b	$1A(a0),d0
0000EB82 6600                       		bne.s	Obj6D_ChkDel
0000EB84 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000EB8A                            
0000EB8A                            Obj6D_ChkDel:
0000EB8A 3028 0008                  		move.w	8(a0),d0
0000EB8E 0240 FF80                  		andi.w	#$FF80,d0
0000EB92 3238 F700                  		move.w	($FFFFF700).w,d1
0000EB96 0441 0080                  		subi.w	#$80,d1
0000EB9A 0241 FF80                  		andi.w	#$FF80,d1
0000EB9E 9041                       		sub.w	d1,d0
0000EBA0 0C40 0280                  		cmpi.w	#$280,d0
0000EBA4 6200 F090                  		bhi.w	DeleteObject
0000EBA8 6000 F050                  		bra.w	DisplaySprite
0000EBAC                            ; ===========================================================================
0000EBAC                            Ani_obj6D:
0000EBAC                            	include "_anim\obj6D.asm"
0000EBAC                            ; ---------------------------------------------------------------------------
0000EBAC                            ; Animation script - flamethrower (SBZ)
0000EBAC                            ; ---------------------------------------------------------------------------
0000EBAC 0000                       		dc.w byte_E5C4-Ani_obj6D
0000EBAE 0000                       		dc.w byte_E5D2-Ani_obj6D
0000EBB0 0000                       		dc.w byte_E5DC-Ani_obj6D
0000EBB2 0000                       		dc.w byte_E5EA-Ani_obj6D
0000EBB4 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000EBC2 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000EBCC 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000EBDA 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000EBE4                            		even
0000EBE4                            		even
0000EBE4                            
0000EBE4                            ; ---------------------------------------------------------------------------
0000EBE4                            ; Sprite mappings - flame thrower (SBZ)
0000EBE4                            ; ---------------------------------------------------------------------------
0000EBE4                            Map_obj6D:
0000EBE4                            	include "_maps\obj6D.asm"
0000EBE4                            ; ---------------------------------------------------------------------------
0000EBE4                            ; Sprite mappings - flame thrower (SBZ)
0000EBE4                            ; ---------------------------------------------------------------------------
0000EBE4 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000EBE8 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000EBEC 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000EBF0 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000EBF4 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000EBF8 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000EBFC 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000EC00 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000EC04 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000EC08 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000EC0C 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000EC10 01                         byte_E620:	dc.b 1
0000EC11 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC16 02                         byte_E626:	dc.b 2
0000EC17 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC1C 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC21 02                         byte_E631:	dc.b 2
0000EC22 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC27 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC2C 03                         byte_E63C:	dc.b 3
0000EC2D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EC32 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC37 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC3C 03                         byte_E64C:	dc.b 3
0000EC3D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EC42 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC47 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC4C 04                         byte_E65C:	dc.b 4
0000EC4D 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EC52 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EC57 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC5C 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC61 04                         byte_E671:	dc.b 4
0000EC62 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EC67 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EC6C 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC71 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC76 05                         byte_E686:	dc.b 5
0000EC77 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EC7C 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EC81 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EC86 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC8B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC90 05                         byte_E6A0:	dc.b 5
0000EC91 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EC96 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EC9B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ECA0 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ECA5 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ECAA 06                         byte_E6BA:	dc.b 6
0000ECAB E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000ECB0 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000ECB5 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ECBA 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000ECBF 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ECC4 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ECC9 06                         byte_E6D9:	dc.b 6
0000ECCA E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000ECCF F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000ECD4 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000ECD9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ECDE 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ECE3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ECE8 01                         byte_E6F8:	dc.b 1
0000ECE9 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECEE 02                         byte_E6FE:	dc.b 2
0000ECEF 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECF4 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ECF9 02                         byte_E709:	dc.b 2
0000ECFA 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECFF 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED04 03                         byte_E714:	dc.b 3
0000ED05 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ED0A 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED0F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ED14 03                         byte_E724:	dc.b 3
0000ED15 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ED1A 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED1F 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED24 04                         byte_E734:	dc.b 4
0000ED25 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ED2A 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ED2F 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED34 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ED39 04                         byte_E749:	dc.b 4
0000ED3A 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000ED3F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ED44 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED49 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED4E 05                         byte_E75E:	dc.b 5
0000ED4F F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000ED54 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ED59 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ED5E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED63 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ED68 05                         byte_E778:	dc.b 5
0000ED69 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000ED6E 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000ED73 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ED78 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED7D 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED82 06                         byte_E792:	dc.b 6
0000ED83 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000ED88 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000ED8D 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ED92 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000ED97 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED9C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EDA1 06                         byte_E7B1:	dc.b 6
0000EDA2 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EDA7 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EDAC 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EDB1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EDB6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EDBB 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EDC0                            		even
0000EDC0                            		even
0000EDC0                            
0000EDC0                            ; ===========================================================================
0000EDC0                            ; ---------------------------------------------------------------------------
0000EDC0                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000EDC0                            ; ---------------------------------------------------------------------------
0000EDC0                            
0000EDC0                            Obj46:					; XREF: Obj_Index
0000EDC0 7000                       		moveq	#0,d0
0000EDC2 1028 0024                  		move.b	$24(a0),d0
0000EDC6 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000EDCA 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000EDCE                            ; ===========================================================================
0000EDCE 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000EDD0 0000                       		dc.w Obj46_Action-Obj46_Index
0000EDD2                            ; ===========================================================================
0000EDD2                            
0000EDD2                            Obj46_Main:				; XREF: Obj46_Index
0000EDD2 5428 0024                  		addq.b	#2,$24(a0)
0000EDD6 117C 000F 0016             		move.b	#$F,$16(a0)
0000EDDC 117C 000F 0017             		move.b	#$F,$17(a0)
0000EDE2 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000EDEA 317C 4000 0002             		move.w	#$4000,2(a0)
0000EDF0 117C 0004 0001             		move.b	#4,1(a0)
0000EDF6 117C 0003 0018             		move.b	#3,$18(a0)
0000EDFC 117C 0010 0019             		move.b	#$10,$19(a0)
0000EE02 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EE08 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000EE0E                            
0000EE0E                            Obj46_Action:				; XREF: Obj46_Index
0000EE0E 4A28 0001                  		tst.b	1(a0)
0000EE12 6A00                       		bpl.s	Obj46_ChkDel
0000EE14 7000                       		moveq	#0,d0
0000EE16 1028 0028                  		move.b	$28(a0),d0	; get object type
0000EE1A 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000EE1E D040                       		add.w	d0,d0
0000EE20 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000EE24 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000EE28 323C 001B                  		move.w	#$1B,d1
0000EE2C 343C 0010                  		move.w	#$10,d2
0000EE30 363C 0011                  		move.w	#$11,d3
0000EE34 3828 0008                  		move.w	8(a0),d4
0000EE38 6100 0000                  		bsr.w	SolidObject
0000EE3C                            
0000EE3C                            Obj46_ChkDel:
0000EE3C 6100 EDBC                  		bsr.w	DisplaySprite
0000EE40 3028 0008                  		move.w	8(a0),d0
0000EE44 0240 FF80                  		andi.w	#$FF80,d0
0000EE48 3238 F700                  		move.w	($FFFFF700).w,d1
0000EE4C 0441 0080                  		subi.w	#$80,d1
0000EE50 0241 FF80                  		andi.w	#$FF80,d1
0000EE54 9041                       		sub.w	d1,d0
0000EE56 0C40 0280                  		cmpi.w	#$280,d0
0000EE5A 6200 EDDA                  		bhi.w	DeleteObject
0000EE5E 4E75                       		rts	
0000EE60                            ; ===========================================================================
0000EE60 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000EE62 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000EE64 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000EE66 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000EE68 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000EE6A                            ; ===========================================================================
0000EE6A                            
0000EE6A                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000EE6A 4E75                       		rts	
0000EE6C                            ; ===========================================================================
0000EE6C                            
0000EE6C                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000EE6C 3038 D008                  		move.w	($FFFFD008).w,d0
0000EE70 9068 0008                  		sub.w	8(a0),d0
0000EE74 6400                       		bcc.s	loc_E888
0000EE76 4440                       		neg.w	d0
0000EE78                            
0000EE78                            loc_E888:
0000EE78 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000EE7C 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000EE7E 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000EE84                            
0000EE84                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000EE84 7000                       		moveq	#0,d0
0000EE86 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000EE8A 0828 0003 0028             		btst	#3,$28(a0)
0000EE90 6700                       		beq.s	loc_E8A8
0000EE92 4440                       		neg.w	d0
0000EE94 0640 0010                  		addi.w	#$10,d0
0000EE98                            
0000EE98                            loc_E8A8:
0000EE98 3228 0030                  		move.w	$30(a0),d1
0000EE9C 9240                       		sub.w	d0,d1
0000EE9E 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000EEA2 4E75                       		rts	
0000EEA4                            ; ===========================================================================
0000EEA4                            
0000EEA4                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000EEA4 6100 ED2E                  		bsr.w	SpeedToPos
0000EEA8 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000EEAE 6100 0000                  		bsr.w	ObjHitFloor
0000EEB2 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000EEB4 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000EEB8 D368 000C                  		add.w	d1,$C(a0)
0000EEBC 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000EEC0 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EEC6 117C 0004 0028             		move.b	#4,$28(a0)
0000EECC 3011                       		move.w	(a1),d0
0000EECE 0240 03FF                  		andi.w	#$3FF,d0
0000EED2 0C40 02E8                  		cmpi.w	#$2E8,d0
0000EED6 6400                       		bcc.s	locret_E8EE
0000EED8 117C 0000 0028             		move.b	#0,$28(a0)
0000EEDE                            
0000EEDE                            locret_E8EE:
0000EEDE 4E75                       		rts	
0000EEE0                            ; ===========================================================================
0000EEE0                            
0000EEE0                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000EEE0 7000                       		moveq	#0,d0
0000EEE2 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000EEE6 E648                       		lsr.w	#3,d0
0000EEE8 3228 0030                  		move.w	$30(a0),d1
0000EEEC 9240                       		sub.w	d0,d1
0000EEEE 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000EEF2 4E75                       		rts	
0000EEF4                            ; ===========================================================================
0000EEF4                            ; ---------------------------------------------------------------------------
0000EEF4                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000EEF4                            ; ---------------------------------------------------------------------------
0000EEF4                            Map_obj46:
0000EEF4                            	include "_maps\obj46.asm"
0000EEF4                            ; ---------------------------------------------------------------------------
0000EEF4                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000EEF4                            ; ---------------------------------------------------------------------------
0000EEF4 0000                       		dc.w byte_E906-Map_obj46
0000EEF6 01                         byte_E906:	dc.b 1
0000EEF7 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000EEFC                            		even
0000EEFC                            		even
0000EEFC                            
0000EEFC                            ; ===========================================================================
0000EEFC                            ; ---------------------------------------------------------------------------
0000EEFC                            ; Object 12 - lamp (SYZ)
0000EEFC                            ; ---------------------------------------------------------------------------
0000EEFC                            
0000EEFC                            Obj12:					; XREF: Obj_Index
0000EEFC 7000                       		moveq	#0,d0
0000EEFE 1028 0024                  		move.b	$24(a0),d0
0000EF02 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000EF06 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000EF0A                            ; ===========================================================================
0000EF0A 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000EF0C 0000                       		dc.w Obj12_Animate-Obj12_Index
0000EF0E                            ; ===========================================================================
0000EF0E                            
0000EF0E                            Obj12_Main:				; XREF: Obj12_Index
0000EF0E 5428 0024                  		addq.b	#2,$24(a0)
0000EF12 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000EF1A 317C 0000 0002             		move.w	#0,2(a0)
0000EF20 117C 0004 0001             		move.b	#4,1(a0)
0000EF26 117C 0010 0019             		move.b	#$10,$19(a0)
0000EF2C 117C 0006 0018             		move.b	#6,$18(a0)
0000EF32                            
0000EF32                            Obj12_Animate:				; XREF: Obj12_Index
0000EF32 5328 001E                  		subq.b	#1,$1E(a0)
0000EF36 6A00                       		bpl.s	Obj12_ChkDel
0000EF38 117C 0007 001E             		move.b	#7,$1E(a0)
0000EF3E 5228 001A                  		addq.b	#1,$1A(a0)
0000EF42 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000EF48 6500                       		bcs.s	Obj12_ChkDel
0000EF4A 117C 0000 001A             		move.b	#0,$1A(a0)
0000EF50                            
0000EF50                            Obj12_ChkDel:
0000EF50 3028 0008                  		move.w	8(a0),d0
0000EF54 0240 FF80                  		andi.w	#$FF80,d0
0000EF58 3238 F700                  		move.w	($FFFFF700).w,d1
0000EF5C 0441 0080                  		subi.w	#$80,d1
0000EF60 0241 FF80                  		andi.w	#$FF80,d1
0000EF64 9041                       		sub.w	d1,d0
0000EF66 0C40 0280                  		cmpi.w	#$280,d0
0000EF6A 6200 ECCA                  		bhi.w	DeleteObject
0000EF6E 6000 EC8A                  		bra.w	DisplaySprite
0000EF72                            ; ===========================================================================
0000EF72                            ; ---------------------------------------------------------------------------
0000EF72                            ; Sprite mappings - lamp (SYZ)
0000EF72                            ; ---------------------------------------------------------------------------
0000EF72                            Map_obj12:
0000EF72                            	include "_maps\obj12.asm"
0000EF72                            ; ---------------------------------------------------------------------------
0000EF72                            ; Sprite mappings - lamp (SYZ)
0000EF72                            ; ---------------------------------------------------------------------------
0000EF72 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000EF76 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000EF7A 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000EF7E 02                         byte_E98E:	dc.b 2
0000EF7F F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000EF84 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000EF89 02                         byte_E999:	dc.b 2
0000EF8A F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000EF8F 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000EF94 02                         byte_E9A4:	dc.b 2
0000EF95 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000EF9A 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000EF9F 02                         byte_E9AF:	dc.b 2
0000EFA0 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000EFA5 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000EFAA 02                         byte_E9BA:	dc.b 2
0000EFAB F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000EFB0 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000EFB5 02                         byte_E9C5:	dc.b 2
0000EFB6 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000EFBB 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000EFC0                            		even
0000EFC0                            		even
0000EFC0                            
0000EFC0                            ; ===========================================================================
0000EFC0                            ; ---------------------------------------------------------------------------
0000EFC0                            ; Object 47 - pinball bumper (SYZ)
0000EFC0                            ; ---------------------------------------------------------------------------
0000EFC0                            
0000EFC0                            Obj47:					; XREF: Obj_Index
0000EFC0 7000                       		moveq	#0,d0
0000EFC2 1028 0024                  		move.b	$24(a0),d0
0000EFC6 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000EFCA 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000EFCE                            ; ===========================================================================
0000EFCE 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000EFD0 0000                       		dc.w Obj47_Hit-Obj47_Index
0000EFD2                            ; ===========================================================================
0000EFD2                            
0000EFD2                            Obj47_Main:				; XREF: Obj47_Index
0000EFD2 5428 0024                  		addq.b	#2,$24(a0)
0000EFD6 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000EFDE 317C 0380 0002             		move.w	#$380,2(a0)
0000EFE4 117C 0004 0001             		move.b	#4,1(a0)
0000EFEA 117C 0010 0019             		move.b	#$10,$19(a0)
0000EFF0 117C 0001 0018             		move.b	#1,$18(a0)
0000EFF6 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000EFFC                            
0000EFFC                            Obj47_Hit:				; XREF: Obj47_Index
0000EFFC 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000F000 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000F004 4228 0021                  		clr.b	$21(a0)
0000F008 43F8 D000                  		lea	($FFFFD000).w,a1
0000F00C 3228 0008                  		move.w	8(a0),d1
0000F010 3428 000C                  		move.w	$C(a0),d2
0000F014 9269 0008                  		sub.w	8(a1),d1
0000F018 9469 000C                  		sub.w	$C(a1),d2
0000F01C 4EB9 0000 2F2E             		jsr	(CalcAngle).l
0000F022 4EB9 0000 2C60             		jsr	(CalcSine).l
0000F028 C3FC F900                  		muls.w	#-$700,d1
0000F02C E081                       		asr.l	#8,d1
0000F02E 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000F032 C1FC F900                  		muls.w	#-$700,d0
0000F036 E080                       		asr.l	#8,d0
0000F038 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000F03C 08E9 0001 0022             		bset	#1,$22(a1)
0000F042 08A9 0004 0022             		bclr	#4,$22(a1)
0000F048 08A9 0005 0022             		bclr	#5,$22(a1)
0000F04E 4229 003C                  		clr.b	$3C(a1)
0000F052 117C 0001 001C             		move.b	#1,$1C(a0)
0000F058 303C 00B4                  		move.w	#$B4,d0
0000F05C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F062 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F066 7000                       		moveq	#0,d0
0000F068 1028 0023                  		move.b	$23(a0),d0
0000F06C 6700                       		beq.s	Obj47_Score
0000F06E 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F074 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F076 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F07A                            
0000F07A                            Obj47_Score:
0000F07A 7001                       		moveq	#1,d0
0000F07C 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F082 6100 EFFC                  		bsr.w	SingleObjLoad
0000F086 6600                       		bne.s	Obj47_Display
0000F088 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F08C 3368 0008 0008             		move.w	8(a0),8(a1)
0000F092 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F098 137C 0004 001A             		move.b	#4,$1A(a1)
0000F09E                            
0000F09E                            Obj47_Display:
0000F09E 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F0A4 6100 BC1E                  		bsr.w	AnimateSprite
0000F0A8 3028 0008                  		move.w	8(a0),d0
0000F0AC 0240 FF80                  		andi.w	#$FF80,d0
0000F0B0 3238 F700                  		move.w	($FFFFF700).w,d1
0000F0B4 0441 0080                  		subi.w	#$80,d1
0000F0B8 0241 FF80                  		andi.w	#$FF80,d1
0000F0BC 9041                       		sub.w	d1,d0
0000F0BE 0C40 0280                  		cmpi.w	#$280,d0
0000F0C2 6200                       		bhi.s	Obj47_ChkHit
0000F0C4 6000 EB34                  		bra.w	DisplaySprite
0000F0C8                            ; ===========================================================================
0000F0C8                            
0000F0C8                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F0C8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F0CC 7000                       		moveq	#0,d0
0000F0CE 1028 0023                  		move.b	$23(a0),d0
0000F0D2 6700                       		beq.s	Obj47_Delete
0000F0D4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F0DA                            
0000F0DA                            Obj47_Delete:
0000F0DA 6000 EB5A                  		bra.w	DeleteObject
0000F0DE                            ; ===========================================================================
0000F0DE                            Ani_obj47:
0000F0DE                            	include "_anim\obj47.asm"
0000F0DE                            ; ---------------------------------------------------------------------------
0000F0DE                            ; Animation script - flamethrower (SBZ)
0000F0DE                            ; ---------------------------------------------------------------------------
0000F0DE 0000                       		dc.w byte_EAF4-Ani_obj47
0000F0E0 0000                       		dc.w byte_EAF8-Ani_obj47
0000F0E2 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F0E6 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F0EE                            		even
0000F0EE                            		even
0000F0EE                            
0000F0EE                            ; ---------------------------------------------------------------------------
0000F0EE                            ; Sprite mappings - pinball bumper (SYZ)
0000F0EE                            ; ---------------------------------------------------------------------------
0000F0EE                            Map_obj47:
0000F0EE                            	include "_maps\obj47.asm"
0000F0EE                            ; ---------------------------------------------------------------------------
0000F0EE                            ; Sprite mappings - pinball bumper (SYZ)
0000F0EE                            ; ---------------------------------------------------------------------------
0000F0EE 0000                       		dc.w byte_EB06-Map_obj47
0000F0F0 0000                       		dc.w byte_EB11-Map_obj47
0000F0F2 0000                       		dc.w byte_EB1C-Map_obj47
0000F0F4 02                         byte_EB06:	dc.b 2
0000F0F5 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F0FA F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F0FF 02                         byte_EB11:	dc.b 2
0000F100 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F105 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F10A 02                         byte_EB1C:	dc.b 2
0000F10B F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F110 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F116 00                         		even
0000F116 00                         		even
0000F116                            
0000F116                            ; ===========================================================================
0000F116                            ; ---------------------------------------------------------------------------
0000F116                            ; Object 0D - signpost at the end of a level
0000F116                            ; ---------------------------------------------------------------------------
0000F116                            
0000F116                            Obj0D:					; XREF: Obj_Index
0000F116 7000                       		moveq	#0,d0
0000F118 1028 0024                  		move.b	$24(a0),d0
0000F11C 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F120 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F124 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F12A 6100 BB98                  		bsr.w	AnimateSprite
0000F12E 6100 EACA                  		bsr.w	DisplaySprite
0000F132 3028 0008                  		move.w	8(a0),d0
0000F136 0240 FF80                  		andi.w	#$FF80,d0
0000F13A 3238 F700                  		move.w	($FFFFF700).w,d1
0000F13E 0441 0080                  		subi.w	#$80,d1
0000F142 0241 FF80                  		andi.w	#$FF80,d1
0000F146 9041                       		sub.w	d1,d0
0000F148 0C40 0280                  		cmpi.w	#$280,d0
0000F14C 6200 EAE8                  		bhi.w	DeleteObject
0000F150 4E75                       		rts	
0000F152                            ; ===========================================================================
0000F152 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F154 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F156 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F158 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F15A 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F15C                            ; ===========================================================================
0000F15C                            
0000F15C                            Obj0D_Main:				; XREF: Obj0D_Index
0000F15C 5428 0024                  		addq.b	#2,$24(a0)
0000F160 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F168 317C 0680 0002             		move.w	#$680,2(a0)
0000F16E 117C 0004 0001             		move.b	#4,1(a0)
0000F174 117C 0018 0019             		move.b	#$18,$19(a0)
0000F17A 117C 0004 0018             		move.b	#4,$18(a0)
0000F180                            
0000F180                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F180 3038 D008                  		move.w	($FFFFD008).w,d0
0000F184 9068 0008                  		sub.w	8(a0),d0
0000F188 6500                       		bcs.s	locret_EBBA
0000F18A 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F18E 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F190 303C 00CF                  		move.w	#$CF,d0
0000F194 4EB9 0000 15B6             		jsr	(PlaySound).l	; play signpost	sound
0000F19A 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F19E 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F1A4 5428 0024                  		addq.b	#2,$24(a0)
0000F1A8                            
0000F1A8                            locret_EBBA:
0000F1A8 4E75                       		rts	
0000F1AA                            ; ===========================================================================
0000F1AA                            
0000F1AA                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F1AA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F1AE 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F1B0 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F1B6 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F1BA 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F1C0 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F1C2 5428 0024                  		addq.b	#2,$24(a0)
0000F1C6                            
0000F1C6                            Obj0D_Sparkle:
0000F1C6 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F1CA 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F1CC 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F1D2 7000                       		moveq	#0,d0
0000F1D4 1028 0034                  		move.b	$34(a0),d0
0000F1D8 5428 0034                  		addq.b	#2,$34(a0)
0000F1DC 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F1E2 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F1E6 6100 EE98                  		bsr.w	SingleObjLoad
0000F1EA 6600                       		bne.s	locret_EC42
0000F1EC 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F1F0 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F1F6 101A                       		move.b	(a2)+,d0
0000F1F8 4880                       		ext.w	d0
0000F1FA D068 0008                  		add.w	8(a0),d0
0000F1FE 3340 0008                  		move.w	d0,8(a1)
0000F202 101A                       		move.b	(a2)+,d0
0000F204 4880                       		ext.w	d0
0000F206 D068 000C                  		add.w	$C(a0),d0
0000F20A 3340 000C                  		move.w	d0,$C(a1)
0000F20E 237C 0000 A462 0004        		move.l	#Map_obj25,4(a1)
0000F216 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F21C 137C 0004 0001             		move.b	#4,1(a1)
0000F222 137C 0002 0018             		move.b	#2,$18(a1)
0000F228 137C 0008 0019             		move.b	#8,$19(a1)
0000F22E                            
0000F22E                            locret_EC42:
0000F22E 4E75                       		rts	
0000F230                            ; ===========================================================================
0000F230 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F232 0808                       		dc.b	8,   8
0000F234 F000                       		dc.b -$10,   0
0000F236 18F8                       		dc.b  $18,  -8
0000F238 00F8                       		dc.b	0,  -8
0000F23A 1000                       		dc.b  $10,   0
0000F23C E808                       		dc.b -$18,   8
0000F23E 1810                       		dc.b  $18, $10
0000F240                            ; ===========================================================================
0000F240                            
0000F240                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F240 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F244 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F248 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F24E 6600                       		bne.s	loc_EC70
0000F250 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F256 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000F25C 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000F25E 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000F264 6000                       		bra.s	loc_EC70
0000F266                            
0000F266                            Obj0D_MoveLeft:
0000F266 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F26C                            
0000F26C                            loc_EC70:
0000F26C 4A38 D000                  		tst.b	($FFFFD000).w
0000F270 6700                       		beq.s	loc_EC86
0000F272 3038 D008                  		move.w	($FFFFD008).w,d0
0000F276 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F27A 0641 0128                  		addi.w	#$128,d1
0000F27E B041                       		cmp.w	d1,d0
0000F280 6500                       		bcs.s	locret_ECEE
0000F282                            
0000F282                            loc_EC86:
0000F282 5428 0024                  		addq.b	#2,$24(a0)
0000F286                            
0000F286                            ; ---------------------------------------------------------------------------
0000F286                            ; Subroutine to	set up bonuses at the end of an	act
0000F286                            ; ---------------------------------------------------------------------------
0000F286                            
0000F286                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F286                            
0000F286                            
0000F286                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F286 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F28A 6600                       		bne.s	locret_ECEE
0000F28C 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F292 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F296 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F29A 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F2A0 7010                       		moveq	#$10,d0
0000F2A2 4EB9 0000 17D2             		jsr	(LoadPLC2).l	; load title card patterns
0000F2A8 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F2AE 7000                       		moveq	#0,d0
0000F2B0 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F2B4 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F2B8 7200                       		moveq	#0,d1
0000F2BA 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F2BE D041                       		add.w	d1,d0		; add up your time
0000F2C0 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F2C4 7214                       		moveq	#$14,d1
0000F2C6 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F2C8 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F2CA 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F2CC                            
0000F2CC                            loc_ECD0:
0000F2CC D040                       		add.w	d0,d0
0000F2CE 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F2D4 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F2D8 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F2DC 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F2E0 303C 008E                  		move.w	#$8E,d0
0000F2E4 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F2EA                            
0000F2EA                            locret_ECEE:
0000F2EA 4E75                       		rts	
0000F2EC                            ; End of function GotThroughAct
0000F2EC                            
0000F2EC                            ; ===========================================================================
0000F2EC 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F300 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F316                            ; ===========================================================================
0000F316                            
0000F316                            locret_ED1A:				; XREF: Obj0D_Index
0000F316 4E75                       		rts	
0000F318                            ; ===========================================================================
0000F318                            Ani_obj0D:
0000F318                            	include "_anim\obj0D.asm"
0000F318                            ; ---------------------------------------------------------------------------
0000F318                            ; Animation script - signpost
0000F318                            ; ---------------------------------------------------------------------------
0000F318 0000                       		dc.w byte_ED24-Ani_obj0D
0000F31A 0000                       		dc.w byte_ED28-Ani_obj0D
0000F31C 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F31E 0000                       		dc.w byte_ED34-Ani_obj0D
0000F320 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F324 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F32A 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F330 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F334 00                         		even
0000F334 00                         		even
0000F334                            
0000F334                            ; ---------------------------------------------------------------------------
0000F334                            ; Sprite mappings - signpost
0000F334                            ; ---------------------------------------------------------------------------
0000F334                            Map_obj0D:
0000F334                            	include "_maps\obj0D.asm"
0000F334                            ; ---------------------------------------------------------------------------
0000F334                            ; Sprite mappings - signpost
0000F334                            ; ---------------------------------------------------------------------------
0000F334 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F338 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F33C 0000                       		dc.w byte_ED73-Map_obj0D
0000F33E 03                         byte_ED42:	dc.b 3
0000F33F F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F344 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F349 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F34E 02                         byte_ED52:	dc.b 2
0000F34F F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F354 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F359 02                         byte_ED5D:	dc.b 2
0000F35A F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F35F 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F364 02                         byte_ED68:	dc.b 2
0000F365 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F36A 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F36F 03                         byte_ED73:	dc.b 3
0000F370 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F375 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F37A 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F380 00                         		even
0000F380 00                         		even
0000F380                            
0000F380                            ; ===========================================================================
0000F380                            ; ---------------------------------------------------------------------------
0000F380                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F380                            ; ---------------------------------------------------------------------------
0000F380                            
0000F380                            Obj4C:					; XREF: Obj_Index
0000F380 7000                       		moveq	#0,d0
0000F382 1028 0024                  		move.b	$24(a0),d0
0000F386 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F38A 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F38E 6000 0000                  		bra.w	Obj4D_ChkDel
0000F392                            ; ===========================================================================
0000F392 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F394 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F396 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F398 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F39A 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F39C 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F39E                            ; ===========================================================================
0000F39E                            
0000F39E                            Obj4C_Main:				; XREF: Obj4C_Index
0000F39E 5428 0024                  		addq.b	#2,$24(a0)
0000F3A2 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F3AA 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F3B0 117C 0004 0001             		move.b	#4,1(a0)
0000F3B6 117C 0001 0018             		move.b	#1,$18(a0)
0000F3BC 117C 0038 0019             		move.b	#$38,$19(a0)
0000F3C2 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F3C8                            
0000F3C8                            loc_EDCC:				; XREF: Obj4C_Index
0000F3C8 5368 0032                  		subq.w	#1,$32(a0)
0000F3CC 6A00                       		bpl.s	locret_EDF0
0000F3CE 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F3D4 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F3D8 3228 000C                  		move.w	$C(a0),d1
0000F3DC B041                       		cmp.w	d1,d0
0000F3DE 6400                       		bcc.s	locret_EDF0
0000F3E0 0441 0170                  		subi.w	#$170,d1
0000F3E4 B041                       		cmp.w	d1,d0
0000F3E6 6500                       		bcs.s	locret_EDF0
0000F3E8 5428 0024                  		addq.b	#2,$24(a0)
0000F3EC                            
0000F3EC                            locret_EDF0:
0000F3EC 4E75                       		rts	
0000F3EE                            ; ===========================================================================
0000F3EE                            
0000F3EE                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F3EE 5428 0024                  		addq.b	#2,$24(a0)
0000F3F2 6100 ECA2                  		bsr.w	SingleObjLoad2
0000F3F6 6600                       		bne.s	loc_EE18
0000F3F8 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F3FC 3368 0008 0008             		move.w	8(a0),8(a1)
0000F402 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F408 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F40E 2348 003C                  		move.l	a0,$3C(a1)
0000F412                            
0000F412                            loc_EE18:
0000F412 117C 0001 001C             		move.b	#1,$1C(a0)
0000F418 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F41C 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F41E 117C 0004 001C             		move.b	#4,$1C(a0)
0000F424 6000                       		bra.s	Obj4C_Display
0000F426                            ; ===========================================================================
0000F426                            
0000F426                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F426 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F42A 08E9 0001 0022             		bset	#1,$22(a1)
0000F430 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F436 6000                       		bra.s	Obj4C_Display
0000F438                            ; ===========================================================================
0000F438                            
0000F438                            loc_EE3E:				; XREF: Obj4C_Index
0000F438 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F43C 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F43E 5428 0024                  		addq.b	#2,$24(a0)
0000F442 4E75                       		rts	
0000F444                            ; ===========================================================================
0000F444                            
0000F444                            Obj4C_Display:				; XREF: Obj4C_Index
0000F444 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F44A 6100 B878                  		bsr.w	AnimateSprite
0000F44E 6100 E7AA                  		bsr.w	DisplaySprite
0000F452 4E75                       		rts	
0000F454                            ; ===========================================================================
0000F454                            
0000F454                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F454 117C 0000 001C             		move.b	#0,$1C(a0)
0000F45A 117C 0002 0024             		move.b	#2,$24(a0)
0000F460 4A28 0028                  		tst.b	$28(a0)
0000F464 6700 E7D0                  		beq.w	DeleteObject
0000F468 4E75                       		rts	
0000F46A                            ; ===========================================================================
0000F46A                            ; ---------------------------------------------------------------------------
0000F46A                            ; Object 4D - lava geyser / lavafall (MZ)
0000F46A                            ; ---------------------------------------------------------------------------
0000F46A                            
0000F46A                            Obj4D:					; XREF: Obj_Index
0000F46A 7000                       		moveq	#0,d0
0000F46C 1028 0024                  		move.b	$24(a0),d0
0000F470 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F474 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F478 6000 E780                  		bra.w	DisplaySprite
0000F47C                            ; ===========================================================================
0000F47C 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F47E 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F480 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F482 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F484                            
0000F484 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F488                            ; ===========================================================================
0000F488                            
0000F488                            Obj4D_Main:				; XREF: Obj4D_Index
0000F488 5428 0024                  		addq.b	#2,$24(a0)
0000F48C 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F492 4A28 0028                  		tst.b	$28(a0)
0000F496 6700                       		beq.s	loc_EEA4
0000F498 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F49E                            
0000F49E                            loc_EEA4:
0000F49E 7000                       		moveq	#0,d0
0000F4A0 1028 0028                  		move.b	$28(a0),d0
0000F4A4 D040                       		add.w	d0,d0
0000F4A6 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F4AC 2248                       		movea.l	a0,a1
0000F4AE 7201                       		moveq	#1,d1
0000F4B0 6100                       		bsr.s	Obj4D_MakeLava
0000F4B2 6000                       		bra.s	loc_EF10
0000F4B4                            ; ===========================================================================
0000F4B4                            
0000F4B4                            Obj4D_Loop:
0000F4B4 6100 EBE0                  		bsr.w	SingleObjLoad2
0000F4B8 6600                       		bne.s	loc_EF0A
0000F4BA                            
0000F4BA                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F4BA 12BC 004D                  		move.b	#$4D,0(a1)
0000F4BE 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F4C6 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F4CC 137C 0004 0001             		move.b	#4,1(a1)
0000F4D2 137C 0020 0019             		move.b	#$20,$19(a1)
0000F4D8 3368 0008 0008             		move.w	8(a0),8(a1)
0000F4DE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F4E4 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F4EA 137C 0001 0018             		move.b	#1,$18(a1)
0000F4F0 137C 0005 001C             		move.b	#5,$1C(a1)
0000F4F6 4A28 0028                  		tst.b	$28(a0)
0000F4FA 6700                       		beq.s	loc_EF0A
0000F4FC 137C 0002 001C             		move.b	#2,$1C(a1)
0000F502                            
0000F502                            loc_EF0A:
0000F502 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F506 4E75                       		rts	
0000F508                            ; ===========================================================================
0000F508                            
0000F508                            loc_EF10:				; XREF: Obj4D_Main
0000F508 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F50E 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F514 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F51A 137C 0093 0020             		move.b	#$93,$20(a1)
0000F520 137C 0080 0016             		move.b	#$80,$16(a1)
0000F526 08E9 0004 0001             		bset	#4,1(a1)
0000F52C 5829 0024                  		addq.b	#4,$24(a1)
0000F530 2348 003C                  		move.l	a0,$3C(a1)
0000F534 4A28 0028                  		tst.b	$28(a0)
0000F538 6700                       		beq.s	Obj4D_PlaySnd
0000F53A 7200                       		moveq	#0,d1
0000F53C 6100 FF76                  		bsr.w	Obj4D_Loop
0000F540 5429 0024                  		addq.b	#2,$24(a1)
0000F544 08E9 0004 0002             		bset	#4,2(a1)
0000F54A 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F550 137C 0000 0018             		move.b	#0,$18(a1)
0000F556 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F55C 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F562 117C 0000 0028             		move.b	#0,$28(a0)
0000F568                            
0000F568                            Obj4D_PlaySnd:
0000F568 303C 00C8                  		move.w	#$C8,d0
0000F56C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flame sound
0000F572                            
0000F572                            Obj4D_Action:				; XREF: Obj4D_Index
0000F572 7000                       		moveq	#0,d0
0000F574 1028 0028                  		move.b	$28(a0),d0
0000F578 D040                       		add.w	d0,d0
0000F57A 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F57E 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F582 6100 E650                  		bsr.w	SpeedToPos
0000F586 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F58C 6100 B736                  		bsr.w	AnimateSprite
0000F590                            
0000F590                            Obj4D_ChkDel:				; XREF: Obj4C
0000F590 3028 0008                  		move.w	8(a0),d0
0000F594 0240 FF80                  		andi.w	#$FF80,d0
0000F598 3238 F700                  		move.w	($FFFFF700).w,d1
0000F59C 0441 0080                  		subi.w	#$80,d1
0000F5A0 0241 FF80                  		andi.w	#$FF80,d1
0000F5A4 9041                       		sub.w	d1,d0
0000F5A6 0C40 0280                  		cmpi.w	#$280,d0
0000F5AA 6200 E68A                  		bhi.w	DeleteObject
0000F5AE 4E75                       		rts	
0000F5B0                            ; ===========================================================================
0000F5B0 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F5B2 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F5B4                            ; ===========================================================================
0000F5B4                            
0000F5B4                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F5B4 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F5BA 3028 0030                  		move.w	$30(a0),d0
0000F5BE B068 000C                  		cmp.w	$C(a0),d0
0000F5C2 6400                       		bcc.s	locret_EFDA
0000F5C4 5828 0024                  		addq.b	#4,$24(a0)
0000F5C8 2268 003C                  		movea.l	$3C(a0),a1
0000F5CC 137C 0003 001C             		move.b	#3,$1C(a1)
0000F5D2                            
0000F5D2                            locret_EFDA:
0000F5D2 4E75                       		rts	
0000F5D4                            ; ===========================================================================
0000F5D4                            
0000F5D4                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F5D4 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F5DA 3028 0030                  		move.w	$30(a0),d0
0000F5DE B068 000C                  		cmp.w	$C(a0),d0
0000F5E2 6400                       		bcc.s	locret_EFFA
0000F5E4 5828 0024                  		addq.b	#4,$24(a0)
0000F5E8 2268 003C                  		movea.l	$3C(a0),a1
0000F5EC 137C 0001 001C             		move.b	#1,$1C(a1)
0000F5F2                            
0000F5F2                            locret_EFFA:
0000F5F2 4E75                       		rts	
0000F5F4                            ; ===========================================================================
0000F5F4                            
0000F5F4                            loc_EFFC:				; XREF: Obj4D_Index
0000F5F4 2268 003C                  		movea.l	$3C(a0),a1
0000F5F8 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000F5FE 6700 0000                  		beq.w	Obj4D_Delete
0000F602 3029 000C                  		move.w	$C(a1),d0
0000F606 0640 0060                  		addi.w	#$60,d0
0000F60A 3140 000C                  		move.w	d0,$C(a0)
0000F60E 9068 0030                  		sub.w	$30(a0),d0
0000F612 4440                       		neg.w	d0
0000F614 7208                       		moveq	#8,d1
0000F616 0C40 0040                  		cmpi.w	#$40,d0
0000F61A 6C00                       		bge.s	loc_F026
0000F61C 720B                       		moveq	#$B,d1
0000F61E                            
0000F61E                            loc_F026:
0000F61E 0C40 0080                  		cmpi.w	#$80,d0
0000F622 6F00                       		ble.s	loc_F02E
0000F624 720E                       		moveq	#$E,d1
0000F626                            
0000F626                            loc_F02E:
0000F626 5328 001E                  		subq.b	#1,$1E(a0)
0000F62A 6A00                       		bpl.s	loc_F04C
0000F62C 117C 0007 001E             		move.b	#7,$1E(a0)
0000F632 5228 001B                  		addq.b	#1,$1B(a0)
0000F636 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000F63C 6500                       		bcs.s	loc_F04C
0000F63E 117C 0000 001B             		move.b	#0,$1B(a0)
0000F644                            
0000F644                            loc_F04C:
0000F644 1028 001B                  		move.b	$1B(a0),d0
0000F648 D001                       		add.b	d1,d0
0000F64A 1140 001A                  		move.b	d0,$1A(a0)
0000F64E 6000 FF40                  		bra.w	Obj4D_ChkDel
0000F652                            ; ===========================================================================
0000F652                            
0000F652                            Obj4D_Delete:				; XREF: Obj4D_Index
0000F652 6000 E5E2                  		bra.w	DeleteObject
0000F656                            ; ===========================================================================
0000F656                            ; ---------------------------------------------------------------------------
0000F656                            ; Object 4E - advancing	wall of	lava (MZ)
0000F656                            ; ---------------------------------------------------------------------------
0000F656                            
0000F656                            Obj4E:					; XREF: Obj_Index
0000F656 7000                       		moveq	#0,d0
0000F658 1028 0024                  		move.b	$24(a0),d0
0000F65C 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000F660 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000F664                            ; ===========================================================================
0000F664 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000F666 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000F668 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000F66A 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000F66C 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000F66E                            ; ===========================================================================
0000F66E                            
0000F66E                            Obj4E_Main:				; XREF: Obj4E_Index
0000F66E 5828 0024                  		addq.b	#4,$24(a0)
0000F672 2248                       		movea.l	a0,a1
0000F674 7201                       		moveq	#1,d1
0000F676 6000                       		bra.s	Obj4E_Main2
0000F678                            ; ===========================================================================
0000F678                            
0000F678                            Obj4E_Loop:
0000F678 6100 EA1C                  		bsr.w	SingleObjLoad2
0000F67C 6600                       		bne.s	loc_F0C8
0000F67E                            
0000F67E                            Obj4E_Main2:				; XREF: Obj4E_Main
0000F67E 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000F682 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000F68A 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F690 137C 0004 0001             		move.b	#4,1(a1)
0000F696 137C 0050 0019             		move.b	#$50,$19(a1)
0000F69C 3368 0008 0008             		move.w	8(a0),8(a1)
0000F6A2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F6A8 137C 0001 0018             		move.b	#1,$18(a1)
0000F6AE 137C 0000 001C             		move.b	#0,$1C(a1)
0000F6B4 137C 0094 0020             		move.b	#$94,$20(a1)
0000F6BA 2348 003C                  		move.l	a0,$3C(a1)
0000F6BE                            
0000F6BE                            loc_F0C8:
0000F6BE 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000F6C2                            
0000F6C2 5C29 0024                  		addq.b	#6,$24(a1)
0000F6C6 137C 0004 001A             		move.b	#4,$1A(a1)
0000F6CC                            
0000F6CC                            Obj4E_Action:				; XREF: Obj4E_Index
0000F6CC 3038 D008                  		move.w	($FFFFD008).w,d0
0000F6D0 9068 0008                  		sub.w	8(a0),d0
0000F6D4 6400                       		bcc.s	Obj4E_ChkSonic
0000F6D6 4440                       		neg.w	d0
0000F6D8                            
0000F6D8                            Obj4E_ChkSonic:
0000F6D8 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F6DC 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F6DE 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F6E2 9068 000C                  		sub.w	$C(a0),d0
0000F6E6 6400                       		bcc.s	loc_F0F4
0000F6E8 4440                       		neg.w	d0
0000F6EA                            
0000F6EA                            loc_F0F4:
0000F6EA 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F6EE 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F6F0 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000F6F6 6000                       		bra.s	Obj4E_Solid
0000F6F8                            ; ===========================================================================
0000F6F8                            
0000F6F8                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000F6F8 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000F6FC 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000F6FE 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000F704 5528 0024                  		subq.b	#2,$24(a0)
0000F708                            
0000F708                            Obj4E_Solid:				; XREF: Obj4E_Index
0000F708 323C 002B                  		move.w	#$2B,d1
0000F70C 343C 0018                  		move.w	#$18,d2
0000F710 3602                       		move.w	d2,d3
0000F712 5243                       		addq.w	#1,d3
0000F714 3828 0008                  		move.w	8(a0),d4
0000F718 1028 0024                  		move.b	$24(a0),d0
0000F71C 3F00                       		move.w	d0,-(sp)
0000F71E 6100 0000                  		bsr.w	SolidObject
0000F722 301F                       		move.w	(sp)+,d0
0000F724 1140 0024                  		move.b	d0,$24(a0)
0000F728 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000F72E 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000F730 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000F734 4228 0036                  		clr.b	$36(a0)
0000F738                            
0000F738                            Obj4E_Animate:
0000F738 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000F73E 6100 B584                  		bsr.w	AnimateSprite
0000F742 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000F748 6400                       		bcc.s	Obj4E_ChkDel
0000F74A 6100 E488                  		bsr.w	SpeedToPos
0000F74E                            
0000F74E                            Obj4E_ChkDel:
0000F74E 6100 E4AA                  		bsr.w	DisplaySprite
0000F752 4A28 0036                  		tst.b	$36(a0)
0000F756 6600                       		bne.s	locret_F17E
0000F758 3028 0008                  		move.w	8(a0),d0
0000F75C 0240 FF80                  		andi.w	#$FF80,d0
0000F760 3238 F700                  		move.w	($FFFFF700).w,d1
0000F764 0441 0080                  		subi.w	#$80,d1
0000F768 0241 FF80                  		andi.w	#$FF80,d1
0000F76C 9041                       		sub.w	d1,d0
0000F76E 0C40 0280                  		cmpi.w	#$280,d0
0000F772 6200                       		bhi.s	Obj4E_ChkGone
0000F774                            
0000F774                            locret_F17E:
0000F774 4E75                       		rts	
0000F776                            ; ===========================================================================
0000F776                            
0000F776                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000F776 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F77A 7000                       		moveq	#0,d0
0000F77C 1028 0023                  		move.b	$23(a0),d0
0000F780 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F786 117C 0008 0024             		move.b	#8,$24(a0)
0000F78C 4E75                       		rts	
0000F78E                            ; ===========================================================================
0000F78E                            
0000F78E                            Obj4E_Move2:				; XREF: Obj4E_Index
0000F78E 2268 003C                  		movea.l	$3C(a0),a1
0000F792 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000F798 6700                       		beq.s	Obj4E_Delete
0000F79A 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000F7A0 0468 0080 0008             		subi.w	#$80,8(a0)
0000F7A6 6000 E452                  		bra.w	DisplaySprite
0000F7AA                            ; ===========================================================================
0000F7AA                            
0000F7AA                            Obj4E_Delete:				; XREF: Obj4E_Index
0000F7AA 6000 E48A                  		bra.w	DeleteObject
0000F7AE                            ; ===========================================================================
0000F7AE                            ; ---------------------------------------------------------------------------
0000F7AE                            ; Object 54 - invisible	lava tag (MZ)
0000F7AE                            ; ---------------------------------------------------------------------------
0000F7AE                            
0000F7AE                            Obj54:					; XREF: Obj_Index
0000F7AE 7000                       		moveq	#0,d0
0000F7B0 1028 0024                  		move.b	$24(a0),d0
0000F7B4 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000F7B8 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000F7BC                            ; ===========================================================================
0000F7BC 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000F7BE 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000F7C0                            
0000F7C0 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000F7C4                            ; ===========================================================================
0000F7C4                            
0000F7C4                            Obj54_Main:				; XREF: Obj54_Index
0000F7C4 5428 0024                  		addq.b	#2,$24(a0)
0000F7C8 7000                       		moveq	#0,d0
0000F7CA 1028 0028                  		move.b	$28(a0),d0
0000F7CE 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000F7D4 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000F7DC 117C 0084 0001             		move.b	#$84,1(a0)
0000F7E2                            
0000F7E2                            Obj54_ChkDel:				; XREF: Obj54_Index
0000F7E2 3028 0008                  		move.w	8(a0),d0
0000F7E6 0240 FF80                  		andi.w	#$FF80,d0
0000F7EA 3238 F700                  		move.w	($FFFFF700).w,d1
0000F7EE 0441 0080                  		subi.w	#$80,d1
0000F7F2 0241 FF80                  		andi.w	#$FF80,d1
0000F7F6 9041                       		sub.w	d1,d0
0000F7F8 6B00 E43C                  		bmi.w	DeleteObject
0000F7FC 0C40 0280                  		cmpi.w	#$280,d0
0000F800 6200 E434                  		bhi.w	DeleteObject
0000F804 4E75                       		rts	
0000F806                            ; ===========================================================================
0000F806                            ; ---------------------------------------------------------------------------
0000F806                            ; Sprite mappings - invisible lava tag (MZ)
0000F806                            ; ---------------------------------------------------------------------------
0000F806                            Map_obj54:
0000F806                            	include "_maps\obj54.asm"
0000F806                            ; ---------------------------------------------------------------------------
0000F806                            ; Sprite mappings - invisible lava tag (MZ)
0000F806                            ; ---------------------------------------------------------------------------
0000F806 0000                       		dc.w byte_F212-Map_obj54
0000F808 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000F80A 00                         		even
0000F80A 00                         		even
0000F80A                            
0000F80A                            Ani_obj4C:
0000F80A                            	include "_anim\obj4C.asm"
0000F80A                            ; ---------------------------------------------------------------------------
0000F80A                            ; Animation script - geyser of lava (MZ)
0000F80A                            ; ---------------------------------------------------------------------------
0000F80A 0000                       		dc.w byte_F220-Ani_obj4C
0000F80C 0000                       		dc.w byte_F22A-Ani_obj4C
0000F80E 0000                       		dc.w byte_F22E-Ani_obj4C
0000F810 0000                       		dc.w byte_F232-Ani_obj4C
0000F812 0000                       		dc.w byte_F23A-Ani_obj4C
0000F814 0000                       		dc.w byte_F23E-Ani_obj4C
0000F816 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000F820 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000F824 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000F828 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000F830 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000F834 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000F838                            		even
0000F838                            		even
0000F838                            
0000F838                            Ani_obj4E:
0000F838                            	include "_anim\obj4E.asm"
0000F838                            ; ---------------------------------------------------------------------------
0000F838                            ; Animation script - advancing wall of lava (MZ)
0000F838                            ; ---------------------------------------------------------------------------
0000F838 0000                       		dc.w byte_F244-Ani_obj4E
0000F83A 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000F840                            		even
0000F840                            		even
0000F840                            
0000F840                            ; ---------------------------------------------------------------------------
0000F840                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F840                            ; ---------------------------------------------------------------------------
0000F840                            Map_obj4C:
0000F840                            	include "_maps\obj4C.asm"
0000F840                            ; ---------------------------------------------------------------------------
0000F840                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F840                            ; ---------------------------------------------------------------------------
0000F840 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000F844 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000F848 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000F84C 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000F850 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000F854 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000F858 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000F85C 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000F860 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000F864 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000F868 02                         byte_F272:	dc.b 2
0000F869 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000F86E EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000F873 02                         byte_F27D:	dc.b 2
0000F874 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000F879 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000F87E 04                         byte_F288:	dc.b 4
0000F87F EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F884 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F889 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F88E EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F893 04                         byte_F29D:	dc.b 4
0000F894 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F899 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F89E F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F8A3 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F8A8 06                         byte_F2B2:	dc.b 6
0000F8A9 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F8AE F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F8B3 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F8B8 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F8BD E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000F8C2 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000F8C7 06                         byte_F2D1:	dc.b 6
0000F8C8 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F8CD F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F8D2 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F8D7 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F8DC E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000F8E1 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000F8E6 02                         byte_F2F0:	dc.b 2
0000F8E7 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000F8EC E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000F8F1 02                         byte_F2FB:	dc.b 2
0000F8F2 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000F8F7 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000F8FC 0A                         byte_F306:	dc.b $A
0000F8FD 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F902 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F907 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F90C B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F911 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F916 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F91B F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F920 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F925 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F92A 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F92F 0A                         byte_F339:	dc.b $A
0000F930 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F935 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F93A B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F93F B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F944 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F949 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F94E F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F953 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000F958 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000F95D 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000F962 0A                         byte_F36C:	dc.b $A
0000F963 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F968 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F96D B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F972 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F977 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F97C D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F981 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000F986 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000F98B 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000F990 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000F995 06                         byte_F39F:	dc.b 6
0000F996 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F99B 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F9A0 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F9A5 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F9AA D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F9AF D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F9B4 06                         byte_F3BE:	dc.b 6
0000F9B5 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F9BA 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F9BF B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F9C4 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F9C9 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F9CE D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F9D3 06                         byte_F3DD:	dc.b 6
0000F9D4 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F9D9 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F9DE B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F9E3 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F9E8 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F9ED D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F9F2 10                         byte_F3FC:	dc.b $10
0000F9F3 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F9F8 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F9FD B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FA02 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FA07 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FA0C D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FA11 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FA16 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FA1B 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FA20 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FA25 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000FA2A 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000FA2F 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000FA34 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000FA39 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000FA3E 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000FA43 10                         byte_F44D:	dc.b $10
0000FA44 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FA49 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FA4E B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FA53 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FA58 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FA5D D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FA62 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FA67 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FA6C 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FA71 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FA76 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000FA7B 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FA80 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FA85 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FA8A 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FA8F 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FA94 10                         byte_F49E:	dc.b $10
0000FA95 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FA9A 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FA9F B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FAA4 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FAA9 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FAAE D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FAB3 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FAB8 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FABD 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FAC2 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FAC7 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FACC 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FAD1 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FAD6 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FADB 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FAE0 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FAE5 06                         byte_F4EF:	dc.b 6
0000FAE6 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FAEB E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FAF0 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FAF5 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FAFA D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000FAFF D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000FB04 06                         byte_F50E:	dc.b 6
0000FB05 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000FB0A E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000FB0F E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000FB14 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000FB19 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000FB1E D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000FB23 00                         byte_F52D:	dc.b 0
0000FB24                            		even
0000FB24                            		even
0000FB24                            
0000FB24                            ; ---------------------------------------------------------------------------
0000FB24                            ; Sprite mappings - advancing wall of lava (MZ)
0000FB24                            ; ---------------------------------------------------------------------------
0000FB24                            Map_obj4E:
0000FB24                            	include "_maps\obj4E.asm"
0000FB24                            ; ---------------------------------------------------------------------------
0000FB24                            ; Sprite mappings - advancing wall of lava (MZ)
0000FB24                            ; ---------------------------------------------------------------------------
0000FB24 0000                       		dc.w byte_F538-Map_obj4E
0000FB26 0000                       		dc.w byte_F566-Map_obj4E
0000FB28 0000                       		dc.w byte_F594-Map_obj4E
0000FB2A 0000                       		dc.w byte_F5C2-Map_obj4E
0000FB2C 0000                       		dc.w byte_F5F0-Map_obj4E
0000FB2E 09                         byte_F538:	dc.b 9
0000FB2F E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000FB34 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FB39 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FB3E E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FB43 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FB48 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FB4D 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FB52 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FB57 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FB5C 09                         byte_F566:	dc.b 9
0000FB5D E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FB62 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000FB67 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FB6C E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FB71 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FB76 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FB7B 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FB80 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FB85 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FB8A 09                         byte_F594:	dc.b 9
0000FB8B E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000FB90 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FB95 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FB9A E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FB9F 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FBA4 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FBA9 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FBAE E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FBB3 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FBB8 09                         byte_F5C2:	dc.b 9
0000FBB9 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FBBE 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000FBC3 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FBC8 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FBCD 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FBD2 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FBD7 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FBDC E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FBE1 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FBE6 08                         byte_F5F0:	dc.b 8
0000FBE7 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000FBEC 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FBF1 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FBF6 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FBFB E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FC00 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FC05 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FC0A 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FC10 00                         		even
0000FC10 00                         		even
0000FC10                            
0000FC10                            ; ===========================================================================
0000FC10                            ; ---------------------------------------------------------------------------
0000FC10                            ; Object 40 - Moto Bug enemy (GHZ)
0000FC10                            ; ---------------------------------------------------------------------------
0000FC10                            
0000FC10                            Obj40:					; XREF: Obj_Index
0000FC10 7000                       		moveq	#0,d0
0000FC12 1028 0024                  		move.b	$24(a0),d0
0000FC16 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000FC1A 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000FC1E                            ; ===========================================================================
0000FC1E 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000FC20 0000                       		dc.w Obj40_Action-Obj40_Index
0000FC22 0000                       		dc.w Obj40_Animate-Obj40_Index
0000FC24 0000                       		dc.w Obj40_Delete-Obj40_Index
0000FC26                            ; ===========================================================================
0000FC26                            
0000FC26                            Obj40_Main:				; XREF: Obj40_Index
0000FC26 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000FC2E 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000FC34 117C 0004 0001             		move.b	#4,1(a0)
0000FC3A 117C 0004 0018             		move.b	#4,$18(a0)
0000FC40 117C 0014 0019             		move.b	#$14,$19(a0)
0000FC46 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000FC4A 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000FC4C 117C 000E 0016             		move.b	#$E,$16(a0)
0000FC52 117C 0008 0017             		move.b	#8,$17(a0)
0000FC58 117C 000C 0020             		move.b	#$C,$20(a0)
0000FC5E 6100 DF48                  		bsr.w	ObjectFall
0000FC62 4EB9 0000 0000             		jsr	ObjHitFloor
0000FC68 4A41                       		tst.w	d1
0000FC6A 6A00                       		bpl.s	locret_F68A
0000FC6C D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FC70 317C 0000 0012             		move.w	#0,$12(a0)
0000FC76 5428 0024                  		addq.b	#2,$24(a0)
0000FC7A 0868 0000 0022             		bchg	#0,$22(a0)
0000FC80                            
0000FC80                            locret_F68A:
0000FC80 4E75                       		rts	
0000FC82                            ; ===========================================================================
0000FC82                            
0000FC82                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000FC82 5828 0024                  		addq.b	#4,$24(a0)
0000FC86 6000 0000                  		bra.w	Obj40_Animate
0000FC8A                            ; ===========================================================================
0000FC8A                            
0000FC8A                            Obj40_Action:				; XREF: Obj40_Index
0000FC8A 7000                       		moveq	#0,d0
0000FC8C 1028 0025                  		move.b	$25(a0),d0
0000FC90 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000FC94 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000FC98 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FC9E 6100 B024                  		bsr.w	AnimateSprite
0000FCA2                            
0000FCA2                            ; ---------------------------------------------------------------------------
0000FCA2                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000FCA2                            ; ---------------------------------------------------------------------------
0000FCA2                            
0000FCA2                            MarkObjGone:
0000FCA2 3028 0008                  		move.w	8(a0),d0
0000FCA6 0240 FF80                  		andi.w	#$FF80,d0
0000FCAA 3238 F700                  		move.w	($FFFFF700).w,d1
0000FCAE 0441 0080                  		subi.w	#$80,d1
0000FCB2 0241 FF80                  		andi.w	#$FF80,d1
0000FCB6 9041                       		sub.w	d1,d0
0000FCB8 0C40 0280                  		cmpi.w	#$280,d0
0000FCBC 6200 0000                  		bhi.w	Mark_ChkGone
0000FCC0 6000 DF38                  		bra.w	DisplaySprite
0000FCC4                            ; ===========================================================================
0000FCC4                            
0000FCC4                            Mark_ChkGone:
0000FCC4 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FCC8 7000                       		moveq	#0,d0
0000FCCA 1028 0023                  		move.b	$23(a0),d0
0000FCCE 6700                       		beq.s	Mark_Delete
0000FCD0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FCD6                            
0000FCD6                            Mark_Delete:
0000FCD6 6000 DF5E                  		bra.w	DeleteObject
0000FCDA                            
0000FCDA                            ; ===========================================================================
0000FCDA 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000FCDC 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000FCDE                            ; ===========================================================================
0000FCDE                            
0000FCDE                            Obj40_Move:				; XREF: Obj40_Index2
0000FCDE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FCE2 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000FCE4 5428 0025                  		addq.b	#2,$25(a0)
0000FCE8 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000FCEE 117C 0001 001C             		move.b	#1,$1C(a0)
0000FCF4 0868 0000 0022             		bchg	#0,$22(a0)
0000FCFA 6600                       		bne.s	locret_F70A
0000FCFC 4468 0010                  		neg.w	$10(a0)		; change direction
0000FD00                            
0000FD00                            locret_F70A:
0000FD00 4E75                       		rts	
0000FD02                            ; ===========================================================================
0000FD02                            
0000FD02                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000FD02 6100 DED0                  		bsr.w	SpeedToPos
0000FD06 4EB9 0000 0000             		jsr	ObjHitFloor
0000FD0C 0C41 FFF8                  		cmpi.w	#-8,d1
0000FD10 6D00                       		blt.s	Obj40_Pause
0000FD12 0C41 000C                  		cmpi.w	#$C,d1
0000FD16 6C00                       		bge.s	Obj40_Pause
0000FD18 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FD1C 5328 0033                  		subq.b	#1,$33(a0)
0000FD20 6A00                       		bpl.s	locret_F756
0000FD22 117C 000F 0033             		move.b	#$F,$33(a0)
0000FD28 6100 E356                  		bsr.w	SingleObjLoad
0000FD2C 6600                       		bne.s	locret_F756
0000FD2E 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000FD32 3368 0008 0008             		move.w	8(a0),8(a1)
0000FD38 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FD3E 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000FD44 137C 0002 001C             		move.b	#2,$1C(a1)
0000FD4A                            
0000FD4A                            locret_F756:
0000FD4A 4E75                       		rts	
0000FD4C                            ; ===========================================================================
0000FD4C                            
0000FD4C                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000FD4C 5528 0025                  		subq.b	#2,$25(a0)
0000FD50 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FD56 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000FD5C 117C 0000 001C             		move.b	#0,$1C(a0)
0000FD62 4E75                       		rts	
0000FD64                            ; ===========================================================================
0000FD64                            
0000FD64                            Obj40_Animate:				; XREF: Obj40_Index
0000FD64 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FD6A 6100 AF58                  		bsr.w	AnimateSprite
0000FD6E 6000 DE8A                  		bra.w	DisplaySprite
0000FD72                            ; ===========================================================================
0000FD72                            
0000FD72                            Obj40_Delete:				; XREF: Obj40_Index
0000FD72 6000 DEC2                  		bra.w	DeleteObject
0000FD76                            ; ===========================================================================
0000FD76                            Ani_obj40:
0000FD76                            	include "_anim\obj40.asm"
0000FD76                            ; ---------------------------------------------------------------------------
0000FD76                            ; Animation script - Motobug enemy
0000FD76                            ; ---------------------------------------------------------------------------
0000FD76 0000                       		dc.w byte_F788-Ani_obj40
0000FD78 0000                       		dc.w byte_F78C-Ani_obj40
0000FD7A 0000                       		dc.w byte_F792-Ani_obj40
0000FD7C 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0000FD80 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0000FD86 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0000FD94                            		even
0000FD94                            		even
0000FD94                            
0000FD94                            ; ---------------------------------------------------------------------------
0000FD94                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000FD94                            ; ---------------------------------------------------------------------------
0000FD94                            Map_obj40:
0000FD94                            	include "_maps\obj40.asm"
0000FD94                            Map_cedc:
0000FD94 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
0000FD96 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
0000FD98 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
0000FD9A 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
0000FD9C 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
0000FD9E 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
0000FDA0 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
0000FDA2 04                         Map_cedc_E: 	dc.b $4
0000FDA3 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FDA8 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
0000FDAD F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FDB2 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
0000FDB7 04                         Map_cedc_23: 	dc.b $4
0000FDB8 F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
0000FDBD 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
0000FDC2 F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
0000FDC7 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
0000FDCC 05                         Map_cedc_38: 	dc.b $5
0000FDCD F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FDD2 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
0000FDD7 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FDDC 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
0000FDE1 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
0000FDE6 01                         Map_cedc_52: 	dc.b $1
0000FDE7 FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
0000FDEC 01                         Map_cedc_58: 	dc.b $1
0000FDED FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
0000FDF2 01                         Map_cedc_5E: 	dc.b $1
0000FDF3 FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
0000FDF8 00                         Map_cedc_64: 	dc.b $0
0000FDFA 00                         	even
0000FDFA 00                         	even
0000FDFA                            
0000FDFA                            ; ===========================================================================
0000FDFA                            ; ---------------------------------------------------------------------------
0000FDFA                            ; Object 4F - blank
0000FDFA                            ; ---------------------------------------------------------------------------
0000FDFA                            
0000FDFA                            Obj4F:					; XREF: Obj_Index
0000FDFA 4E75                       		rts	
0000FDFC                            
0000FDFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FDFC                            
0000FDFC                            
0000FDFC                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
0000FDFC 3038 FE04                  		move.w	($FFFFFE04).w,d0
0000FE00 D047                       		add.w	d7,d0
0000FE02 0240 0003                  		andi.w	#3,d0
0000FE06 6600                       		bne.s	loc_F836
0000FE08 7600                       		moveq	#0,d3
0000FE0A 1628 0019                  		move.b	$19(a0),d3
0000FE0E 4A68 0010                  		tst.w	$10(a0)
0000FE12 6B00                       		bmi.s	loc_F82C
0000FE14 6100 0000                  		bsr.w	ObjHitWallRight
0000FE18 4A41                       		tst.w	d1
0000FE1A 6A00                       		bpl.s	loc_F836
0000FE1C                            
0000FE1C                            loc_F828:
0000FE1C 7001                       		moveq	#1,d0
0000FE1E 4E75                       		rts	
0000FE20                            ; ===========================================================================
0000FE20                            
0000FE20                            loc_F82C:
0000FE20 4643                       		not.w	d3
0000FE22 6100 0000                  		bsr.w	ObjHitWallLeft
0000FE26 4A41                       		tst.w	d1
0000FE28 6BF2                       		bmi.s	loc_F828
0000FE2A                            
0000FE2A                            loc_F836:
0000FE2A 7000                       		moveq	#0,d0
0000FE2C 4E75                       		rts	
0000FE2E                            ; End of function Obj50_ChkWall
0000FE2E                            
0000FE2E                            ; ===========================================================================
0000FE2E                            ; ---------------------------------------------------------------------------
0000FE2E                            ; Object 50 - Yadrin enemy (SYZ)
0000FE2E                            ; ---------------------------------------------------------------------------
0000FE2E                            
0000FE2E                            Obj50:					; XREF: Obj_Index
0000FE2E 7000                       		moveq	#0,d0
0000FE30 1028 0024                  		move.b	$24(a0),d0
0000FE34 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0000FE38 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0000FE3C                            ; ===========================================================================
0000FE3C 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0000FE3E 0000                       		dc.w Obj50_Action-Obj50_Index
0000FE40                            ; ===========================================================================
0000FE40                            
0000FE40                            Obj50_Main:				; XREF: Obj50_Index
0000FE40 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0000FE48 317C 247B 0002             		move.w	#$247B,2(a0)
0000FE4E 117C 0004 0001             		move.b	#4,1(a0)
0000FE54 117C 0004 0018             		move.b	#4,$18(a0)
0000FE5A 117C 0014 0019             		move.b	#$14,$19(a0)
0000FE60 117C 0011 0016             		move.b	#$11,$16(a0)
0000FE66 117C 0008 0017             		move.b	#8,$17(a0)
0000FE6C 117C 00CC 0020             		move.b	#$CC,$20(a0)
0000FE72 6100 DD34                  		bsr.w	ObjectFall
0000FE76 6100 0000                  		bsr.w	ObjHitFloor
0000FE7A 4A41                       		tst.w	d1
0000FE7C 6A00                       		bpl.s	locret_F89E
0000FE7E D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FE82 317C 0000 0012             		move.w	#0,$12(a0)
0000FE88 5428 0024                  		addq.b	#2,$24(a0)
0000FE8C 0868 0000 0022             		bchg	#0,$22(a0)
0000FE92                            
0000FE92                            locret_F89E:
0000FE92 4E75                       		rts	
0000FE94                            ; ===========================================================================
0000FE94                            
0000FE94                            Obj50_Action:				; XREF: Obj50_Index
0000FE94 7000                       		moveq	#0,d0
0000FE96 1028 0025                  		move.b	$25(a0),d0
0000FE9A 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
0000FE9E 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
0000FEA2 43F9 0000 0000             		lea	(Ani_obj50).l,a1
0000FEA8 6100 AE1A                  		bsr.w	AnimateSprite
0000FEAC 6000 FDF4                  		bra.w	MarkObjGone
0000FEB0                            ; ===========================================================================
0000FEB0 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
0000FEB2 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
0000FEB4                            ; ===========================================================================
0000FEB4                            
0000FEB4                            Obj50_Move:				; XREF: Obj50_Index2
0000FEB4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FEB8 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
0000FEBA 5428 0025                  		addq.b	#2,$25(a0)
0000FEBE 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
0000FEC4 117C 0001 001C             		move.b	#1,$1C(a0)
0000FECA 0868 0000 0022             		bchg	#0,$22(a0)
0000FED0 6600                       		bne.s	locret_F8E2
0000FED2 4468 0010                  		neg.w	$10(a0)		; change direction
0000FED6                            
0000FED6                            locret_F8E2:
0000FED6 4E75                       		rts	
0000FED8                            ; ===========================================================================
0000FED8                            
0000FED8                            Obj50_FixToFloor:			; XREF: Obj50_Index2
0000FED8 6100 DCFA                  		bsr.w	SpeedToPos
0000FEDC 6100 0000                  		bsr.w	ObjHitFloor
0000FEE0 0C41 FFF8                  		cmpi.w	#-8,d1
0000FEE4 6D00                       		blt.s	Obj50_Pause
0000FEE6 0C41 000C                  		cmpi.w	#$C,d1
0000FEEA 6C00                       		bge.s	Obj50_Pause
0000FEEC D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
0000FEF0 6100 FF0A                  		bsr.w	Obj50_ChkWall
0000FEF4 6600                       		bne.s	Obj50_Pause
0000FEF6 4E75                       		rts	
0000FEF8                            ; ===========================================================================
0000FEF8                            
0000FEF8                            Obj50_Pause:				; XREF: Obj50_FixToFloor
0000FEF8 5528 0025                  		subq.b	#2,$25(a0)
0000FEFC 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FF02 317C 0000 0010             		move.w	#0,$10(a0)
0000FF08 117C 0000 001C             		move.b	#0,$1C(a0)
0000FF0E 4E75                       		rts	
0000FF10                            ; ===========================================================================
0000FF10                            Ani_obj50:
0000FF10                            	include "_anim\obj50.asm"
0000FF10                            ; ---------------------------------------------------------------------------
0000FF10                            ; Animation script - Yadrin enemy
0000FF10                            ; ---------------------------------------------------------------------------
0000FF10 0000                       		dc.w byte_F920-Ani_obj50
0000FF12 0000                       		dc.w byte_F924-Ani_obj50
0000FF14 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
0000FF18 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
0000FF22                            		even
0000FF22                            		even
0000FF22                            
0000FF22                            ; ---------------------------------------------------------------------------
0000FF22                            ; Sprite mappings - Yadrin enemy (SYZ)
0000FF22                            ; ---------------------------------------------------------------------------
0000FF22                            Map_obj50:
0000FF22                            	include "_maps\obj50.asm"
0000FF22                            ; ---------------------------------------------------------------------------
0000FF22                            ; Sprite mappings - Yadrin enemy (SYZ)
0000FF22                            ; ---------------------------------------------------------------------------
0000FF22 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
0000FF26 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
0000FF2A 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
0000FF2E 05                         byte_F93A:	dc.b 5
0000FF2F F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000FF34 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000FF39 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF3E F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF43 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FF48 05                         byte_F954:	dc.b 5
0000FF49 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000FF4E FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000FF53 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF58 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF5D 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FF62 05                         byte_F96E:	dc.b 5
0000FF63 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000FF68 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000FF6D EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF72 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF77 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FF7C 05                         byte_F988:	dc.b 5
0000FF7D F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000FF82 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000FF87 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF8C F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF91 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FF96 05                         byte_F9A2:	dc.b 5
0000FF97 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000FF9C FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000FFA1 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FFA6 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FFAB 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FFB0 05                         byte_F9BC:	dc.b 5
0000FFB1 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000FFB6 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000FFBB EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FFC0 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FFC5 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FFCA                            		even
0000FFCA                            		even
0000FFCA                            
0000FFCA                            ; ---------------------------------------------------------------------------
0000FFCA                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
0000FFCA                            ;
0000FFCA                            ; variables:
0000FFCA                            ; d1 = width
0000FFCA                            ; d2 = height /	2 (when	jumping)
0000FFCA                            ; d3 = height /	2 (when	walking)
0000FFCA                            ; d4 = x-axis position
0000FFCA                            ; ---------------------------------------------------------------------------
0000FFCA                            
0000FFCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FFCA                            
0000FFCA                            
0000FFCA                            SolidObject:
0000FFCA 4A28 0025                  		tst.b	$25(a0)
0000FFCE 6700 0000                  		beq.w	loc_FAC8
0000FFD2 3401                       		move.w	d1,d2
0000FFD4 D442                       		add.w	d2,d2
0000FFD6 43F8 D000                  		lea	($FFFFD000).w,a1
0000FFDA 0829 0001 0022             		btst	#1,$22(a1)
0000FFE0 6600                       		bne.s	loc_F9FE
0000FFE2 3029 0008                  		move.w	8(a1),d0
0000FFE6 9068 0008                  		sub.w	8(a0),d0
0000FFEA D041                       		add.w	d1,d0
0000FFEC 6B00                       		bmi.s	loc_F9FE
0000FFEE B042                       		cmp.w	d2,d0
0000FFF0 6500                       		bcs.s	loc_FA12
0000FFF2                            
0000FFF2                            loc_F9FE:
0000FFF2 08A9 0003 0022             		bclr	#3,$22(a1)
0000FFF8 08A8 0003 0022             		bclr	#3,$22(a0)
0000FFFE 4228 0025                  		clr.b	$25(a0)
00010002 7800                       		moveq	#0,d4
00010004 4E75                       		rts	
00010006                            ; ===========================================================================
00010006                            
00010006                            loc_FA12:
00010006 3404                       		move.w	d4,d2
00010008                            		;bsr.w	MvSonicOnPtfm Causes an error in building (Come back to this)
00010008 7800                       		moveq	#0,d4
0001000A 4E75                       		rts	
0001000C                            ; ===========================================================================
0001000C                            
0001000C                            SolidObject71:				; XREF: Obj71_Solid
0001000C 4A28 0025                  		tst.b	$25(a0)
00010010 6700 0000                  		beq.w	loc_FAD0
00010014 3401                       		move.w	d1,d2
00010016 D442                       		add.w	d2,d2
00010018 43F8 D000                  		lea	($FFFFD000).w,a1
0001001C 0829 0001 0022             		btst	#1,$22(a1)
00010022 6600                       		bne.s	loc_FA44
00010024 3029 0008                  		move.w	8(a1),d0
00010028 9068 0008                  		sub.w	8(a0),d0
0001002C D041                       		add.w	d1,d0
0001002E 6B00                       		bmi.s	loc_FA44
00010030 B042                       		cmp.w	d2,d0
00010032 6500                       		bcs.s	loc_FA58
00010034                            
00010034                            loc_FA44:
00010034 08A9 0003 0022             		bclr	#3,$22(a1)
0001003A 08A8 0003 0022             		bclr	#3,$22(a0)
00010040 4228 0025                  		clr.b	$25(a0)
00010044 7800                       		moveq	#0,d4
00010046 4E75                       		rts	
00010048                            ; ===========================================================================
00010048                            
00010048                            loc_FA58:
00010048 3404                       		move.w	d4,d2
0001004A                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
0001004A 7800                       		moveq	#0,d4
0001004C 4E75                       		rts	
0001004E                            ; ===========================================================================
0001004E                            
0001004E                            SolidObject2F:				; XREF: Obj2F_Solid
0001004E 43F8 D000                  		lea	($FFFFD000).w,a1
00010052 4A28 0001                  		tst.b	1(a0)
00010056 6A00 0000                  		bpl.w	loc_FB92
0001005A 3029 0008                  		move.w	8(a1),d0
0001005E 9068 0008                  		sub.w	8(a0),d0
00010062 D041                       		add.w	d1,d0
00010064 6B00 0000                  		bmi.w	loc_FB92
00010068 3601                       		move.w	d1,d3
0001006A D643                       		add.w	d3,d3
0001006C B043                       		cmp.w	d3,d0
0001006E 6200 0000                  		bhi.w	loc_FB92
00010072 3A00                       		move.w	d0,d5
00010074 0828 0000 0001             		btst	#0,1(a0)
0001007A 6700                       		beq.s	loc_FA94
0001007C 4645                       		not.w	d5
0001007E DA43                       		add.w	d3,d5
00010080                            
00010080                            loc_FA94:
00010080 E24D                       		lsr.w	#1,d5
00010082 7600                       		moveq	#0,d3
00010084 1632 5000                  		move.b	(a2,d5.w),d3
00010088 9612                       		sub.b	(a2),d3
0001008A 3A28 000C                  		move.w	$C(a0),d5
0001008E 9A43                       		sub.w	d3,d5
00010090 1629 0016                  		move.b	$16(a1),d3
00010094 4883                       		ext.w	d3
00010096 D443                       		add.w	d3,d2
00010098 3629 000C                  		move.w	$C(a1),d3
0001009C 9645                       		sub.w	d5,d3
0001009E 5843                       		addq.w	#4,d3
000100A0 D642                       		add.w	d2,d3
000100A2 6B00 0000                  		bmi.w	loc_FB92
000100A6 3802                       		move.w	d2,d4
000100A8 D844                       		add.w	d4,d4
000100AA B644                       		cmp.w	d4,d3
000100AC 6400 0000                  		bcc.w	loc_FB92
000100B0 6000 0000                  		bra.w	loc_FB0E
000100B4                            ; ===========================================================================
000100B4                            
000100B4                            loc_FAC8:
000100B4 4A28 0001                  		tst.b	1(a0)
000100B8 6A00 0000                  		bpl.w	loc_FB92
000100BC                            
000100BC                            loc_FAD0:
000100BC 43F8 D000                  		lea	($FFFFD000).w,a1
000100C0 3029 0008                  		move.w	8(a1),d0
000100C4 9068 0008                  		sub.w	8(a0),d0
000100C8 D041                       		add.w	d1,d0
000100CA 6B00 0000                  		bmi.w	loc_FB92
000100CE 3601                       		move.w	d1,d3
000100D0 D643                       		add.w	d3,d3
000100D2 B043                       		cmp.w	d3,d0
000100D4 6200 0000                  		bhi.w	loc_FB92
000100D8 1629 0016                  		move.b	$16(a1),d3
000100DC 4883                       		ext.w	d3
000100DE D443                       		add.w	d3,d2
000100E0 3629 000C                  		move.w	$C(a1),d3
000100E4 9668 000C                  		sub.w	$C(a0),d3
000100E8 5843                       		addq.w	#4,d3
000100EA D642                       		add.w	d2,d3
000100EC 6B00 0000                  		bmi.w	loc_FB92
000100F0 3802                       		move.w	d2,d4
000100F2 D844                       		add.w	d4,d4
000100F4 B644                       		cmp.w	d4,d3
000100F6 6400 0000                  		bcc.w	loc_FB92
000100FA                            
000100FA                            loc_FB0E:
000100FA 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000100FE 6B00 0000                  		bmi.w	loc_FB92
00010102 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00010108 6400 0000                  		bcc.w	loc_FB92
0001010C 4A78 FE08                  		tst.w	($FFFFFE08).w
00010110 6600 0000                  		bne.w	loc_FBAC
00010114 3A00                       		move.w	d0,d5
00010116 B240                       		cmp.w	d0,d1
00010118 6400                       		bcc.s	loc_FB36
0001011A D241                       		add.w	d1,d1
0001011C 9041                       		sub.w	d1,d0
0001011E 3A00                       		move.w	d0,d5
00010120 4445                       		neg.w	d5
00010122                            
00010122                            loc_FB36:
00010122 3203                       		move.w	d3,d1
00010124 B443                       		cmp.w	d3,d2
00010126 6400                       		bcc.s	loc_FB44
00010128 5943                       		subq.w	#4,d3
0001012A 9644                       		sub.w	d4,d3
0001012C 3203                       		move.w	d3,d1
0001012E 4441                       		neg.w	d1
00010130                            
00010130                            loc_FB44:
00010130 BA41                       		cmp.w	d1,d5
00010132 6200 0000                  		bhi.w	loc_FBB0
00010136 0C41 0004                  		cmpi.w	#4,d1
0001013A 6300                       		bls.s	loc_FB8C
0001013C 4A40                       		tst.w	d0
0001013E 6700                       		beq.s	loc_FB70
00010140 6B00                       		bmi.s	loc_FB5E
00010142 4A69 0010                  		tst.w	$10(a1)
00010146 6B00                       		bmi.s	loc_FB70
00010148 6000                       		bra.s	loc_FB64
0001014A                            ; ===========================================================================
0001014A                            
0001014A                            loc_FB5E:
0001014A 4A69 0010                  		tst.w	$10(a1)
0001014E 6A00                       		bpl.s	loc_FB70
00010150                            
00010150                            loc_FB64:
00010150 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
00010156 337C 0000 0010             		move.w	#0,$10(a1)
0001015C                            
0001015C                            loc_FB70:
0001015C 9169 0008                  		sub.w	d0,8(a1)
00010160 0829 0001 0022             		btst	#1,$22(a1)
00010166 6600                       		bne.s	loc_FB8C
00010168 08E9 0005 0022             		bset	#5,$22(a1)
0001016E 08E8 0005 0022             		bset	#5,$22(a0)
00010174 7801                       		moveq	#1,d4
00010176 4E75                       		rts	
00010178                            ; ===========================================================================
00010178                            
00010178                            loc_FB8C:
00010178 6100                       		bsr.s	loc_FBA0
0001017A 7801                       		moveq	#1,d4
0001017C 4E75                       		rts	
0001017E                            ; ===========================================================================
0001017E                            
0001017E                            loc_FB92:
0001017E 0828 0005 0022             		btst	#5,$22(a0)
00010184 6700                       		beq.s	loc_FBAC
00010186 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
0001018C                            
0001018C                            loc_FBA0:
0001018C 08A8 0005 0022             		bclr	#5,$22(a0)
00010192 08A9 0005 0022             		bclr	#5,$22(a1)
00010198                            
00010198                            loc_FBAC:
00010198 7800                       		moveq	#0,d4
0001019A 4E75                       		rts	
0001019C                            ; ===========================================================================
0001019C                            
0001019C                            loc_FBB0:
0001019C 4A43                       		tst.w	d3
0001019E 6B00                       		bmi.s	loc_FBBC
000101A0 0C43 0010                  		cmpi.w	#$10,d3
000101A4 6500                       		bcs.s	loc_FBEE
000101A6 60D6                       		bra.s	loc_FB92
000101A8                            ; ===========================================================================
000101A8                            
000101A8                            loc_FBBC:
000101A8 4A69 0012                  		tst.w	$12(a1)
000101AC 6700                       		beq.s	loc_FBD6
000101AE 6A00                       		bpl.s	loc_FBD2
000101B0 4A43                       		tst.w	d3
000101B2 6A00                       		bpl.s	loc_FBD2
000101B4 9769 000C                  		sub.w	d3,$C(a1)
000101B8 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
000101BE                            
000101BE                            loc_FBD2:
000101BE 78FF                       		moveq	#-1,d4
000101C0 4E75                       		rts	
000101C2                            ; ===========================================================================
000101C2                            
000101C2                            loc_FBD6:
000101C2 0829 0001 0022             		btst	#1,$22(a1)
000101C8 66F4                       		bne.s	loc_FBD2
000101CA 2F08                       		move.l	a0,-(sp)
000101CC 2049                       		movea.l	a1,a0
000101CE 4EB9 0000 0000             		jsr	KillSonic
000101D4 205F                       		movea.l	(sp)+,a0
000101D6 78FF                       		moveq	#-1,d4
000101D8 4E75                       		rts	
000101DA                            ; ===========================================================================
000101DA                            
000101DA                            loc_FBEE:
000101DA 5943                       		subq.w	#4,d3
000101DC 7200                       		moveq	#0,d1
000101DE 1228 0019                  		move.b	$19(a0),d1
000101E2 3401                       		move.w	d1,d2
000101E4 D442                       		add.w	d2,d2
000101E6 D269 0008                  		add.w	8(a1),d1
000101EA 9268 0008                  		sub.w	8(a0),d1
000101EE 6B00                       		bmi.s	loc_FC28
000101F0 B242                       		cmp.w	d2,d1
000101F2 6400                       		bcc.s	loc_FC28
000101F4 4A69 0012                  		tst.w	$12(a1)
000101F8 6B00                       		bmi.s	loc_FC28
000101FA 9769 000C                  		sub.w	d3,$C(a1)
000101FE 5369 000C                  		subq.w	#1,$C(a1)
00010202 6100                       		bsr.s	sub_FC2C
00010204 117C 0002 0025             		move.b	#2,$25(a0)
0001020A 08E8 0003 0022             		bset	#3,$22(a0)
00010210 78FF                       		moveq	#-1,d4
00010212 4E75                       		rts	
00010214                            ; ===========================================================================
00010214                            
00010214                            loc_FC28:
00010214 7800                       		moveq	#0,d4
00010216 4E75                       		rts	
00010218                            ; End of function SolidObject
00010218                            
00010218                            
00010218                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010218                            
00010218                            
00010218                            sub_FC2C:				; XREF: SolidObject
00010218 0829 0003 0022             		btst	#3,$22(a1)
0001021E 6700                       		beq.s	loc_FC4E
00010220 7000                       		moveq	#0,d0
00010222 1029 003D                  		move.b	$3D(a1),d0
00010226 ED48                       		lsl.w	#6,d0
00010228 0680 00FF D000             		addi.l	#$FFD000,d0
0001022E 2440                       		movea.l	d0,a2
00010230 08AA 0003 0022             		bclr	#3,$22(a2)
00010236 422A 0025                  		clr.b	$25(a2)
0001023A                            
0001023A                            loc_FC4E:
0001023A 3008                       		move.w	a0,d0
0001023C 0440 D000                  		subi.w	#-$3000,d0
00010240 EC48                       		lsr.w	#6,d0
00010242 0240 007F                  		andi.w	#$7F,d0
00010246 1340 003D                  		move.b	d0,$3D(a1)
0001024A 137C 0000 0026             		move.b	#0,$26(a1)
00010250 337C 0000 0012             		move.w	#0,$12(a1)
00010256 3369 0010 0014             		move.w	$10(a1),$14(a1)
0001025C 0829 0001 0022             		btst	#1,$22(a1)
00010262 6700                       		beq.s	loc_FC84
00010264 2F08                       		move.l	a0,-(sp)
00010266 2049                       		movea.l	a1,a0
00010268 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0001026E 205F                       		movea.l	(sp)+,a0
00010270                            
00010270                            loc_FC84:
00010270 08E9 0003 0022             		bset	#3,$22(a1)
00010276 08E8 0003 0022             		bset	#3,$22(a0)
0001027C 4E75                       		rts	
0001027E                            ; End of function sub_FC2C
0001027E                            
0001027E                            ; ===========================================================================
0001027E                            ; ---------------------------------------------------------------------------
0001027E                            ; Object 51 - smashable	green block (MZ)
0001027E                            ; ---------------------------------------------------------------------------
0001027E                            
0001027E                            Obj51:					; XREF: Obj_Index
0001027E 7000                       		moveq	#0,d0
00010280 1028 0024                  		move.b	$24(a0),d0
00010284 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
00010288 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
0001028C 6000 FA14                  		bra.w	MarkObjGone
00010290                            ; ===========================================================================
00010290 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
00010292 0000                       		dc.w Obj51_Solid-Obj51_Index
00010294 0000                       		dc.w Obj51_Display-Obj51_Index
00010296                            ; ===========================================================================
00010296                            
00010296                            Obj51_Main:				; XREF: Obj51_Index
00010296 5428 0024                  		addq.b	#2,$24(a0)
0001029A 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
000102A2 317C 42B8 0002             		move.w	#$42B8,2(a0)
000102A8 117C 0004 0001             		move.b	#4,1(a0)
000102AE 117C 0010 0019             		move.b	#$10,$19(a0)
000102B4 117C 0004 0018             		move.b	#4,$18(a0)
000102BA 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000102C0                            
000102C0                            Obj51_Solid:				; XREF: Obj51_Index
000102C0 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
000102C6 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
000102CC 323C 001B                  		move.w	#$1B,d1
000102D0 343C 0010                  		move.w	#$10,d2
000102D4 363C 0011                  		move.w	#$11,d3
000102D8 3828 0008                  		move.w	8(a0),d4
000102DC 6100 FCEC                  		bsr.w	SolidObject
000102E0 0828 0003 0022             		btst	#3,$22(a0)
000102E6 6600                       		bne.s	Obj51_Smash
000102E8                            
000102E8                            locret_FCFC:
000102E8 4E75                       		rts	
000102EA                            ; ===========================================================================
000102EA                            
000102EA                            Obj51_Smash:				; XREF: Obj51_Solid
000102EA 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
000102F0 66F6                       		bne.s	locret_FCFC	; if not, branch
000102F2 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
000102F8 08E9 0002 0022             		bset	#2,$22(a1)
000102FE 137C 000E 0016             		move.b	#$E,$16(a1)
00010304 137C 0007 0017             		move.b	#7,$17(a1)
0001030A 137C 0002 001C             		move.b	#2,$1C(a1)
00010310 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
00010316 08E9 0001 0022             		bset	#1,$22(a1)
0001031C 08A9 0003 0022             		bclr	#3,$22(a1)
00010322 137C 0002 0024             		move.b	#2,$24(a1)
00010328 08A8 0003 0022             		bclr	#3,$22(a0)
0001032E 4228 0025                  		clr.b	$25(a0)
00010332 117C 0001 001A             		move.b	#1,$1A(a0)
00010338 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
0001033E 7203                       		moveq	#3,d1		; set number of	fragments to 4
00010340 343C 0038                  		move.w	#$38,d2
00010344 6100 D4A2                  		bsr.w	SmashObject
00010348 6100 DD36                  		bsr.w	SingleObjLoad
0001034C 6600                       		bne.s	Obj51_Display
0001034E 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00010352 3368 0008 0008             		move.w	8(a0),8(a1)
00010358 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001035E 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
00010362 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
00010366 0C42 0006                  		cmpi.w	#6,d2
0001036A 6500                       		bcs.s	Obj51_Bonus
0001036C 7406                       		moveq	#6,d2
0001036E                            
0001036E                            Obj51_Bonus:
0001036E 7000                       		moveq	#0,d0
00010370 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
00010374 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
0001037A 6500                       		bcs.s	loc_FD98	; if not, branch
0001037C 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00010380 740A                       		moveq	#10,d2
00010382                            
00010382                            loc_FD98:
00010382 4EB9 0000 0000             		jsr	AddPoints
00010388 E24A                       		lsr.w	#1,d2
0001038A 1342 001A                  		move.b	d2,$1A(a1)
0001038E                            
0001038E                            Obj51_Display:				; XREF: Obj51_Index
0001038E 6100 D844                  		bsr.w	SpeedToPos
00010392 0668 0038 0012             		addi.w	#$38,$12(a0)
00010398 6100 D860                  		bsr.w	DisplaySprite
0001039C 4A28 0001                  		tst.b	1(a0)
000103A0 6A00 D894                  		bpl.w	DeleteObject
000103A4 4E75                       		rts	
000103A6                            ; ===========================================================================
000103A6 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
000103AA FF00 FF00                  		dc.w $FF00, $FF00
000103AE 0200 FE00                  		dc.w $200, $FE00
000103B2 0100 FF00                  		dc.w $100, $FF00
000103B6                            
000103B6 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
000103BE                            ; ---------------------------------------------------------------------------
000103BE                            ; Sprite mappings - smashable green block (MZ)
000103BE                            ; ---------------------------------------------------------------------------
000103BE                            Map_obj51:
000103BE                            	include "_maps\obj51.asm"
000103BE                            ; ---------------------------------------------------------------------------
000103BE                            ; Sprite mappings - smashable green block (MZ)
000103BE                            ; ---------------------------------------------------------------------------
000103BE 0000                       		dc.w byte_FDD8-Map_obj51
000103C0 0000                       		dc.w byte_FDE3-Map_obj51
000103C2 02                         byte_FDD8:	dc.b 2
000103C3 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
000103C8 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
000103CD 04                         byte_FDE3:	dc.b 4
000103CE F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
000103D3 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
000103D8 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
000103DD 0005 8000 00               		dc.b 0,	5, $80,	0, 0
000103E2                            		even
000103E2                            		even
000103E2                            
000103E2                            ; ===========================================================================
000103E2                            ; ---------------------------------------------------------------------------
000103E2                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
000103E2                            ; ---------------------------------------------------------------------------
000103E2                            
000103E2                            Obj52:					; XREF: Obj_Index
000103E2 7000                       		moveq	#0,d0
000103E4 1028 0024                  		move.b	$24(a0),d0
000103E8 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
000103EC 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
000103F0                            ; ===========================================================================
000103F0 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
000103F2 0000                       		dc.w Obj52_Platform-Obj52_Index
000103F4 0000                       		dc.w Obj52_StandOn-Obj52_Index
000103F6                            
000103F6 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
000103F8 2001                       		dc.b $20, 1
000103FA 2002                       		dc.b $20, 2
000103FC 4003                       		dc.b $40, 3
000103FE 3004                       		dc.b $30, 4
00010400                            ; ===========================================================================
00010400                            
00010400                            Obj52_Main:				; XREF: Obj52_Index
00010400 5428 0024                  		addq.b	#2,$24(a0)
00010404 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
0001040C 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010412 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010418 6600                       		bne.s	loc_FE44
0001041A 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00010422 317C 43BC 0002             		move.w	#$43BC,2(a0)
00010428 117C 0007 0016             		move.b	#7,$16(a0)
0001042E                            
0001042E                            loc_FE44:
0001042E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00010434 6600                       		bne.s	loc_FE60
00010436 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
0001043C 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
00010442 6700                       		beq.s	loc_FE60	; if yes, branch
00010444 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
0001044A                            
0001044A                            loc_FE60:
0001044A 117C 0004 0001             		move.b	#4,1(a0)
00010450 7000                       		moveq	#0,d0
00010452 1028 0028                  		move.b	$28(a0),d0
00010456 E648                       		lsr.w	#3,d0
00010458 0240 001E                  		andi.w	#$1E,d0
0001045C 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
00010460 115A 0019                  		move.b	(a2)+,$19(a0)
00010464 115A 001A                  		move.b	(a2)+,$1A(a0)
00010468 117C 0004 0018             		move.b	#4,$18(a0)
0001046E 3168 0008 0030             		move.w	8(a0),$30(a0)
00010474 3168 000C 0032             		move.w	$C(a0),$32(a0)
0001047A 0228 000F 0028             		andi.b	#$F,$28(a0)
00010480                            
00010480                            Obj52_Platform:				; XREF: Obj52_Index
00010480 6100 0000                  		bsr.w	Obj52_Move
00010484 7200                       		moveq	#0,d1
00010486 1228 0019                  		move.b	$19(a0),d1
0001048A 4EB9 0000 7920             		jsr	(PlatformObject).l
00010490 6000                       		bra.s	Obj52_ChkDel
00010492                            ; ===========================================================================
00010492                            
00010492                            Obj52_StandOn:				; XREF: Obj52_Index
00010492 7200                       		moveq	#0,d1
00010494 1228 0019                  		move.b	$19(a0),d1
00010498 4EB9 0000 7A94             		jsr	(ExitPlatform).l
0001049E 3F28 0008                  		move.w	8(a0),-(sp)
000104A2 6100 0000                  		bsr.w	Obj52_Move
000104A6 341F                       		move.w	(sp)+,d2
000104A8 4EB9 0000 7FFE             		jsr	(MvSonicOnPtfm2).l
000104AE                            
000104AE                            Obj52_ChkDel:				; XREF: Obj52_Platform
000104AE 3028 0030                  		move.w	$30(a0),d0
000104B2 0240 FF80                  		andi.w	#$FF80,d0
000104B6 3238 F700                  		move.w	($FFFFF700).w,d1
000104BA 0441 0080                  		subi.w	#$80,d1
000104BE 0241 FF80                  		andi.w	#$FF80,d1
000104C2 9041                       		sub.w	d1,d0
000104C4 0C40 0280                  		cmpi.w	#$280,d0
000104C8 6200 D76C                  		bhi.w	DeleteObject
000104CC 6000 D72C                  		bra.w	DisplaySprite
000104D0                            ; ===========================================================================
000104D0                            
000104D0                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
000104D0 7000                       		moveq	#0,d0
000104D2 1028 0028                  		move.b	$28(a0),d0
000104D6 0240 000F                  		andi.w	#$F,d0
000104DA D040                       		add.w	d0,d0
000104DC 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
000104E0 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
000104E4                            ; ===========================================================================
000104E4 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
000104E8 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
000104EC 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
000104F0 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
000104F4 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
000104F8 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
000104FA                            ; ===========================================================================
000104FA                            
000104FA                            Obj52_Type00:				; XREF: Obj52_TypeIndex
000104FA 4E75                       		rts	
000104FC                            ; ===========================================================================
000104FC                            
000104FC                            Obj52_Type01:				; XREF: Obj52_TypeIndex
000104FC 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010500 323C 0060                  		move.w	#$60,d1
00010504 0828 0000 0022             		btst	#0,$22(a0)
0001050A 6700                       		beq.s	loc_FF26
0001050C 4440                       		neg.w	d0
0001050E D041                       		add.w	d1,d0
00010510                            
00010510                            loc_FF26:
00010510 3228 0030                  		move.w	$30(a0),d1
00010514 9240                       		sub.w	d0,d1
00010516 3141 0008                  		move.w	d1,8(a0)
0001051A 4E75                       		rts	
0001051C                            ; ===========================================================================
0001051C                            
0001051C                            Obj52_Type02:				; XREF: Obj52_TypeIndex
0001051C 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00010522 6600                       		bne.s	Obj52_02_Wait
00010524 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00010528                            
00010528                            Obj52_02_Wait:
00010528 4E75                       		rts	
0001052A                            ; ===========================================================================
0001052A                            
0001052A                            Obj52_Type03:				; XREF: Obj52_TypeIndex
0001052A 7600                       		moveq	#0,d3
0001052C 1628 0019                  		move.b	$19(a0),d3
00010530 6100 0000                  		bsr.w	ObjHitWallRight
00010534 4A41                       		tst.w	d1		; has the platform hit a wall?
00010536 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00010538 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0001053C 3168 0008 0030             		move.w	8(a0),$30(a0)
00010542 4E75                       		rts	
00010544                            ; ===========================================================================
00010544                            
00010544                            Obj52_03_End:
00010544 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
00010548 4E75                       		rts	
0001054A                            ; ===========================================================================
0001054A                            
0001054A                            Obj52_Type05:				; XREF: Obj52_TypeIndex
0001054A 7600                       		moveq	#0,d3
0001054C 1628 0019                  		move.b	$19(a0),d3
00010550 6100 0000                  		bsr.w	ObjHitWallRight
00010554 4A41                       		tst.w	d1		; has the platform hit a wall?
00010556 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
00010558 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0001055C 3168 0008 0030             		move.w	8(a0),$30(a0)
00010562 4E75                       		rts	
00010564                            ; ===========================================================================
00010564                            
00010564                            Obj52_05_End:
00010564 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
00010568 4E75                       		rts	
0001056A                            ; ===========================================================================
0001056A                            
0001056A                            Obj52_Type06:				; XREF: Obj52_TypeIndex
0001056A 6100 D668                  		bsr.w	SpeedToPos
0001056E 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
00010574 6100 0000                  		bsr.w	ObjHitFloor
00010578 4A41                       		tst.w	d1		; has platform hit the floor?
0001057A 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
0001057E D368 000C                  		add.w	d1,$C(a0)
00010582 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00010586 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
0001058A                            
0001058A                            locret_FFA0:
0001058A 4E75                       		rts	
0001058C                            ; ===========================================================================
0001058C                            
0001058C                            Obj52_Type07:				; XREF: Obj52_TypeIndex
0001058C 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
00010590 6700                       		beq.s	Obj52_07_ChkDel
00010592 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
00010596                            
00010596                            Obj52_07_ChkDel:
00010596 588F                       		addq.l	#4,sp
00010598 3028 0030                  		move.w	$30(a0),d0
0001059C 0240 FF80                  		andi.w	#$FF80,d0
000105A0 3238 F700                  		move.w	($FFFFF700).w,d1
000105A4 0441 0080                  		subi.w	#$80,d1
000105A8 0241 FF80                  		andi.w	#$FF80,d1
000105AC 9041                       		sub.w	d1,d0
000105AE 0C40 0280                  		cmpi.w	#$280,d0
000105B2 6200 D682                  		bhi.w	DeleteObject
000105B6 4E75                       		rts	
000105B8                            ; ===========================================================================
000105B8                            
000105B8                            Obj52_Type08:				; XREF: Obj52_TypeIndex
000105B8 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000105BC 323C 0080                  		move.w	#$80,d1
000105C0 0828 0000 0022             		btst	#0,$22(a0)
000105C6 6700                       		beq.s	loc_FFE2
000105C8 4440                       		neg.w	d0
000105CA D041                       		add.w	d1,d0
000105CC                            
000105CC                            loc_FFE2:
000105CC 3228 0032                  		move.w	$32(a0),d1
000105D0 9240                       		sub.w	d0,d1
000105D2 3141 000C                  		move.w	d1,$C(a0)
000105D6 4E75                       		rts	
000105D8                            ; ===========================================================================
000105D8                            
000105D8                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
000105D8 7600                       		moveq	#0,d3
000105DA 1628 0019                  		move.b	$19(a0),d3
000105DE D643                       		add.w	d3,d3
000105E0 7208                       		moveq	#8,d1
000105E2 0828 0000 0022             		btst	#0,$22(a0)
000105E8 6700                       		beq.s	loc_10004
000105EA 4441                       		neg.w	d1
000105EC 4443                       		neg.w	d3
000105EE                            
000105EE                            loc_10004:
000105EE 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
000105F2 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
000105F4 3028 0008                  		move.w	8(a0),d0
000105F8 9068 0030                  		sub.w	$30(a0),d0
000105FC B043                       		cmp.w	d3,d0
000105FE 6700                       		beq.s	Obj52_0A_Wait
00010600 D368 0008                  		add.w	d1,8(a0)	; move platform
00010604 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
0001060A 4E75                       		rts	
0001060C                            ; ===========================================================================
0001060C                            
0001060C                            Obj52_0A_Wait:
0001060C 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00010610 6600                       		bne.s	locret_1002E	; if time remains, branch
00010612 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00010618                            
00010618                            locret_1002E:
00010618 4E75                       		rts	
0001061A                            ; ===========================================================================
0001061A                            
0001061A                            Obj52_0A_Back:
0001061A 3028 0008                  		move.w	8(a0),d0
0001061E 9068 0030                  		sub.w	$30(a0),d0
00010622 6700                       		beq.s	Obj52_0A_Reset
00010624 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00010628 4E75                       		rts	
0001062A                            ; ===========================================================================
0001062A                            
0001062A                            Obj52_0A_Reset:
0001062A 4268 0036                  		clr.w	$36(a0)
0001062E 5328 0028                  		subq.b	#1,$28(a0)
00010632 4E75                       		rts	
00010634                            ; ===========================================================================
00010634                            ; ---------------------------------------------------------------------------
00010634                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010634                            ; ---------------------------------------------------------------------------
00010634                            Map_obj52:
00010634                            	include "_maps\obj52mz.asm"
00010634                            ; ---------------------------------------------------------------------------
00010634                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010634                            ; ---------------------------------------------------------------------------
00010634 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00010638 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
0001063C 0000                       		dc.w byte_1008F-Map_obj52
0001063E 01                         byte_10054:	dc.b 1
0001063F F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010644 02                         byte_1005A:	dc.b 2
00010645 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
0001064A F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
0001064F 04                         byte_10065:	dc.b 4
00010650 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00010655 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
0001065A F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
0001065F 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00010664 04                         byte_1007A:	dc.b 4
00010665 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
0001066A F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
0001066F F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00010674 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00010679 03                         byte_1008F:	dc.b 3
0001067A F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
0001067F F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010684 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
0001068A 00                         		even
0001068A 00                         		even
0001068A                            
0001068A                            ; ---------------------------------------------------------------------------
0001068A                            ; Sprite mappings - moving block (LZ)
0001068A                            ; ---------------------------------------------------------------------------
0001068A                            Map_obj52a:
0001068A                            	include "_maps\obj52lz.asm"
0001068A                            ; ---------------------------------------------------------------------------
0001068A                            ; Sprite mappings - moving block (LZ)
0001068A                            ; ---------------------------------------------------------------------------
0001068A 0000                       		dc.w byte_100A2-Map_obj52a
0001068C 01                         byte_100A2:	dc.b 1
0001068D F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00010692                            		even
00010692                            		even
00010692                            
00010692                            ; ===========================================================================
00010692                            ; ---------------------------------------------------------------------------
00010692                            ; Object 55 - Basaran enemy (MZ)
00010692                            ; ---------------------------------------------------------------------------
00010692                            
00010692                            Obj55:					; XREF: Obj_Index
00010692 7000                       		moveq	#0,d0
00010694 1028 0024                  		move.b	$24(a0),d0
00010698 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
0001069C 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
000106A0                            ; ===========================================================================
000106A0 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
000106A2 0000                       		dc.w Obj55_Action-Obj55_Index
000106A4                            ; ===========================================================================
000106A4                            
000106A4                            Obj55_Main:				; XREF: Obj55_Index
000106A4 5428 0024                  		addq.b	#2,$24(a0)
000106A8 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
000106B0 317C 84B8 0002             		move.w	#$84B8,2(a0)
000106B6 117C 0004 0001             		move.b	#4,1(a0)
000106BC 117C 000C 0016             		move.b	#$C,$16(a0)
000106C2 117C 0002 0018             		move.b	#2,$18(a0)
000106C8 117C 000B 0020             		move.b	#$B,$20(a0)
000106CE 117C 0010 0019             		move.b	#$10,$19(a0)
000106D4                            
000106D4                            Obj55_Action:				; XREF: Obj55_Index
000106D4 7000                       		moveq	#0,d0
000106D6 1028 0025                  		move.b	$25(a0),d0
000106DA 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
000106DE 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
000106E2 43F9 0000 0000             		lea	(Ani_obj55).l,a1
000106E8 6100 A5DA                  		bsr.w	AnimateSprite
000106EC 6000 F5B4                  		bra.w	MarkObjGone
000106F0                            ; ===========================================================================
000106F0 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
000106F2 0000                       		dc.w Obj55_DropFly-Obj55_Index2
000106F4 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
000106F6 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
000106F8                            ; ===========================================================================
000106F8                            
000106F8                            Obj55_ChkDrop:				; XREF: Obj55_Index2
000106F8 343C 0080                  		move.w	#$80,d2
000106FC 6100 0000                  		bsr.w	Obj55_ChkSonic
00010700 6400                       		bcc.s	Obj55_NoDrop
00010702 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010706 3140 0036                  		move.w	d0,$36(a0)
0001070A 9068 000C                  		sub.w	$C(a0),d0
0001070E 6500                       		bcs.s	Obj55_NoDrop
00010710 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00010714 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00010716 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0001071A 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
0001071C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010720 D007                       		add.b	d7,d0
00010722 0200 0007                  		andi.b	#7,d0
00010726 6600                       		bne.s	Obj55_NoDrop
00010728 117C 0001 001C             		move.b	#1,$1C(a0)
0001072E 5428 0025                  		addq.b	#2,$25(a0)
00010732                            
00010732                            Obj55_NoDrop:
00010732 4E75                       		rts	
00010734                            ; ===========================================================================
00010734                            
00010734                            Obj55_DropFly:				; XREF: Obj55_Index2
00010734 6100 D49E                  		bsr.w	SpeedToPos
00010738 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
0001073E 343C 0080                  		move.w	#$80,d2
00010742 6100 0000                  		bsr.w	Obj55_ChkSonic
00010746 3028 0036                  		move.w	$36(a0),d0
0001074A 9068 000C                  		sub.w	$C(a0),d0
0001074E 6500                       		bcs.s	Obj55_ChkDel
00010750 0C40 0010                  		cmpi.w	#$10,d0
00010754 6400                       		bcc.s	locret_10180
00010756 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
0001075A 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00010760 117C 0002 001C             		move.b	#2,$1C(a0)
00010766 5428 0025                  		addq.b	#2,$25(a0)
0001076A                            
0001076A                            locret_10180:
0001076A 4E75                       		rts	
0001076C                            ; ===========================================================================
0001076C                            
0001076C                            Obj55_ChkDel:				; XREF: Obj55_DropFly
0001076C 4A28 0001                  		tst.b	1(a0)
00010770 6A00 D4C4                  		bpl.w	DeleteObject
00010774 4E75                       		rts	
00010776                            ; ===========================================================================
00010776                            
00010776                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00010776 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001077A 0200 000F                  		andi.b	#$F,d0
0001077E 6600                       		bne.s	loc_101A0
00010780 303C 00C0                  		move.w	#$C0,d0
00010784 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flapping sound
0001078A                            
0001078A                            loc_101A0:
0001078A 6100 D448                  		bsr.w	SpeedToPos
0001078E 3038 D008                  		move.w	($FFFFD008).w,d0
00010792 9068 0008                  		sub.w	8(a0),d0
00010796 6400                       		bcc.s	loc_101B0
00010798 4440                       		neg.w	d0
0001079A                            
0001079A                            loc_101B0:
0001079A 0C40 0080                  		cmpi.w	#$80,d0
0001079E 6500                       		bcs.s	locret_101C6
000107A0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000107A4 D007                       		add.b	d7,d0
000107A6 0200 0007                  		andi.b	#7,d0
000107AA 6600                       		bne.s	locret_101C6
000107AC 5428 0025                  		addq.b	#2,$25(a0)
000107B0                            
000107B0                            locret_101C6:
000107B0 4E75                       		rts	
000107B2                            ; ===========================================================================
000107B2                            
000107B2                            Obj55_FlyUp:				; XREF: Obj55_Index2
000107B2 6100 D420                  		bsr.w	SpeedToPos
000107B6 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
000107BC 6100 0000                  		bsr.w	ObjHitCeiling
000107C0 4A41                       		tst.w	d1		; has basaran hit the ceiling?
000107C2 6A00                       		bpl.s	locret_101F4	; if not, branch
000107C4 9368 000C                  		sub.w	d1,$C(a0)
000107C8 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
000107CE 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
000107D2 4268 0012                  		clr.w	$12(a0)
000107D6 4228 001C                  		clr.b	$1C(a0)
000107DA 4228 0025                  		clr.b	$25(a0)
000107DE                            
000107DE                            locret_101F4:
000107DE 4E75                       		rts	
000107E0                            ; ===========================================================================
000107E0                            
000107E0                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
000107E0 323C 0100                  		move.w	#$100,d1
000107E4 08E8 0000 0022             		bset	#0,$22(a0)
000107EA 3038 D008                  		move.w	($FFFFD008).w,d0
000107EE 9068 0008                  		sub.w	8(a0),d0
000107F2 6400                       		bcc.s	loc_10214
000107F4 4440                       		neg.w	d0
000107F6 4441                       		neg.w	d1
000107F8 08A8 0000 0022             		bclr	#0,$22(a0)
000107FE                            
000107FE                            loc_10214:
000107FE B042                       		cmp.w	d2,d0
00010800 4E75                       		rts	
00010802                            ; ===========================================================================
00010802 6100 D3D0                  		bsr.w	SpeedToPos
00010806 6100 D3F2                  		bsr.w	DisplaySprite
0001080A 4A28 0001                  		tst.b	1(a0)
0001080E 6A00 D426                  		bpl.w	DeleteObject
00010812 4E75                       		rts	
00010814                            ; ===========================================================================
00010814                            Ani_obj55:
00010814                            	include "_anim\obj55.asm"
00010814                            ; ---------------------------------------------------------------------------
00010814                            ; Animation script - Basaran enemy
00010814                            ; ---------------------------------------------------------------------------
00010814 0000                       		dc.w byte_10230-Ani_obj55
00010816 0000                       		dc.w byte_10234-Ani_obj55
00010818 0000                       		dc.w byte_10238-Ani_obj55
0001081A 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
0001081E 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00010822 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00010828                            		even
00010828                            		even
00010828                            
00010828                            ; ---------------------------------------------------------------------------
00010828                            ; Sprite mappings - Basaran enemy (MZ)
00010828                            ; ---------------------------------------------------------------------------
00010828                            Map_obj55:
00010828                            	include "_maps\obj55.asm"
00010828                            ; ---------------------------------------------------------------------------
00010828                            ; Sprite mappings - Basaran enemy (MZ)
00010828                            ; ---------------------------------------------------------------------------
00010828 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
0001082C 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00010830 01                         byte_10246:	dc.b 1
00010831 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00010836 03                         byte_1024C:	dc.b 3
00010837 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
0001083C 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00010841 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00010846 04                         byte_1025C:	dc.b 4
00010847 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
0001084C 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00010851 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00010856 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
0001085B 04                         byte_10271:	dc.b 4
0001085C F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00010861 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00010866 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
0001086B FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00010870                            		even
00010870                            		even
00010870                            
00010870                            ; ===========================================================================
00010870                            ; ---------------------------------------------------------------------------
00010870                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00010870                            ; ---------------------------------------------------------------------------
00010870                            
00010870                            Obj56:					; XREF: Obj_Index
00010870 7000                       		moveq	#0,d0
00010872 1028 0024                  		move.b	$24(a0),d0
00010876 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
0001087A 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
0001087E                            ; ===========================================================================
0001087E 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00010880 0000                       		dc.w Obj56_Action-Obj56_Index
00010882                            
00010882 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00010884 2020                       		dc.b  $20, $20
00010886 1020                       		dc.b  $10, $20
00010888 201A                       		dc.b  $20, $1A
0001088A 1027                       		dc.b  $10, $27
0001088C 1010                       		dc.b  $10, $10
0001088E 0820                       		dc.b	8, $20
00010890 4010                       		dc.b  $40, $10
00010892                            ; ===========================================================================
00010892                            
00010892                            Obj56_Main:				; XREF: Obj56_Index
00010892 5428 0024                  		addq.b	#2,$24(a0)
00010896 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
0001089E 317C 4000 0002             		move.w	#$4000,2(a0)
000108A4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000108AA 6600                       		bne.s	loc_102C8
000108AC 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
000108B2                            
000108B2                            loc_102C8:
000108B2 117C 0004 0001             		move.b	#4,1(a0)
000108B8 117C 0003 0018             		move.b	#3,$18(a0)
000108BE 7000                       		moveq	#0,d0
000108C0 1028 0028                  		move.b	$28(a0),d0
000108C4 E648                       		lsr.w	#3,d0
000108C6 0240 000E                  		andi.w	#$E,d0
000108CA 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
000108CE 115A 0019                  		move.b	(a2)+,$19(a0)
000108D2 1152 0016                  		move.b	(a2),$16(a0)
000108D6 E248                       		lsr.w	#1,d0
000108D8 1140 001A                  		move.b	d0,$1A(a0)
000108DC 3168 0008 0034             		move.w	8(a0),$34(a0)
000108E2 3168 000C 0030             		move.w	$C(a0),$30(a0)
000108E8 7000                       		moveq	#0,d0
000108EA 1012                       		move.b	(a2),d0
000108EC D040                       		add.w	d0,d0
000108EE 3140 003A                  		move.w	d0,$3A(a0)
000108F2 7000                       		moveq	#0,d0
000108F4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000108FA 6700                       		beq.s	loc_10332
000108FC 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010900 0240 000F                  		andi.w	#$F,d0
00010904 5140                       		subq.w	#8,d0
00010906 6500                       		bcs.s	loc_10332
00010908 E548                       		lsl.w	#2,d0
0001090A 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
0001090E 45F2 0000                  		lea	(a2,d0.w),a2
00010912 4A52                       		tst.w	(a2)
00010914 6A00                       		bpl.s	loc_10332
00010916 0868 0000 0022             		bchg	#0,$22(a0)
0001091C                            
0001091C                            loc_10332:
0001091C 1028 0028                  		move.b	$28(a0),d0
00010920 6A00                       		bpl.s	Obj56_Action
00010922 0200 000F                  		andi.b	#$F,d0
00010926 1140 003C                  		move.b	d0,$3C(a0)
0001092A 117C 0005 0028             		move.b	#5,$28(a0)
00010930 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00010936 6600                       		bne.s	Obj56_ChkGone
00010938 117C 000C 0028             		move.b	#$C,$28(a0)
0001093E 317C 0080 003A             		move.w	#$80,$3A(a0)
00010944                            
00010944                            Obj56_ChkGone:
00010944 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010948 7000                       		moveq	#0,d0
0001094A 1028 0023                  		move.b	$23(a0),d0
0001094E 6700                       		beq.s	Obj56_Action
00010950 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010956 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001095C 6700                       		beq.s	Obj56_Action
0001095E 5228 0028                  		addq.b	#1,$28(a0)
00010962 4268 003A                  		clr.w	$3A(a0)
00010966                            
00010966                            Obj56_Action:				; XREF: Obj56_Index
00010966 3F28 0008                  		move.w	8(a0),-(sp)
0001096A 7000                       		moveq	#0,d0
0001096C 1028 0028                  		move.b	$28(a0),d0	; get object type
00010970 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010974 D040                       		add.w	d0,d0
00010976 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
0001097A 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
0001097E 381F                       		move.w	(sp)+,d4
00010980 4A28 0001                  		tst.b	1(a0)
00010984 6A00                       		bpl.s	Obj56_ChkDel
00010986 7200                       		moveq	#0,d1
00010988 1228 0019                  		move.b	$19(a0),d1
0001098C 0641 000B                  		addi.w	#$B,d1
00010990 7400                       		moveq	#0,d2
00010992 1428 0016                  		move.b	$16(a0),d2
00010996 3602                       		move.w	d2,d3
00010998 5243                       		addq.w	#1,d3
0001099A 6100 F62E                  		bsr.w	SolidObject
0001099E                            
0001099E                            Obj56_ChkDel:
0001099E 3028 0034                  		move.w	$34(a0),d0
000109A2 0240 FF80                  		andi.w	#$FF80,d0
000109A6 3238 F700                  		move.w	($FFFFF700).w,d1
000109AA 0441 0080                  		subi.w	#$80,d1
000109AE 0241 FF80                  		andi.w	#$FF80,d1
000109B2 9041                       		sub.w	d1,d0
000109B4 0C40 0280                  		cmpi.w	#$280,d0
000109B8 6200 D27C                  		bhi.w	DeleteObject
000109BC 6000 D23C                  		bra.w	DisplaySprite
000109C0                            ; ===========================================================================
000109C0 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
000109C4 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
000109C8 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
000109CC 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
000109D0 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
000109D4 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
000109D8 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
000109DC                            ; ===========================================================================
000109DC                            
000109DC                            Obj56_Type00:				; XREF: Obj56_TypeIndex
000109DC 4E75                       		rts	
000109DE                            ; ===========================================================================
000109DE                            
000109DE                            Obj56_Type01:				; XREF: Obj56_TypeIndex
000109DE 323C 0040                  		move.w	#$40,d1
000109E2 7000                       		moveq	#0,d0
000109E4 1038 FE68                  		move.b	($FFFFFE68).w,d0
000109E8 6000                       		bra.s	Obj56_Move_LR
000109EA                            ; ===========================================================================
000109EA                            
000109EA                            Obj56_Type02:				; XREF: Obj56_TypeIndex
000109EA 323C 0080                  		move.w	#$80,d1
000109EE 7000                       		moveq	#0,d0
000109F0 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000109F4                            
000109F4                            Obj56_Move_LR:
000109F4 0828 0000 0022             		btst	#0,$22(a0)
000109FA 6700                       		beq.s	loc_10416
000109FC 4440                       		neg.w	d0
000109FE D041                       		add.w	d1,d0
00010A00                            
00010A00                            loc_10416:
00010A00 3228 0034                  		move.w	$34(a0),d1
00010A04 9240                       		sub.w	d0,d1
00010A06 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010A0A 4E75                       		rts	
00010A0C                            ; ===========================================================================
00010A0C                            
00010A0C                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00010A0C 323C 0040                  		move.w	#$40,d1
00010A10 7000                       		moveq	#0,d0
00010A12 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010A16 6000                       		bra.s	Obj56_Move_UD
00010A18                            ; ===========================================================================
00010A18                            
00010A18                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00010A18 323C 0080                  		move.w	#$80,d1
00010A1C 7000                       		moveq	#0,d0
00010A1E 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010A22                            
00010A22                            Obj56_Move_UD:
00010A22 0828 0000 0022             		btst	#0,$22(a0)
00010A28 6700                       		beq.s	loc_10444
00010A2A 4440                       		neg.w	d0
00010A2C D041                       		add.w	d1,d0
00010A2E                            
00010A2E                            loc_10444:
00010A2E 3228 0030                  		move.w	$30(a0),d1
00010A32 9240                       		sub.w	d0,d1
00010A34 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010A38 4E75                       		rts	
00010A3A                            ; ===========================================================================
00010A3A                            
00010A3A                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00010A3A 4A28 0038                  		tst.b	$38(a0)
00010A3E 6600                       		bne.s	loc_104A4
00010A40 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010A46 6600                       		bne.s	loc_1047A	; if not, branch
00010A48 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010A4E 6600                       		bne.s	loc_1047A
00010A50 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010A54 3038 D008                  		move.w	($FFFFD008).w,d0
00010A58 B068 0008                  		cmp.w	8(a0),d0
00010A5C 6400                       		bcc.s	loc_1047A
00010A5E 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00010A64                            
00010A64                            loc_1047A:
00010A64 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010A68 7000                       		moveq	#0,d0
00010A6A 1028 003C                  		move.b	$3C(a0),d0
00010A6E 0832 0000 0000             		btst	#0,(a2,d0.w)
00010A74 6700                       		beq.s	loc_104AE
00010A76 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010A7C 6600                       		bne.s	loc_1049E	; if not, branch
00010A7E 0C00 0003                  		cmpi.b	#3,d0
00010A82 6600                       		bne.s	loc_1049E
00010A84 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010A88                            
00010A88                            loc_1049E:
00010A88 117C 0001 0038             		move.b	#1,$38(a0)
00010A8E                            
00010A8E                            loc_104A4:
00010A8E 4A68 003A                  		tst.w	$3A(a0)
00010A92 6700                       		beq.s	loc_104C8
00010A94 5568 003A                  		subq.w	#2,$3A(a0)
00010A98                            
00010A98                            loc_104AE:
00010A98 3028 003A                  		move.w	$3A(a0),d0
00010A9C 0828 0000 0022             		btst	#0,$22(a0)
00010AA2 6700                       		beq.s	loc_104BC
00010AA4 4440                       		neg.w	d0
00010AA6                            
00010AA6                            loc_104BC:
00010AA6 3228 0030                  		move.w	$30(a0),d1
00010AAA D240                       		add.w	d0,d1
00010AAC 3141 000C                  		move.w	d1,$C(a0)
00010AB0 4E75                       		rts	
00010AB2                            ; ===========================================================================
00010AB2                            
00010AB2                            loc_104C8:
00010AB2 5228 0028                  		addq.b	#1,$28(a0)
00010AB6 4228 0038                  		clr.b	$38(a0)
00010ABA 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010ABE 7000                       		moveq	#0,d0
00010AC0 1028 0023                  		move.b	$23(a0),d0
00010AC4 67D2                       		beq.s	loc_104AE
00010AC6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010ACC 60CA                       		bra.s	loc_104AE
00010ACE                            ; ===========================================================================
00010ACE                            
00010ACE                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010ACE 4A28 0038                  		tst.b	$38(a0)
00010AD2 6600                       		bne.s	loc_10500
00010AD4 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010AD8 7000                       		moveq	#0,d0
00010ADA 1028 003C                  		move.b	$3C(a0),d0
00010ADE 4A32 0000                  		tst.b	(a2,d0.w)
00010AE2 6A00                       		bpl.s	loc_10512
00010AE4 117C 0001 0038             		move.b	#1,$38(a0)
00010AEA                            
00010AEA                            loc_10500:
00010AEA 7000                       		moveq	#0,d0
00010AEC 1028 0016                  		move.b	$16(a0),d0
00010AF0 D040                       		add.w	d0,d0
00010AF2 B068 003A                  		cmp.w	$3A(a0),d0
00010AF6 6700                       		beq.s	loc_1052C
00010AF8 5468 003A                  		addq.w	#2,$3A(a0)
00010AFC                            
00010AFC                            loc_10512:
00010AFC 3028 003A                  		move.w	$3A(a0),d0
00010B00 0828 0000 0022             		btst	#0,$22(a0)
00010B06 6700                       		beq.s	loc_10520
00010B08 4440                       		neg.w	d0
00010B0A                            
00010B0A                            loc_10520:
00010B0A 3228 0030                  		move.w	$30(a0),d1
00010B0E D240                       		add.w	d0,d1
00010B10 3141 000C                  		move.w	d1,$C(a0)
00010B14 4E75                       		rts	
00010B16                            ; ===========================================================================
00010B16                            
00010B16                            loc_1052C:
00010B16 5328 0028                  		subq.b	#1,$28(a0)
00010B1A 4228 0038                  		clr.b	$38(a0)
00010B1E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010B22 7000                       		moveq	#0,d0
00010B24 1028 0023                  		move.b	$23(a0),d0
00010B28 67D2                       		beq.s	loc_10512
00010B2A 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010B30 60CA                       		bra.s	loc_10512
00010B32                            ; ===========================================================================
00010B32                            
00010B32                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00010B32 4A28 0038                  		tst.b	$38(a0)
00010B36 6600                       		bne.s	loc_1055E
00010B38 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010B3C 6700                       		beq.s	locret_10578
00010B3E 117C 0001 0038             		move.b	#1,$38(a0)
00010B44 4268 003A                  		clr.w	$3A(a0)
00010B48                            
00010B48                            loc_1055E:
00010B48 5268 0008                  		addq.w	#1,8(a0)
00010B4C 3168 0008 0034             		move.w	8(a0),$34(a0)
00010B52 5268 003A                  		addq.w	#1,$3A(a0)
00010B56 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010B5C 6600                       		bne.s	locret_10578
00010B5E 4228 0028                  		clr.b	$28(a0)
00010B62                            
00010B62                            locret_10578:
00010B62 4E75                       		rts	
00010B64                            ; ===========================================================================
00010B64                            
00010B64                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00010B64 4A28 0038                  		tst.b	$38(a0)
00010B68 6600                       		bne.s	loc_10598
00010B6A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010B6E 7000                       		moveq	#0,d0
00010B70 1028 003C                  		move.b	$3C(a0),d0
00010B74 0832 0000 0000             		btst	#0,(a2,d0.w)
00010B7A 6700                       		beq.s	loc_105A2
00010B7C 117C 0001 0038             		move.b	#1,$38(a0)
00010B82                            
00010B82                            loc_10598:
00010B82 4A68 003A                  		tst.w	$3A(a0)
00010B86 6700                       		beq.s	loc_105C0
00010B88 5568 003A                  		subq.w	#2,$3A(a0)
00010B8C                            
00010B8C                            loc_105A2:
00010B8C 3028 003A                  		move.w	$3A(a0),d0
00010B90 0828 0000 0022             		btst	#0,$22(a0)
00010B96 6700                       		beq.s	loc_105B4
00010B98 4440                       		neg.w	d0
00010B9A 0640 0080                  		addi.w	#$80,d0
00010B9E                            
00010B9E                            loc_105B4:
00010B9E 3228 0034                  		move.w	$34(a0),d1
00010BA2 D240                       		add.w	d0,d1
00010BA4 3141 0008                  		move.w	d1,8(a0)
00010BA8 4E75                       		rts	
00010BAA                            ; ===========================================================================
00010BAA                            
00010BAA                            loc_105C0:
00010BAA 5228 0028                  		addq.b	#1,$28(a0)
00010BAE 4228 0038                  		clr.b	$38(a0)
00010BB2 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010BB6 7000                       		moveq	#0,d0
00010BB8 1028 0023                  		move.b	$23(a0),d0
00010BBC 67CE                       		beq.s	loc_105A2
00010BBE 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010BC4 60C6                       		bra.s	loc_105A2
00010BC6                            ; ===========================================================================
00010BC6                            
00010BC6                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010BC6 4A28 0038                  		tst.b	$38(a0)
00010BCA 6600                       		bne.s	loc_105F8
00010BCC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010BD0 7000                       		moveq	#0,d0
00010BD2 1028 003C                  		move.b	$3C(a0),d0
00010BD6 4A32 0000                  		tst.b	(a2,d0.w)
00010BDA 6A00                       		bpl.s	loc_10606
00010BDC 117C 0001 0038             		move.b	#1,$38(a0)
00010BE2                            
00010BE2                            loc_105F8:
00010BE2 303C 0080                  		move.w	#$80,d0
00010BE6 B068 003A                  		cmp.w	$3A(a0),d0
00010BEA 6700                       		beq.s	loc_10624
00010BEC 5468 003A                  		addq.w	#2,$3A(a0)
00010BF0                            
00010BF0                            loc_10606:
00010BF0 3028 003A                  		move.w	$3A(a0),d0
00010BF4 0828 0000 0022             		btst	#0,$22(a0)
00010BFA 6700                       		beq.s	loc_10618
00010BFC 4440                       		neg.w	d0
00010BFE 0640 0080                  		addi.w	#$80,d0
00010C02                            
00010C02                            loc_10618:
00010C02 3228 0034                  		move.w	$34(a0),d1
00010C06 D240                       		add.w	d0,d1
00010C08 3141 0008                  		move.w	d1,8(a0)
00010C0C 4E75                       		rts	
00010C0E                            ; ===========================================================================
00010C0E                            
00010C0E                            loc_10624:
00010C0E 5328 0028                  		subq.b	#1,$28(a0)
00010C12 4228 0038                  		clr.b	$38(a0)
00010C16 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010C1A 7000                       		moveq	#0,d0
00010C1C 1028 0023                  		move.b	$23(a0),d0
00010C20 67CE                       		beq.s	loc_10606
00010C22 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010C28 60C6                       		bra.s	loc_10606
00010C2A                            ; ===========================================================================
00010C2A                            
00010C2A                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00010C2A 323C 0010                  		move.w	#$10,d1
00010C2E 7000                       		moveq	#0,d0
00010C30 1038 FE88                  		move.b	($FFFFFE88).w,d0
00010C34 E248                       		lsr.w	#1,d0
00010C36 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00010C3A 6000                       		bra.s	Obj56_Move_Sqr
00010C3C                            ; ===========================================================================
00010C3C                            
00010C3C                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00010C3C 323C 0030                  		move.w	#$30,d1
00010C40 7000                       		moveq	#0,d0
00010C42 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00010C46 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00010C4A 6000                       		bra.s	Obj56_Move_Sqr
00010C4C                            ; ===========================================================================
00010C4C                            
00010C4C                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00010C4C 323C 0050                  		move.w	#$50,d1
00010C50 7000                       		moveq	#0,d0
00010C52 1038 FE90                  		move.b	($FFFFFE90).w,d0
00010C56 3638 FE92                  		move.w	($FFFFFE92).w,d3
00010C5A 6000                       		bra.s	Obj56_Move_Sqr
00010C5C                            ; ===========================================================================
00010C5C                            
00010C5C                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00010C5C 323C 0070                  		move.w	#$70,d1
00010C60 7000                       		moveq	#0,d0
00010C62 1038 FE94                  		move.b	($FFFFFE94).w,d0
00010C66 3638 FE96                  		move.w	($FFFFFE96).w,d3
00010C6A                            
00010C6A                            Obj56_Move_Sqr:
00010C6A 4A43                       		tst.w	d3
00010C6C 6600                       		bne.s	loc_1068E
00010C6E 5228 0022                  		addq.b	#1,$22(a0)
00010C72 0228 0003 0022             		andi.b	#3,$22(a0)
00010C78                            
00010C78                            loc_1068E:
00010C78 1428 0022                  		move.b	$22(a0),d2
00010C7C 0202 0003                  		andi.b	#3,d2
00010C80 6600                       		bne.s	loc_106AE
00010C82 9041                       		sub.w	d1,d0
00010C84 D068 0034                  		add.w	$34(a0),d0
00010C88 3140 0008                  		move.w	d0,8(a0)
00010C8C 4441                       		neg.w	d1
00010C8E D268 0030                  		add.w	$30(a0),d1
00010C92 3141 000C                  		move.w	d1,$C(a0)
00010C96 4E75                       		rts	
00010C98                            ; ===========================================================================
00010C98                            
00010C98                            loc_106AE:
00010C98 5302                       		subq.b	#1,d2
00010C9A 6600                       		bne.s	loc_106CC
00010C9C 5341                       		subq.w	#1,d1
00010C9E 9041                       		sub.w	d1,d0
00010CA0 4440                       		neg.w	d0
00010CA2 D068 0030                  		add.w	$30(a0),d0
00010CA6 3140 000C                  		move.w	d0,$C(a0)
00010CAA 5241                       		addq.w	#1,d1
00010CAC D268 0034                  		add.w	$34(a0),d1
00010CB0 3141 0008                  		move.w	d1,8(a0)
00010CB4 4E75                       		rts	
00010CB6                            ; ===========================================================================
00010CB6                            
00010CB6                            loc_106CC:
00010CB6 5302                       		subq.b	#1,d2
00010CB8 6600                       		bne.s	loc_106EA
00010CBA 5341                       		subq.w	#1,d1
00010CBC 9041                       		sub.w	d1,d0
00010CBE 4440                       		neg.w	d0
00010CC0 D068 0034                  		add.w	$34(a0),d0
00010CC4 3140 0008                  		move.w	d0,8(a0)
00010CC8 5241                       		addq.w	#1,d1
00010CCA D268 0030                  		add.w	$30(a0),d1
00010CCE 3141 000C                  		move.w	d1,$C(a0)
00010CD2 4E75                       		rts	
00010CD4                            ; ===========================================================================
00010CD4                            
00010CD4                            loc_106EA:
00010CD4 9041                       		sub.w	d1,d0
00010CD6 D068 0030                  		add.w	$30(a0),d0
00010CDA 3140 000C                  		move.w	d0,$C(a0)
00010CDE 4441                       		neg.w	d1
00010CE0 D268 0034                  		add.w	$34(a0),d1
00010CE4 3141 0008                  		move.w	d1,8(a0)
00010CE8 4E75                       		rts	
00010CEA                            ; ===========================================================================
00010CEA                            ; ---------------------------------------------------------------------------
00010CEA                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010CEA                            ; ---------------------------------------------------------------------------
00010CEA                            Map_obj56:
00010CEA                            	include "_maps\obj56.asm"
00010CEA                            ; ---------------------------------------------------------------------------
00010CEA                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010CEA                            ; ---------------------------------------------------------------------------
00010CEA 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00010CEE 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00010CF2 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00010CF6 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00010CFA 01                         byte_10710:	dc.b 1
00010CFB F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00010D00 04                         byte_10716:	dc.b 4
00010D01 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00010D06 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00010D0B 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00010D10 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00010D15 02                         byte_1072B:	dc.b 2
00010D16 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00010D1B 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00010D20 04                         byte_10736:	dc.b 4
00010D21 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00010D26 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00010D2B 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00010D30 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00010D35 03                         byte_1074B:	dc.b 3
00010D36 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00010D3B F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00010D40 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00010D45 01                         byte_1075B:	dc.b 1
00010D46 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00010D4B 02                         byte_10761:	dc.b 2
00010D4C E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00010D51 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00010D56 04                         byte_1076C:	dc.b 4
00010D57 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00010D5C F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00010D61 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00010D66 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00010D6C 00                         		even
00010D6C 00                         		even
00010D6C                            
00010D6C                            ; ===========================================================================
00010D6C                            ; ---------------------------------------------------------------------------
00010D6C                            ; Object 57 - spiked balls (SYZ, LZ)
00010D6C                            ; ---------------------------------------------------------------------------
00010D6C                            
00010D6C                            Obj57:					; XREF: Obj_Index
00010D6C 7000                       		moveq	#0,d0
00010D6E 1028 0024                  		move.b	$24(a0),d0
00010D72 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00010D76 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00010D7A                            ; ===========================================================================
00010D7A 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00010D7C 0000                       		dc.w Obj57_Move-Obj57_Index
00010D7E 0000                       		dc.w Obj57_Display-Obj57_Index
00010D80                            ; ===========================================================================
00010D80                            
00010D80                            Obj57_Main:				; XREF: Obj57_Index
00010D80 5428 0024                  		addq.b	#2,$24(a0)
00010D84 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00010D8C 317C 03BA 0002             		move.w	#$3BA,2(a0)
00010D92 117C 0004 0001             		move.b	#4,1(a0)
00010D98 117C 0004 0018             		move.b	#4,$18(a0)
00010D9E 117C 0008 0019             		move.b	#8,$19(a0)
00010DA4 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010DAA 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010DB0 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00010DB6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010DBC 6600                       		bne.s	loc_107E8
00010DBE 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00010DC4 317C 0310 0002             		move.w	#$310,2(a0)
00010DCA 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00010DD2                            
00010DD2                            loc_107E8:
00010DD2 1228 0028                  		move.b	$28(a0),d1	; get object type
00010DD6 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010DDA 4881                       		ext.w	d1
00010DDC E741                       		asl.w	#3,d1		; multiply by 8
00010DDE 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00010DE2 1028 0022                  		move.b	$22(a0),d0
00010DE6 E418                       		ror.b	#2,d0
00010DE8 0200 00C0                  		andi.b	#-$40,d0
00010DEC 1140 0026                  		move.b	d0,$26(a0)
00010DF0 45E8 0029                  		lea	$29(a0),a2
00010DF4 1228 0028                  		move.b	$28(a0),d1	; get object type
00010DF8 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00010DFC 14FC 0000                  		move.b	#0,(a2)+
00010E00 3601                       		move.w	d1,d3
00010E02 E94B                       		lsl.w	#4,d3
00010E04 1143 003C                  		move.b	d3,$3C(a0)
00010E08 5341                       		subq.w	#1,d1		; set chain length (type-1)
00010E0A 6500                       		bcs.s	loc_10894
00010E0C 0828 0003 0028             		btst	#3,$28(a0)
00010E12 6700                       		beq.s	Obj57_MakeChain
00010E14 5341                       		subq.w	#1,d1
00010E16 6500                       		bcs.s	loc_10894
00010E18                            
00010E18                            Obj57_MakeChain:
00010E18 6100 D266                  		bsr.w	SingleObjLoad
00010E1C 6600                       		bne.s	loc_10894
00010E1E 5228 0029                  		addq.b	#1,$29(a0)
00010E22 3A09                       		move.w	a1,d5
00010E24 0445 D000                  		subi.w	#-$3000,d5
00010E28 EC4D                       		lsr.w	#6,d5
00010E2A 0245 007F                  		andi.w	#$7F,d5
00010E2E 14C5                       		move.b	d5,(a2)+
00010E30 137C 0004 0024             		move.b	#4,$24(a1)
00010E36 1290                       		move.b	0(a0),0(a1)
00010E38 2368 0004 0004             		move.l	4(a0),4(a1)
00010E3E 3368 0002 0002             		move.w	2(a0),2(a1)
00010E44 1368 0001 0001             		move.b	1(a0),1(a1)
00010E4A 1368 0018 0018             		move.b	$18(a0),$18(a1)
00010E50 1368 0019 0019             		move.b	$19(a0),$19(a1)
00010E56 1368 0020 0020             		move.b	$20(a0),$20(a1)
00010E5C 0403 0010                  		subi.b	#$10,d3
00010E60 1343 003C                  		move.b	d3,$3C(a1)
00010E64 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00010E6A 6600                       		bne.s	loc_10890
00010E6C 4A03                       		tst.b	d3
00010E6E 6600                       		bne.s	loc_10890
00010E70 137C 0002 001A             		move.b	#2,$1A(a1)
00010E76                            
00010E76                            loc_10890:
00010E76 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00010E7A                            
00010E7A                            loc_10894:
00010E7A 3A08                       		move.w	a0,d5
00010E7C 0445 D000                  		subi.w	#-$3000,d5
00010E80 EC4D                       		lsr.w	#6,d5
00010E82 0245 007F                  		andi.w	#$7F,d5
00010E86 14C5                       		move.b	d5,(a2)+
00010E88 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010E8E 6600                       		bne.s	Obj57_Move
00010E90 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00010E96 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
00010E9C                            
00010E9C                            Obj57_Move:				; XREF: Obj57_Index
00010E9C 6100 0000                  		bsr.w	Obj57_MoveSub
00010EA0 6000 0000                  		bra.w	Obj57_ChkDel
00010EA4                            ; ===========================================================================
00010EA4                            
00010EA4                            Obj57_MoveSub:				; XREF: Obj57_Move
00010EA4 3028 003E                  		move.w	$3E(a0),d0
00010EA8 D168 0026                  		add.w	d0,$26(a0)
00010EAC 1028 0026                  		move.b	$26(a0),d0
00010EB0 4EB9 0000 2C60             		jsr	(CalcSine).l
00010EB6 3428 0038                  		move.w	$38(a0),d2
00010EBA 3628 003A                  		move.w	$3A(a0),d3
00010EBE 45E8 0029                  		lea	$29(a0),a2
00010EC2 7C00                       		moveq	#0,d6
00010EC4 1C1A                       		move.b	(a2)+,d6
00010EC6                            
00010EC6                            Obj57_MoveLoop:
00010EC6 7800                       		moveq	#0,d4
00010EC8 181A                       		move.b	(a2)+,d4
00010ECA ED4C                       		lsl.w	#6,d4
00010ECC 0684 00FF D000             		addi.l	#$FFD000,d4
00010ED2 2244                       		movea.l	d4,a1
00010ED4 7800                       		moveq	#0,d4
00010ED6 1829 003C                  		move.b	$3C(a1),d4
00010EDA 2A04                       		move.l	d4,d5
00010EDC C9C0                       		muls.w	d0,d4
00010EDE E084                       		asr.l	#8,d4
00010EE0 CBC1                       		muls.w	d1,d5
00010EE2 E085                       		asr.l	#8,d5
00010EE4 D842                       		add.w	d2,d4
00010EE6 DA43                       		add.w	d3,d5
00010EE8 3344 000C                  		move.w	d4,$C(a1)
00010EEC 3345 0008                  		move.w	d5,8(a1)
00010EF0 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00010EF4 4E75                       		rts	
00010EF6                            ; ===========================================================================
00010EF6                            
00010EF6                            Obj57_ChkDel:				; XREF: Obj57_Move
00010EF6 3028 003A                  		move.w	$3A(a0),d0
00010EFA 0240 FF80                  		andi.w	#$FF80,d0
00010EFE 3238 F700                  		move.w	($FFFFF700).w,d1
00010F02 0441 0080                  		subi.w	#$80,d1
00010F06 0241 FF80                  		andi.w	#$FF80,d1
00010F0A 9041                       		sub.w	d1,d0
00010F0C 0C40 0280                  		cmpi.w	#$280,d0
00010F10 6200 0000                  		bhi.w	Obj57_Delete
00010F14 6000 CCE4                  		bra.w	DisplaySprite
00010F18                            ; ===========================================================================
00010F18                            
00010F18                            Obj57_Delete:				; XREF: Obj57_ChkDel
00010F18 7400                       		moveq	#0,d2
00010F1A 45E8 0029                  		lea	$29(a0),a2
00010F1E 141A                       		move.b	(a2)+,d2
00010F20                            
00010F20                            Obj57_DelLoop:
00010F20 7000                       		moveq	#0,d0
00010F22 101A                       		move.b	(a2)+,d0
00010F24 ED48                       		lsl.w	#6,d0
00010F26 0680 00FF D000             		addi.l	#$FFD000,d0
00010F2C 2240                       		movea.l	d0,a1
00010F2E 6100 CD08                  		bsr.w	DeleteObject2
00010F32 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00010F36                            
00010F36 4E75                       		rts	
00010F38                            ; ===========================================================================
00010F38                            
00010F38                            Obj57_Display:				; XREF: Obj57_Index
00010F38 6000 CCC0                  		bra.w	DisplaySprite
00010F3C                            ; ===========================================================================
00010F3C                            ; ---------------------------------------------------------------------------
00010F3C                            ; Sprite mappings - chain of spiked balls (SYZ)
00010F3C                            ; ---------------------------------------------------------------------------
00010F3C                            Map_obj57:
00010F3C                            	include "_maps\obj57syz.asm"
00010F3C                            ; ---------------------------------------------------------------------------
00010F3C                            ; Sprite mappings - chain of spiked balls (SYZ)
00010F3C                            ; ---------------------------------------------------------------------------
00010F3C 0000                       		dc.w byte_10958-Map_obj57
00010F3E 01                         byte_10958:	dc.b 1
00010F3F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010F44                            		even
00010F44                            		even
00010F44                            
00010F44                            ; ---------------------------------------------------------------------------
00010F44                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010F44                            ; ---------------------------------------------------------------------------
00010F44                            Map_obj57a:
00010F44                            	include "_maps\obj57lz.asm"
00010F44                            ; ---------------------------------------------------------------------------
00010F44                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010F44                            ; ---------------------------------------------------------------------------
00010F44 0000                       		dc.w byte_10964-Map_obj57a
00010F46 0000                       		dc.w byte_1096A-Map_obj57a
00010F48 0000                       		dc.w byte_10970-Map_obj57a
00010F4A 01                         byte_10964:	dc.b 1
00010F4B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010F50 01                         byte_1096A:	dc.b 1
00010F51 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00010F56 01                         byte_10970:	dc.b 1
00010F57 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00010F5C                            		even
00010F5C                            		even
00010F5C                            
00010F5C                            ; ===========================================================================
00010F5C                            ; ---------------------------------------------------------------------------
00010F5C                            ; Object 58 - giant spiked balls (SYZ)
00010F5C                            ; ---------------------------------------------------------------------------
00010F5C                            
00010F5C                            Obj58:					; XREF: Obj_Index
00010F5C 7000                       		moveq	#0,d0
00010F5E 1028 0024                  		move.b	$24(a0),d0
00010F62 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00010F66 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00010F6A                            ; ===========================================================================
00010F6A 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00010F6C 0000                       		dc.w Obj58_Move-Obj58_Index
00010F6E                            ; ===========================================================================
00010F6E                            
00010F6E                            Obj58_Main:				; XREF: Obj58_Index
00010F6E 5428 0024                  		addq.b	#2,$24(a0)
00010F72 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00010F7A 317C 0396 0002             		move.w	#$396,2(a0)
00010F80 117C 0004 0001             		move.b	#4,1(a0)
00010F86 117C 0004 0018             		move.b	#4,$18(a0)
00010F8C 117C 0018 0019             		move.b	#$18,$19(a0)
00010F92 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010F98 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010F9E 117C 0086 0020             		move.b	#$86,$20(a0)
00010FA4 1228 0028                  		move.b	$28(a0),d1	; get object type
00010FA8 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010FAC 4881                       		ext.w	d1
00010FAE E741                       		asl.w	#3,d1		; multiply by 8
00010FB0 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00010FB4 1028 0022                  		move.b	$22(a0),d0
00010FB8 E418                       		ror.b	#2,d0
00010FBA 0200 00C0                  		andi.b	#$C0,d0
00010FBE 1140 0026                  		move.b	d0,$26(a0)
00010FC2 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00010FC8                            
00010FC8                            Obj58_Move:				; XREF: Obj58_Index
00010FC8 7000                       		moveq	#0,d0
00010FCA 1028 0028                  		move.b	$28(a0),d0	; get object type
00010FCE 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00010FD2 D040                       		add.w	d0,d0
00010FD4 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00010FD8 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00010FDC 3028 003A                  		move.w	$3A(a0),d0
00010FE0 0240 FF80                  		andi.w	#$FF80,d0
00010FE4 3238 F700                  		move.w	($FFFFF700).w,d1
00010FE8 0441 0080                  		subi.w	#$80,d1
00010FEC 0241 FF80                  		andi.w	#$FF80,d1
00010FF0 9041                       		sub.w	d1,d0
00010FF2 0C40 0280                  		cmpi.w	#$280,d0
00010FF6 6200 CC3E                  		bhi.w	DeleteObject
00010FFA 6000 CBFE                  		bra.w	DisplaySprite
00010FFE                            ; ===========================================================================
00010FFE 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00011000 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00011002 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00011004 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00011006                            ; ===========================================================================
00011006                            
00011006                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00011006 4E75                       		rts	
00011008                            ; ===========================================================================
00011008                            
00011008                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00011008 323C 0060                  		move.w	#$60,d1
0001100C 7000                       		moveq	#0,d0
0001100E 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011012 0828 0000 0022             		btst	#0,$22(a0)
00011018 6700                       		beq.s	loc_10A38
0001101A 4440                       		neg.w	d0
0001101C D041                       		add.w	d1,d0
0001101E                            
0001101E                            loc_10A38:
0001101E 3228 003A                  		move.w	$3A(a0),d1
00011022 9240                       		sub.w	d0,d1
00011024 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00011028 4E75                       		rts	
0001102A                            ; ===========================================================================
0001102A                            
0001102A                            Obj58_Type02:				; XREF: Obj58_TypeIndex
0001102A 323C 0060                  		move.w	#$60,d1
0001102E 7000                       		moveq	#0,d0
00011030 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011034 0828 0000 0022             		btst	#0,$22(a0)
0001103A 6700                       		beq.s	loc_10A5C
0001103C 4440                       		neg.w	d0
0001103E 0640 0080                  		addi.w	#$80,d0
00011042                            
00011042                            loc_10A5C:
00011042 3228 0038                  		move.w	$38(a0),d1
00011046 9240                       		sub.w	d0,d1
00011048 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
0001104C 4E75                       		rts	
0001104E                            ; ===========================================================================
0001104E                            
0001104E                            Obj58_Type03:				; XREF: Obj58_TypeIndex
0001104E 3028 003E                  		move.w	$3E(a0),d0
00011052 D168 0026                  		add.w	d0,$26(a0)
00011056 1028 0026                  		move.b	$26(a0),d0
0001105A 4EB9 0000 2C60             		jsr	(CalcSine).l
00011060 3428 0038                  		move.w	$38(a0),d2
00011064 3628 003A                  		move.w	$3A(a0),d3
00011068 7800                       		moveq	#0,d4
0001106A 1828 003C                  		move.b	$3C(a0),d4
0001106E 2A04                       		move.l	d4,d5
00011070 C9C0                       		muls.w	d0,d4
00011072 E084                       		asr.l	#8,d4
00011074 CBC1                       		muls.w	d1,d5
00011076 E085                       		asr.l	#8,d5
00011078 D842                       		add.w	d2,d4
0001107A DA43                       		add.w	d3,d5
0001107C 3144 000C                  		move.w	d4,$C(a0)
00011080 3145 0008                  		move.w	d5,8(a0)
00011084 4E75                       		rts	
00011086                            ; ===========================================================================
00011086                            ; ---------------------------------------------------------------------------
00011086                            ; Sprite mappings - SBZ	spiked ball on a chain
00011086                            ; ---------------------------------------------------------------------------
00011086                            Map_obj15b:
00011086                            	include "_maps\obj15sbz.asm"
00011086                            ; ---------------------------------------------------------------------------
00011086                            ; Sprite mappings - spiked ball on a chain (SBZ)
00011086                            ; ---------------------------------------------------------------------------
00011086 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
0001108A 0000                       		dc.w byte_10AC6-Map_obj15b
0001108C 05                         byte_10AA6:	dc.b 5
0001108D E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00011092 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
00011097 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
0001109C F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
000110A1 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
000110A6 01                         byte_10AC0:	dc.b 1
000110A7 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
000110AC 02                         byte_10AC6:	dc.b 2
000110AD F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
000110B2 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
000110B8 00                         		even
000110B8 00                         		even
000110B8                            
000110B8                            ; ===========================================================================
000110B8                            ; ---------------------------------------------------------------------------
000110B8                            ; Object 59 - platforms	that move when you stand on them (SLZ)
000110B8                            ; ---------------------------------------------------------------------------
000110B8                            
000110B8                            Obj59:					; XREF: Obj_Index
000110B8 7000                       		moveq	#0,d0
000110BA 1028 0024                  		move.b	$24(a0),d0
000110BE 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
000110C2 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
000110C6 3028 0032                  		move.w	$32(a0),d0
000110CA 0240 FF80                  		andi.w	#$FF80,d0
000110CE 3238 F700                  		move.w	($FFFFF700).w,d1
000110D2 0441 0080                  		subi.w	#$80,d1
000110D6 0241 FF80                  		andi.w	#$FF80,d1
000110DA 9041                       		sub.w	d1,d0
000110DC 0C40 0280                  		cmpi.w	#$280,d0
000110E0 6200 CB54                  		bhi.w	DeleteObject
000110E4 6000 CB14                  		bra.w	DisplaySprite
000110E8                            ; ===========================================================================
000110E8 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
000110EA 0000                       		dc.w Obj59_Platform-Obj59_Index
000110EC 0000                       		dc.w Obj59_Action-Obj59_Index
000110EE 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
000110F0                            
000110F0 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
000110F2                            
000110F2 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
000110F4 2001                       		dc.b $20, 1
000110F6 3401                       		dc.b $34, 1
000110F8 1003                       		dc.b $10, 3
000110FA 2003                       		dc.b $20, 3
000110FC 3403                       		dc.b $34, 3
000110FE 1401                       		dc.b $14, 1
00011100 2401                       		dc.b $24, 1
00011102 2C01                       		dc.b $2C, 1
00011104 1403                       		dc.b $14, 3
00011106 2403                       		dc.b $24, 3
00011108 2C03                       		dc.b $2C, 3
0001110A 2005                       		dc.b $20, 5
0001110C 2007                       		dc.b $20, 7
0001110E 3009                       		dc.b $30, 9
00011110                            ; ===========================================================================
00011110                            
00011110                            Obj59_Main:				; XREF: Obj59_Index
00011110 5428 0024                  		addq.b	#2,$24(a0)
00011114 7000                       		moveq	#0,d0
00011116 1028 0028                  		move.b	$28(a0),d0
0001111A 6A00                       		bpl.s	Obj59_Main2
0001111C 5828 0024                  		addq.b	#4,$24(a0)
00011120 0240 007F                  		andi.w	#$7F,d0
00011124 C0FC 0006                  		mulu.w	#6,d0
00011128 3140 003C                  		move.w	d0,$3C(a0)
0001112C 3140 003E                  		move.w	d0,$3E(a0)
00011130 588F                       		addq.l	#4,sp
00011132 4E75                       		rts	
00011134                            ; ===========================================================================
00011134                            
00011134                            Obj59_Main2:
00011134 E648                       		lsr.w	#3,d0
00011136 0240 001E                  		andi.w	#$1E,d0
0001113A 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
0001113E 115A 0019                  		move.b	(a2)+,$19(a0)
00011142 115A 001A                  		move.b	(a2)+,$1A(a0)
00011146 7000                       		moveq	#0,d0
00011148 1028 0028                  		move.b	$28(a0),d0
0001114C D040                       		add.w	d0,d0
0001114E 0240 001E                  		andi.w	#$1E,d0
00011152 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
00011156 101A                       		move.b	(a2)+,d0
00011158 E548                       		lsl.w	#2,d0
0001115A 3140 003C                  		move.w	d0,$3C(a0)
0001115E 115A 0028                  		move.b	(a2)+,$28(a0)
00011162 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
0001116A 317C 4000 0002             		move.w	#$4000,2(a0)
00011170 117C 0004 0001             		move.b	#4,1(a0)
00011176 117C 0004 0018             		move.b	#4,$18(a0)
0001117C 3168 0008 0032             		move.w	8(a0),$32(a0)
00011182 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011188                            
00011188                            Obj59_Platform:				; XREF: Obj59_Index
00011188 7200                       		moveq	#0,d1
0001118A 1228 0019                  		move.b	$19(a0),d1
0001118E 4EB9 0000 7920             		jsr	(PlatformObject).l
00011194 6000 0000                  		bra.w	Obj59_Types
00011198                            ; ===========================================================================
00011198                            
00011198                            Obj59_Action:				; XREF: Obj59_Index
00011198 7200                       		moveq	#0,d1
0001119A 1228 0019                  		move.b	$19(a0),d1
0001119E 4EB9 0000 7A94             		jsr	(ExitPlatform).l
000111A4 3F28 0008                  		move.w	8(a0),-(sp)
000111A8 6100 0000                  		bsr.w	Obj59_Types
000111AC 341F                       		move.w	(sp)+,d2
000111AE 4A10                       		tst.b	0(a0)
000111B0 6700                       		beq.s	locret_10BD4
000111B2 4EF9 0000 7FFE             		jmp	(MvSonicOnPtfm2).l
000111B8                            ; ===========================================================================
000111B8                            
000111B8                            locret_10BD4:
000111B8 4E75                       		rts	
000111BA                            ; ===========================================================================
000111BA                            
000111BA                            Obj59_Types:
000111BA 7000                       		moveq	#0,d0
000111BC 1028 0028                  		move.b	$28(a0),d0
000111C0 0240 000F                  		andi.w	#$F,d0
000111C4 D040                       		add.w	d0,d0
000111C6 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
000111CA 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
000111CE                            ; ===========================================================================
000111CE 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000111D2 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000111D6 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000111DA 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000111DE 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
000111E2                            ; ===========================================================================
000111E2                            
000111E2                            Obj59_Type00:				; XREF: Obj59_TypeIndex
000111E2 4E75                       		rts	
000111E4                            ; ===========================================================================
000111E4                            
000111E4                            Obj59_Type01:				; XREF: Obj59_TypeIndex
000111E4 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
000111EA 6600                       		bne.s	locret_10C0C
000111EC 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000111F0                            
000111F0                            locret_10C0C:
000111F0 4E75                       		rts	
000111F2                            ; ===========================================================================
000111F2                            
000111F2                            Obj59_Type02:				; XREF: Obj59_TypeIndex
000111F2 6100 0000                  		bsr.w	Obj59_Move
000111F6 3028 0034                  		move.w	$34(a0),d0
000111FA 4440                       		neg.w	d0
000111FC D068 0030                  		add.w	$30(a0),d0
00011200 3140 000C                  		move.w	d0,$C(a0)
00011204 4E75                       		rts	
00011206                            ; ===========================================================================
00011206                            
00011206                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00011206 6100 0000                  		bsr.w	Obj59_Move
0001120A 3028 0034                  		move.w	$34(a0),d0
0001120E D068 0030                  		add.w	$30(a0),d0
00011212 3140 000C                  		move.w	d0,$C(a0)
00011216 4E75                       		rts	
00011218                            ; ===========================================================================
00011218                            
00011218                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00011218 6100 0000                  		bsr.w	Obj59_Move
0001121C 3028 0034                  		move.w	$34(a0),d0
00011220 E240                       		asr.w	#1,d0
00011222 4440                       		neg.w	d0
00011224 D068 0030                  		add.w	$30(a0),d0
00011228 3140 000C                  		move.w	d0,$C(a0)
0001122C 3028 0034                  		move.w	$34(a0),d0
00011230 D068 0032                  		add.w	$32(a0),d0
00011234 3140 0008                  		move.w	d0,8(a0)
00011238 4E75                       		rts	
0001123A                            ; ===========================================================================
0001123A                            
0001123A                            Obj59_Type08:				; XREF: Obj59_TypeIndex
0001123A 6100 0000                  		bsr.w	Obj59_Move
0001123E 3028 0034                  		move.w	$34(a0),d0
00011242 E240                       		asr.w	#1,d0
00011244 D068 0030                  		add.w	$30(a0),d0
00011248 3140 000C                  		move.w	d0,$C(a0)
0001124C 3028 0034                  		move.w	$34(a0),d0
00011250 4440                       		neg.w	d0
00011252 D068 0032                  		add.w	$32(a0),d0
00011256 3140 0008                  		move.w	d0,8(a0)
0001125A 4E75                       		rts	
0001125C                            ; ===========================================================================
0001125C                            
0001125C                            Obj59_Type09:				; XREF: Obj59_TypeIndex
0001125C 6100 0000                  		bsr.w	Obj59_Move
00011260 3028 0034                  		move.w	$34(a0),d0
00011264 4440                       		neg.w	d0
00011266 D068 0030                  		add.w	$30(a0),d0
0001126A 3140 000C                  		move.w	d0,$C(a0)
0001126E 4A28 0028                  		tst.b	$28(a0)
00011272 6700 0000                  		beq.w	loc_10C94
00011276 4E75                       		rts	
00011278                            ; ===========================================================================
00011278                            
00011278                            loc_10C94:
00011278 0828 0003 0022             		btst	#3,$22(a0)
0001127E 6700                       		beq.s	Obj59_Delete
00011280 08E9 0001 0022             		bset	#1,$22(a1)
00011286 08A9 0003 0022             		bclr	#3,$22(a1)
0001128C 137C 0002 0024             		move.b	#2,$24(a1)
00011292                            
00011292                            Obj59_Delete:
00011292 6000 C9A2                  		bra.w	DeleteObject
00011296                            
00011296                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011296                            
00011296                            
00011296                            Obj59_Move:				; XREF: Obj59_Type02; et al
00011296 3028 0038                  		move.w	$38(a0),d0
0001129A 4A28 003A                  		tst.b	$3A(a0)
0001129E 6600                       		bne.s	loc_10CC8
000112A0 0C40 0800                  		cmpi.w	#$800,d0
000112A4 6400                       		bcc.s	loc_10CD0
000112A6 0640 0010                  		addi.w	#$10,d0
000112AA 6000                       		bra.s	loc_10CD0
000112AC                            ; ===========================================================================
000112AC                            
000112AC                            loc_10CC8:
000112AC 4A40                       		tst.w	d0
000112AE 6700                       		beq.s	loc_10CD0
000112B0 0440 0010                  		subi.w	#$10,d0
000112B4                            
000112B4                            loc_10CD0:
000112B4 3140 0038                  		move.w	d0,$38(a0)
000112B8 48C0                       		ext.l	d0
000112BA E180                       		asl.l	#8,d0
000112BC D0A8 0034                  		add.l	$34(a0),d0
000112C0 2140 0034                  		move.l	d0,$34(a0)
000112C4 4840                       		swap	d0
000112C6 3428 003C                  		move.w	$3C(a0),d2
000112CA B042                       		cmp.w	d2,d0
000112CC 6300                       		bls.s	loc_10CF0
000112CE 117C 0001 003A             		move.b	#1,$3A(a0)
000112D4                            
000112D4                            loc_10CF0:
000112D4 D442                       		add.w	d2,d2
000112D6 B042                       		cmp.w	d2,d0
000112D8 6600                       		bne.s	locret_10CFA
000112DA 4228 0028                  		clr.b	$28(a0)
000112DE                            
000112DE                            locret_10CFA:
000112DE 4E75                       		rts	
000112E0                            ; End of function Obj59_Move
000112E0                            
000112E0                            ; ===========================================================================
000112E0                            
000112E0                            Obj59_MakeMulti:			; XREF: Obj59_Index
000112E0 5368 003C                  		subq.w	#1,$3C(a0)
000112E4 6600                       		bne.s	Obj59_ChkDel
000112E6 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
000112EC 6100 CD92                  		bsr.w	SingleObjLoad
000112F0 6600                       		bne.s	Obj59_ChkDel
000112F2 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
000112F6 3368 0008 0008             		move.w	8(a0),8(a1)
000112FC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011302 137C 000E 0028             		move.b	#$E,$28(a1)
00011308                            
00011308                            Obj59_ChkDel:
00011308 588F                       		addq.l	#4,sp
0001130A 3028 0008                  		move.w	8(a0),d0
0001130E 0240 FF80                  		andi.w	#$FF80,d0
00011312 3238 F700                  		move.w	($FFFFF700).w,d1
00011316 0441 0080                  		subi.w	#$80,d1
0001131A 0241 FF80                  		andi.w	#$FF80,d1
0001131E 9041                       		sub.w	d1,d0
00011320 0C40 0280                  		cmpi.w	#$280,d0
00011324 6200 C910                  		bhi.w	DeleteObject
00011328 4E75                       		rts	
0001132A                            ; ===========================================================================
0001132A                            ; ---------------------------------------------------------------------------
0001132A                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001132A                            ; ---------------------------------------------------------------------------
0001132A                            Map_obj59:
0001132A                            	include "_maps\obj59.asm"
0001132A                            ; ---------------------------------------------------------------------------
0001132A                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001132A                            ; ---------------------------------------------------------------------------
0001132A 0000                       		dc.w byte_10D4A-Map_obj59
0001132C 03                         byte_10D4A:	dc.b 3
0001132D F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00011332 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00011337 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
0001133C                            		even
0001133C                            		even
0001133C                            
0001133C                            ; ===========================================================================
0001133C                            ; ---------------------------------------------------------------------------
0001133C                            ; Object 5A - platforms	moving in circles (SLZ)
0001133C                            ; ---------------------------------------------------------------------------
0001133C                            
0001133C                            Obj5A:					; XREF: Obj_Index
0001133C 7000                       		moveq	#0,d0
0001133E 1028 0024                  		move.b	$24(a0),d0
00011342 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
00011346 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
0001134A 3028 0032                  		move.w	$32(a0),d0
0001134E 0240 FF80                  		andi.w	#$FF80,d0
00011352 3238 F700                  		move.w	($FFFFF700).w,d1
00011356 0441 0080                  		subi.w	#$80,d1
0001135A 0241 FF80                  		andi.w	#$FF80,d1
0001135E 9041                       		sub.w	d1,d0
00011360 0C40 0280                  		cmpi.w	#$280,d0
00011364 6200 C8D0                  		bhi.w	DeleteObject
00011368 6000 C890                  		bra.w	DisplaySprite
0001136C                            ; ===========================================================================
0001136C 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
0001136E 0000                       		dc.w Obj5A_Platform-Obj5A_Index
00011370 0000                       		dc.w Obj5A_Action-Obj5A_Index
00011372                            ; ===========================================================================
00011372                            
00011372                            Obj5A_Main:				; XREF: Obj5A_Index
00011372 5428 0024                  		addq.b	#2,$24(a0)
00011376 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
0001137E 317C 4000 0002             		move.w	#$4000,2(a0)
00011384 117C 0004 0001             		move.b	#4,1(a0)
0001138A 117C 0004 0018             		move.b	#4,$18(a0)
00011390 117C 0018 0019             		move.b	#$18,$19(a0)
00011396 3168 0008 0032             		move.w	8(a0),$32(a0)
0001139C 3168 000C 0030             		move.w	$C(a0),$30(a0)
000113A2                            
000113A2                            Obj5A_Platform:				; XREF: Obj5A_Index
000113A2 7200                       		moveq	#0,d1
000113A4 1228 0019                  		move.b	$19(a0),d1
000113A8 4EB9 0000 7920             		jsr	(PlatformObject).l
000113AE 6000 0000                  		bra.w	Obj5A_Types
000113B2                            ; ===========================================================================
000113B2                            
000113B2                            Obj5A_Action:				; XREF: Obj5A_Index
000113B2 7200                       		moveq	#0,d1
000113B4 1228 0019                  		move.b	$19(a0),d1
000113B8 4EB9 0000 7A94             		jsr	(ExitPlatform).l
000113BE 3F28 0008                  		move.w	8(a0),-(sp)
000113C2 6100 0000                  		bsr.w	Obj5A_Types
000113C6 341F                       		move.w	(sp)+,d2
000113C8 4EF9 0000 7FFE             		jmp	(MvSonicOnPtfm2).l
000113CE                            ; ===========================================================================
000113CE                            
000113CE                            Obj5A_Types:
000113CE 7000                       		moveq	#0,d0
000113D0 1028 0028                  		move.b	$28(a0),d0
000113D4 0240 000C                  		andi.w	#$C,d0
000113D8 E248                       		lsr.w	#1,d0
000113DA 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
000113DE 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
000113E2                            ; ===========================================================================
000113E2 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
000113E4 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
000113E6                            ; ===========================================================================
000113E6                            
000113E6                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
000113E6 1238 FE80                  		move.b	($FFFFFE80).w,d1
000113EA 0401 0050                  		subi.b	#$50,d1
000113EE 4881                       		ext.w	d1
000113F0 1438 FE84                  		move.b	($FFFFFE84).w,d2
000113F4 0402 0050                  		subi.b	#$50,d2
000113F8 4882                       		ext.w	d2
000113FA 0828 0000 0028             		btst	#0,$28(a0)
00011400 6700                       		beq.s	loc_10E24
00011402 4441                       		neg.w	d1
00011404 4442                       		neg.w	d2
00011406                            
00011406                            loc_10E24:
00011406 0828 0001 0028             		btst	#1,$28(a0)
0001140C 6700                       		beq.s	loc_10E30
0001140E 4441                       		neg.w	d1
00011410 C342                       		exg	d1,d2
00011412                            
00011412                            loc_10E30:
00011412 D268 0032                  		add.w	$32(a0),d1
00011416 3141 0008                  		move.w	d1,8(a0)
0001141A D468 0030                  		add.w	$30(a0),d2
0001141E 3142 000C                  		move.w	d2,$C(a0)
00011422 4E75                       		rts	
00011424                            ; ===========================================================================
00011424                            
00011424                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00011424 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011428 0401 0050                  		subi.b	#$50,d1
0001142C 4881                       		ext.w	d1
0001142E 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011432 0402 0050                  		subi.b	#$50,d2
00011436 4882                       		ext.w	d2
00011438 0828 0000 0028             		btst	#0,$28(a0)
0001143E 6700                       		beq.s	loc_10E62
00011440 4441                       		neg.w	d1
00011442 4442                       		neg.w	d2
00011444                            
00011444                            loc_10E62:
00011444 0828 0001 0028             		btst	#1,$28(a0)
0001144A 6700                       		beq.s	loc_10E6E
0001144C 4441                       		neg.w	d1
0001144E C342                       		exg	d1,d2
00011450                            
00011450                            loc_10E6E:
00011450 4441                       		neg.w	d1
00011452 D268 0032                  		add.w	$32(a0),d1
00011456 3141 0008                  		move.w	d1,8(a0)
0001145A D468 0030                  		add.w	$30(a0),d2
0001145E 3142 000C                  		move.w	d2,$C(a0)
00011462 4E75                       		rts	
00011464                            ; ===========================================================================
00011464                            ; ---------------------------------------------------------------------------
00011464                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011464                            ; ---------------------------------------------------------------------------
00011464                            Map_obj5A:
00011464                            	include "_maps\obj5A.asm"
00011464                            ; ---------------------------------------------------------------------------
00011464                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011464                            ; ---------------------------------------------------------------------------
00011464 0000                       		dc.w byte_10E84-Map_obj5A
00011466 02                         byte_10E84:	dc.b 2
00011467 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
0001146C F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00011472 00                         		even
00011472 00                         		even
00011472                            
00011472                            ; ===========================================================================
00011472                            ; ---------------------------------------------------------------------------
00011472                            ; Object 5B - blocks that form a staircase (SLZ)
00011472                            ; ---------------------------------------------------------------------------
00011472                            
00011472                            Obj5B:					; XREF: Obj_Index
00011472 7000                       		moveq	#0,d0
00011474 1028 0024                  		move.b	$24(a0),d0
00011478 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
0001147C 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
00011480 3028 0030                  		move.w	$30(a0),d0
00011484 0240 FF80                  		andi.w	#$FF80,d0
00011488 3238 F700                  		move.w	($FFFFF700).w,d1
0001148C 0441 0080                  		subi.w	#$80,d1
00011490 0241 FF80                  		andi.w	#$FF80,d1
00011494 9041                       		sub.w	d1,d0
00011496 0C40 0280                  		cmpi.w	#$280,d0
0001149A 6200 C79A                  		bhi.w	DeleteObject
0001149E 6000 C75A                  		bra.w	DisplaySprite
000114A2                            ; ===========================================================================
000114A2 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
000114A4 0000                       		dc.w Obj5B_Move-Obj5B_Index
000114A6 0000                       		dc.w Obj5B_Solid-Obj5B_Index
000114A8                            ; ===========================================================================
000114A8                            
000114A8                            Obj5B_Main:				; XREF: Obj5B_Index
000114A8 5428 0024                  		addq.b	#2,$24(a0)
000114AC 7638                       		moveq	#$38,d3
000114AE 7801                       		moveq	#1,d4
000114B0 0828 0000 0022             		btst	#0,$22(a0)
000114B6 6700                       		beq.s	loc_10EDA
000114B8 763B                       		moveq	#$3B,d3
000114BA 78FF                       		moveq	#-1,d4
000114BC                            
000114BC                            loc_10EDA:
000114BC 3428 0008                  		move.w	8(a0),d2
000114C0 2248                       		movea.l	a0,a1
000114C2 7203                       		moveq	#3,d1
000114C4 6000                       		bra.s	Obj5B_MakeBlocks
000114C6                            ; ===========================================================================
000114C6                            
000114C6                            Obj5B_Loop:
000114C6 6100 CBCE                  		bsr.w	SingleObjLoad2
000114CA 6600 0000                  		bne.w	Obj5B_Move
000114CE 137C 0004 0024             		move.b	#4,$24(a1)
000114D4                            
000114D4                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
000114D4 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
000114D8 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
000114E0 337C 4000 0002             		move.w	#$4000,2(a1)
000114E6 137C 0004 0001             		move.b	#4,1(a1)
000114EC 137C 0003 0018             		move.b	#3,$18(a1)
000114F2 137C 0010 0019             		move.b	#$10,$19(a1)
000114F8 1368 0028 0028             		move.b	$28(a0),$28(a1)
000114FE 3342 0008                  		move.w	d2,8(a1)
00011502 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011508 3368 0008 0030             		move.w	8(a0),$30(a1)
0001150E 3369 000C 0032             		move.w	$C(a1),$32(a1)
00011514 0642 0020                  		addi.w	#$20,d2
00011518 1343 0037                  		move.b	d3,$37(a1)
0001151C 2348 003C                  		move.l	a0,$3C(a1)
00011520 D604                       		add.b	d4,d3
00011522 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00011526                            
00011526                            Obj5B_Move:				; XREF: Obj5B_Index
00011526 7000                       		moveq	#0,d0
00011528 1028 0028                  		move.b	$28(a0),d0
0001152C 0240 0007                  		andi.w	#7,d0
00011530 D040                       		add.w	d0,d0
00011532 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00011536 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
0001153A                            
0001153A                            Obj5B_Solid:				; XREF: Obj5B_Index
0001153A 2468 003C                  		movea.l	$3C(a0),a2
0001153E 7000                       		moveq	#0,d0
00011540 1028 0037                  		move.b	$37(a0),d0
00011544 1032 0000                  		move.b	(a2,d0.w),d0
00011548 D068 0032                  		add.w	$32(a0),d0
0001154C 3140 000C                  		move.w	d0,$C(a0)
00011550 7200                       		moveq	#0,d1
00011552 1228 0019                  		move.b	$19(a0),d1
00011556 0641 000B                  		addi.w	#$B,d1
0001155A 343C 0010                  		move.w	#$10,d2
0001155E 363C 0011                  		move.w	#$11,d3
00011562 3828 0008                  		move.w	8(a0),d4
00011566 6100 EA62                  		bsr.w	SolidObject
0001156A 4A04                       		tst.b	d4
0001156C 6A00                       		bpl.s	loc_10F92
0001156E 1544 0036                  		move.b	d4,$36(a2)
00011572                            
00011572                            loc_10F92:
00011572 0828 0003 0022             		btst	#3,$22(a0)
00011578 6700                       		beq.s	locret_10FA0
0001157A 157C 0001 0036             		move.b	#1,$36(a2)
00011580                            
00011580                            locret_10FA0:
00011580 4E75                       		rts	
00011582                            ; ===========================================================================
00011582 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00011584 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011586 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00011588 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
0001158A                            ; ===========================================================================
0001158A                            
0001158A                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
0001158A 4A68 0034                  		tst.w	$34(a0)
0001158E 6600                       		bne.s	loc_10FC0
00011590 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00011596 6600                       		bne.s	locret_10FBE
00011598 317C 001E 0034             		move.w	#$1E,$34(a0)
0001159E                            
0001159E                            locret_10FBE:
0001159E 4E75                       		rts	
000115A0                            ; ===========================================================================
000115A0                            
000115A0                            loc_10FC0:
000115A0 5368 0034                  		subq.w	#1,$34(a0)
000115A4 66F8                       		bne.s	locret_10FBE
000115A6 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000115AA 4E75                       		rts	
000115AC                            ; ===========================================================================
000115AC                            
000115AC                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
000115AC 4A68 0034                  		tst.w	$34(a0)
000115B0 6600                       		bne.s	loc_10FE0
000115B2 4A28 0036                  		tst.b	$36(a0)
000115B6 6A00                       		bpl.s	locret_10FDE
000115B8 317C 003C 0034             		move.w	#$3C,$34(a0)
000115BE                            
000115BE                            locret_10FDE:
000115BE 4E75                       		rts	
000115C0                            ; ===========================================================================
000115C0                            
000115C0                            loc_10FE0:
000115C0 5368 0034                  		subq.w	#1,$34(a0)
000115C4 6600                       		bne.s	loc_10FEC
000115C6 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000115CA 4E75                       		rts	
000115CC                            ; ===========================================================================
000115CC                            
000115CC                            loc_10FEC:
000115CC 43E8 0038                  		lea	$38(a0),a1
000115D0 3028 0034                  		move.w	$34(a0),d0
000115D4 E408                       		lsr.b	#2,d0
000115D6 0200 0001                  		andi.b	#1,d0
000115DA 12C0                       		move.b	d0,(a1)+
000115DC 0A00 0001                  		eori.b	#1,d0
000115E0 12C0                       		move.b	d0,(a1)+
000115E2 0A00 0001                  		eori.b	#1,d0
000115E6 12C0                       		move.b	d0,(a1)+
000115E8 0A00 0001                  		eori.b	#1,d0
000115EC 12C0                       		move.b	d0,(a1)+
000115EE 4E75                       		rts	
000115F0                            ; ===========================================================================
000115F0                            
000115F0                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
000115F0 43E8 0038                  		lea	$38(a0),a1
000115F4 0C11 0080                  		cmpi.b	#$80,(a1)
000115F8 6700                       		beq.s	locret_11038
000115FA 5211                       		addq.b	#1,(a1)
000115FC 7200                       		moveq	#0,d1
000115FE 1219                       		move.b	(a1)+,d1
00011600 4841                       		swap	d1
00011602 E289                       		lsr.l	#1,d1
00011604 2401                       		move.l	d1,d2
00011606 E289                       		lsr.l	#1,d1
00011608 2601                       		move.l	d1,d3
0001160A D682                       		add.l	d2,d3
0001160C 4841                       		swap	d1
0001160E 4842                       		swap	d2
00011610 4843                       		swap	d3
00011612 12C3                       		move.b	d3,(a1)+
00011614 12C2                       		move.b	d2,(a1)+
00011616 12C1                       		move.b	d1,(a1)+
00011618                            
00011618                            locret_11038:
00011618 4E75                       		rts	
0001161A 4E75                       		rts	
0001161C                            ; ===========================================================================
0001161C                            ; ---------------------------------------------------------------------------
0001161C                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001161C                            ; ---------------------------------------------------------------------------
0001161C                            Map_obj5B:
0001161C                            	include "_maps\obj5B.asm"
0001161C                            ; ---------------------------------------------------------------------------
0001161C                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001161C                            ; ---------------------------------------------------------------------------
0001161C 0000                       		dc.w byte_1103E-Map_obj5B
0001161E 01                         byte_1103E:	dc.b 1
0001161F F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00011624                            		even
00011624                            		even
00011624                            
00011624                            ; ===========================================================================
00011624                            ; ---------------------------------------------------------------------------
00011624                            ; Object 5C - metal girders in foreground (SLZ)
00011624                            ; ---------------------------------------------------------------------------
00011624                            
00011624                            Obj5C:					; XREF: Obj_Index
00011624 7000                       		moveq	#0,d0
00011626 1028 0024                  		move.b	$24(a0),d0
0001162A 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
0001162E 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00011632                            ; ===========================================================================
00011632 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00011634 0000                       		dc.w Obj5C_Display-Obj5C_Index
00011636                            ; ===========================================================================
00011636                            
00011636                            Obj5C_Main:				; XREF: Obj5C_Index
00011636 5428 0024                  		addq.b	#2,$24(a0)
0001163A 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00011642 317C 83CC 0002             		move.w	#$83CC,2(a0)
00011648 117C 0010 0019             		move.b	#$10,$19(a0)
0001164E                            
0001164E                            Obj5C_Display:				; XREF: Obj5C_Index
0001164E 2238 F700                  		move.l	($FFFFF700).w,d1
00011652 D281                       		add.l	d1,d1
00011654 4841                       		swap	d1
00011656 4441                       		neg.w	d1
00011658 3141 0008                  		move.w	d1,8(a0)
0001165C 2238 F704                  		move.l	($FFFFF704).w,d1
00011660 D281                       		add.l	d1,d1
00011662 4841                       		swap	d1
00011664 0241 003F                  		andi.w	#$3F,d1
00011668 4441                       		neg.w	d1
0001166A 0641 0100                  		addi.w	#$100,d1
0001166E 3141 000A                  		move.w	d1,$A(a0)
00011672 6000 C586                  		bra.w	DisplaySprite
00011676                            ; ===========================================================================
00011676                            ; ---------------------------------------------------------------------------
00011676                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011676                            ; ---------------------------------------------------------------------------
00011676                            Map_obj5C:
00011676                            	include "_maps\obj5C.asm"
00011676                            ; ---------------------------------------------------------------------------
00011676                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011676                            ; ---------------------------------------------------------------------------
00011676 0000                       		dc.w byte_11098-Map_obj5C
00011678 09                         byte_11098:	dc.b 9
00011679 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
0001167E A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00011683 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00011688 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
0001168D 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00011692 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00011697 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
0001169C 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
000116A1 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
000116A6                            		even
000116A6                            		even
000116A6                            
000116A6                            ; ===========================================================================
000116A6                            ; ---------------------------------------------------------------------------
000116A6                            ; Object 1B - water surface (LZ)
000116A6                            ; ---------------------------------------------------------------------------
000116A6                            
000116A6                            Obj1B:					; XREF: Obj_Index
000116A6 7000                       		moveq	#0,d0
000116A8 1028 0024                  		move.b	$24(a0),d0
000116AC 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
000116B0 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
000116B4                            ; ===========================================================================
000116B4 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
000116B6 0000                       		dc.w Obj1B_Action-Obj1B_Index
000116B8                            ; ===========================================================================
000116B8                            
000116B8                            Obj1B_Main:				; XREF: Obj1B_Index
000116B8 5428 0024                  		addq.b	#2,$24(a0)
000116BC 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
000116C4 317C C300 0002             		move.w	#$C300,2(a0)
000116CA 117C 0004 0001             		move.b	#4,1(a0)
000116D0 117C 0080 0019             		move.b	#$80,$19(a0)
000116D6 3168 0008 0030             		move.w	8(a0),$30(a0)
000116DC                            
000116DC                            Obj1B_Action:				; XREF: Obj1B_Index
000116DC 3238 F700                  		move.w	($FFFFF700).w,d1
000116E0 0241 FFE0                  		andi.w	#$FFE0,d1
000116E4 D268 0030                  		add.w	$30(a0),d1
000116E8 0838 0000 FE05             		btst	#0,($FFFFFE05).w
000116EE 6700                       		beq.s	loc_11114
000116F0 0641 0020                  		addi.w	#$20,d1
000116F4                            
000116F4                            loc_11114:
000116F4 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
000116F8 3238 F646                  		move.w	($FFFFF646).w,d1
000116FC 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00011700 4A28 0032                  		tst.b	$32(a0)
00011704 6600                       		bne.s	Obj1B_Animate
00011706 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
0001170C 6700                       		beq.s	loc_1114A	; if not, branch
0001170E 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00011712 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00011718 6000                       		bra.s	Obj1B_Display
0001171A                            ; ===========================================================================
0001171A                            
0001171A                            Obj1B_Animate:				; XREF: loc_11114
0001171A 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001171E 6600                       		bne.s	Obj1B_Display	; if yes, branch
00011720 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00011726 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
0001172A                            
0001172A                            loc_1114A:				; XREF: loc_11114
0001172A 5328 001E                  		subq.b	#1,$1E(a0)
0001172E 6A00                       		bpl.s	Obj1B_Display
00011730 117C 0007 001E             		move.b	#7,$1E(a0)
00011736 5228 001A                  		addq.b	#1,$1A(a0)
0001173A 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00011740 6500                       		bcs.s	Obj1B_Display
00011742 117C 0000 001A             		move.b	#0,$1A(a0)
00011748                            
00011748                            Obj1B_Display:
00011748 6000 C4B0                  		bra.w	DisplaySprite
0001174C                            ; ===========================================================================
0001174C                            ; ---------------------------------------------------------------------------
0001174C                            ; Sprite mappings - water surface (LZ)
0001174C                            ; ---------------------------------------------------------------------------
0001174C                            Map_obj1B:
0001174C                            	include "_maps\obj1B.asm"
0001174C                            ; ---------------------------------------------------------------------------
0001174C                            ; Sprite mappings - water surface (LZ)
0001174C                            ; ---------------------------------------------------------------------------
0001174C 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00011750 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00011754 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00011758 03                         byte_11178:	dc.b 3
00011759 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
0001175E FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011763 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011768 03                         byte_11188:	dc.b 3
00011769 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
0001176E FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011773 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011778 03                         byte_11198:	dc.b 3
00011779 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
0001177E FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011783 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011788 06                         byte_111A8:	dc.b 6
00011789 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
0001178E FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00011793 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011798 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
0001179D FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
000117A2 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
000117A7 06                         byte_111C7:	dc.b 6
000117A8 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
000117AD FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
000117B2 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
000117B7 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
000117BC FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
000117C1 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
000117C6 06                         byte_111E6:	dc.b 6
000117C7 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
000117CC FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
000117D1 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
000117D6 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
000117DB FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
000117E0 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
000117E6 00                         		even
000117E6 00                         		even
000117E6                            
000117E6                            ; ===========================================================================
000117E6                            ; ---------------------------------------------------------------------------
000117E6                            ; Object 0B - pole that	breaks (LZ)
000117E6                            ; ---------------------------------------------------------------------------
000117E6                            
000117E6                            Obj0B:					; XREF: Obj_Index
000117E6 7000                       		moveq	#0,d0
000117E8 1028 0024                  		move.b	$24(a0),d0
000117EC 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
000117F0 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
000117F4                            ; ===========================================================================
000117F4 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
000117F6 0000                       		dc.w Obj0B_Action-Obj0B_Index
000117F8 0000                       		dc.w Obj0B_Display-Obj0B_Index
000117FA                            ; ===========================================================================
000117FA                            
000117FA                            Obj0B_Main:				; XREF: Obj0B_Index
000117FA 5428 0024                  		addq.b	#2,$24(a0)
000117FE 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00011806 317C 43DE 0002             		move.w	#$43DE,2(a0)
0001180C 117C 0004 0001             		move.b	#4,1(a0)
00011812 117C 0008 0019             		move.b	#8,$19(a0)
00011818 117C 0004 0018             		move.b	#4,$18(a0)
0001181E 117C 00E1 0020             		move.b	#$E1,$20(a0)
00011824 7000                       		moveq	#0,d0
00011826 1028 0028                  		move.b	$28(a0),d0	; get object type
0001182A C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
0001182E 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00011832                            
00011832                            Obj0B_Action:				; XREF: Obj0B_Index
00011832 4A28 0032                  		tst.b	$32(a0)
00011836 6700                       		beq.s	Obj0B_Grab
00011838 4A68 0030                  		tst.w	$30(a0)
0001183C 6700                       		beq.s	Obj0B_MoveUp
0001183E 5368 0030                  		subq.w	#1,$30(a0)
00011842 6600                       		bne.s	Obj0B_MoveUp
00011844 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
0001184A 6000                       		bra.s	Obj0B_Release
0001184C                            ; ===========================================================================
0001184C                            
0001184C                            Obj0B_MoveUp:				; XREF: Obj0B_Action
0001184C 43F8 D000                  		lea	($FFFFD000).w,a1
00011850 3028 000C                  		move.w	$C(a0),d0
00011854 0440 0018                  		subi.w	#$18,d0
00011858 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
0001185E 6700                       		beq.s	Obj0B_MoveDown
00011860 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00011864 B069 000C                  		cmp.w	$C(a1),d0
00011868 6500                       		bcs.s	Obj0B_MoveDown
0001186A 3340 000C                  		move.w	d0,$C(a1)
0001186E                            
0001186E                            Obj0B_MoveDown:
0001186E 0640 0024                  		addi.w	#$24,d0
00011872 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00011878 6700                       		beq.s	Obj0B_LetGo
0001187A 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
0001187E B069 000C                  		cmp.w	$C(a1),d0
00011882 6400                       		bcc.s	Obj0B_LetGo
00011884 3340 000C                  		move.w	d0,$C(a1)
00011888                            
00011888                            Obj0B_LetGo:
00011888 1038 F603                  		move.b	($FFFFF603).w,d0
0001188C 0240 0070                  		andi.w	#$70,d0
00011890 6700                       		beq.s	Obj0B_Display
00011892                            
00011892                            Obj0B_Release:				; XREF: Obj0B_Action
00011892 4228 0020                  		clr.b	$20(a0)
00011896 5428 0024                  		addq.b	#2,$24(a0)
0001189A 4238 F7C8                  		clr.b	($FFFFF7C8).w
0001189E 4238 F7C9                  		clr.b	($FFFFF7C9).w
000118A2 4228 0032                  		clr.b	$32(a0)
000118A6 6000                       		bra.s	Obj0B_Display
000118A8                            ; ===========================================================================
000118A8                            
000118A8                            Obj0B_Grab:				; XREF: Obj0B_Action
000118A8 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
000118AC 6700                       		beq.s	Obj0B_Display	; if not, branch
000118AE 43F8 D000                  		lea	($FFFFD000).w,a1
000118B2 3028 0008                  		move.w	8(a0),d0
000118B6 0640 0014                  		addi.w	#$14,d0
000118BA B069 0008                  		cmp.w	8(a1),d0
000118BE 6400                       		bcc.s	Obj0B_Display
000118C0 4228 0021                  		clr.b	$21(a0)
000118C4 0C29 0004 0024             		cmpi.b	#4,$24(a1)
000118CA 6400                       		bcc.s	Obj0B_Display
000118CC 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
000118D0 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
000118D4 3028 0008                  		move.w	8(a0),d0
000118D8 0640 0014                  		addi.w	#$14,d0
000118DC 3340 0008                  		move.w	d0,8(a1)
000118E0 08A9 0000 0022             		bclr	#0,$22(a1)
000118E6 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
000118EC 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
000118F2 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
000118F8 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
000118FE                            
000118FE                            Obj0B_Display:				; XREF: Obj0B_Index
000118FE 6000 E3A2                  		bra.w	MarkObjGone
00011902                            ; ===========================================================================
00011902                            ; ---------------------------------------------------------------------------
00011902                            ; Sprite mappings - pole that breaks (LZ)
00011902                            ; ---------------------------------------------------------------------------
00011902                            Map_obj0B:
00011902                            	include "_maps\obj0B.asm"
00011902                            ; ---------------------------------------------------------------------------
00011902                            ; Sprite mappings - pole that breaks (LZ)
00011902                            ; ---------------------------------------------------------------------------
00011902 0000                       		dc.w byte_11326-Map_obj0B
00011904 0000                       		dc.w byte_11331-Map_obj0B
00011906 02                         byte_11326:	dc.b 2			; normal pole
00011907 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
0001190C 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011911 04                         byte_11331:	dc.b 4			; broken pole
00011912 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011917 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
0001191C 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00011921 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011926                            		even
00011926                            		even
00011926                            
00011926                            ; ===========================================================================
00011926                            ; ---------------------------------------------------------------------------
00011926                            ; Object 0C - flapping door (LZ)
00011926                            ; ---------------------------------------------------------------------------
00011926                            
00011926                            Obj0C:					; XREF: Obj_Index
00011926 7000                       		moveq	#0,d0
00011928 1028 0024                  		move.b	$24(a0),d0
0001192C 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00011930 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00011934                            ; ===========================================================================
00011934 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00011936 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00011938                            ; ===========================================================================
00011938                            
00011938                            Obj0C_Main:				; XREF: Obj0C_Index
00011938 5428 0024                  		addq.b	#2,$24(a0)
0001193C 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00011944 317C 4328 0002             		move.w	#$4328,2(a0)
0001194A 0028 0004 0001             		ori.b	#4,1(a0)
00011950 117C 0028 0019             		move.b	#$28,$19(a0)
00011956 7000                       		moveq	#0,d0
00011958 1028 0028                  		move.b	$28(a0),d0	; get object type
0001195C C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011960 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00011964                            
00011964                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00011964 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011968 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
0001196A 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00011970 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011976 4A28 0001                  		tst.b	1(a0)
0001197A 6A00                       		bpl.s	Obj0C_Solid
0001197C 303C 00BB                  		move.w	#$BB,d0
00011980 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play door sound
00011986                            
00011986                            Obj0C_Solid:
00011986 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
0001198C 6100 9336                  		bsr.w	AnimateSprite
00011990 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011994 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011998 6600                       		bne.s	Obj0C_Display	; if yes, branch
0001199A 3038 D008                  		move.w	($FFFFD008).w,d0
0001199E B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
000119A2 6400                       		bcc.s	Obj0C_Display	; if yes, branch
000119A4 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
000119AA 323C 0013                  		move.w	#$13,d1
000119AE 343C 0020                  		move.w	#$20,d2
000119B2 3602                       		move.w	d2,d3
000119B4 5243                       		addq.w	#1,d3
000119B6 3828 0008                  		move.w	8(a0),d4
000119BA 6100 E60E                  		bsr.w	SolidObject	; make the door	solid
000119BE                            
000119BE                            Obj0C_Display:
000119BE 6000 E2E2                  		bra.w	MarkObjGone
000119C2                            ; ===========================================================================
000119C2                            Ani_obj0C:
000119C2                            	include "_anim\obj0C.asm"
000119C2                            ; ---------------------------------------------------------------------------
000119C2                            ; Animation script - flapping door (LZ)
000119C2                            ; ---------------------------------------------------------------------------
000119C2 0000                       		dc.w byte_113E6-Ani_obj0C
000119C4 0000                       		dc.w byte_113EC-Ani_obj0C
000119C6 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
000119CC 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
000119D2                            		even
000119D2                            		even
000119D2                            
000119D2                            ; ---------------------------------------------------------------------------
000119D2                            ; Sprite mappings - flapping door (LZ)
000119D2                            ; ---------------------------------------------------------------------------
000119D2                            Map_obj0C:
000119D2                            	include "_maps\obj0C.asm"
000119D2                            ; ---------------------------------------------------------------------------
000119D2                            ; Sprite mappings - flapping door (LZ)
000119D2                            ; ---------------------------------------------------------------------------
000119D2 0000                       		dc.w byte_113F8-Map_obj0C
000119D4 0000                       		dc.w byte_11403-Map_obj0C
000119D6 0000                       		dc.w byte_1140E-Map_obj0C
000119D8 02                         byte_113F8:	dc.b 2
000119D9 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
000119DE 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
000119E3 02                         byte_11403:	dc.b 2
000119E4 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
000119E9 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
000119EE 02                         byte_1140E:	dc.b 2
000119EF D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
000119F4 180D 1018 00               		dc.b $18, $D, $10, $18,	0
000119FA 00                         		even
000119FA 00                         		even
000119FA                            
000119FA                            ; ===========================================================================
000119FA                            ; ---------------------------------------------------------------------------
000119FA                            ; Object 71 - invisible	solid blocks
000119FA                            ; ---------------------------------------------------------------------------
000119FA                            
000119FA                            Obj71:					; XREF: Obj_Index
000119FA 7000                       		moveq	#0,d0
000119FC 1028 0024                  		move.b	$24(a0),d0
00011A00 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00011A04 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011A08                            ; ===========================================================================
00011A08 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00011A0A 0000                       		dc.w Obj71_Solid-Obj71_Index
00011A0C                            ; ===========================================================================
00011A0C                            
00011A0C                            Obj71_Main:				; XREF: Obj71_Index
00011A0C 5428 0024                  		addq.b	#2,$24(a0)
00011A10 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00011A18 317C 8680 0002             		move.w	#$8680,2(a0)
00011A1E 0028 0004 0001             		ori.b	#4,1(a0)
00011A24 1028 0028                  		move.b	$28(a0),d0	; get object type
00011A28 1200                       		move.b	d0,d1
00011A2A 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00011A2E 0640 0010                  		addi.w	#$10,d0
00011A32 E248                       		lsr.w	#1,d0
00011A34 1140 0019                  		move.b	d0,$19(a0)	; set object width
00011A38 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011A3C 5241                       		addq.w	#1,d1
00011A3E E749                       		lsl.w	#3,d1
00011A40 1141 0016                  		move.b	d1,$16(a0)	; set object height
00011A44                            
00011A44                            Obj71_Solid:				; XREF: Obj71_Index
00011A44 6100 C42E                  		bsr.w	ChkObjOnScreen
00011A48 6600                       		bne.s	Obj71_ChkDel
00011A4A 7200                       		moveq	#0,d1
00011A4C 1228 0019                  		move.b	$19(a0),d1
00011A50 0641 000B                  		addi.w	#$B,d1
00011A54 7400                       		moveq	#0,d2
00011A56 1428 0016                  		move.b	$16(a0),d2
00011A5A 3602                       		move.w	d2,d3
00011A5C 5243                       		addq.w	#1,d3
00011A5E 3828 0008                  		move.w	8(a0),d4
00011A62 6100 E5A8                  		bsr.w	SolidObject71
00011A66                            
00011A66                            Obj71_ChkDel:
00011A66 3028 0008                  		move.w	8(a0),d0
00011A6A 0240 FF80                  		andi.w	#$FF80,d0
00011A6E 3238 F700                  		move.w	($FFFFF700).w,d1
00011A72 0441 0080                  		subi.w	#$80,d1
00011A76 0241 FF80                  		andi.w	#$FF80,d1
00011A7A 9041                       		sub.w	d1,d0
00011A7C 0C40 0280                  		cmpi.w	#$280,d0
00011A80 6200                       		bhi.s	Obj71_Delete
00011A82 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011A86 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011A88 4EFA C170                  		jmp	DisplaySprite	; if yes, display the object
00011A8C                            ; ===========================================================================
00011A8C                            
00011A8C                            Obj71_NoDisplay:
00011A8C 4E75                       		rts	
00011A8E                            ; ===========================================================================
00011A8E                            
00011A8E                            Obj71_Delete:
00011A8E 4EFA C1A6                  		jmp	DeleteObject
00011A92                            ; ===========================================================================
00011A92                            ; ---------------------------------------------------------------------------
00011A92                            ; Sprite mappings - invisible solid blocks
00011A92                            ; ---------------------------------------------------------------------------
00011A92                            Map_obj71:
00011A92                            	include "_maps\obj71.asm"
00011A92                            ; ---------------------------------------------------------------------------
00011A92                            ; Sprite mappings - invisible solid blocks
00011A92                            ; ---------------------------------------------------------------------------
00011A92 0000                       		dc.w byte_114BC-Map_obj71
00011A94 0000                       		dc.w byte_114D1-Map_obj71
00011A96 0000                       		dc.w byte_114E6-Map_obj71
00011A98 04                         byte_114BC:	dc.b 4
00011A99 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011A9E F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011AA3 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011AA8 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011AAD 04                         byte_114D1:	dc.b 4
00011AAE E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011AB3 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011AB8 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011ABD 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011AC2 04                         byte_114E6:	dc.b 4
00011AC3 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011AC8 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011ACD 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011AD2 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011AD8 00                         		even
00011AD8 00                         		even
00011AD8                            
00011AD8                            ; ===========================================================================
00011AD8                            ; ---------------------------------------------------------------------------
00011AD8                            ; Object 5D - fans (SLZ)
00011AD8                            ; ---------------------------------------------------------------------------
00011AD8                            
00011AD8                            Obj5D:					; XREF: Obj_Index
00011AD8 7000                       		moveq	#0,d0
00011ADA 1028 0024                  		move.b	$24(a0),d0
00011ADE 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011AE2 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011AE6                            ; ===========================================================================
00011AE6 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011AE8 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011AEA                            ; ===========================================================================
00011AEA                            
00011AEA                            Obj5D_Main:				; XREF: Obj5D_Index
00011AEA 5428 0024                  		addq.b	#2,$24(a0)
00011AEE 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011AF6 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011AFC 0028 0004 0001             		ori.b	#4,1(a0)
00011B02 117C 0010 0019             		move.b	#$10,$19(a0)
00011B08 117C 0004 0018             		move.b	#4,$18(a0)
00011B0E                            
00011B0E                            Obj5D_Delay:				; XREF: Obj5D_Index
00011B0E 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00011B14 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011B16 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011B1A 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00011B1C 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00011B22 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011B28 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00011B2A 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00011B30                            
00011B30                            Obj5D_Blow:
00011B30 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00011B34 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00011B38 43F8 D000                  		lea	($FFFFD000).w,a1
00011B3C 3029 0008                  		move.w	8(a1),d0
00011B40 9068 0008                  		sub.w	8(a0),d0
00011B44 0828 0000 0022             		btst	#0,$22(a0)
00011B4A 6600                       		bne.s	Obj5D_ChkSonic
00011B4C 4440                       		neg.w	d0
00011B4E                            
00011B4E                            Obj5D_ChkSonic:
00011B4E 0640 0050                  		addi.w	#$50,d0
00011B52 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011B56 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00011B58 3229 000C                  		move.w	$C(a1),d1
00011B5C 0641 0060                  		addi.w	#$60,d1
00011B60 9268 000C                  		sub.w	$C(a0),d1
00011B64 6500                       		bcs.s	Obj5D_Animate
00011B66 0C41 0070                  		cmpi.w	#$70,d1
00011B6A 6400                       		bcc.s	Obj5D_Animate
00011B6C 0440 0050                  		subi.w	#$50,d0
00011B70 6400                       		bcc.s	loc_1159A
00011B72 4640                       		not.w	d0
00011B74 D040                       		add.w	d0,d0
00011B76                            
00011B76                            loc_1159A:
00011B76 0640 0060                  		addi.w	#$60,d0
00011B7A 0828 0000 0022             		btst	#0,$22(a0)
00011B80 6600                       		bne.s	loc_115A8
00011B82 4440                       		neg.w	d0
00011B84                            
00011B84                            loc_115A8:
00011B84 4400                       		neg.b	d0
00011B86 E840                       		asr.w	#4,d0
00011B88 0828 0000 0028             		btst	#0,$28(a0)
00011B8E 6700                       		beq.s	Obj5D_MoveSonic
00011B90 4440                       		neg.w	d0
00011B92                            
00011B92                            Obj5D_MoveSonic:
00011B92 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011B96                            
00011B96                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011B96 5328 001E                  		subq.b	#1,$1E(a0)
00011B9A 6A00                       		bpl.s	Obj5D_ChkDel
00011B9C 117C 0000 001E             		move.b	#0,$1E(a0)
00011BA2 5228 001B                  		addq.b	#1,$1B(a0)
00011BA6 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011BAC 6500                       		bcs.s	loc_115D8
00011BAE 117C 0000 001B             		move.b	#0,$1B(a0)
00011BB4                            
00011BB4                            loc_115D8:
00011BB4 7000                       		moveq	#0,d0
00011BB6 0828 0000 0028             		btst	#0,$28(a0)
00011BBC 6700                       		beq.s	loc_115E4
00011BBE 7002                       		moveq	#2,d0
00011BC0                            
00011BC0                            loc_115E4:
00011BC0 D028 001B                  		add.b	$1B(a0),d0
00011BC4 1140 001A                  		move.b	d0,$1A(a0)
00011BC8                            
00011BC8                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00011BC8 6100 C030                  		bsr.w	DisplaySprite
00011BCC 3028 0008                  		move.w	8(a0),d0
00011BD0 0240 FF80                  		andi.w	#$FF80,d0
00011BD4 3238 F700                  		move.w	($FFFFF700).w,d1
00011BD8 0441 0080                  		subi.w	#$80,d1
00011BDC 0241 FF80                  		andi.w	#$FF80,d1
00011BE0 9041                       		sub.w	d1,d0
00011BE2 0C40 0280                  		cmpi.w	#$280,d0
00011BE6 6200 C04E                  		bhi.w	DeleteObject
00011BEA 4E75                       		rts	
00011BEC                            ; ===========================================================================
00011BEC                            ; ---------------------------------------------------------------------------
00011BEC                            ; Sprite mappings - fans (SLZ)
00011BEC                            ; ---------------------------------------------------------------------------
00011BEC                            Map_obj5D:
00011BEC                            	include "_maps\obj5D.asm"
00011BEC                            ; ---------------------------------------------------------------------------
00011BEC                            ; Sprite mappings - fans (SLZ)
00011BEC                            ; ---------------------------------------------------------------------------
00011BEC 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00011BF0 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00011BF4 0000                       		dc.w byte_1161A-Map_obj5D
00011BF6 02                         byte_1161A:	dc.b 2
00011BF7 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00011BFC 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00011C01 02                         byte_11625:	dc.b 2
00011C02 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00011C07 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00011C0C 02                         byte_11630:	dc.b 2
00011C0D F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00011C12 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00011C18 00                         		even
00011C18 00                         		even
00011C18                            
00011C18                            ; ===========================================================================
00011C18                            ; ---------------------------------------------------------------------------
00011C18                            ; Object 5E - seesaws (SLZ)
00011C18                            ; ---------------------------------------------------------------------------
00011C18                            
00011C18                            Obj5E:					; XREF: Obj_Index
00011C18 7000                       		moveq	#0,d0
00011C1A 1028 0024                  		move.b	$24(a0),d0
00011C1E 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00011C22 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00011C26 3028 0030                  		move.w	$30(a0),d0
00011C2A 0240 FF80                  		andi.w	#$FF80,d0
00011C2E 3238 F700                  		move.w	($FFFFF700).w,d1
00011C32 0441 0080                  		subi.w	#$80,d1
00011C36 0241 FF80                  		andi.w	#$FF80,d1
00011C3A 9041                       		sub.w	d1,d0
00011C3C 6B00 BFF8                  		bmi.w	DeleteObject
00011C40 0C40 0280                  		cmpi.w	#$280,d0
00011C44 6200 BFF0                  		bhi.w	DeleteObject
00011C48 6000 BFB0                  		bra.w	DisplaySprite
00011C4C                            ; ===========================================================================
00011C4C 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00011C4E 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00011C50 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00011C52 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00011C54 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00011C56 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00011C58                            ; ===========================================================================
00011C58                            
00011C58                            Obj5E_Main:				; XREF: Obj5E_Index
00011C58 5428 0024                  		addq.b	#2,$24(a0)
00011C5C 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00011C64 317C 0374 0002             		move.w	#$374,2(a0)
00011C6A 0028 0004 0001             		ori.b	#4,1(a0)
00011C70 117C 0004 0018             		move.b	#4,$18(a0)
00011C76 117C 0030 0019             		move.b	#$30,$19(a0)
00011C7C 3168 0008 0030             		move.w	8(a0),$30(a0)
00011C82 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00011C86 6600                       		bne.s	loc_116D2	; if not, branch
00011C88 6100 C40C                  		bsr.w	SingleObjLoad2
00011C8C 6600                       		bne.s	loc_116D2
00011C8E 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00011C92 5C29 0024                  		addq.b	#6,$24(a1)
00011C96 3368 0008 0008             		move.w	8(a0),8(a1)
00011C9C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011CA2 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011CA8 2348 003C                  		move.l	a0,$3C(a1)
00011CAC                            
00011CAC                            loc_116D2:
00011CAC 0828 0000 0022             		btst	#0,$22(a0)
00011CB2 6700                       		beq.s	loc_116E0
00011CB4 117C 0002 001A             		move.b	#2,$1A(a0)
00011CBA                            
00011CBA                            loc_116E0:
00011CBA 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00011CC0                            
00011CC0                            Obj5E_Slope:				; XREF: Obj5E_Index
00011CC0 1228 003A                  		move.b	$3A(a0),d1
00011CC4 6100 0000                  		bsr.w	loc_11766
00011CC8 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011CCE 0828 0000 001A             		btst	#0,$1A(a0)
00011CD4 6700                       		beq.s	loc_11702
00011CD6 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011CDC                            
00011CDC                            loc_11702:
00011CDC 43F8 D000                  		lea	($FFFFD000).w,a1
00011CE0 3169 0012 0038             		move.w	$12(a1),$38(a0)
00011CE6 323C 0030                  		move.w	#$30,d1
00011CEA 4EB9 0000 79F4             		jsr	(SlopeObject).l
00011CF0 4E75                       		rts	
00011CF2                            ; ===========================================================================
00011CF2                            
00011CF2                            Obj5E_Slope2:				; XREF: Obj5E_Index
00011CF2 6100 0000                  		bsr.w	loc_1174A
00011CF6 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011CFC 0828 0000 001A             		btst	#0,$1A(a0)
00011D02 6700                       		beq.s	loc_11730
00011D04 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011D0A                            
00011D0A                            loc_11730:
00011D0A 323C 0030                  		move.w	#$30,d1
00011D0E 4EB9 0000 7A94             		jsr	(ExitPlatform).l
00011D14 323C 0030                  		move.w	#$30,d1
00011D18 3428 0008                  		move.w	8(a0),d2
00011D1C 4EB9 0000 89F2             		jsr	SlopeObject2
00011D22 4E75                       		rts	
00011D24                            ; ===========================================================================
00011D24                            
00011D24                            loc_1174A:				; XREF: Obj5E_Slope2
00011D24 7202                       		moveq	#2,d1
00011D26 43F8 D000                  		lea	($FFFFD000).w,a1
00011D2A 3028 0008                  		move.w	8(a0),d0
00011D2E 9069 0008                  		sub.w	8(a1),d0
00011D32 6400                       		bcc.s	loc_1175E
00011D34 4440                       		neg.w	d0
00011D36 7200                       		moveq	#0,d1
00011D38                            
00011D38                            loc_1175E:
00011D38 0C40 0008                  		cmpi.w	#8,d0
00011D3C 6400                       		bcc.s	loc_11766
00011D3E 7201                       		moveq	#1,d1
00011D40                            
00011D40                            loc_11766:
00011D40 1028 001A                  		move.b	$1A(a0),d0
00011D44 B001                       		cmp.b	d1,d0
00011D46 6700                       		beq.s	locret_11790
00011D48 6400                       		bcc.s	loc_11772
00011D4A 5400                       		addq.b	#2,d0
00011D4C                            
00011D4C                            loc_11772:
00011D4C 5300                       		subq.b	#1,d0
00011D4E 1140 001A                  		move.b	d0,$1A(a0)
00011D52 1141 003A                  		move.b	d1,$3A(a0)
00011D56 08A8 0000 0001             		bclr	#0,1(a0)
00011D5C 0828 0001 001A             		btst	#1,$1A(a0)
00011D62 6700                       		beq.s	locret_11790
00011D64 08E8 0000 0001             		bset	#0,1(a0)
00011D6A                            
00011D6A                            locret_11790:
00011D6A 4E75                       		rts	
00011D6C                            ; ===========================================================================
00011D6C                            
00011D6C                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00011D6C 5428 0024                  		addq.b	#2,$24(a0)
00011D70 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00011D78 317C 04F0 0002             		move.w	#$4F0,2(a0)
00011D7E 0028 0004 0001             		ori.b	#4,1(a0)
00011D84 117C 0004 0018             		move.b	#4,$18(a0)
00011D8A 117C 008B 0020             		move.b	#$8B,$20(a0)
00011D90 117C 000C 0019             		move.b	#$C,$19(a0)
00011D96 3168 0008 0030             		move.w	8(a0),$30(a0)
00011D9C 0668 0028 0008             		addi.w	#$28,8(a0)
00011DA2 3168 000C 0034             		move.w	$C(a0),$34(a0)
00011DA8 117C 0001 001A             		move.b	#1,$1A(a0)
00011DAE 0828 0000 0022             		btst	#0,$22(a0)
00011DB4 6700                       		beq.s	Obj5E_MoveSpike
00011DB6 0468 0050 0008             		subi.w	#$50,8(a0)
00011DBC 117C 0002 003A             		move.b	#2,$3A(a0)
00011DC2                            
00011DC2                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00011DC2 2268 003C                  		movea.l	$3C(a0),a1
00011DC6 7000                       		moveq	#0,d0
00011DC8 1028 003A                  		move.b	$3A(a0),d0
00011DCC 9029 003A                  		sub.b	$3A(a1),d0
00011DD0 6700                       		beq.s	loc_1183E
00011DD2 6400                       		bcc.s	loc_117FC
00011DD4 4400                       		neg.b	d0
00011DD6                            
00011DD6                            loc_117FC:
00011DD6 323C F7E8                  		move.w	#-$818,d1
00011DDA 343C FEEC                  		move.w	#-$114,d2
00011DDE 0C00 0001                  		cmpi.b	#1,d0
00011DE2 6700                       		beq.s	loc_11822
00011DE4 323C F510                  		move.w	#-$AF0,d1
00011DE8 343C FF34                  		move.w	#-$CC,d2
00011DEC 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00011DF2 6D00                       		blt.s	loc_11822
00011DF4 323C F200                  		move.w	#-$E00,d1
00011DF8 343C FF60                  		move.w	#-$A0,d2
00011DFC                            
00011DFC                            loc_11822:
00011DFC 3141 0012                  		move.w	d1,$12(a0)
00011E00 3142 0010                  		move.w	d2,$10(a0)
00011E04 3028 0008                  		move.w	8(a0),d0
00011E08 9068 0030                  		sub.w	$30(a0),d0
00011E0C 6400                       		bcc.s	loc_11838
00011E0E 4468 0010                  		neg.w	$10(a0)
00011E12                            
00011E12                            loc_11838:
00011E12 5428 0024                  		addq.b	#2,$24(a0)
00011E16 6000                       		bra.s	Obj5E_SpikeFall
00011E18                            ; ===========================================================================
00011E18                            
00011E18                            loc_1183E:				; XREF: Obj5E_MoveSpike
00011E18 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011E1E 7000                       		moveq	#0,d0
00011E20 1029 001A                  		move.b	$1A(a1),d0
00011E24 343C 0028                  		move.w	#$28,d2
00011E28 3228 0008                  		move.w	8(a0),d1
00011E2C 9268 0030                  		sub.w	$30(a0),d1
00011E30 6400                       		bcc.s	loc_1185C
00011E32 4442                       		neg.w	d2
00011E34 5440                       		addq.w	#2,d0
00011E36                            
00011E36                            loc_1185C:
00011E36 D040                       		add.w	d0,d0
00011E38 3228 0034                  		move.w	$34(a0),d1
00011E3C D272 0000                  		add.w	(a2,d0.w),d1
00011E40 3141 000C                  		move.w	d1,$C(a0)
00011E44 D468 0030                  		add.w	$30(a0),d2
00011E48 3142 0008                  		move.w	d2,8(a0)
00011E4C 4268 000E                  		clr.w	$E(a0)
00011E50 4268 000A                  		clr.w	$A(a0)
00011E54 4E75                       		rts	
00011E56                            ; ===========================================================================
00011E56                            
00011E56                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
00011E56 4A68 0012                  		tst.w	$12(a0)
00011E5A 6A00                       		bpl.s	loc_1189A
00011E5C 6100 BD4A                  		bsr.w	ObjectFall
00011E60 3028 0034                  		move.w	$34(a0),d0
00011E64 0440 002F                  		subi.w	#$2F,d0
00011E68 B068 000C                  		cmp.w	$C(a0),d0
00011E6C 6E00                       		bgt.s	locret_11898
00011E6E 6100 BD38                  		bsr.w	ObjectFall
00011E72                            
00011E72                            locret_11898:
00011E72 4E75                       		rts	
00011E74                            ; ===========================================================================
00011E74                            
00011E74                            loc_1189A:				; XREF: Obj5E_SpikeFall
00011E74 6100 BD32                  		bsr.w	ObjectFall
00011E78 2268 003C                  		movea.l	$3C(a0),a1
00011E7C 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011E82 7000                       		moveq	#0,d0
00011E84 1029 001A                  		move.b	$1A(a1),d0
00011E88 3228 0008                  		move.w	8(a0),d1
00011E8C 9268 0030                  		sub.w	$30(a0),d1
00011E90 6400                       		bcc.s	loc_118BA
00011E92 5440                       		addq.w	#2,d0
00011E94                            
00011E94                            loc_118BA:
00011E94 D040                       		add.w	d0,d0
00011E96 3228 0034                  		move.w	$34(a0),d1
00011E9A D272 0000                  		add.w	(a2,d0.w),d1
00011E9E B268 000C                  		cmp.w	$C(a0),d1
00011EA2 6E00                       		bgt.s	locret_11938
00011EA4 2268 003C                  		movea.l	$3C(a0),a1
00011EA8 7202                       		moveq	#2,d1
00011EAA 4A68 0010                  		tst.w	$10(a0)
00011EAE 6B00                       		bmi.s	Obj5E_Spring
00011EB0 7200                       		moveq	#0,d1
00011EB2                            
00011EB2                            Obj5E_Spring:
00011EB2 1341 003A                  		move.b	d1,$3A(a1)
00011EB6 1141 003A                  		move.b	d1,$3A(a0)
00011EBA B229 001A                  		cmp.b	$1A(a1),d1
00011EBE 6700                       		beq.s	loc_1192C
00011EC0 08A9 0003 0022             		bclr	#3,$22(a1)
00011EC6 6700                       		beq.s	loc_1192C
00011EC8 4229 0025                  		clr.b	$25(a1)
00011ECC 137C 0002 0024             		move.b	#2,$24(a1)
00011ED2 45F8 D000                  		lea	($FFFFD000).w,a2
00011ED6 3568 0012 0012             		move.w	$12(a0),$12(a2)
00011EDC 446A 0012                  		neg.w	$12(a2)
00011EE0 08EA 0001 0022             		bset	#1,$22(a2)
00011EE6 08AA 0003 0022             		bclr	#3,$22(a2)
00011EEC 422A 003C                  		clr.b	$3C(a2)
00011EF0 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00011EF6 157C 0002 0024             		move.b	#2,$24(a2)
00011EFC 303C 00CC                  		move.w	#$CC,d0
00011F00 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
00011F06                            
00011F06                            loc_1192C:
00011F06 4268 0010                  		clr.w	$10(a0)
00011F0A 4268 0012                  		clr.w	$12(a0)
00011F0E 5528 0024                  		subq.b	#2,$24(a0)
00011F12                            
00011F12                            locret_11938:
00011F12 4E75                       		rts	
00011F14                            ; ===========================================================================
00011F14 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00011F1E                            
00011F1E                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00011F4E                            		even
00011F4E                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00011F7E                            		even
00011F7E                            ; ---------------------------------------------------------------------------
00011F7E                            ; Sprite mappings - seesaws (SLZ)
00011F7E                            ; ---------------------------------------------------------------------------
00011F7E                            Map_obj5E:
00011F7E                            	include "_maps\obj5E.asm"
00011F7E                            ; ---------------------------------------------------------------------------
00011F7E                            ; Sprite mappings - seesaws (SLZ)
00011F7E                            ; ---------------------------------------------------------------------------
00011F7E 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011F82 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011F86 07                         byte_119AC:	dc.b 7
00011F87 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00011F8C DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00011F91 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00011F96 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00011F9B FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00011FA0 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00011FA5 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00011FAA 04                         byte_119D0:	dc.b 4
00011FAB E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00011FB0 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00011FB5 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00011FBA E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00011FC0 00                         		even
00011FC0 00                         		even
00011FC0                            
00011FC0                            ; ---------------------------------------------------------------------------
00011FC0                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011FC0                            ; ---------------------------------------------------------------------------
00011FC0                            Map_obj5Ea:
00011FC0                            	include "_maps\obj5Eballs.asm"
00011FC0                            ; ---------------------------------------------------------------------------
00011FC0                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011FC0                            ; ---------------------------------------------------------------------------
00011FC0 0000                       		dc.w byte_119EA-Map_obj5Ea
00011FC2 0000                       		dc.w byte_119F0-Map_obj5Ea
00011FC4 01                         byte_119EA:	dc.b 1
00011FC5 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00011FCA 01                         byte_119F0:	dc.b 1
00011FCB F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00011FD0                            		even
00011FD0                            		even
00011FD0                            
00011FD0                            ; ===========================================================================
00011FD0                            ; ---------------------------------------------------------------------------
00011FD0                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00011FD0                            ; ---------------------------------------------------------------------------
00011FD0                            
00011FD0                            Obj5F:					; XREF: Obj_Index
00011FD0 7000                       		moveq	#0,d0
00011FD2 1028 0024                  		move.b	$24(a0),d0
00011FD6 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00011FDA 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00011FDE                            ; ===========================================================================
00011FDE 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00011FE0 0000                       		dc.w Obj5F_Action-Obj5F_Index
00011FE2 0000                       		dc.w Obj5F_Display-Obj5F_Index
00011FE4 0000                       		dc.w Obj5F_End-Obj5F_Index
00011FE6                            ; ===========================================================================
00011FE6                            
00011FE6                            Obj5F_Main:				; XREF: Obj5F_Index
00011FE6 5428 0024                  		addq.b	#2,$24(a0)
00011FEA 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00011FF2 317C 0400 0002             		move.w	#$400,2(a0)
00011FF8 0028 0004 0001             		ori.b	#4,1(a0)
00011FFE 117C 0003 0018             		move.b	#3,$18(a0)
00012004 117C 000C 0019             		move.b	#$C,$19(a0)
0001200A 1028 0028                  		move.b	$28(a0),d0
0001200E 6700                       		beq.s	loc_11A3C
00012010 1140 0024                  		move.b	d0,$24(a0)
00012014 4E75                       		rts	
00012016                            ; ===========================================================================
00012016                            
00012016                            loc_11A3C:
00012016 117C 009A 0020             		move.b	#$9A,$20(a0)
0001201C 0868 0000 0022             		bchg	#0,$22(a0)
00012022                            
00012022                            Obj5F_Action:				; XREF: Obj5F_Index
00012022 7000                       		moveq	#0,d0
00012024 1028 0025                  		move.b	$25(a0),d0
00012028 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
0001202C 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00012030 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012036 6100 8C8C                  		bsr.w	AnimateSprite
0001203A 6000 DC66                  		bra.w	MarkObjGone
0001203E                            ; ===========================================================================
0001203E 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00012040 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00012042 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00012044                            ; ===========================================================================
00012044                            
00012044                            Obj5F_Walk:				; XREF: Obj5F_Index2
00012044 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012048 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001204C 6A00                       		bpl.s	locret_11A96	; if time remains, branch
0001204E 5428 0025                  		addq.b	#2,$25(a0)
00012052 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00012058 317C 0010 0010             		move.w	#$10,$10(a0)
0001205E 117C 0001 001C             		move.b	#1,$1C(a0)
00012064 0868 0000 0022             		bchg	#0,$22(a0)
0001206A 6700                       		beq.s	locret_11A96
0001206C 4468 0010                  		neg.w	$10(a0)		; change direction
00012070                            
00012070                            locret_11A96:
00012070 4E75                       		rts	
00012072                            ; ===========================================================================
00012072                            
00012072                            Obj5F_Wait:				; XREF: Obj5F_Index2
00012072 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012076 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001207A 6B00                       		bmi.s	loc_11AA8
0001207C 6100 BB56                  		bsr.w	SpeedToPos
00012080 4E75                       		rts	
00012082                            ; ===========================================================================
00012082                            
00012082                            loc_11AA8:
00012082 5528 0025                  		subq.b	#2,$25(a0)
00012086 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
0001208C 4268 0010                  		clr.w	$10(a0)		; stop walking
00012090 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00012096 4E75                       		rts	
00012098                            ; ===========================================================================
00012098                            
00012098                            Obj5F_Explode:				; XREF: Obj5F_Index2
00012098 5368 0030                  		subq.w	#1,$30(a0)
0001209C 6A00                       		bpl.s	locret_11AD0
0001209E 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
000120A2 117C 0000 0024             		move.b	#0,$24(a0)
000120A8                            
000120A8                            locret_11AD0:
000120A8 4E75                       		rts	
000120AA                            ; ===========================================================================
000120AA                            
000120AA                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
000120AA 3038 D008                  		move.w	($FFFFD008).w,d0
000120AE 9068 0008                  		sub.w	8(a0),d0
000120B2 6400                       		bcc.s	loc_11ADE
000120B4 4440                       		neg.w	d0
000120B6                            
000120B6                            loc_11ADE:
000120B6 0C40 0060                  		cmpi.w	#$60,d0
000120BA 6400                       		bcc.s	locret_11B5E
000120BC 3038 D00C                  		move.w	($FFFFD00C).w,d0
000120C0 9068 000C                  		sub.w	$C(a0),d0
000120C4 6400                       		bcc.s	Obj5F_MakeFuse
000120C6 4440                       		neg.w	d0
000120C8                            
000120C8                            Obj5F_MakeFuse:
000120C8 0C40 0060                  		cmpi.w	#$60,d0
000120CC 6400                       		bcc.s	locret_11B5E
000120CE 4A78 FE08                  		tst.w	($FFFFFE08).w
000120D2 6600                       		bne.s	locret_11B5E
000120D4 117C 0004 0025             		move.b	#4,$25(a0)
000120DA 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
000120E0 4268 0010                  		clr.w	$10(a0)
000120E4 117C 0002 001C             		move.b	#2,$1C(a0)
000120EA 6100 BFAA                  		bsr.w	SingleObjLoad2
000120EE 6600                       		bne.s	locret_11B5E
000120F0 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
000120F4 3368 0008 0008             		move.w	8(a0),8(a1)
000120FA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012100 3368 000C 0034             		move.w	$C(a0),$34(a1)
00012106 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001210C 137C 0004 0028             		move.b	#4,$28(a1)
00012112 137C 0003 001C             		move.b	#3,$1C(a1)
00012118 337C 0010 0012             		move.w	#$10,$12(a1)
0001211E 0828 0001 0022             		btst	#1,$22(a0)
00012124 6700                       		beq.s	loc_11B54
00012126 4469 0012                  		neg.w	$12(a1)
0001212A                            
0001212A                            loc_11B54:
0001212A 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
00012130 2348 003C                  		move.l	a0,$3C(a1)
00012134                            
00012134                            locret_11B5E:
00012134 4E75                       		rts	
00012136                            ; ===========================================================================
00012136                            
00012136                            Obj5F_Display:				; XREF: Obj5F_Index
00012136 6100                       		bsr.s	loc_11B70
00012138 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001213E 6100 8B84                  		bsr.w	AnimateSprite
00012142 6000 DB5E                  		bra.w	MarkObjGone
00012146                            ; ===========================================================================
00012146                            
00012146                            loc_11B70:
00012146 5368 0030                  		subq.w	#1,$30(a0)
0001214A 6B00                       		bmi.s	loc_11B7C
0001214C 6100 BA86                  		bsr.w	SpeedToPos
00012150 4E75                       		rts	
00012152                            ; ===========================================================================
00012152                            
00012152                            loc_11B7C:
00012152 4268 0030                  		clr.w	$30(a0)
00012156 4228 0024                  		clr.b	$24(a0)
0001215A 3168 0034 000C             		move.w	$34(a0),$C(a0)
00012160 7203                       		moveq	#3,d1
00012162 2248                       		movea.l	a0,a1
00012164 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
0001216A 6000                       		bra.s	Obj5F_MakeShrap
0001216C                            ; ===========================================================================
0001216C                            
0001216C                            Obj5F_Loop:
0001216C 6100 BF28                  		bsr.w	SingleObjLoad2
00012170 6600                       		bne.s	loc_11BCE
00012172                            
00012172                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00012172 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
00012176 3368 0008 0008             		move.w	8(a0),8(a1)
0001217C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012182 137C 0006 0028             		move.b	#6,$28(a1)
00012188 137C 0004 001C             		move.b	#4,$1C(a1)
0001218E 335A 0010                  		move.w	(a2)+,$10(a1)
00012192 335A 0012                  		move.w	(a2)+,$12(a1)
00012196 137C 0098 0020             		move.b	#$98,$20(a1)
0001219C 08E9 0007 0001             		bset	#7,1(a1)
000121A2                            
000121A2                            loc_11BCE:
000121A2 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
000121A6                            
000121A6 117C 0006 0024             		move.b	#6,$24(a0)
000121AC                            
000121AC                            Obj5F_End:				; XREF: Obj5F_Index
000121AC 6100 BA26                  		bsr.w	SpeedToPos
000121B0 0668 0018 0012             		addi.w	#$18,$12(a0)
000121B6 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000121BC 6100 8B06                  		bsr.w	AnimateSprite
000121C0 4A28 0001                  		tst.b	1(a0)
000121C4 6A00 BA70                  		bpl.w	DeleteObject
000121C8 6000 BA30                  		bra.w	DisplaySprite
000121CC                            ; ===========================================================================
000121CC FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
000121DC                            
000121DC                            Ani_obj5F:
000121DC                            	include "_anim\obj5F.asm"
000121DC                            ; ---------------------------------------------------------------------------
000121DC                            ; Animation script - Bomb enemy
000121DC                            ; ---------------------------------------------------------------------------
000121DC 0000                       		dc.w byte_11C12-Ani_obj5F
000121DE 0000                       		dc.w byte_11C16-Ani_obj5F
000121E0 0000                       		dc.w byte_11C1C-Ani_obj5F
000121E2 0000                       		dc.w byte_11C20-Ani_obj5F
000121E4 0000                       		dc.w byte_11C24-Ani_obj5F
000121E6 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
000121EA 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
000121F0 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
000121F4 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
000121F8 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
000121FC                            		even
000121FC                            		even
000121FC                            
000121FC                            ; ---------------------------------------------------------------------------
000121FC                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
000121FC                            ; ---------------------------------------------------------------------------
000121FC                            Map_obj5F:
000121FC                            	include "_maps\obj5F.asm"
000121FC                            ; ---------------------------------------------------------------------------
000121FC                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
000121FC                            ; ---------------------------------------------------------------------------
000121FC 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00012200 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00012204 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00012208 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
0001220C 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00012210 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00012214 03                         byte_11C40:	dc.b 3
00012215 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
0001221A 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001221F E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012224 03                         byte_11C50:	dc.b 3
00012225 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001222A 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001222F E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012234 03                         byte_11C60:	dc.b 3
00012235 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
0001223A 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
0001223F E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012244 03                         byte_11C70:	dc.b 3
00012245 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001224A 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
0001224F E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012254 03                         byte_11C80:	dc.b 3
00012255 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
0001225A 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
0001225F E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012264 03                         byte_11C90:	dc.b 3
00012265 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001226A 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
0001226F E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012274 02                         byte_11CA0:	dc.b 2
00012275 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
0001227A 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001227F 02                         byte_11CAB:	dc.b 2
00012280 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012285 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001228A 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
0001228B E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
00012290 01                         byte_11CBC:	dc.b 1			; fuse
00012291 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00012296 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
00012297 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001229C 01                         byte_11CC8:	dc.b 1			; fireball
0001229D FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000122A2                            		even
000122A2                            		even
000122A2                            
000122A2                            ; ===========================================================================
000122A2                            ; ---------------------------------------------------------------------------
000122A2                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
000122A2                            ; ---------------------------------------------------------------------------
000122A2                            
000122A2                            Obj60:					; XREF: Obj_Index
000122A2 7000                       		moveq	#0,d0
000122A4 1028 0024                  		move.b	$24(a0),d0
000122A8 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
000122AC 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
000122B0                            ; ===========================================================================
000122B0 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
000122B2 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
000122B4 0000                       		dc.w Obj60_Display-Obj60_Index
000122B6 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
000122B8 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
000122BA                            ; ===========================================================================
000122BA                            
000122BA                            Obj60_Main:				; XREF: Obj60_Index
000122BA 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
000122C2 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
000122C8 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000122CE 6700                       		beq.s	loc_11D02
000122D0 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
000122D6                            
000122D6                            loc_11D02:
000122D6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000122DC 6600                       		bne.s	loc_11D10
000122DE 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
000122E4                            
000122E4                            loc_11D10:
000122E4 0028 0004 0001             		ori.b	#4,1(a0)
000122EA 117C 0004 0018             		move.b	#4,$18(a0)
000122F0 117C 000B 0020             		move.b	#$B,$20(a0)
000122F6 117C 000C 0019             		move.b	#$C,$19(a0)
000122FC 7400                       		moveq	#0,d2
000122FE 45E8 0037                  		lea	$37(a0),a2
00012302 264A                       		movea.l	a2,a3
00012304 524A                       		addq.w	#1,a2
00012306 7203                       		moveq	#3,d1
00012308                            
00012308                            Obj60_MakeOrbs:
00012308 6100 BD8C                  		bsr.w	SingleObjLoad2
0001230C 6600                       		bne.s	loc_11D90
0001230E 5213                       		addq.b	#1,(a3)
00012310 3A09                       		move.w	a1,d5
00012312 0445 D000                  		subi.w	#-$3000,d5
00012316 EC4D                       		lsr.w	#6,d5
00012318 0245 007F                  		andi.w	#$7F,d5
0001231C 14C5                       		move.b	d5,(a2)+
0001231E 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00012320 137C 0006 0024             		move.b	#6,$24(a1)
00012326 2368 0004 0004             		move.l	4(a0),4(a1)
0001232C 3368 0002 0002             		move.w	2(a0),2(a1)
00012332 0029 0004 0001             		ori.b	#4,1(a1)
00012338 137C 0004 0018             		move.b	#4,$18(a1)
0001233E 137C 0008 0019             		move.b	#8,$19(a1)
00012344 137C 0003 001A             		move.b	#3,$1A(a1)
0001234A 137C 0098 0020             		move.b	#$98,$20(a1)
00012350 1342 0026                  		move.b	d2,$26(a1)
00012354 0602 0040                  		addi.b	#$40,d2
00012358 2348 003C                  		move.l	a0,$3C(a1)
0001235C 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
00012360                            
00012360                            loc_11D90:
00012360 7001                       		moveq	#1,d0
00012362 0828 0000 0022             		btst	#0,$22(a0)
00012368 6700                       		beq.s	Obj60_Move
0001236A 4440                       		neg.w	d0
0001236C                            
0001236C                            Obj60_Move:
0001236C 1140 0036                  		move.b	d0,$36(a0)
00012370 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
00012376 5428 0024                  		addq.b	#2,$24(a0)
0001237A 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
00012380 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
00012386 6700                       		beq.s	locret_11DBC	; if not, branch
00012388 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
0001238C                            
0001238C                            locret_11DBC:
0001238C 4E75                       		rts	
0001238E                            ; ===========================================================================
0001238E                            
0001238E                            Obj60_ChkSonic:				; XREF: Obj60_Index
0001238E 3038 D008                  		move.w	($FFFFD008).w,d0
00012392 9068 0008                  		sub.w	8(a0),d0
00012396 6400                       		bcc.s	loc_11DCA
00012398 4440                       		neg.w	d0
0001239A                            
0001239A                            loc_11DCA:
0001239A 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
0001239E 6400                       		bcc.s	Obj60_Animate	; if not, branch
000123A0 3038 D00C                  		move.w	($FFFFD00C).w,d0
000123A4 9068 000C                  		sub.w	$C(a0),d0
000123A8 6400                       		bcc.s	loc_11DDC
000123AA 4440                       		neg.w	d0
000123AC                            
000123AC                            loc_11DDC:
000123AC 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
000123B0 6400                       		bcc.s	Obj60_Animate	; if not, branch
000123B2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000123B6 6600                       		bne.s	Obj60_Animate	; if yes, branch
000123B8 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
000123BE                            
000123BE                            Obj60_Animate:
000123BE 43F9 0000 0000             		lea	(Ani_obj60).l,a1
000123C4 6100 88FE                  		bsr.w	AnimateSprite
000123C8 6000 0000                  		bra.w	Obj60_ChkDel
000123CC                            ; ===========================================================================
000123CC                            
000123CC                            Obj60_Display:				; XREF: Obj60_Index
000123CC 6100 B806                  		bsr.w	SpeedToPos
000123D0                            
000123D0                            Obj60_ChkDel:				; XREF: Obj60_Animate
000123D0 3028 0008                  		move.w	8(a0),d0
000123D4 0240 FF80                  		andi.w	#$FF80,d0
000123D8 3238 F700                  		move.w	($FFFFF700).w,d1
000123DC 0441 0080                  		subi.w	#$80,d1
000123E0 0241 FF80                  		andi.w	#$FF80,d1
000123E4 9041                       		sub.w	d1,d0
000123E6 0C40 0280                  		cmpi.w	#$280,d0
000123EA 6200 0000                  		bhi.w	Obj60_ChkGone
000123EE 6000 B80A                  		bra.w	DisplaySprite
000123F2                            ; ===========================================================================
000123F2                            
000123F2                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
000123F2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000123F6 7000                       		moveq	#0,d0
000123F8 1028 0023                  		move.b	$23(a0),d0
000123FC 6700                       		beq.s	loc_11E34
000123FE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012404                            
00012404                            loc_11E34:
00012404 45E8 0037                  		lea	$37(a0),a2
00012408 7400                       		moveq	#0,d2
0001240A 141A                       		move.b	(a2)+,d2
0001240C 5342                       		subq.w	#1,d2
0001240E 6500                       		bcs.s	Obj60_Delete
00012410                            
00012410                            loc_11E40:
00012410 7000                       		moveq	#0,d0
00012412 101A                       		move.b	(a2)+,d0
00012414 ED48                       		lsl.w	#6,d0
00012416 0680 00FF D000             		addi.l	#$FFD000,d0
0001241C 2240                       		movea.l	d0,a1
0001241E 6100 B818                  		bsr.w	DeleteObject2
00012422 51CA FFEC                  		dbf	d2,loc_11E40
00012426                            
00012426                            Obj60_Delete:
00012426 6000 B80E                  		bra.w	DeleteObject
0001242A                            ; ===========================================================================
0001242A                            
0001242A                            Obj60_MoveOrb:				; XREF: Obj60_Index
0001242A 2268 003C                  		movea.l	$3C(a0),a1
0001242E 0C11 0060                  		cmpi.b	#$60,0(a1)
00012432 6600 B802                  		bne.w	DeleteObject
00012436 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
0001243C 6600                       		bne.s	Obj60_Circle
0001243E 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
00012444 6600                       		bne.s	Obj60_Circle
00012446 5428 0024                  		addq.b	#2,$24(a0)
0001244A 5329 0037                  		subq.b	#1,$37(a1)
0001244E 6600                       		bne.s	Obj60_FireOrb
00012450 5429 0024                  		addq.b	#2,$24(a1)
00012454                            
00012454                            Obj60_FireOrb:
00012454 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
0001245A 0829 0000 0022             		btst	#0,$22(a1)
00012460 6700                       		beq.s	Obj60_Display2
00012462 4468 0010                  		neg.w	$10(a0)
00012466                            
00012466                            Obj60_Display2:
00012466 6000 B792                  		bra.w	DisplaySprite
0001246A                            ; ===========================================================================
0001246A                            
0001246A                            Obj60_Circle:				; XREF: Obj60_MoveOrb
0001246A 1028 0026                  		move.b	$26(a0),d0
0001246E 4EB9 0000 2C60             		jsr	(CalcSine).l
00012474 E841                       		asr.w	#4,d1
00012476 D269 0008                  		add.w	8(a1),d1
0001247A 3141 0008                  		move.w	d1,8(a0)
0001247E E840                       		asr.w	#4,d0
00012480 D069 000C                  		add.w	$C(a1),d0
00012484 3140 000C                  		move.w	d0,$C(a0)
00012488 1029 0036                  		move.b	$36(a1),d0
0001248C D128 0026                  		add.b	d0,$26(a0)
00012490 6000 B768                  		bra.w	DisplaySprite
00012494                            ; ===========================================================================
00012494                            
00012494                            Obj60_ChkDel2:				; XREF: Obj60_Index
00012494 6100 B73E                  		bsr.w	SpeedToPos
00012498 4A28 0001                  		tst.b	1(a0)
0001249C 6A00 B798                  		bpl.w	DeleteObject
000124A0 6000 B758                  		bra.w	DisplaySprite
000124A4                            ; ===========================================================================
000124A4                            Ani_obj60:
000124A4                            	include "_anim\obj60.asm"
000124A4                            ; ---------------------------------------------------------------------------
000124A4                            ; Animation script - Orbinaut enemy
000124A4                            ; ---------------------------------------------------------------------------
000124A4 0000                       		dc.w byte_11EDA-Ani_obj60
000124A6 0000                       		dc.w byte_11EDE-Ani_obj60
000124A8 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
000124AC 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
000124B2                            		even
000124B2                            		even
000124B2                            
000124B2                            ; ---------------------------------------------------------------------------
000124B2                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000124B2                            ; ---------------------------------------------------------------------------
000124B2                            Map_obj60:
000124B2                            	include "_maps\obj60.asm"
000124B2                            ; ---------------------------------------------------------------------------
000124B2                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000124B2                            ; ---------------------------------------------------------------------------
000124B2 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
000124B6 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
000124BA 01                         byte_11EEC:	dc.b 1
000124BB F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000124C0 01                         byte_11EF2:	dc.b 1
000124C1 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
000124C6 01                         byte_11EF8:	dc.b 1
000124C7 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000124CC 01                         byte_11EFE:	dc.b 1
000124CD F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
000124D2                            		even
000124D2                            		even
000124D2                            
000124D2                            ; ===========================================================================
000124D2                            ; ---------------------------------------------------------------------------
000124D2                            ; Object 16 - harpoon (LZ)
000124D2                            ; ---------------------------------------------------------------------------
000124D2                            
000124D2                            Obj16:					; XREF: Obj_Index
000124D2 7000                       		moveq	#0,d0
000124D4 1028 0024                  		move.b	$24(a0),d0
000124D8 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
000124DC 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
000124E0                            ; ===========================================================================
000124E0 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
000124E2 0000                       		dc.w Obj16_Move-Obj16_Index
000124E4 0000                       		dc.w Obj16_Wait-Obj16_Index
000124E6                            ; ===========================================================================
000124E6                            
000124E6                            Obj16_Main:				; XREF: Obj16_Index
000124E6 5428 0024                  		addq.b	#2,$24(a0)
000124EA 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
000124F2 317C 03CC 0002             		move.w	#$3CC,2(a0)
000124F8 0028 0004 0001             		ori.b	#4,1(a0)
000124FE 117C 0004 0018             		move.b	#4,$18(a0)
00012504 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0001250A 117C 0014 0019             		move.b	#$14,$19(a0)
00012510 317C 003C 0030             		move.w	#60,$30(a0)
00012516                            
00012516                            Obj16_Move:				; XREF: Obj16_Index
00012516 43F9 0000 0000             		lea	(Ani_obj16).l,a1
0001251C 6100 87A6                  		bsr.w	AnimateSprite
00012520 7000                       		moveq	#0,d0
00012522 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00012526 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
0001252C 6000 D774                  		bra.w	MarkObjGone
00012530                            ; ===========================================================================
00012530 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00012536                            ; ===========================================================================
00012536                            
00012536                            Obj16_Wait:				; XREF: Obj16_Index
00012536 5368 0030                  		subq.w	#1,$30(a0)
0001253A 6A00                       		bpl.s	Obj16_ChkDel
0001253C 317C 003C 0030             		move.w	#60,$30(a0)
00012542 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
00012546 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
0001254C                            
0001254C                            Obj16_ChkDel:
0001254C 6000 D754                  		bra.w	MarkObjGone
00012550                            ; ===========================================================================
00012550                            Ani_obj16:
00012550                            	include "_anim\obj16.asm"
00012550                            ; ---------------------------------------------------------------------------
00012550                            ; Animation script - harpoon (LZ)
00012550                            ; ---------------------------------------------------------------------------
00012550 0000                       		dc.w byte_11F8A-Ani_obj16
00012552 0000                       		dc.w byte_11F8E-Ani_obj16
00012554 0000                       		dc.w byte_11F92-Ani_obj16
00012556 0000                       		dc.w byte_11F96-Ani_obj16
00012558 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
0001255C 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
00012560 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
00012564 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
00012568                            		even
00012568                            		even
00012568                            
00012568                            ; ---------------------------------------------------------------------------
00012568                            ; Sprite mappings - harpoon (LZ)
00012568                            ; ---------------------------------------------------------------------------
00012568                            Map_obj16:
00012568                            	include "_maps\obj16.asm"
00012568                            ; ---------------------------------------------------------------------------
00012568                            ; Sprite mappings - harpoon (LZ)
00012568                            ; ---------------------------------------------------------------------------
00012568 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
0001256C 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
00012570 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00012574 01                         byte_11FA6:	dc.b 1
00012575 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0001257A 01                         byte_11FAC:	dc.b 1
0001257B FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00012580 02                         byte_11FB2:	dc.b 2
00012581 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00012586 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
0001258B 01                         byte_11FBD:	dc.b 1
0001258C F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00012591 01                         byte_11FC3:	dc.b 1
00012592 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00012597 02                         byte_11FC9:	dc.b 2
00012598 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
0001259D F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
000125A2                            		even
000125A2                            		even
000125A2                            
000125A2                            ; ===========================================================================
000125A2                            ; ---------------------------------------------------------------------------
000125A2                            ; Object 61 - blocks (LZ)
000125A2                            ; ---------------------------------------------------------------------------
000125A2                            
000125A2                            Obj61:					; XREF: Obj_Index
000125A2 7000                       		moveq	#0,d0
000125A4 1028 0024                  		move.b	$24(a0),d0
000125A8 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
000125AC 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
000125B0                            ; ===========================================================================
000125B0 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
000125B2 0000                       		dc.w Obj61_Action-Obj61_Index
000125B4                            
000125B4 1010                       Obj61_Var:	dc.b $10, $10		; width, height
000125B6 200C                       		dc.b $20, $C
000125B8 1010                       		dc.b $10, $10
000125BA 1010                       		dc.b $10, $10
000125BC                            ; ===========================================================================
000125BC                            
000125BC                            Obj61_Main:				; XREF: Obj61_Index
000125BC 5428 0024                  		addq.b	#2,$24(a0)
000125C0 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
000125C8 317C 43E6 0002             		move.w	#$43E6,2(a0)
000125CE 117C 0004 0001             		move.b	#4,1(a0)
000125D4 117C 0003 0018             		move.b	#3,$18(a0)
000125DA 7000                       		moveq	#0,d0
000125DC 1028 0028                  		move.b	$28(a0),d0
000125E0 E648                       		lsr.w	#3,d0
000125E2 0240 000E                  		andi.w	#$E,d0
000125E6 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
000125EA 115A 0019                  		move.b	(a2)+,$19(a0)
000125EE 1152 0016                  		move.b	(a2),$16(a0)
000125F2 E248                       		lsr.w	#1,d0
000125F4 1140 001A                  		move.b	d0,$1A(a0)
000125F8 3168 0008 0034             		move.w	8(a0),$34(a0)
000125FE 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012604 1028 0028                  		move.b	$28(a0),d0
00012608 0200 000F                  		andi.b	#$F,d0
0001260C 6700                       		beq.s	Obj61_Action
0001260E 0C00 0007                  		cmpi.b	#7,d0
00012612 6700                       		beq.s	Obj61_Action
00012614 117C 0001 0038             		move.b	#1,$38(a0)
0001261A                            
0001261A                            Obj61_Action:				; XREF: Obj61_Index
0001261A 3F28 0008                  		move.w	8(a0),-(sp)
0001261E 7000                       		moveq	#0,d0
00012620 1028 0028                  		move.b	$28(a0),d0
00012624 0240 000F                  		andi.w	#$F,d0
00012628 D040                       		add.w	d0,d0
0001262A 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
0001262E 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00012632 381F                       		move.w	(sp)+,d4
00012634 4A28 0001                  		tst.b	1(a0)
00012638 6A00                       		bpl.s	Obj61_ChkDel
0001263A 7200                       		moveq	#0,d1
0001263C 1228 0019                  		move.b	$19(a0),d1
00012640 0641 000B                  		addi.w	#$B,d1
00012644 7400                       		moveq	#0,d2
00012646 1428 0016                  		move.b	$16(a0),d2
0001264A 3602                       		move.w	d2,d3
0001264C 5243                       		addq.w	#1,d3
0001264E 6100 D97A                  		bsr.w	SolidObject
00012652 1144 003F                  		move.b	d4,$3F(a0)
00012656 6100 0000                  		bsr.w	loc_12180
0001265A                            
0001265A                            Obj61_ChkDel:
0001265A 3028 0034                  		move.w	$34(a0),d0
0001265E 0240 FF80                  		andi.w	#$FF80,d0
00012662 3238 F700                  		move.w	($FFFFF700).w,d1
00012666 0441 0080                  		subi.w	#$80,d1
0001266A 0241 FF80                  		andi.w	#$FF80,d1
0001266E 9041                       		sub.w	d1,d0
00012670 0C40 0280                  		cmpi.w	#$280,d0
00012674 6200 B5C0                  		bhi.w	DeleteObject
00012678 6000 B580                  		bra.w	DisplaySprite
0001267C                            ; ===========================================================================
0001267C 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012680 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012684 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00012688 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
0001268C                            ; ===========================================================================
0001268C                            
0001268C                            Obj61_Type00:				; XREF: Obj61_TypeIndex
0001268C 4E75                       		rts	
0001268E                            ; ===========================================================================
0001268E                            
0001268E                            Obj61_Type01:				; XREF: Obj61_TypeIndex
0001268E 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00012692 6600                       		bne.s	loc_120D6	; if yes, branch
00012694 0828 0003 0022             		btst	#3,$22(a0)
0001269A 6700                       		beq.s	locret_120D4
0001269C 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
000126A2                            
000126A2                            locret_120D4:
000126A2 4E75                       		rts	
000126A4                            ; ===========================================================================
000126A4                            
000126A4                            loc_120D6:
000126A4 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
000126A8 66F8                       		bne.s	locret_120D4	; if time remains, branch
000126AA 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000126AE 4228 0038                  		clr.b	$38(a0)
000126B2 4E75                       		rts	
000126B4                            ; ===========================================================================
000126B4                            
000126B4                            Obj61_Type02:				; XREF: Obj61_TypeIndex
000126B4 6100 B51E                  		bsr.w	SpeedToPos
000126B8 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
000126BC 6100 0000                  		bsr.w	ObjHitFloor
000126C0 4A41                       		tst.w	d1
000126C2 6A00 0000                  		bpl.w	locret_12106
000126C6 5241                       		addq.w	#1,d1
000126C8 D368 000C                  		add.w	d1,$C(a0)
000126CC 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
000126D0 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
000126D4                            
000126D4                            locret_12106:
000126D4 4E75                       		rts	
000126D6                            ; ===========================================================================
000126D6                            
000126D6                            Obj61_Type04:				; XREF: Obj61_TypeIndex
000126D6 6100 B4FC                  		bsr.w	SpeedToPos
000126DA 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
000126DE 6100 0000                  		bsr.w	ObjHitCeiling
000126E2 4A41                       		tst.w	d1
000126E4 6A00 0000                  		bpl.w	locret_12126
000126E8 9368 000C                  		sub.w	d1,$C(a0)
000126EC 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
000126F0 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
000126F4                            
000126F4                            locret_12126:
000126F4 4E75                       		rts	
000126F6                            ; ===========================================================================
000126F6                            
000126F6                            Obj61_Type05:				; XREF: Obj61_TypeIndex
000126F6 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
000126FC 6600                       		bne.s	locret_12138	; if not, branch
000126FE 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00012702 4228 0038                  		clr.b	$38(a0)
00012706                            
00012706                            locret_12138:
00012706 4E75                       		rts	
00012708                            ; ===========================================================================
00012708                            
00012708                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00012708 3038 F646                  		move.w	($FFFFF646).w,d0
0001270C 9068 000C                  		sub.w	$C(a0),d0
00012710 6700                       		beq.s	locret_1217E
00012712 6400                       		bcc.s	loc_12162
00012714 0C40 FFFE                  		cmpi.w	#-2,d0
00012718 6C00                       		bge.s	loc_1214E
0001271A 70FE                       		moveq	#-2,d0
0001271C                            
0001271C                            loc_1214E:
0001271C D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00012720 6100 0000                  		bsr.w	ObjHitCeiling
00012724 4A41                       		tst.w	d1
00012726 6A00 0000                  		bpl.w	locret_12160
0001272A 9368 000C                  		sub.w	d1,$C(a0)
0001272E                            
0001272E                            locret_12160:
0001272E 4E75                       		rts	
00012730                            ; ===========================================================================
00012730                            
00012730                            loc_12162:				; XREF: Obj61_Type07
00012730 0C40 0002                  		cmpi.w	#2,d0
00012734 6F00                       		ble.s	loc_1216A
00012736 7002                       		moveq	#2,d0
00012738                            
00012738                            loc_1216A:
00012738 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
0001273C 6100 0000                  		bsr.w	ObjHitFloor
00012740 4A41                       		tst.w	d1
00012742 6A00 0000                  		bpl.w	locret_1217E
00012746 5241                       		addq.w	#1,d1
00012748 D368 000C                  		add.w	d1,$C(a0)
0001274C                            
0001274C                            locret_1217E:
0001274C 4E75                       		rts	
0001274E                            ; ===========================================================================
0001274E                            
0001274E                            loc_12180:				; XREF: Obj61_Action
0001274E 4A28 0038                  		tst.b	$38(a0)
00012752 6700                       		beq.s	locret_121C0
00012754 0828 0003 0022             		btst	#3,$22(a0)
0001275A 6600                       		bne.s	loc_1219A
0001275C 4A28 003E                  		tst.b	$3E(a0)
00012760 6700                       		beq.s	locret_121C0
00012762 5928 003E                  		subq.b	#4,$3E(a0)
00012766 6000                       		bra.s	loc_121A6
00012768                            ; ===========================================================================
00012768                            
00012768                            loc_1219A:
00012768 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
0001276E 6700                       		beq.s	locret_121C0
00012770 5828 003E                  		addq.b	#4,$3E(a0)
00012774                            
00012774                            loc_121A6:
00012774 1028 003E                  		move.b	$3E(a0),d0
00012778 4EB9 0000 2C60             		jsr	(CalcSine).l
0001277E 323C 0400                  		move.w	#$400,d1
00012782 C1C1                       		muls.w	d1,d0
00012784 4840                       		swap	d0
00012786 D068 0030                  		add.w	$30(a0),d0
0001278A 3140 000C                  		move.w	d0,$C(a0)
0001278E                            
0001278E                            locret_121C0:
0001278E 4E75                       		rts	
00012790                            ; ===========================================================================
00012790                            ; ---------------------------------------------------------------------------
00012790                            ; Sprite mappings - blocks (LZ)
00012790                            ; ---------------------------------------------------------------------------
00012790                            Map_obj61:
00012790                            	include "_maps\obj61.asm"
00012790                            ; ---------------------------------------------------------------------------
00012790                            ; Sprite mappings - blocks (LZ)
00012790                            ; ---------------------------------------------------------------------------
00012790 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00012794 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00012798 01                         byte_121CA:	dc.b 1
00012799 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001279E 02                         byte_121D0:	dc.b 2
0001279F F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
000127A4 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
000127A9 01                         byte_121DB:	dc.b 1
000127AA F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
000127AF 01                         byte_121E1:	dc.b 1
000127B0 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
000127B6 00                         		even
000127B6 00                         		even
000127B6                            
000127B6                            ; ===========================================================================
000127B6                            ; ---------------------------------------------------------------------------
000127B6                            ; Object 62 - gargoyle head (LZ)
000127B6                            ; ---------------------------------------------------------------------------
000127B6                            
000127B6                            Obj62:					; XREF: Obj_Index
000127B6 7000                       		moveq	#0,d0
000127B8 1028 0024                  		move.b	$24(a0),d0
000127BC 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
000127C0 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
000127C4 6000 D4DC                  		bra.w	MarkObjGone
000127C8                            ; ===========================================================================
000127C8 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
000127CA 0000                       		dc.w Obj62_MakeFire-Obj62_Index
000127CC 0000                       		dc.w Obj62_FireBall-Obj62_Index
000127CE 0000                       		dc.w Obj62_AniFire-Obj62_Index
000127D0                            
000127D0 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
000127D8                            ; ===========================================================================
000127D8                            
000127D8                            Obj62_Main:				; XREF: Obj62_Index
000127D8 5428 0024                  		addq.b	#2,$24(a0)
000127DC 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
000127E4 317C 42E9 0002             		move.w	#$42E9,2(a0)
000127EA 0028 0004 0001             		ori.b	#4,1(a0)
000127F0 117C 0003 0018             		move.b	#3,$18(a0)
000127F6 117C 0010 0019             		move.b	#$10,$19(a0)
000127FC 1028 0028                  		move.b	$28(a0),d0	; get object type
00012800 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012804 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
0001280A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012810 0228 000F 0028             		andi.b	#$F,$28(a0)
00012816                            
00012816                            Obj62_MakeFire:				; XREF: Obj62_Index
00012816 5328 001E                  		subq.b	#1,$1E(a0)
0001281A 6600                       		bne.s	Obj62_NoFire
0001281C 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012822 6100 B650                  		bsr.w	ChkObjOnScreen
00012826 6600                       		bne.s	Obj62_NoFire
00012828 6100 B856                  		bsr.w	SingleObjLoad
0001282C 6600                       		bne.s	Obj62_NoFire
0001282E 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00012832 5829 0024                  		addq.b	#4,$24(a1)
00012836 3368 0008 0008             		move.w	8(a0),8(a1)
0001283C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012842 1368 0001 0001             		move.b	1(a0),1(a1)
00012848 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001284E                            
0001284E                            Obj62_NoFire:
0001284E 4E75                       		rts	
00012850                            ; ===========================================================================
00012850                            
00012850                            Obj62_FireBall:				; XREF: Obj62_Index
00012850 5428 0024                  		addq.b	#2,$24(a0)
00012854 117C 0008 0016             		move.b	#8,$16(a0)
0001285A 117C 0008 0017             		move.b	#8,$17(a0)
00012860 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012868 317C 02E9 0002             		move.w	#$2E9,2(a0)
0001286E 0028 0004 0001             		ori.b	#4,1(a0)
00012874 117C 0004 0018             		move.b	#4,$18(a0)
0001287A 117C 0098 0020             		move.b	#$98,$20(a0)
00012880 117C 0008 0019             		move.b	#8,$19(a0)
00012886 117C 0002 001A             		move.b	#2,$1A(a0)
0001288C 5068 000C                  		addq.w	#8,$C(a0)
00012890 317C 0200 0010             		move.w	#$200,$10(a0)
00012896 0828 0000 0022             		btst	#0,$22(a0)
0001289C 6600                       		bne.s	Obj62_Sound
0001289E 4468 0010                  		neg.w	$10(a0)
000128A2                            
000128A2                            Obj62_Sound:
000128A2 303C 00AE                  		move.w	#$AE,d0
000128A6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lava ball sound
000128AC                            
000128AC                            Obj62_AniFire:				; XREF: Obj62_Index
000128AC 1038 FE05                  		move.b	($FFFFFE05).w,d0
000128B0 0200 0007                  		andi.b	#7,d0
000128B4 6600                       		bne.s	Obj62_StopFire
000128B6 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
000128BC                            
000128BC                            Obj62_StopFire:
000128BC 6100 B316                  		bsr.w	SpeedToPos
000128C0 0828 0000 0022             		btst	#0,$22(a0)
000128C6 6600                       		bne.s	Obj62_StopFire2
000128C8 76F8                       		moveq	#-8,d3
000128CA 6100 0000                  		bsr.w	ObjHitWallLeft
000128CE 4A41                       		tst.w	d1
000128D0 6B00 B364                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
000128D4 4E75                       		rts	
000128D6                            ; ===========================================================================
000128D6                            
000128D6                            Obj62_StopFire2:
000128D6 7608                       		moveq	#8,d3
000128D8 6100 0000                  		bsr.w	ObjHitWallRight
000128DC 4A41                       		tst.w	d1
000128DE 6B00 B356                  		bmi.w	DeleteObject
000128E2 4E75                       		rts	
000128E4                            ; ===========================================================================
000128E4                            ; ---------------------------------------------------------------------------
000128E4                            ; Sprite mappings - gargoyle head (LZ)
000128E4                            ; ---------------------------------------------------------------------------
000128E4                            Map_obj62:
000128E4                            	include "_maps\obj62.asm"
000128E4                            ; ---------------------------------------------------------------------------
000128E4                            ; Sprite mappings - gargoyle head (LZ)
000128E4                            ; ---------------------------------------------------------------------------
000128E4 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
000128E8 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
000128EC 03                         byte_12320:	dc.b 3
000128ED F004 0000 00               		dc.b $F0, 4, 0,	0, 0
000128F2 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
000128F7 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
000128FC 01                         byte_12330:	dc.b 1
000128FD FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012902 01                         byte_12336:	dc.b 1
00012903 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012908                            		even
00012908                            		even
00012908                            
00012908                            ; ===========================================================================
00012908                            ; ---------------------------------------------------------------------------
00012908                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012908                            ; ---------------------------------------------------------------------------
00012908                            
00012908                            Obj63:					; XREF: Obj_Index
00012908 7000                       		moveq	#0,d0
0001290A 1028 0024                  		move.b	$24(a0),d0
0001290E 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00012912 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00012916 3028 0030                  		move.w	$30(a0),d0
0001291A 0240 FF80                  		andi.w	#$FF80,d0
0001291E 3238 F700                  		move.w	($FFFFF700).w,d1
00012922 0441 0080                  		subi.w	#$80,d1
00012926 0241 FF80                  		andi.w	#$FF80,d1
0001292A 9041                       		sub.w	d1,d0
0001292C 0C40 0280                  		cmpi.w	#$280,d0
00012930 6200                       		bhi.s	loc_1236A
00012932                            
00012932                            Obj63_Display:				; XREF: loc_1236A
00012932 6000 B2C6                  		bra.w	DisplaySprite
00012936                            ; ===========================================================================
00012936                            
00012936                            loc_1236A:				; XREF: Obj63
00012936 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
0001293C 6600                       		bne.s	loc_12378
0001293E 0C40 FF80                  		cmpi.w	#-$80,d0
00012942 64EE                       		bcc.s	Obj63_Display
00012944                            
00012944                            loc_12378:
00012944 1028 002F                  		move.b	$2F(a0),d0
00012948 6A00 B2EC                  		bpl.w	DeleteObject
0001294C 0240 007F                  		andi.w	#$7F,d0
00012950 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012954 08B2 0000 0000             		bclr	#0,(a2,d0.w)
0001295A 6000 B2DA                  		bra.w	DeleteObject
0001295E                            ; ===========================================================================
0001295E 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00012960 0000                       		dc.w loc_124B2-Obj63_Index
00012962 0000                       		dc.w loc_124C2-Obj63_Index
00012964 0000                       		dc.w loc_124DE-Obj63_Index
00012966                            ; ===========================================================================
00012966                            
00012966                            Obj63_Main:				; XREF: Obj63_Index
00012966 1028 0028                  		move.b	$28(a0),d0
0001296A 6B00 0000                  		bmi.w	loc_12460
0001296E 5428 0024                  		addq.b	#2,$24(a0)
00012972 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
0001297A 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012980 0028 0004 0001             		ori.b	#4,1(a0)
00012986 117C 0010 0019             		move.b	#$10,$19(a0)
0001298C 117C 0004 0018             		move.b	#4,$18(a0)
00012992 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012998 6600                       		bne.s	loc_123E2
0001299A 5828 0024                  		addq.b	#4,$24(a0)
0001299E 317C 03F6 0002             		move.w	#$3F6,2(a0)
000129A4 117C 0001 0018             		move.b	#1,$18(a0)
000129AA 6000 0000                  		bra.w	loc_124DE
000129AE                            ; ===========================================================================
000129AE                            
000129AE                            loc_123E2:
000129AE 117C 0004 001A             		move.b	#4,$1A(a0)
000129B4 7000                       		moveq	#0,d0
000129B6 1028 0028                  		move.b	$28(a0),d0
000129BA 3200                       		move.w	d0,d1
000129BC E648                       		lsr.w	#3,d0
000129BE 0240 001E                  		andi.w	#$1E,d0
000129C2 45FA 0000                  		lea	Obj63_Data(pc),a2
000129C6 D4F2 0000                  		adda.w	(a2,d0.w),a2
000129CA 315A 0038                  		move.w	(a2)+,$38(a0)
000129CE 315A 0030                  		move.w	(a2)+,$30(a0)
000129D2 214A 003C                  		move.l	a2,$3C(a0)
000129D6 0241 000F                  		andi.w	#$F,d1
000129DA E549                       		lsl.w	#2,d1
000129DC 1141 0038                  		move.b	d1,$38(a0)
000129E0 117C 0004 003A             		move.b	#4,$3A(a0)
000129E6 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000129EA 6700                       		beq.s	loc_1244C
000129EC 117C 0001 003B             		move.b	#1,$3B(a0)
000129F2 4428 003A                  		neg.b	$3A(a0)
000129F6 7200                       		moveq	#0,d1
000129F8 1228 0038                  		move.b	$38(a0),d1
000129FC D228 003A                  		add.b	$3A(a0),d1
00012A00 B228 0039                  		cmp.b	$39(a0),d1
00012A04 6500                       		bcs.s	loc_12448
00012A06 1001                       		move.b	d1,d0
00012A08 7200                       		moveq	#0,d1
00012A0A 4A00                       		tst.b	d0
00012A0C 6A00                       		bpl.s	loc_12448
00012A0E 1228 0039                  		move.b	$39(a0),d1
00012A12 5901                       		subq.b	#4,d1
00012A14                            
00012A14                            loc_12448:
00012A14 1141 0038                  		move.b	d1,$38(a0)
00012A18                            
00012A18                            loc_1244C:
00012A18 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00012A1E 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00012A24 6100 0000                  		bsr.w	Obj63_ChangeDir
00012A28 6000 0000                  		bra.w	loc_124B2
00012A2C                            ; ===========================================================================
00012A2C                            
00012A2C                            loc_12460:				; XREF: Obj63_Main
00012A2C 1140 002F                  		move.b	d0,$2F(a0)
00012A30 0240 007F                  		andi.w	#$7F,d0
00012A34 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012A38 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012A3E 6600 B1F6                  		bne.w	DeleteObject
00012A42 D040                       		add.w	d0,d0
00012A44 0240 001E                  		andi.w	#$1E,d0
00012A48 0640 0070                  		addi.w	#$70,d0
00012A4C 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00012A52 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012A56 321A                       		move.w	(a2)+,d1
00012A58 2248                       		movea.l	a0,a1
00012A5A 6000                       		bra.s	Obj63_MakePtfms
00012A5C                            ; ===========================================================================
00012A5C                            
00012A5C                            Obj63_Loop:
00012A5C 6100 B622                  		bsr.w	SingleObjLoad
00012A60 6600                       		bne.s	loc_124AA
00012A62                            
00012A62                            Obj63_MakePtfms:			; XREF: loc_12460
00012A62 12BC 0063                  		move.b	#$63,0(a1)
00012A66 335A 0008                  		move.w	(a2)+,8(a1)
00012A6A 335A 000C                  		move.w	(a2)+,$C(a1)
00012A6E 301A                       		move.w	(a2)+,d0
00012A70 1340 0028                  		move.b	d0,$28(a1)
00012A74                            
00012A74                            loc_124AA:
00012A74 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012A78                            
00012A78 588F                       		addq.l	#4,sp
00012A7A 4E75                       		rts	
00012A7C                            ; ===========================================================================
00012A7C                            
00012A7C                            loc_124B2:				; XREF: Obj63_Index
00012A7C 7200                       		moveq	#0,d1
00012A7E 1228 0019                  		move.b	$19(a0),d1
00012A82 4EB9 0000 7920             		jsr	(PlatformObject).l
00012A88 6000 0000                  		bra.w	sub_12502
00012A8C                            ; ===========================================================================
00012A8C                            
00012A8C                            loc_124C2:				; XREF: Obj63_Index
00012A8C 7200                       		moveq	#0,d1
00012A8E 1228 0019                  		move.b	$19(a0),d1
00012A92 4EB9 0000 7A94             		jsr	(ExitPlatform).l
00012A98 3F28 0008                  		move.w	8(a0),-(sp)
00012A9C 6100 0000                  		bsr.w	sub_12502
00012AA0 341F                       		move.w	(sp)+,d2
00012AA2 4EF9 0000 7FFE             		jmp	(MvSonicOnPtfm2).l
00012AA8                            ; ===========================================================================
00012AA8                            
00012AA8                            loc_124DE:				; XREF: Obj63_Index
00012AA8 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012AAC 0240 0003                  		andi.w	#3,d0
00012AB0 6600                       		bne.s	loc_124FC
00012AB2 7201                       		moveq	#1,d1
00012AB4 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012AB8 6700                       		beq.s	loc_124F2
00012ABA 4401                       		neg.b	d1
00012ABC                            
00012ABC                            loc_124F2:
00012ABC D328 001A                  		add.b	d1,$1A(a0)
00012AC0 0228 0003 001A             		andi.b	#3,$1A(a0)
00012AC6                            
00012AC6                            loc_124FC:
00012AC6 588F                       		addq.l	#4,sp
00012AC8 6000 D1D8                  		bra.w	MarkObjGone
00012ACC                            
00012ACC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012ACC                            
00012ACC                            
00012ACC                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012ACC 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012AD0 6700                       		beq.s	loc_12520
00012AD2 4A28 003B                  		tst.b	$3B(a0)
00012AD6 6600                       		bne.s	loc_12520
00012AD8 117C 0001 003B             		move.b	#1,$3B(a0)
00012ADE 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012AE4 4428 003A                  		neg.b	$3A(a0)
00012AE8 6000                       		bra.s	loc_12534
00012AEA                            ; ===========================================================================
00012AEA                            
00012AEA                            loc_12520:
00012AEA 3028 0008                  		move.w	8(a0),d0
00012AEE B068 0034                  		cmp.w	$34(a0),d0
00012AF2 6600                       		bne.s	loc_1256A
00012AF4 3028 000C                  		move.w	$C(a0),d0
00012AF8 B068 0036                  		cmp.w	$36(a0),d0
00012AFC 6600                       		bne.s	loc_1256A
00012AFE                            
00012AFE                            loc_12534:
00012AFE 7200                       		moveq	#0,d1
00012B00 1228 0038                  		move.b	$38(a0),d1
00012B04 D228 003A                  		add.b	$3A(a0),d1
00012B08 B228 0039                  		cmp.b	$39(a0),d1
00012B0C 6500                       		bcs.s	loc_12552
00012B0E 1001                       		move.b	d1,d0
00012B10 7200                       		moveq	#0,d1
00012B12 4A00                       		tst.b	d0
00012B14 6A00                       		bpl.s	loc_12552
00012B16 1228 0039                  		move.b	$39(a0),d1
00012B1A 5901                       		subq.b	#4,d1
00012B1C                            
00012B1C                            loc_12552:
00012B1C 1141 0038                  		move.b	d1,$38(a0)
00012B20 2268 003C                  		movea.l	$3C(a0),a1
00012B24 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012B2A 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00012B30 6100 0000                  		bsr.w	Obj63_ChangeDir
00012B34                            
00012B34                            loc_1256A:
00012B34 6100 B09E                  		bsr.w	SpeedToPos
00012B38 4E75                       		rts	
00012B3A                            ; End of function sub_12502
00012B3A                            
00012B3A                            
00012B3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012B3A                            
00012B3A                            
00012B3A                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00012B3A 7000                       		moveq	#0,d0
00012B3C 343C FF00                  		move.w	#-$100,d2
00012B40 3028 0008                  		move.w	8(a0),d0
00012B44 9068 0034                  		sub.w	$34(a0),d0
00012B48 6400                       		bcc.s	loc_12584
00012B4A 4440                       		neg.w	d0
00012B4C 4442                       		neg.w	d2
00012B4E                            
00012B4E                            loc_12584:
00012B4E 7200                       		moveq	#0,d1
00012B50 363C FF00                  		move.w	#-$100,d3
00012B54 3228 000C                  		move.w	$C(a0),d1
00012B58 9268 0036                  		sub.w	$36(a0),d1
00012B5C 6400                       		bcc.s	loc_12598
00012B5E 4441                       		neg.w	d1
00012B60 4443                       		neg.w	d3
00012B62                            
00012B62                            loc_12598:
00012B62 B240                       		cmp.w	d0,d1
00012B64 6500                       		bcs.s	loc_125C2
00012B66 3028 0008                  		move.w	8(a0),d0
00012B6A 9068 0034                  		sub.w	$34(a0),d0
00012B6E 6700                       		beq.s	loc_125AE
00012B70 48C0                       		ext.l	d0
00012B72 E180                       		asl.l	#8,d0
00012B74 81C1                       		divs.w	d1,d0
00012B76 4440                       		neg.w	d0
00012B78                            
00012B78                            loc_125AE:
00012B78 3140 0010                  		move.w	d0,$10(a0)
00012B7C 3143 0012                  		move.w	d3,$12(a0)
00012B80 4840                       		swap	d0
00012B82 3140 000A                  		move.w	d0,$A(a0)
00012B86 4268 000E                  		clr.w	$E(a0)
00012B8A 4E75                       		rts	
00012B8C                            ; ===========================================================================
00012B8C                            
00012B8C                            loc_125C2:				; XREF: Obj63_ChangeDir
00012B8C 3228 000C                  		move.w	$C(a0),d1
00012B90 9268 0036                  		sub.w	$36(a0),d1
00012B94 6700                       		beq.s	loc_125D4
00012B96 48C1                       		ext.l	d1
00012B98 E181                       		asl.l	#8,d1
00012B9A 83C0                       		divs.w	d0,d1
00012B9C 4441                       		neg.w	d1
00012B9E                            
00012B9E                            loc_125D4:
00012B9E 3141 0012                  		move.w	d1,$12(a0)
00012BA2 3142 0010                  		move.w	d2,$10(a0)
00012BA6 4841                       		swap	d1
00012BA8 3141 000E                  		move.w	d1,$E(a0)
00012BAC 4268 000A                  		clr.w	$A(a0)
00012BB0 4E75                       		rts	
00012BB2                            ; End of function Obj63_ChangeDir
00012BB2                            
00012BB2                            ; ===========================================================================
00012BB2 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00012BB4 0000                       		dc.w word_12610-Obj63_Data
00012BB6 0000                       		dc.w word_12628-Obj63_Data
00012BB8 0000                       		dc.w word_1263C-Obj63_Data
00012BBA 0000                       		dc.w word_12650-Obj63_Data
00012BBC 0000                       		dc.w word_12668-Obj63_Data
00012BBE 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012BCE 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012BDA 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012BEA 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00012BF2 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00012C06 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00012C1A 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00012C32 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00012C46                            
00012C46                            ; ---------------------------------------------------------------------------
00012C46                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012C46                            ; ---------------------------------------------------------------------------
00012C46                            Map_obj63:
00012C46                            	include "_maps\obj63.asm"
00012C46                            ; ---------------------------------------------------------------------------
00012C46                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012C46                            ; ---------------------------------------------------------------------------
00012C46 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00012C4A 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00012C4E 0000                       		dc.w byte_1269E-Map_obj63
00012C50 01                         byte_12686:	dc.b 1
00012C51 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012C56 01                         byte_1268C:	dc.b 1
00012C57 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00012C5C 01                         byte_12692:	dc.b 1
00012C5D F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00012C62 01                         byte_12698:	dc.b 1
00012C63 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00012C68 01                         byte_1269E:	dc.b 1
00012C69 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00012C6E                            		even
00012C6E                            		even
00012C6E                            
00012C6E                            ; ===========================================================================
00012C6E                            ; ---------------------------------------------------------------------------
00012C6E                            ; Object 64 - bubbles (LZ)
00012C6E                            ; ---------------------------------------------------------------------------
00012C6E                            
00012C6E                            Obj64:					; XREF: Obj_Index
00012C6E 7000                       		moveq	#0,d0
00012C70 1028 0024                  		move.b	$24(a0),d0
00012C74 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00012C78 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00012C7C                            ; ===========================================================================
00012C7C 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00012C7E 0000                       		dc.w Obj64_Animate-Obj64_Index
00012C80 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00012C82 0000                       		dc.w Obj64_Display2-Obj64_Index
00012C84 0000                       		dc.w Obj64_Delete3-Obj64_Index
00012C86 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00012C88                            ; ===========================================================================
00012C88                            
00012C88                            Obj64_Main:				; XREF: Obj64_Index
00012C88 5428 0024                  		addq.b	#2,$24(a0)
00012C8C 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00012C94 317C 8348 0002             		move.w	#$8348,2(a0)
00012C9A 117C 0084 0001             		move.b	#$84,1(a0)
00012CA0 117C 0010 0019             		move.b	#$10,$19(a0)
00012CA6 117C 0001 0018             		move.b	#1,$18(a0)
00012CAC 1028 0028                  		move.b	$28(a0),d0	; get object type
00012CB0 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00012CB2 5028 0024                  		addq.b	#8,$24(a0)
00012CB6 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00012CBA 1140 0032                  		move.b	d0,$32(a0)
00012CBE 1140 0033                  		move.b	d0,$33(a0)
00012CC2 117C 0006 001C             		move.b	#6,$1C(a0)
00012CC8 6000 0000                  		bra.w	Obj64_BblMaker
00012CCC                            ; ===========================================================================
00012CCC                            
00012CCC                            Obj64_Bubble:				; XREF: Obj64_Main
00012CCC 1140 001C                  		move.b	d0,$1C(a0)
00012CD0 3168 0008 0030             		move.w	8(a0),$30(a0)
00012CD6 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00012CDC 4EB9 0000 2C3A             		jsr	(RandomNumber).l
00012CE2 1140 0026                  		move.b	d0,$26(a0)
00012CE6                            
00012CE6                            Obj64_Animate:				; XREF: Obj64_Index
00012CE6 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012CEC 4EB9 0000 ACC4             		jsr	AnimateSprite
00012CF2 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00012CF8 6600                       		bne.s	Obj64_ChkWater
00012CFA 117C 0001 002E             		move.b	#1,$2E(a0)
00012D00                            
00012D00                            Obj64_ChkWater:				; XREF: Obj64_Index
00012D00 3038 F646                  		move.w	($FFFFF646).w,d0
00012D04 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00012D08 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00012D0A                            
00012D0A                            Obj64_Burst:				; XREF: Obj64_Wobble
00012D0A 117C 0006 0024             		move.b	#6,$24(a0)
00012D10 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00012D14 6000 0000                  		bra.w	Obj64_Display2
00012D18                            ; ===========================================================================
00012D18                            
00012D18                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00012D18 1028 0026                  		move.b	$26(a0),d0
00012D1C 5228 0026                  		addq.b	#1,$26(a0)
00012D20 0240 007F                  		andi.w	#$7F,d0
00012D24 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00012D2A 1031 0000                  		move.b	(a1,d0.w),d0
00012D2E 4880                       		ext.w	d0
00012D30 D068 0030                  		add.w	$30(a0),d0
00012D34 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00012D38 4A28 002E                  		tst.b	$2E(a0)
00012D3C 6700                       		beq.s	Obj64_Display
00012D3E 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00012D42 6700                       		beq.s	Obj64_Display	; if not, branch
00012D44                            
00012D44 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00012D48 303C 00AD                  		move.w	#$AD,d0
00012D4C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00012D52 43F8 D000                  		lea	($FFFFD000).w,a1
00012D56 4269 0010                  		clr.w	$10(a1)
00012D5A 4269 0012                  		clr.w	$12(a1)
00012D5E 4269 0014                  		clr.w	$14(a1)
00012D62 137C 0015 001C             		move.b	#$15,$1C(a1)
00012D68 337C 0023 003E             		move.w	#$23,$3E(a1)
00012D6E 137C 0000 003C             		move.b	#0,$3C(a1)
00012D74 08A9 0005 0022             		bclr	#5,$22(a1)
00012D7A 08A9 0004 0022             		bclr	#4,$22(a1)
00012D80 0829 0002 0022             		btst	#2,$22(a1)
00012D86 6700 FF82                  		beq.w	Obj64_Burst
00012D8A 08A9 0002 0022             		bclr	#2,$22(a1)
00012D90 137C 0013 0016             		move.b	#$13,$16(a1)
00012D96 137C 0009 0017             		move.b	#9,$17(a1)
00012D9C 5B69 000C                  		subq.w	#5,$C(a1)
00012DA0 6000 FF68                  		bra.w	Obj64_Burst
00012DA4                            ; ===========================================================================
00012DA4                            
00012DA4                            Obj64_Display:				; XREF: Obj64_Wobble
00012DA4 6100 AE2E                  		bsr.w	SpeedToPos
00012DA8 4A28 0001                  		tst.b	1(a0)
00012DAC 6A00                       		bpl.s	Obj64_Delete
00012DAE 4EFA AE4A                  		jmp	DisplaySprite
00012DB2                            ; ===========================================================================
00012DB2                            
00012DB2                            Obj64_Delete:
00012DB2 4EFA AE82                  		jmp	DeleteObject
00012DB6                            ; ===========================================================================
00012DB6                            
00012DB6                            Obj64_Display2:				; XREF: Obj64_Index
00012DB6 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012DBC 4EB9 0000 ACC4             		jsr	AnimateSprite
00012DC2 4A28 0001                  		tst.b	1(a0)
00012DC6 6A00                       		bpl.s	Obj64_Delete2
00012DC8 4EFA AE30                  		jmp	DisplaySprite
00012DCC                            ; ===========================================================================
00012DCC                            
00012DCC                            Obj64_Delete2:
00012DCC 4EFA AE68                  		jmp	DeleteObject
00012DD0                            ; ===========================================================================
00012DD0                            
00012DD0                            Obj64_Delete3:				; XREF: Obj64_Index
00012DD0 6000 AE64                  		bra.w	DeleteObject
00012DD4                            ; ===========================================================================
00012DD4                            
00012DD4                            Obj64_BblMaker:				; XREF: Obj64_Index
00012DD4 4A68 0036                  		tst.w	$36(a0)
00012DD8 6600                       		bne.s	loc_12874
00012DDA 3038 F646                  		move.w	($FFFFF646).w,d0
00012DDE B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00012DE2 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00012DE6 4A28 0001                  		tst.b	1(a0)
00012DEA 6A00 0000                  		bpl.w	Obj64_ChkDel
00012DEE 5368 0038                  		subq.w	#1,$38(a0)
00012DF2 6A00 0000                  		bpl.w	loc_12914
00012DF6 317C 0001 0036             		move.w	#1,$36(a0)
00012DFC                            
00012DFC                            loc_1283A:
00012DFC 4EB9 0000 2C3A             		jsr	(RandomNumber).l
00012E02 3200                       		move.w	d0,d1
00012E04 0240 0007                  		andi.w	#7,d0
00012E08 0C40 0006                  		cmpi.w	#6,d0
00012E0C 64EE                       		bcc.s	loc_1283A
00012E0E                            
00012E0E 1140 0034                  		move.b	d0,$34(a0)
00012E12 0241 000C                  		andi.w	#$C,d1
00012E16 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00012E1C D2C1                       		adda.w	d1,a1
00012E1E 2149 003C                  		move.l	a1,$3C(a0)
00012E22 5328 0032                  		subq.b	#1,$32(a0)
00012E26 6A00                       		bpl.s	loc_12872
00012E28 1168 0033 0032             		move.b	$33(a0),$32(a0)
00012E2E 08E8 0007 0036             		bset	#7,$36(a0)
00012E34                            
00012E34                            loc_12872:
00012E34 6000                       		bra.s	loc_1287C
00012E36                            ; ===========================================================================
00012E36                            
00012E36                            loc_12874:				; XREF: Obj64_BblMaker
00012E36 5368 0038                  		subq.w	#1,$38(a0)
00012E3A 6A00 0000                  		bpl.w	loc_12914
00012E3E                            
00012E3E                            loc_1287C:
00012E3E 4EB9 0000 2C3A             		jsr	(RandomNumber).l
00012E44 0240 001F                  		andi.w	#$1F,d0
00012E48 3140 0038                  		move.w	d0,$38(a0)
00012E4C 6100 B232                  		bsr.w	SingleObjLoad
00012E50 6600                       		bne.s	loc_128F8
00012E52 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
00012E56 3368 0008 0008             		move.w	8(a0),8(a1)
00012E5C 4EB9 0000 2C3A             		jsr	(RandomNumber).l
00012E62 0240 000F                  		andi.w	#$F,d0
00012E66 5140                       		subq.w	#8,d0
00012E68 D169 0008                  		add.w	d0,8(a1)
00012E6C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012E72 7000                       		moveq	#0,d0
00012E74 1028 0034                  		move.b	$34(a0),d0
00012E78 2468 003C                  		movea.l	$3C(a0),a2
00012E7C 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00012E82 0828 0007 0036             		btst	#7,$36(a0)
00012E88 6700                       		beq.s	loc_128F8
00012E8A 4EB9 0000 2C3A             		jsr	(RandomNumber).l
00012E90 0240 0003                  		andi.w	#3,d0
00012E94 6600                       		bne.s	loc_128E4
00012E96 08E8 0006 0036             		bset	#6,$36(a0)
00012E9C 6600                       		bne.s	loc_128F8
00012E9E 137C 0002 0028             		move.b	#2,$28(a1)
00012EA4                            
00012EA4                            loc_128E4:
00012EA4 4A28 0034                  		tst.b	$34(a0)
00012EA8 6600                       		bne.s	loc_128F8
00012EAA 08E8 0006 0036             		bset	#6,$36(a0)
00012EB0 6600                       		bne.s	loc_128F8
00012EB2 137C 0002 0028             		move.b	#2,$28(a1)
00012EB8                            
00012EB8                            loc_128F8:
00012EB8 5328 0034                  		subq.b	#1,$34(a0)
00012EBC 6A00                       		bpl.s	loc_12914
00012EBE 4EB9 0000 2C3A             		jsr	(RandomNumber).l
00012EC4 0240 007F                  		andi.w	#$7F,d0
00012EC8 0640 0080                  		addi.w	#$80,d0
00012ECC D168 0038                  		add.w	d0,$38(a0)
00012ED0 4268 0036                  		clr.w	$36(a0)
00012ED4                            
00012ED4                            loc_12914:
00012ED4 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012EDA 4EB9 0000 ACC4             		jsr	AnimateSprite
00012EE0                            
00012EE0                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00012EE0 3028 0008                  		move.w	8(a0),d0
00012EE4 0240 FF80                  		andi.w	#$FF80,d0
00012EE8 3238 F700                  		move.w	($FFFFF700).w,d1
00012EEC 0441 0080                  		subi.w	#$80,d1
00012EF0 0241 FF80                  		andi.w	#$FF80,d1
00012EF4 9041                       		sub.w	d1,d0
00012EF6 0C40 0280                  		cmpi.w	#$280,d0
00012EFA 6200 AD3A                  		bhi.w	DeleteObject
00012EFE 3038 F646                  		move.w	($FFFFF646).w,d0
00012F02 B068 000C                  		cmp.w	$C(a0),d0
00012F06 6500 ACF2                  		bcs.w	DisplaySprite
00012F0A 4E75                       		rts	
00012F0C                            ; ===========================================================================
00012F0C                            ; bubble production sequence
00012F0C                            
00012F0C                            ; 0 = small bubble, 1 =	large bubble
00012F0C                            
00012F0C 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00012F1E                            
00012F1E                            ; ===========================================================================
00012F1E                            
00012F1E                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00012F1E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00012F22 6B00                       		bmi.s	loc_12998
00012F24 43F8 D000                  		lea	($FFFFD000).w,a1
00012F28 3029 0008                  		move.w	8(a1),d0
00012F2C 3228 0008                  		move.w	8(a0),d1
00012F30 0441 0010                  		subi.w	#$10,d1
00012F34 B240                       		cmp.w	d0,d1
00012F36 6400                       		bcc.s	loc_12998
00012F38 0641 0020                  		addi.w	#$20,d1
00012F3C B240                       		cmp.w	d0,d1
00012F3E 6500                       		bcs.s	loc_12998
00012F40 3029 000C                  		move.w	$C(a1),d0
00012F44 3228 000C                  		move.w	$C(a0),d1
00012F48 B240                       		cmp.w	d0,d1
00012F4A 6400                       		bcc.s	loc_12998
00012F4C 0641 0010                  		addi.w	#$10,d1
00012F50 B240                       		cmp.w	d0,d1
00012F52 6500                       		bcs.s	loc_12998
00012F54 7001                       		moveq	#1,d0
00012F56 4E75                       		rts	
00012F58                            ; ===========================================================================
00012F58                            
00012F58                            loc_12998:
00012F58 7000                       		moveq	#0,d0
00012F5A 4E75                       		rts	
00012F5C                            ; ===========================================================================
00012F5C                            Ani_obj64:
00012F5C                            	include "_anim\obj64.asm"
00012F5C                            ; ---------------------------------------------------------------------------
00012F5C                            ; Animation script - bubbles (LZ)
00012F5C                            ; ---------------------------------------------------------------------------
00012F5C 0000                       		dc.w byte_129AA-Ani_obj64
00012F5E 0000                       		dc.w byte_129B0-Ani_obj64
00012F60 0000                       		dc.w byte_129B6-Ani_obj64
00012F62 0000                       		dc.w byte_129BE-Ani_obj64
00012F64 0000                       		dc.w byte_129BE-Ani_obj64
00012F66 0000                       		dc.w byte_129C0-Ani_obj64
00012F68 0000                       		dc.w byte_129C6-Ani_obj64
00012F6A 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00012F70 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00012F76 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00012F7E 04FC                       byte_129BE:	dc.b 4,	$FC
00012F80 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00012F86 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00012F8C 00                         		even
00012F8C 00                         		even
00012F8C                            
00012F8C                            ; ---------------------------------------------------------------------------
00012F8C                            ; Sprite mappings - bubbles (LZ)
00012F8C                            ; ---------------------------------------------------------------------------
00012F8C                            Map_obj64:
00012F8C                            	include "_maps\obj64.asm"
00012F8C                            ; ---------------------------------------------------------------------------
00012F8C                            ; Sprite mappings - bubbles (LZ)
00012F8C                            ; ---------------------------------------------------------------------------
00012F8C 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00012F90 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00012F94 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00012F98 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00012F9C 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00012FA0 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00012FA4 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00012FA8 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00012FAC 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00012FB0 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00012FB4 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00012FB8 0000                       		dc.w byte_12A9C-Map_obj64
00012FBA 01                         byte_129FA:	dc.b 1
00012FBB FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00012FC0 01                         byte_12A00:	dc.b 1
00012FC1 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00012FC6 01                         byte_12A06:	dc.b 1
00012FC7 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00012FCC 01                         byte_12A0C:	dc.b 1
00012FCD F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00012FD2 01                         byte_12A12:	dc.b 1
00012FD3 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00012FD8 01                         byte_12A18:	dc.b 1
00012FD9 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00012FDE 01                         byte_12A1E:	dc.b 1
00012FDF F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00012FE4 04                         byte_12A24:	dc.b 4
00012FE5 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00012FEA F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00012FEF 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00012FF4 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00012FF9 04                         byte_12A39:	dc.b 4
00012FFA F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00012FFF F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00013004 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00013009 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
0001300E 01                         byte_12A4E:	dc.b 1
0001300F F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00013014 01                         byte_12A54:	dc.b 1
00013015 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
0001301A 01                         byte_12A5A:	dc.b 1
0001301B F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00013020 01                         byte_12A60:	dc.b 1
00013021 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00013026 01                         byte_12A66:	dc.b 1
00013027 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
0001302C 01                         byte_12A6C:	dc.b 1
0001302D F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00013032 01                         byte_12A72:	dc.b 1
00013033 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00013038 01                         byte_12A78:	dc.b 1
00013039 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
0001303E 01                         byte_12A7E:	dc.b 1
0001303F F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00013044 01                         byte_12A84:	dc.b 1
00013045 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
0001304A 01                         byte_12A8A:	dc.b 1
0001304B F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00013050 01                         byte_12A90:	dc.b 1
00013051 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00013056 01                         byte_12A96:	dc.b 1
00013057 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
0001305C 00                         byte_12A9C:	dc.b 0
0001305E 00                         		even
0001305E 00                         		even
0001305E                            
0001305E                            ; ===========================================================================
0001305E                            ; ---------------------------------------------------------------------------
0001305E                            ; Object 65 - waterfalls (LZ)
0001305E                            ; ---------------------------------------------------------------------------
0001305E                            
0001305E                            Obj65:					; XREF: Obj_Index
0001305E 7000                       		moveq	#0,d0
00013060 1028 0024                  		move.b	$24(a0),d0
00013064 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00013068 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
0001306C                            ; ===========================================================================
0001306C 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
0001306E 0000                       		dc.w Obj65_Animate-Obj65_Index
00013070 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00013072 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00013074 0000                       		dc.w loc_12B36-Obj65_Index
00013076                            ; ===========================================================================
00013076                            
00013076                            Obj65_Main:				; XREF: Obj65_Index
00013076 5828 0024                  		addq.b	#4,$24(a0)
0001307A 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00013082 317C 4259 0002             		move.w	#$4259,2(a0)
00013088 0028 0004 0001             		ori.b	#4,1(a0)
0001308E 117C 0018 0019             		move.b	#$18,$19(a0)
00013094 117C 0001 0018             		move.b	#1,$18(a0)
0001309A 1028 0028                  		move.b	$28(a0),d0	; get object type
0001309E 6A00                       		bpl.s	loc_12AE6
000130A0 08E8 0007 0002             		bset	#7,2(a0)
000130A6                            
000130A6                            loc_12AE6:
000130A6 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
000130AA 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
000130AE 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
000130B2 6600                       		bne.s	Obj65_ChkDel	; if not, branch
000130B4 4228 0018                  		clr.b	$18(a0)
000130B8 5528 0024                  		subq.b	#2,$24(a0)
000130BC 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
000130C2 6700                       		beq.s	loc_12B0A	; if not, branch
000130C4 117C 0006 0024             		move.b	#6,$24(a0)
000130CA                            
000130CA                            loc_12B0A:
000130CA 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
000130D0 6700                       		beq.s	Obj65_Animate	; if not, branch
000130D2 117C 0008 0024             		move.b	#8,$24(a0)
000130D8                            
000130D8                            Obj65_Animate:				; XREF: Obj65_Index
000130D8 43F9 0000 0000             		lea	(Ani_obj65).l,a1
000130DE 4EB9 0000 ACC4             		jsr	AnimateSprite
000130E4                            
000130E4                            Obj65_ChkDel:				; XREF: Obj65_Index
000130E4 6000 CBBC                  		bra.w	MarkObjGone
000130E8                            ; ===========================================================================
000130E8                            
000130E8                            Obj65_FixHeight:			; XREF: Obj65_Index
000130E8 3038 F646                  		move.w	($FFFFF646).w,d0
000130EC 0440 0010                  		subi.w	#$10,d0
000130F0 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
000130F4 60E2                       		bra.s	Obj65_Animate
000130F6                            ; ===========================================================================
000130F6                            
000130F6                            loc_12B36:				; XREF: Obj65_Index
000130F6 08A8 0007 0002             		bclr	#7,2(a0)
000130FC 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00013102 6600                       		bne.s	Obj65_Animate2
00013104 08E8 0007 0002             		bset	#7,2(a0)
0001310A                            
0001310A                            Obj65_Animate2:
0001310A 60CC                       		bra.s	Obj65_Animate
0001310C                            ; ===========================================================================
0001310C                            Ani_obj65:
0001310C                            	include "_anim\obj65.asm"
0001310C                            ; ---------------------------------------------------------------------------
0001310C                            ; Animation script - waterfall (LZ)
0001310C                            ; ---------------------------------------------------------------------------
0001310C 0000                       		dc.w byte_12B4E-Ani_obj65
0001310E 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00013114 00                         		even
00013114 00                         		even
00013114                            
00013114                            ; ---------------------------------------------------------------------------
00013114                            ; Sprite mappings - waterfalls (LZ)
00013114                            ; ---------------------------------------------------------------------------
00013114                            Map_obj65:
00013114                            	include "_maps\obj65.asm"
00013114                            ; ---------------------------------------------------------------------------
00013114                            ; Sprite mappings - waterfalls (LZ)
00013114                            ; ---------------------------------------------------------------------------
00013114 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00013118 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
0001311C 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00013120 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00013124 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00013128 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
0001312C 01                         byte_12B6C:	dc.b 1
0001312D F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00013132 02                         byte_12B72:	dc.b 2
00013133 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00013138 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
0001313D 02                         byte_12B7D:	dc.b 2
0001313E F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013143 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00013148 01                         byte_12B88:	dc.b 1
00013149 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
0001314E 02                         byte_12B8E:	dc.b 2
0001314F F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013154 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00013159 01                         byte_12B99:	dc.b 1
0001315A F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
0001315F 01                         byte_12B9F:	dc.b 1
00013160 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00013165 01                         byte_12BA5:	dc.b 1
00013166 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
0001316B 02                         byte_12BAB:	dc.b 2
0001316C F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00013171 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00013176 02                         byte_12BB6:	dc.b 2
00013177 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
0001317C F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00013181 02                         byte_12BC1:	dc.b 2
00013182 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00013187 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
0001318C 02                         byte_12BCC:	dc.b 2
0001318D F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00013192 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00013198 00                         		even
00013198 00                         		even
00013198                            
00013198                            ; ===========================================================================
00013198                            ; ---------------------------------------------------------------------------
00013198                            ; Object 01 - Sonic
00013198                            ; ---------------------------------------------------------------------------
00013198                            
00013198                            Obj01:					; XREF: Obj_Index
00013198 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001319C 6700                       		beq.s	Obj01_Normal	; if not, branch
0001319E 4EF9 0000 0000             		jmp	DebugMode
000131A4                            ; ===========================================================================
000131A4                            
000131A4                            Obj01_Normal:
000131A4 7000                       		moveq	#0,d0
000131A6 1028 0024                  		move.b	$24(a0),d0
000131AA 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
000131AE 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
000131B2                            ; ===========================================================================
000131B2 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
000131B4 0000                       		dc.w Obj01_Control-Obj01_Index
000131B6 0000                       		dc.w Obj01_Hurt-Obj01_Index
000131B8 0000                       		dc.w Obj01_Death-Obj01_Index
000131BA 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
000131BC                            ; ===========================================================================
000131BC                            
000131BC                            Player_Maps:
000131BC 0000 0000                  	dc.l	Map_Sonic
000131C0 0000 0000                  	dc.l	Map_Sonic ; gronic
000131C4                            	; insert player mapping here
000131C4                            	
000131C4                            Obj01_Main:				; XREF: Obj01_Index
000131C4 5428 0024                  		addq.b	#2,$24(a0)
000131C8 117C 0013 0016             		move.b	#$13,$16(a0)
000131CE 117C 0009 0017             		move.b	#9,$17(a0)
000131D4                            		
000131D4 7000                       		moveq	#0,d0
000131D6 1038 FFE8                  		move.b	(v_character),d0
000131DA E548                       		lsl.w	#2,d0
000131DC 43FA FFDE                  		lea 	Player_Maps(pc),a1
000131E0 2171 0000 0004             		move.l	(a1,d0.w),4(a0)	; load Map patterns
000131E6                            		
000131E6 317C 0780 0002             		move.w	#$780,2(a0)
000131EC 117C 0002 0018             		move.b	#2,$18(a0)
000131F2 117C 0018 0019             		move.b	#$18,$19(a0)
000131F8 117C 0004 0001             		move.b	#4,1(a0)
000131FE 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
00013204 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
0001320A 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
00013210                            
00013210                            Obj01_Control:				; XREF: Obj01_Index
00013210 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00013214 6700                       		beq.s	loc_12C58	; if not, branch
00013216 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
0001321C 6700                       		beq.s	loc_12C58	; if not, branch
0001321E 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00013224 4238 F7CC                  		clr.b	($FFFFF7CC).w
00013228 4E75                       		rts	
0001322A                            ; ===========================================================================
0001322A                            
0001322A                            loc_12C58:
0001322A 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
0001322E 6600                       		bne.s	loc_12C64	; if yes, branch
00013230 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00013236                            
00013236                            loc_12C64:
00013236 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
0001323C 6600                       		bne.s	loc_12C7E	; if yes, branch
0001323E 7000                       		moveq	#0,d0
00013240 1028 0022                  		move.b	$22(a0),d0
00013244 0240 0006                  		andi.w	#6,d0
00013248 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
0001324C 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00013250                            
00013250                            loc_12C7E:
00013250 6100                       		bsr.s	Sonic_Display
00013252 6100 0000                  		bsr.w	Sonic_RecordPos
00013256 6100 0000                  		bsr.w	Sonic_Water
0001325A 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00013260 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00013266 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0001326A 6700                       		beq.s	loc_12CA6
0001326C 4A28 001C                  		tst.b	$1C(a0)
00013270 6600                       		bne.s	loc_12CA6
00013272 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00013278                            
00013278                            loc_12CA6:
00013278 6100 0000                  		bsr.w	Sonic_Animate
0001327C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013280 6B00                       		bmi.s	loc_12CB6
00013282 4EB9 0000 0000             		jsr	TouchResponse
00013288                            
00013288                            loc_12CB6:
00013288 6100 0000                  		bsr.w	Sonic_Loops
0001328C 6100 0000                  		bsr.w	LoadSonicDynPLC
00013290 4E75                       		rts	
00013292                            ; ===========================================================================
00013292 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
00013294 0000                       		dc.w Obj01_MdJump-Obj01_Modes
00013296 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
00013298 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
0001329A                            ; ---------------------------------------------------------------------------
0001329A                            ; Music	to play	after invincibility wears off
0001329A                            ; ---------------------------------------------------------------------------
0001329A                            ; ===========================================================================
0001329A                            
0001329A                            Sonic_Display:				; XREF: loc_12C7E
0001329A 3028 0030                  		move.w	$30(a0),d0
0001329E 6700                       		beq.s	Obj01_Display
000132A0 5368 0030                  		subq.w	#1,$30(a0)
000132A4 E648                       		lsr.w	#3,d0
000132A6 6400                       		bcc.s	Obj01_ChkInvin
000132A8                            
000132A8                            Obj01_Display:
000132A8 4EBA A950                  		jsr	DisplaySprite
000132AC                            
000132AC                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
000132AC                             
000132AC                            Obj01_ChkInvin:
000132AC 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000132B0 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
000132B4 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
000132B8 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
000132BC 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
000132C0 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
000132C4 4A38 F7AA                  		tst.b	($FFFFF7AA).w
000132C8 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
000132CC 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
000132D2 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
000132D6 7000                       		moveq	#0,d0
000132D8 1038 FE10                  		move.b	($FFFFFE10).w,d0
000132DC                             
000132DC 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
000132E2 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
000132E4 43F9 0000 3B00             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
000132EA 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
000132EC                             
000132EC                            Obj01_GetBgm2:
000132EC 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
000132F2 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
000132F4 43F9 0000 3B08             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
000132FA 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
000132FC                             
000132FC                            Obj01_GetBgm3:
000132FC 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00013302 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
00013304 43F9 0000 3B0E             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
0001330A 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
0001330C                             
0001330C                            Obj01_GetBgm4:
0001330C 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00013312 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
00013314 43F9 0000 3B14             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
0001331A                             
0001331A                            Obj01_PlayMusic:
0001331A 1031 0000                  		move.b	(a1,d0.w),d0
0001331E 4EB9 0000 15B6             		jsr	(PlaySound).l	; play normal music
00013324                             
00013324                            ; NineKode ends here.
00013324                            
00013324                            Obj01_RmvInvin:
00013324 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
0001332A                            
0001332A                            Obj01_ChkShoes:
0001332A 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
0001332E 6700                       		beq.s	Obj01_ExitChk	; if not, branch
00013330 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00013334 6700                       		beq.s	Obj01_ExitChk
00013336 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
0001333A 6600                       		bne.s	Obj01_ExitChk
0001333C 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013342 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013348 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
0001334E 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
00013354 303C 00E3                  		move.w	#$E3,d0
00013358 4EF9 0000 15B6             		jmp	(PlaySound).l	; run music at normal speed
0001335E                            ; ===========================================================================
0001335E                            
0001335E                            Obj01_ExitChk:
0001335E 4E75                       		rts	
00013360                            
00013360                            ; ---------------------------------------------------------------------------
00013360                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00013360                            ; ---------------------------------------------------------------------------
00013360                            
00013360                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013360                            
00013360                            
00013360                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
00013360 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00013364 43F8 CB00                  		lea	($FFFFCB00).w,a1
00013368 43F1 0000                  		lea	(a1,d0.w),a1
0001336C 32E8 0008                  		move.w	8(a0),(a1)+
00013370 32E8 000C                  		move.w	$C(a0),(a1)+
00013374 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
00013378 4E75                       		rts	
0001337A                            ; End of function Sonic_RecordPos
0001337A                            
0001337A                            ; ---------------------------------------------------------------------------
0001337A                            ; Subroutine for Sonic when he's underwater
0001337A                            ; ---------------------------------------------------------------------------
0001337A                            
0001337A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001337A                            
0001337A                            
0001337A                            Sonic_Water:				; XREF: loc_12C7E
0001337A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00013380 6700                       		beq.s	Obj01_InWater	; if yes, branch
00013382                            
00013382                            locret_12D80:
00013382 4E75                       		rts	
00013384                            ; ===========================================================================
00013384                            
00013384                            Obj01_InWater:
00013384 3038 F646                  		move.w	($FFFFF646).w,d0
00013388 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
0001338C 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
0001338E 08E8 0006 0022             		bset	#6,$22(a0)
00013394 66EC                       		bne.s	locret_12D80
00013396 6100 0000                  		bsr.w	ResumeMusic
0001339A 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
000133A0 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
000133A6 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
000133AC 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
000133B2 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
000133B8 E0E8 0010                  		asr	$10(a0)
000133BC E0E8 0012                  		asr	$12(a0)
000133C0 E0E8 0012                  		asr	$12(a0)
000133C4 67BC                       		beq.s	locret_12D80
000133C6 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
000133CC 303C 00AA                  		move.w	#$AA,d0
000133D0 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play splash sound
000133D6                            ; ===========================================================================
000133D6                            
000133D6                            Obj01_OutWater:
000133D6 08A8 0006 0022             		bclr	#6,$22(a0)
000133DC 67A4                       		beq.s	locret_12D80
000133DE 6100 0000                  		bsr.w	ResumeMusic
000133E2 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000133E8 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000133EE 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000133F4 E1E8 0012                  		asl	$12(a0)
000133F8 6700 FF88                  		beq.w	locret_12D80
000133FC 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013402 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00013408 6E00                       		bgt.s	loc_12E0E
0001340A 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00013410                            
00013410                            loc_12E0E:
00013410 303C 00AA                  		move.w	#$AA,d0
00013414 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play splash sound
0001341A                            ; End of function Sonic_Water
0001341A                            
0001341A                            ; ===========================================================================
0001341A                            ; ---------------------------------------------------------------------------
0001341A                            ; Modes	for controlling	Sonic
0001341A                            ; ---------------------------------------------------------------------------
0001341A                            
0001341A                            Obj01_MdNormal:				; XREF: Obj01_Modes
0001341A 6100 0000                  		bsr.w	Sonic_Jump
0001341E 6100 0000                  		bsr.w	Sonic_SlopeResist
00013422 6100 0000                  		bsr.w	Sonic_Move
00013426 6100 0000                  		bsr.w	Sonic_Roll
0001342A 6100 0000                  		bsr.w	Sonic_LevelBound
0001342E 4EBA A7A4                  		jsr	SpeedToPos
00013432 6100 0000                  		bsr.w	Sonic_AnglePos
00013436 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001343A 4E75                       		rts	
0001343C                            ; ===========================================================================
0001343C                            
0001343C                            Obj01_MdJump:				; XREF: Obj01_Modes
0001343C 6100 0000                  		bsr.w	Sonic_JumpHeight
00013440 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013444 6100 0000                  		bsr.w	Sonic_LevelBound
00013448 4EBA A75E                  		jsr	ObjectFall
0001344C 0828 0006 0022             		btst	#6,$22(a0)
00013452 6700                       		beq.s	loc_12E5C
00013454 0468 0028 0012             		subi.w	#$28,$12(a0)
0001345A                            
0001345A                            loc_12E5C:
0001345A 6100 0000                  		bsr.w	Sonic_JumpAngle
0001345E 6100 0000                  		bsr.w	Sonic_Floor
00013462 4E75                       		rts	
00013464                            ; ===========================================================================
00013464                            
00013464                            Obj01_MdRoll:				; XREF: Obj01_Modes
00013464 6100 0000                  		bsr.w	Sonic_Jump
00013468 6100 0000                  		bsr.w	Sonic_RollRepel
0001346C 6100 0000                  		bsr.w	Sonic_RollSpeed
00013470 6100 0000                  		bsr.w	Sonic_LevelBound
00013474 4EBA A75E                  		jsr	SpeedToPos
00013478 6100 0000                  		bsr.w	Sonic_AnglePos
0001347C 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013480 4E75                       		rts	
00013482                            ; ===========================================================================
00013482                            
00013482                            Obj01_MdJump2:				; XREF: Obj01_Modes
00013482 6100 0000                  		bsr.w	Sonic_JumpHeight
00013486 6100 0000                  		bsr.w	Sonic_ChgJumpDir
0001348A 6100 0000                  		bsr.w	Sonic_LevelBound
0001348E 6100 0000                  		bsr.w	Sonic_AirUnroll
00013492 4EBA A714                  		jsr	ObjectFall
00013496 0828 0006 0022             		btst	#6,$22(a0)
0001349C 6700                       		beq.s	loc_12EA6
0001349E 0468 0028 0012             		subi.w	#$28,$12(a0)
000134A4                            
000134A4                            loc_12EA6:
000134A4 6100 0000                  		bsr.w	Sonic_JumpAngle
000134A8 6100 0000                  		bsr.w	Sonic_Floor
000134AC 4E75                       		rts	
000134AE                            ; ---------------------------------------------------------------------------
000134AE                            ; Subroutine to	make Sonic walk/run
000134AE                            ; ---------------------------------------------------------------------------
000134AE                            
000134AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000134AE                            
000134AE                            
000134AE                            Sonic_Move:				; XREF: Obj01_MdNormal
000134AE 3C38 F760                  		move.w	($FFFFF760).w,d6
000134B2 3A38 F762                  		move.w	($FFFFF762).w,d5
000134B6 3838 F764                  		move.w	($FFFFF764).w,d4
000134BA 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000134BE 6600 0000                  		bne.w	loc_12FEE
000134C2 4A68 003E                  		tst.w	$3E(a0)
000134C6 6600 0000                  		bne.w	Obj01_ResetScr
000134CA 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000134D0 6700                       		beq.s	Obj01_NotLeft	; if not, branch
000134D2 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000134D8 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
000134DA 6100 0000                  		bsr.w	Sonic_MoveLeft
000134DE                            
000134DE                            Obj01_NotLeft:
000134DE 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000134E4 6700                       		beq.s	Obj01_NotRight	; if not, branch
000134E6 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000134EC 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
000134EE 6100 0000                  		bsr.w	Sonic_MoveLeft
000134F2 6000                       		bra.s	Obj01_NotRight
000134F4                            
000134F4                            Obj01_MoveRight:
000134F4 6100 0000                  		bsr.w	Sonic_MoveRight
000134F8                            
000134F8                            Obj01_NotRight:
000134F8 1028 0026                  		move.b	$26(a0),d0
000134FC 0600 0020                  		addi.b	#$20,d0
00013500 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00013504 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013508 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
0001350C 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013510 08A8 0005 0022             		bclr	#5,$22(a0)
00013516 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
0001351C 0828 0003 0022             		btst	#3,$22(a0)
00013522 6700                       		beq.s	Sonic_Balance
00013524 7000                       		moveq	#0,d0
00013526 1028 003D                  		move.b	$3D(a0),d0
0001352A ED48                       		lsl.w	#6,d0
0001352C 43F8 D000                  		lea	($FFFFD000).w,a1
00013530 43F1 0000                  		lea	(a1,d0.w),a1
00013534 4A29 0022                  		tst.b	$22(a1)
00013538 6B00                       		bmi.s	Sonic_LookUp
0001353A 7200                       		moveq	#0,d1
0001353C 1229 0019                  		move.b	$19(a1),d1
00013540 3401                       		move.w	d1,d2
00013542 D442                       		add.w	d2,d2
00013544 5942                       		subq.w	#4,d2
00013546 D268 0008                  		add.w	8(a0),d1
0001354A 9269 0008                  		sub.w	8(a1),d1
0001354E 0C41 0004                  		cmpi.w	#4,d1
00013552 6D00                       		blt.s	loc_12F6A
00013554 B242                       		cmp.w	d2,d1
00013556 6C00                       		bge.s	loc_12F5A
00013558 6000                       		bra.s	Sonic_LookUp
0001355A                            ; ===========================================================================
0001355A                            
0001355A                            Sonic_Balance:
0001355A 4EB9 0000 0000             		jsr	ObjHitFloor
00013560 0C41 000C                  		cmpi.w	#$C,d1
00013564 6D00                       		blt.s	Sonic_LookUp
00013566 0C28 0003 0036             		cmpi.b	#3,$36(a0)
0001356C 6600                       		bne.s	loc_12F62
0001356E                            
0001356E                            loc_12F5A:
0001356E 08A8 0000 0022             		bclr	#0,$22(a0)
00013574 6000                       		bra.s	loc_12F70
00013576                            ; ===========================================================================
00013576                            
00013576                            loc_12F62:
00013576 0C28 0003 0037             		cmpi.b	#3,$37(a0)
0001357C 6600                       		bne.s	Sonic_LookUp
0001357E                            
0001357E                            loc_12F6A:
0001357E 08E8 0000 0022             		bset	#0,$22(a0)
00013584                            
00013584                            loc_12F70:
00013584 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
0001358A 6000                       		bra.s	Obj01_ResetScr
0001358C                            ; ===========================================================================
0001358C                            
0001358C                            Sonic_LookUp:
0001358C 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00013592 6700                       		beq.s	Sonic_Duck	; if not, branch
00013594 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
0001359A 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
000135A0 6700                       		beq.s	loc_12FC2
000135A2 5478 F73E                  		addq.w	#2,($FFFFF73E).w
000135A6 6000                       		bra.s	loc_12FC2
000135A8                            ; ===========================================================================
000135A8                            
000135A8                            Sonic_Duck:
000135A8 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000135AE 6700                       		beq.s	Obj01_ResetScr	; if not, branch
000135B0 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
000135B6 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
000135BC 6700                       		beq.s	loc_12FC2
000135BE 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000135C2 6000                       		bra.s	loc_12FC2
000135C4                            ; ===========================================================================
000135C4                            
000135C4                            Obj01_ResetScr:
000135C4 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
000135CA 6700                       		beq.s	loc_12FC2	; if yes, branch
000135CC 6400                       		bcc.s	loc_12FBE
000135CE 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
000135D2                            
000135D2                            loc_12FBE:
000135D2 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
000135D6                            
000135D6                            loc_12FC2:
000135D6 1038 F602                  		move.b	($FFFFF602).w,d0
000135DA 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
000135DE 6600                       		bne.s	loc_12FEE	; if yes, branch
000135E0 3028 0014                  		move.w	$14(a0),d0
000135E4 6700                       		beq.s	loc_12FEE
000135E6 6B00                       		bmi.s	loc_12FE2
000135E8 9045                       		sub.w	d5,d0
000135EA 6400                       		bcc.s	loc_12FDC
000135EC 303C 0000                  		move.w	#0,d0
000135F0                            
000135F0                            loc_12FDC:
000135F0 3140 0014                  		move.w	d0,$14(a0)
000135F4 6000                       		bra.s	loc_12FEE
000135F6                            ; ===========================================================================
000135F6                            
000135F6                            loc_12FE2:
000135F6 D045                       		add.w	d5,d0
000135F8 6400                       		bcc.s	loc_12FEA
000135FA 303C 0000                  		move.w	#0,d0
000135FE                            
000135FE                            loc_12FEA:
000135FE 3140 0014                  		move.w	d0,$14(a0)
00013602                            
00013602                            loc_12FEE:
00013602 1028 0026                  		move.b	$26(a0),d0
00013606 4EB9 0000 2C60             		jsr	(CalcSine).l
0001360C C3E8 0014                  		muls.w	$14(a0),d1
00013610 E081                       		asr.l	#8,d1
00013612 3141 0010                  		move.w	d1,$10(a0)
00013616 C1E8 0014                  		muls.w	$14(a0),d0
0001361A E080                       		asr.l	#8,d0
0001361C 3140 0012                  		move.w	d0,$12(a0)
00013620                            
00013620                            loc_1300C:
00013620 1028 0026                  		move.b	$26(a0),d0
00013624 0600 0040                  		addi.b	#$40,d0
00013628 6B00                       		bmi.s	locret_1307C
0001362A 123C 0040                  		move.b	#$40,d1
0001362E 4A68 0014                  		tst.w	$14(a0)
00013632 6700                       		beq.s	locret_1307C
00013634 6B00                       		bmi.s	loc_13024
00013636 4441                       		neg.w	d1
00013638                            
00013638                            loc_13024:
00013638 1028 0026                  		move.b	$26(a0),d0
0001363C D001                       		add.b	d1,d0
0001363E 3F00                       		move.w	d0,-(sp)
00013640 6100 0000                  		bsr.w	Sonic_WalkSpeed
00013644 301F                       		move.w	(sp)+,d0
00013646 4A41                       		tst.w	d1
00013648 6A00                       		bpl.s	locret_1307C
0001364A E141                       		asl.w	#8,d1
0001364C 0600 0020                  		addi.b	#$20,d0
00013650 0200 00C0                  		andi.b	#$C0,d0
00013654 6700                       		beq.s	loc_13078
00013656 0C00 0040                  		cmpi.b	#$40,d0
0001365A 6700                       		beq.s	loc_13066
0001365C 0C00 0080                  		cmpi.b	#$80,d0
00013660 6700                       		beq.s	loc_13060
00013662 D368 0010                  		add.w	d1,$10(a0)
00013666 08E8 0005 0022             		bset	#5,$22(a0)
0001366C 317C 0000 0014             		move.w	#0,$14(a0)
00013672 4E75                       		rts	
00013674                            ; ===========================================================================
00013674                            
00013674                            loc_13060:
00013674 9368 0012                  		sub.w	d1,$12(a0)
00013678 4E75                       		rts	
0001367A                            ; ===========================================================================
0001367A                            
0001367A                            loc_13066:
0001367A 9368 0010                  		sub.w	d1,$10(a0)
0001367E 08E8 0005 0022             		bset	#5,$22(a0)
00013684 317C 0000 0014             		move.w	#0,$14(a0)
0001368A 4E75                       		rts	
0001368C                            ; ===========================================================================
0001368C                            
0001368C                            loc_13078:
0001368C D368 0012                  		add.w	d1,$12(a0)
00013690                            
00013690                            locret_1307C:
00013690 4E75                       		rts	
00013692                            ; End of function Sonic_Move
00013692                            
00013692                            
00013692                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013692                            
00013692                            
00013692                            Sonic_MoveLeft:				; XREF: Sonic_Move
00013692 3028 0014                  		move.w	$14(a0),d0
00013696 6700                       		beq.s	loc_13086
00013698 6A00                       		bpl.s	loc_130B2
0001369A                            
0001369A                            loc_13086:
0001369A 08E8 0000 0022             		bset	#0,$22(a0)
000136A0 6600                       		bne.s	loc_1309A
000136A2 08A8 0005 0022             		bclr	#5,$22(a0)
000136A8 117C 0001 001D             		move.b	#1,$1D(a0)
000136AE                            
000136AE                            loc_1309A:
000136AE 9045                       		sub.w	d5,d0
000136B0 3206                       		move.w	d6,d1
000136B2 4441                       		neg.w	d1
000136B4 B041                       		cmp.w	d1,d0
000136B6 6E00                       		bgt.s	loc_130A6
000136B8 3001                       		move.w	d1,d0
000136BA                            
000136BA                            loc_130A6:
000136BA 3140 0014                  		move.w	d0,$14(a0)
000136BE 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
000136C4 4E75                       		rts	
000136C6                            ; ===========================================================================
000136C6                            
000136C6                            loc_130B2:				; XREF: Sonic_MoveLeft
000136C6 9044                       		sub.w	d4,d0
000136C8 6400                       		bcc.s	loc_130BA
000136CA 303C FF80                  		move.w	#-$80,d0
000136CE                            
000136CE                            loc_130BA:
000136CE 3140 0014                  		move.w	d0,$14(a0)
000136D2 1028 0026                  		move.b	$26(a0),d0
000136D6 0600 0020                  		addi.b	#$20,d0
000136DA 0200 00C0                  		andi.b	#$C0,d0
000136DE 6600                       		bne.s	locret_130E8
000136E0 0C40 0400                  		cmpi.w	#$400,d0
000136E4 6D00                       		blt.s	locret_130E8
000136E6 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000136EC 08A8 0000 0022             		bclr	#0,$22(a0)
000136F2 303C 00A4                  		move.w	#$A4,d0
000136F6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stopping sound
000136FC                            
000136FC                            locret_130E8:
000136FC 4E75                       		rts	
000136FE                            ; End of function Sonic_MoveLeft
000136FE                            
000136FE                            
000136FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000136FE                            
000136FE                            
000136FE                            Sonic_MoveRight:			; XREF: Sonic_Move
000136FE 3028 0014                  		move.w	$14(a0),d0
00013702 6B00                       		bmi.s	loc_13118
00013704 08A8 0000 0022             		bclr	#0,$22(a0)
0001370A 6700                       		beq.s	loc_13104
0001370C 08A8 0005 0022             		bclr	#5,$22(a0)
00013712 117C 0001 001D             		move.b	#1,$1D(a0)
00013718                            
00013718                            loc_13104:
00013718 D045                       		add.w	d5,d0
0001371A B046                       		cmp.w	d6,d0
0001371C 6D00                       		blt.s	loc_1310C
0001371E 3006                       		move.w	d6,d0
00013720                            
00013720                            loc_1310C:
00013720 3140 0014                  		move.w	d0,$14(a0)
00013724 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
0001372A 4E75                       		rts	
0001372C                            ; ===========================================================================
0001372C                            
0001372C                            loc_13118:				; XREF: Sonic_MoveRight
0001372C D044                       		add.w	d4,d0
0001372E 6400                       		bcc.s	loc_13120
00013730 303C 0080                  		move.w	#$80,d0
00013734                            
00013734                            loc_13120:
00013734 3140 0014                  		move.w	d0,$14(a0)
00013738 1028 0026                  		move.b	$26(a0),d0
0001373C 0600 0020                  		addi.b	#$20,d0
00013740 0200 00C0                  		andi.b	#$C0,d0
00013744 6600                       		bne.s	locret_1314E
00013746 0C40 FC00                  		cmpi.w	#-$400,d0
0001374A 6E00                       		bgt.s	locret_1314E
0001374C 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013752 08E8 0000 0022             		bset	#0,$22(a0)
00013758 303C 00A4                  		move.w	#$A4,d0
0001375C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stopping sound
00013762                            
00013762                            locret_1314E:
00013762 4E75                       		rts	
00013764                            ; End of function Sonic_MoveRight
00013764                            
00013764                            ; ---------------------------------------------------------------------------
00013764                            ; Subroutine to	change Sonic's speed as he rolls
00013764                            ; ---------------------------------------------------------------------------
00013764                            
00013764                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013764                            
00013764                            
00013764                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00013764 3C38 F760                  		move.w	($FFFFF760).w,d6
00013768 E346                       		asl.w	#1,d6
0001376A 3A38 F762                  		move.w	($FFFFF762).w,d5
0001376E E245                       		asr.w	#1,d5
00013770 3838 F764                  		move.w	($FFFFF764).w,d4
00013774 E444                       		asr.w	#2,d4
00013776 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0001377A 6600 0000                  		bne.w	loc_131CC
0001377E 4A68 003E                  		tst.w	$3E(a0)
00013782 6600                       		bne.s	loc_13188
00013784 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001378A 6700                       		beq.s	loc_1317C	; if not, branch
0001378C 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013792 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
00013794 6100 0000                  		bsr.w	Sonic_RollLeft
00013798                            
00013798                            loc_1317C:
00013798 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001379E 6700                       		beq.s	loc_13188	; if not, branch
000137A0 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000137A6 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
000137A8 6100 0000                  		bsr.w	Sonic_RollLeft
000137AC 6000                       		bra.s	loc_13188
000137AE                            
000137AE                            SonicRS_RollRight:
000137AE 6100 0000                  		bsr.w	Sonic_RollRight
000137B2                            
000137B2                            loc_13188:
000137B2 3028 0014                  		move.w	$14(a0),d0
000137B6 6700                       		beq.s	loc_131AA
000137B8 6B00                       		bmi.s	loc_1319E
000137BA 9045                       		sub.w	d5,d0
000137BC 6400                       		bcc.s	loc_13198
000137BE 303C 0000                  		move.w	#0,d0
000137C2                            
000137C2                            loc_13198:
000137C2 3140 0014                  		move.w	d0,$14(a0)
000137C6 6000                       		bra.s	loc_131AA
000137C8                            ; ===========================================================================
000137C8                            
000137C8                            loc_1319E:				; XREF: Sonic_RollSpeed
000137C8 D045                       		add.w	d5,d0
000137CA 6400                       		bcc.s	loc_131A6
000137CC 303C 0000                  		move.w	#0,d0
000137D0                            
000137D0                            loc_131A6:
000137D0 3140 0014                  		move.w	d0,$14(a0)
000137D4                            
000137D4                            loc_131AA:
000137D4 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
000137D8 6600                       		bne.s	loc_131CC	; if yes, branch
000137DA 08A8 0002 0022             		bclr	#2,$22(a0)
000137E0 117C 0013 0016             		move.b	#$13,$16(a0)
000137E6 117C 0009 0017             		move.b	#9,$17(a0)
000137EC 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
000137F2 5B68 000C                  		subq.w	#5,$C(a0)
000137F6                            
000137F6                            loc_131CC:
000137F6 1028 0026                  		move.b	$26(a0),d0
000137FA 4EB9 0000 2C60             		jsr	(CalcSine).l
00013800 C1E8 0014                  		muls.w	$14(a0),d0
00013804 E080                       		asr.l	#8,d0
00013806 3140 0012                  		move.w	d0,$12(a0)
0001380A C3E8 0014                  		muls.w	$14(a0),d1
0001380E E081                       		asr.l	#8,d1
00013810 0C41 1000                  		cmpi.w	#$1000,d1
00013814 6F00                       		ble.s	loc_131F0
00013816 323C 1000                  		move.w	#$1000,d1
0001381A                            
0001381A                            loc_131F0:
0001381A 0C41 F000                  		cmpi.w	#-$1000,d1
0001381E 6C00                       		bge.s	loc_131FA
00013820 323C F000                  		move.w	#-$1000,d1
00013824                            
00013824                            loc_131FA:
00013824 3141 0010                  		move.w	d1,$10(a0)
00013828 6000 FDF6                  		bra.w	loc_1300C
0001382C                            ; End of function Sonic_RollSpeed
0001382C                            
0001382C                            
0001382C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001382C                            
0001382C                            
0001382C                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
0001382C 3028 0014                  		move.w	$14(a0),d0
00013830 6700                       		beq.s	loc_1320A
00013832 6A00                       		bpl.s	loc_13218
00013834                            
00013834                            loc_1320A:
00013834 08E8 0000 0022             		bset	#0,$22(a0)
0001383A 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013840 4E75                       		rts	
00013842                            ; ===========================================================================
00013842                            
00013842                            loc_13218:
00013842 9044                       		sub.w	d4,d0
00013844 6400                       		bcc.s	loc_13220
00013846 303C FF80                  		move.w	#-$80,d0
0001384A                            
0001384A                            loc_13220:
0001384A 3140 0014                  		move.w	d0,$14(a0)
0001384E 4E75                       		rts	
00013850                            ; End of function Sonic_RollLeft
00013850                            
00013850                            
00013850                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013850                            
00013850                            
00013850                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00013850 3028 0014                  		move.w	$14(a0),d0
00013854 6B00                       		bmi.s	loc_1323A
00013856 08A8 0000 0022             		bclr	#0,$22(a0)
0001385C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013862 4E75                       		rts	
00013864                            ; ===========================================================================
00013864                            
00013864                            loc_1323A:
00013864 D044                       		add.w	d4,d0
00013866 6400                       		bcc.s	loc_13242
00013868 303C 0080                  		move.w	#$80,d0
0001386C                            
0001386C                            loc_13242:
0001386C 3140 0014                  		move.w	d0,$14(a0)
00013870 4E75                       		rts	
00013872                            ; End of function Sonic_RollRight
00013872                            
00013872                            Sonic_AirUnroll:
00013872                            		
00013872 4A28 003A                  		tst.b	$3A(a0) ; check jump height control
00013876 6600                       		bne.s	@timer
00013878 1038 F605                  		move.b	($FFFFF605).w,d0
0001387C 0200 0070                  		andi.b	#$70,d0 ; is abc being pressed?
00013880 6700                       		beq.s	@end	; if not, branch
00013882 08A8 0002 0022             		bclr	#2,$22(a0)
00013888 117C 0013 0016             		move.b	#$13,$16(a0)
0001388E 117C 0009 0017             		move.b	#9,$17(a0)
00013894 117C 000E 001C             		move.b	#14,$1C(a0)	; use dunk animation
0001389A 2028 0010                  		move.l	$10(a0),d0
0001389E D080                       		add.l	d0,d0
000138A0 2140 0010                  		move.l	d0,$10(a0)
000138A4 5B68 000C                  		subq.w	#5,$C(a0)
000138A8                            	@end:
000138A8 4E75                       		rts
000138AA                            	@timer:
000138AA 5328 003A                  		subq.b	#1,$3A(a0)
000138AE 4E75                       		rts
000138B0                            
000138B0                            ; ---------------------------------------------------------------------------
000138B0                            ; Subroutine to	change Sonic's direction while jumping
000138B0                            ; ---------------------------------------------------------------------------
000138B0                            
000138B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138B0                            
000138B0                            
000138B0                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
000138B0 3C38 F760                  		move.w	($FFFFF760).w,d6
000138B4 3A38 F762                  		move.w	($FFFFF762).w,d5
000138B8 E345                       		asl.w	#1,d5
000138BA 0828 0004 0022             		btst	#4,$22(a0)
000138C0 6600                       		bne.s	Obj01_ResetScr2
000138C2 3028 0010                  		move.w	$10(a0),d0
000138C6 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000138CC 6700                       		beq.s	loc_13278	; if not, branch
000138CE 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000138D4 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
000138D6 6100 0000                  		bsr.w	SonicCJD_JumpLeft
000138DA 6E00                       		bgt.s	loc_13278
000138DC 3001                       		move.w	d1,d0
000138DE                            
000138DE                            loc_13278:
000138DE 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000138E4 6700                       		beq.s	Obj01_JumpMove	; if not, branch
000138E6 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000138EC 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
000138EE 6100 0000                  		bsr.w	SonicCJD_JumpLeft
000138F2 6E00                       		bgt.s	Obj01_JumpMove
000138F4 3001                       		move.w	d1,d0
000138F6 6000                       		bra.s	Obj01_JumpMove
000138F8                            
000138F8                            SonicCJD_JumpLeft:
000138F8 08E8 0000 0022             		bset	#0,$22(a0)
000138FE 9045                       		sub.w	d5,d0
00013900 3206                       		move.w	d6,d1
00013902 4441                       		neg.w	d1
00013904 B041                       		cmp.w	d1,d0
00013906                            		; bgt.s	loc_13278
00013906                            		; move.w	d1,d0
00013906 4E75                       		rts
00013908                            
00013908                            SonicCJD_JumpRight:
00013908 08A8 0000 0022             		bclr	#0,$22(a0)
0001390E D045                       		add.w	d5,d0
00013910 B046                       		cmp.w	d6,d0
00013912 6D00                       		blt.s	Obj01_JumpMove
00013914 3006                       		move.w	d6,d0
00013916                            
00013916                            Obj01_JumpMove:
00013916 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
0001391A                            
0001391A                            Obj01_ResetScr2:
0001391A 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013920 6700                       		beq.s	loc_132A4	; if yes, branch
00013922 6400                       		bcc.s	loc_132A0
00013924 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013928                            
00013928                            loc_132A0:
00013928 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001392C                            
0001392C                            loc_132A4:
0001392C 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013932 6500                       		bcs.s	locret_132D2	; if yes, branch
00013934 3028 0010                  		move.w	$10(a0),d0
00013938 3200                       		move.w	d0,d1
0001393A EA41                       		asr.w	#5,d1
0001393C 6700                       		beq.s	locret_132D2
0001393E 6B00                       		bmi.s	loc_132C6
00013940 9041                       		sub.w	d1,d0
00013942 6400                       		bcc.s	loc_132C0
00013944 303C 0000                  		move.w	#0,d0
00013948                            
00013948                            loc_132C0:
00013948 3140 0010                  		move.w	d0,$10(a0)
0001394C 4E75                       		rts	
0001394E                            ; ===========================================================================
0001394E                            
0001394E                            loc_132C6:
0001394E 9041                       		sub.w	d1,d0
00013950 6500                       		bcs.s	loc_132CE
00013952 303C 0000                  		move.w	#0,d0
00013956                            
00013956                            loc_132CE:
00013956 3140 0010                  		move.w	d0,$10(a0)
0001395A                            
0001395A                            locret_132D2:
0001395A 4E75                       		rts	
0001395C                            ; End of function Sonic_ChgJumpDir
0001395C                            
0001395C                            ; ===========================================================================
0001395C                            ; ---------------------------------------------------------------------------
0001395C                            ; Unused subroutine to squash Sonic
0001395C                            ; ---------------------------------------------------------------------------
0001395C 1028 0026                  		move.b	$26(a0),d0
00013960 0600 0020                  		addi.b	#$20,d0
00013964 0200 00C0                  		andi.b	#$C0,d0
00013968 6600                       		bne.s	locret_13302
0001396A 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001396E 4A41                       		tst.w	d1
00013970 6A00                       		bpl.s	locret_13302
00013972 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013978 317C 0000 0010             		move.w	#0,$10(a0)
0001397E 317C 0000 0012             		move.w	#0,$12(a0)
00013984 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
0001398A                            
0001398A                            locret_13302:
0001398A 4E75                       		rts	
0001398C                            ; ---------------------------------------------------------------------------
0001398C                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
0001398C                            ; ---------------------------------------------------------------------------
0001398C                            
0001398C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001398C                            
0001398C                            
0001398C                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
0001398C 2228 0008                  		move.l	8(a0),d1
00013990 3028 0010                  		move.w	$10(a0),d0
00013994 48C0                       		ext.l	d0
00013996 E180                       		asl.l	#8,d0
00013998 D280                       		add.l	d0,d1
0001399A 4841                       		swap	d1
0001399C 3038 F728                  		move.w	($FFFFF728).w,d0
000139A0 0640 0010                  		addi.w	#$10,d0
000139A4 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
000139A6 6200                       		bhi.s	Boundary_Sides	; if yes, branch
000139A8 3038 F72A                  		move.w	($FFFFF72A).w,d0
000139AC 0640 0128                  		addi.w	#$128,d0
000139B0 4A38 F7AA                  		tst.b	($FFFFF7AA).w
000139B4 6600                       		bne.s	loc_13332
000139B6 0640 0040                  		addi.w	#$40,d0
000139BA                            
000139BA                            loc_13332:
000139BA B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
000139BC 6300                       		bls.s	Boundary_Sides	; if yes, branch
000139BE                            
000139BE                            loc_13336:
000139BE 3038 F72E                  		move.w	($FFFFF72E).w,d0
000139C2 0640 00E0                  		addi.w	#$E0,d0
000139C6 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
000139CA 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
000139CC 4E75                       		rts	
000139CE                            ; ===========================================================================
000139CE                            
000139CE                            Boundary_Bottom:
000139CE 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
000139D4 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
000139D8 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
000139DE 6500 0000                  		bcs.w	KillSonic
000139E2 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
000139E6 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
000139EC 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
000139F2 4E75                       		rts	
000139F4                            ; ===========================================================================
000139F4                            
000139F4                            Boundary_Sides:
000139F4 3140 0008                  		move.w	d0,8(a0)
000139F8 317C 0000 000A             		move.w	#0,$A(a0)
000139FE 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013A04 317C 0000 0014             		move.w	#0,$14(a0)
00013A0A 60B2                       		bra.s	loc_13336
00013A0C                            ; End of function Sonic_LevelBound
00013A0C                            
00013A0C                            ; ---------------------------------------------------------------------------
00013A0C                            ; Subroutine allowing Sonic to roll when he's moving
00013A0C                            ; ---------------------------------------------------------------------------
00013A0C                            
00013A0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A0C                            
00013A0C                            
00013A0C                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013A0C 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013A10 6600                       		bne.s	Obj01_NoRoll
00013A12 3028 0014                  		move.w	$14(a0),d0
00013A16 6A00                       		bpl.s	loc_13392
00013A18 4440                       		neg.w	d0
00013A1A                            
00013A1A                            loc_13392:
00013A1A 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013A1E 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013A20 1038 F602                  		move.b	($FFFFF602).w,d0
00013A24 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013A28 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013A2A 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013A30 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013A32                            
00013A32                            Obj01_NoRoll:
00013A32 4E75                       		rts	
00013A34                            ; ===========================================================================
00013A34                            
00013A34                            Obj01_ChkRoll:
00013A34 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013A3A 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013A3C 4E75                       		rts	
00013A3E                            ; ===========================================================================
00013A3E                            
00013A3E                            Obj01_DoRoll:
00013A3E 08E8 0002 0022             		bset	#2,$22(a0)
00013A44 117C 000E 0016             		move.b	#$E,$16(a0)
00013A4A 117C 0007 0017             		move.b	#7,$17(a0)
00013A50 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013A56 5A68 000C                  		addq.w	#5,$C(a0)
00013A5A 303C 00BE                  		move.w	#$BE,d0
00013A5E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rolling sound
00013A64 4A68 0014                  		tst.w	$14(a0)
00013A68 6600                       		bne.s	locret_133E8
00013A6A 317C 0200 0014             		move.w	#$200,$14(a0)
00013A70                            
00013A70                            locret_133E8:
00013A70 4E75                       		rts	
00013A72                            ; End of function Sonic_Roll
00013A72                            
00013A72                            ; ---------------------------------------------------------------------------
00013A72                            ; Subroutine allowing Sonic to jump
00013A72                            ; ---------------------------------------------------------------------------
00013A72                            
00013A72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A72                            
00013A72                            
00013A72                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00013A72 1038 F603                  		move.b	($FFFFF603).w,d0
00013A76 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013A7A 6700 0000                  		beq.w	locret_1348E	; if not, branch
00013A7E 7000                       		moveq	#0,d0
00013A80 1028 0026                  		move.b	$26(a0),d0
00013A84 0600 0080                  		addi.b	#$80,d0
00013A88 6100 0000                  		bsr.w	sub_14D48
00013A8C 0C41 0006                  		cmpi.w	#6,d1
00013A90 6D00 0000                  		blt.w	locret_1348E
00013A94 343C 0680                  		move.w	#$680,d2
00013A98 0828 0006 0022             		btst	#6,$22(a0)
00013A9E 6700                       		beq.s	loc_1341C
00013AA0 343C 0380                  		move.w	#$380,d2
00013AA4                            
00013AA4                            loc_1341C:
00013AA4 7000                       		moveq	#0,d0
00013AA6 1028 0026                  		move.b	$26(a0),d0
00013AAA 0400 0040                  		subi.b	#$40,d0
00013AAE 4EB9 0000 2C60             		jsr	(CalcSine).l
00013AB4 C3C2                       		muls.w	d2,d1
00013AB6 E081                       		asr.l	#8,d1
00013AB8 D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00013ABC C1C2                       		muls.w	d2,d0
00013ABE E080                       		asr.l	#8,d0
00013AC0 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00013AC4 08E8 0001 0022             		bset	#1,$22(a0)
00013ACA 08A8 0005 0022             		bclr	#5,$22(a0)
00013AD0 588F                       		addq.l	#4,sp
00013AD2 117C 0001 003C             		move.b	#1,$3C(a0)
00013AD8 4228 0038                  		clr.b	$38(a0)
00013ADC 303C 00A0                  		move.w	#$A0,d0
00013AE0 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play jumping sound
00013AE6 117C 0013 0016             		move.b	#$13,$16(a0)
00013AEC 117C 0009 0017             		move.b	#9,$17(a0)
00013AF2 0828 0002 0022             		btst	#2,$22(a0)
00013AF8 6600                       		bne.s	loc_13490
00013AFA 117C 000E 0016             		move.b	#$E,$16(a0)
00013B00 117C 0007 0017             		move.b	#7,$17(a0)
00013B06 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013B0C 08E8 0002 0022             		bset	#2,$22(a0)
00013B12 5A68 000C                  		addq.w	#5,$C(a0)
00013B16 117C 000A 003A             		move.b	#10,$3A(a0) ; timer
00013B1C                            
00013B1C                            locret_1348E:
00013B1C 4E75                       		rts	
00013B1E                            ; ===========================================================================
00013B1E                            
00013B1E                            loc_13490:
00013B1E 08E8 0004 0022             		bset	#4,$22(a0)
00013B24 4E75                       		rts	
00013B26                            ; End of function Sonic_Jump
00013B26                            
00013B26                            
00013B26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B26                            
00013B26                            
00013B26                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013B26 4A28 003C                  		tst.b	$3C(a0)
00013B2A 6700                       		beq.s	loc_134C4
00013B2C 323C FC00                  		move.w	#-$400,d1
00013B30 0828 0006 0022             		btst	#6,$22(a0)
00013B36 6700                       		beq.s	loc_134AE
00013B38 323C FE00                  		move.w	#-$200,d1
00013B3C                            
00013B3C                            loc_134AE:
00013B3C B268 0012                  		cmp.w	$12(a0),d1
00013B40 6F00                       		ble.s	locret_134C2
00013B42 1038 F602                  		move.b	($FFFFF602).w,d0
00013B46 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013B4A 6600                       		bne.s	locret_134C2	; if yes, branch
00013B4C 3141 0012                  		move.w	d1,$12(a0)
00013B50                            
00013B50                            locret_134C2:
00013B50 4E75                       		rts	
00013B52                            ; ===========================================================================
00013B52                            
00013B52                            loc_134C4:
00013B52 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013B58 6C00                       		bge.s	locret_134D2
00013B5A 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013B60                            
00013B60                            locret_134D2:
00013B60 4E75                       		rts	
00013B62                            ; End of function Sonic_JumpHeight
00013B62                            
00013B62                            ; ---------------------------------------------------------------------------
00013B62                            ; Subroutine to	slow Sonic walking up a	slope
00013B62                            ; ---------------------------------------------------------------------------
00013B62                            
00013B62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B62                            
00013B62                            
00013B62                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013B62 1028 0026                  		move.b	$26(a0),d0
00013B66 0600 0060                  		addi.b	#$60,d0
00013B6A 0C00 00C0                  		cmpi.b	#$C0,d0
00013B6E 6400                       		bcc.s	locret_13508
00013B70 1028 0026                  		move.b	$26(a0),d0
00013B74 4EB9 0000 2C60             		jsr	(CalcSine).l
00013B7A C1FC 0020                  		muls.w	#$20,d0
00013B7E E080                       		asr.l	#8,d0
00013B80 4A68 0014                  		tst.w	$14(a0)
00013B84 6700                       		beq.s	locret_13508
00013B86 6B00                       		bmi.s	loc_13504
00013B88 4A40                       		tst.w	d0
00013B8A 6700                       		beq.s	locret_13502
00013B8C D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00013B90                            
00013B90                            locret_13502:
00013B90 4E75                       		rts	
00013B92                            ; ===========================================================================
00013B92                            
00013B92                            loc_13504:
00013B92 D168 0014                  		add.w	d0,$14(a0)
00013B96                            
00013B96                            locret_13508:
00013B96 4E75                       		rts	
00013B98                            ; End of function Sonic_SlopeResist
00013B98                            
00013B98                            ; ---------------------------------------------------------------------------
00013B98                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013B98                            ; ---------------------------------------------------------------------------
00013B98                            
00013B98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B98                            
00013B98                            
00013B98                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013B98 1028 0026                  		move.b	$26(a0),d0
00013B9C 0600 0060                  		addi.b	#$60,d0
00013BA0 0C00 00C0                  		cmpi.b	#-$40,d0
00013BA4 6400                       		bcc.s	locret_13544
00013BA6 1028 0026                  		move.b	$26(a0),d0
00013BAA 4EB9 0000 2C60             		jsr	(CalcSine).l
00013BB0 C1FC 0050                  		muls.w	#$50,d0
00013BB4 E080                       		asr.l	#8,d0
00013BB6 4A68 0014                  		tst.w	$14(a0)
00013BBA 6B00                       		bmi.s	loc_1353A
00013BBC 4A40                       		tst.w	d0
00013BBE 6A00                       		bpl.s	loc_13534
00013BC0 E480                       		asr.l	#2,d0
00013BC2                            
00013BC2                            loc_13534:
00013BC2 D168 0014                  		add.w	d0,$14(a0)
00013BC6 4E75                       		rts	
00013BC8                            ; ===========================================================================
00013BC8                            
00013BC8                            loc_1353A:
00013BC8 4A40                       		tst.w	d0
00013BCA 6B00                       		bmi.s	loc_13540
00013BCC E480                       		asr.l	#2,d0
00013BCE                            
00013BCE                            loc_13540:
00013BCE D168 0014                  		add.w	d0,$14(a0)
00013BD2                            
00013BD2                            locret_13544:
00013BD2 4E75                       		rts	
00013BD4                            ; End of function Sonic_RollRepel
00013BD4                            
00013BD4                            ; ---------------------------------------------------------------------------
00013BD4                            ; Subroutine to	push Sonic down	a slope
00013BD4                            ; ---------------------------------------------------------------------------
00013BD4                            
00013BD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013BD4                            
00013BD4                            
00013BD4                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00013BD4 4E71                       		nop	
00013BD6 4A28 0038                  		tst.b	$38(a0)
00013BDA 6600                       		bne.s	locret_13580
00013BDC 4A68 003E                  		tst.w	$3E(a0)
00013BE0 6600                       		bne.s	loc_13582
00013BE2 1028 0026                  		move.b	$26(a0),d0
00013BE6 0600 0020                  		addi.b	#$20,d0
00013BEA 0200 00C0                  		andi.b	#$C0,d0
00013BEE 6700                       		beq.s	locret_13580
00013BF0 3028 0014                  		move.w	$14(a0),d0
00013BF4 6A00                       		bpl.s	loc_1356A
00013BF6 4440                       		neg.w	d0
00013BF8                            
00013BF8                            loc_1356A:
00013BF8 0C40 0280                  		cmpi.w	#$280,d0
00013BFC 6400                       		bcc.s	locret_13580
00013BFE 4268 0014                  		clr.w	$14(a0)
00013C02 08E8 0001 0022             		bset	#1,$22(a0)
00013C08 317C 001E 003E             		move.w	#$1E,$3E(a0)
00013C0E                            
00013C0E                            locret_13580:
00013C0E 4E75                       		rts	
00013C10                            ; ===========================================================================
00013C10                            
00013C10                            loc_13582:
00013C10 5368 003E                  		subq.w	#1,$3E(a0)
00013C14 4E75                       		rts	
00013C16                            ; End of function Sonic_SlopeRepel
00013C16                            
00013C16                            ; ---------------------------------------------------------------------------
00013C16                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00013C16                            ; ---------------------------------------------------------------------------
00013C16                            
00013C16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C16                            
00013C16                            
00013C16                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013C16 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013C1A 6700                       		beq.s	locret_135A2	; if already 0,	branch
00013C1C 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00013C1E                            
00013C1E 5400                       		addq.b	#2,d0		; increase angle
00013C20 6400                       		bcc.s	loc_13596
00013C22 7000                       		moveq	#0,d0
00013C24                            
00013C24                            loc_13596:
00013C24 6000                       		bra.s	loc_1359E
00013C26                            ; ===========================================================================
00013C26                            
00013C26                            loc_13598:
00013C26 5500                       		subq.b	#2,d0		; decrease angle
00013C28 6400                       		bcc.s	loc_1359E
00013C2A 7000                       		moveq	#0,d0
00013C2C                            
00013C2C                            loc_1359E:
00013C2C 1140 0026                  		move.b	d0,$26(a0)
00013C30                            
00013C30                            locret_135A2:
00013C30 4E75                       		rts	
00013C32                            ; End of function Sonic_JumpAngle
00013C32                            
00013C32                            ; ---------------------------------------------------------------------------
00013C32                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00013C32                            ; ---------------------------------------------------------------------------
00013C32                            
00013C32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C32                            
00013C32                            
00013C32                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00013C32 3228 0010                  		move.w	$10(a0),d1
00013C36 3428 0012                  		move.w	$12(a0),d2
00013C3A 4EB9 0000 2F2E             		jsr	(CalcAngle).l
00013C40 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00013C44 0400 0020                  		subi.b	#$20,d0
00013C48 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00013C4C 0200 00C0                  		andi.b	#$C0,d0
00013C50 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00013C54 0C00 0040                  		cmpi.b	#$40,d0
00013C58 6700 0000                  		beq.w	loc_13680
00013C5C 0C00 0080                  		cmpi.b	#$80,d0
00013C60 6700 0000                  		beq.w	loc_136E2
00013C64 0C00 00C0                  		cmpi.b	#-$40,d0
00013C68 6700 0000                  		beq.w	loc_1373E
00013C6C 6100 0000                  		bsr.w	Sonic_HitWall
00013C70 4A41                       		tst.w	d1
00013C72 6A00                       		bpl.s	loc_135F0
00013C74 9368 0008                  		sub.w	d1,8(a0)
00013C78 317C 0000 0010             		move.w	#0,$10(a0)
00013C7E                            
00013C7E                            loc_135F0:
00013C7E 6100 0000                  		bsr.w	sub_14EB4
00013C82 4A41                       		tst.w	d1
00013C84 6A00                       		bpl.s	loc_13602
00013C86 D368 0008                  		add.w	d1,8(a0)
00013C8A 317C 0000 0010             		move.w	#0,$10(a0)
00013C90                            
00013C90                            loc_13602:
00013C90 6100 0000                  		bsr.w	Sonic_HitFloor
00013C94 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00013C98 4A41                       		tst.w	d1
00013C9A 6A00                       		bpl.s	locret_1367E
00013C9C 1428 0012                  		move.b	$12(a0),d2
00013CA0 5002                       		addq.b	#8,d2
00013CA2 4402                       		neg.b	d2
00013CA4 B202                       		cmp.b	d2,d1
00013CA6 6C00                       		bge.s	loc_1361E
00013CA8 B002                       		cmp.b	d2,d0
00013CAA 6D00                       		blt.s	locret_1367E
00013CAC                            
00013CAC                            loc_1361E:
00013CAC D368 000C                  		add.w	d1,$C(a0)
00013CB0 1143 0026                  		move.b	d3,$26(a0)
00013CB4 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013CB8 117C 0000 001C             		move.b	#0,$1C(a0)
00013CBE 1003                       		move.b	d3,d0
00013CC0 0600 0020                  		addi.b	#$20,d0
00013CC4 0200 0040                  		andi.b	#$40,d0
00013CC8 6600                       		bne.s	loc_1365C
00013CCA 1003                       		move.b	d3,d0
00013CCC 0600 0010                  		addi.b	#$10,d0
00013CD0 0200 0020                  		andi.b	#$20,d0
00013CD4 6700                       		beq.s	loc_1364E
00013CD6 E0E8 0012                  		asr	$12(a0)
00013CDA 6000                       		bra.s	loc_13670
00013CDC                            ; ===========================================================================
00013CDC                            
00013CDC                            loc_1364E:
00013CDC 317C 0000 0012             		move.w	#0,$12(a0)
00013CE2 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013CE8 4E75                       		rts	
00013CEA                            ; ===========================================================================
00013CEA                            
00013CEA                            loc_1365C:
00013CEA 317C 0000 0010             		move.w	#0,$10(a0)
00013CF0 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00013CF6 6F00                       		ble.s	loc_13670
00013CF8 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00013CFE                            
00013CFE                            loc_13670:
00013CFE 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013D04 4A03                       		tst.b	d3
00013D06 6A00                       		bpl.s	locret_1367E
00013D08 4468 0014                  		neg.w	$14(a0)
00013D0C                            
00013D0C                            locret_1367E:
00013D0C 4E75                       		rts	
00013D0E                            ; ===========================================================================
00013D0E                            
00013D0E                            loc_13680:
00013D0E 6100 0000                  		bsr.w	Sonic_HitWall
00013D12 4A41                       		tst.w	d1
00013D14 6A00                       		bpl.s	loc_1369A
00013D16 9368 0008                  		sub.w	d1,8(a0)
00013D1A 317C 0000 0010             		move.w	#0,$10(a0)
00013D20 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013D26 4E75                       		rts	
00013D28                            ; ===========================================================================
00013D28                            
00013D28                            loc_1369A:
00013D28 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013D2C 4A41                       		tst.w	d1
00013D2E 6A00                       		bpl.s	loc_136B4
00013D30 9368 000C                  		sub.w	d1,$C(a0)
00013D34 4A68 0012                  		tst.w	$12(a0)
00013D38 6A00                       		bpl.s	locret_136B2
00013D3A 317C 0000 0012             		move.w	#0,$12(a0)
00013D40                            
00013D40                            locret_136B2:
00013D40 4E75                       		rts	
00013D42                            ; ===========================================================================
00013D42                            
00013D42                            loc_136B4:
00013D42 4A68 0012                  		tst.w	$12(a0)
00013D46 6B00                       		bmi.s	locret_136E0
00013D48 6100 0000                  		bsr.w	Sonic_HitFloor
00013D4C 4A41                       		tst.w	d1
00013D4E 6A00                       		bpl.s	locret_136E0
00013D50 D368 000C                  		add.w	d1,$C(a0)
00013D54 1143 0026                  		move.b	d3,$26(a0)
00013D58 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013D5C 117C 0000 001C             		move.b	#0,$1C(a0)
00013D62 317C 0000 0012             		move.w	#0,$12(a0)
00013D68 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013D6E                            
00013D6E                            locret_136E0:
00013D6E 4E75                       		rts	
00013D70                            ; ===========================================================================
00013D70                            
00013D70                            loc_136E2:
00013D70 6100 0000                  		bsr.w	Sonic_HitWall
00013D74 4A41                       		tst.w	d1
00013D76 6A00                       		bpl.s	loc_136F4
00013D78 9368 0008                  		sub.w	d1,8(a0)
00013D7C 317C 0000 0010             		move.w	#0,$10(a0)
00013D82                            
00013D82                            loc_136F4:
00013D82 6100 0000                  		bsr.w	sub_14EB4
00013D86 4A41                       		tst.w	d1
00013D88 6A00                       		bpl.s	loc_13706
00013D8A D368 0008                  		add.w	d1,8(a0)
00013D8E 317C 0000 0010             		move.w	#0,$10(a0)
00013D94                            
00013D94                            loc_13706:
00013D94 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013D98 4A41                       		tst.w	d1
00013D9A 6A00                       		bpl.s	locret_1373C
00013D9C 9368 000C                  		sub.w	d1,$C(a0)
00013DA0 1003                       		move.b	d3,d0
00013DA2 0600 0020                  		addi.b	#$20,d0
00013DA6 0200 0040                  		andi.b	#$40,d0
00013DAA 6600                       		bne.s	loc_13726
00013DAC 317C 0000 0012             		move.w	#0,$12(a0)
00013DB2 4E75                       		rts	
00013DB4                            ; ===========================================================================
00013DB4                            
00013DB4                            loc_13726:
00013DB4 1143 0026                  		move.b	d3,$26(a0)
00013DB8 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013DBC 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013DC2 4A03                       		tst.b	d3
00013DC4 6A00                       		bpl.s	locret_1373C
00013DC6 4468 0014                  		neg.w	$14(a0)
00013DCA                            
00013DCA                            locret_1373C:
00013DCA 4E75                       		rts	
00013DCC                            ; ===========================================================================
00013DCC                            
00013DCC                            loc_1373E:
00013DCC 6100 0000                  		bsr.w	sub_14EB4
00013DD0 4A41                       		tst.w	d1
00013DD2 6A00                       		bpl.s	loc_13758
00013DD4 D368 0008                  		add.w	d1,8(a0)
00013DD8 317C 0000 0010             		move.w	#0,$10(a0)
00013DDE 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013DE4 4E75                       		rts	
00013DE6                            ; ===========================================================================
00013DE6                            
00013DE6                            loc_13758:
00013DE6 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013DEA 4A41                       		tst.w	d1
00013DEC 6A00                       		bpl.s	loc_13772
00013DEE 9368 000C                  		sub.w	d1,$C(a0)
00013DF2 4A68 0012                  		tst.w	$12(a0)
00013DF6 6A00                       		bpl.s	locret_13770
00013DF8 317C 0000 0012             		move.w	#0,$12(a0)
00013DFE                            
00013DFE                            locret_13770:
00013DFE 4E75                       		rts	
00013E00                            ; ===========================================================================
00013E00                            
00013E00                            loc_13772:
00013E00 4A68 0012                  		tst.w	$12(a0)
00013E04 6B00                       		bmi.s	locret_1379E
00013E06 6100 0000                  		bsr.w	Sonic_HitFloor
00013E0A 4A41                       		tst.w	d1
00013E0C 6A00                       		bpl.s	locret_1379E
00013E0E D368 000C                  		add.w	d1,$C(a0)
00013E12 1143 0026                  		move.b	d3,$26(a0)
00013E16 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013E1A 117C 0000 001C             		move.b	#0,$1C(a0)
00013E20 317C 0000 0012             		move.w	#0,$12(a0)
00013E26 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013E2C                            
00013E2C                            locret_1379E:
00013E2C 4E75                       		rts	
00013E2E                            ; End of function Sonic_Floor
00013E2E                            
00013E2E                            ; ---------------------------------------------------------------------------
00013E2E                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00013E2E                            ; ---------------------------------------------------------------------------
00013E2E                            
00013E2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E2E                            
00013E2E                            
00013E2E                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00013E2E 0828 0004 0022             		btst	#4,$22(a0)
00013E34 6700                       		beq.s	loc_137AE
00013E36 4E71                       		nop	
00013E38 4E71                       		nop	
00013E3A 4E71                       		nop	
00013E3C                            
00013E3C                            loc_137AE:
00013E3C 08A8 0005 0022             		bclr	#5,$22(a0)
00013E42 08A8 0001 0022             		bclr	#1,$22(a0)
00013E48 08A8 0004 0022             		bclr	#4,$22(a0)
00013E4E 0828 0002 0022             		btst	#2,$22(a0)
00013E54 6700                       		beq.s	loc_137E4
00013E56 08A8 0002 0022             		bclr	#2,$22(a0)
00013E5C 117C 0013 0016             		move.b	#$13,$16(a0)
00013E62 117C 0009 0017             		move.b	#9,$17(a0)
00013E68 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00013E6E 5B68 000C                  		subq.w	#5,$C(a0)
00013E72                            
00013E72                            loc_137E4:
00013E72 117C 0000 003C             		move.b	#0,$3C(a0)
00013E78 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00013E7E 4E75                       		rts	
00013E80                            ; End of function Sonic_ResetOnFloor
00013E80                            
00013E80                            ; ===========================================================================
00013E80                            ; ---------------------------------------------------------------------------
00013E80                            ; Sonic	when he	gets hurt
00013E80                            ; ---------------------------------------------------------------------------
00013E80                            
00013E80                            Obj01_Hurt:				; XREF: Obj01_Index
00013E80 4EBA 9D52                  		jsr	SpeedToPos
00013E84 0668 0030 0012             		addi.w	#$30,$12(a0)
00013E8A 0828 0006 0022             		btst	#6,$22(a0)
00013E90 6700                       		beq.s	loc_1380C
00013E92 0468 0020 0012             		subi.w	#$20,$12(a0)
00013E98                            
00013E98                            loc_1380C:
00013E98 6100 0000                  		bsr.w	Sonic_HurtStop
00013E9C 6100 FAEE                  		bsr.w	Sonic_LevelBound
00013EA0 6100 F4BE                  		bsr.w	Sonic_RecordPos
00013EA4 6100 0000                  		bsr.w	Sonic_Animate
00013EA8 6100 0000                  		bsr.w	LoadSonicDynPLC
00013EAC 4EFA 9D4C                  		jmp	DisplaySprite
00013EB0                            
00013EB0                            ; ---------------------------------------------------------------------------
00013EB0                            ; Subroutine to	stop Sonic falling after he's been hurt
00013EB0                            ; ---------------------------------------------------------------------------
00013EB0                            
00013EB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013EB0                            
00013EB0                            
00013EB0                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00013EB0 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013EB4 0640 00E0                  		addi.w	#$E0,d0
00013EB8 B068 000C                  		cmp.w	$C(a0),d0
00013EBC 6500 0000                  		bcs.w	KillSonic
00013EC0 6100 FD70                  		bsr.w	Sonic_Floor
00013EC4 0828 0001 0022             		btst	#1,$22(a0)
00013ECA 6600                       		bne.s	locret_13860
00013ECC 7000                       		moveq	#0,d0
00013ECE 3140 0012                  		move.w	d0,$12(a0)
00013ED2 3140 0010                  		move.w	d0,$10(a0)
00013ED6 3140 0014                  		move.w	d0,$14(a0)
00013EDA 117C 0000 001C             		move.b	#0,$1C(a0)
00013EE0 5528 0024                  		subq.b	#2,$24(a0)
00013EE4 317C 0078 0030             		move.w	#$78,$30(a0)
00013EEA                            
00013EEA                            locret_13860:
00013EEA 4E75                       		rts	
00013EEC                            ; End of function Sonic_HurtStop
00013EEC                            
00013EEC                            ; ===========================================================================
00013EEC                            ; ---------------------------------------------------------------------------
00013EEC                            ; Sonic	when he	dies
00013EEC                            ; ---------------------------------------------------------------------------
00013EEC                            
00013EEC                            Obj01_Death:				; XREF: Obj01_Index
00013EEC 6100 0000                  		bsr.w	GameOver
00013EF0 4EBA 9CB6                  		jsr	ObjectFall
00013EF4 6100 F46A                  		bsr.w	Sonic_RecordPos
00013EF8 6100 0000                  		bsr.w	Sonic_Animate
00013EFC 6100 0000                  		bsr.w	LoadSonicDynPLC
00013F00 4EFA 9CF8                  		jmp	DisplaySprite
00013F04                            
00013F04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F04                            
00013F04                            
00013F04                            GameOver:				; XREF: Obj01_Death
00013F04 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013F08 0640 0100                  		addi.w	#$100,d0
00013F0C B068 000C                  		cmp.w	$C(a0),d0
00013F10 6400 0000                  		bcc.w	locret_13900
00013F14 317C FFC8 0012             		move.w	#-$38,$12(a0)
00013F1A 5428 0024                  		addq.b	#2,$24(a0)
00013F1E 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00013F22 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00013F26 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00013F2A 6600                       		bne.s	loc_138D4
00013F2C 317C 0000 003A             		move.w	#0,$3A(a0)
00013F32 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00013F38 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00013F3E 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00013F44 4238 FE1A                  		clr.b	($FFFFFE1A).w
00013F48                            
00013F48                            loc_138C2:
00013F48 303C 008F                  		move.w	#$8F,d0
00013F4C 4EB9 0000 15B6             		jsr	(PlaySound).l	; play game over music
00013F52 7003                       		moveq	#3,d0
00013F54 4EF9 0000 17A0             		jmp	(LoadPLC).l	; load game over patterns
00013F5A                            ; ===========================================================================
00013F5A                            
00013F5A                            loc_138D4:
00013F5A 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00013F60 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00013F64 6700                       		beq.s	locret_13900	; if not, branch
00013F66 317C 0000 003A             		move.w	#0,$3A(a0)
00013F6C 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00013F72 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00013F78 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00013F7E 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00013F84 60C2                       		bra.s	loc_138C2
00013F86                            ; ===========================================================================
00013F86                            
00013F86                            locret_13900:
00013F86 4E75                       		rts	
00013F88                            ; End of function GameOver
00013F88                            
00013F88                            ; ===========================================================================
00013F88                            ; ---------------------------------------------------------------------------
00013F88                            ; Sonic	when the level is restarted
00013F88                            ; ---------------------------------------------------------------------------
00013F88                            
00013F88                            Obj01_ResetLevel:			; XREF: Obj01_Index
00013F88 4A68 003A                  		tst.w	$3A(a0)
00013F8C 6700                       		beq.s	locret_13914
00013F8E 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00013F92 6600                       		bne.s	locret_13914
00013F94 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013F9A                            
00013F9A                            locret_13914:
00013F9A 4E75                       		rts	
00013F9C                            
00013F9C                            ; ---------------------------------------------------------------------------
00013F9C                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00013F9C                            ; ---------------------------------------------------------------------------
00013F9C                            
00013F9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F9C                            
00013F9C                            
00013F9C                            Sonic_Loops:				; XREF: Obj01_Control
00013F9C 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00013FA2 6700                       		beq.s	loc_13926	; if yes, branch
00013FA4 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00013FA8 6600 0000                  		bne.w	locret_139C2	; if not, branch
00013FAC                            
00013FAC                            loc_13926:
00013FAC 3028 000C                  		move.w	$C(a0),d0
00013FB0 E248                       		lsr.w	#1,d0
00013FB2 0240 0380                  		andi.w	#$380,d0
00013FB6 1228 0008                  		move.b	8(a0),d1
00013FBA 0241 007F                  		andi.w	#$7F,d1
00013FBE D041                       		add.w	d1,d0
00013FC0 43F8 A400                  		lea	($FFFFA400).w,a1
00013FC4 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00013FC8 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00013FCC 6700 FA66                  		beq.w	Obj01_ChkRoll
00013FD0 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00013FD4 6700 FA5E                  		beq.w	Obj01_ChkRoll
00013FD8 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00013FDC 6700                       		beq.s	loc_13976
00013FDE B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00013FE2 6700                       		beq.s	loc_13966
00013FE4 08A8 0006 0001             		bclr	#6,1(a0)
00013FEA 4E75                       		rts	
00013FEC                            ; ===========================================================================
00013FEC                            
00013FEC                            loc_13966:
00013FEC 0828 0001 0022             		btst	#1,$22(a0)
00013FF2 6700                       		beq.s	loc_13976
00013FF4 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013FFA 4E75                       		rts	
00013FFC                            ; ===========================================================================
00013FFC                            
00013FFC                            loc_13976:
00013FFC 3428 0008                  		move.w	8(a0),d2
00014000 0C02 002C                  		cmpi.b	#$2C,d2
00014004 6400                       		bcc.s	loc_13988
00014006 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
0001400C 4E75                       		rts	
0001400E                            ; ===========================================================================
0001400E                            
0001400E                            loc_13988:
0001400E 0C02 00E0                  		cmpi.b	#-$20,d2
00014012 6500                       		bcs.s	loc_13996
00014014 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
0001401A 4E75                       		rts	
0001401C                            ; ===========================================================================
0001401C                            
0001401C                            loc_13996:
0001401C 0828 0006 0001             		btst	#6,1(a0)
00014022 6600                       		bne.s	loc_139B2
00014024 1228 0026                  		move.b	$26(a0),d1
00014028 6700                       		beq.s	locret_139C2
0001402A 0C01 0080                  		cmpi.b	#-$80,d1
0001402E 6200                       		bhi.s	locret_139C2
00014030 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014036 4E75                       		rts	
00014038                            ; ===========================================================================
00014038                            
00014038                            loc_139B2:
00014038 1228 0026                  		move.b	$26(a0),d1
0001403C 0C01 0080                  		cmpi.b	#-$80,d1
00014040 6300                       		bls.s	locret_139C2
00014042 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014048                            
00014048                            locret_139C2:
00014048 4E75                       		rts	
0001404A                            ; End of function Sonic_Loops
0001404A                            
0001404A                            ; ---------------------------------------------------------------------------
0001404A                            ; Subroutine to	animate	Sonic's sprites
0001404A                            ; ---------------------------------------------------------------------------
0001404A                            
0001404A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001404A                            
0001404A                            Player_Anim:
0001404A 0000 0000                  	dc.l	SonicAniData
0001404E 0000 0000                  	dc.l	SonicAniData ; gronic
00014052                            	; Insert more animation data for other characters here
00014052                            	
00014052                            Sonic_Animate:				; XREF: Obj01_Control; et al
00014052 7000                       			moveq	#0,d0
00014054 1038 FFE8                  		move.b	(v_character),d0
00014058 E548                       		lsl.w	#2,d0
0001405A 43FA FFEE                  		lea 	Player_Anim(pc),a1
0001405E                            		
0001405E 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic dplc
00014062                            	
00014062 7000                       		moveq	#0,d0
00014064 1028 001C                  		move.b	$1C(a0),d0
00014068 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0001406C 6700                       		beq.s	SAnim_Do	; if not, branch
0001406E 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00014072 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00014078 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0001407E                            
0001407E                            SAnim_Do:
0001407E D040                       		add.w	d0,d0
00014080 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00014084 1011                       		move.b	(a1),d0
00014086 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00014088 1228 0022                  		move.b	$22(a0),d1
0001408C 0201 0001                  		andi.b	#1,d1
00014090 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014096 8328 0001                  		or.b	d1,1(a0)
0001409A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0001409E 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
000140A0 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
000140A4                            
000140A4                            SAnim_Do2:
000140A4 7200                       		moveq	#0,d1
000140A6 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
000140AA 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
000140AE 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
000140B0                            
000140B0                            SAnim_Next:
000140B0 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
000140B4 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
000140B8                            
000140B8                            SAnim_Delay:
000140B8 4E75                       		rts	
000140BA                            ; ===========================================================================
000140BA                            
000140BA                            SAnim_End_FF:
000140BA 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
000140BC 6600                       		bne.s	SAnim_End_FE	; if not, branch
000140BE 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
000140C4 1029 0001                  		move.b	1(a1),d0	; read sprite number
000140C8 60E6                       		bra.s	SAnim_Next
000140CA                            ; ===========================================================================
000140CA                            
000140CA                            SAnim_End_FE:
000140CA 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
000140CC 6600                       		bne.s	SAnim_End_FD	; if not, branch
000140CE 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
000140D2 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
000140D6 9200                       		sub.b	d0,d1
000140D8 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
000140DC 60D2                       		bra.s	SAnim_Next
000140DE                            ; ===========================================================================
000140DE                            
000140DE                            SAnim_End_FD:
000140DE 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
000140E0 6600                       		bne.s	SAnim_End	; if not, branch
000140E2 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
000140E8                            
000140E8                            SAnim_End:
000140E8 4E75                       		rts	
000140EA                            ; ===========================================================================
000140EA                            
000140EA                            SAnim_WalkRun:				; XREF: SAnim_Do
000140EA 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000140EE 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
000140F0 5200                       		addq.b	#1,d0		; is animation walking/running?
000140F2 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
000140F6 7200                       		moveq	#0,d1
000140F8 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
000140FC 1428 0022                  		move.b	$22(a0),d2
00014100 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00014104 6600                       		bne.s	loc_13A70	; if yes, branch
00014106 4600                       		not.b	d0		; reverse angle
00014108                            
00014108                            loc_13A70:
00014108 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
0001410C 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
0001410E 7203                       		moveq	#3,d1
00014110                            
00014110                            loc_13A78:
00014110 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014116 B302                       		eor.b	d1,d2
00014118 8528 0001                  		or.b	d2,1(a0)
0001411C 0828 0005 0022             		btst	#5,$22(a0)
00014122 6600 0000                  		bne.w	SAnim_Push
00014126 E808                       		lsr.b	#4,d0		; divide angle by $10
00014128 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
0001412C 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014130 6A00                       		bpl.s	loc_13A9C
00014132 4442                       		neg.w	d2
00014134                            
00014134                            loc_13A9C:
00014134 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
0001413A 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
0001413E 6400                       		bcc.s	loc_13AB4	; if yes, branch
00014140 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00014146 1200                       		move.b	d0,d1
00014148 E209                       		lsr.b	#1,d1
0001414A D001                       		add.b	d1,d0
0001414C                            
0001414C                            loc_13AB4:
0001414C D000                       		add.b	d0,d0
0001414E 1600                       		move.b	d0,d3
00014150 4442                       		neg.w	d2
00014152 0642 0800                  		addi.w	#$800,d2
00014156 6A00                       		bpl.s	loc_13AC2
00014158 7400                       		moveq	#0,d2
0001415A                            
0001415A                            loc_13AC2:
0001415A E04A                       		lsr.w	#8,d2
0001415C 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014160 6100 FF42                  		bsr.w	SAnim_Do2
00014164 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
00014168 4E75                       		rts	
0001416A                            ; ===========================================================================
0001416A                            
0001416A                            SAnim_RollJump:				; XREF: SAnim_WalkRun
0001416A 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
0001416C 6600                       		bne.s	SAnim_Push	; if not, branch
0001416E 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014172 6A00                       		bpl.s	loc_13ADE
00014174 4442                       		neg.w	d2
00014176                            
00014176                            loc_13ADE:
00014176 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
0001417C 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00014180 6400                       		bcc.s	loc_13AF0	; if yes, branch
00014182 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00014188                            
00014188                            loc_13AF0:
00014188 4442                       		neg.w	d2
0001418A 0642 0400                  		addi.w	#$400,d2
0001418E 6A00                       		bpl.s	loc_13AFA
00014190 7400                       		moveq	#0,d2
00014192                            
00014192                            loc_13AFA:
00014192 E04A                       		lsr.w	#8,d2
00014194 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014198 1228 0022                  		move.b	$22(a0),d1
0001419C 0201 0001                  		andi.b	#1,d1
000141A0 0228 00FC 0001             		andi.b	#$FC,1(a0)
000141A6 8328 0001                  		or.b	d1,1(a0)
000141AA 6000 FEF8                  		bra.w	SAnim_Do2
000141AE                            ; ===========================================================================
000141AE                            
000141AE                            SAnim_Push:				; XREF: SAnim_RollJump
000141AE 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000141B2 6B00                       		bmi.s	loc_13B1E
000141B4 4442                       		neg.w	d2
000141B6                            
000141B6                            loc_13B1E:
000141B6 0642 0800                  		addi.w	#$800,d2
000141BA 6A00                       		bpl.s	loc_13B26
000141BC 7400                       		moveq	#0,d2
000141BE                            
000141BE                            loc_13B26:
000141BE EC4A                       		lsr.w	#6,d2
000141C0 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000141C4 43F9 0000 0000             		lea	(SonAni_Push).l,a1
000141CA 1228 0022                  		move.b	$22(a0),d1
000141CE 0201 0001                  		andi.b	#1,d1
000141D2 0228 00FC 0001             		andi.b	#$FC,1(a0)
000141D8 8328 0001                  		or.b	d1,1(a0)
000141DC 6000 FEC6                  		bra.w	SAnim_Do2
000141E0                            ; End of function Sonic_Animate
000141E0                            
000141E0                            ; ===========================================================================
000141E0                            SonicAniData:
000141E0                            	include "_anim\Sonic.asm"
000141E0                            ; ---------------------------------------------------------------------------
000141E0                            ; Animation script - Sonic
000141E0                            ; ---------------------------------------------------------------------------
000141E0 0000                       		dc.w SonAni_Walk-SonicAniData
000141E2 0000                       		dc.w SonAni_Run-SonicAniData
000141E4 0000                       		dc.w SonAni_Roll-SonicAniData
000141E6 0000                       		dc.w SonAni_Roll2-SonicAniData
000141E8 0000                       		dc.w SonAni_Push-SonicAniData
000141EA 0000                       		dc.w SonAni_Wait-SonicAniData
000141EC 0000                       		dc.w SonAni_Balance-SonicAniData
000141EE 0000                       		dc.w SonAni_LookUp-SonicAniData
000141F0 0000                       		dc.w SonAni_Duck-SonicAniData
000141F2 0000                       		dc.w SonAni_Warp1-SonicAniData
000141F4 0000                       		dc.w SonAni_Warp2-SonicAniData
000141F6 0000                       		dc.w SonAni_Warp3-SonicAniData
000141F8 0000                       		dc.w SonAni_Warp4-SonicAniData
000141FA 0000                       		dc.w SonAni_Stop-SonicAniData
000141FC 0000                       		dc.w SonAni_Float1-SonicAniData
000141FE 0000                       		dc.w SonAni_Float2-SonicAniData
00014200 0000                       		dc.w SonAni_Spring-SonicAniData
00014202 0000                       		dc.w SonAni_LZHang-SonicAniData
00014204 0000                       		dc.w SonAni_Leap1-SonicAniData
00014206 0000                       		dc.w SonAni_Leap2-SonicAniData
00014208 0000                       		dc.w SonAni_Surf-SonicAniData
0001420A 0000                       		dc.w SonAni_Bubble-SonicAniData
0001420C 0000                       		dc.w SonAni_Death1-SonicAniData
0001420E 0000                       		dc.w SonAni_Drown-SonicAniData
00014210 0000                       		dc.w SonAni_Death2-SonicAniData
00014212 0000                       		dc.w SonAni_Shrink-SonicAniData
00014214 0000                       		dc.w SonAni_Hurt-SonicAniData
00014216 0000                       		dc.w SonAni_LZSlide-SonicAniData
00014218 0000                       		dc.w SonAni_Blank-SonicAniData
0001421A 0000                       		dc.w SonAni_Float3-SonicAniData
0001421C 0000                       		dc.w SonAni_Float4-SonicAniData
0001421E FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
00014228 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
00014230 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
00014238 FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
00014240 FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
00014248 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
0001425E 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
00014262 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
00014266 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
0001426A 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
0001426E 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
00014272 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00014276 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
0001427A 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
0001427E 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
00014282 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
0001428A 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
0001428E 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
00014292 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
00014298 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
0001429E 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
000142A2 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
000142AA 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
000142AE 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
000142B2 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
000142B6 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
000142C0 035B FF00                  SonAni_Hurt:	dc.b 3,	$5B, $FF, 0
000142C4 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
000142C8 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
000142CC 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
000142D4 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
000142D8                            		even
000142D8                            		even
000142D8                            
000142D8                            ; ---------------------------------------------------------------------------
000142D8                            ; Sonic	pattern	loading	subroutine
000142D8                            ; ---------------------------------------------------------------------------
000142D8                            
000142D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000142D8                            Player_DPLC:
000142D8 0000 0000                  	dc.l	SonicDynPLC
000142DC 0000 0000                  	dc.l	SonicDynPLC ; gronic
000142E0                            	; add pointers for player dplc here
000142E0                            Player_Art:
000142E0 0000 0000                  	dc.l	Art_Sonic
000142E4 0000 0000                  	dc.l	Art_Sonic ; gronic
000142E8                            	; add pointers for player art here
000142E8                            
000142E8                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
000142E8 7000                       		moveq	#0,d0
000142EA 1028 001A                  		move.b	$1A(a0),d0	; load frame number
000142EE B038 F766                  		cmp.b	($FFFFF766).w,d0
000142F2 6700                       		beq.s	locret_13C96
000142F4 11C0 F766                  		move.b	d0,($FFFFF766).w
000142F8                            		
000142F8 323C 0000                  		move.w	#0,d1
000142FC 1238 FFE8                  		move.b	(v_character),d1
00014300 E549                       		lsl.w	#2,d1
00014302 45FA FFD4                  		lea 	Player_DPLC(pc),a2
00014306                            
00014306 2472 1000                  		movea.l	(a2,d1.w),a2	; load Sonic dplc
0001430A                            		
0001430A D040                       		add.w	d0,d0
0001430C D4F2 0000                  		adda.w	(a2,d0.w),a2
00014310 7200                       		moveq	#0,d1
00014312 121A                       		move.b	(a2)+,d1	; read "number of entries" value
00014314 5301                       		subq.b	#1,d1
00014316 6B00                       		bmi.s	locret_13C96
00014318 47F8 C800                  		lea	($FFFFC800).w,a3
0001431C 11FC 0001 F767             		move.b	#1,($FFFFF767).w
00014322                            
00014322                            SPLC_ReadEntry:
00014322 303C 0000                  		move.w	#0,d0
00014326 1038 FFE8                  		move.b	(v_character),d0
0001432A E548                       		lsl.w	#2,d0
0001432C 43FA FFB2                  		lea 	Player_Art(pc),a1
00014330                            
00014330 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic art
00014334                            
00014334 7400                       		moveq	#0,d2
00014336 141A                       		move.b	(a2)+,d2
00014338 3002                       		move.w	d2,d0
0001433A E808                       		lsr.b	#4,d0
0001433C E14A                       		lsl.w	#8,d2
0001433E 141A                       		move.b	(a2)+,d2
00014340 EB4A                       		lsl.w	#5,d2
00014342 D3C2                       		adda.l	d2,a1
00014344                            
00014344                            SPLC_LoadTile:
00014344 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
00014348 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
0001434C 47EB 0020                  		lea	$20(a3),a3	; next tile
00014350 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
00014354                            
00014354 51C9 FFCC                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
00014358                            
00014358                            locret_13C96:
00014358 4E75                       		rts	
0001435A                            ; End of function LoadSonicDynPLC
0001435A                            
0001435A                            ; ===========================================================================
0001435A                            ; ---------------------------------------------------------------------------
0001435A                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
0001435A                            ; ---------------------------------------------------------------------------
0001435A                            
0001435A                            Obj0A:					; XREF: Obj_Index
0001435A 7000                       		moveq	#0,d0
0001435C 1028 0024                  		move.b	$24(a0),d0
00014360 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00014364 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00014368                            ; ===========================================================================
00014368 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
0001436C 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00014370 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00014374 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00014378 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
0001437A                            ; ===========================================================================
0001437A                            
0001437A                            Obj0A_Main:				; XREF: Obj0A_Index
0001437A 5428 0024                  		addq.b	#2,$24(a0)
0001437E 217C 0001 2F8C 0004        		move.l	#Map_obj64,4(a0)
00014386 317C 8348 0002             		move.w	#$8348,2(a0)
0001438C 117C 0084 0001             		move.b	#$84,1(a0)
00014392 117C 0010 0019             		move.b	#$10,$19(a0)
00014398 117C 0001 0018             		move.b	#1,$18(a0)
0001439E 1028 0028                  		move.b	$28(a0),d0
000143A2 6A00                       		bpl.s	loc_13D00
000143A4 5028 0024                  		addq.b	#8,$24(a0)
000143A8 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
000143B0 317C 0440 0002             		move.w	#$440,2(a0)
000143B6 0240 007F                  		andi.w	#$7F,d0
000143BA 1140 0033                  		move.b	d0,$33(a0)
000143BE 6000 0000                  		bra.w	Obj0A_Countdown
000143C2                            ; ===========================================================================
000143C2                            
000143C2                            loc_13D00:
000143C2 1140 001C                  		move.b	d0,$1C(a0)
000143C6 3168 0008 0030             		move.w	8(a0),$30(a0)
000143CC 317C FF78 0012             		move.w	#-$88,$12(a0)
000143D2                            
000143D2                            Obj0A_Animate:				; XREF: Obj0A_Index
000143D2 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000143D8 4EB9 0000 ACC4             		jsr	AnimateSprite
000143DE                            
000143DE                            Obj0A_ChkWater:				; XREF: Obj0A_Index
000143DE 3038 F646                  		move.w	($FFFFF646).w,d0
000143E2 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
000143E6 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
000143E8 117C 0006 0024             		move.b	#6,$24(a0)
000143EE 5E28 001C                  		addq.b	#7,$1C(a0)
000143F2 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
000143F8 6700                       		beq.s	Obj0A_Display
000143FA 6000                       		bra.s	Obj0A_Display
000143FC                            ; ===========================================================================
000143FC                            
000143FC                            Obj0A_Wobble:
000143FC 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00014400 6700                       		beq.s	loc_13D44
00014402 5868 0030                  		addq.w	#4,$30(a0)
00014406                            
00014406                            loc_13D44:
00014406 1028 0026                  		move.b	$26(a0),d0
0001440A 5228 0026                  		addq.b	#1,$26(a0)
0001440E 0240 007F                  		andi.w	#$7F,d0
00014412 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00014418 1031 0000                  		move.b	(a1,d0.w),d0
0001441C 4880                       		ext.w	d0
0001441E D068 0030                  		add.w	$30(a0),d0
00014422 3140 0008                  		move.w	d0,8(a0)
00014426 6100                       		bsr.s	Obj0A_ShowNumber
00014428 4EBA 97AA                  		jsr	SpeedToPos
0001442C 4A28 0001                  		tst.b	1(a0)
00014430 6A00                       		bpl.s	Obj0A_Delete
00014432 4EFA 97C6                  		jmp	DisplaySprite
00014436                            ; ===========================================================================
00014436                            
00014436                            Obj0A_Delete:
00014436 4EFA 97FE                  		jmp	DeleteObject
0001443A                            ; ===========================================================================
0001443A                            
0001443A                            Obj0A_Display:				; XREF: Obj0A_Index
0001443A 6100                       		bsr.s	Obj0A_ShowNumber
0001443C 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014442 4EB9 0000 ACC4             		jsr	AnimateSprite
00014448 4EFA 97B0                  		jmp	DisplaySprite
0001444C                            ; ===========================================================================
0001444C                            
0001444C                            Obj0A_Delete2:				; XREF: Obj0A_Index
0001444C 4EFA 97E8                  		jmp	DeleteObject
00014450                            ; ===========================================================================
00014450                            
00014450                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00014450 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00014456 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00014458 5368 0038                  		subq.w	#1,$38(a0)
0001445C 6600                       		bne.s	Obj0A_Display2
0001445E 117C 000E 0024             		move.b	#$E,$24(a0)
00014464 5E28 001C                  		addq.b	#7,$1C(a0)
00014468 60D0                       		bra.s	Obj0A_Display
0001446A                            ; ===========================================================================
0001446A                            
0001446A                            Obj0A_Display2:
0001446A 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014470 4EB9 0000 ACC4             		jsr	AnimateSprite
00014476 4A28 0001                  		tst.b	1(a0)
0001447A 6A00                       		bpl.s	Obj0A_Delete3
0001447C 4EFA 977C                  		jmp	DisplaySprite
00014480                            ; ===========================================================================
00014480                            
00014480                            Obj0A_Delete3:
00014480 4EFA 97B4                  		jmp	DeleteObject
00014484                            ; ===========================================================================
00014484                            
00014484                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00014484 4A68 0038                  		tst.w	$38(a0)
00014488 6700                       		beq.s	locret_13E1A
0001448A 5368 0038                  		subq.w	#1,$38(a0)
0001448E 6600                       		bne.s	locret_13E1A
00014490 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00014496 6400                       		bcc.s	locret_13E1A
00014498 317C 000F 0038             		move.w	#$F,$38(a0)
0001449E 4268 0012                  		clr.w	$12(a0)
000144A2 117C 0080 0001             		move.b	#$80,1(a0)
000144A8 3028 0008                  		move.w	8(a0),d0
000144AC 9078 F700                  		sub.w	($FFFFF700).w,d0
000144B0 0640 0080                  		addi.w	#$80,d0
000144B4 3140 0008                  		move.w	d0,8(a0)
000144B8 3028 000C                  		move.w	$C(a0),d0
000144BC 9078 F704                  		sub.w	($FFFFF704).w,d0
000144C0 0640 0080                  		addi.w	#$80,d0
000144C4 3140 000A                  		move.w	d0,$A(a0)
000144C8 117C 000C 0024             		move.b	#$C,$24(a0)
000144CE                            
000144CE                            locret_13E1A:
000144CE 4E75                       		rts	
000144D0                            ; ===========================================================================
000144D0                            Obj0A_WobbleData:
000144D0 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
000144E1 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
000144F2 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00014503 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00014513 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00014520 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001452D FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001453A FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00014547 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00014550                            ; ===========================================================================
00014550                            
00014550                            Obj0A_Countdown:			; XREF: Obj0A_Index
00014550 4A68 002C                  		tst.w	$2C(a0)
00014554 6600 0000                  		bne.w	loc_13F86
00014558 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0001455E 6400 0000                  		bcc.w	locret_1408C
00014562 0838 0006 D022             		btst	#6,($FFFFD022).w
00014568 6700 0000                  		beq.w	locret_1408C
0001456C 5368 0038                  		subq.w	#1,$38(a0)
00014570 6A00 0000                  		bpl.w	loc_13FAC
00014574 317C 003B 0038             		move.w	#59,$38(a0)
0001457A 317C 0001 0036             		move.w	#1,$36(a0)
00014580 4EB9 0000 2C3A             		jsr	(RandomNumber).l
00014586 0240 0001                  		andi.w	#1,d0
0001458A 1140 0034                  		move.b	d0,$34(a0)
0001458E 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00014592 0C40 0019                  		cmpi.w	#$19,d0
00014596 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00014598 0C40 0014                  		cmpi.w	#$14,d0
0001459C 6700                       		beq.s	Obj0A_WarnSound
0001459E 0C40 000F                  		cmpi.w	#$F,d0
000145A2 6700                       		beq.s	Obj0A_WarnSound
000145A4 0C40 000C                  		cmpi.w	#$C,d0
000145A8 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
000145AA 6600                       		bne.s	loc_13F02
000145AC 303C 0092                  		move.w	#$92,d0
000145B0 4EB9 0000 15B6             		jsr	(PlaySound).l	; play countdown music
000145B6                            
000145B6                            loc_13F02:
000145B6 5328 0032                  		subq.b	#1,$32(a0)
000145BA 6A00                       		bpl.s	Obj0A_ReduceAir
000145BC 1168 0033 0032             		move.b	$33(a0),$32(a0)
000145C2 08E8 0007 0036             		bset	#7,$36(a0)
000145C8 6000                       		bra.s	Obj0A_ReduceAir
000145CA                            ; ===========================================================================
000145CA                            
000145CA                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
000145CA 303C 00C2                  		move.w	#$C2,d0
000145CE 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
000145D4                            
000145D4                            Obj0A_ReduceAir:
000145D4 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
000145D8 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
000145DC 6100 0000                  		bsr.w	ResumeMusic
000145E0 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000145E6 303C 00B2                  		move.w	#$B2,d0
000145EA 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play drowning sound
000145F0 117C 000A 0034             		move.b	#$A,$34(a0)
000145F6 317C 0001 0036             		move.w	#1,$36(a0)
000145FC 317C 0078 002C             		move.w	#$78,$2C(a0)
00014602 2F08                       		move.l	a0,-(sp)
00014604 41F8 D000                  		lea	($FFFFD000).w,a0
00014608 6100 F824                  		bsr.w	Sonic_ResetOnFloor
0001460C 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00014612 08E8 0001 0022             		bset	#1,$22(a0)
00014618 08E8 0007 0002             		bset	#7,2(a0)
0001461E 317C 0000 0012             		move.w	#0,$12(a0)
00014624 317C 0000 0010             		move.w	#0,$10(a0)
0001462A 317C 0000 0014             		move.w	#0,$14(a0)
00014630 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00014636 205F                       		movea.l	(sp)+,a0
00014638 4E75                       		rts	
0001463A                            ; ===========================================================================
0001463A                            
0001463A                            loc_13F86:
0001463A 5368 002C                  		subq.w	#1,$2C(a0)
0001463E 6600                       		bne.s	loc_13F94
00014640 11FC 0006 D024             		move.b	#6,($FFFFD024).w
00014646 4E75                       		rts	
00014648                            ; ===========================================================================
00014648                            
00014648                            loc_13F94:
00014648 2F08                       		move.l	a0,-(sp)
0001464A 41F8 D000                  		lea	($FFFFD000).w,a0
0001464E 4EBA 9584                  		jsr	SpeedToPos
00014652 0668 0010 0012             		addi.w	#$10,$12(a0)
00014658 205F                       		movea.l	(sp)+,a0
0001465A 6000                       		bra.s	loc_13FAC
0001465C                            ; ===========================================================================
0001465C                            
0001465C                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
0001465C 6000                       		bra.s	Obj0A_MakeItem
0001465E                            ; ===========================================================================
0001465E                            
0001465E                            loc_13FAC:
0001465E 4A68 0036                  		tst.w	$36(a0)
00014662 6700 0000                  		beq.w	locret_1408C
00014666 5368 003A                  		subq.w	#1,$3A(a0)
0001466A 6A00 0000                  		bpl.w	locret_1408C
0001466E                            
0001466E                            Obj0A_MakeItem:
0001466E 4EB9 0000 2C3A             		jsr	(RandomNumber).l
00014674 0240 000F                  		andi.w	#$F,d0
00014678 3140 003A                  		move.w	d0,$3A(a0)
0001467C 4EBA 9A02                  		jsr	SingleObjLoad
00014680 6600 0000                  		bne.w	locret_1408C
00014684 12BC 000A                  		move.b	#$A,0(a1)	; load object
00014688 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
0001468E 7006                       		moveq	#6,d0
00014690 0838 0000 D022             		btst	#0,($FFFFD022).w
00014696 6700                       		beq.s	loc_13FF2
00014698 4440                       		neg.w	d0
0001469A 137C 0040 0026             		move.b	#$40,$26(a1)
000146A0                            
000146A0                            loc_13FF2:
000146A0 D169 0008                  		add.w	d0,8(a1)
000146A4 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
000146AA 137C 0006 0028             		move.b	#6,$28(a1)
000146B0 4A68 002C                  		tst.w	$2C(a0)
000146B4 6700 0000                  		beq.w	loc_1403E
000146B8 0268 0007 003A             		andi.w	#7,$3A(a0)
000146BE 0668 0000 003A             		addi.w	#0,$3A(a0)
000146C4 3038 D00C                  		move.w	($FFFFD00C).w,d0
000146C8 0440 000C                  		subi.w	#$C,d0
000146CC 3340 000C                  		move.w	d0,$C(a1)
000146D0 4EB9 0000 2C3A             		jsr	(RandomNumber).l
000146D6 1340 0026                  		move.b	d0,$26(a1)
000146DA 3038 FE04                  		move.w	($FFFFFE04).w,d0
000146DE 0200 0003                  		andi.b	#3,d0
000146E2 6600                       		bne.s	loc_14082
000146E4 137C 000E 0028             		move.b	#$E,$28(a1)
000146EA 6000                       		bra.s	loc_14082
000146EC                            ; ===========================================================================
000146EC                            
000146EC                            loc_1403E:
000146EC 0828 0007 0036             		btst	#7,$36(a0)
000146F2 6700                       		beq.s	loc_14082
000146F4 3438 FE14                  		move.w	($FFFFFE14).w,d2
000146F8 E24A                       		lsr.w	#1,d2
000146FA 4EB9 0000 2C3A             		jsr	(RandomNumber).l
00014700 0240 0003                  		andi.w	#3,d0
00014704 6600                       		bne.s	loc_1406A
00014706 08E8 0006 0036             		bset	#6,$36(a0)
0001470C 6600                       		bne.s	loc_14082
0001470E 1342 0028                  		move.b	d2,$28(a1)
00014712 337C 001C 0038             		move.w	#$1C,$38(a1)
00014718                            
00014718                            loc_1406A:
00014718 4A28 0034                  		tst.b	$34(a0)
0001471C 6600                       		bne.s	loc_14082
0001471E 08E8 0006 0036             		bset	#6,$36(a0)
00014724 6600                       		bne.s	loc_14082
00014726 1342 0028                  		move.b	d2,$28(a1)
0001472A 337C 001C 0038             		move.w	#$1C,$38(a1)
00014730                            
00014730                            loc_14082:
00014730 5328 0034                  		subq.b	#1,$34(a0)
00014734 6A00                       		bpl.s	locret_1408C
00014736 4268 0036                  		clr.w	$36(a0)
0001473A                            
0001473A                            locret_1408C:
0001473A 4E75                       		rts	
0001473C                            
0001473C                            ; ---------------------------------------------------------------------------
0001473C                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
0001473C                            ; ---------------------------------------------------------------------------
0001473C                            
0001473C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001473C                            
0001473C                            
0001473C                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
0001473C 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00014742                             
00014742                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
00014742                             
00014742 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
00014746                             
00014746 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
0001474C 6600                       		bne.s	Air_GetBgm2	; if not, branch
0001474E 43F9 0000 3B00             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00014754 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014756                             
00014756                            Air_GetBgm2:
00014756 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
0001475C 6600                       		bne.s	Air_GetBgm3	; if not, branch
0001475E 43F9 0000 3B08             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00014764 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014766                             
00014766                            Air_GetBgm3:
00014766 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
0001476C 6600                       		bne.s	Air_GetBgm4	; if not, branch
0001476E 43F9 0000 3B0E             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
00014774 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014776                             
00014776                            Air_GetBgm4:
00014776 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
0001477C 6600                       		bne.s	Air_PlayMusic	; if not, branch
0001477E 43F9 0000 3B14             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00014784                             
00014784                            Air_PlayMusic:
00014784 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
00014788                             
00014788                            loc_140A6:
00014788 4EB9 0000 15B6             		jsr	(PlaySound).l
0001478E                             
0001478E                            ; NineKode ends here
0001478E                            
0001478E                            loc_140AC:
0001478E 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00014794 4238 D372                  		clr.b	($FFFFD372).w
00014798 4E75                       		rts	
0001479A                            ; End of function ResumeMusic
0001479A                            
0001479A                            ; ===========================================================================
0001479A                            Ani_obj0A:
0001479A                            	include "_anim\obj0A.asm"
0001479A                            ; ---------------------------------------------------------------------------
0001479A                            ; Animation script - countdown numbers and bubbles (LZ)
0001479A                            ; ---------------------------------------------------------------------------
0001479A 0000                       		dc.w byte_140D6-Ani_obj0A
0001479C 0000                       		dc.w byte_140E0-Ani_obj0A
0001479E 0000                       		dc.w byte_140EA-Ani_obj0A
000147A0 0000                       		dc.w byte_140F4-Ani_obj0A
000147A2 0000                       		dc.w byte_140FE-Ani_obj0A
000147A4 0000                       		dc.w byte_14108-Ani_obj0A
000147A6 0000                       		dc.w byte_14112-Ani_obj0A
000147A8 0000                       		dc.w byte_14118-Ani_obj0A
000147AA 0000                       		dc.w byte_14120-Ani_obj0A
000147AC 0000                       		dc.w byte_14128-Ani_obj0A
000147AE 0000                       		dc.w byte_14130-Ani_obj0A
000147B0 0000                       		dc.w byte_14138-Ani_obj0A
000147B2 0000                       		dc.w byte_14140-Ani_obj0A
000147B4 0000                       		dc.w byte_14148-Ani_obj0A
000147B6 0000                       		dc.w byte_1414A-Ani_obj0A
000147B8 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
000147C2 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
000147CC 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
000147D6 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
000147E0 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
000147EA 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
000147F4 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
000147FA 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00014802 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
0001480A 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00014812 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
0001481A 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00014822 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
0001482A 0EFC                       byte_14148:	dc.b $E, $FC
0001482C 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00014832                            		even
00014832                            		even
00014832                            
00014832                            ; ---------------------------------------------------------------------------
00014832                            ; Sprite mappings - drowning countdown numbers (LZ)
00014832                            ; ---------------------------------------------------------------------------
00014832                            Map_obj0A:
00014832                            	include "_maps\obj0A.asm"
00014832                            ; ---------------------------------------------------------------------------
00014832                            ; Sprite mappings - drowning countdown numbers (LZ)
00014832                            ; ---------------------------------------------------------------------------
00014832 0000                       		dc.w byte_14152-Map_obj0A
00014834 01                         byte_14152:	dc.b 1
00014835 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
0001483A                            		even
0001483A                            		even
0001483A                            
0001483A                            ; ===========================================================================
0001483A                            ; ---------------------------------------------------------------------------
0001483A                            ; Object 38 - shield and invincibility stars
0001483A                            ; ---------------------------------------------------------------------------
0001483A                            
0001483A                            Obj38:					; XREF: Obj_Index
0001483A 7000                       		moveq	#0,d0
0001483C 1028 0024                  		move.b	$24(a0),d0
00014840 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00014844 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00014848                            ; ===========================================================================
00014848 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
0001484A 0000                       		dc.w Obj38_Shield-Obj38_Index
0001484C 0000                       		dc.w Obj38_Stars-Obj38_Index
0001484E                            ; ===========================================================================
0001484E                            
0001484E                            Obj38_Main:				; XREF: Obj38_Index
0001484E 5428 0024                  		addq.b	#2,$24(a0)
00014852 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
0001485A 117C 0004 0001             		move.b	#4,1(a0)
00014860 117C 0001 0018             		move.b	#1,$18(a0)
00014866 117C 0010 0019             		move.b	#$10,$19(a0)
0001486C 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00014870 6600                       		bne.s	Obj38_DoStars	; if not, branch
00014872 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00014878 4E75                       		rts	
0001487A                            ; ===========================================================================
0001487A                            
0001487A                            Obj38_DoStars:
0001487A 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
0001487E 317C 055C 0002             		move.w	#$55C,2(a0)
00014884 4E75                       		rts	
00014886                            ; ===========================================================================
00014886                            
00014886                            Obj38_Shield:				; XREF: Obj38_Index
00014886 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
0001488A 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
0001488C 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00014890 6700                       		beq.s	Obj38_Delete	; if not, branch
00014892 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014898 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
0001489E 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000148A4 43F9 0000 0000             		lea	(Ani_obj38).l,a1
000148AA 4EB9 0000 ACC4             		jsr	AnimateSprite
000148B0 4EFA 9348                  		jmp	DisplaySprite
000148B4                            ; ===========================================================================
000148B4                            
000148B4                            Obj38_RmvShield:
000148B4 4E75                       		rts	
000148B6                            ; ===========================================================================
000148B6                            
000148B6                            Obj38_Delete:
000148B6 4EFA 937E                  		jmp	DeleteObject
000148BA                            ; ===========================================================================
000148BA                            
000148BA                            Obj38_Stars:				; XREF: Obj38_Index
000148BA 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000148BE 6700                       		beq.s	Obj38_Delete2	; if not, branch
000148C0 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000148C4 1228 001C                  		move.b	$1C(a0),d1
000148C8 5301                       		subq.b	#1,d1
000148CA 6000                       		bra.s	Obj38_StarTrail
000148CC                            ; ===========================================================================
000148CC E909                       		lsl.b	#4,d1
000148CE 5801                       		addq.b	#4,d1
000148D0 9001                       		sub.b	d1,d0
000148D2 1228 0030                  		move.b	$30(a0),d1
000148D6 9001                       		sub.b	d1,d0
000148D8 5801                       		addq.b	#4,d1
000148DA 0201 000F                  		andi.b	#$F,d1
000148DE 1141 0030                  		move.b	d1,$30(a0)
000148E2 6000                       		bra.s	Obj38_StarTrail2a
000148E4                            ; ===========================================================================
000148E4                            
000148E4                            Obj38_StarTrail:			; XREF: Obj38_Stars
000148E4 E709                       		lsl.b	#3,d1
000148E6 1401                       		move.b	d1,d2
000148E8 D201                       		add.b	d1,d1
000148EA D202                       		add.b	d2,d1
000148EC 5801                       		addq.b	#4,d1
000148EE 9001                       		sub.b	d1,d0
000148F0 1228 0030                  		move.b	$30(a0),d1
000148F4 9001                       		sub.b	d1,d0
000148F6 5801                       		addq.b	#4,d1
000148F8 0C01 0018                  		cmpi.b	#$18,d1
000148FC 6500                       		bcs.s	Obj38_StarTrail2
000148FE 7200                       		moveq	#0,d1
00014900                            
00014900                            Obj38_StarTrail2:
00014900 1141 0030                  		move.b	d1,$30(a0)
00014904                            
00014904                            Obj38_StarTrail2a:
00014904 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014908 43F1 0000                  		lea	(a1,d0.w),a1
0001490C 3159 0008                  		move.w	(a1)+,8(a0)
00014910 3159 000C                  		move.w	(a1)+,$C(a0)
00014914 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
0001491A 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014920 4EB9 0000 ACC4             		jsr	AnimateSprite
00014926 4EFA 92D2                  		jmp	DisplaySprite
0001492A                            ; ===========================================================================
0001492A                            
0001492A                            Obj38_Delete2:				; XREF: Obj38_Stars
0001492A 4EFA 930A                  		jmp	DeleteObject
0001492E                            ; ===========================================================================
0001492E                            ; ---------------------------------------------------------------------------
0001492E                            ; Object 4A - special stage entry from beta
0001492E                            ; ---------------------------------------------------------------------------
0001492E                            
0001492E                            Obj4A:					; XREF: Obj_Index
0001492E 7000                       		moveq	#0,d0
00014930 1028 0024                  		move.b	$24(a0),d0
00014934 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00014938 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
0001493C                            ; ===========================================================================
0001493C 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
0001493E 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00014940 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00014942                            ; ===========================================================================
00014942                            
00014942                            Obj4A_Main:				; XREF: Obj4A_Index
00014942 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00014946 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00014948 4E75                       		rts	
0001494A                            ; ===========================================================================
0001494A                            
0001494A                            Obj4A_Main2:
0001494A 5428 0024                  		addq.b	#2,$24(a0)
0001494E 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00014956 117C 0004 0001             		move.b	#4,1(a0)
0001495C 117C 0001 0018             		move.b	#1,$18(a0)
00014962 117C 0038 0019             		move.b	#$38,$19(a0)
00014968 317C 0541 0002             		move.w	#$541,2(a0)
0001496E 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00014974                            
00014974                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00014974 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
0001497A 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014980 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014986 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
0001498C 4EB9 0000 ACC4             		jsr	AnimateSprite
00014992 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00014998 6600                       		bne.s	Obj4A_Display
0001499A 4A38 D000                  		tst.b	($FFFFD000).w
0001499E 6700                       		beq.s	Obj4A_Display
000149A0 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
000149A6 303C 00A8                  		move.w	#$A8,d0
000149AA 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
000149B0                            
000149B0                            Obj4A_Display:
000149B0 4EFA 9248                  		jmp	DisplaySprite
000149B4                            ; ===========================================================================
000149B4                            
000149B4                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
000149B4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
000149B8 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
000149BA 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000149C0 4EFA 9274                  		jmp	DeleteObject
000149C4                            ; ===========================================================================
000149C4                            
000149C4                            Obj4A_Wait:
000149C4 4E75                       		rts	
000149C6                            ; ===========================================================================
000149C6                            ; ---------------------------------------------------------------------------
000149C6                            ; Object 08 - water splash (LZ)
000149C6                            ; ---------------------------------------------------------------------------
000149C6                            
000149C6                            Obj08:					; XREF: Obj_Index
000149C6 7000                       		moveq	#0,d0
000149C8 1028 0024                  		move.b	$24(a0),d0
000149CC 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
000149D0 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
000149D4                            ; ===========================================================================
000149D4 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
000149D6 0000                       		dc.w Obj08_Display-Obj08_Index
000149D8 0000                       		dc.w Obj08_Delete-Obj08_Index
000149DA                            ; ===========================================================================
000149DA                            
000149DA                            Obj08_Main:				; XREF: Obj08_Index
000149DA 5428 0024                  		addq.b	#2,$24(a0)
000149DE 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
000149E6 0028 0004 0001             		ori.b	#4,1(a0)
000149EC 117C 0001 0018             		move.b	#1,$18(a0)
000149F2 117C 0010 0019             		move.b	#$10,$19(a0)
000149F8 317C 4259 0002             		move.w	#$4259,2(a0)
000149FE 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00014A04                            
00014A04                            Obj08_Display:				; XREF: Obj08_Index
00014A04 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00014A0A 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00014A10 4EB9 0000 ACC4             		jsr	AnimateSprite
00014A16 4EFA 91E2                  		jmp	DisplaySprite
00014A1A                            ; ===========================================================================
00014A1A                            
00014A1A                            Obj08_Delete:				; XREF: Obj08_Index
00014A1A 4EFA 921A                  		jmp	DeleteObject	; delete when animation	is complete
00014A1E                            ; ===========================================================================
00014A1E                            Ani_obj38:
00014A1E                            	include "_anim\obj38.asm"
00014A1E                            ; ---------------------------------------------------------------------------
00014A1E                            ; Animation script - shield and invincibility stars
00014A1E                            ; ---------------------------------------------------------------------------
00014A1E 0000                       		dc.w byte_14356-Ani_obj38
00014A20 0000                       		dc.w byte_1435E-Ani_obj38
00014A22 0000                       		dc.w byte_14364-Ani_obj38
00014A24 0000                       		dc.w byte_1437E-Ani_obj38
00014A26 0000                       		dc.w byte_14398-Ani_obj38
00014A28 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00014A30 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014A36 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014A47 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00014A50 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00014A61 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00014A6A 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00014A7B 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00014A84                            		even
00014A84                            		even
00014A84                            
00014A84                            ; ---------------------------------------------------------------------------
00014A84                            ; Sprite mappings - shield and invincibility stars
00014A84                            ; ---------------------------------------------------------------------------
00014A84                            Map_obj38:
00014A84                            	include "_maps\obj38.asm"
00014A84                            ; ---------------------------------------------------------------------------
00014A84                            ; Sprite mappings - shield and invincibility stars
00014A84                            ; ---------------------------------------------------------------------------
00014A84 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00014A88 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00014A8C 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00014A90 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00014A94 04                         byte_143C2:	dc.b 4
00014A95 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014A9A E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014A9F 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00014AA4 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014AA9 04                         byte_143D7:	dc.b 4
00014AAA E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00014AAF E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00014AB4 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00014AB9 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00014ABE 04                         byte_143EC:	dc.b 4
00014ABF E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014AC4 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014AC9 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014ACE 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014AD3 04                         byte_14401:	dc.b 4
00014AD4 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014AD9 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014ADE 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014AE3 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014AE8 04                         byte_14416:	dc.b 4
00014AE9 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014AEE E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014AF3 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00014AF8 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014AFD 04                         byte_1442B:	dc.b 4
00014AFE E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00014B03 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014B08 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00014B0D 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00014B12 04                         byte_14440:	dc.b 4
00014B13 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014B18 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00014B1D 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00014B22 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014B28 00                         		even
00014B28 00                         		even
00014B28                            
00014B28                            Ani_obj4A:
00014B28                            	include "_anim\obj4A.asm"
00014B28                            ; ---------------------------------------------------------------------------
00014B28                            ; Animation script - special stage entry effect from beta
00014B28                            ; ---------------------------------------------------------------------------
00014B28 0000                       		dc.w byte_14458-Ani_obj4A
00014B2A 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00014B3E                            		even
00014B3E                            		even
00014B3E                            
00014B3E                            ; ---------------------------------------------------------------------------
00014B3E                            ; Sprite mappings - special stage entry	from beta
00014B3E                            ; ---------------------------------------------------------------------------
00014B3E                            Map_obj4A:
00014B3E                            	include "_maps\obj4A.asm"
00014B3E                            ; ---------------------------------------------------------------------------
00014B3E                            ; Sprite mappings - special stage entry	from beta
00014B3E                            ; ---------------------------------------------------------------------------
00014B3E 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00014B42 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014B46 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014B4A 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00014B4E 03                         byte_1447C:	dc.b 3
00014B4F F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00014B54 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014B59 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00014B5E 03                         byte_1448C:	dc.b 3
00014B5F F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00014B64 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014B69 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014B6E 05                         byte_1449C:	dc.b 5
00014B6F E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00014B74 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014B79 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014B7E 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00014B83 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014B88 09                         byte_144B6:	dc.b 9
00014B89 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00014B8E F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00014B93 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00014B98 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00014B9D F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00014BA2 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00014BA7 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014BAC 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00014BB1 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00014BB6 12                         byte_144E4:	dc.b $12
00014BB7 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00014BBC F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00014BC1 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00014BC6 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00014BCB 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00014BD0 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00014BD5 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00014BDA F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00014BDF 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00014BE4 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00014BE9 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00014BEE 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00014BF3 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00014BF8 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00014BFD 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00014C02 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00014C07 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00014C0C F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00014C11 11                         byte_1453F:	dc.b $11
00014C12 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00014C17 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00014C1C 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00014C21 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00014C26 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00014C2B F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014C30 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00014C35 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00014C3A 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00014C3F 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00014C44 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00014C49 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00014C4E F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00014C53 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00014C58 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00014C5D 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00014C62 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00014C67 09                         byte_14595:	dc.b 9
00014C68 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00014C6D 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00014C72 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00014C77 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00014C7C FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00014C81 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00014C86 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00014C8B 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00014C90 04                         		dc.b 4
00014C91 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00014C96                            		even
00014C96                            		even
00014C96                            
00014C96                            Ani_obj08:
00014C96                            	include "_anim\obj08.asm"
00014C96                            ; ---------------------------------------------------------------------------
00014C96                            ; Animation script - water splash (LZ)
00014C96                            ; ---------------------------------------------------------------------------
00014C96 0000                       		dc.w byte_145C6-Ani_obj08
00014C98 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00014C9E                            		even
00014C9E                            		even
00014C9E                            
00014C9E                            ; ---------------------------------------------------------------------------
00014C9E                            ; Sprite mappings - water splash (LZ)
00014C9E                            ; ---------------------------------------------------------------------------
00014C9E                            Map_obj08:
00014C9E                            	include "_maps\obj08.asm"
00014C9E                            ; ---------------------------------------------------------------------------
00014C9E                            ; Sprite mappings - water splash (LZ)
00014C9E                            ; ---------------------------------------------------------------------------
00014C9E 0000                       		dc.w byte_145D2-Map_obj08
00014CA0 0000                       		dc.w byte_145DD-Map_obj08
00014CA2 0000                       		dc.w byte_145E8-Map_obj08
00014CA4 02                         byte_145D2:	dc.b 2
00014CA5 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00014CAA FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00014CAF 02                         byte_145DD:	dc.b 2
00014CB0 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00014CB5 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00014CBA 01                         byte_145E8:	dc.b 1
00014CBB E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00014CC0                            		even
00014CC0                            		even
00014CC0                            
00014CC0                            ; ---------------------------------------------------------------------------
00014CC0                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00014CC0                            ; ---------------------------------------------------------------------------
00014CC0                            
00014CC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014CC0                            
00014CC0                            
00014CC0                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00014CC0 0828 0003 0022             		btst	#3,$22(a0)
00014CC6 6700                       		beq.s	loc_14602
00014CC8 7000                       		moveq	#0,d0
00014CCA 11C0 F768                  		move.b	d0,($FFFFF768).w
00014CCE 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014CD2 4E75                       		rts	
00014CD4                            ; ===========================================================================
00014CD4                            
00014CD4                            loc_14602:
00014CD4 7003                       		moveq	#3,d0
00014CD6 11C0 F768                  		move.b	d0,($FFFFF768).w
00014CDA 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014CDE 1028 0026                  		move.b	$26(a0),d0
00014CE2 0600 0020                  		addi.b	#$20,d0
00014CE6 6A00                       		bpl.s	loc_14624
00014CE8 1028 0026                  		move.b	$26(a0),d0
00014CEC 6A00                       		bpl.s	loc_1461E
00014CEE 5300                       		subq.b	#1,d0
00014CF0                            
00014CF0                            loc_1461E:
00014CF0 0600 0020                  		addi.b	#$20,d0
00014CF4 6000                       		bra.s	loc_14630
00014CF6                            ; ===========================================================================
00014CF6                            
00014CF6                            loc_14624:
00014CF6 1028 0026                  		move.b	$26(a0),d0
00014CFA 6A00                       		bpl.s	loc_1462C
00014CFC 5200                       		addq.b	#1,d0
00014CFE                            
00014CFE                            loc_1462C:
00014CFE 0600 001F                  		addi.b	#$1F,d0
00014D02                            
00014D02                            loc_14630:
00014D02 0200 00C0                  		andi.b	#$C0,d0
00014D06 0C00 0040                  		cmpi.b	#$40,d0
00014D0A 6700 0000                  		beq.w	Sonic_WalkVertL
00014D0E 0C00 0080                  		cmpi.b	#$80,d0
00014D12 6700 0000                  		beq.w	Sonic_WalkCeiling
00014D16 0C00 00C0                  		cmpi.b	#$C0,d0
00014D1A 6700 0000                  		beq.w	Sonic_WalkVertR
00014D1E 3428 000C                  		move.w	$C(a0),d2
00014D22 3628 0008                  		move.w	8(a0),d3
00014D26 7000                       		moveq	#0,d0
00014D28 1028 0016                  		move.b	$16(a0),d0
00014D2C 4880                       		ext.w	d0
00014D2E D440                       		add.w	d0,d2
00014D30 1028 0017                  		move.b	$17(a0),d0
00014D34 4880                       		ext.w	d0
00014D36 D640                       		add.w	d0,d3
00014D38 49F8 F768                  		lea	($FFFFF768).w,a4
00014D3C 367C 0010                  		movea.w	#$10,a3
00014D40 3C3C 0000                  		move.w	#0,d6
00014D44 7A0D                       		moveq	#$D,d5
00014D46 6100 0000                  		bsr.w	FindFloor
00014D4A 3F01                       		move.w	d1,-(sp)
00014D4C 3428 000C                  		move.w	$C(a0),d2
00014D50 3628 0008                  		move.w	8(a0),d3
00014D54 7000                       		moveq	#0,d0
00014D56 1028 0016                  		move.b	$16(a0),d0
00014D5A 4880                       		ext.w	d0
00014D5C D440                       		add.w	d0,d2
00014D5E 1028 0017                  		move.b	$17(a0),d0
00014D62 4880                       		ext.w	d0
00014D64 4440                       		neg.w	d0
00014D66 D640                       		add.w	d0,d3
00014D68 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014D6C 367C 0010                  		movea.w	#$10,a3
00014D70 3C3C 0000                  		move.w	#0,d6
00014D74 7A0D                       		moveq	#$D,d5
00014D76 6100 0000                  		bsr.w	FindFloor
00014D7A 301F                       		move.w	(sp)+,d0
00014D7C 6100 0000                  		bsr.w	Sonic_Angle
00014D80 4A41                       		tst.w	d1
00014D82 6700                       		beq.s	locret_146BE
00014D84 6A00                       		bpl.s	loc_146C0
00014D86 0C41 FFF2                  		cmpi.w	#-$E,d1
00014D8A 6D00                       		blt.s	locret_146E6
00014D8C D368 000C                  		add.w	d1,$C(a0)
00014D90                            
00014D90                            locret_146BE:
00014D90 4E75                       		rts	
00014D92                            ; ===========================================================================
00014D92                            
00014D92                            loc_146C0:
00014D92 0C41 000E                  		cmpi.w	#$E,d1
00014D96 6E00                       		bgt.s	loc_146CC
00014D98                            
00014D98                            loc_146C6:
00014D98 D368 000C                  		add.w	d1,$C(a0)
00014D9C 4E75                       		rts	
00014D9E                            ; ===========================================================================
00014D9E                            
00014D9E                            loc_146CC:
00014D9E 4A28 0038                  		tst.b	$38(a0)
00014DA2 66F4                       		bne.s	loc_146C6
00014DA4 08E8 0001 0022             		bset	#1,$22(a0)
00014DAA 08A8 0005 0022             		bclr	#5,$22(a0)
00014DB0 117C 0001 001D             		move.b	#1,$1D(a0)
00014DB6 4E75                       		rts	
00014DB8                            ; ===========================================================================
00014DB8                            
00014DB8                            locret_146E6:
00014DB8 4E75                       		rts	
00014DBA                            ; End of function Sonic_AnglePos
00014DBA                            
00014DBA                            ; ===========================================================================
00014DBA 2428 0008                  		move.l	8(a0),d2
00014DBE 3028 0010                  		move.w	$10(a0),d0
00014DC2 48C0                       		ext.l	d0
00014DC4 E180                       		asl.l	#8,d0
00014DC6 9480                       		sub.l	d0,d2
00014DC8 2142 0008                  		move.l	d2,8(a0)
00014DCC 303C 0038                  		move.w	#$38,d0
00014DD0 48C0                       		ext.l	d0
00014DD2 E180                       		asl.l	#8,d0
00014DD4 9680                       		sub.l	d0,d3
00014DD6 2143 000C                  		move.l	d3,$C(a0)
00014DDA 4E75                       		rts	
00014DDC                            ; ===========================================================================
00014DDC                            
00014DDC                            locret_1470A:
00014DDC 4E75                       		rts	
00014DDE                            ; ===========================================================================
00014DDE 2628 000C                  		move.l	$C(a0),d3
00014DE2 3028 0012                  		move.w	$12(a0),d0
00014DE6 0440 0038                  		subi.w	#$38,d0
00014DEA 3140 0012                  		move.w	d0,$12(a0)
00014DEE 48C0                       		ext.l	d0
00014DF0 E180                       		asl.l	#8,d0
00014DF2 9680                       		sub.l	d0,d3
00014DF4 2143 000C                  		move.l	d3,$C(a0)
00014DF8 4E75                       		rts	
00014DFA 4E75                       		rts	
00014DFC                            ; ===========================================================================
00014DFC 2428 0008                  		move.l	8(a0),d2
00014E00 2628 000C                  		move.l	$C(a0),d3
00014E04 3028 0010                  		move.w	$10(a0),d0
00014E08 48C0                       		ext.l	d0
00014E0A E180                       		asl.l	#8,d0
00014E0C 9480                       		sub.l	d0,d2
00014E0E 3028 0012                  		move.w	$12(a0),d0
00014E12 48C0                       		ext.l	d0
00014E14 E180                       		asl.l	#8,d0
00014E16 9680                       		sub.l	d0,d3
00014E18 2142 0008                  		move.l	d2,8(a0)
00014E1C 2143 000C                  		move.l	d3,$C(a0)
00014E20 4E75                       		rts	
00014E22                            
00014E22                            ; ---------------------------------------------------------------------------
00014E22                            ; Subroutine to	change Sonic's angle as he walks along the floor
00014E22                            ; ---------------------------------------------------------------------------
00014E22                            
00014E22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E22                            
00014E22                            
00014E22                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00014E22 1438 F76A                  		move.b	($FFFFF76A).w,d2
00014E26 B240                       		cmp.w	d0,d1
00014E28 6F00                       		ble.s	loc_1475E
00014E2A 1438 F768                  		move.b	($FFFFF768).w,d2
00014E2E 3200                       		move.w	d0,d1
00014E30                            
00014E30                            loc_1475E:
00014E30 0802 0000                  		btst	#0,d2
00014E34 6600                       		bne.s	loc_1476A
00014E36 1142 0026                  		move.b	d2,$26(a0)
00014E3A 4E75                       		rts	
00014E3C                            ; ===========================================================================
00014E3C                            
00014E3C                            loc_1476A:
00014E3C 1428 0026                  		move.b	$26(a0),d2
00014E40 0602 0020                  		addi.b	#$20,d2
00014E44 0202 00C0                  		andi.b	#$C0,d2
00014E48 1142 0026                  		move.b	d2,$26(a0)
00014E4C 4E75                       		rts	
00014E4E                            ; End of function Sonic_Angle
00014E4E                            
00014E4E                            ; ---------------------------------------------------------------------------
00014E4E                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00014E4E                            ; ---------------------------------------------------------------------------
00014E4E                            
00014E4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E4E                            
00014E4E                            
00014E4E                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00014E4E 3428 000C                  		move.w	$C(a0),d2
00014E52 3628 0008                  		move.w	8(a0),d3
00014E56 7000                       		moveq	#0,d0
00014E58 1028 0017                  		move.b	$17(a0),d0
00014E5C 4880                       		ext.w	d0
00014E5E 4440                       		neg.w	d0
00014E60 D440                       		add.w	d0,d2
00014E62 1028 0016                  		move.b	$16(a0),d0
00014E66 4880                       		ext.w	d0
00014E68 D640                       		add.w	d0,d3
00014E6A 49F8 F768                  		lea	($FFFFF768).w,a4
00014E6E 367C 0010                  		movea.w	#$10,a3
00014E72 3C3C 0000                  		move.w	#0,d6
00014E76 7A0D                       		moveq	#$D,d5
00014E78 6100 0000                  		bsr.w	FindWall
00014E7C 3F01                       		move.w	d1,-(sp)
00014E7E 3428 000C                  		move.w	$C(a0),d2
00014E82 3628 0008                  		move.w	8(a0),d3
00014E86 7000                       		moveq	#0,d0
00014E88 1028 0017                  		move.b	$17(a0),d0
00014E8C 4880                       		ext.w	d0
00014E8E D440                       		add.w	d0,d2
00014E90 1028 0016                  		move.b	$16(a0),d0
00014E94 4880                       		ext.w	d0
00014E96 D640                       		add.w	d0,d3
00014E98 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014E9C 367C 0010                  		movea.w	#$10,a3
00014EA0 3C3C 0000                  		move.w	#0,d6
00014EA4 7A0D                       		moveq	#$D,d5
00014EA6 6100 0000                  		bsr.w	FindWall
00014EAA 301F                       		move.w	(sp)+,d0
00014EAC 6100 FF74                  		bsr.w	Sonic_Angle
00014EB0 4A41                       		tst.w	d1
00014EB2 6700                       		beq.s	locret_147F0
00014EB4 6A00                       		bpl.s	loc_147F2
00014EB6 0C41 FFF2                  		cmpi.w	#-$E,d1
00014EBA 6D00 FF20                  		blt.w	locret_1470A
00014EBE D368 0008                  		add.w	d1,8(a0)
00014EC2                            
00014EC2                            locret_147F0:
00014EC2 4E75                       		rts	
00014EC4                            ; ===========================================================================
00014EC4                            
00014EC4                            loc_147F2:
00014EC4 0C41 000E                  		cmpi.w	#$E,d1
00014EC8 6E00                       		bgt.s	loc_147FE
00014ECA                            
00014ECA                            loc_147F8:
00014ECA D368 0008                  		add.w	d1,8(a0)
00014ECE 4E75                       		rts	
00014ED0                            ; ===========================================================================
00014ED0                            
00014ED0                            loc_147FE:
00014ED0 4A28 0038                  		tst.b	$38(a0)
00014ED4 66F4                       		bne.s	loc_147F8
00014ED6 08E8 0001 0022             		bset	#1,$22(a0)
00014EDC 08A8 0005 0022             		bclr	#5,$22(a0)
00014EE2 117C 0001 001D             		move.b	#1,$1D(a0)
00014EE8 4E75                       		rts	
00014EEA                            ; End of function Sonic_WalkVertR
00014EEA                            
00014EEA                            ; ---------------------------------------------------------------------------
00014EEA                            ; Subroutine allowing Sonic to walk upside-down
00014EEA                            ; ---------------------------------------------------------------------------
00014EEA                            
00014EEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014EEA                            
00014EEA                            
00014EEA                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00014EEA 3428 000C                  		move.w	$C(a0),d2
00014EEE 3628 0008                  		move.w	8(a0),d3
00014EF2 7000                       		moveq	#0,d0
00014EF4 1028 0016                  		move.b	$16(a0),d0
00014EF8 4880                       		ext.w	d0
00014EFA 9440                       		sub.w	d0,d2
00014EFC 0A42 000F                  		eori.w	#$F,d2
00014F00 1028 0017                  		move.b	$17(a0),d0
00014F04 4880                       		ext.w	d0
00014F06 D640                       		add.w	d0,d3
00014F08 49F8 F768                  		lea	($FFFFF768).w,a4
00014F0C 367C FFF0                  		movea.w	#-$10,a3
00014F10 3C3C 1000                  		move.w	#$1000,d6
00014F14 7A0D                       		moveq	#$D,d5
00014F16 6100 0000                  		bsr.w	FindFloor
00014F1A 3F01                       		move.w	d1,-(sp)
00014F1C 3428 000C                  		move.w	$C(a0),d2
00014F20 3628 0008                  		move.w	8(a0),d3
00014F24 7000                       		moveq	#0,d0
00014F26 1028 0016                  		move.b	$16(a0),d0
00014F2A 4880                       		ext.w	d0
00014F2C 9440                       		sub.w	d0,d2
00014F2E 0A42 000F                  		eori.w	#$F,d2
00014F32 1028 0017                  		move.b	$17(a0),d0
00014F36 4880                       		ext.w	d0
00014F38 9640                       		sub.w	d0,d3
00014F3A 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014F3E 367C FFF0                  		movea.w	#-$10,a3
00014F42 3C3C 1000                  		move.w	#$1000,d6
00014F46 7A0D                       		moveq	#$D,d5
00014F48 6100 0000                  		bsr.w	FindFloor
00014F4C 301F                       		move.w	(sp)+,d0
00014F4E 6100 FED2                  		bsr.w	Sonic_Angle
00014F52 4A41                       		tst.w	d1
00014F54 6700                       		beq.s	locret_14892
00014F56 6A00                       		bpl.s	loc_14894
00014F58 0C41 FFF2                  		cmpi.w	#-$E,d1
00014F5C 6D00 FE5A                  		blt.w	locret_146E6
00014F60 9368 000C                  		sub.w	d1,$C(a0)
00014F64                            
00014F64                            locret_14892:
00014F64 4E75                       		rts	
00014F66                            ; ===========================================================================
00014F66                            
00014F66                            loc_14894:
00014F66 0C41 000E                  		cmpi.w	#$E,d1
00014F6A 6E00                       		bgt.s	loc_148A0
00014F6C                            
00014F6C                            loc_1489A:
00014F6C 9368 000C                  		sub.w	d1,$C(a0)
00014F70 4E75                       		rts	
00014F72                            ; ===========================================================================
00014F72                            
00014F72                            loc_148A0:
00014F72 4A28 0038                  		tst.b	$38(a0)
00014F76 66F4                       		bne.s	loc_1489A
00014F78 08E8 0001 0022             		bset	#1,$22(a0)
00014F7E 08A8 0005 0022             		bclr	#5,$22(a0)
00014F84 117C 0001 001D             		move.b	#1,$1D(a0)
00014F8A 4E75                       		rts	
00014F8C                            ; End of function Sonic_WalkCeiling
00014F8C                            
00014F8C                            ; ---------------------------------------------------------------------------
00014F8C                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00014F8C                            ; ---------------------------------------------------------------------------
00014F8C                            
00014F8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F8C                            
00014F8C                            
00014F8C                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
00014F8C 3428 000C                  		move.w	$C(a0),d2
00014F90 3628 0008                  		move.w	8(a0),d3
00014F94 7000                       		moveq	#0,d0
00014F96 1028 0017                  		move.b	$17(a0),d0
00014F9A 4880                       		ext.w	d0
00014F9C 9440                       		sub.w	d0,d2
00014F9E 1028 0016                  		move.b	$16(a0),d0
00014FA2 4880                       		ext.w	d0
00014FA4 9640                       		sub.w	d0,d3
00014FA6 0A43 000F                  		eori.w	#$F,d3
00014FAA 49F8 F768                  		lea	($FFFFF768).w,a4
00014FAE 367C FFF0                  		movea.w	#-$10,a3
00014FB2 3C3C 0800                  		move.w	#$800,d6
00014FB6 7A0D                       		moveq	#$D,d5
00014FB8 6100 0000                  		bsr.w	FindWall
00014FBC 3F01                       		move.w	d1,-(sp)
00014FBE 3428 000C                  		move.w	$C(a0),d2
00014FC2 3628 0008                  		move.w	8(a0),d3
00014FC6 7000                       		moveq	#0,d0
00014FC8 1028 0017                  		move.b	$17(a0),d0
00014FCC 4880                       		ext.w	d0
00014FCE D440                       		add.w	d0,d2
00014FD0 1028 0016                  		move.b	$16(a0),d0
00014FD4 4880                       		ext.w	d0
00014FD6 9640                       		sub.w	d0,d3
00014FD8 0A43 000F                  		eori.w	#$F,d3
00014FDC 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014FE0 367C FFF0                  		movea.w	#-$10,a3
00014FE4 3C3C 0800                  		move.w	#$800,d6
00014FE8 7A0D                       		moveq	#$D,d5
00014FEA 6100 0000                  		bsr.w	FindWall
00014FEE 301F                       		move.w	(sp)+,d0
00014FF0 6100 FE30                  		bsr.w	Sonic_Angle
00014FF4 4A41                       		tst.w	d1
00014FF6 6700                       		beq.s	locret_14934
00014FF8 6A00                       		bpl.s	loc_14936
00014FFA 0C41 FFF2                  		cmpi.w	#-$E,d1
00014FFE 6D00 FDDC                  		blt.w	locret_1470A
00015002 9368 0008                  		sub.w	d1,8(a0)
00015006                            
00015006                            locret_14934:
00015006 4E75                       		rts	
00015008                            ; ===========================================================================
00015008                            
00015008                            loc_14936:
00015008 0C41 000E                  		cmpi.w	#$E,d1
0001500C 6E00                       		bgt.s	loc_14942
0001500E                            
0001500E                            loc_1493C:
0001500E 9368 0008                  		sub.w	d1,8(a0)
00015012 4E75                       		rts	
00015014                            ; ===========================================================================
00015014                            
00015014                            loc_14942:
00015014 4A28 0038                  		tst.b	$38(a0)
00015018 66F4                       		bne.s	loc_1493C
0001501A 08E8 0001 0022             		bset	#1,$22(a0)
00015020 08A8 0005 0022             		bclr	#5,$22(a0)
00015026 117C 0001 001D             		move.b	#1,$1D(a0)
0001502C 4E75                       		rts	
0001502E                            ; End of function Sonic_WalkVertL
0001502E                            
0001502E                            ; ---------------------------------------------------------------------------
0001502E                            ; Subroutine to	find which tile	the object is standing on
0001502E                            ; ---------------------------------------------------------------------------
0001502E                            
0001502E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001502E                            
0001502E                            
0001502E                            Floor_ChkTile:				; XREF: FindFloor; et al
0001502E 3002                       		move.w	d2,d0
00015030 E248                       		lsr.w	#1,d0
00015032 0240 0380                  		andi.w	#$380,d0
00015036 3203                       		move.w	d3,d1
00015038 E049                       		lsr.w	#8,d1
0001503A 0241 007F                  		andi.w	#$7F,d1
0001503E D041                       		add.w	d1,d0
00015040 72FF                       		moveq	#-1,d1
00015042 43F8 A400                  		lea	($FFFFA400).w,a1
00015046 1231 0000                  		move.b	(a1,d0.w),d1
0001504A 6700                       		beq.s	loc_14996
0001504C 6B00                       		bmi.s	loc_1499A
0001504E 5301                       		subq.b	#1,d1
00015050 4881                       		ext.w	d1
00015052 EE59                       		ror.w	#7,d1
00015054 3002                       		move.w	d2,d0
00015056 D040                       		add.w	d0,d0
00015058 0240 01E0                  		andi.w	#$1E0,d0
0001505C D240                       		add.w	d0,d1
0001505E 3003                       		move.w	d3,d0
00015060 E648                       		lsr.w	#3,d0
00015062 0240 001E                  		andi.w	#$1E,d0
00015066 D240                       		add.w	d0,d1
00015068                            
00015068                            loc_14996:
00015068 2241                       		movea.l	d1,a1
0001506A 4E75                       		rts	
0001506C                            ; ===========================================================================
0001506C                            
0001506C                            loc_1499A:
0001506C 0241 007F                  		andi.w	#$7F,d1
00015070 0828 0006 0001             		btst	#6,1(a0)
00015076 6700                       		beq.s	loc_149B2
00015078 5241                       		addq.w	#1,d1
0001507A 0C41 0029                  		cmpi.w	#$29,d1
0001507E 6600                       		bne.s	loc_149B2
00015080 323C 0051                  		move.w	#$51,d1
00015084                            
00015084                            loc_149B2:
00015084 5301                       		subq.b	#1,d1
00015086 EE59                       		ror.w	#7,d1
00015088 3002                       		move.w	d2,d0
0001508A D040                       		add.w	d0,d0
0001508C 0240 01E0                  		andi.w	#$1E0,d0
00015090 D240                       		add.w	d0,d1
00015092 3003                       		move.w	d3,d0
00015094 E648                       		lsr.w	#3,d0
00015096 0240 001E                  		andi.w	#$1E,d0
0001509A D240                       		add.w	d0,d1
0001509C 2241                       		movea.l	d1,a1
0001509E 4E75                       		rts	
000150A0                            ; End of function Floor_ChkTile
000150A0                            
000150A0                            
000150A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150A0                            
000150A0                            
000150A0                            FindFloor:				; XREF: Sonic_AnglePos; et al
000150A0 618C                       		bsr.s	Floor_ChkTile
000150A2 3011                       		move.w	(a1),d0
000150A4 3800                       		move.w	d0,d4
000150A6 0240 07FF                  		andi.w	#$7FF,d0
000150AA 6700                       		beq.s	loc_149DE
000150AC 0B04                       		btst	d5,d4
000150AE 6600                       		bne.s	loc_149EC
000150B0                            
000150B0                            loc_149DE:
000150B0 D44B                       		add.w	a3,d2
000150B2 6100 0000                  		bsr.w	FindFloor2
000150B6 944B                       		sub.w	a3,d2
000150B8 0641 0010                  		addi.w	#$10,d1
000150BC 4E75                       		rts	
000150BE                            ; ===========================================================================
000150BE                            
000150BE                            loc_149EC:
000150BE 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
000150C2 1032 0000                  		move.b	(a2,d0.w),d0
000150C6 0240 00FF                  		andi.w	#$FF,d0
000150CA 67E4                       		beq.s	loc_149DE
000150CC 45F9 0000 0000             		lea	(AngleMap).l,a2
000150D2 18B2 0000                  		move.b	(a2,d0.w),(a4)
000150D6 E948                       		lsl.w	#4,d0
000150D8 3203                       		move.w	d3,d1
000150DA 0804 000B                  		btst	#$B,d4
000150DE 6700                       		beq.s	loc_14A12
000150E0 4641                       		not.w	d1
000150E2 4414                       		neg.b	(a4)
000150E4                            
000150E4                            loc_14A12:
000150E4 0804 000C                  		btst	#$C,d4
000150E8 6700                       		beq.s	loc_14A22
000150EA 0614 0040                  		addi.b	#$40,(a4)
000150EE 4414                       		neg.b	(a4)
000150F0 0414 0040                  		subi.b	#$40,(a4)
000150F4                            
000150F4                            loc_14A22:
000150F4 0241 000F                  		andi.w	#$F,d1
000150F8 D240                       		add.w	d0,d1
000150FA 45F9 0000 0000             		lea	(CollArray1).l,a2
00015100 1032 1000                  		move.b	(a2,d1.w),d0
00015104 4880                       		ext.w	d0
00015106 BD44                       		eor.w	d6,d4
00015108 0804 000C                  		btst	#$C,d4
0001510C 6700                       		beq.s	loc_14A3E
0001510E 4440                       		neg.w	d0
00015110                            
00015110                            loc_14A3E:
00015110 4A40                       		tst.w	d0
00015112 679C                       		beq.s	loc_149DE
00015114 6B00                       		bmi.s	loc_14A5A
00015116 0C00 0010                  		cmpi.b	#$10,d0
0001511A 6700                       		beq.s	loc_14A66
0001511C 3202                       		move.w	d2,d1
0001511E 0241 000F                  		andi.w	#$F,d1
00015122 D041                       		add.w	d1,d0
00015124 323C 000F                  		move.w	#$F,d1
00015128 9240                       		sub.w	d0,d1
0001512A 4E75                       		rts	
0001512C                            ; ===========================================================================
0001512C                            
0001512C                            loc_14A5A:
0001512C 3202                       		move.w	d2,d1
0001512E 0241 000F                  		andi.w	#$F,d1
00015132 D041                       		add.w	d1,d0
00015134 6A00 FF7A                  		bpl.w	loc_149DE
00015138                            
00015138                            loc_14A66:
00015138 944B                       		sub.w	a3,d2
0001513A 6100 0000                  		bsr.w	FindFloor2
0001513E D44B                       		add.w	a3,d2
00015140 0441 0010                  		subi.w	#$10,d1
00015144 4E75                       		rts	
00015146                            ; End of function FindFloor
00015146                            
00015146                            
00015146                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015146                            
00015146                            
00015146                            FindFloor2:				; XREF: FindFloor
00015146 6100 FEE6                  		bsr.w	Floor_ChkTile
0001514A 3011                       		move.w	(a1),d0
0001514C 3800                       		move.w	d0,d4
0001514E 0240 07FF                  		andi.w	#$7FF,d0
00015152 6700                       		beq.s	loc_14A86
00015154 0B04                       		btst	d5,d4
00015156 6600                       		bne.s	loc_14A94
00015158                            
00015158                            loc_14A86:
00015158 323C 000F                  		move.w	#$F,d1
0001515C 3002                       		move.w	d2,d0
0001515E 0240 000F                  		andi.w	#$F,d0
00015162 9240                       		sub.w	d0,d1
00015164 4E75                       		rts	
00015166                            ; ===========================================================================
00015166                            
00015166                            loc_14A94:
00015166 2478 F796                  		movea.l	($FFFFF796).w,a2
0001516A 1032 0000                  		move.b	(a2,d0.w),d0
0001516E 0240 00FF                  		andi.w	#$FF,d0
00015172 67E4                       		beq.s	loc_14A86
00015174 45F9 0000 0000             		lea	(AngleMap).l,a2
0001517A 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001517E E948                       		lsl.w	#4,d0
00015180 3203                       		move.w	d3,d1
00015182 0804 000B                  		btst	#$B,d4
00015186 6700                       		beq.s	loc_14ABA
00015188 4641                       		not.w	d1
0001518A 4414                       		neg.b	(a4)
0001518C                            
0001518C                            loc_14ABA:
0001518C 0804 000C                  		btst	#$C,d4
00015190 6700                       		beq.s	loc_14ACA
00015192 0614 0040                  		addi.b	#$40,(a4)
00015196 4414                       		neg.b	(a4)
00015198 0414 0040                  		subi.b	#$40,(a4)
0001519C                            
0001519C                            loc_14ACA:
0001519C 0241 000F                  		andi.w	#$F,d1
000151A0 D240                       		add.w	d0,d1
000151A2 45F9 0000 0000             		lea	(CollArray1).l,a2
000151A8 1032 1000                  		move.b	(a2,d1.w),d0
000151AC 4880                       		ext.w	d0
000151AE BD44                       		eor.w	d6,d4
000151B0 0804 000C                  		btst	#$C,d4
000151B4 6700                       		beq.s	loc_14AE6
000151B6 4440                       		neg.w	d0
000151B8                            
000151B8                            loc_14AE6:
000151B8 4A40                       		tst.w	d0
000151BA 679C                       		beq.s	loc_14A86
000151BC 6B00                       		bmi.s	loc_14AFC
000151BE 3202                       		move.w	d2,d1
000151C0 0241 000F                  		andi.w	#$F,d1
000151C4 D041                       		add.w	d1,d0
000151C6 323C 000F                  		move.w	#$F,d1
000151CA 9240                       		sub.w	d0,d1
000151CC 4E75                       		rts	
000151CE                            ; ===========================================================================
000151CE                            
000151CE                            loc_14AFC:
000151CE 3202                       		move.w	d2,d1
000151D0 0241 000F                  		andi.w	#$F,d1
000151D4 D041                       		add.w	d1,d0
000151D6 6A00 FF80                  		bpl.w	loc_14A86
000151DA 4641                       		not.w	d1
000151DC 4E75                       		rts	
000151DE                            ; End of function FindFloor2
000151DE                            
000151DE                            
000151DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151DE                            
000151DE                            
000151DE                            FindWall:				; XREF: Sonic_WalkVertR; et al
000151DE 6100 FE4E                  		bsr.w	Floor_ChkTile
000151E2 3011                       		move.w	(a1),d0
000151E4 3800                       		move.w	d0,d4
000151E6 0240 07FF                  		andi.w	#$7FF,d0
000151EA 6700                       		beq.s	loc_14B1E
000151EC 0B04                       		btst	d5,d4
000151EE 6600                       		bne.s	loc_14B2C
000151F0                            
000151F0                            loc_14B1E:
000151F0 D64B                       		add.w	a3,d3
000151F2 6100 0000                  		bsr.w	FindWall2
000151F6 964B                       		sub.w	a3,d3
000151F8 0641 0010                  		addi.w	#$10,d1
000151FC 4E75                       		rts	
000151FE                            ; ===========================================================================
000151FE                            
000151FE                            loc_14B2C:
000151FE 2478 F796                  		movea.l	($FFFFF796).w,a2
00015202 1032 0000                  		move.b	(a2,d0.w),d0
00015206 0240 00FF                  		andi.w	#$FF,d0
0001520A 67E4                       		beq.s	loc_14B1E
0001520C 45F9 0000 0000             		lea	(AngleMap).l,a2
00015212 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015216 E948                       		lsl.w	#4,d0
00015218 3202                       		move.w	d2,d1
0001521A 0804 000C                  		btst	#$C,d4
0001521E 6700                       		beq.s	loc_14B5A
00015220 4641                       		not.w	d1
00015222 0614 0040                  		addi.b	#$40,(a4)
00015226 4414                       		neg.b	(a4)
00015228 0414 0040                  		subi.b	#$40,(a4)
0001522C                            
0001522C                            loc_14B5A:
0001522C 0804 000B                  		btst	#$B,d4
00015230 6700                       		beq.s	loc_14B62
00015232 4414                       		neg.b	(a4)
00015234                            
00015234                            loc_14B62:
00015234 0241 000F                  		andi.w	#$F,d1
00015238 D240                       		add.w	d0,d1
0001523A 45F9 0000 0000             		lea	(CollArray2).l,a2
00015240 1032 1000                  		move.b	(a2,d1.w),d0
00015244 4880                       		ext.w	d0
00015246 BD44                       		eor.w	d6,d4
00015248 0804 000B                  		btst	#$B,d4
0001524C 6700                       		beq.s	loc_14B7E
0001524E 4440                       		neg.w	d0
00015250                            
00015250                            loc_14B7E:
00015250 4A40                       		tst.w	d0
00015252 679C                       		beq.s	loc_14B1E
00015254 6B00                       		bmi.s	loc_14B9A
00015256 0C00 0010                  		cmpi.b	#$10,d0
0001525A 6700                       		beq.s	loc_14BA6
0001525C 3203                       		move.w	d3,d1
0001525E 0241 000F                  		andi.w	#$F,d1
00015262 D041                       		add.w	d1,d0
00015264 323C 000F                  		move.w	#$F,d1
00015268 9240                       		sub.w	d0,d1
0001526A 4E75                       		rts	
0001526C                            ; ===========================================================================
0001526C                            
0001526C                            loc_14B9A:
0001526C 3203                       		move.w	d3,d1
0001526E 0241 000F                  		andi.w	#$F,d1
00015272 D041                       		add.w	d1,d0
00015274 6A00 FF7A                  		bpl.w	loc_14B1E
00015278                            
00015278                            loc_14BA6:
00015278 964B                       		sub.w	a3,d3
0001527A 6100 0000                  		bsr.w	FindWall2
0001527E D64B                       		add.w	a3,d3
00015280 0441 0010                  		subi.w	#$10,d1
00015284 4E75                       		rts	
00015286                            ; End of function FindWall
00015286                            
00015286                            
00015286                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015286                            
00015286                            
00015286                            FindWall2:				; XREF: FindWall
00015286 6100 FDA6                  		bsr.w	Floor_ChkTile
0001528A 3011                       		move.w	(a1),d0
0001528C 3800                       		move.w	d0,d4
0001528E 0240 07FF                  		andi.w	#$7FF,d0
00015292 6700                       		beq.s	loc_14BC6
00015294 0B04                       		btst	d5,d4
00015296 6600                       		bne.s	loc_14BD4
00015298                            
00015298                            loc_14BC6:
00015298 323C 000F                  		move.w	#$F,d1
0001529C 3003                       		move.w	d3,d0
0001529E 0240 000F                  		andi.w	#$F,d0
000152A2 9240                       		sub.w	d0,d1
000152A4 4E75                       		rts	
000152A6                            ; ===========================================================================
000152A6                            
000152A6                            loc_14BD4:
000152A6 2478 F796                  		movea.l	($FFFFF796).w,a2
000152AA 1032 0000                  		move.b	(a2,d0.w),d0
000152AE 0240 00FF                  		andi.w	#$FF,d0
000152B2 67E4                       		beq.s	loc_14BC6
000152B4 45F9 0000 0000             		lea	(AngleMap).l,a2
000152BA 18B2 0000                  		move.b	(a2,d0.w),(a4)
000152BE E948                       		lsl.w	#4,d0
000152C0 3202                       		move.w	d2,d1
000152C2 0804 000C                  		btst	#$C,d4
000152C6 6700                       		beq.s	loc_14C02
000152C8 4641                       		not.w	d1
000152CA 0614 0040                  		addi.b	#$40,(a4)
000152CE 4414                       		neg.b	(a4)
000152D0 0414 0040                  		subi.b	#$40,(a4)
000152D4                            
000152D4                            loc_14C02:
000152D4 0804 000B                  		btst	#$B,d4
000152D8 6700                       		beq.s	loc_14C0A
000152DA 4414                       		neg.b	(a4)
000152DC                            
000152DC                            loc_14C0A:
000152DC 0241 000F                  		andi.w	#$F,d1
000152E0 D240                       		add.w	d0,d1
000152E2 45F9 0000 0000             		lea	(CollArray2).l,a2
000152E8 1032 1000                  		move.b	(a2,d1.w),d0
000152EC 4880                       		ext.w	d0
000152EE BD44                       		eor.w	d6,d4
000152F0 0804 000B                  		btst	#$B,d4
000152F4 6700                       		beq.s	loc_14C26
000152F6 4440                       		neg.w	d0
000152F8                            
000152F8                            loc_14C26:
000152F8 4A40                       		tst.w	d0
000152FA 679C                       		beq.s	loc_14BC6
000152FC 6B00                       		bmi.s	loc_14C3C
000152FE 3203                       		move.w	d3,d1
00015300 0241 000F                  		andi.w	#$F,d1
00015304 D041                       		add.w	d1,d0
00015306 323C 000F                  		move.w	#$F,d1
0001530A 9240                       		sub.w	d0,d1
0001530C 4E75                       		rts	
0001530E                            ; ===========================================================================
0001530E                            
0001530E                            loc_14C3C:
0001530E 3203                       		move.w	d3,d1
00015310 0241 000F                  		andi.w	#$F,d1
00015314 D041                       		add.w	d1,d0
00015316 6A00 FF80                  		bpl.w	loc_14BC6
0001531A 4641                       		not.w	d1
0001531C 4E75                       		rts	
0001531E                            ; End of function FindWall2
0001531E                            
0001531E                            ; ---------------------------------------------------------------------------
0001531E                            ; Unused floor/wall subroutine - logs something	to do with collision
0001531E                            ; ---------------------------------------------------------------------------
0001531E                            
0001531E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001531E                            
0001531E                            
0001531E                            FloorLog_Unk:				; XREF: Level
0001531E 4E75                       		rts	
00015320                            
00015320 43F9 0000 0000             		lea	(CollArray1).l,a1
00015326 45F9 0000 0000             		lea	(CollArray1).l,a2
0001532C 363C 00FF                  		move.w	#$FF,d3
00015330                            
00015330                            loc_14C5E:
00015330 7A10                       		moveq	#$10,d5
00015332 343C 000F                  		move.w	#$F,d2
00015336                            
00015336                            loc_14C64:
00015336 7800                       		moveq	#0,d4
00015338 323C 000F                  		move.w	#$F,d1
0001533C                            
0001533C                            loc_14C6A:
0001533C 3019                       		move.w	(a1)+,d0
0001533E EAA8                       		lsr.l	d5,d0
00015340 D944                       		addx.w	d4,d4
00015342 51C9 FFF8                  		dbf	d1,loc_14C6A
00015346                            
00015346 34C4                       		move.w	d4,(a2)+
00015348 92FC 0020                  		suba.w	#$20,a1
0001534C 5345                       		subq.w	#1,d5
0001534E 51CA FFE6                  		dbf	d2,loc_14C64
00015352                            
00015352 D2FC 0020                  		adda.w	#$20,a1
00015356 51CB FFD8                  		dbf	d3,loc_14C5E
0001535A                            
0001535A 43F9 0000 0000             		lea	(CollArray1).l,a1
00015360 45F9 0000 0000             		lea	(CollArray2).l,a2
00015366 6100                       		bsr.s	FloorLog_Unk2
00015368 43F9 0000 0000             		lea	(CollArray1).l,a1
0001536E 45F9 0000 0000             		lea	(CollArray1).l,a2
00015374                            
00015374                            ; End of function FloorLog_Unk
00015374                            
00015374                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015374                            
00015374                            
00015374                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00015374 363C 0FFF                  		move.w	#$FFF,d3
00015378                            
00015378                            loc_14CA6:
00015378 7400                       		moveq	#0,d2
0001537A 323C 000F                  		move.w	#$F,d1
0001537E 3019                       		move.w	(a1)+,d0
00015380 6700                       		beq.s	loc_14CD4
00015382 6B00                       		bmi.s	loc_14CBE
00015384                            
00015384                            loc_14CB2:
00015384 E248                       		lsr.w	#1,d0
00015386 6400                       		bcc.s	loc_14CB8
00015388 5202                       		addq.b	#1,d2
0001538A                            
0001538A                            loc_14CB8:
0001538A 51C9 FFF8                  		dbf	d1,loc_14CB2
0001538E                            
0001538E 6000                       		bra.s	loc_14CD6
00015390                            ; ===========================================================================
00015390                            
00015390                            loc_14CBE:
00015390 0C40 FFFF                  		cmpi.w	#-1,d0
00015394 6700                       		beq.s	loc_14CD0
00015396                            
00015396                            loc_14CC4:
00015396 E348                       		lsl.w	#1,d0
00015398 6400                       		bcc.s	loc_14CCA
0001539A 5302                       		subq.b	#1,d2
0001539C                            
0001539C                            loc_14CCA:
0001539C 51C9 FFF8                  		dbf	d1,loc_14CC4
000153A0                            
000153A0 6000                       		bra.s	loc_14CD6
000153A2                            ; ===========================================================================
000153A2                            
000153A2                            loc_14CD0:
000153A2 303C 0010                  		move.w	#$10,d0
000153A6                            
000153A6                            loc_14CD4:
000153A6 3400                       		move.w	d0,d2
000153A8                            
000153A8                            loc_14CD6:
000153A8 14C2                       		move.b	d2,(a2)+
000153AA 51CB FFCC                  		dbf	d3,loc_14CA6
000153AE                            
000153AE 4E75                       		rts	
000153B0                            
000153B0                            ; End of function FloorLog_Unk2
000153B0                            
000153B0                            
000153B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153B0                            
000153B0                            
000153B0                            Sonic_WalkSpeed:			; XREF: Sonic_Move
000153B0 2628 0008                  		move.l	8(a0),d3
000153B4 2428 000C                  		move.l	$C(a0),d2
000153B8 3228 0010                  		move.w	$10(a0),d1
000153BC 48C1                       		ext.l	d1
000153BE E181                       		asl.l	#8,d1
000153C0 D681                       		add.l	d1,d3
000153C2 3228 0012                  		move.w	$12(a0),d1
000153C6 48C1                       		ext.l	d1
000153C8 E181                       		asl.l	#8,d1
000153CA D481                       		add.l	d1,d2
000153CC 4842                       		swap	d2
000153CE 4843                       		swap	d3
000153D0 11C0 F768                  		move.b	d0,($FFFFF768).w
000153D4 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000153D8 1200                       		move.b	d0,d1
000153DA 0600 0020                  		addi.b	#$20,d0
000153DE 6A00                       		bpl.s	loc_14D1A
000153E0 1001                       		move.b	d1,d0
000153E2 6A00                       		bpl.s	loc_14D14
000153E4 5300                       		subq.b	#1,d0
000153E6                            
000153E6                            loc_14D14:
000153E6 0600 0020                  		addi.b	#$20,d0
000153EA 6000                       		bra.s	loc_14D24
000153EC                            ; ===========================================================================
000153EC                            
000153EC                            loc_14D1A:
000153EC 1001                       		move.b	d1,d0
000153EE 6A00                       		bpl.s	loc_14D20
000153F0 5200                       		addq.b	#1,d0
000153F2                            
000153F2                            loc_14D20:
000153F2 0600 001F                  		addi.b	#$1F,d0
000153F6                            
000153F6                            loc_14D24:
000153F6 0200 00C0                  		andi.b	#$C0,d0
000153FA 6700 0000                  		beq.w	loc_14DF0
000153FE 0C00 0080                  		cmpi.b	#$80,d0
00015402 6700 0000                  		beq.w	loc_14F7C
00015406 0201 0038                  		andi.b	#$38,d1
0001540A 6600                       		bne.s	loc_14D3C
0001540C 5042                       		addq.w	#8,d2
0001540E                            
0001540E                            loc_14D3C:
0001540E 0C00 0040                  		cmpi.b	#$40,d0
00015412 6700 0000                  		beq.w	loc_1504A
00015416 6000 0000                  		bra.w	loc_14EBC
0001541A                            
0001541A                            ; End of function Sonic_WalkSpeed
0001541A                            
0001541A                            
0001541A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001541A                            
0001541A                            
0001541A                            sub_14D48:				; XREF: Sonic_Jump
0001541A 11C0 F768                  		move.b	d0,($FFFFF768).w
0001541E 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015422 0600 0020                  		addi.b	#$20,d0
00015426 0200 00C0                  		andi.b	#$C0,d0
0001542A 0C00 0040                  		cmpi.b	#$40,d0
0001542E 6700 0000                  		beq.w	loc_14FD6
00015432 0C00 0080                  		cmpi.b	#$80,d0
00015436 6700 0000                  		beq.w	Sonic_DontRunOnWalls
0001543A 0C00 00C0                  		cmpi.b	#$C0,d0
0001543E 6700 0000                  		beq.w	sub_14E50
00015442                            
00015442                            ; End of function sub_14D48
00015442                            
00015442                            ; ---------------------------------------------------------------------------
00015442                            ; Subroutine to	make Sonic land	on the floor after jumping
00015442                            ; ---------------------------------------------------------------------------
00015442                            
00015442                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015442                            
00015442                            
00015442                            Sonic_HitFloor:				; XREF: Sonic_Floor
00015442 3428 000C                  		move.w	$C(a0),d2
00015446 3628 0008                  		move.w	8(a0),d3
0001544A 7000                       		moveq	#0,d0
0001544C 1028 0016                  		move.b	$16(a0),d0
00015450 4880                       		ext.w	d0
00015452 D440                       		add.w	d0,d2
00015454 1028 0017                  		move.b	$17(a0),d0
00015458 4880                       		ext.w	d0
0001545A D640                       		add.w	d0,d3
0001545C 49F8 F768                  		lea	($FFFFF768).w,a4
00015460 367C 0010                  		movea.w	#$10,a3
00015464 3C3C 0000                  		move.w	#0,d6
00015468 7A0D                       		moveq	#$D,d5
0001546A 6100 FC34                  		bsr.w	FindFloor
0001546E 3F01                       		move.w	d1,-(sp)
00015470 3428 000C                  		move.w	$C(a0),d2
00015474 3628 0008                  		move.w	8(a0),d3
00015478 7000                       		moveq	#0,d0
0001547A 1028 0016                  		move.b	$16(a0),d0
0001547E 4880                       		ext.w	d0
00015480 D440                       		add.w	d0,d2
00015482 1028 0017                  		move.b	$17(a0),d0
00015486 4880                       		ext.w	d0
00015488 9640                       		sub.w	d0,d3
0001548A 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001548E 367C 0010                  		movea.w	#$10,a3
00015492 3C3C 0000                  		move.w	#0,d6
00015496 7A0D                       		moveq	#$D,d5
00015498 6100 FC06                  		bsr.w	FindFloor
0001549C 301F                       		move.w	(sp)+,d0
0001549E 143C 0000                  		move.b	#0,d2
000154A2                            
000154A2                            loc_14DD0:
000154A2 1638 F76A                  		move.b	($FFFFF76A).w,d3
000154A6 B240                       		cmp.w	d0,d1
000154A8 6F00                       		ble.s	loc_14DDE
000154AA 1638 F768                  		move.b	($FFFFF768).w,d3
000154AE C141                       		exg	d0,d1
000154B0                            
000154B0                            loc_14DDE:
000154B0 0803 0000                  		btst	#0,d3
000154B4 6700                       		beq.s	locret_14DE6
000154B6 1602                       		move.b	d2,d3
000154B8                            
000154B8                            locret_14DE6:
000154B8 4E75                       		rts	
000154BA                            
000154BA                            ; End of function Sonic_HitFloor
000154BA                            
000154BA                            ; ===========================================================================
000154BA 3428 000C                  		move.w	$C(a0),d2
000154BE 3628 0008                  		move.w	8(a0),d3
000154C2                            
000154C2                            loc_14DF0:				; XREF: Sonic_WalkSpeed
000154C2 0642 000A                  		addi.w	#$A,d2
000154C6 49F8 F768                  		lea	($FFFFF768).w,a4
000154CA 367C 0010                  		movea.w	#$10,a3
000154CE 3C3C 0000                  		move.w	#0,d6
000154D2 7A0E                       		moveq	#$E,d5
000154D4 6100 FBCA                  		bsr.w	FindFloor
000154D8 143C 0000                  		move.b	#0,d2
000154DC                            
000154DC                            loc_14E0A:				; XREF: sub_14EB4
000154DC 1638 F768                  		move.b	($FFFFF768).w,d3
000154E0 0803 0000                  		btst	#0,d3
000154E4 6700                       		beq.s	locret_14E16
000154E6 1602                       		move.b	d2,d3
000154E8                            
000154E8                            locret_14E16:
000154E8 4E75                       		rts	
000154EA                            
000154EA                            ; ---------------------------------------------------------------------------
000154EA                            ; Subroutine allowing objects to interact with the floor
000154EA                            ; ---------------------------------------------------------------------------
000154EA                            
000154EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154EA                            
000154EA                            
000154EA                            ObjHitFloor:
000154EA 3628 0008                  		move.w	8(a0),d3
000154EE                            
000154EE                            ; End of function ObjHitFloor
000154EE                            
000154EE                            
000154EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154EE                            
000154EE                            
000154EE                            ObjHitFloor2:
000154EE 3428 000C                  		move.w	$C(a0),d2
000154F2 7000                       		moveq	#0,d0
000154F4 1028 0016                  		move.b	$16(a0),d0
000154F8 4880                       		ext.w	d0
000154FA D440                       		add.w	d0,d2
000154FC 49F8 F768                  		lea	($FFFFF768).w,a4
00015500 18BC 0000                  		move.b	#0,(a4)
00015504 367C 0010                  		movea.w	#$10,a3
00015508 3C3C 0000                  		move.w	#0,d6
0001550C 7A0D                       		moveq	#$D,d5
0001550E 6100 FB90                  		bsr.w	FindFloor
00015512 1638 F768                  		move.b	($FFFFF768).w,d3
00015516 0803 0000                  		btst	#0,d3
0001551A 6700                       		beq.s	locret_14E4E
0001551C 163C 0000                  		move.b	#0,d3
00015520                            
00015520                            locret_14E4E:
00015520 4E75                       		rts	
00015522                            ; End of function ObjHitFloor2
00015522                            
00015522                            
00015522                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015522                            
00015522                            
00015522                            sub_14E50:				; XREF: sub_14D48
00015522 3428 000C                  		move.w	$C(a0),d2
00015526 3628 0008                  		move.w	8(a0),d3
0001552A 7000                       		moveq	#0,d0
0001552C 1028 0017                  		move.b	$17(a0),d0
00015530 4880                       		ext.w	d0
00015532 9440                       		sub.w	d0,d2
00015534 1028 0016                  		move.b	$16(a0),d0
00015538 4880                       		ext.w	d0
0001553A D640                       		add.w	d0,d3
0001553C 49F8 F768                  		lea	($FFFFF768).w,a4
00015540 367C 0010                  		movea.w	#$10,a3
00015544 3C3C 0000                  		move.w	#0,d6
00015548 7A0E                       		moveq	#$E,d5
0001554A 6100 FC92                  		bsr.w	FindWall
0001554E 3F01                       		move.w	d1,-(sp)
00015550 3428 000C                  		move.w	$C(a0),d2
00015554 3628 0008                  		move.w	8(a0),d3
00015558 7000                       		moveq	#0,d0
0001555A 1028 0017                  		move.b	$17(a0),d0
0001555E 4880                       		ext.w	d0
00015560 D440                       		add.w	d0,d2
00015562 1028 0016                  		move.b	$16(a0),d0
00015566 4880                       		ext.w	d0
00015568 D640                       		add.w	d0,d3
0001556A 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001556E 367C 0010                  		movea.w	#$10,a3
00015572 3C3C 0000                  		move.w	#0,d6
00015576 7A0E                       		moveq	#$E,d5
00015578 6100 FC64                  		bsr.w	FindWall
0001557C 301F                       		move.w	(sp)+,d0
0001557E 143C 00C0                  		move.b	#-$40,d2
00015582 6000 FF1E                  		bra.w	loc_14DD0
00015586                            
00015586                            ; End of function sub_14E50
00015586                            
00015586                            
00015586                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015586                            
00015586                            
00015586                            sub_14EB4:				; XREF: Sonic_Floor
00015586 3428 000C                  		move.w	$C(a0),d2
0001558A 3628 0008                  		move.w	8(a0),d3
0001558E                            
0001558E                            loc_14EBC:
0001558E 0643 000A                  		addi.w	#$A,d3
00015592 49F8 F768                  		lea	($FFFFF768).w,a4
00015596 367C 0010                  		movea.w	#$10,a3
0001559A 3C3C 0000                  		move.w	#0,d6
0001559E 7A0E                       		moveq	#$E,d5
000155A0 6100 FC3C                  		bsr.w	FindWall
000155A4 143C 00C0                  		move.b	#-$40,d2
000155A8 6000 FF32                  		bra.w	loc_14E0A
000155AC                            
000155AC                            ; End of function sub_14EB4
000155AC                            
000155AC                            ; ---------------------------------------------------------------------------
000155AC                            ; Subroutine to	detect when an object hits a wall to its right
000155AC                            ; ---------------------------------------------------------------------------
000155AC                            
000155AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155AC                            
000155AC                            
000155AC                            ObjHitWallRight:
000155AC D668 0008                  		add.w	8(a0),d3
000155B0 3428 000C                  		move.w	$C(a0),d2
000155B4 49F8 F768                  		lea	($FFFFF768).w,a4
000155B8 18BC 0000                  		move.b	#0,(a4)
000155BC 367C 0010                  		movea.w	#$10,a3
000155C0 3C3C 0000                  		move.w	#0,d6
000155C4 7A0E                       		moveq	#$E,d5
000155C6 6100 FC16                  		bsr.w	FindWall
000155CA 1638 F768                  		move.b	($FFFFF768).w,d3
000155CE 0803 0000                  		btst	#0,d3
000155D2 6700                       		beq.s	locret_14F06
000155D4 163C 00C0                  		move.b	#-$40,d3
000155D8                            
000155D8                            locret_14F06:
000155D8 4E75                       		rts	
000155DA                            
000155DA                            ; End of function ObjHitWallRight
000155DA                            
000155DA                            ; ---------------------------------------------------------------------------
000155DA                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
000155DA                            ; touches them
000155DA                            ; ---------------------------------------------------------------------------
000155DA                            
000155DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155DA                            
000155DA                            
000155DA                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
000155DA 3428 000C                  		move.w	$C(a0),d2
000155DE 3628 0008                  		move.w	8(a0),d3
000155E2 7000                       		moveq	#0,d0
000155E4 1028 0016                  		move.b	$16(a0),d0
000155E8 4880                       		ext.w	d0
000155EA 9440                       		sub.w	d0,d2
000155EC 0A42 000F                  		eori.w	#$F,d2
000155F0 1028 0017                  		move.b	$17(a0),d0
000155F4 4880                       		ext.w	d0
000155F6 D640                       		add.w	d0,d3
000155F8 49F8 F768                  		lea	($FFFFF768).w,a4
000155FC 367C FFF0                  		movea.w	#-$10,a3
00015600 3C3C 1000                  		move.w	#$1000,d6
00015604 7A0E                       		moveq	#$E,d5
00015606 6100 FA98                  		bsr.w	FindFloor
0001560A 3F01                       		move.w	d1,-(sp)
0001560C 3428 000C                  		move.w	$C(a0),d2
00015610 3628 0008                  		move.w	8(a0),d3
00015614 7000                       		moveq	#0,d0
00015616 1028 0016                  		move.b	$16(a0),d0
0001561A 4880                       		ext.w	d0
0001561C 9440                       		sub.w	d0,d2
0001561E 0A42 000F                  		eori.w	#$F,d2
00015622 1028 0017                  		move.b	$17(a0),d0
00015626 4880                       		ext.w	d0
00015628 9640                       		sub.w	d0,d3
0001562A 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001562E 367C FFF0                  		movea.w	#-$10,a3
00015632 3C3C 1000                  		move.w	#$1000,d6
00015636 7A0E                       		moveq	#$E,d5
00015638 6100 FA66                  		bsr.w	FindFloor
0001563C 301F                       		move.w	(sp)+,d0
0001563E 143C 0080                  		move.b	#-$80,d2
00015642 6000 FE5E                  		bra.w	loc_14DD0
00015646                            ; End of function Sonic_DontRunOnWalls
00015646                            
00015646                            ; ===========================================================================
00015646 3428 000C                  		move.w	$C(a0),d2
0001564A 3628 0008                  		move.w	8(a0),d3
0001564E                            
0001564E                            loc_14F7C:
0001564E 0442 000A                  		subi.w	#$A,d2
00015652 0A42 000F                  		eori.w	#$F,d2
00015656 49F8 F768                  		lea	($FFFFF768).w,a4
0001565A 367C FFF0                  		movea.w	#-$10,a3
0001565E 3C3C 1000                  		move.w	#$1000,d6
00015662 7A0E                       		moveq	#$E,d5
00015664 6100 FA3A                  		bsr.w	FindFloor
00015668 143C 0080                  		move.b	#-$80,d2
0001566C 6000 FE6E                  		bra.w	loc_14E0A
00015670                            
00015670                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015670                            
00015670                            
00015670                            ObjHitCeiling:
00015670 3428 000C                  		move.w	$C(a0),d2
00015674 3628 0008                  		move.w	8(a0),d3
00015678 7000                       		moveq	#0,d0
0001567A 1028 0016                  		move.b	$16(a0),d0
0001567E 4880                       		ext.w	d0
00015680 9440                       		sub.w	d0,d2
00015682 0A42 000F                  		eori.w	#$F,d2
00015686 49F8 F768                  		lea	($FFFFF768).w,a4
0001568A 367C FFF0                  		movea.w	#-$10,a3
0001568E 3C3C 1000                  		move.w	#$1000,d6
00015692 7A0E                       		moveq	#$E,d5
00015694 6100 FA0A                  		bsr.w	FindFloor
00015698 1638 F768                  		move.b	($FFFFF768).w,d3
0001569C 0803 0000                  		btst	#0,d3
000156A0 6700                       		beq.s	locret_14FD4
000156A2 163C 0080                  		move.b	#-$80,d3
000156A6                            
000156A6                            locret_14FD4:
000156A6 4E75                       		rts	
000156A8                            ; End of function ObjHitCeiling
000156A8                            
000156A8                            ; ===========================================================================
000156A8                            
000156A8                            loc_14FD6:				; XREF: sub_14D48
000156A8 3428 000C                  		move.w	$C(a0),d2
000156AC 3628 0008                  		move.w	8(a0),d3
000156B0 7000                       		moveq	#0,d0
000156B2 1028 0017                  		move.b	$17(a0),d0
000156B6 4880                       		ext.w	d0
000156B8 9440                       		sub.w	d0,d2
000156BA 1028 0016                  		move.b	$16(a0),d0
000156BE 4880                       		ext.w	d0
000156C0 9640                       		sub.w	d0,d3
000156C2 0A43 000F                  		eori.w	#$F,d3
000156C6 49F8 F768                  		lea	($FFFFF768).w,a4
000156CA 367C FFF0                  		movea.w	#-$10,a3
000156CE 3C3C 0800                  		move.w	#$800,d6
000156D2 7A0E                       		moveq	#$E,d5
000156D4 6100 FB08                  		bsr.w	FindWall
000156D8 3F01                       		move.w	d1,-(sp)
000156DA 3428 000C                  		move.w	$C(a0),d2
000156DE 3628 0008                  		move.w	8(a0),d3
000156E2 7000                       		moveq	#0,d0
000156E4 1028 0017                  		move.b	$17(a0),d0
000156E8 4880                       		ext.w	d0
000156EA D440                       		add.w	d0,d2
000156EC 1028 0016                  		move.b	$16(a0),d0
000156F0 4880                       		ext.w	d0
000156F2 9640                       		sub.w	d0,d3
000156F4 0A43 000F                  		eori.w	#$F,d3
000156F8 49F8 F76A                  		lea	($FFFFF76A).w,a4
000156FC 367C FFF0                  		movea.w	#-$10,a3
00015700 3C3C 0800                  		move.w	#$800,d6
00015704 7A0E                       		moveq	#$E,d5
00015706 6100 FAD6                  		bsr.w	FindWall
0001570A 301F                       		move.w	(sp)+,d0
0001570C 143C 0040                  		move.b	#$40,d2
00015710 6000 FD90                  		bra.w	loc_14DD0
00015714                            
00015714                            ; ---------------------------------------------------------------------------
00015714                            ; Subroutine to	stop Sonic when	he jumps at a wall
00015714                            ; ---------------------------------------------------------------------------
00015714                            
00015714                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015714                            
00015714                            
00015714                            Sonic_HitWall:				; XREF: Sonic_Floor
00015714 3428 000C                  		move.w	$C(a0),d2
00015718 3628 0008                  		move.w	8(a0),d3
0001571C                            
0001571C                            loc_1504A:
0001571C 0443 000A                  		subi.w	#$A,d3
00015720 0A43 000F                  		eori.w	#$F,d3
00015724 49F8 F768                  		lea	($FFFFF768).w,a4
00015728 367C FFF0                  		movea.w	#-$10,a3
0001572C 3C3C 0800                  		move.w	#$800,d6
00015730 7A0E                       		moveq	#$E,d5
00015732 6100 FAAA                  		bsr.w	FindWall
00015736 143C 0040                  		move.b	#$40,d2
0001573A 6000 FDA0                  		bra.w	loc_14E0A
0001573E                            ; End of function Sonic_HitWall
0001573E                            
0001573E                            ; ---------------------------------------------------------------------------
0001573E                            ; Subroutine to	detect when an object hits a wall to its left
0001573E                            ; ---------------------------------------------------------------------------
0001573E                            
0001573E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001573E                            
0001573E                            
0001573E                            ObjHitWallLeft:
0001573E D668 0008                  		add.w	8(a0),d3
00015742 3428 000C                  		move.w	$C(a0),d2
00015746 49F8 F768                  		lea	($FFFFF768).w,a4
0001574A 18BC 0000                  		move.b	#0,(a4)
0001574E 367C FFF0                  		movea.w	#-$10,a3
00015752 3C3C 0800                  		move.w	#$800,d6
00015756 7A0E                       		moveq	#$E,d5
00015758 6100 FA84                  		bsr.w	FindWall
0001575C 1638 F768                  		move.b	($FFFFF768).w,d3
00015760 0803 0000                  		btst	#0,d3
00015764 6700                       		beq.s	locret_15098
00015766 163C 0040                  		move.b	#$40,d3
0001576A                            
0001576A                            locret_15098:
0001576A 4E75                       		rts	
0001576C                            ; End of function ObjHitWallLeft
0001576C                            
0001576C                            ; ===========================================================================
0001576C                            ; ---------------------------------------------------------------------------
0001576C                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
0001576C                            ; ---------------------------------------------------------------------------
0001576C                            
0001576C                            Obj66:					; XREF: Obj_Index
0001576C 7000                       		moveq	#0,d0
0001576E 1028 0024                  		move.b	$24(a0),d0
00015772 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00015776 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
0001577A                            ; ===========================================================================
0001577A 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
0001577C 0000                       		dc.w Obj66_Action-Obj66_Index
0001577E 0000                       		dc.w Obj66_Display-Obj66_Index
00015780 0000                       		dc.w Obj66_Release-Obj66_Index
00015782                            ; ===========================================================================
00015782                            
00015782                            Obj66_Main:				; XREF: Obj66_Index
00015782 5428 0024                  		addq.b	#2,$24(a0)
00015786 323C 0001                  		move.w	#1,d1
0001578A 2248                       		movea.l	a0,a1
0001578C 6000                       		bra.s	Obj66_MakeItem
0001578E                            ; ===========================================================================
0001578E                            
0001578E                            Obj66_Loop:
0001578E 6100 88F0                  		bsr.w	SingleObjLoad
00015792 6600                       		bne.s	loc_150FE
00015794 12BC 0066                  		move.b	#$66,0(a1)
00015798 5829 0024                  		addq.b	#4,$24(a1)
0001579C 3368 0008 0008             		move.w	8(a0),8(a1)
000157A2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000157A8 137C 0003 0018             		move.b	#3,$18(a1)
000157AE 137C 0010 001A             		move.b	#$10,$1A(a1)
000157B4                            
000157B4                            Obj66_MakeItem:				; XREF: Obj66_Main
000157B4 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
000157BC 337C 4348 0002             		move.w	#$4348,2(a1)
000157C2 0029 0004 0001             		ori.b	#4,1(a1)
000157C8 137C 0038 0019             		move.b	#$38,$19(a1)
000157CE                            
000157CE                            loc_150FE:
000157CE 51C9 FFBE                  		dbf	d1,Obj66_Loop
000157D2                            
000157D2 117C 0030 0019             		move.b	#$30,$19(a0)
000157D8 117C 0004 0018             		move.b	#4,$18(a0)
000157DE 317C 003C 0030             		move.w	#$3C,$30(a0)
000157E4 117C 0001 0034             		move.b	#1,$34(a0)
000157EA 1168 0028 0038             		move.b	$28(a0),$38(a0)
000157F0                            
000157F0                            Obj66_Action:				; XREF: Obj66_Index
000157F0 6100 0000                  		bsr.w	Obj66_ChkSwitch
000157F4 4A28 0001                  		tst.b	1(a0)
000157F8 6A00 0000                  		bpl.w	Obj66_Display
000157FC 323C 0030                  		move.w	#$30,d1
00015800 3401                       		move.w	d1,d2
00015802 3602                       		move.w	d2,d3
00015804 5243                       		addq.w	#1,d3
00015806 3828 0008                  		move.w	8(a0),d4
0001580A 6100 A7BE                  		bsr.w	SolidObject
0001580E 0828 0005 0022             		btst	#5,$22(a0)
00015814 6700 0000                  		beq.w	Obj66_Display
00015818 43F8 D000                  		lea	($FFFFD000).w,a1
0001581C 720E                       		moveq	#$E,d1
0001581E 3029 0008                  		move.w	8(a1),d0
00015822 B068 0008                  		cmp.w	8(a0),d0
00015826 6500                       		bcs.s	Obj66_GrabSonic
00015828 7207                       		moveq	#7,d1
0001582A                            
0001582A                            Obj66_GrabSonic:
0001582A B228 001A                  		cmp.b	$1A(a0),d1
0001582E 6600                       		bne.s	Obj66_Display
00015830 1141 0032                  		move.b	d1,$32(a0)
00015834 5828 0024                  		addq.b	#4,$24(a0)
00015838 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
0001583E 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00015844 337C 0800 0014             		move.w	#$800,$14(a1)
0001584A 337C 0000 0010             		move.w	#0,$10(a1)
00015850 337C 0000 0012             		move.w	#0,$12(a1)
00015856 08A8 0005 0022             		bclr	#5,$22(a0)
0001585C 08A9 0005 0022             		bclr	#5,$22(a1)
00015862 08E9 0001 0022             		bset	#1,$22(a1)
00015868 3429 0008                  		move.w	8(a1),d2
0001586C 3629 000C                  		move.w	$C(a1),d3
00015870 6100 0000                  		bsr.w	Obj66_ChgPos
00015874 D569 0008                  		add.w	d2,8(a1)
00015878 D769 000C                  		add.w	d3,$C(a1)
0001587C E0E9 0008                  		asr	8(a1)
00015880 E0E9 000C                  		asr	$C(a1)
00015884                            
00015884                            Obj66_Display:				; XREF: Obj66_Index
00015884 6000 A41C                  		bra.w	MarkObjGone
00015888                            ; ===========================================================================
00015888                            
00015888                            Obj66_Release:				; XREF: Obj66_Index
00015888 1028 001A                  		move.b	$1A(a0),d0
0001588C 0C00 0004                  		cmpi.b	#4,d0
00015890 6700                       		beq.s	loc_151C8
00015892 0C00 0007                  		cmpi.b	#7,d0
00015896 6600                       		bne.s	loc_151F8
00015898                            
00015898                            loc_151C8:
00015898 B028 0032                  		cmp.b	$32(a0),d0
0001589C 6700                       		beq.s	loc_151F8
0001589E 43F8 D000                  		lea	($FFFFD000).w,a1
000158A2 337C 0000 0010             		move.w	#0,$10(a1)
000158A8 337C 0800 0012             		move.w	#$800,$12(a1)
000158AE 0C00 0004                  		cmpi.b	#4,d0
000158B2 6700                       		beq.s	loc_151F0
000158B4 337C 0800 0010             		move.w	#$800,$10(a1)
000158BA 337C 0800 0012             		move.w	#$800,$12(a1)
000158C0                            
000158C0                            loc_151F0:
000158C0 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
000158C4 5928 0024                  		subq.b	#4,$24(a0)
000158C8                            
000158C8                            loc_151F8:
000158C8 6100                       		bsr.s	Obj66_ChkSwitch
000158CA 6100                       		bsr.s	Obj66_ChgPos
000158CC 6000 A3D4                  		bra.w	MarkObjGone
000158D0                            
000158D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000158D0                            
000158D0                            
000158D0                            Obj66_ChkSwitch:			; XREF: Obj66_Action
000158D0 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000158D4 7000                       		moveq	#0,d0
000158D6 1028 0038                  		move.b	$38(a0),d0
000158DA 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
000158E0 6700                       		beq.s	loc_15224	; if not, branch
000158E2 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
000158E6 6600                       		bne.s	Obj66_Animate	; if yes, branch
000158E8 4428 0034                  		neg.b	$34(a0)
000158EC 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
000158F2 6000                       		bra.s	Obj66_Animate
000158F4                            ; ===========================================================================
000158F4                            
000158F4                            loc_15224:
000158F4 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
000158F8                            
000158F8                            Obj66_Animate:
000158F8 5328 001E                  		subq.b	#1,$1E(a0)
000158FC 6A00                       		bpl.s	locret_15246
000158FE 117C 0007 001E             		move.b	#7,$1E(a0)
00015904 1228 0034                  		move.b	$34(a0),d1
00015908 1028 001A                  		move.b	$1A(a0),d0
0001590C D001                       		add.b	d1,d0
0001590E 0200 000F                  		andi.b	#$F,d0
00015912 1140 001A                  		move.b	d0,$1A(a0)
00015916                            
00015916                            locret_15246:
00015916 4E75                       		rts	
00015918                            ; End of function Obj66_ChkSwitch
00015918                            
00015918                            
00015918                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015918                            
00015918                            
00015918                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00015918 43F8 D000                  		lea	($FFFFD000).w,a1
0001591C 7000                       		moveq	#0,d0
0001591E 1028 001A                  		move.b	$1A(a0),d0
00015922 D040                       		add.w	d0,d0
00015924 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015928 101A                       		move.b	(a2)+,d0
0001592A 4880                       		ext.w	d0
0001592C D068 0008                  		add.w	8(a0),d0
00015930 3340 0008                  		move.w	d0,8(a1)
00015934 101A                       		move.b	(a2)+,d0
00015936 4880                       		ext.w	d0
00015938 D068 000C                  		add.w	$C(a0),d0
0001593C 3340 000C                  		move.w	d0,$C(a1)
00015940 4E75                       		rts	
00015942                            ; End of function Obj66_ChgPos
00015942                            
00015942                            ; ===========================================================================
00015942 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015946 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
0001594A 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
0001594E 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00015952 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015956 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
0001595A 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
0001595E E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00015962                            ; ---------------------------------------------------------------------------
00015962                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015962                            ; ---------------------------------------------------------------------------
00015962                            Map_obj66:
00015962                            	include "_maps\obj66.asm"
00015962                            ; ---------------------------------------------------------------------------
00015962                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015962                            ; ---------------------------------------------------------------------------
00015962 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00015966 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
0001596A 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
0001596E 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00015972 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00015976 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
0001597A 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
0001597E 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00015982 0000                       		dc.w byte_154A4-Map_obj66
00015984 06                         byte_152B4:	dc.b 6
00015985 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
0001598A 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
0001598F E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00015994 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00015999 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
0001599E 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
000159A3 06                         byte_152D3:	dc.b 6
000159A4 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
000159A9 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
000159AE F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
000159B3 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
000159B8 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
000159BD 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
000159C2 06                         byte_152F2:	dc.b 6
000159C3 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
000159C8 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
000159CD 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
000159D2 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
000159D7 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
000159DC 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
000159E1 06                         byte_15311:	dc.b 6
000159E2 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
000159E7 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
000159EC 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
000159F1 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
000159F6 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
000159FB 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00015A00 06                         byte_15330:	dc.b 6
00015A01 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015A06 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00015A0B 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00015A10 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00015A15 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00015A1A 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00015A1F 06                         byte_1534F:	dc.b 6
00015A20 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015A25 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00015A2A 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00015A2F 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015A34 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00015A39 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00015A3E 06                         byte_1536E:	dc.b 6
00015A3F 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00015A44 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00015A49 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00015A4E 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00015A53 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00015A58 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00015A5D 06                         byte_1538D:	dc.b 6
00015A5E 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00015A63 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00015A68 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00015A6D F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00015A72 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00015A77 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00015A7C 06                         byte_153AC:	dc.b 6
00015A7D E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00015A82 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00015A87 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00015A8C E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00015A91 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00015A96 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00015A9B 06                         byte_153CB:	dc.b 6
00015A9C D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00015AA1 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00015AA6 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00015AAB DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00015AB0 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00015AB5 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00015ABA 06                         byte_153EA:	dc.b 6
00015ABB D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00015AC0 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00015AC5 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00015ACA D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00015ACF E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00015AD4 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00015AD9 06                         byte_15409:	dc.b 6
00015ADA D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00015ADF D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00015AE4 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00015AE9 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00015AEE E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00015AF3 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00015AF8 06                         byte_15428:	dc.b 6
00015AF9 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00015AFE D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00015B03 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015B08 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00015B0D E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00015B12 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015B17 06                         byte_15447:	dc.b 6
00015B18 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00015B1D D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00015B22 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015B27 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015B2C E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00015B31 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015B36 06                         byte_15466:	dc.b 6
00015B37 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015B3C D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00015B41 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015B46 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015B4B E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00015B50 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00015B55 06                         byte_15485:	dc.b 6
00015B56 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015B5B D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00015B60 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00015B65 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015B6A F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015B6F F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00015B74 0C                         byte_154A4:	dc.b $C
00015B75 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015B7A D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015B7F E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00015B84 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015B89 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00015B8E E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00015B93 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00015B98 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00015B9D 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00015BA2 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00015BA7 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00015BAC 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00015BB2 00                         		even
00015BB2 00                         		even
00015BB2                            
00015BB2                            ; ===========================================================================
00015BB2                            ; ---------------------------------------------------------------------------
00015BB2                            ; Object 67 - disc that	you run	around (SBZ)
00015BB2                            ; ---------------------------------------------------------------------------
00015BB2                            
00015BB2                            Obj67:					; XREF: Obj_Index
00015BB2 7000                       		moveq	#0,d0
00015BB4 1028 0024                  		move.b	$24(a0),d0
00015BB8 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00015BBC 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00015BC0                            ; ===========================================================================
00015BC0 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00015BC2 0000                       		dc.w Obj67_Action-Obj67_Index
00015BC4                            ; ===========================================================================
00015BC4                            
00015BC4                            Obj67_Main:				; XREF: Obj67_Index
00015BC4 5428 0024                  		addq.b	#2,$24(a0)
00015BC8 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00015BD0 317C C344 0002             		move.w	#$C344,2(a0)
00015BD6 117C 0004 0001             		move.b	#4,1(a0)
00015BDC 117C 0004 0018             		move.b	#4,$18(a0)
00015BE2 117C 0008 0019             		move.b	#8,$19(a0)
00015BE8 3168 0008 0032             		move.w	8(a0),$32(a0)
00015BEE 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015BF4 117C 0018 0034             		move.b	#$18,$34(a0)
00015BFA 117C 0048 0038             		move.b	#$48,$38(a0)
00015C00 1228 0028                  		move.b	$28(a0),d1	; get object type
00015C04 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015C08 6700                       		beq.s	loc_15546
00015C0A 117C 0010 0034             		move.b	#$10,$34(a0)
00015C10 117C 0038 0038             		move.b	#$38,$38(a0)
00015C16                            
00015C16                            loc_15546:
00015C16 1228 0028                  		move.b	$28(a0),d1	; get object type
00015C1A 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015C1E 4881                       		ext.w	d1
00015C20 E741                       		asl.w	#3,d1
00015C22 3141 0036                  		move.w	d1,$36(a0)
00015C26 1028 0022                  		move.b	$22(a0),d0
00015C2A E418                       		ror.b	#2,d0
00015C2C 0200 00C0                  		andi.b	#-$40,d0
00015C30 1140 0026                  		move.b	d0,$26(a0)
00015C34                            
00015C34                            Obj67_Action:				; XREF: Obj67_Index
00015C34 6100 0000                  		bsr.w	Obj67_MoveSonic
00015C38 6100 0000                  		bsr.w	Obj67_MoveSpot
00015C3C 6000 0000                  		bra.w	Obj67_ChkDel
00015C40                            ; ===========================================================================
00015C40                            
00015C40                            Obj67_MoveSonic:			; XREF: Obj67_Action
00015C40 7400                       		moveq	#0,d2
00015C42 1428 0038                  		move.b	$38(a0),d2
00015C46 3602                       		move.w	d2,d3
00015C48 D643                       		add.w	d3,d3
00015C4A 43F8 D000                  		lea	($FFFFD000).w,a1
00015C4E 3029 0008                  		move.w	8(a1),d0
00015C52 9068 0032                  		sub.w	$32(a0),d0
00015C56 D042                       		add.w	d2,d0
00015C58 B043                       		cmp.w	d3,d0
00015C5A 6400                       		bcc.s	loc_155A8
00015C5C 3229 000C                  		move.w	$C(a1),d1
00015C60 9268 0030                  		sub.w	$30(a0),d1
00015C64 D242                       		add.w	d2,d1
00015C66 B243                       		cmp.w	d3,d1
00015C68 6400                       		bcc.s	loc_155A8
00015C6A 0829 0001 0022             		btst	#1,$22(a1)
00015C70 6700                       		beq.s	loc_155B8
00015C72 4228 003A                  		clr.b	$3A(a0)
00015C76 4E75                       		rts	
00015C78                            ; ===========================================================================
00015C78                            
00015C78                            loc_155A8:
00015C78 4A28 003A                  		tst.b	$3A(a0)
00015C7C 6700                       		beq.s	locret_155B6
00015C7E 4229 0038                  		clr.b	$38(a1)
00015C82 4228 003A                  		clr.b	$3A(a0)
00015C86                            
00015C86                            locret_155B6:
00015C86 4E75                       		rts	
00015C88                            ; ===========================================================================
00015C88                            
00015C88                            loc_155B8:
00015C88 4A28 003A                  		tst.b	$3A(a0)
00015C8C 6600                       		bne.s	loc_155E2
00015C8E 117C 0001 003A             		move.b	#1,$3A(a0)
00015C94 0829 0002 0022             		btst	#2,$22(a1)
00015C9A 6600                       		bne.s	loc_155D0
00015C9C 4229 001C                  		clr.b	$1C(a1)
00015CA0                            
00015CA0                            loc_155D0:
00015CA0 08A9 0005 0022             		bclr	#5,$22(a1)
00015CA6 137C 0001 001D             		move.b	#1,$1D(a1)
00015CAC 137C 0001 0038             		move.b	#1,$38(a1)
00015CB2                            
00015CB2                            loc_155E2:
00015CB2 3029 0014                  		move.w	$14(a1),d0
00015CB6 4A68 0036                  		tst.w	$36(a0)
00015CBA 6A00                       		bpl.s	loc_15608
00015CBC 0C40 FC00                  		cmpi.w	#-$400,d0
00015CC0 6F00                       		ble.s	loc_155FA
00015CC2 337C FC00 0014             		move.w	#-$400,$14(a1)
00015CC8 4E75                       		rts	
00015CCA                            ; ===========================================================================
00015CCA                            
00015CCA                            loc_155FA:
00015CCA 0C40 F100                  		cmpi.w	#-$F00,d0
00015CCE 6C00                       		bge.s	locret_15606
00015CD0 337C F100 0014             		move.w	#-$F00,$14(a1)
00015CD6                            
00015CD6                            locret_15606:
00015CD6 4E75                       		rts	
00015CD8                            ; ===========================================================================
00015CD8                            
00015CD8                            loc_15608:
00015CD8 0C40 0400                  		cmpi.w	#$400,d0
00015CDC 6C00                       		bge.s	loc_15616
00015CDE 337C 0400 0014             		move.w	#$400,$14(a1)
00015CE4 4E75                       		rts	
00015CE6                            ; ===========================================================================
00015CE6                            
00015CE6                            loc_15616:
00015CE6 0C40 0F00                  		cmpi.w	#$F00,d0
00015CEA 6F00                       		ble.s	locret_15622
00015CEC 337C 0F00 0014             		move.w	#$F00,$14(a1)
00015CF2                            
00015CF2                            locret_15622:
00015CF2 4E75                       		rts	
00015CF4                            ; ===========================================================================
00015CF4                            
00015CF4                            Obj67_MoveSpot:				; XREF: Obj67_Action
00015CF4 3028 0036                  		move.w	$36(a0),d0
00015CF8 D168 0026                  		add.w	d0,$26(a0)
00015CFC 1028 0026                  		move.b	$26(a0),d0
00015D00 4EB9 0000 2C60             		jsr	(CalcSine).l
00015D06 3428 0030                  		move.w	$30(a0),d2
00015D0A 3628 0032                  		move.w	$32(a0),d3
00015D0E 7800                       		moveq	#0,d4
00015D10 1828 0034                  		move.b	$34(a0),d4
00015D14 E14C                       		lsl.w	#8,d4
00015D16 2A04                       		move.l	d4,d5
00015D18 C9C0                       		muls.w	d0,d4
00015D1A 4844                       		swap	d4
00015D1C CBC1                       		muls.w	d1,d5
00015D1E 4845                       		swap	d5
00015D20 D842                       		add.w	d2,d4
00015D22 DA43                       		add.w	d3,d5
00015D24 3144 000C                  		move.w	d4,$C(a0)
00015D28 3145 0008                  		move.w	d5,8(a0)
00015D2C 4E75                       		rts	
00015D2E                            ; ===========================================================================
00015D2E                            
00015D2E                            Obj67_ChkDel:				; XREF: Obj67_Action
00015D2E 3028 0032                  		move.w	$32(a0),d0
00015D32 0240 FF80                  		andi.w	#-$80,d0
00015D36 3238 F700                  		move.w	($FFFFF700).w,d1
00015D3A 0441 0080                  		subi.w	#$80,d1
00015D3E 0241 FF80                  		andi.w	#-$80,d1
00015D42 9041                       		sub.w	d1,d0
00015D44 0C40 0280                  		cmpi.w	#$280,d0
00015D48 6200                       		bhi.s	Obj67_Delete
00015D4A 4EF9 0000 DBFA             		jmp	DisplaySprite
00015D50                            ; ===========================================================================
00015D50                            
00015D50                            Obj67_Delete:
00015D50 4EF9 0000 DC36             		jmp	DeleteObject
00015D56                            ; ===========================================================================
00015D56                            ; ---------------------------------------------------------------------------
00015D56                            ; Sprite mappings - disc that you run around (SBZ)
00015D56                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015D56                            ; part of the level tiles.)
00015D56                            ; ---------------------------------------------------------------------------
00015D56                            Map_obj67:
00015D56                            	include "_maps\obj67.asm"
00015D56                            ; ---------------------------------------------------------------------------
00015D56                            ; Sprite mappings - disc that you run around (SBZ)
00015D56                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015D56                            ; part of the level tiles.)
00015D56                            ; ---------------------------------------------------------------------------
00015D56 0000                       		dc.w byte_15688-Map_obj67
00015D58 01                         byte_15688:	dc.b 1
00015D59 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00015D5E                            		even
00015D5E                            		even
00015D5E                            
00015D5E                            ; ===========================================================================
00015D5E                            ; ---------------------------------------------------------------------------
00015D5E                            ; Object 68 - conveyor belts (SBZ)
00015D5E                            ; ---------------------------------------------------------------------------
00015D5E                            
00015D5E                            Obj68:					; XREF: Obj_Index
00015D5E 7000                       		moveq	#0,d0
00015D60 1028 0024                  		move.b	$24(a0),d0
00015D64 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00015D68 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00015D6C                            ; ===========================================================================
00015D6C 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00015D6E 0000                       		dc.w Obj68_Action-Obj68_Index
00015D70                            ; ===========================================================================
00015D70                            
00015D70                            Obj68_Main:				; XREF: Obj68_Index
00015D70 5428 0024                  		addq.b	#2,$24(a0)
00015D74 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00015D7A 1228 0028                  		move.b	$28(a0),d1	; get object type
00015D7E 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015D82 6700                       		beq.s	loc_156BA	; if zero, branch
00015D84 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00015D8A                            
00015D8A                            loc_156BA:
00015D8A 1228 0028                  		move.b	$28(a0),d1	; get object type
00015D8E 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015D92 4881                       		ext.w	d1
00015D94 E841                       		asr.w	#4,d1
00015D96 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00015D9A                            
00015D9A                            Obj68_Action:				; XREF: Obj68_Index
00015D9A 6100                       		bsr.s	Obj68_MoveSonic
00015D9C 3028 0008                  		move.w	8(a0),d0
00015DA0 0240 FF80                  		andi.w	#$FF80,d0
00015DA4 3238 F700                  		move.w	($FFFFF700).w,d1
00015DA8 0441 0080                  		subi.w	#$80,d1
00015DAC 0241 FF80                  		andi.w	#$FF80,d1
00015DB0 9041                       		sub.w	d1,d0
00015DB2 0C40 0280                  		cmpi.w	#$280,d0
00015DB6 6200                       		bhi.s	Obj68_Delete
00015DB8 4E75                       		rts	
00015DBA                            ; ===========================================================================
00015DBA                            
00015DBA                            Obj68_Delete:
00015DBA 4EF9 0000 DC36             		jmp	DeleteObject
00015DC0                            ; ===========================================================================
00015DC0                            
00015DC0                            Obj68_MoveSonic:			; XREF: Obj68_Action
00015DC0 7400                       		moveq	#0,d2
00015DC2 1428 0038                  		move.b	$38(a0),d2
00015DC6 3602                       		move.w	d2,d3
00015DC8 D643                       		add.w	d3,d3
00015DCA 43F8 D000                  		lea	($FFFFD000).w,a1
00015DCE 3029 0008                  		move.w	8(a1),d0
00015DD2 9068 0008                  		sub.w	8(a0),d0
00015DD6 D042                       		add.w	d2,d0
00015DD8 B043                       		cmp.w	d3,d0
00015DDA 6400                       		bcc.s	locret_1572E
00015DDC 3229 000C                  		move.w	$C(a1),d1
00015DE0 9268 000C                  		sub.w	$C(a0),d1
00015DE4 0641 0030                  		addi.w	#$30,d1
00015DE8 0C41 0030                  		cmpi.w	#$30,d1
00015DEC 6400                       		bcc.s	locret_1572E
00015DEE 0829 0001 0022             		btst	#1,$22(a1)
00015DF4 6600                       		bne.s	locret_1572E
00015DF6 3028 0036                  		move.w	$36(a0),d0
00015DFA D169 0008                  		add.w	d0,8(a1)
00015DFE                            
00015DFE                            locret_1572E:
00015DFE 4E75                       		rts	
00015E00                            
00015E00                            ; ===========================================================================
00015E00                            ; ---------------------------------------------------------------------------
00015E00                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00015E00                            ; ---------------------------------------------------------------------------
00015E00                            
00015E00                            Obj69:					; XREF: Obj_Index
00015E00 7000                       		moveq	#0,d0
00015E02 1028 0024                  		move.b	$24(a0),d0
00015E06 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00015E0A 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00015E0E                            ; ===========================================================================
00015E0E 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00015E10 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00015E12 0000                       		dc.w Obj69_Spinner-Obj69_Index
00015E14                            ; ===========================================================================
00015E14                            
00015E14                            Obj69_Main:				; XREF: Obj69_Index
00015E14 5428 0024                  		addq.b	#2,$24(a0)
00015E18 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00015E20 317C 4492 0002             		move.w	#$4492,2(a0)
00015E26 0028 0004 0001             		ori.b	#4,1(a0)
00015E2C 117C 0080 0019             		move.b	#$80,$19(a0)
00015E32 7000                       		moveq	#0,d0
00015E34 1028 0028                  		move.b	$28(a0),d0
00015E38 0240 000F                  		andi.w	#$F,d0
00015E3C C0FC 003C                  		mulu.w	#$3C,d0
00015E40 3140 0032                  		move.w	d0,$32(a0)
00015E44 4A28 0028                  		tst.b	$28(a0)
00015E48 6A00                       		bpl.s	Obj69_Trapdoor
00015E4A 5428 0024                  		addq.b	#2,$24(a0)
00015E4E 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00015E56 317C 04DF 0002             		move.w	#$4DF,2(a0)
00015E5C 117C 0010 0019             		move.b	#$10,$19(a0)
00015E62 117C 0002 001C             		move.b	#2,$1C(a0)
00015E68 7000                       		moveq	#0,d0
00015E6A 1028 0028                  		move.b	$28(a0),d0	; get object type
00015E6E 3200                       		move.w	d0,d1
00015E70 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00015E74 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00015E78 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00015E7C 3140 0032                  		move.w	d0,$32(a0)
00015E80 0241 0070                  		andi.w	#$70,d1
00015E84 0641 0010                  		addi.w	#$10,d1
00015E88 E549                       		lsl.w	#2,d1
00015E8A 5341                       		subq.w	#1,d1
00015E8C 3141 0036                  		move.w	d1,$36(a0)
00015E90 6000                       		bra.s	Obj69_Spinner
00015E92                            ; ===========================================================================
00015E92                            
00015E92                            Obj69_Trapdoor:				; XREF: Obj69_Index
00015E92 5368 0030                  		subq.w	#1,$30(a0)
00015E96 6A00                       		bpl.s	Obj69_Animate
00015E98 3168 0032 0030             		move.w	$32(a0),$30(a0)
00015E9E 0868 0000 001C             		bchg	#0,$1C(a0)
00015EA4 4A28 0001                  		tst.b	1(a0)
00015EA8 6A00                       		bpl.s	Obj69_Animate
00015EAA 303C 00BB                  		move.w	#$BB,d0
00015EAE 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play door sound
00015EB4                            
00015EB4                            Obj69_Animate:
00015EB4 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015EBA 4EB9 0000 ACC4             		jsr	AnimateSprite
00015EC0 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00015EC4 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00015EC6 323C 004B                  		move.w	#$4B,d1
00015ECA 343C 000C                  		move.w	#$C,d2
00015ECE 3602                       		move.w	d2,d3
00015ED0 5243                       		addq.w	#1,d3
00015ED2 3828 0008                  		move.w	8(a0),d4
00015ED6 6100 A0F2                  		bsr.w	SolidObject
00015EDA 6000 9DC6                  		bra.w	MarkObjGone
00015EDE                            ; ===========================================================================
00015EDE                            
00015EDE                            Obj69_NotSolid:
00015EDE 0828 0003 0022             		btst	#3,$22(a0)
00015EE4 6700                       		beq.s	Obj69_Display
00015EE6 43F8 D000                  		lea	($FFFFD000).w,a1
00015EEA 08A9 0003 0022             		bclr	#3,$22(a1)
00015EF0 08A8 0003 0022             		bclr	#3,$22(a0)
00015EF6 4228 0025                  		clr.b	$25(a0)
00015EFA                            
00015EFA                            Obj69_Display:
00015EFA 6000 9DA6                  		bra.w	MarkObjGone
00015EFE                            ; ===========================================================================
00015EFE                            
00015EFE                            Obj69_Spinner:				; XREF: Obj69_Index
00015EFE 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015F02 C068 0036                  		and.w	$36(a0),d0
00015F06 6600                       		bne.s	Obj69_Delay
00015F08 117C 0001 0034             		move.b	#1,$34(a0)
00015F0E                            
00015F0E                            Obj69_Delay:
00015F0E 4A28 0034                  		tst.b	$34(a0)
00015F12 6700                       		beq.s	Obj69_Animate2
00015F14 5368 0030                  		subq.w	#1,$30(a0)
00015F18 6A00                       		bpl.s	Obj69_Animate2
00015F1A 3168 0032 0030             		move.w	$32(a0),$30(a0)
00015F20 4228 0034                  		clr.b	$34(a0)
00015F24 0868 0000 001C             		bchg	#0,$1C(a0)
00015F2A                            
00015F2A                            Obj69_Animate2:
00015F2A 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015F30 4EB9 0000 ACC4             		jsr	AnimateSprite
00015F36 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00015F3A 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00015F3C 323C 001B                  		move.w	#$1B,d1
00015F40 343C 0007                  		move.w	#7,d2
00015F44 3602                       		move.w	d2,d3
00015F46 5243                       		addq.w	#1,d3
00015F48 3828 0008                  		move.w	8(a0),d4
00015F4C 6100 A07C                  		bsr.w	SolidObject
00015F50 6000 9D50                  		bra.w	MarkObjGone
00015F54                            ; ===========================================================================
00015F54                            
00015F54                            Obj69_NotSolid2:
00015F54 0828 0003 0022             		btst	#3,$22(a0)
00015F5A 6700                       		beq.s	Obj69_Display2
00015F5C 43F8 D000                  		lea	($FFFFD000).w,a1
00015F60 08A9 0003 0022             		bclr	#3,$22(a1)
00015F66 08A8 0003 0022             		bclr	#3,$22(a0)
00015F6C 4228 0025                  		clr.b	$25(a0)
00015F70                            
00015F70                            Obj69_Display2:
00015F70 6000 9D30                  		bra.w	MarkObjGone
00015F74                            ; ===========================================================================
00015F74                            Ani_obj69:
00015F74                            	include "_anim\obj69.asm"
00015F74                            ; ---------------------------------------------------------------------------
00015F74                            ; Animation script - trapdoor (SBZ)
00015F74                            ; ---------------------------------------------------------------------------
00015F74 0000                       		dc.w byte_158AC-Ani_obj69
00015F76 0000                       		dc.w byte_158B2-Ani_obj69
00015F78 0000                       		dc.w byte_158B8-Ani_obj69
00015F7A 0000                       		dc.w byte_158CC-Ani_obj69
00015F7C 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00015F82 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00015F88 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00015F95 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00015F9C 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00015FA9 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00015FB0                            		even
00015FB0                            		even
00015FB0                            
00015FB0                            ; ---------------------------------------------------------------------------
00015FB0                            ; Sprite mappings - trapdoor (SBZ)
00015FB0                            ; ---------------------------------------------------------------------------
00015FB0                            Map_obj69:
00015FB0                            	include "_maps\obj69.asm"
00015FB0                            ; ---------------------------------------------------------------------------
00015FB0                            ; Sprite mappings - trapdoor (SBZ)
00015FB0                            ; ---------------------------------------------------------------------------
00015FB0 0000                       		dc.w byte_158E6-Map_obj69
00015FB2 0000                       		dc.w byte_158FB-Map_obj69
00015FB4 0000                       		dc.w byte_15924-Map_obj69
00015FB6 04                         byte_158E6:	dc.b 4
00015FB7 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00015FBC F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00015FC1 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00015FC6 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00015FCB 08                         byte_158FB:	dc.b 8
00015FCC F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00015FD1 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00015FD6 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00015FDB 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00015FE0 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00015FE5 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00015FEA 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00015FEF 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00015FF4 04                         byte_15924:	dc.b 4
00015FF5 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00015FFA 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00015FFF 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00016004 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
0001600A 00                         		even
0001600A 00                         		even
0001600A                            
0001600A                            ; ---------------------------------------------------------------------------
0001600A                            ; Sprite mappings - spinning platforms (SBZ)
0001600A                            ; ---------------------------------------------------------------------------
0001600A                            Map_obj69a:
0001600A                            	include "_maps\obj69a.asm"
0001600A                            ; ---------------------------------------------------------------------------
0001600A                            ; Sprite mappings - spinning platforms (SBZ)
0001600A                            ; ---------------------------------------------------------------------------
0001600A 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
0001600E 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00016012 0000                       		dc.w byte_15970-Map_obj69a
00016014 02                         byte_15944:	dc.b 2
00016015 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0001601A F805 0800 00               		dc.b $F8, 5, 8,	0, 0
0001601F 02                         byte_1594F:	dc.b 2
00016020 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00016025 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
0001602A 02                         byte_1595A:	dc.b 2
0001602B F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00016030 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00016035 02                         byte_15965:	dc.b 2
00016036 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
0001603B 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00016040 02                         byte_15970:	dc.b 2
00016041 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00016046 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
0001604C 00                         		even
0001604C 00                         		even
0001604C                            
0001604C                            ; ===========================================================================
0001604C                            ; ---------------------------------------------------------------------------
0001604C                            ; Object 6A - ground saws and pizza cutters (SBZ)
0001604C                            ; ---------------------------------------------------------------------------
0001604C                            
0001604C                            Obj6A:					; XREF: Obj_Index
0001604C 7000                       		moveq	#0,d0
0001604E 1028 0024                  		move.b	$24(a0),d0
00016052 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00016056 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
0001605A                            ; ===========================================================================
0001605A 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
0001605C 0000                       		dc.w Obj6A_Action-Obj6A_Index
0001605E                            ; ===========================================================================
0001605E                            
0001605E                            Obj6A_Main:				; XREF: Obj6A_Index
0001605E 5428 0024                  		addq.b	#2,$24(a0)
00016062 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
0001606A 317C 43B5 0002             		move.w	#$43B5,2(a0)
00016070 117C 0004 0001             		move.b	#4,1(a0)
00016076 117C 0004 0018             		move.b	#4,$18(a0)
0001607C 117C 0020 0019             		move.b	#$20,$19(a0)
00016082 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016088 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001608E 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00016094 6400                       		bcc.s	Obj6A_Action
00016096 117C 00A2 0020             		move.b	#$A2,$20(a0)
0001609C                            
0001609C                            Obj6A_Action:				; XREF: Obj6A_Index
0001609C 7000                       		moveq	#0,d0
0001609E 1028 0028                  		move.b	$28(a0),d0
000160A2 0240 0007                  		andi.w	#7,d0
000160A6 D040                       		add.w	d0,d0
000160A8 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
000160AC 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
000160B0 3028 003A                  		move.w	$3A(a0),d0
000160B4 0240 FF80                  		andi.w	#$FF80,d0
000160B8 3238 F700                  		move.w	($FFFFF700).w,d1
000160BC 0441 0080                  		subi.w	#$80,d1
000160C0 0241 FF80                  		andi.w	#$FF80,d1
000160C4 9041                       		sub.w	d1,d0
000160C6 0C40 0280                  		cmpi.w	#$280,d0
000160CA 6200                       		bhi.s	Obj6A_Delete
000160CC 4EF9 0000 DBFA             		jmp	DisplaySprite
000160D2                            ; ===========================================================================
000160D2                            
000160D2                            Obj6A_Delete:
000160D2 4EF9 0000 DC36             		jmp	DeleteObject
000160D8                            ; ===========================================================================
000160D8 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
000160DC 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
000160E0 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
000160E2                            ; ===========================================================================
000160E2                            
000160E2                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
000160E2 4E75                       		rts	
000160E4                            ; ===========================================================================
000160E4                            
000160E4                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
000160E4 323C 0060                  		move.w	#$60,d1
000160E8 7000                       		moveq	#0,d0
000160EA 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000160EE 0828 0000 0022             		btst	#0,$22(a0)
000160F4 6700                       		beq.s	Obj6A_Animate01
000160F6 4440                       		neg.w	d0
000160F8 D041                       		add.w	d1,d0
000160FA                            
000160FA                            Obj6A_Animate01:
000160FA 3228 003A                  		move.w	$3A(a0),d1
000160FE 9240                       		sub.w	d0,d1
00016100 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00016104 5328 001E                  		subq.b	#1,$1E(a0)
00016108 6A00                       		bpl.s	loc_15A46
0001610A 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00016110 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00016116                            
00016116                            loc_15A46:
00016116 4A28 0001                  		tst.b	1(a0)
0001611A 6A00                       		bpl.s	locret_15A60
0001611C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016120 0240 000F                  		andi.w	#$F,d0
00016124 6600                       		bne.s	locret_15A60
00016126 303C 00B0                  		move.w	#$B0,d0
0001612A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
00016130                            
00016130                            locret_15A60:
00016130 4E75                       		rts	
00016132                            ; ===========================================================================
00016132                            
00016132                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00016132 323C 0030                  		move.w	#$30,d1
00016136 7000                       		moveq	#0,d0
00016138 1038 FE64                  		move.b	($FFFFFE64).w,d0
0001613C 0828 0000 0022             		btst	#0,$22(a0)
00016142 6700                       		beq.s	Obj6A_Animate02
00016144 4440                       		neg.w	d0
00016146 0640 0080                  		addi.w	#$80,d0
0001614A                            
0001614A                            Obj6A_Animate02:
0001614A 3228 0038                  		move.w	$38(a0),d1
0001614E 9240                       		sub.w	d0,d1
00016150 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00016154 5328 001E                  		subq.b	#1,$1E(a0)
00016158 6A00                       		bpl.s	loc_15A96
0001615A 117C 0002 001E             		move.b	#2,$1E(a0)
00016160 0868 0000 001A             		bchg	#0,$1A(a0)
00016166                            
00016166                            loc_15A96:
00016166 4A28 0001                  		tst.b	1(a0)
0001616A 6A00                       		bpl.s	locret_15AB0
0001616C 1038 FE64                  		move.b	($FFFFFE64).w,d0
00016170 0C00 0018                  		cmpi.b	#$18,d0
00016174 6600                       		bne.s	locret_15AB0
00016176 303C 00B0                  		move.w	#$B0,d0
0001617A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
00016180                            
00016180                            locret_15AB0:
00016180 4E75                       		rts	
00016182                            ; ===========================================================================
00016182                            
00016182                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
00016182 4A28 003D                  		tst.b	$3D(a0)
00016186 6600                       		bne.s	Obj6A_Animate03
00016188 3038 D008                  		move.w	($FFFFD008).w,d0
0001618C 0440 00C0                  		subi.w	#$C0,d0
00016190 6500                       		bcs.s	loc_15B02
00016192 9068 0008                  		sub.w	8(a0),d0
00016196 6500                       		bcs.s	loc_15B02
00016198 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001619C 0440 0080                  		subi.w	#$80,d0
000161A0 B068 000C                  		cmp.w	$C(a0),d0
000161A4 6400                       		bcc.s	locret_15B04
000161A6 0640 0100                  		addi.w	#$100,d0
000161AA B068 000C                  		cmp.w	$C(a0),d0
000161AE 6500                       		bcs.s	locret_15B04
000161B0 117C 0001 003D             		move.b	#1,$3D(a0)
000161B6 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
000161BC 117C 00A2 0020             		move.b	#$A2,$20(a0)
000161C2 117C 0002 001A             		move.b	#2,$1A(a0)
000161C8 303C 00B0                  		move.w	#$B0,d0
000161CC 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
000161D2                            
000161D2                            loc_15B02:
000161D2 588F                       		addq.l	#4,sp
000161D4                            
000161D4                            locret_15B04:
000161D4 4E75                       		rts	
000161D6                            ; ===========================================================================
000161D6                            
000161D6                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
000161D6 4EB9 0000 DBD4             		jsr	SpeedToPos
000161DC 3168 0008 003A             		move.w	8(a0),$3A(a0)
000161E2 5328 001E                  		subq.b	#1,$1E(a0)
000161E6 6A00                       		bpl.s	locret_15B24
000161E8 117C 0002 001E             		move.b	#2,$1E(a0)
000161EE 0868 0000 001A             		bchg	#0,$1A(a0)
000161F4                            
000161F4                            locret_15B24:
000161F4 4E75                       		rts	
000161F6                            ; ===========================================================================
000161F6                            
000161F6                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
000161F6 4A28 003D                  		tst.b	$3D(a0)
000161FA 6600                       		bne.s	Obj6A_Animate04
000161FC 3038 D008                  		move.w	($FFFFD008).w,d0
00016200 0640 00E0                  		addi.w	#$E0,d0
00016204 9068 0008                  		sub.w	8(a0),d0
00016208 6400                       		bcc.s	loc_15B74
0001620A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001620E 0440 0080                  		subi.w	#$80,d0
00016212 B068 000C                  		cmp.w	$C(a0),d0
00016216 6400                       		bcc.s	locret_15B76
00016218 0640 0100                  		addi.w	#$100,d0
0001621C B068 000C                  		cmp.w	$C(a0),d0
00016220 6500                       		bcs.s	locret_15B76
00016222 117C 0001 003D             		move.b	#1,$3D(a0)
00016228 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
0001622E 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016234 117C 0002 001A             		move.b	#2,$1A(a0)
0001623A 303C 00B0                  		move.w	#$B0,d0
0001623E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
00016244                            
00016244                            loc_15B74:
00016244 588F                       		addq.l	#4,sp
00016246                            
00016246                            locret_15B76:
00016246 4E75                       		rts	
00016248                            ; ===========================================================================
00016248                            
00016248                            Obj6A_Animate04:
00016248 4EB9 0000 DBD4             		jsr	SpeedToPos
0001624E 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016254 5328 001E                  		subq.b	#1,$1E(a0)
00016258 6A00                       		bpl.s	locret_15B96
0001625A 117C 0002 001E             		move.b	#2,$1E(a0)
00016260 0868 0000 001A             		bchg	#0,$1A(a0)
00016266                            
00016266                            locret_15B96:
00016266 4E75                       		rts	
00016268                            ; ===========================================================================
00016268                            ; ---------------------------------------------------------------------------
00016268                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016268                            ; ---------------------------------------------------------------------------
00016268                            Map_obj6A:
00016268                            	include "_maps\obj6A.asm"
00016268                            ; ---------------------------------------------------------------------------
00016268                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016268                            ; ---------------------------------------------------------------------------
00016268 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
0001626C 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00016270 07                         byte_15BA0:	dc.b 7
00016271 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00016276 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
0001627B E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00016280 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00016285 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
0001628A 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
0001628F 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00016294 07                         byte_15BC4:	dc.b 7
00016295 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
0001629A D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
0001629F E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000162A4 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000162A9 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000162AE 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000162B3 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000162B8 04                         byte_15BE8:	dc.b 4
000162B9 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000162BE E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000162C3 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000162C8 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000162CD 04                         byte_15BFD:	dc.b 4
000162CE E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000162D3 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000162D8 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000162DD 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000162E2                            		even
000162E2                            		even
000162E2                            
000162E2                            ; ===========================================================================
000162E2                            ; ---------------------------------------------------------------------------
000162E2                            ; Object 6B - stomper (SBZ)
000162E2                            ; ---------------------------------------------------------------------------
000162E2                            
000162E2                            Obj6B:					; XREF: Obj_Index
000162E2 7000                       		moveq	#0,d0
000162E4 1028 0024                  		move.b	$24(a0),d0
000162E8 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
000162EC 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
000162F0                            ; ===========================================================================
000162F0 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
000162F2 0000                       		dc.w Obj6B_Action-Obj6B_Index
000162F4                            
000162F4 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
000162F8 1C20 3803                  		dc.b  $1C, $20,	$38,   3
000162FC 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00016300 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00016304 8040 0005                  		dc.b  $80, $40,	  0,   5
00016308                            ; ===========================================================================
00016308                            
00016308                            Obj6B_Main:				; XREF: Obj6B_Index
00016308 5428 0024                  		addq.b	#2,$24(a0)
0001630C 7000                       		moveq	#0,d0
0001630E 1028 0028                  		move.b	$28(a0),d0
00016312 E448                       		lsr.w	#2,d0
00016314 0240 001C                  		andi.w	#$1C,d0
00016318 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
0001631C 115B 0019                  		move.b	(a3)+,$19(a0)
00016320 115B 0016                  		move.b	(a3)+,$16(a0)
00016324 E448                       		lsr.w	#2,d0
00016326 1140 001A                  		move.b	d0,$1A(a0)
0001632A 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00016332 317C 22C0 0002             		move.w	#$22C0,2(a0)
00016338 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
0001633E 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00016340 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00016346 6700                       		beq.s	Obj6B_SBZ3
00016348                            
00016348                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00016348 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001634C 7000                       		moveq	#0,d0
0001634E 1028 0023                  		move.b	$23(a0),d0
00016352 6700                       		beq.s	Obj6B_Delete
00016354 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001635A                            
0001635A                            Obj6B_Delete:
0001635A 4EF9 0000 DC36             		jmp	DeleteObject
00016360                            ; ===========================================================================
00016360                            
00016360                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00016360 317C 41F0 0002             		move.w	#$41F0,2(a0)
00016366 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
0001636C 6600                       		bne.s	Obj6B_SBZ12
0001636E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016372 7000                       		moveq	#0,d0
00016374 1028 0023                  		move.b	$23(a0),d0
00016378 6700                       		beq.s	Obj6B_SBZ12
0001637A 0832 0000 0002             		btst	#0,2(a2,d0.w)
00016380 6700                       		beq.s	Obj6B_SBZ12
00016382 4238 F7CB                  		clr.b	($FFFFF7CB).w
00016386 60C0                       		bra.s	Obj6B_ChkGone
00016388                            ; ===========================================================================
00016388                            
00016388                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00016388 0028 0004 0001             		ori.b	#4,1(a0)
0001638E 117C 0004 0018             		move.b	#4,$18(a0)
00016394 3168 0008 0034             		move.w	8(a0),$34(a0)
0001639A 3168 000C 0030             		move.w	$C(a0),$30(a0)
000163A0 7000                       		moveq	#0,d0
000163A2 101B                       		move.b	(a3)+,d0
000163A4 3140 003C                  		move.w	d0,$3C(a0)
000163A8 7000                       		moveq	#0,d0
000163AA 1028 0028                  		move.b	$28(a0),d0
000163AE 6A00                       		bpl.s	Obj6B_Action
000163B0 0200 000F                  		andi.b	#$F,d0
000163B4 1140 003E                  		move.b	d0,$3E(a0)
000163B8 1153 0028                  		move.b	(a3),$28(a0)
000163BC 0C13 0005                  		cmpi.b	#5,(a3)
000163C0 6600                       		bne.s	Obj6B_ChkGone2
000163C2 08E8 0004 0001             		bset	#4,1(a0)
000163C8                            
000163C8                            Obj6B_ChkGone2:
000163C8 45F8 FC00                  		lea	($FFFFFC00).w,a2
000163CC 7000                       		moveq	#0,d0
000163CE 1028 0023                  		move.b	$23(a0),d0
000163D2 6700                       		beq.s	Obj6B_Action
000163D4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000163DA                            
000163DA                            Obj6B_Action:				; XREF: Obj6B_Index
000163DA 3F28 0008                  		move.w	8(a0),-(sp)
000163DE 7000                       		moveq	#0,d0
000163E0 1028 0028                  		move.b	$28(a0),d0
000163E4 0240 000F                  		andi.w	#$F,d0
000163E8 D040                       		add.w	d0,d0
000163EA 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
000163EE 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
000163F2 381F                       		move.w	(sp)+,d4
000163F4 4A28 0001                  		tst.b	1(a0)
000163F8 6A00                       		bpl.s	Obj6B_ChkDel
000163FA 7200                       		moveq	#0,d1
000163FC 1228 0019                  		move.b	$19(a0),d1
00016400 0641 000B                  		addi.w	#$B,d1
00016404 7400                       		moveq	#0,d2
00016406 1428 0016                  		move.b	$16(a0),d2
0001640A 3602                       		move.w	d2,d3
0001640C 5243                       		addq.w	#1,d3
0001640E 6100 9BBA                  		bsr.w	SolidObject
00016412                            
00016412                            Obj6B_ChkDel:
00016412 3028 0034                  		move.w	$34(a0),d0
00016416 0240 FF80                  		andi.w	#$FF80,d0
0001641A 3238 F700                  		move.w	($FFFFF700).w,d1
0001641E 0441 0080                  		subi.w	#$80,d1
00016422 0241 FF80                  		andi.w	#$FF80,d1
00016426 9041                       		sub.w	d1,d0
00016428 0C40 0280                  		cmpi.w	#$280,d0
0001642C 6200                       		bhi.s	loc_15D64
0001642E 4EF9 0000 DBFA             		jmp	DisplaySprite
00016434                            ; ===========================================================================
00016434                            
00016434                            loc_15D64:
00016434 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0001643A 6600                       		bne.s	Obj6B_Delete2
0001643C 4238 F7CB                  		clr.b	($FFFFF7CB).w
00016440 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016444 7000                       		moveq	#0,d0
00016446 1028 0023                  		move.b	$23(a0),d0
0001644A 6700                       		beq.s	Obj6B_Delete2
0001644C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016452                            
00016452                            Obj6B_Delete2:
00016452 4EF9 0000 DC36             		jmp	DeleteObject
00016458                            ; ===========================================================================
00016458 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
0001645C 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00016460 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00016464                            ; ===========================================================================
00016464                            
00016464                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00016464 4E75                       		rts	
00016466                            ; ===========================================================================
00016466                            
00016466                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00016466 4A28 0038                  		tst.b	$38(a0)
0001646A 6600                       		bne.s	loc_15DB4
0001646C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016470 7000                       		moveq	#0,d0
00016472 1028 003E                  		move.b	$3E(a0),d0
00016476 0832 0000 0000             		btst	#0,(a2,d0.w)
0001647C 6700                       		beq.s	loc_15DC2
0001647E 117C 0001 0038             		move.b	#1,$38(a0)
00016484                            
00016484                            loc_15DB4:
00016484 3028 003C                  		move.w	$3C(a0),d0
00016488 B068 003A                  		cmp.w	$3A(a0),d0
0001648C 6700                       		beq.s	loc_15DE0
0001648E 5468 003A                  		addq.w	#2,$3A(a0)
00016492                            
00016492                            loc_15DC2:
00016492 3028 003A                  		move.w	$3A(a0),d0
00016496 0828 0000 0022             		btst	#0,$22(a0)
0001649C 6700                       		beq.s	loc_15DD4
0001649E 4440                       		neg.w	d0
000164A0 0640 0080                  		addi.w	#$80,d0
000164A4                            
000164A4                            loc_15DD4:
000164A4 3228 0034                  		move.w	$34(a0),d1
000164A8 9240                       		sub.w	d0,d1
000164AA 3141 0008                  		move.w	d1,8(a0)
000164AE 4E75                       		rts	
000164B0                            ; ===========================================================================
000164B0                            
000164B0                            loc_15DE0:
000164B0 5228 0028                  		addq.b	#1,$28(a0)
000164B4 317C 00B4 0036             		move.w	#$B4,$36(a0)
000164BA 4228 0038                  		clr.b	$38(a0)
000164BE 45F8 FC00                  		lea	($FFFFFC00).w,a2
000164C2 7000                       		moveq	#0,d0
000164C4 1028 0023                  		move.b	$23(a0),d0
000164C8 67C8                       		beq.s	loc_15DC2
000164CA 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000164D0 60C0                       		bra.s	loc_15DC2
000164D2                            ; ===========================================================================
000164D2                            
000164D2                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
000164D2 4A28 0038                  		tst.b	$38(a0)
000164D6 6600                       		bne.s	loc_15E14
000164D8 5368 0036                  		subq.w	#1,$36(a0)
000164DC 6600                       		bne.s	loc_15E1E
000164DE 117C 0001 0038             		move.b	#1,$38(a0)
000164E4                            
000164E4                            loc_15E14:
000164E4 4A68 003A                  		tst.w	$3A(a0)
000164E8 6700                       		beq.s	loc_15E3C
000164EA 5568 003A                  		subq.w	#2,$3A(a0)
000164EE                            
000164EE                            loc_15E1E:
000164EE 3028 003A                  		move.w	$3A(a0),d0
000164F2 0828 0000 0022             		btst	#0,$22(a0)
000164F8 6700                       		beq.s	loc_15E30
000164FA 4440                       		neg.w	d0
000164FC 0640 0080                  		addi.w	#$80,d0
00016500                            
00016500                            loc_15E30:
00016500 3228 0034                  		move.w	$34(a0),d1
00016504 9240                       		sub.w	d0,d1
00016506 3141 0008                  		move.w	d1,8(a0)
0001650A 4E75                       		rts	
0001650C                            ; ===========================================================================
0001650C                            
0001650C                            loc_15E3C:
0001650C 5328 0028                  		subq.b	#1,$28(a0)
00016510 4228 0038                  		clr.b	$38(a0)
00016514 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016518 7000                       		moveq	#0,d0
0001651A 1028 0023                  		move.b	$23(a0),d0
0001651E 67CE                       		beq.s	loc_15E1E
00016520 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00016526 60C6                       		bra.s	loc_15E1E
00016528                            ; ===========================================================================
00016528                            
00016528                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00016528 4A28 0038                  		tst.b	$38(a0)
0001652C 6600                       		bne.s	loc_15E7C
0001652E 4A68 003A                  		tst.w	$3A(a0)
00016532 6700                       		beq.s	loc_15E6A
00016534 5368 003A                  		subq.w	#1,$3A(a0)
00016538 6000                       		bra.s	loc_15E8E
0001653A                            ; ===========================================================================
0001653A                            
0001653A                            loc_15E6A:
0001653A 5368 0036                  		subq.w	#1,$36(a0)
0001653E 6A00                       		bpl.s	loc_15E8E
00016540 317C 003C 0036             		move.w	#$3C,$36(a0)
00016546 117C 0001 0038             		move.b	#1,$38(a0)
0001654C                            
0001654C                            loc_15E7C:
0001654C 5068 003A                  		addq.w	#8,$3A(a0)
00016550 3028 003A                  		move.w	$3A(a0),d0
00016554 B068 003C                  		cmp.w	$3C(a0),d0
00016558 6600                       		bne.s	loc_15E8E
0001655A 4228 0038                  		clr.b	$38(a0)
0001655E                            
0001655E                            loc_15E8E:
0001655E 3028 003A                  		move.w	$3A(a0),d0
00016562 0828 0000 0022             		btst	#0,$22(a0)
00016568 6700                       		beq.s	loc_15EA0
0001656A 4440                       		neg.w	d0
0001656C 0640 0038                  		addi.w	#$38,d0
00016570                            
00016570                            loc_15EA0:
00016570 3228 0030                  		move.w	$30(a0),d1
00016574 D240                       		add.w	d0,d1
00016576 3141 000C                  		move.w	d1,$C(a0)
0001657A 4E75                       		rts	
0001657C                            ; ===========================================================================
0001657C                            
0001657C                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
0001657C 4A28 0038                  		tst.b	$38(a0)
00016580 6600                       		bne.s	loc_15ED0
00016582 4A68 003A                  		tst.w	$3A(a0)
00016586 6700                       		beq.s	loc_15EBE
00016588 5168 003A                  		subq.w	#8,$3A(a0)
0001658C 6000                       		bra.s	loc_15EF0
0001658E                            ; ===========================================================================
0001658E                            
0001658E                            loc_15EBE:
0001658E 5368 0036                  		subq.w	#1,$36(a0)
00016592 6A00                       		bpl.s	loc_15EF0
00016594 317C 003C 0036             		move.w	#$3C,$36(a0)
0001659A 117C 0001 0038             		move.b	#1,$38(a0)
000165A0                            
000165A0                            loc_15ED0:
000165A0 3028 003A                  		move.w	$3A(a0),d0
000165A4 B068 003C                  		cmp.w	$3C(a0),d0
000165A8 6700                       		beq.s	loc_15EE0
000165AA 5068 003A                  		addq.w	#8,$3A(a0)
000165AE 6000                       		bra.s	loc_15EF0
000165B0                            ; ===========================================================================
000165B0                            
000165B0                            loc_15EE0:
000165B0 5368 0036                  		subq.w	#1,$36(a0)
000165B4 6A00                       		bpl.s	loc_15EF0
000165B6 317C 003C 0036             		move.w	#$3C,$36(a0)
000165BC 4228 0038                  		clr.b	$38(a0)
000165C0                            
000165C0                            loc_15EF0:
000165C0 3028 003A                  		move.w	$3A(a0),d0
000165C4 0828 0000 0022             		btst	#0,$22(a0)
000165CA 6700                       		beq.s	loc_15F02
000165CC 4440                       		neg.w	d0
000165CE 0640 0038                  		addi.w	#$38,d0
000165D2                            
000165D2                            loc_15F02:
000165D2 3228 0030                  		move.w	$30(a0),d1
000165D6 D240                       		add.w	d0,d1
000165D8 3141 000C                  		move.w	d1,$C(a0)
000165DC 4E75                       		rts	
000165DE                            ; ===========================================================================
000165DE                            
000165DE                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
000165DE 4A28 0038                  		tst.b	$38(a0)
000165E2 6600                       		bne.s	loc_15F3E
000165E4 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000165E8 7000                       		moveq	#0,d0
000165EA 1028 003E                  		move.b	$3E(a0),d0
000165EE 0832 0000 0000             		btst	#0,(a2,d0.w)
000165F4 6700                       		beq.s	locret_15F5C
000165F6 117C 0001 0038             		move.b	#1,$38(a0)
000165FC 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016600 7000                       		moveq	#0,d0
00016602 1028 0023                  		move.b	$23(a0),d0
00016606 6700                       		beq.s	loc_15F3E
00016608 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001660E                            
0001660E                            loc_15F3E:
0001660E 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00016616 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
0001661E 3168 0008 0034             		move.w	8(a0),$34(a0)
00016624 0C68 0980 0008             		cmpi.w	#$980,8(a0)
0001662A 6700                       		beq.s	loc_15F5E
0001662C                            
0001662C                            locret_15F5C:
0001662C 4E75                       		rts	
0001662E                            ; ===========================================================================
0001662E                            
0001662E                            loc_15F5E:
0001662E 4228 0028                  		clr.b	$28(a0)
00016632 4228 0038                  		clr.b	$38(a0)
00016636 4E75                       		rts	
00016638                            ; ===========================================================================
00016638                            ; ---------------------------------------------------------------------------
00016638                            ; Sprite mappings - stomper and	platforms (SBZ)
00016638                            ; ---------------------------------------------------------------------------
00016638                            Map_obj6B:
00016638                            	include "_maps\obj6B.asm"
00016638                            ; ---------------------------------------------------------------------------
00016638                            ; Sprite mappings - stomper and	platforms (SBZ)
00016638                            ; ---------------------------------------------------------------------------
00016638 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
0001663C 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00016640 0000                       		dc.w byte_15FB0-Map_obj6B
00016642 04                         byte_15F72:	dc.b 4
00016643 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00016648 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
0001664D F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00016652 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00016657 08                         byte_15F87:	dc.b 8
00016658 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
0001665D E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00016662 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00016667 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
0001666C 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00016671 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00016676 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
0001667B 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00016680 0E                         byte_15FB0:	dc.b $E
00016681 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00016686 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
0001668B C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00016690 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00016695 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
0001669A C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
0001669F C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
000166A4 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
000166A9 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
000166AE E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
000166B3 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
000166B8 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
000166BD 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
000166C2 200F 0058 80               		dc.b $20, $F, 0, $58, $80
000166C8 00                         		even
000166C8 00                         		even
000166C8                            
000166C8                            ; ===========================================================================
000166C8                            ; ---------------------------------------------------------------------------
000166C8                            ; Object 6C - vanishing	platforms (SBZ)
000166C8                            ; ---------------------------------------------------------------------------
000166C8                            
000166C8                            Obj6C:					; XREF: Obj_Index
000166C8 7000                       		moveq	#0,d0
000166CA 1028 0024                  		move.b	$24(a0),d0
000166CE 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
000166D2 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
000166D6                            ; ===========================================================================
000166D6 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
000166D8 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000166DA 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000166DC 0000                       		dc.w loc_16068-Obj6C_Index
000166DE                            ; ===========================================================================
000166DE                            
000166DE                            Obj6C_Main:				; XREF: Obj6C_Index
000166DE 5C28 0024                  		addq.b	#6,$24(a0)
000166E2 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
000166EA 317C 44C3 0002             		move.w	#$44C3,2(a0)
000166F0 0028 0004 0001             		ori.b	#4,1(a0)
000166F6 117C 0010 0019             		move.b	#$10,$19(a0)
000166FC 117C 0004 0018             		move.b	#4,$18(a0)
00016702 7000                       		moveq	#0,d0
00016704 1028 0028                  		move.b	$28(a0),d0	; get object type
00016708 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001670C 5240                       		addq.w	#1,d0		; add 1
0001670E EF48                       		lsl.w	#7,d0		; multiply by $80
00016710 3200                       		move.w	d0,d1
00016712 5340                       		subq.w	#1,d0
00016714 3140 0030                  		move.w	d0,$30(a0)
00016718 3140 0032                  		move.w	d0,$32(a0)
0001671C 7000                       		moveq	#0,d0
0001671E 1028 0028                  		move.b	$28(a0),d0	; get object type
00016722 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00016726 0641 0080                  		addi.w	#$80,d1
0001672A C0C1                       		mulu.w	d1,d0
0001672C E088                       		lsr.l	#8,d0
0001672E 3140 0036                  		move.w	d0,$36(a0)
00016732 5341                       		subq.w	#1,d1
00016734 3141 0038                  		move.w	d1,$38(a0)
00016738                            
00016738                            loc_16068:				; XREF: Obj6C_Index
00016738 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001673C 9068 0036                  		sub.w	$36(a0),d0
00016740 C068 0038                  		and.w	$38(a0),d0
00016744 6600                       		bne.s	Obj6C_Animate
00016746 5928 0024                  		subq.b	#4,$24(a0)
0001674A 6000                       		bra.s	Obj6C_Vanish
0001674C                            ; ===========================================================================
0001674C                            
0001674C                            Obj6C_Animate:
0001674C 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016752 4EB9 0000 ACC4             		jsr	AnimateSprite
00016758 6000 9548                  		bra.w	MarkObjGone
0001675C                            ; ===========================================================================
0001675C                            
0001675C                            Obj6C_Vanish:				; XREF: Obj6C_Index
0001675C 5368 0030                  		subq.w	#1,$30(a0)
00016760 6A00                       		bpl.s	loc_160AA
00016762 317C 007F 0030             		move.w	#127,$30(a0)
00016768 4A28 001C                  		tst.b	$1C(a0)
0001676C 6700                       		beq.s	loc_160A4
0001676E 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016774                            
00016774                            loc_160A4:
00016774 0868 0000 001C             		bchg	#0,$1C(a0)
0001677A                            
0001677A                            loc_160AA:
0001677A 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016780 4EB9 0000 ACC4             		jsr	AnimateSprite
00016786 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
0001678C 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
0001678E 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00016794 6600                       		bne.s	loc_160D6
00016796 7200                       		moveq	#0,d1
00016798 1228 0019                  		move.b	$19(a0),d1
0001679C 4EB9 0000 7920             		jsr	(PlatformObject).l
000167A2 6000 94FE                  		bra.w	MarkObjGone
000167A6                            ; ===========================================================================
000167A6                            
000167A6                            loc_160D6:
000167A6 7200                       		moveq	#0,d1
000167A8 1228 0019                  		move.b	$19(a0),d1
000167AC 4EB9 0000 7A94             		jsr	(ExitPlatform).l
000167B2 3428 0008                  		move.w	8(a0),d2
000167B6 4EB9 0000 7FFE             		jsr	(MvSonicOnPtfm2).l
000167BC 6000 94E4                  		bra.w	MarkObjGone
000167C0                            ; ===========================================================================
000167C0                            
000167C0                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
000167C0 0828 0003 0022             		btst	#3,$22(a0)
000167C6 6700                       		beq.s	Obj6C_Display
000167C8 43F8 D000                  		lea	($FFFFD000).w,a1
000167CC 08A9 0003 0022             		bclr	#3,$22(a1)
000167D2 08A8 0003 0022             		bclr	#3,$22(a0)
000167D8 117C 0002 0024             		move.b	#2,$24(a0)
000167DE 4228 0025                  		clr.b	$25(a0)
000167E2                            
000167E2                            Obj6C_Display:
000167E2 6000 94BE                  		bra.w	MarkObjGone
000167E6                            ; ===========================================================================
000167E6                            Ani_obj6C:
000167E6                            	include "_anim\obj6C.asm"
000167E6                            ; ---------------------------------------------------------------------------
000167E6                            ; Animation script - vanishing platforms (SBZ)
000167E6                            ; ---------------------------------------------------------------------------
000167E6 0000                       		dc.w byte_1611A-Ani_obj6C
000167E8 0000                       		dc.w byte_16122-Ani_obj6C
000167EA 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
000167F2 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
000167FA                            		even
000167FA                            		even
000167FA                            
000167FA                            ; ---------------------------------------------------------------------------
000167FA                            ; Sprite mappings - vanishing platforms	(SBZ)
000167FA                            ; ---------------------------------------------------------------------------
000167FA                            Map_obj6C:
000167FA                            	include "_maps\obj6C.asm"
000167FA                            ; ---------------------------------------------------------------------------
000167FA                            ; Sprite mappings - vanishing platforms	(SBZ)
000167FA                            ; ---------------------------------------------------------------------------
000167FA 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
000167FE 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00016802 01                         byte_16132:	dc.b 1
00016803 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00016808 01                         byte_16138:	dc.b 1
00016809 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
0001680E 01                         byte_1613E:	dc.b 1
0001680F F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00016814 00                         byte_16144:	dc.b 0
00016816 00                         		even
00016816 00                         		even
00016816                            
00016816                            ; ===========================================================================
00016816                            ; ---------------------------------------------------------------------------
00016816                            ; Object 6E - electrocution orbs (SBZ)
00016816                            ; ---------------------------------------------------------------------------
00016816                            
00016816                            Obj6E:					; XREF: Obj_Index
00016816 7000                       		moveq	#0,d0
00016818 1028 0024                  		move.b	$24(a0),d0
0001681C 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00016820 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00016824                            ; ===========================================================================
00016824 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016826 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00016828                            ; ===========================================================================
00016828                            
00016828                            Obj6E_Main:				; XREF: Obj6E_Index
00016828 5428 0024                  		addq.b	#2,$24(a0)
0001682C 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00016834 317C 047E 0002             		move.w	#$47E,2(a0)
0001683A 0028 0004 0001             		ori.b	#4,1(a0)
00016840 117C 0028 0019             		move.b	#$28,$19(a0)
00016846 7000                       		moveq	#0,d0
00016848 1028 0028                  		move.b	$28(a0),d0	; read object type
0001684C E948                       		lsl.w	#4,d0		; multiply by $10
0001684E 5340                       		subq.w	#1,d0
00016850 3140 0034                  		move.w	d0,$34(a0)
00016854                            
00016854                            Obj6E_Shock:				; XREF: Obj6E_Index
00016854 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016858 C068 0034                  		and.w	$34(a0),d0
0001685C 6600                       		bne.s	Obj6E_Animate
0001685E 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00016864 4A28 0001                  		tst.b	1(a0)
00016868 6A00                       		bpl.s	Obj6E_Animate
0001686A 303C 00B1                  		move.w	#$B1,d0
0001686E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play electricity sound
00016874                            
00016874                            Obj6E_Animate:
00016874 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
0001687A 4EB9 0000 ACC4             		jsr	AnimateSprite
00016880 117C 0000 0020             		move.b	#0,$20(a0)
00016886 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
0001688C 6600                       		bne.s	Obj6E_Display	; if not, branch
0001688E 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00016894                            
00016894                            Obj6E_Display:
00016894 6000 940C                  		bra.w	MarkObjGone
00016898                            ; ===========================================================================
00016898                            Ani_obj6E:
00016898                            	include "_anim\obj6E.asm"
00016898                            ; ---------------------------------------------------------------------------
00016898                            ; Animation script - electrocution orbs (SBZ)
00016898                            ; ---------------------------------------------------------------------------
00016898 0000                       		dc.w byte_161CC-Ani_obj6E
0001689A 0000                       		dc.w byte_161D0-Ani_obj6E
0001689C 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
000168A0 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
000168B0                            		even
000168B0                            		even
000168B0                            
000168B0                            ; ---------------------------------------------------------------------------
000168B0                            ; Sprite mappings - electrocution orbs (SBZ)
000168B0                            ; ---------------------------------------------------------------------------
000168B0                            Map_obj6E:
000168B0                            	include "_maps\obj6E.asm"
000168B0                            Map_26ed:
000168B0 0000                       Map_26ed_0: 	dc.w Map_26ed_C-Map_26ed
000168B2 0000                       Map_26ed_2: 	dc.w Map_26ed_12-Map_26ed
000168B4 0000                       Map_26ed_4: 	dc.w Map_26ed_1D-Map_26ed
000168B6 0000                       Map_26ed_6: 	dc.w Map_26ed_3C-Map_26ed
000168B8 0000                       Map_26ed_8: 	dc.w Map_26ed_65-Map_26ed
000168BA 0000                       Map_26ed_A: 	dc.w Map_26ed_84-Map_26ed
000168BC 01                         Map_26ed_C: 	dc.b $1
000168BD 0805 0000 F8               	dc.b $8, $5, $0, $0, $F8
000168C2 02                         Map_26ed_12: 	dc.b $2
000168C3 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
000168C8 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
000168CD 06                         Map_26ed_1D: 	dc.b $6
000168CE F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
000168D3 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
000168D8 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
000168DD F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
000168E2 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
000168E7 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
000168EC 08                         Map_26ed_3C: 	dc.b $8
000168ED F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
000168F2 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
000168F7 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
000168FC F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016901 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016906 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
0001690B F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016910 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016915 06                         Map_26ed_65: 	dc.b $6
00016916 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
0001691B 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016920 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016925 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
0001692A F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
0001692F F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016934 04                         Map_26ed_84: 	dc.b $4
00016935 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
0001693A 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
0001693F F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016944 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
0001694A 00                         	even
0001694A 00                         	even
0001694A                            
0001694A                            ; ===========================================================================
0001694A                            ; ---------------------------------------------------------------------------
0001694A                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
0001694A                            ; ---------------------------------------------------------------------------
0001694A                            
0001694A                            Obj6F:					; XREF: Obj_Index
0001694A 7000                       		moveq	#0,d0
0001694C 1028 0024                  		move.b	$24(a0),d0
00016950 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00016954 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016958 3028 0030                  		move.w	$30(a0),d0
0001695C 0240 FF80                  		andi.w	#$FF80,d0
00016960 3238 F700                  		move.w	($FFFFF700).w,d1
00016964 0441 0080                  		subi.w	#$80,d1
00016968 0241 FF80                  		andi.w	#$FF80,d1
0001696C 9041                       		sub.w	d1,d0
0001696E 0C40 0280                  		cmpi.w	#$280,d0
00016972 6200                       		bhi.s	loc_1629A
00016974                            
00016974                            Obj6F_Display:
00016974 4EF9 0000 DBFA             		jmp	DisplaySprite
0001697A                            ; ===========================================================================
0001697A                            
0001697A                            loc_1629A:
0001697A 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00016980 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00016982 0C40 FF80                  		cmpi.w	#-$80,d0
00016986 64EC                       		bcc.s	Obj6F_Display
00016988                            
00016988                            Obj6F_Act1or2:
00016988 1028 002F                  		move.b	$2F(a0),d0
0001698C 6A00                       		bpl.s	Obj6F_Delete
0001698E 0240 007F                  		andi.w	#$7F,d0
00016992 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016996 08B2 0000 0000             		bclr	#0,(a2,d0.w)
0001699C                            
0001699C                            Obj6F_Delete:
0001699C 4EF9 0000 DC36             		jmp	DeleteObject
000169A2                            ; ===========================================================================
000169A2 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
000169A4 0000                       		dc.w loc_163D8-Obj6F_Index
000169A6                            ; ===========================================================================
000169A6                            
000169A6                            Obj6F_Main:				; XREF: Obj6F_Index
000169A6 1028 0028                  		move.b	$28(a0),d0
000169AA 6B00 0000                  		bmi.w	loc_16380
000169AE 5428 0024                  		addq.b	#2,$24(a0)
000169B2 217C 0001 600A 0004        		move.l	#Map_obj69a,4(a0)
000169BA 317C 04DF 0002             		move.w	#$4DF,2(a0)
000169C0 117C 0010 0019             		move.b	#$10,$19(a0)
000169C6 0028 0004 0001             		ori.b	#4,1(a0)
000169CC 117C 0004 0018             		move.b	#4,$18(a0)
000169D2 7000                       		moveq	#0,d0
000169D4 1028 0028                  		move.b	$28(a0),d0
000169D8 3200                       		move.w	d0,d1
000169DA E648                       		lsr.w	#3,d0
000169DC 0240 001E                  		andi.w	#$1E,d0
000169E0 45FA 0000                  		lea	off_164A6(pc),a2
000169E4 D4F2 0000                  		adda.w	(a2,d0.w),a2
000169E8 315A 0038                  		move.w	(a2)+,$38(a0)
000169EC 315A 0030                  		move.w	(a2)+,$30(a0)
000169F0 214A 003C                  		move.l	a2,$3C(a0)
000169F4 0241 000F                  		andi.w	#$F,d1
000169F8 E549                       		lsl.w	#2,d1
000169FA 1141 0038                  		move.b	d1,$38(a0)
000169FE 117C 0004 003A             		move.b	#4,$3A(a0)
00016A04 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00016A08 6700                       		beq.s	loc_16356
00016A0A 117C 0001 003B             		move.b	#1,$3B(a0)
00016A10 4428 003A                  		neg.b	$3A(a0)
00016A14 7200                       		moveq	#0,d1
00016A16 1228 0038                  		move.b	$38(a0),d1
00016A1A D228 003A                  		add.b	$3A(a0),d1
00016A1E B228 0039                  		cmp.b	$39(a0),d1
00016A22 6500                       		bcs.s	loc_16352
00016A24 1001                       		move.b	d1,d0
00016A26 7200                       		moveq	#0,d1
00016A28 4A00                       		tst.b	d0
00016A2A 6A00                       		bpl.s	loc_16352
00016A2C 1228 0039                  		move.b	$39(a0),d1
00016A30 5901                       		subq.b	#4,d1
00016A32                            
00016A32                            loc_16352:
00016A32 1141 0038                  		move.b	d1,$38(a0)
00016A36                            
00016A36                            loc_16356:
00016A36 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00016A3C 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00016A42 4A41                       		tst.w	d1
00016A44 6600                       		bne.s	loc_1636C
00016A46 117C 0001 001C             		move.b	#1,$1C(a0)
00016A4C                            
00016A4C                            loc_1636C:
00016A4C 0C41 0008                  		cmpi.w	#8,d1
00016A50 6600                       		bne.s	loc_16378
00016A52 117C 0000 001C             		move.b	#0,$1C(a0)
00016A58                            
00016A58                            loc_16378:
00016A58 6100 C0E0                  		bsr.w	Obj63_ChangeDir
00016A5C 6000 0000                  		bra.w	loc_163D8
00016A60                            ; ===========================================================================
00016A60                            
00016A60                            loc_16380:				; XREF: Obj6F_Main
00016A60 1140 002F                  		move.b	d0,$2F(a0)
00016A64 0240 007F                  		andi.w	#$7F,d0
00016A68 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016A6C 08F2 0000 0000             		bset	#0,(a2,d0.w)
00016A72 6700                       		beq.s	loc_1639A
00016A74 4EF9 0000 DC36             		jmp	DeleteObject
00016A7A                            ; ===========================================================================
00016A7A                            
00016A7A                            loc_1639A:
00016A7A D040                       		add.w	d0,d0
00016A7C 0240 001E                  		andi.w	#$1E,d0
00016A80 0640 0080                  		addi.w	#$80,d0
00016A84 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00016A8A D4F2 0000                  		adda.w	(a2,d0.w),a2
00016A8E 321A                       		move.w	(a2)+,d1
00016A90 2248                       		movea.l	a0,a1
00016A92 6000                       		bra.s	Obj6F_LoadPform
00016A94                            ; ===========================================================================
00016A94                            
00016A94                            Obj6F_Loop:
00016A94 4EB9 0000 E080             		jsr	SingleObjLoad
00016A9A 6600                       		bne.s	loc_163D0
00016A9C                            
00016A9C                            Obj6F_LoadPform:			; XREF: loc_1639A
00016A9C 12BC 006F                  		move.b	#$6F,0(a1)
00016AA0 335A 0008                  		move.w	(a2)+,8(a1)
00016AA4 335A 000C                  		move.w	(a2)+,$C(a1)
00016AA8 301A                       		move.w	(a2)+,d0
00016AAA 1340 0028                  		move.b	d0,$28(a1)
00016AAE                            
00016AAE                            loc_163D0:
00016AAE 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00016AB2                            
00016AB2 588F                       		addq.l	#4,sp
00016AB4 4E75                       		rts	
00016AB6                            ; ===========================================================================
00016AB6                            
00016AB6                            loc_163D8:				; XREF: Obj6F_Index
00016AB6 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00016ABC 4EB9 0000 ACC4             		jsr	AnimateSprite
00016AC2 4A28 001A                  		tst.b	$1A(a0)
00016AC6 6600                       		bne.s	loc_16404
00016AC8 3F28 0008                  		move.w	8(a0),-(sp)
00016ACC 6100 0000                  		bsr.w	loc_16424
00016AD0 323C 001B                  		move.w	#$1B,d1
00016AD4 343C 0007                  		move.w	#7,d2
00016AD8 3602                       		move.w	d2,d3
00016ADA 5243                       		addq.w	#1,d3
00016ADC 381F                       		move.w	(sp)+,d4
00016ADE 6000 94EA                  		bra.w	SolidObject
00016AE2                            ; ===========================================================================
00016AE2                            
00016AE2                            loc_16404:
00016AE2 0828 0003 0022             		btst	#3,$22(a0)
00016AE8 6700                       		beq.s	loc_16420
00016AEA 43F8 D000                  		lea	($FFFFD000).w,a1
00016AEE 08A9 0003 0022             		bclr	#3,$22(a1)
00016AF4 08A8 0003 0022             		bclr	#3,$22(a0)
00016AFA 4228 0025                  		clr.b	$25(a0)
00016AFE                            
00016AFE                            loc_16420:
00016AFE 6000 0002                  		bra.w	*+4
00016B02                            
00016B02                            loc_16424:
00016B02 3028 0008                  		move.w	8(a0),d0
00016B06 B068 0034                  		cmp.w	$34(a0),d0
00016B0A 6600                       		bne.s	loc_16484
00016B0C 3028 000C                  		move.w	$C(a0),d0
00016B10 B068 0036                  		cmp.w	$36(a0),d0
00016B14 6600                       		bne.s	loc_16484
00016B16 7200                       		moveq	#0,d1
00016B18 1228 0038                  		move.b	$38(a0),d1
00016B1C D228 003A                  		add.b	$3A(a0),d1
00016B20 B228 0039                  		cmp.b	$39(a0),d1
00016B24 6500                       		bcs.s	loc_16456
00016B26 1001                       		move.b	d1,d0
00016B28 7200                       		moveq	#0,d1
00016B2A 4A00                       		tst.b	d0
00016B2C 6A00                       		bpl.s	loc_16456
00016B2E 1228 0039                  		move.b	$39(a0),d1
00016B32 5901                       		subq.b	#4,d1
00016B34                            
00016B34                            loc_16456:
00016B34 1141 0038                  		move.b	d1,$38(a0)
00016B38 2268 003C                  		movea.l	$3C(a0),a1
00016B3C 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00016B42 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016B48 4A41                       		tst.w	d1
00016B4A 6600                       		bne.s	loc_16474
00016B4C 117C 0001 001C             		move.b	#1,$1C(a0)
00016B52                            
00016B52                            loc_16474:
00016B52 0C41 0008                  		cmpi.w	#8,d1
00016B56 6600                       		bne.s	loc_16480
00016B58 117C 0000 001C             		move.b	#0,$1C(a0)
00016B5E                            
00016B5E                            loc_16480:
00016B5E 6100 BFDA                  		bsr.w	Obj63_ChangeDir
00016B62                            
00016B62                            loc_16484:
00016B62 4EF9 0000 DBD4             		jmp	SpeedToPos
00016B68                            ; ===========================================================================
00016B68                            Ani_obj6F:
00016B68                            	include "_anim\obj6F.asm"
00016B68                            ; ---------------------------------------------------------------------------
00016B68                            ; Animation script - platform on conveyor belt (SBZ)
00016B68                            ; ---------------------------------------------------------------------------
00016B68 0000                       		dc.w byte_1648E-Ani_obj6F
00016B6A 0000                       		dc.w byte_164A2-Ani_obj6F
00016B6C 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016B79 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00016B80 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00016B84 00                         		even
00016B84 00                         		even
00016B84                            
00016B84 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016B8A 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00016B90 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00016BA4 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00016BB8 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00016BCC 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00016BE0 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00016BF4 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00016C08                            ; ===========================================================================
00016C08                            ; ---------------------------------------------------------------------------
00016C08                            ; Object 70 - large girder block (SBZ)
00016C08                            ; ---------------------------------------------------------------------------
00016C08                            
00016C08                            Obj70:					; XREF: Obj_Index
00016C08 7000                       		moveq	#0,d0
00016C0A 1028 0024                  		move.b	$24(a0),d0
00016C0E 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00016C12 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00016C16                            ; ===========================================================================
00016C16 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00016C18 0000                       		dc.w Obj70_Action-Obj70_Index
00016C1A                            ; ===========================================================================
00016C1A                            
00016C1A                            Obj70_Main:				; XREF: Obj70_Index
00016C1A 5428 0024                  		addq.b	#2,$24(a0)
00016C1E 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00016C26 317C 42F0 0002             		move.w	#$42F0,2(a0)
00016C2C 0028 0004 0001             		ori.b	#4,1(a0)
00016C32 117C 0004 0018             		move.b	#4,$18(a0)
00016C38 117C 0060 0019             		move.b	#$60,$19(a0)
00016C3E 117C 0018 0016             		move.b	#$18,$16(a0)
00016C44 3168 0008 0032             		move.w	8(a0),$32(a0)
00016C4A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016C50 6100 0000                  		bsr.w	Obj70_Move2
00016C54                            
00016C54                            Obj70_Action:				; XREF: Obj70_Index
00016C54 3F28 0008                  		move.w	8(a0),-(sp)
00016C58 4A68 003A                  		tst.w	$3A(a0)
00016C5C 6700                       		beq.s	Obj70_Move
00016C5E 5368 003A                  		subq.w	#1,$3A(a0)
00016C62 6600                       		bne.s	Obj70_Solid
00016C64                            
00016C64                            Obj70_Move:
00016C64 4EB9 0000 DBD4             		jsr	SpeedToPos
00016C6A 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00016C6E 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00016C70 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00016C74                            
00016C74                            Obj70_Solid:
00016C74 381F                       		move.w	(sp)+,d4
00016C76 4A28 0001                  		tst.b	1(a0)
00016C7A 6A00                       		bpl.s	Obj70_ChkDel
00016C7C 7200                       		moveq	#0,d1
00016C7E 1228 0019                  		move.b	$19(a0),d1
00016C82 0641 000B                  		addi.w	#$B,d1
00016C86 7400                       		moveq	#0,d2
00016C88 1428 0016                  		move.b	$16(a0),d2
00016C8C 3602                       		move.w	d2,d3
00016C8E 5243                       		addq.w	#1,d3
00016C90 6100 9338                  		bsr.w	SolidObject
00016C94                            
00016C94                            Obj70_ChkDel:
00016C94 3028 0032                  		move.w	$32(a0),d0
00016C98 0240 FF80                  		andi.w	#$FF80,d0
00016C9C 3238 F700                  		move.w	($FFFFF700).w,d1
00016CA0 0441 0080                  		subi.w	#$80,d1
00016CA4 0241 FF80                  		andi.w	#$FF80,d1
00016CA8 9041                       		sub.w	d1,d0
00016CAA 0C40 0280                  		cmpi.w	#$280,d0
00016CAE 6200                       		bhi.s	Obj70_Delete
00016CB0 4EF9 0000 DBFA             		jmp	DisplaySprite
00016CB6                            ; ===========================================================================
00016CB6                            
00016CB6                            Obj70_Delete:
00016CB6 4EF9 0000 DC36             		jmp	DeleteObject
00016CBC                            ; ===========================================================================
00016CBC                            
00016CBC                            Obj70_Move2:				; XREF: Obj70_Main
00016CBC 1028 0038                  		move.b	$38(a0),d0
00016CC0 0240 0018                  		andi.w	#$18,d0
00016CC4 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00016CCA 43F1 0000                  		lea	(a1,d0.w),a1
00016CCE 3159 0010                  		move.w	(a1)+,$10(a0)
00016CD2 3159 0012                  		move.w	(a1)+,$12(a0)
00016CD6 3159 0034                  		move.w	(a1)+,$34(a0)
00016CDA 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00016CDE 317C 0007 003A             		move.w	#7,$3A(a0)
00016CE4 4E75                       		rts	
00016CE6                            ; ===========================================================================
00016CE6 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00016CEE 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00016CF6 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00016CFE 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00016D06                            ; ---------------------------------------------------------------------------
00016D06                            ; Sprite mappings - large girder block (SBZ)
00016D06                            ; ---------------------------------------------------------------------------
00016D06                            Map_obj70:
00016D06                            	include "_maps\obj70.asm"
00016D06                            ; ---------------------------------------------------------------------------
00016D06                            ; Sprite mappings - large girder block (SBZ)
00016D06                            ; ---------------------------------------------------------------------------
00016D06 0000                       		dc.w byte_1662A-Map_obj70
00016D08 0C                         byte_1662A:	dc.b $C
00016D09 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00016D0E 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00016D13 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00016D18 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00016D1D E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00016D22 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00016D27 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00016D2C 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00016D31 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00016D36 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00016D3B E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00016D40 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00016D46 00                         		even
00016D46 00                         		even
00016D46                            
00016D46                            ; ===========================================================================
00016D46                            ; ---------------------------------------------------------------------------
00016D46                            ; Object 72 - teleporter (SBZ)
00016D46                            ; ---------------------------------------------------------------------------
00016D46                            
00016D46                            Obj72:					; XREF: Obj_Index
00016D46 7000                       		moveq	#0,d0
00016D48 1028 0024                  		move.b	$24(a0),d0
00016D4C 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00016D50 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00016D54 3028 0008                  		move.w	8(a0),d0
00016D58 0240 FF80                  		andi.w	#$FF80,d0
00016D5C 3238 F700                  		move.w	($FFFFF700).w,d1
00016D60 0441 0080                  		subi.w	#$80,d1
00016D64 0241 FF80                  		andi.w	#$FF80,d1
00016D68 9041                       		sub.w	d1,d0
00016D6A 0C40 0280                  		cmpi.w	#$280,d0
00016D6E 6200                       		bhi.s	Obj72_Delete
00016D70 4E75                       		rts	
00016D72                            ; ===========================================================================
00016D72                            
00016D72                            Obj72_Delete:
00016D72 4EF9 0000 DC36             		jmp	DeleteObject
00016D78                            ; ===========================================================================
00016D78 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00016D7A 0000                       		dc.w loc_166C8-Obj72_Index
00016D7C 0000                       		dc.w loc_1675E-Obj72_Index
00016D7E 0000                       		dc.w loc_16798-Obj72_Index
00016D80                            ; ===========================================================================
00016D80                            
00016D80                            Obj72_Main:				; XREF: Obj72_Index
00016D80 5428 0024                  		addq.b	#2,$24(a0)
00016D84 1028 0028                  		move.b	$28(a0),d0
00016D88 D040                       		add.w	d0,d0
00016D8A 0240 001E                  		andi.w	#$1E,d0
00016D8E 45FA 0000                  		lea	Obj72_Data(pc),a2
00016D92 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016D96 315A 003A                  		move.w	(a2)+,$3A(a0)
00016D9A 214A 003C                  		move.l	a2,$3C(a0)
00016D9E 315A 0036                  		move.w	(a2)+,$36(a0)
00016DA2 315A 0038                  		move.w	(a2)+,$38(a0)
00016DA6                            
00016DA6                            loc_166C8:				; XREF: Obj72_Index
00016DA6 43F8 D000                  		lea	($FFFFD000).w,a1
00016DAA 3029 0008                  		move.w	8(a1),d0
00016DAE 9068 0008                  		sub.w	8(a0),d0
00016DB2 0828 0000 0022             		btst	#0,$22(a0)
00016DB8 6700                       		beq.s	loc_166E0
00016DBA 0640 000F                  		addi.w	#$F,d0
00016DBE                            
00016DBE                            loc_166E0:
00016DBE 0C40 0010                  		cmpi.w	#$10,d0
00016DC2 6400                       		bcc.s	locret_1675C
00016DC4 3229 000C                  		move.w	$C(a1),d1
00016DC8 9268 000C                  		sub.w	$C(a0),d1
00016DCC 0641 0020                  		addi.w	#$20,d1
00016DD0 0C41 0040                  		cmpi.w	#$40,d1
00016DD4 6400                       		bcc.s	locret_1675C
00016DD6 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00016DDA 6600                       		bne.s	locret_1675C
00016DDC 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00016DE2 6600                       		bne.s	loc_1670E
00016DE4 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00016DEA 6500                       		bcs.s	locret_1675C
00016DEC                            
00016DEC                            loc_1670E:
00016DEC 5428 0024                  		addq.b	#2,$24(a0)
00016DF0 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00016DF6 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00016DFC 337C 0800 0014             		move.w	#$800,$14(a1)
00016E02 337C 0000 0010             		move.w	#0,$10(a1)
00016E08 337C 0000 0012             		move.w	#0,$12(a1)
00016E0E 08A8 0005 0022             		bclr	#5,$22(a0)
00016E14 08A9 0005 0022             		bclr	#5,$22(a1)
00016E1A 08E9 0001 0022             		bset	#1,$22(a1)
00016E20 3368 0008 0008             		move.w	8(a0),8(a1)
00016E26 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016E2C 4228 0032                  		clr.b	$32(a0)
00016E30 303C 00BE                  		move.w	#$BE,d0
00016E34 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00016E3A                            
00016E3A                            locret_1675C:
00016E3A 4E75                       		rts	
00016E3C                            ; ===========================================================================
00016E3C                            
00016E3C                            loc_1675E:				; XREF: Obj72_Index
00016E3C 43F8 D000                  		lea	($FFFFD000).w,a1
00016E40 1028 0032                  		move.b	$32(a0),d0
00016E44 5428 0032                  		addq.b	#2,$32(a0)
00016E48 4EB9 0000 2C60             		jsr	(CalcSine).l
00016E4E EA40                       		asr.w	#5,d0
00016E50 3428 000C                  		move.w	$C(a0),d2
00016E54 9440                       		sub.w	d0,d2
00016E56 3342 000C                  		move.w	d2,$C(a1)
00016E5A 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00016E60 6600                       		bne.s	locret_16796
00016E62 6100 0000                  		bsr.w	sub_1681C
00016E66 5428 0024                  		addq.b	#2,$24(a0)
00016E6A 303C 00BC                  		move.w	#$BC,d0
00016E6E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play teleport sound
00016E74                            
00016E74                            locret_16796:
00016E74 4E75                       		rts	
00016E76                            ; ===========================================================================
00016E76                            
00016E76                            loc_16798:				; XREF: Obj72_Index
00016E76 588F                       		addq.l	#4,sp
00016E78 43F8 D000                  		lea	($FFFFD000).w,a1
00016E7C 5328 002E                  		subq.b	#1,$2E(a0)
00016E80 6A00                       		bpl.s	loc_167DA
00016E82 3368 0036 0008             		move.w	$36(a0),8(a1)
00016E88 3368 0038 000C             		move.w	$38(a0),$C(a1)
00016E8E 7200                       		moveq	#0,d1
00016E90 1228 003A                  		move.b	$3A(a0),d1
00016E94 5801                       		addq.b	#4,d1
00016E96 B228 003B                  		cmp.b	$3B(a0),d1
00016E9A 6500                       		bcs.s	loc_167C2
00016E9C 7200                       		moveq	#0,d1
00016E9E 6000                       		bra.s	loc_16800
00016EA0                            ; ===========================================================================
00016EA0                            
00016EA0                            loc_167C2:
00016EA0 1141 003A                  		move.b	d1,$3A(a0)
00016EA4 2468 003C                  		movea.l	$3C(a0),a2
00016EA8 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00016EAE 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00016EB4 6000 0000                  		bra.w	sub_1681C
00016EB8                            ; ===========================================================================
00016EB8                            
00016EB8                            loc_167DA:
00016EB8 2429 0008                  		move.l	8(a1),d2
00016EBC 2629 000C                  		move.l	$C(a1),d3
00016EC0 3029 0010                  		move.w	$10(a1),d0
00016EC4 48C0                       		ext.l	d0
00016EC6 E180                       		asl.l	#8,d0
00016EC8 D480                       		add.l	d0,d2
00016ECA 3029 0012                  		move.w	$12(a1),d0
00016ECE 48C0                       		ext.l	d0
00016ED0 E180                       		asl.l	#8,d0
00016ED2 D680                       		add.l	d0,d3
00016ED4 2342 0008                  		move.l	d2,8(a1)
00016ED8 2343 000C                  		move.l	d3,$C(a1)
00016EDC 4E75                       		rts	
00016EDE                            ; ===========================================================================
00016EDE                            
00016EDE                            loc_16800:
00016EDE 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00016EE4 4228 0024                  		clr.b	$24(a0)
00016EE8 4238 F7C8                  		clr.b	($FFFFF7C8).w
00016EEC 337C 0000 0010             		move.w	#0,$10(a1)
00016EF2 337C 0200 0012             		move.w	#$200,$12(a1)
00016EF8 4E75                       		rts	
00016EFA                            
00016EFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016EFA                            
00016EFA                            
00016EFA                            sub_1681C:
00016EFA 7000                       		moveq	#0,d0
00016EFC 343C 1000                  		move.w	#$1000,d2
00016F00 3028 0036                  		move.w	$36(a0),d0
00016F04 9069 0008                  		sub.w	8(a1),d0
00016F08 6C00                       		bge.s	loc_16830
00016F0A 4440                       		neg.w	d0
00016F0C 4442                       		neg.w	d2
00016F0E                            
00016F0E                            loc_16830:
00016F0E 7200                       		moveq	#0,d1
00016F10 363C 1000                  		move.w	#$1000,d3
00016F14 3228 0038                  		move.w	$38(a0),d1
00016F18 9269 000C                  		sub.w	$C(a1),d1
00016F1C 6C00                       		bge.s	loc_16844
00016F1E 4441                       		neg.w	d1
00016F20 4443                       		neg.w	d3
00016F22                            
00016F22                            loc_16844:
00016F22 B240                       		cmp.w	d0,d1
00016F24 6500                       		bcs.s	loc_1687A
00016F26 7200                       		moveq	#0,d1
00016F28 3228 0038                  		move.w	$38(a0),d1
00016F2C 9269 000C                  		sub.w	$C(a1),d1
00016F30 4841                       		swap	d1
00016F32 83C3                       		divs.w	d3,d1
00016F34 7000                       		moveq	#0,d0
00016F36 3028 0036                  		move.w	$36(a0),d0
00016F3A 9069 0008                  		sub.w	8(a1),d0
00016F3E 6700                       		beq.s	loc_16866
00016F40 4840                       		swap	d0
00016F42 81C1                       		divs.w	d1,d0
00016F44                            
00016F44                            loc_16866:
00016F44 3340 0010                  		move.w	d0,$10(a1)
00016F48 3343 0012                  		move.w	d3,$12(a1)
00016F4C 4A41                       		tst.w	d1
00016F4E 6A00                       		bpl.s	loc_16874
00016F50 4441                       		neg.w	d1
00016F52                            
00016F52                            loc_16874:
00016F52 3141 002E                  		move.w	d1,$2E(a0)
00016F56 4E75                       		rts	
00016F58                            ; ===========================================================================
00016F58                            
00016F58                            loc_1687A:
00016F58 7000                       		moveq	#0,d0
00016F5A 3028 0036                  		move.w	$36(a0),d0
00016F5E 9069 0008                  		sub.w	8(a1),d0
00016F62 4840                       		swap	d0
00016F64 81C2                       		divs.w	d2,d0
00016F66 7200                       		moveq	#0,d1
00016F68 3228 0038                  		move.w	$38(a0),d1
00016F6C 9269 000C                  		sub.w	$C(a1),d1
00016F70 6700                       		beq.s	loc_16898
00016F72 4841                       		swap	d1
00016F74 83C0                       		divs.w	d0,d1
00016F76                            
00016F76                            loc_16898:
00016F76 3341 0012                  		move.w	d1,$12(a1)
00016F7A 3342 0010                  		move.w	d2,$10(a1)
00016F7E 4A40                       		tst.w	d0
00016F80 6A00                       		bpl.s	loc_168A6
00016F82 4440                       		neg.w	d0
00016F84                            
00016F84                            loc_168A6:
00016F84 3140 002E                  		move.w	d0,$2E(a0)
00016F88 4E75                       		rts	
00016F8A                            ; End of function sub_1681C
00016F8A                            
00016F8A                            ; ===========================================================================
00016F8A 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00016F90 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00016F96 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00016F9A 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00016FA0 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00016FA6 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00016FAC 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00016FB2 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00016FB8 0884 0298 0894             		dc.w $884, $298, $894
00016FBE 0270 0894 0190             		dc.w $270, $894, $190
00016FC4 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00016FCA 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00016FD0 1184 0498 1158             		dc.w $1184, $498, $1158
00016FD6 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00016FDC 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00016FE2 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00016FE8 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00016FEE 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00016FF4 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00016FFA FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00017000 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00017006 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
0001700C 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00017012                            ; ===========================================================================
00017012                            ; ---------------------------------------------------------------------------
00017012                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00017012                            ; ---------------------------------------------------------------------------
00017012                            
00017012                            Obj78:					; XREF: Obj_Index
00017012 7000                       		moveq	#0,d0
00017014 1028 0024                  		move.b	$24(a0),d0
00017018 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
0001701C 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00017020                            ; ===========================================================================
00017020 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00017022 0000                       		dc.w Obj78_Action-Obj78_Index
00017024 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00017026 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00017028 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
0001702A 0000                       		dc.w Obj78_Delete-Obj78_Index
0001702C 0000                       		dc.w loc_16CC0-Obj78_Index
0001702E                            ; ===========================================================================
0001702E                            
0001702E                            locret_16950:
0001702E 4E75                       		rts	
00017030                            ; ===========================================================================
00017030                            
00017030                            Obj78_Main:				; XREF: Obj78_Index
00017030 117C 0007 0016             		move.b	#7,$16(a0)
00017036 117C 0008 0017             		move.b	#8,$17(a0)
0001703C 4EB9 0000 DBA8             		jsr	ObjectFall
00017042 4EBA E4A6                  		jsr	ObjHitFloor
00017046 4A41                       		tst.w	d1
00017048 6AE4                       		bpl.s	locret_16950
0001704A D368 000C                  		add.w	d1,$C(a0)
0001704E 4268 0012                  		clr.w	$12(a0)
00017052 5428 0024                  		addq.b	#2,$24(a0)
00017056 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
0001705E 317C 22B0 0002             		move.w	#$22B0,2(a0)
00017064 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
0001706A 6700                       		beq.s	loc_16996
0001706C 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00017072                            
00017072                            loc_16996:
00017072 0228 0003 0001             		andi.b	#3,1(a0)
00017078 0028 0004 0001             		ori.b	#4,1(a0)
0001707E 1168 0001 0022             		move.b	1(a0),$22(a0)
00017084 117C 0004 0018             		move.b	#4,$18(a0)
0001708A 117C 0008 0019             		move.b	#8,$19(a0)
00017090 117C 000B 0020             		move.b	#$B,$20(a0)
00017096 3428 0008                  		move.w	8(a0),d2
0001709A 7A0C                       		moveq	#$C,d5
0001709C 0828 0000 0022             		btst	#0,$22(a0)
000170A2 6700                       		beq.s	loc_169CA
000170A4 4445                       		neg.w	d5
000170A6                            
000170A6                            loc_169CA:
000170A6 1C3C 0004                  		move.b	#4,d6
000170AA 7600                       		moveq	#0,d3
000170AC 7804                       		moveq	#4,d4
000170AE 2448                       		movea.l	a0,a2
000170B0 7202                       		moveq	#2,d1
000170B2                            
000170B2                            Obj78_LoadBody:
000170B2 4EB9 0000 E096             		jsr	SingleObjLoad2
000170B8 6600                       		bne.s	Obj78_QuitLoad
000170BA 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
000170BE 1346 0024                  		move.b	d6,$24(a1)
000170C2 5406                       		addq.b	#2,d6
000170C4 2368 0004 0004             		move.l	4(a0),4(a1)
000170CA 3368 0002 0002             		move.w	2(a0),2(a1)
000170D0 137C 0005 0018             		move.b	#5,$18(a1)
000170D6 137C 0008 0019             		move.b	#8,$19(a1)
000170DC 137C 00CB 0020             		move.b	#$CB,$20(a1)
000170E2 D445                       		add.w	d5,d2
000170E4 3342 0008                  		move.w	d2,8(a1)
000170E8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000170EE 1368 0022 0022             		move.b	$22(a0),$22(a1)
000170F4 1368 0022 0001             		move.b	$22(a0),1(a1)
000170FA 137C 0008 001A             		move.b	#8,$1A(a1)
00017100 234A 003C                  		move.l	a2,$3C(a1)
00017104 1344 003C                  		move.b	d4,$3C(a1)
00017108 5804                       		addq.b	#4,d4
0001710A 2449                       		movea.l	a1,a2
0001710C                            
0001710C                            Obj78_QuitLoad:
0001710C 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00017110                            
00017110 117C 0007 002A             		move.b	#7,$2A(a0)
00017116 4228 003C                  		clr.b	$3C(a0)
0001711A                            
0001711A                            Obj78_Action:				; XREF: Obj78_Index
0001711A 4A28 0022                  		tst.b	$22(a0)
0001711E 6B00 0000                  		bmi.w	loc_16C96
00017122 7000                       		moveq	#0,d0
00017124 1028 0025                  		move.b	$25(a0),d0
00017128 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
0001712C 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00017130 1228 002B                  		move.b	$2B(a0),d1
00017134 6A00                       		bpl.s	Obj78_Display
00017136 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001713C 1028 0026                  		move.b	$26(a0),d0
00017140 0240 007F                  		andi.w	#$7F,d0
00017144 5828 0026                  		addq.b	#4,$26(a0)
00017148 1031 0000                  		move.b	(a1,d0.w),d0
0001714C 6A00                       		bpl.s	Obj78_AniHead
0001714E 08A8 0007 002B             		bclr	#7,$2B(a0)
00017154 6000                       		bra.s	Obj78_Display
00017156                            ; ===========================================================================
00017156                            
00017156                            Obj78_AniHead:
00017156 0201 0010                  		andi.b	#$10,d1
0001715A D001                       		add.b	d1,d0
0001715C 1140 001A                  		move.b	d0,$1A(a0)
00017160                            
00017160                            Obj78_Display:
00017160 3028 0008                  		move.w	8(a0),d0
00017164 0240 FF80                  		andi.w	#$FF80,d0
00017168 3238 F700                  		move.w	($FFFFF700).w,d1
0001716C 0441 0080                  		subi.w	#$80,d1
00017170 0241 FF80                  		andi.w	#$FF80,d1
00017174 9041                       		sub.w	d1,d0
00017176 0C40 0280                  		cmpi.w	#$280,d0
0001717A 6200 0000                  		bhi.w	Obj78_ChkGone
0001717E 4EF9 0000 DBFA             		jmp	DisplaySprite
00017184                            ; ===========================================================================
00017184                            
00017184                            Obj78_ChkGone:
00017184 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017188 7000                       		moveq	#0,d0
0001718A 1028 0023                  		move.b	$23(a0),d0
0001718E 6700                       		beq.s	loc_16ABC
00017190 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017196                            
00017196                            loc_16ABC:
00017196 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
0001719C 4E75                       		rts	
0001719E                            ; ===========================================================================
0001719E                            
0001719E                            Obj78_Delete:				; XREF: Obj78_Index
0001719E 4EF9 0000 DC36             		jmp	DeleteObject
000171A4                            ; ===========================================================================
000171A4 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
000171A6 0000                       		dc.w loc_16B02-Obj78_Index2
000171A8                            ; ===========================================================================
000171A8                            
000171A8                            Obj78_Move:				; XREF: Obj78_Index2
000171A8 5328 002A                  		subq.b	#1,$2A(a0)
000171AC 6B00                       		bmi.s	Obj78_Move2
000171AE 4E75                       		rts	
000171B0                            ; ===========================================================================
000171B0                            
000171B0                            Obj78_Move2:
000171B0 5428 0025                  		addq.b	#2,$25(a0)
000171B4 117C 0010 002A             		move.b	#$10,$2A(a0)
000171BA 317C FF40 0010             		move.w	#-$C0,$10(a0)
000171C0 317C 0040 0014             		move.w	#$40,$14(a0)
000171C6 0868 0004 002B             		bchg	#4,$2B(a0)
000171CC 6600                       		bne.s	loc_16AFC
000171CE 4268 0010                  		clr.w	$10(a0)
000171D2 4468 0014                  		neg.w	$14(a0)
000171D6                            
000171D6                            loc_16AFC:
000171D6 08E8 0007 002B             		bset	#7,$2B(a0)
000171DC                            
000171DC                            loc_16B02:				; XREF: Obj78_Index2
000171DC 5328 002A                  		subq.b	#1,$2A(a0)
000171E0 6B00                       		bmi.s	loc_16B5E
000171E2 2F28 0008                  		move.l	8(a0),-(sp)
000171E6 2428 0008                  		move.l	8(a0),d2
000171EA 3028 0010                  		move.w	$10(a0),d0
000171EE 0828 0000 0022             		btst	#0,$22(a0)
000171F4 6700                       		beq.s	loc_16B1E
000171F6 4440                       		neg.w	d0
000171F8                            
000171F8                            loc_16B1E:
000171F8 48C0                       		ext.l	d0
000171FA E180                       		asl.l	#8,d0
000171FC D480                       		add.l	d0,d2
000171FE 2142 0008                  		move.l	d2,8(a0)
00017202 4EBA E2E6                  		jsr	ObjHitFloor
00017206 241F                       		move.l	(sp)+,d2
00017208 0C41 FFF8                  		cmpi.w	#-8,d1
0001720C 6D00                       		blt.s	loc_16B70
0001720E 0C41 000C                  		cmpi.w	#$C,d1
00017212 6C00                       		bge.s	loc_16B70
00017214 D368 000C                  		add.w	d1,$C(a0)
00017218 4842                       		swap	d2
0001721A B468 0008                  		cmp.w	8(a0),d2
0001721E 6700                       		beq.s	locret_16B5C
00017220 7000                       		moveq	#0,d0
00017222 1028 003C                  		move.b	$3C(a0),d0
00017226 5228 003C                  		addq.b	#1,$3C(a0)
0001722A 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017230 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017234                            
00017234                            locret_16B5C:
00017234 4E75                       		rts	
00017236                            ; ===========================================================================
00017236                            
00017236                            loc_16B5E:
00017236 5528 0025                  		subq.b	#2,$25(a0)
0001723A 117C 0007 002A             		move.b	#7,$2A(a0)
00017240 317C 0000 0010             		move.w	#0,$10(a0)
00017246 4E75                       		rts	
00017248                            ; ===========================================================================
00017248                            
00017248                            loc_16B70:
00017248 2142 0008                  		move.l	d2,8(a0)
0001724C 0868 0000 0022             		bchg	#0,$22(a0)
00017252 1168 0022 0001             		move.b	$22(a0),1(a0)
00017258 7000                       		moveq	#0,d0
0001725A 1028 003C                  		move.b	$3C(a0),d0
0001725E 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00017264 5228 003C                  		addq.b	#1,$3C(a0)
00017268 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001726E 4E75                       		rts	
00017270                            ; ===========================================================================
00017270                            
00017270                            Obj78_BodySeg2:				; XREF: Obj78_Index
00017270 2268 003C                  		movea.l	$3C(a0),a1
00017274 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001727A 6A00                       		bpl.s	Obj78_BodySeg1
0001727C 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00017282 1028 0026                  		move.b	$26(a0),d0
00017286 0240 007F                  		andi.w	#$7F,d0
0001728A 5828 0026                  		addq.b	#4,$26(a0)
0001728E 4A31 0004                  		tst.b	4(a1,d0.w)
00017292 6A00                       		bpl.s	Obj78_AniBody
00017294 5828 0026                  		addq.b	#4,$26(a0)
00017298                            
00017298                            Obj78_AniBody:
00017298 1031 0000                  		move.b	(a1,d0.w),d0
0001729C 5000                       		addq.b	#8,d0
0001729E 1140 001A                  		move.b	d0,$1A(a0)
000172A2                            
000172A2                            Obj78_BodySeg1:				; XREF: Obj78_Index
000172A2 2268 003C                  		movea.l	$3C(a0),a1
000172A6 4A28 0022                  		tst.b	$22(a0)
000172AA 6B00 0000                  		bmi.w	loc_16C90
000172AE 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000172B4 1169 0025 0025             		move.b	$25(a1),$25(a0)
000172BA 6700 0000                  		beq.w	loc_16C64
000172BE 3169 0014 0014             		move.w	$14(a1),$14(a0)
000172C4 3029 0010                  		move.w	$10(a1),d0
000172C8 D069 0014                  		add.w	$14(a1),d0
000172CC 3140 0010                  		move.w	d0,$10(a0)
000172D0 2428 0008                  		move.l	8(a0),d2
000172D4 2602                       		move.l	d2,d3
000172D6 3028 0010                  		move.w	$10(a0),d0
000172DA 0828 0000 0022             		btst	#0,$22(a0)
000172E0 6700                       		beq.s	loc_16C0C
000172E2 4440                       		neg.w	d0
000172E4                            
000172E4                            loc_16C0C:
000172E4 48C0                       		ext.l	d0
000172E6 E180                       		asl.l	#8,d0
000172E8 D480                       		add.l	d0,d2
000172EA 2142 0008                  		move.l	d2,8(a0)
000172EE 4843                       		swap	d3
000172F0 B668 0008                  		cmp.w	8(a0),d3
000172F4 6700                       		beq.s	loc_16C64
000172F6 7000                       		moveq	#0,d0
000172F8 1028 003C                  		move.b	$3C(a0),d0
000172FC 1231 002C                  		move.b	$2C(a1,d0.w),d1
00017300 0C01 0080                  		cmpi.b	#-$80,d1
00017304 6600                       		bne.s	loc_16C50
00017306 4843                       		swap	d3
00017308 2143 0008                  		move.l	d3,8(a0)
0001730C 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017310 0868 0000 0022             		bchg	#0,$22(a0)
00017316 1168 0022 0001             		move.b	$22(a0),1(a0)
0001731C 5228 003C                  		addq.b	#1,$3C(a0)
00017320 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017326 6000                       		bra.s	loc_16C64
00017328                            ; ===========================================================================
00017328                            
00017328                            loc_16C50:
00017328 4881                       		ext.w	d1
0001732A D368 000C                  		add.w	d1,$C(a0)
0001732E 5228 003C                  		addq.b	#1,$3C(a0)
00017332 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017338 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001733C                            
0001733C                            loc_16C64:
0001733C 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00017342 6700                       		beq.s	loc_16C90
00017344 0C11 0027                  		cmpi.b	#$27,0(a1)
00017348 6700                       		beq.s	loc_16C7C
0001734A 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00017350 6600                       		bne.s	loc_16C82
00017352                            
00017352                            loc_16C7C:
00017352 117C 000A 0024             		move.b	#$A,$24(a0)
00017358                            
00017358                            loc_16C82:
00017358 4EF9 0000 DBFA             		jmp	DisplaySprite
0001735E                            
0001735E                            ; ===========================================================================
0001735E FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00017366                            ; ===========================================================================
00017366                            
00017366                            loc_16C90:
00017366 08E9 0007 0022             		bset	#7,$22(a1)
0001736C                            
0001736C                            loc_16C96:
0001736C 7000                       		moveq	#0,d0
0001736E 1028 0024                  		move.b	$24(a0),d0
00017372 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00017376 0828 0000 0022             		btst	#0,$22(a0)
0001737C 6700                       		beq.s	loc_16CAA
0001737E 4440                       		neg.w	d0
00017380                            
00017380                            loc_16CAA:
00017380 3140 0010                  		move.w	d0,$10(a0)
00017384 317C FC00 0012             		move.w	#-$400,$12(a0)
0001738A 117C 000C 0024             		move.b	#$C,$24(a0)
00017390 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00017396                            
00017396                            loc_16CC0:				; XREF: Obj78_Index
00017396 4EB9 0000 DBA8             		jsr	ObjectFall
0001739C 4A68 0012                  		tst.w	$12(a0)
000173A0 6B00                       		bmi.s	loc_16CE0
000173A2 4EBA E146                  		jsr	ObjHitFloor
000173A6 4A41                       		tst.w	d1
000173A8 6A00                       		bpl.s	loc_16CE0
000173AA D368 000C                  		add.w	d1,$C(a0)
000173AE 317C FC00 0012             		move.w	#-$400,$12(a0)
000173B4                            
000173B4                            loc_16CE0:
000173B4 4A28 0001                  		tst.b	1(a0)
000173B8 6A00 FDCA                  		bpl.w	Obj78_ChkGone
000173BC 4EF9 0000 DBFA             		jmp	DisplaySprite
000173C2                            ; ===========================================================================
000173C2                            Ani_obj78:
000173C2                            	include "_anim\obj78.asm"
000173C2                            ; ---------------------------------------------------------------------------
000173C2                            ; Animation script - Caterkiller enemy (uses non-standard format)
000173C2                            ; ---------------------------------------------------------------------------
000173C2 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
000173D2 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
000173E2 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
000173F2 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00017402 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00017412 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00017422 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00017432 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00017442                            	even
00017442                            	even
00017442                            
00017442                            ; ---------------------------------------------------------------------------
00017442                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017442                            ; ---------------------------------------------------------------------------
00017442                            Map_obj78:
00017442                            	include "_maps\obj78.asm"
00017442                            ; ---------------------------------------------------------------------------
00017442                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017442                            ; ---------------------------------------------------------------------------
00017442 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00017446 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
0001744A 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
0001744E 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00017452 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00017456 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
0001745A 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
0001745E 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00017462 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00017466 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
0001746A 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
0001746E 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00017472 01                         byte_16D9E:	dc.b 1
00017473 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00017478 01                         byte_16DA4:	dc.b 1
00017479 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
0001747E 01                         byte_16DAA:	dc.b 1
0001747F F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00017484 01                         byte_16DB0:	dc.b 1
00017485 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
0001748A 01                         byte_16DB6:	dc.b 1
0001748B EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00017490 01                         byte_16DBC:	dc.b 1
00017491 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00017496 01                         byte_16DC2:	dc.b 1
00017497 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
0001749C 01                         byte_16DC8:	dc.b 1
0001749D EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
000174A2 01                         byte_16DCE:	dc.b 1
000174A3 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000174A8 01                         byte_16DD4:	dc.b 1
000174A9 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
000174AE 01                         byte_16DDA:	dc.b 1
000174AF F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
000174B4 01                         byte_16DE0:	dc.b 1
000174B5 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
000174BA 01                         byte_16DE6:	dc.b 1
000174BB F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
000174C0 01                         byte_16DEC:	dc.b 1
000174C1 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
000174C6 01                         byte_16DF2:	dc.b 1
000174C7 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
000174CC 01                         byte_16DF8:	dc.b 1
000174CD F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
000174D2 01                         byte_16DFE:	dc.b 1
000174D3 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
000174D8 01                         byte_16E04:	dc.b 1
000174D9 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
000174DE 01                         byte_16E0A:	dc.b 1
000174DF F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
000174E4 01                         byte_16E10:	dc.b 1
000174E5 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
000174EA 01                         byte_16E16:	dc.b 1
000174EB EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
000174F0 01                         byte_16E1C:	dc.b 1
000174F1 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
000174F6 01                         byte_16E22:	dc.b 1
000174F7 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
000174FC 01                         byte_16E28:	dc.b 1
000174FD EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00017502                            		even
00017502                            		even
00017502                            
00017502                            ; ===========================================================================
00017502                            ; ---------------------------------------------------------------------------
00017502                            ; Object 79 - lamppost
00017502                            ; ---------------------------------------------------------------------------
00017502                            
00017502                            Obj79:					; XREF: Obj_Index
00017502 7000                       		moveq	#0,d0
00017504 1028 0024                  		move.b	$24(a0),d0
00017508 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
0001750C 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00017510 4EFA 8790                  		jmp	MarkObjGone
00017514                            ; ===========================================================================
00017514 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00017516 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00017518 0000                       		dc.w Obj79_AfterHit-Obj79_Index
0001751A 0000                       		dc.w Obj79_Twirl-Obj79_Index
0001751C                            ; ===========================================================================
0001751C                            
0001751C                            Obj79_Main:				; XREF: Obj79_Index
0001751C 5428 0024                  		addq.b	#2,$24(a0)
00017520 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00017528 317C 07A0 0002             		move.w	#$7A0,2(a0)
0001752E 117C 0004 0001             		move.b	#4,1(a0)
00017534 117C 0008 0019             		move.b	#8,$19(a0)
0001753A 117C 0005 0018             		move.b	#5,$18(a0)
00017540 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017544 7000                       		moveq	#0,d0
00017546 1028 0023                  		move.b	$23(a0),d0
0001754A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017550 0832 0000 0002             		btst	#0,2(a2,d0.w)
00017556 6600                       		bne.s	Obj79_RedLamp
00017558 1238 FE30                  		move.b	($FFFFFE30).w,d1
0001755C 0201 007F                  		andi.b	#$7F,d1
00017560 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00017564 0202 007F                  		andi.b	#$7F,d2
00017568 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
0001756A 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
0001756C                            
0001756C                            Obj79_RedLamp:
0001756C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017572 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00017578 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
0001757E 4E75                       		rts	
00017580                            ; ===========================================================================
00017580                            
00017580                            Obj79_BlueLamp:				; XREF: Obj79_Index
00017580 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00017584 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00017588 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001758C 6B00 0000                  		bmi.w	locret_16F90
00017590 1238 FE30                  		move.b	($FFFFFE30).w,d1
00017594 0201 007F                  		andi.b	#$7F,d1
00017598 1428 0028                  		move.b	$28(a0),d2
0001759C 0202 007F                  		andi.b	#$7F,d2
000175A0 B202                       		cmp.b	d2,d1
000175A2 6500                       		bcs.s	Obj79_HitLamp
000175A4 45F8 FC00                  		lea	($FFFFFC00).w,a2
000175A8 7000                       		moveq	#0,d0
000175AA 1028 0023                  		move.b	$23(a0),d0
000175AE 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000175B4 117C 0004 0024             		move.b	#4,$24(a0)
000175BA 117C 0003 001A             		move.b	#3,$1A(a0)
000175C0 6000 0000                  		bra.w	locret_16F90
000175C4                            ; ===========================================================================
000175C4                            
000175C4                            Obj79_HitLamp:
000175C4 3038 D008                  		move.w	($FFFFD008).w,d0
000175C8 9068 0008                  		sub.w	8(a0),d0
000175CC 5040                       		addq.w	#8,d0
000175CE 0C40 0010                  		cmpi.w	#$10,d0
000175D2 6400 0000                  		bcc.w	locret_16F90
000175D6 3038 D00C                  		move.w	($FFFFD00C).w,d0
000175DA 9068 000C                  		sub.w	$C(a0),d0
000175DE 0640 0040                  		addi.w	#$40,d0
000175E2 0C40 0068                  		cmpi.w	#$68,d0
000175E6 6400                       		bcc.s	locret_16F90
000175E8 303C 00A1                  		move.w	#$A1,d0
000175EC 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lamppost sound
000175F2 5428 0024                  		addq.b	#2,$24(a0)
000175F6 4EB9 0000 E080             		jsr	SingleObjLoad
000175FC 6600                       		bne.s	loc_16F76
000175FE 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00017602 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00017608 3368 0008 0030             		move.w	8(a0),$30(a1)
0001760E 3368 000C 0032             		move.w	$C(a0),$32(a1)
00017614 0469 0018 0032             		subi.w	#$18,$32(a1)
0001761A 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00017622 337C 07A0 0002             		move.w	#$7A0,2(a1)
00017628 137C 0004 0001             		move.b	#4,1(a1)
0001762E 137C 0008 0019             		move.b	#8,$19(a1)
00017634 137C 0004 0018             		move.b	#4,$18(a1)
0001763A 137C 0002 001A             		move.b	#2,$1A(a1)
00017640 337C 0020 0036             		move.w	#$20,$36(a1)
00017646                            
00017646                            loc_16F76:
00017646 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
0001764C 6100 0000                  		bsr.w	Obj79_StoreInfo
00017650 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017654 7000                       		moveq	#0,d0
00017656 1028 0023                  		move.b	$23(a0),d0
0001765A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017660                            
00017660                            locret_16F90:
00017660 4E75                       		rts	
00017662                            ; ===========================================================================
00017662                            
00017662                            Obj79_AfterHit:				; XREF: Obj79_Index
00017662 4E75                       		rts	
00017664                            ; ===========================================================================
00017664                            
00017664                            Obj79_Twirl:				; XREF: Obj79_Index
00017664 5368 0036                  		subq.w	#1,$36(a0)
00017668 6A00                       		bpl.s	loc_16FA0
0001766A 117C 0004 0024             		move.b	#4,$24(a0)
00017670                            
00017670                            loc_16FA0:
00017670 1028 0026                  		move.b	$26(a0),d0
00017674 0428 0010 0026             		subi.b	#$10,$26(a0)
0001767A 0400 0040                  		subi.b	#$40,d0
0001767E 4EB9 0000 2C60             		jsr	(CalcSine).l
00017684 C3FC 0C00                  		muls.w	#$C00,d1
00017688 4841                       		swap	d1
0001768A D268 0030                  		add.w	$30(a0),d1
0001768E 3141 0008                  		move.w	d1,8(a0)
00017692 C1FC 0C00                  		muls.w	#$C00,d0
00017696 4840                       		swap	d0
00017698 D068 0032                  		add.w	$32(a0),d0
0001769C 3140 000C                  		move.w	d0,$C(a0)
000176A0 4E75                       		rts	
000176A2                            ; ===========================================================================
000176A2                            ; ---------------------------------------------------------------------------
000176A2                            ; Subroutine to	store information when you hit a lamppost
000176A2                            ; ---------------------------------------------------------------------------
000176A2                            
000176A2                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
000176A2 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
000176A8 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
000176AE 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
000176B4 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
000176BA 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
000176C0 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
000176C6 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
000176CC 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
000176D2 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
000176D8 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
000176DE 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
000176E4 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
000176EA 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
000176F0 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
000176F6 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
000176FC 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00017702 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00017708 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
0001770E 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00017714 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
0001771A 4E75                       		rts	
0001771C                            
0001771C                            ; ---------------------------------------------------------------------------
0001771C                            ; Subroutine to	load stored info when you start	a level	from a lamppost
0001771C                            ; ---------------------------------------------------------------------------
0001771C                            
0001771C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001771C                            
0001771C                            
0001771C                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
0001771C 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00017722 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00017728 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
0001772E 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00017734 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
0001773A 4278 FE20                  		clr.w	($FFFFFE20).w
0001773E 4238 FE1B                  		clr.b	($FFFFFE1B).w
00017742 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00017748 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
0001774E 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00017752 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00017758 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
0001775E 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00017764 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
0001776A 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00017770 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00017776 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
0001777C 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00017782 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00017788 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
0001778E 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00017794 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
0001779A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000177A0 6600                       		bne.s	loc_170E4
000177A2 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
000177A8 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
000177AE 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000177B4                            
000177B4                            loc_170E4:
000177B4 4A38 FE30                  		tst.b	($FFFFFE30).w
000177B8 6A00                       		bpl.s	locret_170F6
000177BA 3038 FE32                  		move.w	($FFFFFE32).w,d0
000177BE 0440 00A0                  		subi.w	#$A0,d0
000177C2 31C0 F728                  		move.w	d0,($FFFFF728).w
000177C6                            
000177C6                            locret_170F6:
000177C6 4E75                       		rts	
000177C8                            ; End of function Obj79_LoadInfo
000177C8                            
000177C8                            ; ===========================================================================
000177C8                            ; ---------------------------------------------------------------------------
000177C8                            ; Sprite mappings - lamppost
000177C8                            ; ---------------------------------------------------------------------------
000177C8                            Map_obj79:
000177C8                            	include "_maps\obj79.asm"
000177C8                            ; ---------------------------------------------------------------------------
000177C8                            ; Sprite mappings - lamppost
000177C8                            ; ---------------------------------------------------------------------------
000177C8 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
000177CC 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
000177D0 06                         byte_17100:	dc.b 6
000177D1 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000177D6 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000177DB F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000177E0 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000177E5 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
000177EA D401 0806 00               		dc.b $D4, 1, 8,	6, 0
000177EF 04                         byte_1711F:	dc.b 4
000177F0 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000177F5 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000177FA F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000177FF F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017804 02                         byte_17134:	dc.b 2
00017805 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001780A F801 0808 00               		dc.b $F8, 1, 8,	8, 0
0001780F 06                         byte_1713F:	dc.b 6
00017810 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017815 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
0001781A F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001781F F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017824 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00017829 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
0001782E                            		even
0001782E                            		even
0001782E                            
0001782E                            ; ===========================================================================
0001782E                            ; ---------------------------------------------------------------------------
0001782E                            ; Object 7D - hidden points at the end of a level
0001782E                            ; ---------------------------------------------------------------------------
0001782E                            
0001782E                            Obj7D:					; XREF: Obj_Index
0001782E 7000                       		moveq	#0,d0
00017830 1028 0024                  		move.b	$24(a0),d0
00017834 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00017838 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
0001783C                            ; ===========================================================================
0001783C 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
0001783E 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00017840                            ; ===========================================================================
00017840                            
00017840                            Obj7D_Main:				; XREF: Obj7D_Index
00017840 7410                       		moveq	#$10,d2
00017842 3602                       		move.w	d2,d3
00017844 D643                       		add.w	d3,d3
00017846 43F8 D000                  		lea	($FFFFD000).w,a1
0001784A 3029 0008                  		move.w	8(a1),d0
0001784E 9068 0008                  		sub.w	8(a0),d0
00017852 D042                       		add.w	d2,d0
00017854 B043                       		cmp.w	d3,d0
00017856 6400                       		bcc.s	Obj7D_ChkDel
00017858 3229 000C                  		move.w	$C(a1),d1
0001785C 9268 000C                  		sub.w	$C(a0),d1
00017860 D242                       		add.w	d2,d1
00017862 B243                       		cmp.w	d3,d1
00017864 6400                       		bcc.s	Obj7D_ChkDel
00017866 4A78 FE08                  		tst.w	($FFFFFE08).w
0001786A 6600                       		bne.s	Obj7D_ChkDel
0001786C 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00017870 6600                       		bne.s	Obj7D_ChkDel
00017872 5428 0024                  		addq.b	#2,$24(a0)
00017876 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
0001787E 317C 84B6 0002             		move.w	#$84B6,2(a0)
00017884 0028 0004 0001             		ori.b	#4,1(a0)
0001788A 117C 0000 0018             		move.b	#0,$18(a0)
00017890 117C 0010 0019             		move.b	#$10,$19(a0)
00017896 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0001789C 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
000178A2 303C 00C9                  		move.w	#$C9,d0
000178A6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play bonus sound
000178AC 7000                       		moveq	#0,d0
000178AE 1028 0028                  		move.b	$28(a0),d0
000178B2 D040                       		add.w	d0,d0
000178B4 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
000178B8 4EB9 0000 0000             		jsr	AddPoints
000178BE                            
000178BE                            Obj7D_ChkDel:
000178BE 3028 0008                  		move.w	8(a0),d0
000178C2 0240 FF80                  		andi.w	#$FF80,d0
000178C6 3238 F700                  		move.w	($FFFFF700).w,d1
000178CA 0441 0080                  		subi.w	#$80,d1
000178CE 0241 FF80                  		andi.w	#$FF80,d1
000178D2 9041                       		sub.w	d1,d0
000178D4 0C40 0280                  		cmpi.w	#$280,d0
000178D8 6200                       		bhi.s	Obj7D_Delete
000178DA 4E75                       		rts	
000178DC                            ; ===========================================================================
000178DC                            
000178DC                            Obj7D_Delete:
000178DC 4EF9 0000 DC36             		jmp	DeleteObject
000178E2                            ; ===========================================================================
000178E2 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
000178E4 03E8                       		dc.w 1000
000178E6 0064                       		dc.w 100
000178E8 0001                       		dc.w 1
000178EA                            ; ===========================================================================
000178EA                            
000178EA                            Obj7D_DelayDel:				; XREF: Obj7D_Index
000178EA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
000178EE 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
000178F0 3028 0008                  		move.w	8(a0),d0
000178F4 0240 FF80                  		andi.w	#-$80,d0
000178F8 3238 F700                  		move.w	($FFFFF700).w,d1
000178FC 0441 0080                  		subi.w	#$80,d1
00017900 0241 FF80                  		andi.w	#-$80,d1
00017904 9041                       		sub.w	d1,d0
00017906 0C40 0280                  		cmpi.w	#$280,d0
0001790A 6200                       		bhi.s	Obj7D_Delete2
0001790C 4EF9 0000 DBFA             		jmp	DisplaySprite
00017912                            ; ===========================================================================
00017912                            
00017912                            Obj7D_Delete2:
00017912 4EF9 0000 DC36             		jmp	DeleteObject
00017918                            ; ===========================================================================
00017918                            ; ---------------------------------------------------------------------------
00017918                            ; Sprite mappings - hidden points at the end of	a level
00017918                            ; ---------------------------------------------------------------------------
00017918                            Map_obj7D:
00017918                            	include "_maps\obj7D.asm"
00017918                            ; ---------------------------------------------------------------------------
00017918                            ; Sprite mappings - hidden points at the end of	a level
00017918                            ; ---------------------------------------------------------------------------
00017918 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
0001791C 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00017920 00                         byte_17250:	dc.b 0
00017921 01                         byte_17251:	dc.b 1
00017922 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017927 01                         byte_17257:	dc.b 1
00017928 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0001792D 01                         byte_1725D:	dc.b 1
0001792E F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017934 00                         		even
00017934 00                         		even
00017934                            
00017934                            ; ===========================================================================
00017934                            ; ---------------------------------------------------------------------------
00017934                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017934                            ; ---------------------------------------------------------------------------
00017934                            
00017934                            Obj8A:					; XREF: Obj_Index
00017934 7000                       		moveq	#0,d0
00017936 1028 0024                  		move.b	$24(a0),d0
0001793A 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
0001793E 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00017942                            ; ===========================================================================
00017942 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00017944 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017946                            ; ===========================================================================
00017946                            
00017946                            Obj8A_Main:				; XREF: Obj8A_Index
00017946 5428 0024                  		addq.b	#2,$24(a0)
0001794A 317C 0120 0008             		move.w	#$120,8(a0)
00017950 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017956 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
0001795E 317C 05A0 0002             		move.w	#$5A0,2(a0)
00017964 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00017968 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
0001796C 117C 0000 0001             		move.b	#0,1(a0)
00017972 117C 0000 0018             		move.b	#0,$18(a0)
00017978 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
0001797E 6600                       		bne.s	Obj8A_Display	; if not, branch
00017980 317C 00A6 0002             		move.w	#$A6,2(a0)
00017986 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
0001798C 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00017990 6700                       		beq.s	Obj8A_Display	; if not, branch
00017992 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00017998 6600                       		bne.s	Obj8A_Display	; if not, branch
0001799A 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
000179A0 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
000179A6 4EF9 0000 DC36             		jmp	DeleteObject
000179AC                            ; ===========================================================================
000179AC                            
000179AC                            Obj8A_Display:				; XREF: Obj8A_Index
000179AC 4EF9 0000 DBFA             		jmp	DisplaySprite
000179B2                            ; ===========================================================================
000179B2                            ; ---------------------------------------------------------------------------
000179B2                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
000179B2                            ; ---------------------------------------------------------------------------
000179B2                            Map_obj8A:
000179B2                            	include "_maps\obj8A.asm"
000179B2                            ; --------------------------------------------------------------------------------
000179B2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000179B2                            ; --------------------------------------------------------------------------------
000179B2                            
000179B2                            SME_MD8yg:	
000179B2 0000 0000                  		dc.w SME_MD8yg_16-SME_MD8yg, SME_MD8yg_5D-SME_MD8yg	
000179B6 0000 0000                  		dc.w SME_MD8yg_AE-SME_MD8yg, SME_MD8yg_E1-SME_MD8yg	
000179BA 0000 0000                  		dc.w SME_MD8yg_15A-SME_MD8yg, SME_MD8yg_1BF-SME_MD8yg	
000179BE 0000 0000                  		dc.w SME_MD8yg_242-SME_MD8yg, SME_MD8yg_2B6-SME_MD8yg	
000179C2 0000 0000                  		dc.w SME_MD8yg_352-SME_MD8yg, SME_MD8yg_39E-SME_MD8yg	
000179C6 0000                       		dc.w SME_MD8yg_3C7-SME_MD8yg	
000179C8 0E                         SME_MD8yg_16:	dc.b $E	
000179C9 F805 802E 88               		dc.b $F8, 5, $80, $2E, $88	
000179CE F805 8026 98               		dc.b $F8, 5, $80, $26, $98	
000179D3 F805 801A A8               		dc.b $F8, 5, $80, $1A, $A8	
000179D8 F801 8046 B8               		dc.b $F8, 1, $80, $46, $B8	
000179DD F805 801E C0               		dc.b $F8, 5, $80, $1E, $C0	
000179E2 F805 803E D8               		dc.b $F8, 5, $80, $3E, $D8	
000179E7 F805 800E E8               		dc.b $F8, 5, $80, $E, $E8	
000179EC F805 8004 F8               		dc.b $F8, 5, $80, 4, $F8	
000179F1 F809 8008 08               		dc.b $F8, 9, $80, 8, 8	
000179F6 F805 802E 28               		dc.b $F8, 5, $80, $2E, $28	
000179FB F805 803E 38               		dc.b $F8, 5, $80, $3E, $38	
00017A00 F805 8004 48               		dc.b $F8, 5, $80, 4, $48	
00017A05 F805 805C 58               		dc.b $F8, 5, $80, $5C, $58	
00017A0A F805 805C 68               		dc.b $F8, 5, $80, $5C, $68	
00017A0F 10                         SME_MD8yg_5D:	dc.b $10	
00017A10 D805 0000 80               		dc.b $D8, 5, 0, 0, $80	
00017A15 D805 0004 90               		dc.b $D8, 5, 0, 4, $90	
00017A1A D809 0008 A0               		dc.b $D8, 9, 0, 8, $A0	
00017A1F D805 000E B4               		dc.b $D8, 5, 0, $E, $B4	
00017A24 D805 0012 D0               		dc.b $D8, 5, 0, $12, $D0	
00017A29 D805 0016 E0               		dc.b $D8, 5, 0, $16, $E0	
00017A2E D805 0004 F0               		dc.b $D8, 5, 0, 4, $F0	
00017A33 D805 001A 00               		dc.b $D8, 5, 0, $1A, 0	
00017A38 0805 001E C8               		dc.b 8, 5, 0, $1E, $C8	
00017A3D 0805 0004 D8               		dc.b 8, 5, 0, 4, $D8	
00017A42 0805 0022 E8               		dc.b 8, 5, 0, $22, $E8	
00017A47 0805 0026 F8               		dc.b 8, 5, 0, $26, $F8	
00017A4C 0805 0016 08               		dc.b 8, 5, 0, $16, 8	
00017A51 0805 002A 20               		dc.b 8, 5, 0, $2A, $20	
00017A56 0805 0004 30               		dc.b 8, 5, 0, 4, $30	
00017A5B 0805 002E 44               		dc.b 8, 5, 0, $2E, $44	
00017A60 0A                         SME_MD8yg_AE:	dc.b $A	
00017A61 D805 0012 80               		dc.b $D8, 5, 0, $12, $80	
00017A66 D805 0022 90               		dc.b $D8, 5, 0, $22, $90	
00017A6B D805 0026 A0               		dc.b $D8, 5, 0, $26, $A0	
00017A70 D805 0000 B0               		dc.b $D8, 5, 0, 0, $B0	
00017A75 D805 0022 C0               		dc.b $D8, 5, 0, $22, $C0	
00017A7A D805 0004 D0               		dc.b $D8, 5, 0, 4, $D0	
00017A7F D809 0008 E0               		dc.b $D8, 9, 0, 8, $E0	
00017A84 0805 002A E8               		dc.b 8, 5, 0, $2A, $E8	
00017A89 0805 0032 F8               		dc.b 8, 5, 0, $32, $F8	
00017A8E 0805 0036 08               		dc.b 8, 5, 0, $36, 8	
00017A93 18                         SME_MD8yg_E1:	dc.b $18	
00017A94 D805 001E 88               		dc.b $D8, 5, 0, $1E, $88	
00017A99 D805 003A 98               		dc.b $D8, 5, 0, $3A, $98	
00017A9E D805 0004 A8               		dc.b $D8, 5, 0, 4, $A8	
00017AA3 D805 0022 B8               		dc.b $D8, 5, 0, $22, $B8	
00017AA8 D805 0004 C8               		dc.b $D8, 5, 0, 4, $C8	
00017AAD D805 001E D8               		dc.b $D8, 5, 0, $1E, $D8	
00017AB2 D805 003E E8               		dc.b $D8, 5, 0, $3E, $E8	
00017AB7 D805 000E F8               		dc.b $D8, 5, 0, $E, $F8	
00017ABC D805 0022 08               		dc.b $D8, 5, 0, $22, 8	
00017AC1 D805 0042 20               		dc.b $D8, 5, 0, $42, $20	
00017AC6 D805 000E 30               		dc.b $D8, 5, 0, $E, $30	
00017ACB D805 002E 40               		dc.b $D8, 5, 0, $2E, $40	
00017AD0 D801 0046 50               		dc.b $D8, 1, 0, $46, $50	
00017AD5 D805 0000 58               		dc.b $D8, 5, 0, 0, $58	
00017ADA D805 001A 68               		dc.b $D8, 5, 0, $1A, $68	
00017ADF 0805 0048 C0               		dc.b 8, 5, 0, $48, $C0	
00017AE4 0801 0046 D0               		dc.b 8, 1, 0, $46, $D0	
00017AE9 0805 0000 D8               		dc.b 8, 5, 0, 0, $D8	
00017AEE 0801 0046 E8               		dc.b 8, 1, 0, $46, $E8	
00017AF3 0805 002E F0               		dc.b 8, 5, 0, $2E, $F0	
00017AF8 0805 0016 00               		dc.b 8, 5, 0, $16, 0	
00017AFD 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
00017B02 0805 001A 20               		dc.b 8, 5, 0, $1A, $20	
00017B07 0805 0042 30               		dc.b 8, 5, 0, $42, $30	
00017B0C 14                         SME_MD8yg_15A:	dc.b $14	
00017B0D D005 0042 A0               		dc.b $D0, 5, 0, $42, $A0	
00017B12 D005 000E B0               		dc.b $D0, 5, 0, $E, $B0	
00017B17 D005 002E C0               		dc.b $D0, 5, 0, $2E, $C0	
00017B1C D001 0046 D0               		dc.b $D0, 1, 0, $46, $D0	
00017B21 D005 0000 D8               		dc.b $D0, 5, 0, 0, $D8	
00017B26 D005 001A E8               		dc.b $D0, 5, 0, $1A, $E8	
00017B2B 0005 004C E8               		dc.b 0, 5, 0, $4C, $E8	
00017B30 0001 0046 F8               		dc.b 0, 1, 0, $46, $F8	
00017B35 0005 001A 04               		dc.b 0, 5, 0, $1A, 4	
00017B3A 0005 002A 14               		dc.b 0, 5, 0, $2A, $14	
00017B3F 0005 0004 24               		dc.b 0, 5, 0, 4, $24	
00017B44 2005 0012 D0               		dc.b $20, 5, 0, $12, $D0	
00017B49 2005 003A E0               		dc.b $20, 5, 0, $3A, $E0	
00017B4E 2005 000E F0               		dc.b $20, 5, 0, $E, $F0	
00017B53 2005 001A 00               		dc.b $20, 5, 0, $1A, 0	
00017B58 2001 0046 10               		dc.b $20, 1, 0, $46, $10	
00017B5D 2005 0050 18               		dc.b $20, 5, 0, $50, $18	
00017B62 2005 0022 30               		dc.b $20, 5, 0, $22, $30	
00017B67 2001 0046 40               		dc.b $20, 1, 0, $46, $40	
00017B6C 2005 000E 48               		dc.b $20, 5, 0, $E, $48	
00017B71 1A                         SME_MD8yg_1BF:	dc.b $1A	
00017B72 D805 002E 98               		dc.b $D8, 5, 0, $2E, $98	
00017B77 D805 0026 A8               		dc.b $D8, 5, 0, $26, $A8	
00017B7C D805 0032 B8               		dc.b $D8, 5, 0, $32, $B8	
00017B81 D805 001A C8               		dc.b $D8, 5, 0, $1A, $C8	
00017B86 D805 0054 D8               		dc.b $D8, 5, 0, $54, $D8	
00017B8B D805 0012 F8               		dc.b $D8, 5, 0, $12, $F8	
00017B90 D805 0022 08               		dc.b $D8, 5, 0, $22, 8	
00017B95 D805 0026 18               		dc.b $D8, 5, 0, $26, $18	
00017B9A D805 0042 28               		dc.b $D8, 5, 0, $42, $28	
00017B9F D805 0032 38               		dc.b $D8, 5, 0, $32, $38	
00017BA4 D805 001E 48               		dc.b $D8, 5, 0, $1E, $48	
00017BA9 D805 000E 58               		dc.b $D8, 5, 0, $E, $58	
00017BAE 0809 0008 88               		dc.b 8, 9, 0, 8, $88	
00017BB3 0805 0004 9C               		dc.b 8, 5, 0, 4, $9C	
00017BB8 0805 002E AC               		dc.b 8, 5, 0, $2E, $AC	
00017BBD 0805 0004 BC               		dc.b 8, 5, 0, 4, $BC	
00017BC2 0805 003E CC               		dc.b 8, 5, 0, $3E, $CC	
00017BC7 0805 0026 DC               		dc.b 8, 5, 0, $26, $DC	
00017BCC 0805 001A F8               		dc.b 8, 5, 0, $1A, $F8	
00017BD1 0805 0004 08               		dc.b 8, 5, 0, 4, 8	
00017BD6 0805 0058 18               		dc.b 8, 5, 0, $58, $18	
00017BDB 0805 0004 28               		dc.b 8, 5, 0, 4, $28	
00017BE0 0809 0008 38               		dc.b 8, 9, 0, 8, $38	
00017BE5 0805 0032 4C               		dc.b 8, 5, 0, $32, $4C	
00017BEA 0805 0022 5C               		dc.b 8, 5, 0, $22, $5C	
00017BEF 0805 0004 6C               		dc.b 8, 5, 0, 4, $6C	
00017BF4 17                         SME_MD8yg_242:	dc.b $17	
00017BF5 D005 002E 98               		dc.b $D0, 5, 0, $2E, $98	
00017BFA D005 0026 A8               		dc.b $D0, 5, 0, $26, $A8	
00017BFF D005 0032 B8               		dc.b $D0, 5, 0, $32, $B8	
00017C04 D005 001A C8               		dc.b $D0, 5, 0, $1A, $C8	
00017C09 D005 0054 D8               		dc.b $D0, 5, 0, $54, $D8	
00017C0E D005 0012 F8               		dc.b $D0, 5, 0, $12, $F8	
00017C13 D005 0022 08               		dc.b $D0, 5, 0, $22, 8	
00017C18 D005 0026 18               		dc.b $D0, 5, 0, $26, $18	
00017C1D D005 0000 28               		dc.b $D0, 5, 0, 0, $28	
00017C22 D005 0022 38               		dc.b $D0, 5, 0, $22, $38	
00017C27 D005 0004 48               		dc.b $D0, 5, 0, 4, $48	
00017C2C D009 0008 58               		dc.b $D0, 9, 0, 8, $58	
00017C31 0005 004C D0               		dc.b 0, 5, 0, $4C, $D0	
00017C36 0001 0046 E0               		dc.b 0, 1, 0, $46, $E0	
00017C3B 0009 0008 E8               		dc.b 0, 9, 0, 8, $E8	
00017C40 0001 0046 FC               		dc.b 0, 1, 0, $46, $FC	
00017C45 0005 003E 04               		dc.b 0, 5, 0, $3E, 4	
00017C4A 0005 0004 14               		dc.b 0, 5, 0, 4, $14	
00017C4F 2009 0008 D0               		dc.b $20, 9, 0, 8, $D0	
00017C54 2005 0004 E4               		dc.b $20, 5, 0, 4, $E4	
00017C59 2005 001E F4               		dc.b $20, 5, 0, $1E, $F4	
00017C5E 2005 0058 04               		dc.b $20, 5, 0, $58, 4	
00017C63 2005 002A 14               		dc.b $20, 5, 0, $2A, $14	
00017C68 1F                         SME_MD8yg_2B6:	dc.b $1F	
00017C69 D805 002E 80               		dc.b $D8, 5, 0, $2E, $80	
00017C6E D805 0012 90               		dc.b $D8, 5, 0, $12, $90	
00017C73 D805 000E A0               		dc.b $D8, 5, 0, $E, $A0	
00017C78 D805 001E B0               		dc.b $D8, 5, 0, $1E, $B0	
00017C7D D801 0046 C0               		dc.b $D8, 1, 0, $46, $C0	
00017C82 D805 0004 C8               		dc.b $D8, 5, 0, 4, $C8	
00017C87 D805 0016 D8               		dc.b $D8, 5, 0, $16, $D8	
00017C8C D805 003E F8               		dc.b $D8, 5, 0, $3E, $F8	
00017C91 D805 003A 08               		dc.b $D8, 5, 0, $3A, 8	
00017C96 D805 0004 18               		dc.b $D8, 5, 0, 4, $18	
00017C9B D805 001A 28               		dc.b $D8, 5, 0, $1A, $28	
00017CA0 D805 0058 38               		dc.b $D8, 5, 0, $58, $38	
00017CA5 D805 002E 48               		dc.b $D8, 5, 0, $2E, $48	
00017CAA 0005 005C B0               		dc.b 0, 5, 0, $5C, $B0	
00017CAF 0005 0032 C0               		dc.b 0, 5, 0, $32, $C0	
00017CB4 0005 004C D0               		dc.b 0, 5, 0, $4C, $D0	
00017CB9 0001 0046 E0               		dc.b 0, 1, 0, $46, $E0	
00017CBE 0005 0026 E8               		dc.b 0, 5, 0, $26, $E8	
00017CC3 0009 0008 00               		dc.b 0, 9, 0, 8, 0	
00017CC8 0001 0046 14               		dc.b 0, 1, 0, $46, $14	
00017CCD 0005 001A 1C               		dc.b 0, 5, 0, $1A, $1C	
00017CD2 0005 000E 2C               		dc.b 0, 5, 0, $E, $2C	
00017CD7 0005 0000 3C               		dc.b 0, 5, 0, 0, $3C	
00017CDC 0001 0046 4C               		dc.b 0, 1, 0, $46, $4C	
00017CE1 0005 002E 54               		dc.b 0, 5, 0, $2E, $54	
00017CE6 0005 003A 64               		dc.b 0, 5, 0, $3A, $64	
00017CEB 0001 0046 74               		dc.b 0, 1, 0, $46, $74	
00017CF0 2005 0012 F8               		dc.b $20, 5, 0, $12, $F8	
00017CF5 2005 0004 08               		dc.b $20, 5, 0, 4, 8	
00017CFA 2005 0012 18               		dc.b $20, 5, 0, $12, $18	
00017CFF 2005 0004 28               		dc.b $20, 5, 0, 4, $28	
00017D04 0F                         SME_MD8yg_352:	dc.b $F	
00017D05 F805 0012 80               		dc.b $F8, 5, 0, $12, $80	
00017D0A F805 0022 90               		dc.b $F8, 5, 0, $22, $90	
00017D0F F805 000E A0               		dc.b $F8, 5, 0, $E, $A0	
00017D14 F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	
00017D19 F805 000E C0               		dc.b $F8, 5, 0, $E, $C0	
00017D1E F805 001A D0               		dc.b $F8, 5, 0, $1A, $D0	
00017D23 F805 003E E0               		dc.b $F8, 5, 0, $3E, $E0	
00017D28 F805 000E F0               		dc.b $F8, 5, 0, $E, $F0	
00017D2D F805 0042 00               		dc.b $F8, 5, 0, $42, 0	
00017D32 F805 0048 18               		dc.b $F8, 5, 0, $48, $18	
00017D37 F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	
00017D3C F805 002E 40               		dc.b $F8, 5, 0, $2E, $40	
00017D41 F805 000E 50               		dc.b $F8, 5, 0, $E, $50	
00017D46 F805 0000 60               		dc.b $F8, 5, 0, 0, $60	
00017D4B F805 0004 70               		dc.b $F8, 5, 0, 4, $70	
00017D50 08                         SME_MD8yg_39E:	dc.b 8	
00017D51 3005 003E C0               		dc.b $30, 5, 0, $3E, $C0	
00017D56 3005 0022 D0               		dc.b $30, 5, 0, $22, $D0	
00017D5B 3005 002A E0               		dc.b $30, 5, 0, $2A, $E0	
00017D60 3005 0004 F8               		dc.b $30, 5, 0, 4, $F8	
00017D65 3005 0000 08               		dc.b $30, 5, 0, 0, 8	
00017D6A 3005 0004 18               		dc.b $30, 5, 0, 4, $18	
00017D6F 3001 0046 28               		dc.b $30, 1, 0, $46, $28	
00017D74 3005 001A 30               		dc.b $30, 5, 0, $1A, $30	
00017D79 17                         SME_MD8yg_3C7:	dc.b $17	
00017D7A E805 002E B4               		dc.b $E8, 5, 0, $2E, $B4	
00017D7F D805 0026 C4               		dc.b $D8, 5, 0, $26, $C4	
00017D84 E801 0046 44               		dc.b $E8, 1, 0, $46, $44	
00017D89 E805 001E 4C               		dc.b $E8, 5, 0, $1E, $4C	
00017D8E D805 003E 34               		dc.b $D8, 5, 0, $3E, $34	
00017D93 D805 000E 1C               		dc.b $D8, 5, 0, $E, $1C	
00017D98 D805 0004 FC               		dc.b $D8, 5, 0, 4, $FC	
00017D9D E809 0008 0C               		dc.b $E8, 9, 0, 8, $C	
00017DA2 D805 002A B4               		dc.b $D8, 5, 0, $2A, $B4	
00017DA7 D805 0032 D4               		dc.b $D8, 5, 0, $32, $D4	
00017DAC D805 103A EC               		dc.b $D8, 5, $10, $3A, $EC	
00017DB1 D805 0032 0C               		dc.b $D8, 5, 0, $32, $C	
00017DB6 D805 003A 44               		dc.b $D8, 5, 0, $3A, $44	
00017DBB E805 0004 C4               		dc.b $E8, 5, 0, 4, $C4	
00017DC0 E805 0032 24               		dc.b $E8, 5, 0, $32, $24	
00017DC5 E809 0008 D4               		dc.b $E8, 9, 0, 8, $D4	
00017DCA E805 000E EC               		dc.b $E8, 5, 0, $E, $EC	
00017DCF E805 002E 34               		dc.b $E8, 5, 0, $2E, $34	
00017DD4 F805 001E D4               		dc.b $F8, 5, 0, $1E, $D4	
00017DD9 F805 0004 E4               		dc.b $F8, 5, 0, 4, $E4	
00017DDE F805 0042 F4               		dc.b $F8, 5, 0, $42, $F4	
00017DE3 D805 000E 54               		dc.b $D8, 5, 0, $E, $54	
00017DE8 F805 000E 04               		dc.b $F8, 5, 0, $E, 4	
00017DEE 00                         		even
00017DEE 00                         		even
00017DEE                            
00017DEE                            ; ===========================================================================
00017DEE                            ; ---------------------------------------------------------------------------
00017DEE                            ; Object 3D - matthew boss - modified by GK89
00017DEE                            ; ---------------------------------------------------------------------------
00017DEE                            
00017DEE                            Obj3D:					; XREF: Obj_Index
00017DEE 7000                       		moveq	#0,d0
00017DF0 1028 0024                  		move.b	$24(a0),d0
00017DF4 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00017DF8 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00017DFC                            ; ===========================================================================
00017DFC 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00017DFE 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00017E00 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00017E02 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00017E04                            
00017E04 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00017E06 0401                       		dc.b 4,	1
00017E08 0607                       		dc.b 6,	7
00017E0A                            ; ===========================================================================
00017E0A                            
00017E0A                            Obj3D_Main:				; XREF: Obj3D_Index
00017E0A 45F9 0001 7E04             		lea	(Obj3D_ObjData).l,a2
00017E10 2248                       		movea.l	a0,a1
00017E12 7202                       		moveq	#2,d1
00017E14 6000                       		bra.s	Obj3D_LoadBoss
00017E16                            ; ===========================================================================
00017E16                            
00017E16                            Obj3D_Loop:
00017E16 4EB9 0000 E096             		jsr	SingleObjLoad2
00017E1C 6600                       		bne.s	loc_17772
00017E1E                            
00017E1E                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00017E1E 135A 0024                  		move.b	(a2)+,$24(a1)
00017E22 12BC 003D                  		move.b	#$3D,0(a1)
00017E26 3368 0008 0008             		move.w	8(a0),8(a1)
00017E2C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017E32 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00017E3A 337C 0400 0002             		move.w	#$400,2(a1)
00017E40 137C 0004 0001             		move.b	#4,1(a1)
00017E46 137C 0020 0019             		move.b	#$20,$19(a1)
00017E4C 137C 0003 0018             		move.b	#3,$18(a1)
00017E52 135A 001C                  		move.b	(a2)+,$1C(a1)
00017E56 2348 0034                  		move.l	a0,$34(a1)
00017E5A 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00017E5E                            
00017E5E                            loc_17772:
00017E5E 3168 0008 0030             		move.w	8(a0),$30(a0)
00017E64 3168 000C 0038             		move.w	$C(a0),$38(a0)
00017E6A 117C 000F 0020             		move.b	#$F,$20(a0)
00017E70 117C 0028 0021             		move.b	#$28,$21(a0)	; set number of	hits to	8
00017E76                            
00017E76                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00017E76 7000                       		moveq	#0,d0
00017E78 1028 0025                  		move.b	$25(a0),d0
00017E7C 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
00017E80 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00017E84 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00017E8A 4EB9 0000 ACC4             		jsr	AnimateSprite
00017E90 1028 0022                  		move.b	$22(a0),d0
00017E94 0200 0003                  		andi.b	#3,d0
00017E98 0228 00FC 0001             		andi.b	#$FC,1(a0)
00017E9E 8128 0001                  		or.b	d0,1(a0)
00017EA2 4EF9 0000 DBFA             		jmp	DisplaySprite
00017EA8                            ; ===========================================================================
00017EA8 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00017EAA 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
00017EAC 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
00017EAE 0000                       		dc.w loc_17954-Obj3D_ShipIndex
00017EB0 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00017EB2 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00017EB4 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00017EB6                            ; ===========================================================================
00017EB6                            
00017EB6                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00017EB6 4EB9 0000 0000             		jsr    Obj3D_ShipMove
00017EBC 6100 0000                  		bsr.w	BossMove
00017EC0 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00017EC6 6600                       		bne.s	loc_177E6
00017EC8 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00017ECE 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00017ED2                            
00017ED2                            loc_177E6:
00017ED2 1028 003F                  		move.b	$3F(a0),d0
00017ED6 4EB9 0000 2C60             		jsr	(CalcSine).l
00017EDC EC40                       		asr.w	#6,d0
00017EDE D068 0038                  		add.w	$38(a0),d0
00017EE2 3140 000C                  		move.w	d0,$C(a0)
00017EE6 3168 0030 0008             		move.w	$30(a0),8(a0)
00017EEC 5428 003F                  		addq.b	#2,$3F(a0)
00017EF0 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00017EF6 6400                       		bcc.s	locret_1784A
00017EF8 4A28 0022                  		tst.b	$22(a0)
00017EFC 6B00                       		bmi.s	loc_1784C
00017EFE 4A28 0020                  		tst.b	$20(a0)
00017F02 6600                       		bne.s	locret_1784A
00017F04 4A28 003E                  		tst.b	$3E(a0)
00017F08 6600                       		bne.s	Obj3D_ShipFlash
00017F0A 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00017F10 303C 00AC                  		move.w	#$AC,d0
00017F14 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
00017F1A                            
00017F1A                            Obj3D_ShipFlash:
00017F1A 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00017F1E 7000                       		moveq	#0,d0		; move 0 (black) to d0
00017F20 4A51                       		tst.w	(a1)
00017F22 6600                       		bne.s	loc_1783C
00017F24 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00017F28                            
00017F28                            loc_1783C:
00017F28 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00017F2A 5328 003E                  		subq.b	#1,$3E(a0)
00017F2E 6600                       		bne.s	locret_1784A
00017F30 117C 000F 0020             		move.b	#$F,$20(a0)
00017F36                            
00017F36                            locret_1784A:
00017F36 4E75                       		rts	
00017F38                            ; ===========================================================================
00017F38                            
00017F38                            loc_1784C:				; XREF: loc_177E6
00017F38 7064                       		moveq	#100,d0
00017F3A 6100 0000                  		bsr.w	AddPoints
00017F3E 117C 0008 0025             		move.b	#8,$25(a0)
00017F44 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00017F4A 4E75                       		rts	
00017F4C                            
00017F4C                            ; ---------------------------------------------------------------------------
00017F4C                            ; Defeated boss	subroutine
00017F4C                            ; ---------------------------------------------------------------------------
00017F4C                            
00017F4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017F4C                            
00017F4C                            
00017F4C                            BossDefeated:
00017F4C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00017F50 0200 0007                  		andi.b	#7,d0
00017F54 6600                       		bne.s	locret_178A2
00017F56 4EB9 0000 E080             		jsr	SingleObjLoad
00017F5C 6600                       		bne.s	locret_178A2
00017F5E 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00017F62 3368 0008 0008             		move.w	8(a0),8(a1)
00017F68 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017F6E 4EB9 0000 2C3A             		jsr	(RandomNumber).l
00017F74 3200                       		move.w	d0,d1
00017F76 7200                       		moveq	#0,d1
00017F78 1200                       		move.b	d0,d1
00017F7A E409                       		lsr.b	#2,d1
00017F7C 0441 0020                  		subi.w	#$20,d1
00017F80 D369 0008                  		add.w	d1,8(a1)
00017F84 E048                       		lsr.w	#8,d0
00017F86 E608                       		lsr.b	#3,d0
00017F88 D169 000C                  		add.w	d0,$C(a1)
00017F8C                            
00017F8C                            locret_178A2:
00017F8C 4E75                       		rts	
00017F8E                            ; End of function BossDefeated
00017F8E                            
00017F8E                            ; ---------------------------------------------------------------------------
00017F8E                            ; Subroutine to	move a boss
00017F8E                            ; ---------------------------------------------------------------------------
00017F8E                            
00017F8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017F8E                            
00017F8E                            
00017F8E                            BossMove:
00017F8E 2428 0030                  		move.l	$30(a0),d2
00017F92 2628 0038                  		move.l	$38(a0),d3
00017F96 3028 0010                  		move.w	$10(a0),d0
00017F9A 48C0                       		ext.l	d0
00017F9C E180                       		asl.l	#8,d0
00017F9E D480                       		add.l	d0,d2
00017FA0 3028 0012                  		move.w	$12(a0),d0
00017FA4 48C0                       		ext.l	d0
00017FA6 E180                       		asl.l	#8,d0
00017FA8 D680                       		add.l	d0,d3
00017FAA 2142 0030                  		move.l	d2,$30(a0)
00017FAE 2143 0038                  		move.l	d3,$38(a0)
00017FB2 4E75                       		rts	
00017FB4                            ; End of function BossMove
00017FB4                            
00017FB4                            ; ===========================================================================
00017FB4                            
00017FB4                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex		
00017FB4 6100 FFD8                  		bsr.w	BossMove
00017FB8 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00017FBE 6600                       		bne.s	loc_17916
00017FC0 317C 0000 0010             		move.w	#0,$10(a0)
00017FC6 317C 0000 0012             		move.w	#0,$12(a0)
00017FCC 5428 0025                  		addq.b	#2,$25(a0)
00017FD0 4EB9 0000 E096             		jsr	SingleObjLoad2
00017FD6 6600                       		bne.s	loc_17910
00017FD8 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00017FDC 3368 0030 0008             		move.w	$30(a0),8(a1)
00017FE2 3368 0038 000C             		move.w	$38(a0),$C(a1)
00017FE8 2348 0034                  		move.l	a0,$34(a1)
00017FEC                            
00017FEC                            loc_17910:
00017FEC 317C 0077 003C             		move.w	#$77,$3C(a0)
00017FF2                            
00017FF2                            loc_17916:
00017FF2 6000 FEDE                  		bra.w	loc_177E6
00017FF6                            ; ===========================================================================
00017FF6                            
00017FF6                            Obj3D_ShipMove:				; XREF:  sonic follow move
00017FF6 5368 003C                  		subq.w	#1,$3C(a0)
00017FFA 4EB9 0000 0000             		jsr 	Obj3D_UpStuff
00018000 5428 0025                  		addq.b	#2,$25(a0)
00018004 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001800A 3038 D008                  		move.w	($FFFFD008).w,d0	 
0001800E 9068 0008                  		sub.w	8(a0),d0		 
00018012 6A00                       		bpl.s	Obj3D_left			 
00018014 08A8 0000 0022             		bclr	#0,$22(a0)		 
0001801A 6000                       		bra.s	Obj3D_right		 
0001801C 08A8 0005 0022             		bclr	#5,$22(a0)
00018022 4EB9 0000 0000              		jsr     loc_17950
00018028 4E75                       		rts
0001802A                            ; ===========================================================================
0001802A                            
0001802A                            Obj3D_right:
0001802A 317C FF00 0010             		move.w	#-$100,$10(a0)	
00018030 4E75                       		Rts
00018032                            
00018032                            Obj3D_left:
00018032 317C 0100 0010             		move.w	#$100,$10(a0)	 
00018038 0828 0000 0022             		btst	#0,$22(a0)	; is matt facing	left?
0001803E 6600                       		bne.s	RTSboss  	; if not, branch
00018040 0868 0000 0022              		bchg	#0,$22(a0)
00018046                            
00018046                            RTSboss:	    
00018046 4E75                       		rts
00018048                             ; ===========================================================================
00018048                            
00018048                            Obj3D_UpStuff:
00018048 3038 D00C                  		move.w	($FFFFD00C).w,d0	 
0001804C 9068 000C                  		sub.w	$C(a0),d0		 
00018050 6A00                       		bpl.s	Obj3D_down			 
00018052 6000                        		bra.s	Obj3D_up		 
00018054 08A8 0005 0022             		bclr	#5,$22(a0)
0001805A                             
0001805A                            Obj3D_up:		
0001805A 317C FEE0 0012             		move.w	#-$120,$12(a0)           ; Up	 
00018060 4E75                        	    rts
00018062                            
00018062                            Obj3D_down:
00018062 317C 0120 0012              		move.w	#$120, $12(a0)           ; Down
00018068                            
00018068                            loc_17950:
00018068 6000 FE68                  		bra.w	loc_177E6
0001806C                            ; ===========================================================================
0001806C                            
0001806C                            loc_17954:				; XREF: Obj3D_ShipIndex
0001806C 5368 003C                  		subq.w	#1,$3C(a0)
00018070 6B00                       		bmi.s	loc_17960
00018072 6100 FF1A                  		bsr.w	BossMove
00018076 6000                       		bra.s	loc_17976
00018078                            ; ===========================================================================
00018078                            
00018078                            loc_17960:
00018078 0868 0000 0022             		bchg	#0,$22(a0)
0001807E 317C 003F 003C             		move.w	#$3F,$3C(a0)
00018084 5528 0025                  		subq.b	#2,$25(a0)
00018088 317C 0000 0010             		move.w	#0,$10(a0)
0001808E                            
0001808E                            loc_17976:
0001808E 6000 FE42                  		bra.w	loc_177E6
00018092                            ; ===========================================================================
00018092                            
00018092                            loc_1797A:				; XREF: Obj3D_ShipIndex
00018092 5368 003C                  		subq.w	#1,$3C(a0)
00018096 6B00                       		bmi.s	loc_17984
00018098 6000 FEB2                  		bra.w	BossDefeated
0001809C                            ; ===========================================================================
0001809C                            
0001809C                            loc_17984:
0001809C 08E8 0000 0022             		bset	#0,$22(a0)
000180A2 08A8 0007 0022             		bclr	#7,$22(a0)
000180A8 4268 0010                  		clr.w	$10(a0)
000180AC 5428 0025                  		addq.b	#2,$25(a0)
000180B0 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000180B6 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000180BA 6600                       		bne.s	locret_179AA
000180BC 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000180C2 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000180C8 6000 FE82                  		bra.w	BossDefeated
000180CC                            
000180CC                            locret_179AA:
000180CC 4E75                       		rts	
000180CE                            ; ===========================================================================
000180CE                            
000180CE                            loc_179AC:				; XREF: Obj3D_ShipIndex
000180CE 4EB9 0000 DBA8             		jsr ObjectFall		
000180D4 5268 003C                  		addq.w	#1,$3C(a0)
000180D8 6700                       		beq.s	loc_179BC
000180DA 6A00                       		bpl.s	loc_179C2
000180DC 6000                       		bra.s	loc_179EE
000180DE                            ; ===========================================================================
000180DE                            
000180DE                            loc_179BC:
000180DE 4268 0012                  		clr.w	$12(a0)
000180E2 6000                       		bra.s	loc_179EE
000180E4                            ; ===========================================================================
000180E4                            
000180E4                            loc_179C2:
000180E4 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
000180EA 6500                       		bcs.s	loc_179DA
000180EC 6700                       		beq.s	loc_179E0
000180EE 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
000180F4 6500                       		bcs.s	loc_179EE
000180F6 5428 0025                  		addq.b	#2,$25(a0)
000180FA 6000                       		bra.s	loc_179EE
000180FC                            ; ===========================================================================
000180FC                            
000180FC                            loc_179DA:
000180FC 5168 0012                  		subq.w	#8,$12(a0)
00018100 6000                       		bra.s	loc_179EE
00018102 6000 FE48                  		bra.w	BossDefeated
00018106                            ; ===========================================================================
00018106                            
00018106                            loc_179E0:
00018106 4268 0012                  		clr.w	$12(a0)
0001810A 303C 0081                  		move.w	#$81,d0
0001810E 4EB9 0000 15B6             		jsr	(PlaySound).l	; play GHZ music
00018114                            
00018114                            loc_179EE:
00018114 6100 FE78                  		bsr.w	BossMove
00018118 6000 FDB8                  		bra.w	loc_177E6
0001811C                            ; ===========================================================================
0001811C                            
0001811C                            loc_179F6:				; XREF: Obj3D_ShipIndex
0001811C 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00018122 6700                       		beq.s	loc_17A10
00018124 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018128 6000                       		bra.s	loc_17A16
0001812A                            ; ===========================================================================
0001812A                            
0001812A                            loc_17A10:
0001812A 4A28 0001                  		tst.b	1(a0)
0001812E 6A00                       		bpl.s	Obj3D_ShipDel
00018130                            
00018130                            loc_17A16:
00018130 6100 FE5C                  		bsr.w	BossMove
00018134 6000 FD9C                  		bra.w	loc_177E6
00018138                            ; ===========================================================================
00018138                            
00018138                            Obj3D_ShipDel:
00018138 4EF9 0000 DC36             		jmp	DeleteObject
0001813E                            ; ===========================================================================
0001813E                            
0001813E                            Obj3D_FaceMain:				; XREF: Obj3D_Index
0001813E 7000                       		moveq	#0,d0
00018140 7201                       		moveq	#1,d1
00018142 2268 0034                  		movea.l	$34(a0),a1
00018146 1029 0025                  		move.b	$25(a1),d0
0001814A 5900                       		subq.b	#4,d0
0001814C 6600                       		bne.s	loc_17A3E
0001814E 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00018154 6600                       		bne.s	loc_17A46
00018156 7204                       		moveq	#4,d1
00018158                            
00018158                            loc_17A3E:
00018158 5D00                       		subq.b	#6,d0
0001815A 6B00                       		bmi.s	loc_17A46
0001815C 720A                       		moveq	#$A,d1
0001815E 6000                       		bra.s	loc_17A5A
00018160                            ; ===========================================================================
00018160                            
00018160                            loc_17A46:
00018160 4A29 0020                  		tst.b	$20(a1)
00018164 6600                       		bne.s	loc_17A50
00018166 7205                       		moveq	#5,d1
00018168 6000                       		bra.s	loc_17A5A
0001816A                            ; ===========================================================================
0001816A                            
0001816A                            loc_17A50:
0001816A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018170 6500                       		bcs.s	loc_17A5A
00018172 7204                       		moveq	#4,d1
00018174                            
00018174                            loc_17A5A:
00018174 1141 001C                  		move.b	d1,$1C(a0)
00018178 5500                       		subq.b	#2,d0
0001817A 6600                       		bne.s	Obj3D_FaceDisp
0001817C 117C 0006 001C             		move.b	#6,$1C(a0)
00018182 4A28 0001                  		tst.b	1(a0)
00018186 6A00                       		bpl.s	Obj3D_FaceDel
00018188                            
00018188                            Obj3D_FaceDisp:
00018188 6000                       		bra.s	Obj3D_Display
0001818A                            ; ===========================================================================
0001818A                            
0001818A                            Obj3D_FaceDel:
0001818A 4EF9 0000 DC36             		jmp	DeleteObject
00018190                            ; ===========================================================================
00018190                            
00018190                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00018190 117C 0007 001C             		move.b	#7,$1C(a0)
00018196 2268 0034                  		movea.l	$34(a0),a1
0001819A 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
000181A0 6600                       		bne.s	loc_17A96
000181A2 117C 000B 001C             		move.b	#$B,$1C(a0)
000181A8 4A28 0001                  		tst.b	1(a0)
000181AC 6A00                       		bpl.s	Obj3D_FlameDel
000181AE 6000                       		bra.s	Obj3D_FlameDisp
000181B0                            ; ===========================================================================
000181B0                            
000181B0                            loc_17A96:
000181B0 3029 0010                  		move.w	$10(a1),d0
000181B4 6700                       		beq.s	Obj3D_FlameDisp
000181B6 117C 0008 001C             		move.b	#8,$1C(a0)
000181BC                            
000181BC                            Obj3D_FlameDisp:
000181BC 6000                       		bra.s	Obj3D_Display
000181BE                            ; ===========================================================================
000181BE                            
000181BE                            Obj3D_FlameDel:
000181BE 4EF9 0000 DC36             		jmp	DeleteObject
000181C4                            ; ===========================================================================
000181C4                            
000181C4                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
000181C4 2268 0034                  		movea.l	$34(a0),a1
000181C8 3169 0008 0008             		move.w	8(a1),8(a0)
000181CE 3169 000C 000C             		move.w	$C(a1),$C(a0)
000181D4 1169 0022 0022             		move.b	$22(a1),$22(a0)
000181DA 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000181E0 4EB9 0000 ACC4             		jsr	AnimateSprite
000181E6 1028 0022                  		move.b	$22(a0),d0
000181EA 0200 0003                  		andi.b	#3,d0
000181EE 0228 00FC 0001             		andi.b	#$FC,1(a0)
000181F4 8128 0001                  		or.b	d0,1(a0)
000181F8 4EF9 0000 DBFA             		jmp	DisplaySprite
000181FE                            ; ===========================================================================
000181FE                            ; ---------------------------------------------------------------------------
000181FE                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
000181FE                            ; ---------------------------------------------------------------------------
000181FE                            
000181FE                            Obj48:					; XREF: Obj_Index
000181FE 7000                       		moveq	#0,d0
00018200 1028 0024                  		move.b	$24(a0),d0
00018204 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00018208 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
0001820C                            ; ===========================================================================
0001820C 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
0001820E 0000                       		dc.w Obj48_Base-Obj48_Index
00018210 0000                       		dc.w Obj48_Display2-Obj48_Index
00018212 0000                       		dc.w loc_17C68-Obj48_Index
00018214 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00018216                            ; ===========================================================================
00018216                            
00018216                            Obj48_Main:				; XREF: Obj48_Index
00018216 5428 0024                  		addq.b	#2,$24(a0)
0001821A 317C 4080 0026             		move.w	#$4080,$26(a0)
00018220 317C FE00 003E             		move.w	#-$200,$3E(a0)
00018226 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
0001822E 317C 046C 0002             		move.w	#$46C,2(a0)
00018234 45E8 0028                  		lea	$28(a0),a2
00018238 14FC 0000                  		move.b	#0,(a2)+
0001823C 7205                       		moveq	#5,d1
0001823E 2248                       		movea.l	a0,a1
00018240 6000                       		bra.s	loc_17B60
00018242                            ; ===========================================================================
00018242                            
00018242                            Obj48_MakeLinks:
00018242 4EB9 0000 E096             		jsr	SingleObjLoad2
00018248 6600                       		bne.s	Obj48_MakeBall
0001824A 3368 0008 0008             		move.w	8(a0),8(a1)
00018250 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018256 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
0001825A 137C 0006 0024             		move.b	#6,$24(a1)
00018260 237C 0000 8118 0004        		move.l	#Map_obj15,4(a1)
00018268 337C 0380 0002             		move.w	#$380,2(a1)
0001826E 137C 0001 001A             		move.b	#1,$1A(a1)
00018274 5228 0028                  		addq.b	#1,$28(a0)
00018278                            
00018278                            loc_17B60:				; XREF: Obj48_Main
00018278 3A09                       		move.w	a1,d5
0001827A 0445 D000                  		subi.w	#$D000,d5
0001827E EC4D                       		lsr.w	#6,d5
00018280 0245 007F                  		andi.w	#$7F,d5
00018284 14C5                       		move.b	d5,(a2)+
00018286 137C 0004 0001             		move.b	#4,1(a1)
0001828C 137C 0008 0019             		move.b	#8,$19(a1)
00018292 137C 0006 0018             		move.b	#6,$18(a1)
00018298 2368 0034 0034             		move.l	$34(a0),$34(a1)
0001829E 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
000182A2                            
000182A2                            Obj48_MakeBall:
000182A2 137C 0008 0024             		move.b	#8,$24(a1)
000182A8 237C 0000 8676 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
000182B0 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
000182B6 137C 0001 001A             		move.b	#1,$1A(a1)
000182BC 137C 0005 0018             		move.b	#5,$18(a1)
000182C2 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
000182C8 4E75                       		rts	
000182CA                            ; ===========================================================================
000182CA                            
000182CA 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
000182D0                            
000182D0                            ; ===========================================================================
000182D0                            
000182D0                            Obj48_Base:				; XREF: Obj48_Index
000182D0 47F9 0001 82CA             		lea	(Obj48_PosData).l,a3
000182D6 45E8 0028                  		lea	$28(a0),a2
000182DA 7C00                       		moveq	#0,d6
000182DC 1C1A                       		move.b	(a2)+,d6
000182DE                            
000182DE                            loc_17BC6:
000182DE 7800                       		moveq	#0,d4
000182E0 181A                       		move.b	(a2)+,d4
000182E2 ED4C                       		lsl.w	#6,d4
000182E4 0684 00FF D000             		addi.l	#$FFD000,d4
000182EA 2244                       		movea.l	d4,a1
000182EC 101B                       		move.b	(a3)+,d0
000182EE B029 003C                  		cmp.b	$3C(a1),d0
000182F2 6700                       		beq.s	loc_17BE0
000182F4 5229 003C                  		addq.b	#1,$3C(a1)
000182F8                            
000182F8                            loc_17BE0:
000182F8 51CE FFE4                  		dbf	d6,loc_17BC6
000182FC                            
000182FC B029 003C                  		cmp.b	$3C(a1),d0
00018300 6600                       		bne.s	loc_17BFA
00018302 2268 0034                  		movea.l	$34(a0),a1
00018306 0C29 0006 0025             		cmpi.b	#6,$25(a1)
0001830C 6600                       		bne.s	loc_17BFA
0001830E 5428 0024                  		addq.b	#2,$24(a0)
00018312                            
00018312                            loc_17BFA:
00018312 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00018318 6700                       		beq.s	Obj48_Display
0001831A 5268 0032                  		addq.w	#1,$32(a0)
0001831E                            
0001831E                            Obj48_Display:
0001831E 6100 0000                  		bsr.w	sub_17C2A
00018322 1028 0026                  		move.b	$26(a0),d0
00018326 4EB9 0000 808A             		jsr	(Obj15_Move2).l
0001832C 4EF9 0000 DBFA             		jmp	DisplaySprite
00018332                            ; ===========================================================================
00018332                            
00018332                            Obj48_Display2:				; XREF: Obj48_Index
00018332 6100 0000                  		bsr.w	sub_17C2A
00018336 4EB9 0000 804A             		jsr	(Obj48_Move).l
0001833C 4EF9 0000 DBFA             		jmp	DisplaySprite
00018342                            
00018342                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018342                            
00018342                            
00018342                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00018342 2268 0034                  		movea.l	$34(a0),a1
00018346 0628 0020 001B             		addi.b	#$20,$1B(a0)
0001834C 6400                       		bcc.s	loc_17C3C
0001834E 0868 0000 001A             		bchg	#0,$1A(a0)
00018354                            
00018354                            loc_17C3C:
00018354 3169 0008 003A             		move.w	8(a1),$3A(a0)
0001835A 3029 000C                  		move.w	$C(a1),d0
0001835E D068 0032                  		add.w	$32(a0),d0
00018362 3140 0038                  		move.w	d0,$38(a0)
00018366 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001836C 4A29 0022                  		tst.b	$22(a1)
00018370 6A00                       		bpl.s	locret_17C66
00018372 10BC 003F                  		move.b	#$3F,0(a0)
00018376 117C 0000 0024             		move.b	#0,$24(a0)
0001837C                            
0001837C                            locret_17C66:
0001837C 4E75                       		rts	
0001837E                            ; End of function sub_17C2A
0001837E                            
0001837E                            ; ===========================================================================
0001837E                            
0001837E                            loc_17C68:				; XREF: Obj48_Index
0001837E 2268 0034                  		movea.l	$34(a0),a1
00018382 4A29 0022                  		tst.b	$22(a1)
00018386 6A00                       		bpl.s	Obj48_Display3
00018388 10BC 003F                  		move.b	#$3F,0(a0)
0001838C 117C 0000 0024             		move.b	#0,$24(a0)
00018392                            
00018392                            Obj48_Display3:
00018392 4EF9 0000 DBFA             		jmp	DisplaySprite
00018398                            ; ===========================================================================
00018398                            
00018398                            Obj48_ChkVanish:			; XREF: Obj48_Index
00018398 7000                       		moveq	#0,d0
0001839A 4A28 001A                  		tst.b	$1A(a0)
0001839E 6600                       		bne.s	Obj48_Vanish
000183A0 5200                       		addq.b	#1,d0
000183A2                            
000183A2                            Obj48_Vanish:
000183A2 1140 001A                  		move.b	d0,$1A(a0)
000183A6 2268 0034                  		movea.l	$34(a0),a1
000183AA 4A29 0022                  		tst.b	$22(a1)
000183AE 6A00                       		bpl.s	Obj48_Display4
000183B0 117C 0000 0020             		move.b	#0,$20(a0)
000183B6 6100 FB94                  		bsr.w	BossDefeated
000183BA 5328 003C                  		subq.b	#1,$3C(a0)
000183BE 6A00                       		bpl.s	Obj48_Display4
000183C0 10BC 003F                  		move.b	#$3F,(a0)
000183C4 117C 0000 0024             		move.b	#0,$24(a0)
000183CA                            
000183CA                            Obj48_Display4:
000183CA 4EF9 0000 DBFA             		jmp	DisplaySprite
000183D0                            ; ===========================================================================
000183D0                            Ani_Eggman:
000183D0                            	include "_anim\Eggman.asm"
000183D0                            ; ---------------------------------------------------------------------------
000183D0                            ; Animation script - Eggman (bosses)
000183D0                            ; ---------------------------------------------------------------------------
000183D0 0000                       		dc.w byte_17CD4-Ani_Eggman
000183D2 0000                       		dc.w byte_17CD8-Ani_Eggman
000183D4 0000                       		dc.w byte_17CDC-Ani_Eggman
000183D6 0000                       		dc.w byte_17CE0-Ani_Eggman
000183D8 0000                       		dc.w byte_17CE4-Ani_Eggman
000183DA 0000                       		dc.w byte_17CE8-Ani_Eggman
000183DC 0000                       		dc.w byte_17CEC-Ani_Eggman
000183DE 0000                       		dc.w byte_17CF0-Ani_Eggman
000183E0 0000                       		dc.w byte_17CF4-Ani_Eggman
000183E2 0000                       		dc.w byte_17CF8-Ani_Eggman
000183E4 0000                       		dc.w byte_17CFC-Ani_Eggman
000183E6 0000                       		dc.w byte_17D00-Ani_Eggman
000183E8 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
000183EC 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
000183F0 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
000183F4 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
000183F8 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
000183FC 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00018400 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00018404 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00018408 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
0001840C 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00018410 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00018414 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00018420                            		even
00018420                            		even
00018420                            
00018420                            ; ---------------------------------------------------------------------------
00018420                            ; Sprite mappings - Eggman (boss levels)
00018420                            ; ---------------------------------------------------------------------------
00018420                            Map_Eggman:
00018420                            	include "_maps\Eggman.asm"
00018420                            Map_dc7e:
00018420 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
00018422 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
00018424 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
00018426 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
00018428 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
0001842A 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
0001842C 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
0001842E 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
00018430 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
00018432 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
00018434 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
00018436 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
00018438 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
0001843A 06                         Map_dc7e_1A: 	dc.b $6
0001843B EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
00018440 EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
00018445 FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
0001844A FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
0001844F 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
00018454 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
00018459 02                         Map_dc7e_39: 	dc.b $2
0001845A E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
0001845F EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
00018464 02                         Map_dc7e_44: 	dc.b $2
00018465 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
0001846A EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
0001846F 03                         Map_dc7e_4F: 	dc.b $3
00018470 E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
00018475 EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
0001847A EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
0001847F 03                         Map_dc7e_5F: 	dc.b $3
00018480 E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
00018485 EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
0001848A EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
0001848F 03                         Map_dc7e_6F: 	dc.b $3
00018490 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
00018495 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
0001849A EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
0001849F 03                         Map_dc7e_7F: 	dc.b $3
000184A0 E404 0064 04               	dc.b $E4, $4, $0, $64, $4
000184A5 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000184AA EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
000184AF 04                         Map_dc7e_8F: 	dc.b $4
000184B0 E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
000184B5 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000184BA EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000184BF EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
000184C4 01                         Map_dc7e_A4: 	dc.b $1
000184C5 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
000184CA 01                         Map_dc7e_AA: 	dc.b $1
000184CB 0405 0031 22               	dc.b $4, $5, $0, $31, $22
000184D0 00                         Map_dc7e_B0: 	dc.b $0
000184D1 02                         Map_dc7e_B1: 	dc.b $2
000184D2 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
000184D7 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
000184DC 02                         Map_dc7e_BC: 	dc.b $2
000184DD F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
000184E2 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
000184E8 00                         	even
000184E8 00                         	even
000184E8                            
000184E8                            ; ---------------------------------------------------------------------------
000184E8                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
000184E8                            ; ---------------------------------------------------------------------------
000184E8                            Map_BossItems:
000184E8                            	include "_maps\Boss items.asm"
000184E8                            ; ---------------------------------------------------------------------------
000184E8                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
000184E8                            ; ---------------------------------------------------------------------------
000184E8 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
000184EC 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
000184F0 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
000184F4 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
000184F8 01                         byte_17DE4:	dc.b 1
000184F9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000184FE 02                         byte_17DEA:	dc.b 2
000184FF FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00018504 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018509 00                         		dc.b 0
0001850A 01                         byte_17DF6:	dc.b 1
0001850B FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00018510 01                         byte_17DFC:	dc.b 1
00018511 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00018516 01                         byte_17E02:	dc.b 1
00018517 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
0001851C 04                         byte_17E08:	dc.b 4
0001851D F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00018522 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00018527 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0001852C 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
00018531 00                         		dc.b 0
00018532 02                         byte_17E1E:	dc.b 2
00018533 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00018538 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
0001853D 00                         		dc.b 0
0001853E 02                         byte_17E2A:	dc.b 2
0001853F 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00018544 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
0001854A 00                         		even
0001854A 00                         		even
0001854A                            
0001854A                            ; ===========================================================================
0001854A                            ; ---------------------------------------------------------------------------
0001854A                            ; Object 77 - Eggman (LZ)
0001854A                            ; ---------------------------------------------------------------------------
0001854A                            
0001854A                            Obj77:					; XREF: Obj_Index
0001854A 7000                       		moveq	#0,d0
0001854C 1028 0024                  		move.b	$24(a0),d0
00018550 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
00018554 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
00018558                            ; ===========================================================================
00018558 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
0001855A 0000                       		dc.w Obj77_ShipMain-Obj77_Index
0001855C 0000                       		dc.w Obj77_FaceMain-Obj77_Index
0001855E 0000                       		dc.w Obj77_FlameMain-Obj77_Index
00018560                            
00018560 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
00018562 0401                       		dc.b 4,	1
00018564 0607                       		dc.b 6,	7
00018566                            ; ===========================================================================
00018566                            
00018566                            Obj77_Main:				; XREF: Obj77_Index
00018566 317C 1E10 0008             		move.w	#$1E10,8(a0)
0001856C 317C 05C0 000C             		move.w	#$5C0,$C(a0)
00018572 3168 0008 0030             		move.w	8(a0),$30(a0)
00018578 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001857E 117C 000F 0020             		move.b	#$F,$20(a0)
00018584 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001858A 117C 0004 0018             		move.b	#4,$18(a0)
00018590 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
00018594 2248                       		movea.l	a0,a1
00018596 7202                       		moveq	#2,d1
00018598 6000                       		bra.s	Obj77_LoadBoss
0001859A                            ; ===========================================================================
0001859A                            
0001859A                            Obj77_Loop:
0001859A 4EB9 0000 E096             		jsr	SingleObjLoad2
000185A0 6600                       		bne.s	Obj77_ShipMain
000185A2 12BC 0077                  		move.b	#$77,0(a1)
000185A6 3368 0008 0008             		move.w	8(a0),8(a1)
000185AC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000185B2                            
000185B2                            Obj77_LoadBoss:				; XREF: Obj77_Main
000185B2 08A8 0000 0022             		bclr	#0,$22(a0)
000185B8 4229 0025                  		clr.b	$25(a1)
000185BC 135A 0024                  		move.b	(a2)+,$24(a1)
000185C0 135A 001C                  		move.b	(a2)+,$1C(a1)
000185C4 1368 0018 0018             		move.b	$18(a0),$18(a1)
000185CA 237C 0001 8420 0004        		move.l	#Map_Eggman,4(a1)
000185D2 337C 0400 0002             		move.w	#$400,2(a1)
000185D8 137C 0004 0001             		move.b	#4,1(a1)
000185DE 137C 0020 0019             		move.b	#$20,$19(a1)
000185E4 2348 0034                  		move.l	a0,$34(a1)
000185E8 51C9 FFB0                  		dbf	d1,Obj77_Loop
000185EC                            
000185EC                            Obj77_ShipMain:
000185EC 43F8 D000                  		lea	($FFFFD000).w,a1
000185F0 7000                       		moveq	#0,d0
000185F2 1028 0025                  		move.b	$25(a0),d0
000185F6 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
000185FA 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
000185FE 43F9 0001 83D0             		lea	(Ani_Eggman).l,a1
00018604 4EB9 0000 ACC4             		jsr	AnimateSprite
0001860A 7003                       		moveq	#3,d0
0001860C C028 0022                  		and.b	$22(a0),d0
00018610 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018616 8128 0001                  		or.b	d0,1(a0)
0001861A 4EF9 0000 DBFA             		jmp	DisplaySprite
00018620                            ; ===========================================================================
00018620 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
00018624 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
00018628 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
0001862C 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
00018630                            ; ===========================================================================
00018630                            
00018630                            loc_17F1E:				; XREF: Obj77_ShipIndex
00018630 3029 0008                  		move.w	8(a1),d0
00018634 0C40 1DA0                  		cmpi.w	#$1DA0,d0
00018638 6500                       		bcs.s	loc_17F38
0001863A 317C FE80 0012             		move.w	#-$180,$12(a0)
00018640 317C 0060 0010             		move.w	#$60,$10(a0)
00018646 5428 0025                  		addq.b	#2,$25(a0)
0001864A                            
0001864A                            loc_17F38:
0001864A 6100 F942                  		bsr.w	BossMove
0001864E 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018654 3168 0030 0008             		move.w	$30(a0),8(a0)
0001865A                            
0001865A                            loc_17F48:
0001865A 4A28 003D                  		tst.b	$3D(a0)
0001865E 6600                       		bne.s	loc_17F8E
00018660 4A28 0022                  		tst.b	$22(a0)
00018664 6B00                       		bmi.s	loc_17F92
00018666 4A28 0020                  		tst.b	$20(a0)
0001866A 6600                       		bne.s	locret_17F8C
0001866C 4A28 003E                  		tst.b	$3E(a0)
00018670 6600                       		bne.s	loc_17F70
00018672 117C 0020 003E             		move.b	#$20,$3E(a0)
00018678 303C 00AC                  		move.w	#$AC,d0
0001867C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l
00018682                            
00018682                            loc_17F70:
00018682 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018686 7000                       		moveq	#0,d0
00018688 4A51                       		tst.w	(a1)
0001868A 6600                       		bne.s	loc_17F7E
0001868C 303C 0EEE                  		move.w	#$EEE,d0
00018690                            
00018690                            loc_17F7E:
00018690 3280                       		move.w	d0,(a1)
00018692 5328 003E                  		subq.b	#1,$3E(a0)
00018696 6600                       		bne.s	locret_17F8C
00018698 117C 000F 0020             		move.b	#$F,$20(a0)
0001869E                            
0001869E                            locret_17F8C:
0001869E 4E75                       		rts	
000186A0                            ; ===========================================================================
000186A0                            
000186A0                            loc_17F8E:				; XREF: loc_17F48
000186A0 6000 F8AA                  		bra.w	BossDefeated
000186A4                            ; ===========================================================================
000186A4                            
000186A4                            loc_17F92:				; XREF: loc_17F48
000186A4 7064                       		moveq	#100,d0
000186A6 6100 0000                  		bsr.w	AddPoints
000186AA 117C 00FF 003D             		move.b	#-1,$3D(a0)
000186B0 4E75                       		rts	
000186B2                            ; ===========================================================================
000186B2                            
000186B2                            loc_17FA0:				; XREF: Obj77_ShipIndex
000186B2 70FE                       		moveq	#-2,d0
000186B4 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
000186BA 6500                       		bcs.s	loc_17FB6
000186BC 317C 1E48 0030             		move.w	#$1E48,$30(a0)
000186C2 4268 0010                  		clr.w	$10(a0)
000186C6 5240                       		addq.w	#1,d0
000186C8                            
000186C8                            loc_17FB6:
000186C8 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
000186CE 6E00                       		bgt.s	loc_17FCA
000186D0 317C 0500 0038             		move.w	#$500,$38(a0)
000186D6 4268 0012                  		clr.w	$12(a0)
000186DA 5240                       		addq.w	#1,d0
000186DC                            
000186DC                            loc_17FCA:
000186DC 6600                       		bne.s	loc_17FDC
000186DE 317C 0140 0010             		move.w	#$140,$10(a0)
000186E4 317C FE00 0012             		move.w	#-$200,$12(a0)
000186EA 5428 0025                  		addq.b	#2,$25(a0)
000186EE                            
000186EE                            loc_17FDC:
000186EE 6000 FF5A                  		bra.w	loc_17F38
000186F2                            ; ===========================================================================
000186F2                            
000186F2                            loc_17FE0:				; XREF: Obj77_ShipIndex
000186F2 70FE                       		moveq	#-2,d0
000186F4 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
000186FA 6500                       		bcs.s	loc_17FF6
000186FC 317C 1E70 0030             		move.w	#$1E70,$30(a0)
00018702 4268 0010                  		clr.w	$10(a0)
00018706 5240                       		addq.w	#1,d0
00018708                            
00018708                            loc_17FF6:
00018708 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
0001870E 6E00                       		bgt.s	loc_1800A
00018710 317C 04C0 0038             		move.w	#$4C0,$38(a0)
00018716 4268 0012                  		clr.w	$12(a0)
0001871A 5240                       		addq.w	#1,d0
0001871C                            
0001871C                            loc_1800A:
0001871C 6600                       		bne.s	loc_1801A
0001871E 317C FE80 0012             		move.w	#-$180,$12(a0)
00018724 5428 0025                  		addq.b	#2,$25(a0)
00018728 4228 003F                  		clr.b	$3F(a0)
0001872C                            
0001872C                            loc_1801A:
0001872C 6000 FF1C                  		bra.w	loc_17F38
00018730                            ; ===========================================================================
00018730                            
00018730                            loc_1801E:				; XREF: Obj77_ShipIndex
00018730 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
00018736 6E00                       		bgt.s	loc_1804E
00018738 317C 0100 0038             		move.w	#$100,$38(a0)
0001873E 317C 0140 0010             		move.w	#$140,$10(a0)
00018744 317C FF80 0012             		move.w	#-$80,$12(a0)
0001874A 4A28 003D                  		tst.b	$3D(a0)
0001874E 6700                       		beq.s	loc_18046
00018750 E1E8 0010                  		asl	$10(a0)
00018754 E1E8 0012                  		asl	$12(a0)
00018758                            
00018758                            loc_18046:
00018758 5428 0025                  		addq.b	#2,$25(a0)
0001875C 6000 FEEC                  		bra.w	loc_17F38
00018760                            ; ===========================================================================
00018760                            
00018760                            loc_1804E:
00018760 08E8 0000 0022             		bset	#0,$22(a0)
00018766 5428 003F                  		addq.b	#2,$3F(a0)
0001876A 1028 003F                  		move.b	$3F(a0),d0
0001876E 4EB9 0000 2C60             		jsr	(CalcSine).l
00018774 4A41                       		tst.w	d1
00018776 6A00                       		bpl.s	loc_1806C
00018778 08A8 0000 0022             		bclr	#0,$22(a0)
0001877E                            
0001877E                            loc_1806C:
0001877E E840                       		asr.w	#4,d0
00018780 4840                       		swap	d0
00018782 4240                       		clr.w	d0
00018784 D0A8 0030                  		add.l	$30(a0),d0
00018788 4840                       		swap	d0
0001878A 3140 0008                  		move.w	d0,8(a0)
0001878E 3028 0012                  		move.w	$12(a0),d0
00018792 3238 D00C                  		move.w	($FFFFD00C).w,d1
00018796 9268 000C                  		sub.w	$C(a0),d1
0001879A 6500                       		bcs.s	loc_180A2
0001879C 0441 0048                  		subi.w	#$48,d1
000187A0 6500                       		bcs.s	loc_180A2
000187A2 E240                       		asr.w	#1,d0
000187A4 0441 0028                  		subi.w	#$28,d1
000187A8 6500                       		bcs.s	loc_180A2
000187AA E240                       		asr.w	#1,d0
000187AC 0441 0028                  		subi.w	#$28,d1
000187B0 6500                       		bcs.s	loc_180A2
000187B2 7000                       		moveq	#0,d0
000187B4                            
000187B4                            loc_180A2:
000187B4 48C0                       		ext.l	d0
000187B6 E180                       		asl.l	#8,d0
000187B8 4A28 003D                  		tst.b	$3D(a0)
000187BC 6700                       		beq.s	loc_180AE
000187BE D080                       		add.l	d0,d0
000187C0                            
000187C0                            loc_180AE:
000187C0 D1A8 0038                  		add.l	d0,$38(a0)
000187C4 3168 0038 000C             		move.w	$38(a0),$C(a0)
000187CA 6000 FE8E                  		bra.w	loc_17F48
000187CE                            ; ===========================================================================
000187CE                            
000187CE                            loc_180BC:				; XREF: Obj77_ShipIndex
000187CE 70FE                       		moveq	#-2,d0
000187D0 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
000187D6 6500                       		bcs.s	loc_180D2
000187D8 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
000187DE 4268 0010                  		clr.w	$10(a0)
000187E2 5240                       		addq.w	#1,d0
000187E4                            
000187E4                            loc_180D2:
000187E4 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
000187EA 6E00                       		bgt.s	loc_180E6
000187EC 317C 00C0 0038             		move.w	#$C0,$38(a0)
000187F2 4268 0012                  		clr.w	$12(a0)
000187F6 5240                       		addq.w	#1,d0
000187F8                            
000187F8                            loc_180E6:
000187F8 6600                       		bne.s	loc_180F2
000187FA 5428 0025                  		addq.b	#2,$25(a0)
000187FE 08A8 0000 0022             		bclr	#0,$22(a0)
00018804                            
00018804                            loc_180F2:
00018804 6000 FE44                  		bra.w	loc_17F38
00018808                            ; ===========================================================================
00018808                            
00018808                            loc_180F6:				; XREF: Obj77_ShipIndex
00018808 4A28 003D                  		tst.b	$3D(a0)
0001880C 6600                       		bne.s	loc_18112
0001880E 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
00018814 6D00                       		blt.s	loc_18126
00018816 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
0001881C 6E00                       		bgt.s	loc_18126
0001881E 117C 0032 003C             		move.b	#$32,$3C(a0)
00018824                            
00018824                            loc_18112:
00018824 303C 0082                  		move.w	#$82,d0
00018828 4EB9 0000 15B6             		jsr	(PlaySound).l	; play LZ music
0001882E 08E8 0000 0022             		bset	#0,$22(a0)
00018834 5428 0025                  		addq.b	#2,$25(a0)
00018838                            
00018838                            loc_18126:
00018838 6000 FE10                  		bra.w	loc_17F38
0001883C                            ; ===========================================================================
0001883C                            
0001883C                            loc_1812A:				; XREF: Obj77_ShipIndex
0001883C 4A28 003D                  		tst.b	$3D(a0)
00018840 6600                       		bne.s	loc_18136
00018842 5328 003C                  		subq.b	#1,$3C(a0)
00018846 6600                       		bne.s	loc_1814E
00018848                            
00018848                            loc_18136:
00018848 4228 003C                  		clr.b	$3C(a0)
0001884C 317C 0400 0010             		move.w	#$400,$10(a0)
00018852 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018858 4228 003D                  		clr.b	$3D(a0)
0001885C 5428 0025                  		addq.b	#2,$25(a0)
00018860                            
00018860                            loc_1814E:
00018860 6000 FDE8                  		bra.w	loc_17F38
00018864                            ; ===========================================================================
00018864                            
00018864                            loc_18152:				; XREF: Obj77_ShipIndex
00018864 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
0001886A 6400                       		bcc.s	loc_18160
0001886C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018870 6000                       		bra.s	loc_18166
00018872                            ; ===========================================================================
00018872                            
00018872                            loc_18160:
00018872 4A28 0001                  		tst.b	1(a0)
00018876 6A00                       		bpl.s	Obj77_ShipDel
00018878                            
00018878                            loc_18166:
00018878 6000 FDD0                  		bra.w	loc_17F38
0001887C                            ; ===========================================================================
0001887C                            
0001887C                            Obj77_ShipDel:
0001887C 4EF9 0000 DC36             		jmp	DeleteObject
00018882                            ; ===========================================================================
00018882                            
00018882                            Obj77_FaceMain:				; XREF: Obj77_Index
00018882 2268 0034                  		movea.l	$34(a0),a1
00018886 1011                       		move.b	(a1),d0
00018888 B010                       		cmp.b	(a0),d0
0001888A 6600                       		bne.s	Obj77_FaceDel
0001888C 7000                       		moveq	#0,d0
0001888E 1029 0025                  		move.b	$25(a1),d0
00018892 7201                       		moveq	#1,d1
00018894 4A28 003D                  		tst.b	$3D(a0)
00018898 6700                       		beq.s	loc_1818C
0001889A 720A                       		moveq	#$A,d1
0001889C 6000                       		bra.s	loc_181A0
0001889E                            ; ===========================================================================
0001889E                            
0001889E                            loc_1818C:
0001889E 4A29 0020                  		tst.b	$20(a1)
000188A2 6600                       		bne.s	loc_18196
000188A4 7205                       		moveq	#5,d1
000188A6 6000                       		bra.s	loc_181A0
000188A8                            ; ===========================================================================
000188A8                            
000188A8                            loc_18196:
000188A8 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000188AE 6500                       		bcs.s	loc_181A0
000188B0 7204                       		moveq	#4,d1
000188B2                            
000188B2                            loc_181A0:
000188B2 1141 001C                  		move.b	d1,$1C(a0)
000188B6 0C00 000E                  		cmpi.b	#$E,d0
000188BA 6600                       		bne.s	loc_181B6
000188BC 117C 0006 001C             		move.b	#6,$1C(a0)
000188C2 4A28 0001                  		tst.b	1(a0)
000188C6 6A00                       		bpl.s	Obj77_FaceDel
000188C8                            
000188C8                            loc_181B6:
000188C8 6000                       		bra.s	Obj77_Display
000188CA                            ; ===========================================================================
000188CA                            
000188CA                            Obj77_FaceDel:
000188CA 4EF9 0000 DC36             		jmp	DeleteObject
000188D0                            ; ===========================================================================
000188D0                            
000188D0                            Obj77_FlameMain:			; XREF: Obj77_Index
000188D0 117C 0007 001C             		move.b	#7,$1C(a0)
000188D6 2268 0034                  		movea.l	$34(a0),a1
000188DA 1011                       		move.b	(a1),d0
000188DC B010                       		cmp.b	(a0),d0
000188DE 6600                       		bne.s	Obj77_FlameDel
000188E0 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
000188E6 6600                       		bne.s	loc_181F0
000188E8 117C 000B 001C             		move.b	#$B,$1C(a0)
000188EE 4A28 0001                  		tst.b	1(a0)
000188F2 6A00                       		bpl.s	Obj77_FlameDel
000188F4 6000                       		bra.s	loc_181F0
000188F6                            ; ===========================================================================
000188F6 4A69 0010                  		tst.w	$10(a1)
000188FA 6700                       		beq.s	loc_181F0
000188FC 117C 0008 001C             		move.b	#8,$1C(a0)
00018902                            
00018902                            loc_181F0:
00018902 6000                       		bra.s	Obj77_Display
00018904                            ; ===========================================================================
00018904                            
00018904                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
00018904 4EF9 0000 DC36             		jmp	DeleteObject
0001890A                            ; ===========================================================================
0001890A                            
0001890A                            Obj77_Display:
0001890A 43F9 0001 83D0             		lea	(Ani_Eggman).l,a1
00018910 4EB9 0000 ACC4             		jsr	AnimateSprite
00018916 2268 0034                  		movea.l	$34(a0),a1
0001891A 3169 0008 0008             		move.w	8(a1),8(a0)
00018920 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018926 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001892C 7003                       		moveq	#3,d0
0001892E C028 0022                  		and.b	$22(a0),d0
00018932 0228 00FC 0001             		andi.b	#-4,1(a0)
00018938 8128 0001                  		or.b	d0,1(a0)
0001893C 4EF9 0000 DBFA             		jmp	DisplaySprite
00018942                            ; ===========================================================================
00018942                            ; ---------------------------------------------------------------------------
00018942                            ; Object 73 - Eggman (MZ)
00018942                            ; ---------------------------------------------------------------------------
00018942                            
00018942                            Obj73:					; XREF: Obj_Index
00018942 7000                       		moveq	#0,d0
00018944 1028 0024                  		move.b	$24(a0),d0
00018948 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001894C 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00018950                            ; ===========================================================================
00018950 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00018952 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00018954 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018956 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018958 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001895A                            
0001895A 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001895D 0401 04                    		dc.b 4,	1, 4
00018960 0607 04                    		dc.b 6,	7, 4
00018963 0800 03                    		dc.b 8,	0, 3
00018966                            ; ===========================================================================
00018966                            
00018966                            Obj73_Main:				; XREF: Obj73_Index
00018966 3168 0008 0030             		move.w	8(a0),$30(a0)
0001896C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018972 117C 000F 0020             		move.b	#$F,$20(a0)
00018978 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001897E 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00018982 2248                       		movea.l	a0,a1
00018984 7203                       		moveq	#3,d1
00018986 6000                       		bra.s	Obj73_LoadBoss
00018988                            ; ===========================================================================
00018988                            
00018988                            Obj73_Loop:
00018988 4EB9 0000 E096             		jsr	SingleObjLoad2
0001898E 6600                       		bne.s	Obj73_ShipMain
00018990 12BC 0073                  		move.b	#$73,0(a1)
00018994 3368 0008 0008             		move.w	8(a0),8(a1)
0001899A 3368 000C 000C             		move.w	$C(a0),$C(a1)
000189A0                            
000189A0                            Obj73_LoadBoss:				; XREF: Obj73_Main
000189A0 08A8 0000 0022             		bclr	#0,$22(a0)
000189A6 4229 0025                  		clr.b	$25(a1)
000189AA 135A 0024                  		move.b	(a2)+,$24(a1)
000189AE 135A 001C                  		move.b	(a2)+,$1C(a1)
000189B2 135A 0018                  		move.b	(a2)+,$18(a1)
000189B6 237C 0001 8420 0004        		move.l	#Map_Eggman,4(a1)
000189BE 337C 0400 0002             		move.w	#$400,2(a1)
000189C4 137C 0004 0001             		move.b	#4,1(a1)
000189CA 137C 0020 0019             		move.b	#$20,$19(a1)
000189D0 2348 0034                  		move.l	a0,$34(a1)
000189D4 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
000189D8                            
000189D8                            Obj73_ShipMain:
000189D8 7000                       		moveq	#0,d0
000189DA 1028 0025                  		move.b	$25(a0),d0
000189DE 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
000189E2 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
000189E6 43F9 0001 83D0             		lea	(Ani_Eggman).l,a1
000189EC 4EB9 0000 ACC4             		jsr	AnimateSprite
000189F2 7003                       		moveq	#3,d0
000189F4 C028 0022                  		and.b	$22(a0),d0
000189F8 0228 00FC 0001             		andi.b	#$FC,1(a0)
000189FE 8128 0001                  		or.b	d0,1(a0)
00018A02 4EF9 0000 DBFA             		jmp	DisplaySprite
00018A08                            ; ===========================================================================
00018A08 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00018A0A 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00018A0C 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00018A0E 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00018A10 0000                       		dc.w loc_18582-Obj73_ShipIndex
00018A12                            ; ===========================================================================
00018A12                            
00018A12                            loc_18302:				; XREF: Obj73_ShipIndex
00018A12 1028 003F                  		move.b	$3F(a0),d0
00018A16 5428 003F                  		addq.b	#2,$3F(a0)
00018A1A 4EB9 0000 2C60             		jsr	(CalcSine).l
00018A20 E440                       		asr.w	#2,d0
00018A22 3140 0012                  		move.w	d0,$12(a0)
00018A26 317C FF00 0010             		move.w	#-$100,$10(a0)
00018A2C 6100 F560                  		bsr.w	BossMove
00018A30 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018A36 6600                       		bne.s	loc_18334
00018A38 5428 0025                  		addq.b	#2,$25(a0)
00018A3C 4228 0028                  		clr.b	$28(a0)
00018A40 42A8 0010                  		clr.l	$10(a0)
00018A44                            
00018A44                            loc_18334:
00018A44 4EB9 0000 2C3A             		jsr	(RandomNumber).l
00018A4A 1140 0034                  		move.b	d0,$34(a0)
00018A4E                            
00018A4E                            loc_1833E:
00018A4E 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018A54 3168 0030 0008             		move.w	$30(a0),8(a0)
00018A5A 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00018A60 6400                       		bcc.s	locret_18390
00018A62 4A28 0022                  		tst.b	$22(a0)
00018A66 6B00                       		bmi.s	loc_18392
00018A68 4A28 0020                  		tst.b	$20(a0)
00018A6C 6600                       		bne.s	locret_18390
00018A6E 4A28 003E                  		tst.b	$3E(a0)
00018A72 6600                       		bne.s	loc_18374
00018A74 117C 0028 003E             		move.b	#$28,$3E(a0)
00018A7A 303C 00AC                  		move.w	#$AC,d0
00018A7E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018A84                            
00018A84                            loc_18374:
00018A84 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018A88 7000                       		moveq	#0,d0
00018A8A 4A51                       		tst.w	(a1)
00018A8C 6600                       		bne.s	loc_18382
00018A8E 303C 0EEE                  		move.w	#$EEE,d0
00018A92                            
00018A92                            loc_18382:
00018A92 3280                       		move.w	d0,(a1)
00018A94 5328 003E                  		subq.b	#1,$3E(a0)
00018A98 6600                       		bne.s	locret_18390
00018A9A 117C 000F 0020             		move.b	#$F,$20(a0)
00018AA0                            
00018AA0                            locret_18390:
00018AA0 4E75                       		rts	
00018AA2                            ; ===========================================================================
00018AA2                            
00018AA2                            loc_18392:				; XREF: loc_1833E
00018AA2 7064                       		moveq	#100,d0
00018AA4 6100 0000                  		bsr.w	AddPoints
00018AA8 117C 0004 0025             		move.b	#4,$25(a0)
00018AAE 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00018AB4 4268 0010                  		clr.w	$10(a0)
00018AB8 4E75                       		rts	
00018ABA                            ; ===========================================================================
00018ABA                            
00018ABA                            loc_183AA:				; XREF: Obj73_ShipIndex
00018ABA 7000                       		moveq	#0,d0
00018ABC 1028 0028                  		move.b	$28(a0),d0
00018AC0 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00018AC4 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00018AC8 0228 0006 0028             		andi.b	#6,$28(a0)
00018ACE 6000 FF7E                  		bra.w	loc_1833E
00018AD2                            ; ===========================================================================
00018AD2 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00018AD4 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018AD6 0000                       		dc.w loc_183CA-off_183C2
00018AD8 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018ADA                            ; ===========================================================================
00018ADA                            
00018ADA                            loc_183CA:				; XREF: off_183C2
00018ADA 4A68 0010                  		tst.w	$10(a0)
00018ADE 6600                       		bne.s	loc_183FE
00018AE0 7040                       		moveq	#$40,d0
00018AE2 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018AE8 6700                       		beq.s	loc_183E6
00018AEA 6500                       		bcs.s	loc_183DE
00018AEC 4440                       		neg.w	d0
00018AEE                            
00018AEE                            loc_183DE:
00018AEE 3140 0012                  		move.w	d0,$12(a0)
00018AF2 6000 F49A                  		bra.w	BossMove
00018AF6                            ; ===========================================================================
00018AF6                            
00018AF6                            loc_183E6:
00018AF6 317C 0200 0010             		move.w	#$200,$10(a0)
00018AFC 317C 0100 0012             		move.w	#$100,$12(a0)
00018B02 0828 0000 0022             		btst	#0,$22(a0)
00018B08 6600                       		bne.s	loc_183FE
00018B0A 4468 0010                  		neg.w	$10(a0)
00018B0E                            
00018B0E                            loc_183FE:
00018B0E 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00018B14 6400                       		bcc.s	Obj73_MakeLava
00018B16 6100 F476                  		bsr.w	BossMove
00018B1A 5968 0012                  		subq.w	#4,$12(a0)
00018B1E                            
00018B1E                            Obj73_MakeLava:
00018B1E 5328 0034                  		subq.b	#1,$34(a0)
00018B22 6400                       		bcc.s	loc_1845C
00018B24 4EB9 0000 E080             		jsr	SingleObjLoad
00018B2A 6600                       		bne.s	loc_1844A
00018B2C 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00018B30 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00018B36 4EB9 0000 2C3A             		jsr	(RandomNumber).l
00018B3C 0280 0000 FFFF             		andi.l	#$FFFF,d0
00018B42 80FC 0050                  		divu.w	#$50,d0
00018B46 4840                       		swap	d0
00018B48 0640 1878                  		addi.w	#$1878,d0
00018B4C 3340 0008                  		move.w	d0,8(a1)
00018B50 EE09                       		lsr.b	#7,d1
00018B52 337C 00FF 0028             		move.w	#$FF,$28(a1)
00018B58                            
00018B58                            loc_1844A:
00018B58 4EB9 0000 2C3A             		jsr	(RandomNumber).l
00018B5E 0200 001F                  		andi.b	#$1F,d0
00018B62 0600 0040                  		addi.b	#$40,d0
00018B66 1140 0034                  		move.b	d0,$34(a0)
00018B6A                            
00018B6A                            loc_1845C:
00018B6A 0828 0000 0022             		btst	#0,$22(a0)
00018B70 6700                       		beq.s	loc_18474
00018B72 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018B78 6D00                       		blt.s	locret_1849C
00018B7A 317C 1910 0030             		move.w	#$1910,$30(a0)
00018B80 6000                       		bra.s	loc_18482
00018B82                            ; ===========================================================================
00018B82                            
00018B82                            loc_18474:
00018B82 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018B88 6E00                       		bgt.s	locret_1849C
00018B8A 317C 1830 0030             		move.w	#$1830,$30(a0)
00018B90                            
00018B90                            loc_18482:
00018B90 4268 0010                  		clr.w	$10(a0)
00018B94 317C FE80 0012             		move.w	#-$180,$12(a0)
00018B9A 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018BA0 6400                       		bcc.s	loc_18498
00018BA2 4468 0012                  		neg.w	$12(a0)
00018BA6                            
00018BA6                            loc_18498:
00018BA6 5428 0028                  		addq.b	#2,$28(a0)
00018BAA                            
00018BAA                            locret_1849C:
00018BAA 4E75                       		rts	
00018BAC                            ; ===========================================================================
00018BAC                            
00018BAC                            Obj73_MakeLava2:			; XREF: off_183C2
00018BAC 6100 F3E0                  		bsr.w	BossMove
00018BB0 3028 0038                  		move.w	$38(a0),d0
00018BB4 0440 022C                  		subi.w	#$22C,d0
00018BB8 6E00                       		bgt.s	locret_184F4
00018BBA 303C 022C                  		move.w	#$22C,d0
00018BBE 4A68 0012                  		tst.w	$12(a0)
00018BC2 6700                       		beq.s	loc_184EA
00018BC4 4268 0012                  		clr.w	$12(a0)
00018BC8 317C 0050 003C             		move.w	#$50,$3C(a0)
00018BCE 0868 0000 0022             		bchg	#0,$22(a0)
00018BD4 4EB9 0000 E080             		jsr	SingleObjLoad
00018BDA 6600                       		bne.s	loc_184EA
00018BDC 3368 0030 0008             		move.w	$30(a0),8(a1)
00018BE2 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018BE8 0669 0018 000C             		addi.w	#$18,$C(a1)
00018BEE 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00018BF2 137C 0001 0028             		move.b	#1,$28(a1)
00018BF8                            
00018BF8                            loc_184EA:
00018BF8 5368 003C                  		subq.w	#1,$3C(a0)
00018BFC 6600                       		bne.s	locret_184F4
00018BFE 5428 0028                  		addq.b	#2,$28(a0)
00018C02                            
00018C02                            locret_184F4:
00018C02 4E75                       		rts	
00018C04                            ; ===========================================================================
00018C04                            
00018C04                            loc_184F6:				; XREF: Obj73_ShipIndex
00018C04 5368 003C                  		subq.w	#1,$3C(a0)
00018C08 6B00                       		bmi.s	loc_18500
00018C0A 6000 F340                  		bra.w	BossDefeated
00018C0E                            ; ===========================================================================
00018C0E                            
00018C0E                            loc_18500:
00018C0E 08E8 0000 0022             		bset	#0,$22(a0)
00018C14 08A8 0007 0022             		bclr	#7,$22(a0)
00018C1A 4268 0010                  		clr.w	$10(a0)
00018C1E 5428 0025                  		addq.b	#2,$25(a0)
00018C22 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018C28 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018C2C 6600                       		bne.s	locret_1852A
00018C2E 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018C34 4268 0012                  		clr.w	$12(a0)
00018C38                            
00018C38                            locret_1852A:
00018C38 4E75                       		rts	
00018C3A                            ; ===========================================================================
00018C3A                            
00018C3A                            loc_1852C:				; XREF: Obj73_ShipIndex
00018C3A 5268 003C                  		addq.w	#1,$3C(a0)
00018C3E 6700                       		beq.s	loc_18544
00018C40 6A00                       		bpl.s	loc_1854E
00018C42 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00018C48 6400                       		bcc.s	loc_18544
00018C4A 0668 0018 0012             		addi.w	#$18,$12(a0)
00018C50 6000                       		bra.s	loc_1857A
00018C52                            ; ===========================================================================
00018C52                            
00018C52                            loc_18544:
00018C52 4268 0012                  		clr.w	$12(a0)
00018C56 4268 003C                  		clr.w	$3C(a0)
00018C5A 6000                       		bra.s	loc_1857A
00018C5C                            ; ===========================================================================
00018C5C                            
00018C5C                            loc_1854E:
00018C5C 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018C62 6500                       		bcs.s	loc_18566
00018C64 6700                       		beq.s	loc_1856C
00018C66 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018C6C 6500                       		bcs.s	loc_1857A
00018C6E 5428 0025                  		addq.b	#2,$25(a0)
00018C72 6000                       		bra.s	loc_1857A
00018C74                            ; ===========================================================================
00018C74                            
00018C74                            loc_18566:
00018C74 5168 0012                  		subq.w	#8,$12(a0)
00018C78 6000                       		bra.s	loc_1857A
00018C7A                            ; ===========================================================================
00018C7A                            
00018C7A                            loc_1856C:
00018C7A 4268 0012                  		clr.w	$12(a0)
00018C7E 303C 0083                  		move.w	#$83,d0
00018C82 4EB9 0000 15B6             		jsr	(PlaySound).l	; play MZ music
00018C88                            
00018C88                            loc_1857A:
00018C88 6100 F304                  		bsr.w	BossMove
00018C8C 6000 FDC0                  		bra.w	loc_1833E
00018C90                            ; ===========================================================================
00018C90                            
00018C90                            loc_18582:				; XREF: Obj73_ShipIndex
00018C90 317C 0500 0010             		move.w	#$500,$10(a0)
00018C96 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018C9C 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00018CA2 6400                       		bcc.s	loc_1859C
00018CA4 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018CA8 6000                       		bra.s	loc_185A2
00018CAA                            ; ===========================================================================
00018CAA                            
00018CAA                            loc_1859C:
00018CAA 4A28 0001                  		tst.b	1(a0)
00018CAE 6A00                       		bpl.s	Obj73_ShipDel
00018CB0                            
00018CB0                            loc_185A2:
00018CB0 6100 F2DC                  		bsr.w	BossMove
00018CB4 6000 FD98                  		bra.w	loc_1833E
00018CB8                            ; ===========================================================================
00018CB8                            
00018CB8                            Obj73_ShipDel:
00018CB8 4EF9 0000 DC36             		jmp	DeleteObject
00018CBE                            ; ===========================================================================
00018CBE                            
00018CBE                            Obj73_FaceMain:				; XREF: Obj73_Index
00018CBE 7000                       		moveq	#0,d0
00018CC0 7201                       		moveq	#1,d1
00018CC2 2268 0034                  		movea.l	$34(a0),a1
00018CC6 1029 0025                  		move.b	$25(a1),d0
00018CCA 5540                       		subq.w	#2,d0
00018CCC 6600                       		bne.s	loc_185D2
00018CCE 0829 0001 0028             		btst	#1,$28(a1)
00018CD4 6700                       		beq.s	loc_185DA
00018CD6 4A69 0012                  		tst.w	$12(a1)
00018CDA 6600                       		bne.s	loc_185DA
00018CDC 7204                       		moveq	#4,d1
00018CDE 6000                       		bra.s	loc_185EE
00018CE0                            ; ===========================================================================
00018CE0                            
00018CE0                            loc_185D2:
00018CE0 5500                       		subq.b	#2,d0
00018CE2 6B00                       		bmi.s	loc_185DA
00018CE4 720A                       		moveq	#$A,d1
00018CE6 6000                       		bra.s	loc_185EE
00018CE8                            ; ===========================================================================
00018CE8                            
00018CE8                            loc_185DA:
00018CE8 4A29 0020                  		tst.b	$20(a1)
00018CEC 6600                       		bne.s	loc_185E4
00018CEE 7205                       		moveq	#5,d1
00018CF0 6000                       		bra.s	loc_185EE
00018CF2                            ; ===========================================================================
00018CF2                            
00018CF2                            loc_185E4:
00018CF2 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018CF8 6500                       		bcs.s	loc_185EE
00018CFA 7204                       		moveq	#4,d1
00018CFC                            
00018CFC                            loc_185EE:
00018CFC 1141 001C                  		move.b	d1,$1C(a0)
00018D00 5900                       		subq.b	#4,d0
00018D02 6600                       		bne.s	loc_18602
00018D04 117C 0006 001C             		move.b	#6,$1C(a0)
00018D0A 4A28 0001                  		tst.b	1(a0)
00018D0E 6A00                       		bpl.s	Obj73_FaceDel
00018D10                            
00018D10                            loc_18602:
00018D10 6000                       		bra.s	Obj73_Display
00018D12                            ; ===========================================================================
00018D12                            
00018D12                            Obj73_FaceDel:
00018D12 4EF9 0000 DC36             		jmp	DeleteObject
00018D18                            ; ===========================================================================
00018D18                            
00018D18                            Obj73_FlameMain:			; XREF: Obj73_Index
00018D18 117C 0007 001C             		move.b	#7,$1C(a0)
00018D1E 2268 0034                  		movea.l	$34(a0),a1
00018D22 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018D28 6D00                       		blt.s	loc_1862A
00018D2A 117C 000B 001C             		move.b	#$B,$1C(a0)
00018D30 4A28 0001                  		tst.b	1(a0)
00018D34 6A00                       		bpl.s	Obj73_FlameDel
00018D36 6000                       		bra.s	loc_18636
00018D38                            ; ===========================================================================
00018D38                            
00018D38                            loc_1862A:
00018D38 4A69 0010                  		tst.w	$10(a1)
00018D3C 6700                       		beq.s	loc_18636
00018D3E 117C 0008 001C             		move.b	#8,$1C(a0)
00018D44                            
00018D44                            loc_18636:
00018D44 6000                       		bra.s	Obj73_Display
00018D46                            ; ===========================================================================
00018D46                            
00018D46                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00018D46 4EF9 0000 DC36             		jmp	DeleteObject
00018D4C                            ; ===========================================================================
00018D4C                            
00018D4C                            Obj73_Display:
00018D4C 43F9 0001 83D0             		lea	(Ani_Eggman).l,a1
00018D52 4EB9 0000 ACC4             		jsr	AnimateSprite
00018D58                            
00018D58                            loc_1864A:
00018D58 2268 0034                  		movea.l	$34(a0),a1
00018D5C 3169 0008 0008             		move.w	8(a1),8(a0)
00018D62 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018D68 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018D6E 7003                       		moveq	#3,d0
00018D70 C028 0022                  		and.b	$22(a0),d0
00018D74 0228 00FC 0001             		andi.b	#-4,1(a0)
00018D7A 8128 0001                  		or.b	d0,1(a0)
00018D7E 4EF9 0000 DBFA             		jmp	DisplaySprite
00018D84                            ; ===========================================================================
00018D84                            
00018D84                            Obj73_TubeMain:				; XREF: Obj73_Index
00018D84 2268 0034                  		movea.l	$34(a0),a1
00018D88 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018D8E 6600                       		bne.s	loc_18688
00018D90 4A28 0001                  		tst.b	1(a0)
00018D94 6A00                       		bpl.s	Obj73_TubeDel
00018D96                            
00018D96                            loc_18688:
00018D96 217C 0001 84E8 0004        		move.l	#Map_BossItems,4(a0)
00018D9E 317C 246C 0002             		move.w	#$246C,2(a0)
00018DA4 117C 0004 001A             		move.b	#4,$1A(a0)
00018DAA 60AC                       		bra.s	loc_1864A
00018DAC                            ; ===========================================================================
00018DAC                            
00018DAC                            Obj73_TubeDel:
00018DAC 4EF9 0000 DC36             		jmp	DeleteObject
00018DB2                            ; ===========================================================================
00018DB2                            ; ---------------------------------------------------------------------------
00018DB2                            ; Object 74 - lava that	Eggman drops (MZ)
00018DB2                            ; ---------------------------------------------------------------------------
00018DB2                            
00018DB2                            Obj74:					; XREF: Obj_Index
00018DB2 7000                       		moveq	#0,d0
00018DB4 1028 0024                  		move.b	$24(a0),d0
00018DB8 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00018DBC 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
00018DC0 4EF9 0000 DBFA             		jmp	DisplaySprite
00018DC6                            ; ===========================================================================
00018DC6 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
00018DC8 0000                       		dc.w Obj74_Action-Obj74_Index
00018DCA 0000                       		dc.w loc_18886-Obj74_Index
00018DCC 0000                       		dc.w Obj74_Delete3-Obj74_Index
00018DCE                            ; ===========================================================================
00018DCE                            
00018DCE                            Obj74_Main:				; XREF: Obj74_Index
00018DCE 117C 0008 0016             		move.b	#8,$16(a0)
00018DD4 117C 0008 0017             		move.b	#8,$17(a0)
00018DDA 217C 0000 B8B8 0004        		move.l	#Map_obj14,4(a0)
00018DE2 317C 0345 0002             		move.w	#$345,2(a0)
00018DE8 117C 0004 0001             		move.b	#4,1(a0)
00018DEE 117C 0005 0018             		move.b	#5,$18(a0)
00018DF4 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018DFA 117C 0008 0019             		move.b	#8,$19(a0)
00018E00 5428 0024                  		addq.b	#2,$24(a0)
00018E04 4A28 0028                  		tst.b	$28(a0)
00018E08 6600                       		bne.s	loc_1870A
00018E0A 117C 008B 0020             		move.b	#$8B,$20(a0)
00018E10 5428 0024                  		addq.b	#2,$24(a0)
00018E14 6000 0000                  		bra.w	loc_18886
00018E18                            ; ===========================================================================
00018E18                            
00018E18                            loc_1870A:
00018E18 117C 001E 0029             		move.b	#$1E,$29(a0)
00018E1E 303C 00AE                  		move.w	#$AE,d0
00018E22 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lava sound
00018E28                            
00018E28                            Obj74_Action:				; XREF: Obj74_Index
00018E28 7000                       		moveq	#0,d0
00018E2A 1028 0025                  		move.b	$25(a0),d0
00018E2E 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00018E32 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00018E36 4EB9 0000 DBD4             		jsr	SpeedToPos
00018E3C 43F9 0000 EAB4             		lea	(Ani_obj14).l,a1
00018E42 4EB9 0000 ACC4             		jsr	AnimateSprite
00018E48 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00018E4E 6200                       		bhi.s	Obj74_Delete
00018E50 4E75                       		rts	
00018E52                            ; ===========================================================================
00018E52                            
00018E52                            Obj74_Delete:
00018E52 4EF9 0000 DC36             		jmp	DeleteObject
00018E58                            ; ===========================================================================
00018E58 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00018E5A 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00018E5C 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00018E5E 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00018E60                            ; ===========================================================================
00018E60                            
00018E60                            Obj74_Drop:				; XREF: Obj74_Index2
00018E60 08E8 0001 0022             		bset	#1,$22(a0)
00018E66 5328 0029                  		subq.b	#1,$29(a0)
00018E6A 6A00                       		bpl.s	locret_18780
00018E6C 117C 008B 0020             		move.b	#$8B,$20(a0)
00018E72 4228 0028                  		clr.b	$28(a0)
00018E76 0668 0018 0012             		addi.w	#$18,$12(a0)
00018E7C 08A8 0001 0022             		bclr	#1,$22(a0)
00018E82 6100 C666                  		bsr.w	ObjHitFloor
00018E86 4A41                       		tst.w	d1
00018E88 6A00                       		bpl.s	locret_18780
00018E8A 5428 0025                  		addq.b	#2,$25(a0)
00018E8E                            
00018E8E                            locret_18780:
00018E8E 4E75                       		rts	
00018E90                            ; ===========================================================================
00018E90                            
00018E90                            Obj74_MakeFlame:			; XREF: Obj74_Index2
00018E90 5568 000C                  		subq.w	#2,$C(a0)
00018E94 08E8 0007 0002             		bset	#7,2(a0)
00018E9A 317C 00A0 0010             		move.w	#$A0,$10(a0)
00018EA0 4268 0012                  		clr.w	$12(a0)
00018EA4 3168 0008 0030             		move.w	8(a0),$30(a0)
00018EAA 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018EB0 117C 0003 0029             		move.b	#3,$29(a0)
00018EB6 4EB9 0000 E096             		jsr	SingleObjLoad2
00018EBC 6600                       		bne.s	loc_187CA
00018EBE 47D1                       		lea	(a1),a3
00018EC0 45D0                       		lea	(a0),a2
00018EC2 7003                       		moveq	#3,d0
00018EC4                            
00018EC4                            Obj74_Loop:
00018EC4 26DA                       		move.l	(a2)+,(a3)+
00018EC6 26DA                       		move.l	(a2)+,(a3)+
00018EC8 26DA                       		move.l	(a2)+,(a3)+
00018ECA 26DA                       		move.l	(a2)+,(a3)+
00018ECC 51C8 FFF6                  		dbf	d0,Obj74_Loop
00018ED0                            
00018ED0 4469 0010                  		neg.w	$10(a1)
00018ED4 5429 0025                  		addq.b	#2,$25(a1)
00018ED8                            
00018ED8                            loc_187CA:
00018ED8 5428 0025                  		addq.b	#2,$25(a0)
00018EDC 4E75                       		rts	
00018EDE                            
00018EDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018EDE                            
00018EDE                            
00018EDE                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
00018EDE 4EB9 0000 E096             		jsr	SingleObjLoad2
00018EE4 6600                       		bne.s	locret_187EE
00018EE6 3368 0008 0008             		move.w	8(a0),8(a1)
00018EEC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018EF2 12BC 0074                  		move.b	#$74,(a1)
00018EF6 337C 0067 0028             		move.w	#$67,$28(a1)
00018EFC                            
00018EFC                            locret_187EE:
00018EFC 4E75                       		rts	
00018EFE                            ; End of function Obj74_Duplicate2
00018EFE                            
00018EFE                            ; ===========================================================================
00018EFE                            
00018EFE                            Obj74_Duplicate:			; XREF: Obj74_Index2
00018EFE 6100 C5EA                  		bsr.w	ObjHitFloor
00018F02 4A41                       		tst.w	d1
00018F04 6A00                       		bpl.s	loc_18826
00018F06 3028 0008                  		move.w	8(a0),d0
00018F0A 0C40 1940                  		cmpi.w	#$1940,d0
00018F0E 6E00                       		bgt.s	loc_1882C
00018F10 3228 0030                  		move.w	$30(a0),d1
00018F14 B240                       		cmp.w	d0,d1
00018F16 6700                       		beq.s	loc_1881E
00018F18 0240 0010                  		andi.w	#$10,d0
00018F1C 0241 0010                  		andi.w	#$10,d1
00018F20 B240                       		cmp.w	d0,d1
00018F22 6700                       		beq.s	loc_1881E
00018F24 61B8                       		bsr.s	Obj74_Duplicate2
00018F26 3168 0008 0032             		move.w	8(a0),$32(a0)
00018F2C                            
00018F2C                            loc_1881E:
00018F2C 3168 0008 0030             		move.w	8(a0),$30(a0)
00018F32 4E75                       		rts	
00018F34                            ; ===========================================================================
00018F34                            
00018F34                            loc_18826:
00018F34 5428 0025                  		addq.b	#2,$25(a0)
00018F38 4E75                       		rts	
00018F3A                            ; ===========================================================================
00018F3A                            
00018F3A                            loc_1882C:
00018F3A 5428 0024                  		addq.b	#2,$24(a0)
00018F3E 4E75                       		rts	
00018F40                            ; ===========================================================================
00018F40                            
00018F40                            Obj74_FallEdge:				; XREF: Obj74_Index2
00018F40 08A8 0001 0022             		bclr	#1,$22(a0)
00018F46 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
00018F4C 3028 0008                  		move.w	8(a0),d0
00018F50 9068 0032                  		sub.w	$32(a0),d0
00018F54 6A00                       		bpl.s	loc_1884A
00018F56 4440                       		neg.w	d0
00018F58                            
00018F58                            loc_1884A:
00018F58 0C40 0012                  		cmpi.w	#$12,d0
00018F5C 6600                       		bne.s	loc_18856
00018F5E 08A8 0007 0002             		bclr	#7,2(a0)
00018F64                            
00018F64                            loc_18856:
00018F64 6100 C584                  		bsr.w	ObjHitFloor
00018F68 4A41                       		tst.w	d1
00018F6A 6A00                       		bpl.s	locret_1887E
00018F6C 5328 0029                  		subq.b	#1,$29(a0)
00018F70 6700                       		beq.s	Obj74_Delete2
00018F72 4268 0012                  		clr.w	$12(a0)
00018F76 3168 0032 0008             		move.w	$32(a0),8(a0)
00018F7C 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018F82 08E8 0007 0002             		bset	#7,2(a0)
00018F88 5528 0025                  		subq.b	#2,$25(a0)
00018F8C                            
00018F8C                            locret_1887E:
00018F8C 4E75                       		rts	
00018F8E                            ; ===========================================================================
00018F8E                            
00018F8E                            Obj74_Delete2:
00018F8E 4EF9 0000 DC36             		jmp	DeleteObject
00018F94                            ; ===========================================================================
00018F94                            
00018F94                            loc_18886:				; XREF: Obj74_Index
00018F94 08E8 0007 0002             		bset	#7,2(a0)
00018F9A 5328 0029                  		subq.b	#1,$29(a0)
00018F9E 6600                       		bne.s	Obj74_Animate
00018FA0 117C 0001 001C             		move.b	#1,$1C(a0)
00018FA6 5968 000C                  		subq.w	#4,$C(a0)
00018FAA 4228 0020                  		clr.b	$20(a0)
00018FAE                            
00018FAE                            Obj74_Animate:
00018FAE 43F9 0000 EAB4             		lea	(Ani_obj14).l,a1
00018FB4 4EF9 0000 ACC4             		jmp	AnimateSprite
00018FBA                            ; ===========================================================================
00018FBA                            
00018FBA                            Obj74_Delete3:				; XREF: Obj74_Index
00018FBA 4EF9 0000 DC36             		jmp	DeleteObject
00018FC0                            ; ===========================================================================
00018FC0                            
00018FC0                            Obj7A_Delete:
00018FC0 4EF9 0000 DC36             		jmp	DeleteObject
00018FC6                            ; ===========================================================================
00018FC6                            ; ---------------------------------------------------------------------------
00018FC6                            ; Object 7A - Eggman (SLZ)
00018FC6                            ; ---------------------------------------------------------------------------
00018FC6                            
00018FC6                            Obj7A:					; XREF: Obj_Index
00018FC6 7000                       		moveq	#0,d0
00018FC8 1028 0024                  		move.b	$24(a0),d0
00018FCC 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
00018FD0 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
00018FD4                            ; ===========================================================================
00018FD4 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
00018FD6 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
00018FD8 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
00018FDA 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
00018FDC 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
00018FDE                            
00018FDE 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018FE1 0401 04                    		dc.b 4,	1, 4
00018FE4 0607 04                    		dc.b 6,	7, 4
00018FE7 0800 03                    		dc.b 8,	0, 3
00018FEA                            ; ===========================================================================
00018FEA                            
00018FEA                            Obj7A_Main:				; XREF: Obj7A_Index
00018FEA 317C 2188 0008             		move.w	#$2188,8(a0)
00018FF0 317C 0228 000C             		move.w	#$228,$C(a0)
00018FF6 3168 0008 0030             		move.w	8(a0),$30(a0)
00018FFC 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019002 117C 000F 0020             		move.b	#$F,$20(a0)
00019008 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001900E 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
00019012 2248                       		movea.l	a0,a1
00019014 7203                       		moveq	#3,d1
00019016 6000                       		bra.s	Obj7A_LoadBoss
00019018                            ; ===========================================================================
00019018                            
00019018                            Obj7A_Loop:
00019018 4EB9 0000 E096             		jsr	SingleObjLoad2
0001901E 6600                       		bne.s	loc_1895C
00019020 12BC 007A                  		move.b	#$7A,0(a1)
00019024 3368 0008 0008             		move.w	8(a0),8(a1)
0001902A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019030                            
00019030                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
00019030 08A8 0000 0022             		bclr	#0,$22(a0)
00019036 4229 0025                  		clr.b	$25(a1)
0001903A 135A 0024                  		move.b	(a2)+,$24(a1)
0001903E 135A 001C                  		move.b	(a2)+,$1C(a1)
00019042 135A 0018                  		move.b	(a2)+,$18(a1)
00019046 237C 0001 8420 0004        		move.l	#Map_Eggman,4(a1)
0001904E 337C 0400 0002             		move.w	#$400,2(a1)
00019054 137C 0004 0001             		move.b	#4,1(a1)
0001905A 137C 0020 0019             		move.b	#$20,$19(a1)
00019060 2348 0034                  		move.l	a0,$34(a1)
00019064 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00019068                            
00019068                            loc_1895C:
00019068 43F8 D040                  		lea	($FFFFD040).w,a1
0001906C 45E8 002A                  		lea	$2A(a0),a2
00019070 705E                       		moveq	#$5E,d0
00019072 723E                       		moveq	#$3E,d1
00019074                            
00019074                            loc_18968:
00019074 B011                       		cmp.b	(a1),d0
00019076 6600                       		bne.s	loc_18974
00019078 4A29 0028                  		tst.b	$28(a1)
0001907C 6700                       		beq.s	loc_18974
0001907E 34C9                       		move.w	a1,(a2)+
00019080                            
00019080                            loc_18974:
00019080 D2FC 0040                  		adda.w	#$40,a1
00019084 51C9 FFEE                  		dbf	d1,loc_18968
00019088                            
00019088                            Obj7A_ShipMain:				; XREF: Obj7A_Index
00019088 7000                       		moveq	#0,d0
0001908A 1028 0025                  		move.b	$25(a0),d0
0001908E 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
00019092 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00019096 43F9 0001 83D0             		lea	(Ani_Eggman).l,a1
0001909C 4EB9 0000 ACC4             		jsr	AnimateSprite
000190A2 7003                       		moveq	#3,d0
000190A4 C028 0022                  		and.b	$22(a0),d0
000190A8 0228 00FC 0001             		andi.b	#$FC,1(a0)
000190AE 8128 0001                  		or.b	d0,1(a0)
000190B2 4EF9 0000 DBFA             		jmp	DisplaySprite
000190B8                            ; ===========================================================================
000190B8 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
000190BA 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
000190BC 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
000190BE 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
000190C0 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
000190C2 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
000190C4                            ; ===========================================================================
000190C4                            
000190C4                            loc_189B8:				; XREF: Obj7A_ShipIndex
000190C4 317C FF00 0010             		move.w	#-$100,$10(a0)
000190CA 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
000190D0 6400                       		bcc.s	loc_189CA
000190D2 5428 0025                  		addq.b	#2,$25(a0)
000190D6                            
000190D6                            loc_189CA:
000190D6 6100 EEB6                  		bsr.w	BossMove
000190DA 1028 003F                  		move.b	$3F(a0),d0
000190DE 5428 003F                  		addq.b	#2,$3F(a0)
000190E2 4EB9 0000 2C60             		jsr	(CalcSine).l
000190E8 EC40                       		asr.w	#6,d0
000190EA D068 0038                  		add.w	$38(a0),d0
000190EE 3140 000C                  		move.w	d0,$C(a0)
000190F2 3168 0030 0008             		move.w	$30(a0),8(a0)
000190F8 6000                       		bra.s	loc_189FE
000190FA                            ; ===========================================================================
000190FA                            
000190FA                            loc_189EE:
000190FA 6100 EE92                  		bsr.w	BossMove
000190FE 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019104 3168 0030 0008             		move.w	$30(a0),8(a0)
0001910A                            
0001910A                            loc_189FE:
0001910A 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019110 6400                       		bcc.s	locret_18A44
00019112 4A28 0022                  		tst.b	$22(a0)
00019116 6B00                       		bmi.s	loc_18A46
00019118 4A28 0020                  		tst.b	$20(a0)
0001911C 6600                       		bne.s	locret_18A44
0001911E 4A28 003E                  		tst.b	$3E(a0)
00019122 6600                       		bne.s	loc_18A28
00019124 117C 0020 003E             		move.b	#$20,$3E(a0)
0001912A 303C 00AC                  		move.w	#$AC,d0
0001912E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019134                            
00019134                            loc_18A28:
00019134 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019138 7000                       		moveq	#0,d0
0001913A 4A51                       		tst.w	(a1)
0001913C 6600                       		bne.s	loc_18A36
0001913E 303C 0EEE                  		move.w	#$EEE,d0
00019142                            
00019142                            loc_18A36:
00019142 3280                       		move.w	d0,(a1)
00019144 5328 003E                  		subq.b	#1,$3E(a0)
00019148 6600                       		bne.s	locret_18A44
0001914A 117C 000F 0020             		move.b	#$F,$20(a0)
00019150                            
00019150                            locret_18A44:
00019150 4E75                       		rts	
00019152                            ; ===========================================================================
00019152                            
00019152                            loc_18A46:
00019152 7064                       		moveq	#100,d0
00019154 6100 0000                  		bsr.w	AddPoints
00019158 117C 0006 0025             		move.b	#6,$25(a0)
0001915E 117C 0078 003C             		move.b	#$78,$3C(a0)
00019164 4268 0010                  		clr.w	$10(a0)
00019168 4E75                       		rts	
0001916A                            ; ===========================================================================
0001916A                            
0001916A                            loc_18A5E:				; XREF: Obj7A_ShipIndex
0001916A 3028 0030                  		move.w	$30(a0),d0
0001916E 317C 0200 0010             		move.w	#$200,$10(a0)
00019174 0828 0000 0022             		btst	#0,$22(a0)
0001917A 6600                       		bne.s	loc_18A7C
0001917C 4468 0010                  		neg.w	$10(a0)
00019180 0C40 2008                  		cmpi.w	#$2008,d0
00019184 6E00                       		bgt.s	loc_18A88
00019186 6000                       		bra.s	loc_18A82
00019188                            ; ===========================================================================
00019188                            
00019188                            loc_18A7C:
00019188 0C40 2138                  		cmpi.w	#$2138,d0
0001918C 6D00                       		blt.s	loc_18A88
0001918E                            
0001918E                            loc_18A82:
0001918E 0868 0000 0022             		bchg	#0,$22(a0)
00019194                            
00019194                            loc_18A88:
00019194 3028 0008                  		move.w	8(a0),d0
00019198 72FF                       		moveq	#-1,d1
0001919A 7402                       		moveq	#2,d2
0001919C 45E8 002A                  		lea	$2A(a0),a2
000191A0 7828                       		moveq	#$28,d4
000191A2 4A68 0010                  		tst.w	$10(a0)
000191A6 6A00                       		bpl.s	loc_18A9E
000191A8 4444                       		neg.w	d4
000191AA                            
000191AA                            loc_18A9E:
000191AA 321A                       		move.w	(a2)+,d1
000191AC 2641                       		movea.l	d1,a3
000191AE 082B 0003 0022             		btst	#3,$22(a3)
000191B4 6600                       		bne.s	loc_18AB4
000191B6 362B 0008                  		move.w	8(a3),d3
000191BA D644                       		add.w	d4,d3
000191BC 9640                       		sub.w	d0,d3
000191BE 6700                       		beq.s	loc_18AC0
000191C0                            
000191C0                            loc_18AB4:
000191C0 51CA FFE8                  		dbf	d2,loc_18A9E
000191C4                            
000191C4 1142 0028                  		move.b	d2,$28(a0)
000191C8 6000 FF0C                  		bra.w	loc_189CA
000191CC                            ; ===========================================================================
000191CC                            
000191CC                            loc_18AC0:
000191CC 1142 0028                  		move.b	d2,$28(a0)
000191D0 5428 0025                  		addq.b	#2,$25(a0)
000191D4 117C 0028 003C             		move.b	#$28,$3C(a0)
000191DA 6000 FEFA                  		bra.w	loc_189CA
000191DE                            ; ===========================================================================
000191DE                            
000191DE                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
000191DE 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
000191E4 6600                       		bne.s	loc_18B36
000191E6 70FF                       		moveq	#-1,d0
000191E8 1028 0028                  		move.b	$28(a0),d0
000191EC 4880                       		ext.w	d0
000191EE 6B00                       		bmi.s	loc_18B40
000191F0 5540                       		subq.w	#2,d0
000191F2 4440                       		neg.w	d0
000191F4 D040                       		add.w	d0,d0
000191F6 43E8 002A                  		lea	$2A(a0),a1
000191FA 3031 0000                  		move.w	(a1,d0.w),d0
000191FE 2440                       		movea.l	d0,a2
00019200 43F8 D040                  		lea	($FFFFD040).w,a1
00019204 723E                       		moveq	#$3E,d1
00019206                            
00019206                            loc_18AFA:
00019206 B0A9 003C                  		cmp.l	$3C(a1),d0
0001920A 6700                       		beq.s	loc_18B40
0001920C D2FC 0040                  		adda.w	#$40,a1
00019210 51C9 FFF4                  		dbf	d1,loc_18AFA
00019214                            
00019214 2F08                       		move.l	a0,-(sp)
00019216 41D2                       		lea	(a2),a0
00019218 4EB9 0000 E096             		jsr	SingleObjLoad2
0001921E 205F                       		movea.l	(sp)+,a0
00019220 6600                       		bne.s	loc_18B40
00019222 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00019226 3368 0008 0008             		move.w	8(a0),8(a1)
0001922C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019232 0669 0020 000C             		addi.w	#$20,$C(a1)
00019238 136A 0022 0022             		move.b	$22(a2),$22(a1)
0001923E 234A 003C                  		move.l	a2,$3C(a1)
00019242                            
00019242                            loc_18B36:
00019242 5328 003C                  		subq.b	#1,$3C(a0)
00019246 6700                       		beq.s	loc_18B40
00019248 6000 FEC0                  		bra.w	loc_189FE
0001924C                            ; ===========================================================================
0001924C                            
0001924C                            loc_18B40:
0001924C 5528 0025                  		subq.b	#2,$25(a0)
00019250 6000 FE84                  		bra.w	loc_189CA
00019254                            ; ===========================================================================
00019254                            
00019254                            loc_18B48:				; XREF: Obj7A_ShipIndex
00019254 5328 003C                  		subq.b	#1,$3C(a0)
00019258 6B00                       		bmi.s	loc_18B52
0001925A 6000 ECF0                  		bra.w	BossDefeated
0001925E                            ; ===========================================================================
0001925E                            
0001925E                            loc_18B52:
0001925E 5428 0025                  		addq.b	#2,$25(a0)
00019262 4268 0012                  		clr.w	$12(a0)
00019266 08E8 0000 0022             		bset	#0,$22(a0)
0001926C 08A8 0007 0022             		bclr	#7,$22(a0)
00019272 4268 0010                  		clr.w	$10(a0)
00019276 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001927C 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019280 6600                       		bne.s	loc_18B7C
00019282 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019288                            
00019288                            loc_18B7C:
00019288 6000 FE80                  		bra.w	loc_189FE
0001928C                            ; ===========================================================================
0001928C                            
0001928C                            loc_18B80:				; XREF: Obj7A_ShipIndex
0001928C 5228 003C                  		addq.b	#1,$3C(a0)
00019290 6700                       		beq.s	loc_18B90
00019292 6A00                       		bpl.s	loc_18B96
00019294 0668 0018 0012             		addi.w	#$18,$12(a0)
0001929A 6000                       		bra.s	loc_18BC2
0001929C                            ; ===========================================================================
0001929C                            
0001929C                            loc_18B90:
0001929C 4268 0012                  		clr.w	$12(a0)
000192A0 6000                       		bra.s	loc_18BC2
000192A2                            ; ===========================================================================
000192A2                            
000192A2                            loc_18B96:
000192A2 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
000192A8 6500                       		bcs.s	loc_18BAE
000192AA 6700                       		beq.s	loc_18BB4
000192AC 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
000192B2 6500                       		bcs.s	loc_18BC2
000192B4 5428 0025                  		addq.b	#2,$25(a0)
000192B8 6000                       		bra.s	loc_18BC2
000192BA                            ; ===========================================================================
000192BA                            
000192BA                            loc_18BAE:
000192BA 5168 0012                  		subq.w	#8,$12(a0)
000192BE 6000                       		bra.s	loc_18BC2
000192C0                            ; ===========================================================================
000192C0                            
000192C0                            loc_18BB4:
000192C0 4268 0012                  		clr.w	$12(a0)
000192C4 303C 0084                  		move.w	#$84,d0
000192C8 4EB9 0000 15B6             		jsr	(PlaySound).l	; play SLZ music
000192CE                            
000192CE                            loc_18BC2:
000192CE 6000 FE2A                  		bra.w	loc_189EE
000192D2                            ; ===========================================================================
000192D2                            
000192D2                            loc_18BC6:				; XREF: Obj7A_ShipIndex
000192D2 317C 0400 0010             		move.w	#$400,$10(a0)
000192D8 317C FFC0 0012             		move.w	#-$40,$12(a0)
000192DE 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
000192E4 6400                       		bcc.s	loc_18BE0
000192E6 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000192EA 6000                       		bra.s	loc_18BE8
000192EC                            ; ===========================================================================
000192EC                            
000192EC                            loc_18BE0:
000192EC 4A28 0001                  		tst.b	1(a0)
000192F0 6A00 FCCE                  		bpl.w	Obj7A_Delete
000192F4                            
000192F4                            loc_18BE8:
000192F4 6100 EC98                  		bsr.w	BossMove
000192F8 6000 FDDC                  		bra.w	loc_189CA
000192FC                            ; ===========================================================================
000192FC                            
000192FC                            Obj7A_FaceMain:				; XREF: Obj7A_Index
000192FC 7000                       		moveq	#0,d0
000192FE 7201                       		moveq	#1,d1
00019300 2268 0034                  		movea.l	$34(a0),a1
00019304 1029 0025                  		move.b	$25(a1),d0
00019308 0C00 0006                  		cmpi.b	#6,d0
0001930C 6B00                       		bmi.s	loc_18C06
0001930E 720A                       		moveq	#$A,d1
00019310 6000                       		bra.s	loc_18C1A
00019312                            ; ===========================================================================
00019312                            
00019312                            loc_18C06:
00019312 4A29 0020                  		tst.b	$20(a1)
00019316 6600                       		bne.s	loc_18C10
00019318 7205                       		moveq	#5,d1
0001931A 6000                       		bra.s	loc_18C1A
0001931C                            ; ===========================================================================
0001931C                            
0001931C                            loc_18C10:
0001931C 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019322 6500                       		bcs.s	loc_18C1A
00019324 7204                       		moveq	#4,d1
00019326                            
00019326                            loc_18C1A:
00019326 1141 001C                  		move.b	d1,$1C(a0)
0001932A 0C00 000A                  		cmpi.b	#$A,d0
0001932E 6600                       		bne.s	loc_18C32
00019330 117C 0006 001C             		move.b	#6,$1C(a0)
00019336 4A28 0001                  		tst.b	1(a0)
0001933A 6A00 FC84                  		bpl.w	Obj7A_Delete
0001933E                            
0001933E                            loc_18C32:
0001933E 6000                       		bra.s	loc_18C6C
00019340                            ; ===========================================================================
00019340                            
00019340                            Obj7A_FlameMain:			; XREF: Obj7A_Index
00019340 117C 0008 001C             		move.b	#8,$1C(a0)
00019346 2268 0034                  		movea.l	$34(a0),a1
0001934A 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019350 6600                       		bne.s	loc_18C56
00019352 4A28 0001                  		tst.b	1(a0)
00019356 6A00 FC68                  		bpl.w	Obj7A_Delete
0001935A 117C 000B 001C             		move.b	#$B,$1C(a0)
00019360 6000                       		bra.s	loc_18C6C
00019362                            ; ===========================================================================
00019362                            
00019362                            loc_18C56:
00019362 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019368 6E00                       		bgt.s	loc_18C6C
0001936A 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019370 6D00                       		blt.s	loc_18C6C
00019372 117C 0007 001C             		move.b	#7,$1C(a0)
00019378                            
00019378                            loc_18C6C:
00019378 43F9 0001 83D0             		lea	(Ani_Eggman).l,a1
0001937E 4EB9 0000 ACC4             		jsr	AnimateSprite
00019384                            
00019384                            loc_18C78:
00019384 2268 0034                  		movea.l	$34(a0),a1
00019388 3169 0008 0008             		move.w	8(a1),8(a0)
0001938E 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019394 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001939A 7003                       		moveq	#3,d0
0001939C C028 0022                  		and.b	$22(a0),d0
000193A0 0228 00FC 0001             		andi.b	#-4,1(a0)
000193A6 8128 0001                  		or.b	d0,1(a0)
000193AA 4EF9 0000 DBFA             		jmp	DisplaySprite
000193B0                            ; ===========================================================================
000193B0                            
000193B0                            Obj7A_TubeMain:				; XREF: Obj7A_Index
000193B0 2268 0034                  		movea.l	$34(a0),a1
000193B4 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
000193BA 6600                       		bne.s	loc_18CB8
000193BC 4A28 0001                  		tst.b	1(a0)
000193C0 6A00 FBFE                  		bpl.w	Obj7A_Delete
000193C4                            
000193C4                            loc_18CB8:
000193C4 217C 0001 84E8 0004        		move.l	#Map_BossItems,4(a0)
000193CC 317C 246C 0002             		move.w	#$246C,2(a0)
000193D2 117C 0003 001A             		move.b	#3,$1A(a0)
000193D8 60AA                       		bra.s	loc_18C78
000193DA                            ; ===========================================================================
000193DA                            ; ---------------------------------------------------------------------------
000193DA                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
000193DA                            ; ---------------------------------------------------------------------------
000193DA                            
000193DA                            Obj7B:					; XREF: Obj_Index
000193DA 7000                       		moveq	#0,d0
000193DC 1028 0024                  		move.b	$24(a0),d0
000193E0 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
000193E4 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
000193E8 3028 0030                  		move.w	$30(a0),d0
000193EC 0240 FF80                  		andi.w	#$FF80,d0
000193F0 3238 F700                  		move.w	($FFFFF700).w,d1
000193F4 0441 0080                  		subi.w	#$80,d1
000193F8 0241 FF80                  		andi.w	#$FF80,d1
000193FC 9041                       		sub.w	d1,d0
000193FE 6B00 FBC0                  		bmi.w	Obj7A_Delete
00019402 0C40 0280                  		cmpi.w	#$280,d0
00019406 6200 FBB8                  		bhi.w	Obj7A_Delete
0001940A 4EF9 0000 DBFA             		jmp	DisplaySprite
00019410                            ; ===========================================================================
00019410 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
00019412 0000                       		dc.w Obj7B_Fall-Obj7B_Index
00019414 0000                       		dc.w loc_18DC6-Obj7B_Index
00019416 0000                       		dc.w loc_18EAA-Obj7B_Index
00019418 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001941A 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001941C                            ; ===========================================================================
0001941C                            
0001941C                            Obj7B_Main:				; XREF: Obj7B_Index
0001941C 217C 0001 1FC0 0004        		move.l	#Map_obj5Ea,4(a0)
00019424 317C 0518 0002             		move.w	#$518,2(a0)
0001942A 117C 0001 001A             		move.b	#1,$1A(a0)
00019430 0028 0004 0001             		ori.b	#4,1(a0)
00019436 117C 0004 0018             		move.b	#4,$18(a0)
0001943C 117C 008B 0020             		move.b	#$8B,$20(a0)
00019442 117C 000C 0019             		move.b	#$C,$19(a0)
00019448 2268 003C                  		movea.l	$3C(a0),a1
0001944C 3169 0008 0030             		move.w	8(a1),$30(a0)
00019452 3169 000C 0034             		move.w	$C(a1),$34(a0)
00019458 08E8 0000 0022             		bset	#0,$22(a0)
0001945E 3028 0008                  		move.w	8(a0),d0
00019462 B069 0008                  		cmp.w	8(a1),d0
00019466 6E00                       		bgt.s	loc_18D68
00019468 08A8 0000 0022             		bclr	#0,$22(a0)
0001946E 117C 0002 003A             		move.b	#2,$3A(a0)
00019474                            
00019474                            loc_18D68:
00019474 5428 0024                  		addq.b	#2,$24(a0)
00019478                            
00019478                            Obj7B_Fall:				; XREF: Obj7B_Index
00019478 4EB9 0000 DBA8             		jsr	ObjectFall
0001947E 2268 003C                  		movea.l	$3C(a0),a1
00019482 45F9 0000 0000             		lea	(word_19018).l,a2
00019488 7000                       		moveq	#0,d0
0001948A 1029 001A                  		move.b	$1A(a1),d0
0001948E 3228 0008                  		move.w	8(a0),d1
00019492 9268 0030                  		sub.w	$30(a0),d1
00019496 6400                       		bcc.s	loc_18D8E
00019498 5440                       		addq.w	#2,d0
0001949A                            
0001949A                            loc_18D8E:
0001949A D040                       		add.w	d0,d0
0001949C 3228 0034                  		move.w	$34(a0),d1
000194A0 D272 0000                  		add.w	(a2,d0.w),d1
000194A4 B268 000C                  		cmp.w	$C(a0),d1
000194A8 6E00                       		bgt.s	locret_18DC4
000194AA 2268 003C                  		movea.l	$3C(a0),a1
000194AE 7202                       		moveq	#2,d1
000194B0 0828 0000 0022             		btst	#0,$22(a0)
000194B6 6700                       		beq.s	loc_18DAE
000194B8 7200                       		moveq	#0,d1
000194BA                            
000194BA                            loc_18DAE:
000194BA 317C 00F0 0028             		move.w	#$F0,$28(a0)
000194C0 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
000194C6 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000194CC 6000 0000                  		bra.w	loc_18FA2
000194D0                            ; ===========================================================================
000194D0                            
000194D0                            locret_18DC4:
000194D0 4E75                       		rts	
000194D2                            ; ===========================================================================
000194D2                            
000194D2                            loc_18DC6:				; XREF: Obj7B_Index
000194D2 2268 003C                  		movea.l	$3C(a0),a1
000194D6 7000                       		moveq	#0,d0
000194D8 1028 003A                  		move.b	$3A(a0),d0
000194DC 9029 003A                  		sub.b	$3A(a1),d0
000194E0 6700                       		beq.s	loc_18E2A
000194E2 6400                       		bcc.s	loc_18DDA
000194E4 4400                       		neg.b	d0
000194E6                            
000194E6                            loc_18DDA:
000194E6 323C F7E8                  		move.w	#-$818,d1
000194EA 343C FEEC                  		move.w	#-$114,d2
000194EE 0C00 0001                  		cmpi.b	#1,d0
000194F2 6700                       		beq.s	loc_18E00
000194F4 323C F6A0                  		move.w	#-$960,d1
000194F8 343C FF0C                  		move.w	#-$F4,d2
000194FC 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
00019502 6D00                       		blt.s	loc_18E00
00019504 323C F5E0                  		move.w	#-$A20,d1
00019508 343C FF80                  		move.w	#-$80,d2
0001950C                            
0001950C                            loc_18E00:
0001950C 3141 0012                  		move.w	d1,$12(a0)
00019510 3142 0010                  		move.w	d2,$10(a0)
00019514 3028 0008                  		move.w	8(a0),d0
00019518 9068 0030                  		sub.w	$30(a0),d0
0001951C 6400                       		bcc.s	loc_18E16
0001951E 4468 0010                  		neg.w	$10(a0)
00019522                            
00019522                            loc_18E16:
00019522 117C 0001 001A             		move.b	#1,$1A(a0)
00019528 317C 0020 0028             		move.w	#$20,$28(a0)
0001952E 5428 0024                  		addq.b	#2,$24(a0)
00019532 6000 0000                  		bra.w	loc_18EAA
00019536                            ; ===========================================================================
00019536                            
00019536                            loc_18E2A:				; XREF: loc_18DC6
00019536 45F9 0000 0000             		lea	(word_19018).l,a2
0001953C 7000                       		moveq	#0,d0
0001953E 1029 001A                  		move.b	$1A(a1),d0
00019542 343C 0028                  		move.w	#$28,d2
00019546 3228 0008                  		move.w	8(a0),d1
0001954A 9268 0030                  		sub.w	$30(a0),d1
0001954E 6400                       		bcc.s	loc_18E48
00019550 4442                       		neg.w	d2
00019552 5440                       		addq.w	#2,d0
00019554                            
00019554                            loc_18E48:
00019554 D040                       		add.w	d0,d0
00019556 3228 0034                  		move.w	$34(a0),d1
0001955A D272 0000                  		add.w	(a2,d0.w),d1
0001955E 3141 000C                  		move.w	d1,$C(a0)
00019562 D468 0030                  		add.w	$30(a0),d2
00019566 3142 0008                  		move.w	d2,8(a0)
0001956A 4268 000E                  		clr.w	$E(a0)
0001956E 4268 000A                  		clr.w	$A(a0)
00019572 5368 0028                  		subq.w	#1,$28(a0)
00019576 6600                       		bne.s	loc_18E7A
00019578 317C 0020 0028             		move.w	#$20,$28(a0)
0001957E 117C 0008 0024             		move.b	#8,$24(a0)
00019584 4E75                       		rts	
00019586                            ; ===========================================================================
00019586                            
00019586                            loc_18E7A:
00019586 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
0001958C 6600                       		bne.s	loc_18E88
0001958E 117C 0005 001F             		move.b	#5,$1F(a0)
00019594                            
00019594                            loc_18E88:
00019594 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
0001959A 6600                       		bne.s	loc_18E96
0001959C 117C 0002 001F             		move.b	#2,$1F(a0)
000195A2                            
000195A2                            loc_18E96:
000195A2 5328 001E                  		subq.b	#1,$1E(a0)
000195A6 6E00                       		bgt.s	locret_18EA8
000195A8 0868 0000 001A             		bchg	#0,$1A(a0)
000195AE 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000195B4                            
000195B4                            locret_18EA8:
000195B4 4E75                       		rts	
000195B6                            ; ===========================================================================
000195B6                            
000195B6                            loc_18EAA:				; XREF: Obj7B_Index
000195B6 43F8 D040                  		lea	($FFFFD040).w,a1
000195BA 707A                       		moveq	#$7A,d0
000195BC 7240                       		moveq	#$40,d1
000195BE 743E                       		moveq	#$3E,d2
000195C0                            
000195C0                            loc_18EB4:
000195C0 B011                       		cmp.b	(a1),d0
000195C2 6700                       		beq.s	loc_18EC0
000195C4 D2C1                       		adda.w	d1,a1
000195C6 51CA FFF8                  		dbf	d2,loc_18EB4
000195CA                            
000195CA 6000                       		bra.s	loc_18F38
000195CC                            ; ===========================================================================
000195CC                            
000195CC                            loc_18EC0:
000195CC 3029 0008                  		move.w	8(a1),d0
000195D0 3229 000C                  		move.w	$C(a1),d1
000195D4 3428 0008                  		move.w	8(a0),d2
000195D8 3628 000C                  		move.w	$C(a0),d3
000195DC 45FA 0000                  		lea	byte_19022(pc),a2
000195E0 47FA 0000                  		lea	byte_19026(pc),a3
000195E4 181A                       		move.b	(a2)+,d4
000195E6 4884                       		ext.w	d4
000195E8 D044                       		add.w	d4,d0
000195EA 181B                       		move.b	(a3)+,d4
000195EC 4884                       		ext.w	d4
000195EE D444                       		add.w	d4,d2
000195F0 B440                       		cmp.w	d0,d2
000195F2 6500                       		bcs.s	loc_18F38
000195F4 181A                       		move.b	(a2)+,d4
000195F6 4884                       		ext.w	d4
000195F8 D044                       		add.w	d4,d0
000195FA 181B                       		move.b	(a3)+,d4
000195FC 4884                       		ext.w	d4
000195FE D444                       		add.w	d4,d2
00019600 B042                       		cmp.w	d2,d0
00019602 6500                       		bcs.s	loc_18F38
00019604 181A                       		move.b	(a2)+,d4
00019606 4884                       		ext.w	d4
00019608 D244                       		add.w	d4,d1
0001960A 181B                       		move.b	(a3)+,d4
0001960C 4884                       		ext.w	d4
0001960E D644                       		add.w	d4,d3
00019610 B641                       		cmp.w	d1,d3
00019612 6500                       		bcs.s	loc_18F38
00019614 181A                       		move.b	(a2)+,d4
00019616 4884                       		ext.w	d4
00019618 D244                       		add.w	d4,d1
0001961A 181B                       		move.b	(a3)+,d4
0001961C 4884                       		ext.w	d4
0001961E D644                       		add.w	d4,d3
00019620 B243                       		cmp.w	d3,d1
00019622 6500                       		bcs.s	loc_18F38
00019624 5428 0024                  		addq.b	#2,$24(a0)
00019628 4268 0028                  		clr.w	$28(a0)
0001962C 4229 0020                  		clr.b	$20(a1)
00019630 5329 0021                  		subq.b	#1,$21(a1)
00019634 6600                       		bne.s	loc_18F38
00019636 08E9 0007 0022             		bset	#7,$22(a1)
0001963C 4268 0010                  		clr.w	$10(a0)
00019640 4268 0012                  		clr.w	$12(a0)
00019644                            
00019644                            loc_18F38:
00019644 4A68 0012                  		tst.w	$12(a0)
00019648 6A00                       		bpl.s	loc_18F5C
0001964A 4EB9 0000 DBA8             		jsr	ObjectFall
00019650 3028 0034                  		move.w	$34(a0),d0
00019654 0440 002F                  		subi.w	#$2F,d0
00019658 B068 000C                  		cmp.w	$C(a0),d0
0001965C 6E00                       		bgt.s	loc_18F58
0001965E 4EB9 0000 DBA8             		jsr	ObjectFall
00019664                            
00019664                            loc_18F58:
00019664 6000 FF20                  		bra.w	loc_18E7A
00019668                            ; ===========================================================================
00019668                            
00019668                            loc_18F5C:
00019668 4EB9 0000 DBA8             		jsr	ObjectFall
0001966E 2268 003C                  		movea.l	$3C(a0),a1
00019672 45F9 0000 0000             		lea	(word_19018).l,a2
00019678 7000                       		moveq	#0,d0
0001967A 1029 001A                  		move.b	$1A(a1),d0
0001967E 3228 0008                  		move.w	8(a0),d1
00019682 9268 0030                  		sub.w	$30(a0),d1
00019686 6400                       		bcc.s	loc_18F7E
00019688 5440                       		addq.w	#2,d0
0001968A                            
0001968A                            loc_18F7E:
0001968A D040                       		add.w	d0,d0
0001968C 3228 0034                  		move.w	$34(a0),d1
00019690 D272 0000                  		add.w	(a2,d0.w),d1
00019694 B268 000C                  		cmp.w	$C(a0),d1
00019698 6ECA                       		bgt.s	loc_18F58
0001969A 2268 003C                  		movea.l	$3C(a0),a1
0001969E 7202                       		moveq	#2,d1
000196A0 4A68 0010                  		tst.w	$10(a0)
000196A4 6B00                       		bmi.s	loc_18F9C
000196A6 7200                       		moveq	#0,d1
000196A8                            
000196A8                            loc_18F9C:
000196A8 317C 0000 0028             		move.w	#0,$28(a0)
000196AE                            
000196AE                            loc_18FA2:
000196AE 1341 003A                  		move.b	d1,$3A(a1)
000196B2 1141 003A                  		move.b	d1,$3A(a0)
000196B6 B229 001A                  		cmp.b	$1A(a1),d1
000196BA 6700                       		beq.s	loc_19008
000196BC 08A9 0003 0022             		bclr	#3,$22(a1)
000196C2 6700                       		beq.s	loc_19008
000196C4 4229 0025                  		clr.b	$25(a1)
000196C8 137C 0002 0024             		move.b	#2,$24(a1)
000196CE 45F8 D000                  		lea	($FFFFD000).w,a2
000196D2 3568 0012 0012             		move.w	$12(a0),$12(a2)
000196D8 446A 0012                  		neg.w	$12(a2)
000196DC 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
000196E2 6600                       		bne.s	loc_18FDC
000196E4 E0EA 0012                  		asr	$12(a2)
000196E8                            
000196E8                            loc_18FDC:
000196E8 08EA 0001 0022             		bset	#1,$22(a2)
000196EE 08AA 0003 0022             		bclr	#3,$22(a2)
000196F4 422A 003C                  		clr.b	$3C(a2)
000196F8 2F08                       		move.l	a0,-(sp)
000196FA 41D2                       		lea	(a2),a0
000196FC 4EBA A336                  		jsr	Obj01_ChkRoll
00019700 205F                       		movea.l	(sp)+,a0
00019702 157C 0002 0024             		move.b	#2,$24(a2)
00019708 303C 00CC                  		move.w	#$CC,d0
0001970C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "spring" sound
00019712                            
00019712                            loc_19008:
00019712 4268 0010                  		clr.w	$10(a0)
00019716 4268 0012                  		clr.w	$12(a0)
0001971A 5428 0024                  		addq.b	#2,$24(a0)
0001971E 6000 FE66                  		bra.w	loc_18E7A
00019722                            ; ===========================================================================
00019722 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001972C                            		even
0001972C E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
00019730                            		even
00019730 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
00019734                            		even
00019734                            ; ===========================================================================
00019734                            
00019734                            Obj7B_Explode:				; XREF: Obj7B_Index
00019734 10BC 003F                  		move.b	#$3F,(a0)
00019738 4228 0024                  		clr.b	$24(a0)
0001973C 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
00019742 6700                       		beq.s	Obj7B_MakeFrag
00019744 4E75                       		rts	
00019746                            ; ===========================================================================
00019746                            
00019746                            Obj7B_MakeFrag:
00019746 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001974C 7203                       		moveq	#3,d1
0001974E 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
00019752                            
00019752                            Obj7B_Loop:
00019752 4EB9 0000 E080             		jsr	SingleObjLoad
00019758 6600                       		bne.s	loc_1909A
0001975A 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
0001975E 137C 000A 0024             		move.b	#$A,$24(a1)
00019764 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
0001976C 137C 0003 0018             		move.b	#3,$18(a1)
00019772 337C 0518 0002             		move.w	#$518,2(a1)
00019778 3368 0008 0008             		move.w	8(a0),8(a1)
0001977E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019784 335A 0010                  		move.w	(a2)+,$10(a1)
00019788 335A 0012                  		move.w	(a2)+,$12(a1)
0001978C 137C 0098 0020             		move.b	#$98,$20(a1)
00019792 0029 0004 0001             		ori.b	#4,1(a1)
00019798 08E9 0007 0001             		bset	#7,1(a1)
0001979E 137C 000C 0019             		move.b	#$C,$19(a1)
000197A4                            
000197A4                            loc_1909A:
000197A4 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
000197A8                            
000197A8 4E75                       		rts	
000197AA                            ; ===========================================================================
000197AA FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
000197AE FF60 FDC0                  		dc.w $FF60, $FDC0
000197B2 0100 FCC0                  		dc.w $100, $FCC0
000197B6 00A0 FDC0                  		dc.w $A0, $FDC0
000197BA                            ; ===========================================================================
000197BA                            
000197BA                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
000197BA 4EB9 0000 DBD4             		jsr	SpeedToPos
000197C0 3168 0008 0030             		move.w	8(a0),$30(a0)
000197C6 3168 000C 0034             		move.w	$C(a0),$34(a0)
000197CC 0668 0018 0012             		addi.w	#$18,$12(a0)
000197D2 7004                       		moveq	#4,d0
000197D4 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
000197D8 E448                       		lsr.w	#2,d0
000197DA 1140 001A                  		move.b	d0,$1A(a0)
000197DE 4A28 0001                  		tst.b	1(a0)
000197E2 6A00 F7DC                  		bpl.w	Obj7A_Delete
000197E6 4E75                       		rts	
000197E8                            ; ===========================================================================
000197E8                            ; ---------------------------------------------------------------------------
000197E8                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
000197E8                            ; ---------------------------------------------------------------------------
000197E8                            Map_obj7B:
000197E8                            	include "_maps\obj7B.asm"
000197E8                            ; ---------------------------------------------------------------------------
000197E8                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
000197E8                            ; ---------------------------------------------------------------------------
000197E8 0000                       		dc.w byte_190E2-Map_obj7B
000197EA 0000                       		dc.w byte_190E8-Map_obj7B
000197EC 01                         byte_190E2:	dc.b 1
000197ED FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000197F2 01                         byte_190E8:	dc.b 1
000197F3 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000197F8                            		even
000197F8                            		even
000197F8                            
000197F8                            ; ===========================================================================
000197F8                            ; ---------------------------------------------------------------------------
000197F8                            ; Object 75 - Eggman (SYZ)
000197F8                            ; ---------------------------------------------------------------------------
000197F8                            
000197F8                            Obj75:					; XREF: Obj_Index
000197F8 7000                       		moveq	#0,d0
000197FA 1028 0024                  		move.b	$24(a0),d0
000197FE 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
00019802 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
00019806                            ; ===========================================================================
00019806 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
00019808 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001980A 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001980C 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001980E 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
00019810                            
00019810 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
00019813 0401 05                    		dc.b 4,	1, 5
00019816 0607 05                    		dc.b 6,	7, 5
00019819 0800 05                    		dc.b 8,	0, 5
0001981C                            ; ===========================================================================
0001981C                            
0001981C                            Obj75_Main:				; XREF: Obj75_Index
0001981C 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
00019822 317C 04DA 000C             		move.w	#$4DA,$C(a0)
00019828 3168 0008 0030             		move.w	8(a0),$30(a0)
0001982E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019834 117C 000F 0020             		move.b	#$F,$20(a0)
0001983A 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019840 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
00019844 2248                       		movea.l	a0,a1
00019846 7203                       		moveq	#3,d1
00019848 6000                       		bra.s	Obj75_LoadBoss
0001984A                            ; ===========================================================================
0001984A                            
0001984A                            Obj75_Loop:
0001984A 4EB9 0000 E096             		jsr	SingleObjLoad2
00019850 6600                       		bne.s	Obj75_ShipMain
00019852 12BC 0075                  		move.b	#$75,(a1)
00019856 3368 0008 0008             		move.w	8(a0),8(a1)
0001985C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019862                            
00019862                            Obj75_LoadBoss:				; XREF: Obj75_Main
00019862 08A8 0000 0022             		bclr	#0,$22(a0)
00019868 4229 0025                  		clr.b	$25(a1)
0001986C 135A 0024                  		move.b	(a2)+,$24(a1)
00019870 135A 001C                  		move.b	(a2)+,$1C(a1)
00019874 135A 0018                  		move.b	(a2)+,$18(a1)
00019878 237C 0001 8420 0004        		move.l	#Map_Eggman,4(a1)
00019880 337C 0400 0002             		move.w	#$400,2(a1)
00019886 137C 0004 0001             		move.b	#4,1(a1)
0001988C 137C 0020 0019             		move.b	#$20,$19(a1)
00019892 2348 0034                  		move.l	a0,$34(a1)
00019896 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001989A                            
0001989A                            Obj75_ShipMain:				; XREF: Obj75_Index
0001989A 7000                       		moveq	#0,d0
0001989C 1028 0025                  		move.b	$25(a0),d0
000198A0 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
000198A4 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
000198A8 43F9 0001 83D0             		lea	(Ani_Eggman).l,a1
000198AE 4EB9 0000 ACC4             		jsr	AnimateSprite
000198B4 7003                       		moveq	#3,d0
000198B6 C028 0022                  		and.b	$22(a0),d0
000198BA 0228 00FC 0001             		andi.b	#$FC,1(a0)
000198C0 8128 0001                  		or.b	d0,1(a0)
000198C4 4EF9 0000 DBFA             		jmp	DisplaySprite
000198CA                            ; ===========================================================================
000198CA 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
000198CE 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
000198D2 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
000198D6                            ; ===========================================================================
000198D6                            
000198D6                            loc_191CC:				; XREF: Obj75_ShipIndex
000198D6 317C FF00 0010             		move.w	#-$100,$10(a0)
000198DC 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
000198E2 6400                       		bcc.s	loc_191DE
000198E4 5428 0025                  		addq.b	#2,$25(a0)
000198E8                            
000198E8                            loc_191DE:
000198E8 1028 003F                  		move.b	$3F(a0),d0
000198EC 5428 003F                  		addq.b	#2,$3F(a0)
000198F0 4EB9 0000 2C60             		jsr	(CalcSine).l
000198F6 E440                       		asr.w	#2,d0
000198F8 3140 0012                  		move.w	d0,$12(a0)
000198FC                            
000198FC                            loc_191F2:
000198FC 6100 E690                  		bsr.w	BossMove
00019900 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019906 3168 0030 0008             		move.w	$30(a0),8(a0)
0001990C                            
0001990C                            loc_19202:
0001990C 3028 0008                  		move.w	8(a0),d0
00019910 0440 2C00                  		subi.w	#$2C00,d0
00019914 EA48                       		lsr.w	#5,d0
00019916 1140 0034                  		move.b	d0,$34(a0)
0001991A 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019920 6400                       		bcc.s	locret_19256
00019922 4A28 0022                  		tst.b	$22(a0)
00019926 6B00                       		bmi.s	loc_19258
00019928 4A28 0020                  		tst.b	$20(a0)
0001992C 6600                       		bne.s	locret_19256
0001992E 4A28 003E                  		tst.b	$3E(a0)
00019932 6600                       		bne.s	loc_1923A
00019934 117C 0020 003E             		move.b	#$20,$3E(a0)
0001993A 303C 00AC                  		move.w	#$AC,d0
0001993E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019944                            
00019944                            loc_1923A:
00019944 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019948 7000                       		moveq	#0,d0
0001994A 4A51                       		tst.w	(a1)
0001994C 6600                       		bne.s	loc_19248
0001994E 303C 0EEE                  		move.w	#$EEE,d0
00019952                            
00019952                            loc_19248:
00019952 3280                       		move.w	d0,(a1)
00019954 5328 003E                  		subq.b	#1,$3E(a0)
00019958 6600                       		bne.s	locret_19256
0001995A 117C 000F 0020             		move.b	#$F,$20(a0)
00019960                            
00019960                            locret_19256:
00019960 4E75                       		rts	
00019962                            ; ===========================================================================
00019962                            
00019962                            loc_19258:				; XREF: loc_19202
00019962 7064                       		moveq	#100,d0
00019964 6100 0000                  		bsr.w	AddPoints
00019968 117C 0006 0025             		move.b	#6,$25(a0)
0001996E 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019974 4268 0010                  		clr.w	$10(a0)
00019978 4E75                       		rts	
0001997A                            ; ===========================================================================
0001997A                            
0001997A                            loc_19270:				; XREF: Obj75_ShipIndex
0001997A 3028 0030                  		move.w	$30(a0),d0
0001997E 317C 0140 0010             		move.w	#$140,$10(a0)
00019984 0828 0000 0022             		btst	#0,$22(a0)
0001998A 6600                       		bne.s	loc_1928E
0001998C 4468 0010                  		neg.w	$10(a0)
00019990 0C40 2C08                  		cmpi.w	#$2C08,d0
00019994 6E00                       		bgt.s	loc_1929E
00019996 6000                       		bra.s	loc_19294
00019998                            ; ===========================================================================
00019998                            
00019998                            loc_1928E:
00019998 0C40 2D38                  		cmpi.w	#$2D38,d0
0001999C 6D00                       		blt.s	loc_1929E
0001999E                            
0001999E                            loc_19294:
0001999E 0868 0000 0022             		bchg	#0,$22(a0)
000199A4 4228 003D                  		clr.b	$3D(a0)
000199A8                            
000199A8                            loc_1929E:
000199A8 0440 2C10                  		subi.w	#$2C10,d0
000199AC 0240 001F                  		andi.w	#$1F,d0
000199B0 0440 001F                  		subi.w	#$1F,d0
000199B4 6A00                       		bpl.s	loc_192AE
000199B6 4440                       		neg.w	d0
000199B8                            
000199B8                            loc_192AE:
000199B8 5340                       		subq.w	#1,d0
000199BA 6E00                       		bgt.s	loc_192E8
000199BC 4A28 003D                  		tst.b	$3D(a0)
000199C0 6600                       		bne.s	loc_192E8
000199C2 3238 D008                  		move.w	($FFFFD008).w,d1
000199C6 0441 2C00                  		subi.w	#$2C00,d1
000199CA EA41                       		asr.w	#5,d1
000199CC B228 0034                  		cmp.b	$34(a0),d1
000199D0 6600                       		bne.s	loc_192E8
000199D2 7000                       		moveq	#0,d0
000199D4 1028 0034                  		move.b	$34(a0),d0
000199D8 EB40                       		asl.w	#5,d0
000199DA 0640 2C10                  		addi.w	#$2C10,d0
000199DE 3140 0030                  		move.w	d0,$30(a0)
000199E2 6100 0000                  		bsr.w	Obj75_FindBlocks
000199E6 5428 0025                  		addq.b	#2,$25(a0)
000199EA 4268 0028                  		clr.w	$28(a0)
000199EE 4268 0010                  		clr.w	$10(a0)
000199F2                            
000199F2                            loc_192E8:
000199F2 6000 FEF4                  		bra.w	loc_191DE
000199F6                            ; ===========================================================================
000199F6                            
000199F6                            loc_192EC:				; XREF: Obj75_ShipIndex
000199F6 7000                       		moveq	#0,d0
000199F8 1028 0028                  		move.b	$28(a0),d0
000199FC 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
00019A00 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
00019A04                            ; ===========================================================================
00019A04 0000                       off_192FA:	dc.w loc_19302-off_192FA
00019A06 0000                       		dc.w loc_19348-off_192FA
00019A08 0000                       		dc.w loc_1938E-off_192FA
00019A0A 0000                       		dc.w loc_193D0-off_192FA
00019A0C                            ; ===========================================================================
00019A0C                            
00019A0C                            loc_19302:				; XREF: off_192FA
00019A0C 317C 0180 0012             		move.w	#$180,$12(a0)
00019A12 3028 0038                  		move.w	$38(a0),d0
00019A16 0C40 0556                  		cmpi.w	#$556,d0
00019A1A 6500                       		bcs.s	loc_19344
00019A1C 317C 0556 0038             		move.w	#$556,$38(a0)
00019A22 4268 003C                  		clr.w	$3C(a0)
00019A26 70FF                       		moveq	#-1,d0
00019A28 3028 0036                  		move.w	$36(a0),d0
00019A2C 6700                       		beq.s	loc_1933C
00019A2E 2240                       		movea.l	d0,a1
00019A30 137C 00FF 0029             		move.b	#-1,$29(a1)
00019A36 117C 00FF 0029             		move.b	#-1,$29(a0)
00019A3C 2348 0034                  		move.l	a0,$34(a1)
00019A40 317C 0032 003C             		move.w	#$32,$3C(a0)
00019A46                            
00019A46                            loc_1933C:
00019A46 4268 0012                  		clr.w	$12(a0)
00019A4A 5428 0028                  		addq.b	#2,$28(a0)
00019A4E                            
00019A4E                            loc_19344:
00019A4E 6000 FEAC                  		bra.w	loc_191F2
00019A52                            ; ===========================================================================
00019A52                            
00019A52                            loc_19348:				; XREF: off_192FA
00019A52 5368 003C                  		subq.w	#1,$3C(a0)
00019A56 6A00                       		bpl.s	loc_19366
00019A58 5428 0028                  		addq.b	#2,$28(a0)
00019A5C 317C F800 0012             		move.w	#-$800,$12(a0)
00019A62 4A68 0036                  		tst.w	$36(a0)
00019A66 6600                       		bne.s	loc_19362
00019A68 E0E8 0012                  		asr	$12(a0)
00019A6C                            
00019A6C                            loc_19362:
00019A6C 7000                       		moveq	#0,d0
00019A6E 6000                       		bra.s	loc_1937C
00019A70                            ; ===========================================================================
00019A70                            
00019A70                            loc_19366:
00019A70 7000                       		moveq	#0,d0
00019A72 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00019A78 6E00                       		bgt.s	loc_1937C
00019A7A 7002                       		moveq	#2,d0
00019A7C 0828 0001 003D             		btst	#1,$3D(a0)
00019A82 6700                       		beq.s	loc_1937C
00019A84 4440                       		neg.w	d0
00019A86                            
00019A86                            loc_1937C:
00019A86 D068 0038                  		add.w	$38(a0),d0
00019A8A 3140 000C                  		move.w	d0,$C(a0)
00019A8E 3168 0030 0008             		move.w	$30(a0),8(a0)
00019A94 6000 FE76                  		bra.w	loc_19202
00019A98                            ; ===========================================================================
00019A98                            
00019A98                            loc_1938E:				; XREF: off_192FA
00019A98 303C 04DA                  		move.w	#$4DA,d0
00019A9C 4A68 0036                  		tst.w	$36(a0)
00019AA0 6700                       		beq.s	loc_1939C
00019AA2 0440 0018                  		subi.w	#$18,d0
00019AA6                            
00019AA6                            loc_1939C:
00019AA6 B068 0038                  		cmp.w	$38(a0),d0
00019AAA 6D00                       		blt.s	loc_193BE
00019AAC 317C 0008 003C             		move.w	#8,$3C(a0)
00019AB2 4A68 0036                  		tst.w	$36(a0)
00019AB6 6700                       		beq.s	loc_193B4
00019AB8 317C 002D 003C             		move.w	#$2D,$3C(a0)
00019ABE                            
00019ABE                            loc_193B4:
00019ABE 5428 0028                  		addq.b	#2,$28(a0)
00019AC2 4268 0012                  		clr.w	$12(a0)
00019AC6 6000                       		bra.s	loc_193CC
00019AC8                            ; ===========================================================================
00019AC8                            
00019AC8                            loc_193BE:
00019AC8 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
00019ACE 6C00                       		bge.s	loc_193CC
00019AD0 0668 000C 0012             		addi.w	#$C,$12(a0)
00019AD6                            
00019AD6                            loc_193CC:
00019AD6 6000 FE24                  		bra.w	loc_191F2
00019ADA                            ; ===========================================================================
00019ADA                            
00019ADA                            loc_193D0:				; XREF: off_192FA
00019ADA 5368 003C                  		subq.w	#1,$3C(a0)
00019ADE 6E00                       		bgt.s	loc_19406
00019AE0 6B00                       		bmi.s	loc_193EE
00019AE2 70FF                       		moveq	#-1,d0
00019AE4 3028 0036                  		move.w	$36(a0),d0
00019AE8 6700                       		beq.s	loc_193E8
00019AEA 2240                       		movea.l	d0,a1
00019AEC 137C 000A 0029             		move.b	#$A,$29(a1)
00019AF2                            
00019AF2                            loc_193E8:
00019AF2 4268 0036                  		clr.w	$36(a0)
00019AF6 6000                       		bra.s	loc_19406
00019AF8                            ; ===========================================================================
00019AF8                            
00019AF8                            loc_193EE:
00019AF8 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
00019AFE 6600                       		bne.s	loc_19406
00019B00 4228 0029                  		clr.b	$29(a0)
00019B04 5528 0025                  		subq.b	#2,$25(a0)
00019B08 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019B0E 6000                       		bra.s	loc_19446
00019B10                            ; ===========================================================================
00019B10                            
00019B10                            loc_19406:
00019B10 7001                       		moveq	#1,d0
00019B12 4A68 0036                  		tst.w	$36(a0)
00019B16 6700                       		beq.s	loc_19410
00019B18 7002                       		moveq	#2,d0
00019B1A                            
00019B1A                            loc_19410:
00019B1A 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00019B20 6700                       		beq.s	loc_19424
00019B22 6D00                       		blt.s	loc_1941C
00019B24 4440                       		neg.w	d0
00019B26                            
00019B26                            loc_1941C:
00019B26 4A68 0036                  		tst.w	$36(a0)
00019B2A D168 0038                  		add.w	d0,$38(a0)
00019B2E                            
00019B2E                            loc_19424:
00019B2E 7000                       		moveq	#0,d0
00019B30 4A68 0036                  		tst.w	$36(a0)
00019B34 6700                       		beq.s	loc_19438
00019B36 7002                       		moveq	#2,d0
00019B38 0828 0000 003D             		btst	#0,$3D(a0)
00019B3E 6700                       		beq.s	loc_19438
00019B40 4440                       		neg.w	d0
00019B42                            
00019B42                            loc_19438:
00019B42 D068 0038                  		add.w	$38(a0),d0
00019B46 3140 000C                  		move.w	d0,$C(a0)
00019B4A 3168 0030 0008             		move.w	$30(a0),8(a0)
00019B50                            
00019B50                            loc_19446:
00019B50 6000 FDBA                  		bra.w	loc_19202
00019B54                            
00019B54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019B54                            
00019B54                            
00019B54                            Obj75_FindBlocks:			; XREF: loc_192AE
00019B54 4268 0036                  		clr.w	$36(a0)
00019B58 43F8 D040                  		lea	($FFFFD040).w,a1
00019B5C 703E                       		moveq	#$3E,d0
00019B5E 7276                       		moveq	#$76,d1
00019B60 1428 0034                  		move.b	$34(a0),d2
00019B64                            
00019B64                            Obj75_FindLoop:
00019B64 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00019B66 6600                       		bne.s	loc_1946A	; if not, branch
00019B68 B429 0028                  		cmp.b	$28(a1),d2
00019B6C 6600                       		bne.s	loc_1946A
00019B6E 3149 0036                  		move.w	a1,$36(a0)
00019B72 6000                       		bra.s	locret_19472
00019B74                            ; ===========================================================================
00019B74                            
00019B74                            loc_1946A:
00019B74 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00019B78 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019B7C                            
00019B7C                            locret_19472:
00019B7C 4E75                       		rts	
00019B7E                            ; End of function Obj75_FindBlocks
00019B7E                            
00019B7E                            ; ===========================================================================
00019B7E                            
00019B7E                            loc_19474:				; XREF: Obj75_ShipIndex
00019B7E 5368 003C                  		subq.w	#1,$3C(a0)
00019B82 6B00                       		bmi.s	loc_1947E
00019B84 6000 E3C6                  		bra.w	BossDefeated
00019B88                            ; ===========================================================================
00019B88                            
00019B88                            loc_1947E:
00019B88 5428 0025                  		addq.b	#2,$25(a0)
00019B8C 4268 0012                  		clr.w	$12(a0)
00019B90 08E8 0000 0022             		bset	#0,$22(a0)
00019B96 08A8 0007 0022             		bclr	#7,$22(a0)
00019B9C 4268 0010                  		clr.w	$10(a0)
00019BA0 317C FFFF 003C             		move.w	#-1,$3C(a0)
00019BA6 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019BAA 6600                       		bne.s	loc_194A8
00019BAC 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019BB2                            
00019BB2                            loc_194A8:
00019BB2 6000 FD58                  		bra.w	loc_19202
00019BB6                            ; ===========================================================================
00019BB6                            
00019BB6                            loc_194AC:				; XREF: Obj75_ShipIndex
00019BB6 5268 003C                  		addq.w	#1,$3C(a0)
00019BBA 6700                       		beq.s	loc_194BC
00019BBC 6A00                       		bpl.s	loc_194C2
00019BBE 0668 0018 0012             		addi.w	#$18,$12(a0)
00019BC4 6000                       		bra.s	loc_194EE
00019BC6                            ; ===========================================================================
00019BC6                            
00019BC6                            loc_194BC:
00019BC6 4268 0012                  		clr.w	$12(a0)
00019BCA 6000                       		bra.s	loc_194EE
00019BCC                            ; ===========================================================================
00019BCC                            
00019BCC                            loc_194C2:
00019BCC 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00019BD2 6500                       		bcs.s	loc_194DA
00019BD4 6700                       		beq.s	loc_194E0
00019BD6 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00019BDC 6500                       		bcs.s	loc_194EE
00019BDE 5428 0025                  		addq.b	#2,$25(a0)
00019BE2 6000                       		bra.s	loc_194EE
00019BE4                            ; ===========================================================================
00019BE4                            
00019BE4                            loc_194DA:
00019BE4 5168 0012                  		subq.w	#8,$12(a0)
00019BE8 6000                       		bra.s	loc_194EE
00019BEA                            ; ===========================================================================
00019BEA                            
00019BEA                            loc_194E0:
00019BEA 4268 0012                  		clr.w	$12(a0)
00019BEE 303C 0085                  		move.w	#$85,d0
00019BF2 4EB9 0000 15B6             		jsr	(PlaySound).l	; play SYZ music
00019BF8                            
00019BF8                            loc_194EE:
00019BF8 6000 FD02                  		bra.w	loc_191F2
00019BFC                            ; ===========================================================================
00019BFC                            
00019BFC                            loc_194F2:				; XREF: Obj75_ShipIndex
00019BFC 317C 0400 0010             		move.w	#$400,$10(a0)
00019C02 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019C08 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
00019C0E 6400                       		bcc.s	loc_1950C
00019C10 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019C14 6000                       		bra.s	loc_19512
00019C16                            ; ===========================================================================
00019C16                            
00019C16                            loc_1950C:
00019C16 4A28 0001                  		tst.b	1(a0)
00019C1A 6A00                       		bpl.s	Obj75_ShipDelete
00019C1C                            
00019C1C                            loc_19512:
00019C1C 6100 E370                  		bsr.w	BossMove
00019C20 6000 FCC6                  		bra.w	loc_191DE
00019C24                            ; ===========================================================================
00019C24                            
00019C24                            Obj75_ShipDelete:
00019C24 4EF9 0000 DC36             		jmp	DeleteObject
00019C2A                            ; ===========================================================================
00019C2A                            
00019C2A                            Obj75_FaceMain:				; XREF: Obj75_Index
00019C2A 7201                       		moveq	#1,d1
00019C2C 2268 0034                  		movea.l	$34(a0),a1
00019C30 7000                       		moveq	#0,d0
00019C32 1029 0025                  		move.b	$25(a1),d0
00019C36 303B 0000                  		move.w	off_19546(pc,d0.w),d0
00019C3A 4EBB 0000                  		jsr	off_19546(pc,d0.w)
00019C3E 1141 001C                  		move.b	d1,$1C(a0)
00019C42 1010                       		move.b	(a0),d0
00019C44 B011                       		cmp.b	(a1),d0
00019C46 6600                       		bne.s	Obj75_FaceDelete
00019C48 6000                       		bra.s	loc_195BE
00019C4A                            ; ===========================================================================
00019C4A                            
00019C4A                            Obj75_FaceDelete:
00019C4A 4EF9 0000 DC36             		jmp	DeleteObject
00019C50                            ; ===========================================================================
00019C50 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
00019C54 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
00019C58 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
00019C5C                            ; ===========================================================================
00019C5C                            
00019C5C                            loc_19552:				; XREF: off_19546
00019C5C 720A                       		moveq	#$A,d1
00019C5E 4E75                       		rts	
00019C60                            ; ===========================================================================
00019C60                            
00019C60                            loc_19556:				; XREF: off_19546
00019C60 7206                       		moveq	#6,d1
00019C62 4E75                       		rts	
00019C64                            ; ===========================================================================
00019C64                            
00019C64                            loc_1955A:				; XREF: off_19546
00019C64 7000                       		moveq	#0,d0
00019C66 1029 0028                  		move.b	$28(a1),d0
00019C6A 303B 0000                  		move.w	off_19568(pc,d0.w),d0
00019C6E 4EFB 0000                  		jmp	off_19568(pc,d0.w)
00019C72                            ; ===========================================================================
00019C72 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
00019C76 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
00019C7A                            ; ===========================================================================
00019C7A                            
00019C7A                            loc_19570:				; XREF: off_19568
00019C7A 6000                       		bra.s	loc_19574
00019C7C                            ; ===========================================================================
00019C7C                            
00019C7C                            loc_19572:				; XREF: off_19568
00019C7C 7206                       		moveq	#6,d1
00019C7E                            
00019C7E                            loc_19574:				; XREF: off_19546
00019C7E 4A29 0020                  		tst.b	$20(a1)
00019C82 6600                       		bne.s	loc_1957E
00019C84 7205                       		moveq	#5,d1
00019C86 4E75                       		rts	
00019C88                            ; ===========================================================================
00019C88                            
00019C88                            loc_1957E:
00019C88 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019C8E 6500                       		bcs.s	locret_19588
00019C90 7204                       		moveq	#4,d1
00019C92                            
00019C92                            locret_19588:
00019C92 4E75                       		rts	
00019C94                            ; ===========================================================================
00019C94                            
00019C94                            Obj75_FlameMain:			; XREF: Obj75_Index
00019C94 117C 0007 001C             		move.b	#7,$1C(a0)
00019C9A 2268 0034                  		movea.l	$34(a0),a1
00019C9E 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019CA4 6600                       		bne.s	loc_195AA
00019CA6 117C 000B 001C             		move.b	#$B,$1C(a0)
00019CAC 4A28 0001                  		tst.b	1(a0)
00019CB0 6A00                       		bpl.s	Obj75_FlameDelete
00019CB2 6000                       		bra.s	loc_195B6
00019CB4                            ; ===========================================================================
00019CB4                            
00019CB4                            loc_195AA:
00019CB4 4A69 0010                  		tst.w	$10(a1)
00019CB8 6700                       		beq.s	loc_195B6
00019CBA 117C 0008 001C             		move.b	#8,$1C(a0)
00019CC0                            
00019CC0                            loc_195B6:
00019CC0 6000                       		bra.s	loc_195BE
00019CC2                            ; ===========================================================================
00019CC2                            
00019CC2                            Obj75_FlameDelete:
00019CC2 4EF9 0000 DC36             		jmp	DeleteObject
00019CC8                            ; ===========================================================================
00019CC8                            
00019CC8                            loc_195BE:
00019CC8 43F9 0001 83D0             		lea	(Ani_Eggman).l,a1
00019CCE 4EB9 0000 ACC4             		jsr	AnimateSprite
00019CD4 2268 0034                  		movea.l	$34(a0),a1
00019CD8 3169 0008 0008             		move.w	8(a1),8(a0)
00019CDE 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019CE4                            
00019CE4                            loc_195DA:
00019CE4 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019CEA 7003                       		moveq	#3,d0
00019CEC C028 0022                  		and.b	$22(a0),d0
00019CF0 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019CF6 8128 0001                  		or.b	d0,1(a0)
00019CFA 4EF9 0000 DBFA             		jmp	DisplaySprite
00019D00                            ; ===========================================================================
00019D00                            
00019D00                            Obj75_SpikeMain:			; XREF: Obj75_Index
00019D00 217C 0001 84E8 0004        		move.l	#Map_BossItems,4(a0)
00019D08 317C 246C 0002             		move.w	#$246C,2(a0)
00019D0E 117C 0005 001A             		move.b	#5,$1A(a0)
00019D14 2268 0034                  		movea.l	$34(a0),a1
00019D18 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019D1E 6600                       		bne.s	loc_1961C
00019D20 4A28 0001                  		tst.b	1(a0)
00019D24 6A00                       		bpl.s	Obj75_SpikeDelete
00019D26                            
00019D26                            loc_1961C:
00019D26 3169 0008 0008             		move.w	8(a1),8(a0)
00019D2C 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019D32 3028 003C                  		move.w	$3C(a0),d0
00019D36 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019D3C 6600                       		bne.s	loc_19652
00019D3E 0C29 0006 0028             		cmpi.b	#6,$28(a1)
00019D44 6700                       		beq.s	loc_1964C
00019D46 4A29 0028                  		tst.b	$28(a1)
00019D4A 6600                       		bne.s	loc_19658
00019D4C 0C40 0094                  		cmpi.w	#$94,d0
00019D50 6C00                       		bge.s	loc_19658
00019D52 5E40                       		addq.w	#7,d0
00019D54 6000                       		bra.s	loc_19658
00019D56                            ; ===========================================================================
00019D56                            
00019D56                            loc_1964C:
00019D56 4A69 003C                  		tst.w	$3C(a1)
00019D5A 6A00                       		bpl.s	loc_19658
00019D5C                            
00019D5C                            loc_19652:
00019D5C 4A40                       		tst.w	d0
00019D5E 6F00                       		ble.s	loc_19658
00019D60 5B40                       		subq.w	#5,d0
00019D62                            
00019D62                            loc_19658:
00019D62 3140 003C                  		move.w	d0,$3C(a0)
00019D66 E440                       		asr.w	#2,d0
00019D68 D168 000C                  		add.w	d0,$C(a0)
00019D6C 117C 0008 0019             		move.b	#8,$19(a0)
00019D72 117C 000C 0016             		move.b	#$C,$16(a0)
00019D78 4228 0020                  		clr.b	$20(a0)
00019D7C 2268 0034                  		movea.l	$34(a0),a1
00019D80 4A29 0020                  		tst.b	$20(a1)
00019D84 6700                       		beq.s	loc_19688
00019D86 4A29 0029                  		tst.b	$29(a1)
00019D8A 6600                       		bne.s	loc_19688
00019D8C 117C 0084 0020             		move.b	#$84,$20(a0)
00019D92                            
00019D92                            loc_19688:
00019D92 6000 FF50                  		bra.w	loc_195DA
00019D96                            ; ===========================================================================
00019D96                            
00019D96                            Obj75_SpikeDelete:
00019D96 4EF9 0000 DC36             		jmp	DeleteObject
00019D9C                            ; ===========================================================================
00019D9C                            ; ---------------------------------------------------------------------------
00019D9C                            ; Object 76 - blocks that Eggman picks up (SYZ)
00019D9C                            ; ---------------------------------------------------------------------------
00019D9C                            
00019D9C                            Obj76:					; XREF: Obj_Index
00019D9C 7000                       		moveq	#0,d0
00019D9E 1028 0024                  		move.b	$24(a0),d0
00019DA2 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
00019DA6 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
00019DAA                            ; ===========================================================================
00019DAA 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
00019DAC 0000                       		dc.w Obj76_Action-Obj76_Index
00019DAE 0000                       		dc.w loc_19762-Obj76_Index
00019DB0                            ; ===========================================================================
00019DB0                            
00019DB0                            Obj76_Main:				; XREF: Obj76_Index
00019DB0 7800                       		moveq	#0,d4
00019DB2 3A3C 2C10                  		move.w	#$2C10,d5
00019DB6 7C09                       		moveq	#9,d6
00019DB8 43D0                       		lea	(a0),a1
00019DBA 6000                       		bra.s	Obj76_MakeBlock
00019DBC                            ; ===========================================================================
00019DBC                            
00019DBC                            Obj76_Loop:
00019DBC 4EB9 0000 E080             		jsr	SingleObjLoad
00019DC2 6600                       		bne.s	Obj76_ExitLoop
00019DC4                            
00019DC4                            Obj76_MakeBlock:			; XREF: Obj76_Main
00019DC4 12BC 0076                  		move.b	#$76,(a1)
00019DC8 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
00019DD0 337C 4000 0002             		move.w	#$4000,2(a1)
00019DD6 137C 0004 0001             		move.b	#4,1(a1)
00019DDC 137C 0010 0019             		move.b	#$10,$19(a1)
00019DE2 137C 0010 0016             		move.b	#$10,$16(a1)
00019DE8 137C 0003 0018             		move.b	#3,$18(a1)
00019DEE 3345 0008                  		move.w	d5,8(a1)	; set x-position
00019DF2 337C 0582 000C             		move.w	#$582,$C(a1)
00019DF8 3344 0028                  		move.w	d4,$28(a1)
00019DFC 0644 0101                  		addi.w	#$101,d4
00019E00 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
00019E04 5429 0024                  		addq.b	#2,$24(a1)
00019E08 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
00019E0C                            
00019E0C                            Obj76_ExitLoop:
00019E0C 4E75                       		rts	
00019E0E                            ; ===========================================================================
00019E0E                            
00019E0E                            Obj76_Action:				; XREF: Obj76_Index
00019E0E 1028 0029                  		move.b	$29(a0),d0
00019E12 B028 0028                  		cmp.b	$28(a0),d0
00019E16 6700                       		beq.s	Obj76_Solid
00019E18 4A00                       		tst.b	d0
00019E1A 6B00                       		bmi.s	loc_19718
00019E1C                            
00019E1C                            loc_19712:
00019E1C 6100 0000                  		bsr.w	Obj76_Break
00019E20 6000                       		bra.s	Obj76_Display
00019E22                            ; ===========================================================================
00019E22                            
00019E22                            loc_19718:
00019E22 2268 0034                  		movea.l	$34(a0),a1
00019E26 4A29 0021                  		tst.b	$21(a1)
00019E2A 67F0                       		beq.s	loc_19712
00019E2C 3169 0008 0008             		move.w	8(a1),8(a0)
00019E32 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019E38 0668 002C 000C             		addi.w	#$2C,$C(a0)
00019E3E B2C8                       		cmpa.w	a0,a1
00019E40 6500                       		bcs.s	Obj76_Display
00019E42 3029 0012                  		move.w	$12(a1),d0
00019E46 48C0                       		ext.l	d0
00019E48 E080                       		asr.l	#8,d0
00019E4A D168 000C                  		add.w	d0,$C(a0)
00019E4E 6000                       		bra.s	Obj76_Display
00019E50                            ; ===========================================================================
00019E50                            
00019E50                            Obj76_Solid:				; XREF: Obj76_Action
00019E50 323C 001B                  		move.w	#$1B,d1
00019E54 343C 0010                  		move.w	#$10,d2
00019E58 363C 0011                  		move.w	#$11,d3
00019E5C 3828 0008                  		move.w	8(a0),d4
00019E60 4EB9 0000 FFCA             		jsr	SolidObject
00019E66                            
00019E66                            Obj76_Display:				; XREF: Obj76_Action
00019E66 4EF9 0000 DBFA             		jmp	DisplaySprite
00019E6C                            ; ===========================================================================
00019E6C                            
00019E6C                            loc_19762:				; XREF: Obj76_Index
00019E6C 4A28 0001                  		tst.b	1(a0)
00019E70 6A00                       		bpl.s	Obj76_Delete
00019E72 4EB9 0000 DBA8             		jsr	ObjectFall
00019E78 4EF9 0000 DBFA             		jmp	DisplaySprite
00019E7E                            ; ===========================================================================
00019E7E                            
00019E7E                            Obj76_Delete:
00019E7E 4EF9 0000 DC36             		jmp	DeleteObject
00019E84                            
00019E84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019E84                            
00019E84                            
00019E84                            Obj76_Break:				; XREF: Obj76_Action
00019E84 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
00019E88 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
00019E8C 7801                       		moveq	#1,d4
00019E8E 7203                       		moveq	#3,d1
00019E90 7438                       		moveq	#$38,d2
00019E92 5428 0024                  		addq.b	#2,$24(a0)
00019E96 117C 0008 0019             		move.b	#8,$19(a0)
00019E9C 117C 0008 0016             		move.b	#8,$16(a0)
00019EA2 43D0                       		lea	(a0),a1
00019EA4 6000                       		bra.s	Obj76_MakeFrag
00019EA6                            ; ===========================================================================
00019EA6                            
00019EA6                            Obj76_LoopFrag:
00019EA6 4EB9 0000 E096             		jsr	SingleObjLoad2
00019EAC 6600                       		bne.s	loc_197D4
00019EAE                            
00019EAE                            Obj76_MakeFrag:
00019EAE 45D0                       		lea	(a0),a2
00019EB0 47D1                       		lea	(a1),a3
00019EB2 7603                       		moveq	#3,d3
00019EB4                            
00019EB4                            loc_197AA:
00019EB4 26DA                       		move.l	(a2)+,(a3)+
00019EB6 26DA                       		move.l	(a2)+,(a3)+
00019EB8 26DA                       		move.l	(a2)+,(a3)+
00019EBA 26DA                       		move.l	(a2)+,(a3)+
00019EBC 51CB FFF6                  		dbf	d3,loc_197AA
00019EC0                            
00019EC0 335C 0010                  		move.w	(a4)+,$10(a1)
00019EC4 335C 0012                  		move.w	(a4)+,$12(a1)
00019EC8 361D                       		move.w	(a5)+,d3
00019ECA D769 0008                  		add.w	d3,8(a1)
00019ECE 361D                       		move.w	(a5)+,d3
00019ED0 D769 000C                  		add.w	d3,$C(a1)
00019ED4 1344 001A                  		move.b	d4,$1A(a1)
00019ED8 5244                       		addq.w	#1,d4
00019EDA 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
00019EDE                            
00019EDE                            loc_197D4:
00019EDE 303C 00CB                  		move.w	#$CB,d0
00019EE2 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play smashing sound
00019EE8                            ; End of function Obj76_Break
00019EE8                            
00019EE8                            ; ===========================================================================
00019EE8 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
00019EEC 0180 FE00                  		dc.w $180, $FE00
00019EF0 FF00 FF00                  		dc.w $FF00, $FF00
00019EF4 0100 FF00                  		dc.w $100, $FF00
00019EF8 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
00019EFC 0010 0000                  		dc.w $10, 0
00019F00 0000 0010                  		dc.w 0,	$10
00019F04 0010 0010                  		dc.w $10, $10
00019F08                            ; ---------------------------------------------------------------------------
00019F08                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
00019F08                            ; ---------------------------------------------------------------------------
00019F08                            Map_obj76:
00019F08                            	include "_maps\obj76.asm"
00019F08                            ; ---------------------------------------------------------------------------
00019F08                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
00019F08                            ; ---------------------------------------------------------------------------
00019F08 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
00019F0C 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
00019F10 0000                       		dc.w byte_19826-Map_obj76
00019F12 02                         byte_19808:	dc.b 2
00019F13 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
00019F18 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
00019F1D 00                         		dc.b 0
00019F1E 01                         byte_19814:	dc.b 1
00019F1F F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
00019F24 01                         byte_1981A:	dc.b 1
00019F25 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
00019F2A 01                         byte_19820:	dc.b 1
00019F2B F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
00019F30 01                         byte_19826:	dc.b 1
00019F31 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
00019F36                            		even
00019F36                            		even
00019F36                            
00019F36                            ; ===========================================================================
00019F36                            
00019F36                            loc_1982C:				; XREF: loc_19C62; loc_19C80
00019F36 4EF9 0000 DC36             		jmp	DeleteObject
00019F3C                            ; ===========================================================================
00019F3C                            ; ---------------------------------------------------------------------------
00019F3C                            ; Object 82 - Eggman (SBZ2)
00019F3C                            ; ---------------------------------------------------------------------------
00019F3C                            
00019F3C                            Obj82:					; XREF: Obj_Index
00019F3C 7000                       		moveq	#0,d0
00019F3E 1028 0024                  		move.b	$24(a0),d0
00019F42 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
00019F46 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
00019F4A                            ; ===========================================================================
00019F4A 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
00019F4C 0000                       		dc.w Obj82_Eggman-Obj82_Index
00019F4E 0000                       		dc.w Obj82_Switch-Obj82_Index
00019F50                            
00019F50 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
00019F53 0400 03                    		dc.b 4,	0, 3
00019F56                            ; ===========================================================================
00019F56                            
00019F56                            Obj82_Main:				; XREF: Obj82_Index
00019F56 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
00019F5A 317C 2160 0008             		move.w	#$2160,8(a0)
00019F60 317C 05A4 000C             		move.w	#$5A4,$C(a0)
00019F66 117C 000F 0020             		move.b	#$F,$20(a0)
00019F6C 117C 0010 0021             		move.b	#$10,$21(a0)
00019F72 08A8 0000 0022             		bclr	#0,$22(a0)
00019F78 4228 0025                  		clr.b	$25(a0)
00019F7C 115A 0024                  		move.b	(a2)+,$24(a0)
00019F80 115A 001C                  		move.b	(a2)+,$1C(a0)
00019F84 115A 0018                  		move.b	(a2)+,$18(a0)
00019F88 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
00019F90 317C 0400 0002             		move.w	#$400,2(a0)
00019F96 117C 0004 0001             		move.b	#4,1(a0)
00019F9C 08E8 0007 0001             		bset	#7,1(a0)
00019FA2 117C 0020 0019             		move.b	#$20,$19(a0)
00019FA8 4EB9 0000 E096             		jsr	SingleObjLoad2
00019FAE 6600                       		bne.s	Obj82_Eggman
00019FB0 2348 0034                  		move.l	a0,$34(a1)
00019FB4 12BC 0082                  		move.b	#$82,(a1)	; load switch object
00019FB8 337C 2130 0008             		move.w	#$2130,8(a1)
00019FBE 337C 05BC 000C             		move.w	#$5BC,$C(a1)
00019FC4 4228 0025                  		clr.b	$25(a0)
00019FC8 135A 0024                  		move.b	(a2)+,$24(a1)
00019FCC 135A 001C                  		move.b	(a2)+,$1C(a1)
00019FD0 135A 0018                  		move.b	(a2)+,$18(a1)
00019FD4 237C 0000 C3EE 0004        		move.l	#Map_obj32,4(a1)
00019FDC 337C 04A4 0002             		move.w	#$4A4,2(a1)
00019FE2 137C 0004 0001             		move.b	#4,1(a1)
00019FE8 08E9 0007 0001             		bset	#7,1(a1)
00019FEE 137C 0010 0019             		move.b	#$10,$19(a1)
00019FF4 137C 0000 001A             		move.b	#0,$1A(a1)
00019FFA                            
00019FFA                            Obj82_Eggman:				; XREF: Obj82_Index
00019FFA 7000                       		moveq	#0,d0
00019FFC 1028 0025                  		move.b	$25(a0),d0
0001A000 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001A004 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001A008 43FA 0000                  		lea	Ani_obj82(pc),a1
0001A00C 4EB9 0000 ACC4             		jsr	AnimateSprite
0001A012 4EF9 0000 DBFA             		jmp	DisplaySprite
0001A018                            ; ===========================================================================
0001A018 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001A01A 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001A01C 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001A01E 0000                       		dc.w loc_19934-Obj82_EggIndex
0001A020                            ; ===========================================================================
0001A020                            
0001A020                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001A020 3028 0008                  		move.w	8(a0),d0
0001A024 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A028 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001A02C 6400                       		bcc.s	loc_19934	; if not, branch
0001A02E 5428 0025                  		addq.b	#2,$25(a0)
0001A032 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001A038 117C 0001 001C             		move.b	#1,$1C(a0)
0001A03E                            
0001A03E                            loc_19934:				; XREF: Obj82_EggIndex
0001A03E 4EF9 0000 DBD4             		jmp	SpeedToPos
0001A044                            ; ===========================================================================
0001A044                            
0001A044                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001A044 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001A048 6600                       		bne.s	loc_19954	; if time remains, branch
0001A04A 5428 0025                  		addq.b	#2,$25(a0)
0001A04E 117C 0002 001C             		move.b	#2,$1C(a0)
0001A054 5868 000C                  		addq.w	#4,$C(a0)
0001A058 317C 000F 003C             		move.w	#15,$3C(a0)
0001A05E                            
0001A05E                            loc_19954:
0001A05E 60DE                       		bra.s	loc_19934
0001A060                            ; ===========================================================================
0001A060                            
0001A060                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001A060 5368 003C                  		subq.w	#1,$3C(a0)
0001A064 6E00                       		bgt.s	loc_199D0
0001A066 6600                       		bne.s	loc_1996A
0001A068 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001A06E 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001A074                            
0001A074                            loc_1996A:
0001A074 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001A07A 6E00                       		bgt.s	loc_19976
0001A07C 4268 0010                  		clr.w	$10(a0)
0001A080                            
0001A080                            loc_19976:
0001A080 0668 0024 0012             		addi.w	#$24,$12(a0)
0001A086 4A68 0012                  		tst.w	$12(a0)
0001A08A 6B00                       		bmi.s	Obj82_FindBlocks
0001A08C 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001A092 6500                       		bcs.s	Obj82_FindBlocks
0001A094 317C 5357 0028             		move.w	#$5357,$28(a0)
0001A09A 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001A0A0 6500                       		bcs.s	Obj82_FindBlocks
0001A0A2 317C 059B 000C             		move.w	#$59B,$C(a0)
0001A0A8 4268 0012                  		clr.w	$12(a0)
0001A0AC                            
0001A0AC                            Obj82_FindBlocks:
0001A0AC 3028 0010                  		move.w	$10(a0),d0
0001A0B0 8068 0012                  		or.w	$12(a0),d0
0001A0B4 6600                       		bne.s	loc_199D0
0001A0B6 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001A0BA 703E                       		moveq	#$3E,d0
0001A0BC 7240                       		moveq	#$40,d1
0001A0BE                            
0001A0BE                            Obj82_FindLoop:	
0001A0BE D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001A0C0 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001A0C4 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001A0C8                            
0001A0C8 6600                       		bne.s	loc_199D0
0001A0CA 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001A0D0 5428 0025                  		addq.b	#2,$25(a0)
0001A0D4 117C 0001 001C             		move.b	#1,$1C(a0)
0001A0DA                            
0001A0DA                            loc_199D0:
0001A0DA 6000 FF62                  		bra.w	loc_19934
0001A0DE                            ; ===========================================================================
0001A0DE                            
0001A0DE                            Obj82_Switch:				; XREF: Obj82_Index
0001A0DE 7000                       		moveq	#0,d0
0001A0E0 1028 0025                  		move.b	$25(a0),d0
0001A0E4 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001A0E8 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001A0EC                            ; ===========================================================================
0001A0EC 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001A0EE 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001A0F0                            ; ===========================================================================
0001A0F0                            
0001A0F0                            loc_199E6:				; XREF: Obj82_SwIndex
0001A0F0 2268 0034                  		movea.l	$34(a0),a1
0001A0F4 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001A0FA 6600                       		bne.s	Obj82_SwDisplay
0001A0FC 117C 0001 001A             		move.b	#1,$1A(a0)
0001A102 5428 0025                  		addq.b	#2,$25(a0)
0001A106                            
0001A106                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001A106 4EF9 0000 DBFA             		jmp	DisplaySprite
0001A10C                            ; ===========================================================================
0001A10C                            Ani_obj82:
0001A10C                            	include "_anim\obj82.asm"
0001A10C                            ; ---------------------------------------------------------------------------
0001A10C                            ; Animation script - Eggman (SBZ2)
0001A10C                            ; ---------------------------------------------------------------------------
0001A10C 0000                       		dc.w byte_19A10-Ani_obj82
0001A10E 0000                       		dc.w byte_19A14-Ani_obj82
0001A110 0000                       		dc.w byte_19A18-Ani_obj82
0001A112 0000                       		dc.w byte_19A20-Ani_obj82
0001A114 0000                       		dc.w byte_19A24-Ani_obj82
0001A116 0000                       		dc.w byte_19A2A-Ani_obj82
0001A118 0000                       		dc.w byte_19A30-Ani_obj82
0001A11A 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001A11E 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001A122 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001A12A 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001A12E 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001A134 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001A13A 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001A13E                            		even
0001A13E                            		even
0001A13E                            
0001A13E                            ; ---------------------------------------------------------------------------
0001A13E                            ; Sprite mappings - Eggman (SBZ2)
0001A13E                            ; ---------------------------------------------------------------------------
0001A13E                            Map_obj82:
0001A13E                            	include "_maps\obj82.asm"
0001A13E                            ; ================================================================================
0001A13E                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
0001A13E                            ; ================================================================================
0001A13E                            
0001A13E                            DATAA16Z12RYSAF:
0001A13E 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001A142 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001A146 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001A14A 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001A14E 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001A152 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001A154 03                         DATAA16Z12RYSAF_0: dc.b $3
0001A155 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A15A E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A15F 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A164 04                         DATAA16Z12RYSAF_1: dc.b $4
0001A165 E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001A16A E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A16F 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A174 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A179 04                         DATAA16Z12RYSAF_2: dc.b $4
0001A17A E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001A17F E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001A184 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001A189 FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001A18E 03                         DATAA16Z12RYSAF_3: dc.b $3
0001A18F E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001A194 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001A199 F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001A19E 04                         DATAA16Z12RYSAF_4: dc.b $4
0001A19F E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001A1A4 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001A1A9 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001A1AE E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001A1B3 04                         DATAA16Z12RYSAF_5: dc.b $4
0001A1B4 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A1B9 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A1BE E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A1C3 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A1C8 07                         DATAA16Z12RYSAF_6: dc.b $7
0001A1C9 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A1CE E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A1D3 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001A1D8 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001A1DD F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001A1E2 F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001A1E7 F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001A1EC 04                         DATAA16Z12RYSAF_7: dc.b $4
0001A1ED 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001A1F2 E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001A1F7 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001A1FC F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001A201 05                         DATAA16Z12RYSAF_8: dc.b $5
0001A202 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001A207 E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001A20C 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001A211 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001A216 EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001A21B 08                         DATAA16Z12RYSAF_9: dc.b $8
0001A21C E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A221 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A226 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A22B 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A230 E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001A235 F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001A23A 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001A23F 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001A244 03                         DATAA16Z12RYSAF_A: dc.b $3
0001A245 EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001A24A F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001A24F EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001A254                            	even
0001A254                            	even
0001A254                            
0001A254                            ; ===========================================================================
0001A254                            ; ---------------------------------------------------------------------------
0001A254                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A254                            ; ---------------------------------------------------------------------------
0001A254                            
0001A254                            Obj83:					; XREF: Obj_Index
0001A254 7000                       		moveq	#0,d0
0001A256 1028 0024                  		move.b	$24(a0),d0
0001A25A 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001A25E 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001A262                            ; ===========================================================================
0001A262 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001A264 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001A266 0000                       		dc.w loc_19C36-Obj83_Index
0001A268 0000                       		dc.w loc_19C62-Obj83_Index
0001A26A 0000                       		dc.w loc_19C72-Obj83_Index
0001A26C 0000                       		dc.w loc_19C80-Obj83_Index
0001A26E                            ; ===========================================================================
0001A26E                            
0001A26E                            Obj83_Main:				; XREF: Obj83_Index
0001A26E 317C 2080 0008             		move.w	#$2080,8(a0)
0001A274 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001A27A 117C 0080 0019             		move.b	#$80,$19(a0)
0001A280 117C 0010 0016             		move.b	#$10,$16(a0)
0001A286 117C 0004 0001             		move.b	#4,1(a0)
0001A28C 08E8 0007 0001             		bset	#7,1(a0)
0001A292 7800                       		moveq	#0,d4
0001A294 3A3C 2010                  		move.w	#$2010,d5
0001A298 7C07                       		moveq	#7,d6
0001A29A 45E8 0030                  		lea	$30(a0),a2
0001A29E                            
0001A29E                            Obj83_MakeBlock:
0001A29E 4EB9 0000 E080             		jsr	SingleObjLoad
0001A2A4 6600                       		bne.s	Obj83_ExitMake
0001A2A6 34C9                       		move.w	a1,(a2)+
0001A2A8 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A2AC 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A2B4 337C 4518 0002             		move.w	#$4518,2(a1)
0001A2BA 137C 0004 0001             		move.b	#4,1(a1)
0001A2C0 137C 0010 0019             		move.b	#$10,$19(a1)
0001A2C6 137C 0010 0016             		move.b	#$10,$16(a1)
0001A2CC 137C 0003 0018             		move.b	#3,$18(a1)
0001A2D2 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A2D6 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A2DC 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A2E0 137C 0008 0024             		move.b	#8,$24(a1)
0001A2E6 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A2EA                            
0001A2EA                            Obj83_ExitMake:
0001A2EA 5428 0024                  		addq.b	#2,$24(a0)
0001A2EE 4E75                       		rts	
0001A2F0                            ; ===========================================================================
0001A2F0                            
0001A2F0                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A2F0 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A2F6 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A2F8 4228 001A                  		clr.b	$1A(a0)
0001A2FC 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A300                            
0001A300                            Obj83_Solid:
0001A300 7000                       		moveq	#0,d0
0001A302 1028 001A                  		move.b	$1A(a0),d0
0001A306 4400                       		neg.b	d0
0001A308 4880                       		ext.w	d0
0001A30A 5040                       		addq.w	#8,d0
0001A30C E940                       		asl.w	#4,d0
0001A30E 383C 2100                  		move.w	#$2100,d4
0001A312 9840                       		sub.w	d0,d4
0001A314 1140 0019                  		move.b	d0,$19(a0)
0001A318 3144 0008                  		move.w	d4,8(a0)
0001A31C 720B                       		moveq	#$B,d1
0001A31E D240                       		add.w	d0,d1
0001A320 7410                       		moveq	#$10,d2
0001A322 7611                       		moveq	#$11,d3
0001A324 4EF9 0000 FFCA             		jmp	SolidObject
0001A32A                            ; ===========================================================================
0001A32A                            
0001A32A                            loc_19C36:				; XREF: Obj83_Index
0001A32A 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A330 6400                       		bcc.s	Obj83_Solid2
0001A332 70FF                       		moveq	#-1,d0
0001A334 1028 001A                  		move.b	$1A(a0),d0
0001A338 4880                       		ext.w	d0
0001A33A D040                       		add.w	d0,d0
0001A33C 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A340 2240                       		movea.l	d0,a1
0001A342 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A348 5228 001A                  		addq.b	#1,$1A(a0)
0001A34C 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A352 6700                       		beq.s	loc_19C62
0001A354                            
0001A354                            Obj83_Solid2:
0001A354 60AA                       		bra.s	Obj83_Solid
0001A356                            ; ===========================================================================
0001A356                            
0001A356                            loc_19C62:				; XREF: Obj83_Index
0001A356 08A8 0003 0022             		bclr	#3,$22(a0)
0001A35C 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A362 6000 FBD2                  		bra.w	loc_1982C
0001A366                            ; ===========================================================================
0001A366                            
0001A366                            loc_19C72:				; XREF: Obj83_Index
0001A366 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A36C 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A36E 4EF9 0000 DBFA             		jmp	DisplaySprite
0001A374                            ; ===========================================================================
0001A374                            
0001A374                            loc_19C80:				; XREF: Obj83_Index
0001A374 4A28 0001                  		tst.b	1(a0)
0001A378 6A00 FBBC                  		bpl.w	loc_1982C
0001A37C 4EB9 0000 DBA8             		jsr	ObjectFall
0001A382 4EF9 0000 DBFA             		jmp	DisplaySprite
0001A388                            ; ===========================================================================
0001A388                            
0001A388                            Obj83_Break:				; XREF: loc_19C72
0001A388 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A38C 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A390 7801                       		moveq	#1,d4
0001A392 7203                       		moveq	#3,d1
0001A394 7438                       		moveq	#$38,d2
0001A396 5428 0024                  		addq.b	#2,$24(a0)
0001A39A 117C 0008 0019             		move.b	#8,$19(a0)
0001A3A0 117C 0008 0016             		move.b	#8,$16(a0)
0001A3A6 43D0                       		lea	(a0),a1
0001A3A8 6000                       		bra.s	Obj83_MakeFrag
0001A3AA                            ; ===========================================================================
0001A3AA                            
0001A3AA                            Obj83_LoopFrag:
0001A3AA 4EB9 0000 E096             		jsr	SingleObjLoad2
0001A3B0 6600                       		bne.s	Obj83_BreakSnd
0001A3B2                            
0001A3B2                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A3B2 45D0                       		lea	(a0),a2
0001A3B4 47D1                       		lea	(a1),a3
0001A3B6 7603                       		moveq	#3,d3
0001A3B8                            
0001A3B8                            loc_19CC4:
0001A3B8 26DA                       		move.l	(a2)+,(a3)+
0001A3BA 26DA                       		move.l	(a2)+,(a3)+
0001A3BC 26DA                       		move.l	(a2)+,(a3)+
0001A3BE 26DA                       		move.l	(a2)+,(a3)+
0001A3C0 51CB FFF6                  		dbf	d3,loc_19CC4
0001A3C4                            
0001A3C4 335C 0012                  		move.w	(a4)+,$12(a1)
0001A3C8 361D                       		move.w	(a5)+,d3
0001A3CA D769 0008                  		add.w	d3,8(a1)
0001A3CE 361D                       		move.w	(a5)+,d3
0001A3D0 D769 000C                  		add.w	d3,$C(a1)
0001A3D4 1344 001A                  		move.b	d4,$1A(a1)
0001A3D8 5244                       		addq.w	#1,d4
0001A3DA 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A3DE                            
0001A3DE                            Obj83_BreakSnd:
0001A3DE 303C 00CB                  		move.w	#$CB,d0
0001A3E2 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A3E8 4EF9 0000 DBFA             		jmp	DisplaySprite
0001A3EE                            ; ===========================================================================
0001A3EE 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A3F2 0120 00C0                  		dc.w $120, $C0
0001A3F6 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A3FA 0010 0000                  		dc.w $10, 0
0001A3FE 0000 0010                  		dc.w 0,	$10
0001A402 0010 0010                  		dc.w $10, $10
0001A406                            ; ---------------------------------------------------------------------------
0001A406                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A406                            ; ---------------------------------------------------------------------------
0001A406                            Map_obj83:
0001A406                            	include "_maps\obj83.asm"
0001A406                            ; ---------------------------------------------------------------------------
0001A406                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A406                            ; ---------------------------------------------------------------------------
0001A406 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A40A 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A40E 0000                       		dc.w byte_19D46-Map_obj83
0001A410 01                         byte_19D1C:	dc.b 1
0001A411 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A416 02                         byte_19D22:	dc.b 2
0001A417 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A41C F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A421 00                         		dc.b 0
0001A422 02                         byte_19D2E:	dc.b 2
0001A423 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A428 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A42D 00                         		dc.b 0
0001A42E 02                         byte_19D3A:	dc.b 2
0001A42F F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A434 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A439 00                         		dc.b 0
0001A43A 02                         byte_19D46:	dc.b 2
0001A43B F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A440 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A446 00                         		even
0001A446 00                         		even
0001A446                            
0001A446                            ; ===========================================================================
0001A446                            ; ---------------------------------------------------------------------------
0001A446                            ; Object 85 - Eggman (FZ)
0001A446                            ; ---------------------------------------------------------------------------
0001A446                            
0001A446                            Obj85_Delete:
0001A446 4EF9 0000 DC36             		jmp	DeleteObject
0001A44C                            ; ===========================================================================
0001A44C                            
0001A44C                            Obj85:					; XREF: Obj_Index
0001A44C 7000                       		moveq	#0,d0
0001A44E 1028 0024                  		move.b	$24(a0),d0
0001A452 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A456 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A45A                            ; ===========================================================================
0001A45A 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A45C 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A45E 0000                       		dc.w loc_1A38E-Obj85_Index
0001A460 0000                       		dc.w loc_1A346-Obj85_Index
0001A462 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A464 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A466 0000                       		dc.w loc_1A264-Obj85_Index
0001A468                            
0001A468 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A46E 0001 A13E                  		dc.l Map_obj82		; mappings pointer
0001A472 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A478 0000 0000                  		dc.l Map_obj84
0001A47C 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A482 0000 0000                  		dc.l Map_FZBoss
0001A486 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A48C 0001 A13E                  		dc.l Map_obj82
0001A490 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A496 0001 8420                  		dc.l Map_Eggman
0001A49A 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A4A0 0001 8420                  		dc.l Map_Eggman
0001A4A4                            
0001A4A4 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A4A9 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A4AE 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A4B3 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A4B8 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A4BD 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A4C2                            ; ===========================================================================
0001A4C2                            
0001A4C2                            Obj85_Main:				; XREF: Obj85_Index
0001A4C2 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A4C6 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A4CA 2248                       		movea.l	a0,a1
0001A4CC 7205                       		moveq	#5,d1
0001A4CE 6000                       		bra.s	Obj85_LoadBoss
0001A4D0                            ; ===========================================================================
0001A4D0                            
0001A4D0                            Obj85_Loop:
0001A4D0 4EB9 0000 E096             		jsr	SingleObjLoad2
0001A4D6 6600                       		bne.s	loc_19E20
0001A4D8                            
0001A4D8                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001A4D8 12BC 0085                  		move.b	#$85,(a1)
0001A4DC 335A 0008                  		move.w	(a2)+,8(a1)
0001A4E0 335A 000C                  		move.w	(a2)+,$C(a1)
0001A4E4 335A 0002                  		move.w	(a2)+,2(a1)
0001A4E8 235A 0004                  		move.l	(a2)+,4(a1)
0001A4EC 135B 0024                  		move.b	(a3)+,$24(a1)
0001A4F0 135B 001C                  		move.b	(a3)+,$1C(a1)
0001A4F4 135B 0018                  		move.b	(a3)+,$18(a1)
0001A4F8 135B 0017                  		move.b	(a3)+,$17(a1)
0001A4FC 135B 0016                  		move.b	(a3)+,$16(a1)
0001A500 137C 0004 0001             		move.b	#4,1(a1)
0001A506 08E8 0007 0001             		bset	#7,1(a0)
0001A50C 2348 0034                  		move.l	a0,$34(a1)
0001A510 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A514                            
0001A514                            loc_19E20:
0001A514 45E8 0036                  		lea	$36(a0),a2
0001A518 4EB9 0000 E080             		jsr	SingleObjLoad
0001A51E 6600                       		bne.s	loc_19E5A
0001A520 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001A524 3489                       		move.w	a1,(a2)
0001A526 2348 0034                  		move.l	a0,$34(a1)
0001A52A 45E8 0038                  		lea	$38(a0),a2
0001A52E 7400                       		moveq	#0,d2
0001A530 7203                       		moveq	#3,d1
0001A532                            
0001A532                            loc_19E3E:
0001A532 4EB9 0000 E096             		jsr	SingleObjLoad2
0001A538 6600                       		bne.s	loc_19E5A
0001A53A 34C9                       		move.w	a1,(a2)+
0001A53C 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001A540 2348 0034                  		move.l	a0,$34(a1)
0001A544 1342 0028                  		move.b	d2,$28(a1)
0001A548 5442                       		addq.w	#2,d2
0001A54A 51C9 FFE6                  		dbf	d1,loc_19E3E
0001A54E                            
0001A54E                            loc_19E5A:
0001A54E 317C 0000 0034             		move.w	#0,$34(a0)
0001A554 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A55A 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A560                            
0001A560                            Obj85_Eggman:				; XREF: Obj85_Index
0001A560 7000                       		moveq	#0,d0
0001A562 1028 0034                  		move.b	$34(a0),d0
0001A566 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001A56A 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001A56E 4EF9 0000 DBFA             		jmp	DisplaySprite
0001A574                            ; ===========================================================================
0001A574 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001A578 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001A57C 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001A580 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001A584                            ; ===========================================================================
0001A584                            
0001A584                            loc_19E90:				; XREF: off_19E80
0001A584 4AB8 F680                  		tst.l	($FFFFF680).w
0001A588 6600                       		bne.s	loc_19EA2
0001A58A 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001A590 6500                       		bcs.s	loc_19EA2
0001A592 5428 0034                  		addq.b	#2,$34(a0)
0001A596                            
0001A596                            loc_19EA2:
0001A596 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001A59A 4E75                       		rts	
0001A59C                            ; ===========================================================================
0001A59C                            
0001A59C                            loc_19EA8:				; XREF: off_19E80
0001A59C 4A68 0030                  		tst.w	$30(a0)
0001A5A0 6A00                       		bpl.s	loc_19F10
0001A5A2 4268 0030                  		clr.w	$30(a0)
0001A5A6 4EB9 0000 2C3A             		jsr	(RandomNumber).l
0001A5AC 0240 000C                  		andi.w	#$C,d0
0001A5B0 3200                       		move.w	d0,d1
0001A5B2 5441                       		addq.w	#2,d1
0001A5B4 4A80                       		tst.l	d0
0001A5B6 6A00                       		bpl.s	loc_19EC6
0001A5B8 C141                       		exg	d1,d0
0001A5BA                            
0001A5BA                            loc_19EC6:
0001A5BA 43FA 0000                  		lea	word_19FD6(pc),a1
0001A5BE 3031 0000                  		move.w	(a1,d0.w),d0
0001A5C2 3231 1000                  		move.w	(a1,d1.w),d1
0001A5C6 3140 0030                  		move.w	d0,$30(a0)
0001A5CA 74FF                       		moveq	#-1,d2
0001A5CC 3430 0038                  		move.w	$38(a0,d0.w),d2
0001A5D0 2242                       		movea.l	d2,a1
0001A5D2 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A5D8 337C FFFF 0030             		move.w	#-1,$30(a1)
0001A5DE 3430 1038                  		move.w	$38(a0,d1.w),d2
0001A5E2 2242                       		movea.l	d2,a1
0001A5E4 137C 0001 0029             		move.b	#1,$29(a1)
0001A5EA 337C 0000 0030             		move.w	#0,$30(a1)
0001A5F0 317C 0001 0032             		move.w	#1,$32(a0)
0001A5F6 4228 0035                  		clr.b	$35(a0)
0001A5FA 303C 00B7                  		move.w	#$B7,d0
0001A5FE 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001A604                            
0001A604                            loc_19F10:
0001A604 4A68 0032                  		tst.w	$32(a0)
0001A608 6B00 0000                  		bmi.w	loc_19FA6
0001A60C 08A8 0000 0022             		bclr	#0,$22(a0)
0001A612 3038 D008                  		move.w	($FFFFD008).w,d0
0001A616 9068 0008                  		sub.w	8(a0),d0
0001A61A 6500                       		bcs.s	loc_19F2E
0001A61C 08E8 0000 0022             		bset	#0,$22(a0)
0001A622                            
0001A622                            loc_19F2E:
0001A622 323C 002B                  		move.w	#$2B,d1
0001A626 343C 0014                  		move.w	#$14,d2
0001A62A 363C 0014                  		move.w	#$14,d3
0001A62E 3828 0008                  		move.w	8(a0),d4
0001A632 4EB9 0000 FFCA             		jsr	SolidObject
0001A638 4A44                       		tst.w	d4
0001A63A 6E00                       		bgt.s	loc_19F50
0001A63C                            
0001A63C                            loc_19F48:
0001A63C 4A28 0035                  		tst.b	$35(a0)
0001A640 6600                       		bne.s	loc_19F88
0001A642 6000                       		bra.s	loc_19F96
0001A644                            ; ===========================================================================
0001A644                            
0001A644                            loc_19F50:
0001A644 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001A648 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001A64E 66EC                       		bne.s	loc_19F48
0001A650 303C 0300                  		move.w	#$300,d0
0001A654 0828 0000 0022             		btst	#0,$22(a0)
0001A65A 6600                       		bne.s	loc_19F6A
0001A65C 4440                       		neg.w	d0
0001A65E                            
0001A65E                            loc_19F6A:
0001A65E 31C0 D010                  		move.w	d0,($FFFFD010).w
0001A662 4A28 0035                  		tst.b	$35(a0)
0001A666 6600                       		bne.s	loc_19F88
0001A668 5328 0021                  		subq.b	#1,$21(a0)
0001A66C 117C 0064 0035             		move.b	#$64,$35(a0)
0001A672 303C 00AC                  		move.w	#$AC,d0
0001A676 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A67C                            
0001A67C                            loc_19F88:
0001A67C 5328 0035                  		subq.b	#1,$35(a0)
0001A680 6700                       		beq.s	loc_19F96
0001A682 117C 0003 001C             		move.b	#3,$1C(a0)
0001A688 6000                       		bra.s	loc_19F9C
0001A68A                            ; ===========================================================================
0001A68A                            
0001A68A                            loc_19F96:
0001A68A 117C 0001 001C             		move.b	#1,$1C(a0)
0001A690                            
0001A690                            loc_19F9C:
0001A690 43FA FA7A                  		lea	Ani_obj82(pc),a1
0001A694 4EF9 0000 ACC4             		jmp	AnimateSprite
0001A69A                            ; ===========================================================================
0001A69A                            
0001A69A                            loc_19FA6:
0001A69A 4A28 0021                  		tst.b	$21(a0)
0001A69E 6700                       		beq.s	loc_19FBC
0001A6A0 5428 0034                  		addq.b	#2,$34(a0)
0001A6A4 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A6AA 4268 0032                  		clr.w	$32(a0)
0001A6AE 4E75                       		rts	
0001A6B0                            ; ===========================================================================
0001A6B0                            
0001A6B0                            loc_19FBC:
0001A6B0 117C 0006 0034             		move.b	#6,$34(a0)
0001A6B6 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001A6BC 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A6C2 117C 0014 0016             		move.b	#$14,$16(a0)
0001A6C8 4E75                       		rts	
0001A6CA                            ; ===========================================================================
0001A6CA 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001A6DA                            ; ===========================================================================
0001A6DA                            
0001A6DA                            loc_19FE6:				; XREF: off_19E80
0001A6DA 70FF                       		moveq	#-1,d0
0001A6DC 3028 0036                  		move.w	$36(a0),d0
0001A6E0 2240                       		movea.l	d0,a1
0001A6E2 4A68 0030                  		tst.w	$30(a0)
0001A6E6 6A00                       		bpl.s	loc_1A000
0001A6E8 4268 0030                  		clr.w	$30(a0)
0001A6EC 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A6F2 6100                       		bsr.s	loc_1A020
0001A6F4                            
0001A6F4                            loc_1A000:
0001A6F4 700F                       		moveq	#$F,d0
0001A6F6 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001A6FA 6600                       		bne.s	loc_1A00A
0001A6FC 6100                       		bsr.s	loc_1A020
0001A6FE                            
0001A6FE                            loc_1A00A:
0001A6FE 4A68 0032                  		tst.w	$32(a0)
0001A702 6700                       		beq.s	locret_1A01E
0001A704 5528 0034                  		subq.b	#2,$34(a0)
0001A708 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A70E 4268 0032                  		clr.w	$32(a0)
0001A712                            
0001A712                            locret_1A01E:
0001A712 4E75                       		rts	
0001A714                            ; ===========================================================================
0001A714                            
0001A714                            loc_1A020:
0001A714 303C 00B1                  		move.w	#$B1,d0
0001A718 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play electricity sound
0001A71E                            ; ===========================================================================
0001A71E                            
0001A71E                            loc_1A02A:				; XREF: off_19E80
0001A71E 117C 0030 0017             		move.b	#$30,$17(a0)
0001A724 08E8 0000 0022             		bset	#0,$22(a0)
0001A72A 4EB9 0000 DBD4             		jsr	SpeedToPos
0001A730 117C 0006 001A             		move.b	#6,$1A(a0)
0001A736 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A73C 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001A742 6500                       		bcs.s	loc_1A070
0001A744 317C 059C 000C             		move.w	#$59C,$C(a0)
0001A74A 5428 0034                  		addq.b	#2,$34(a0)
0001A74E 117C 0020 0017             		move.b	#$20,$17(a0)
0001A754 317C 0100 0010             		move.w	#$100,$10(a0)
0001A75A 317C FF00 0012             		move.w	#-$100,$12(a0)
0001A760 5438 F742                  		addq.b	#2,($FFFFF742).w
0001A764                            
0001A764                            loc_1A070:
0001A764 6000 0000                  		bra.w	loc_1A166
0001A768                            ; ===========================================================================
0001A768                            
0001A768                            loc_1A074:				; XREF: off_19E80
0001A768 08E8 0000 0022             		bset	#0,$22(a0)
0001A76E 117C 0004 001C             		move.b	#4,$1C(a0)
0001A774 4EB9 0000 DBD4             		jsr	SpeedToPos
0001A77A 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A780 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001A786 6500                       		bcs.s	loc_1A09A
0001A788 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A78E                            
0001A78E                            loc_1A09A:
0001A78E 317C 0400 0010             		move.w	#$400,$10(a0)
0001A794 3028 0008                  		move.w	8(a0),d0
0001A798 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A79C 6A00                       		bpl.s	loc_1A0B4
0001A79E 317C 0500 0010             		move.w	#$500,$10(a0)
0001A7A4 6000 0000                  		bra.w	loc_1A0F2
0001A7A8                            ; ===========================================================================
0001A7A8                            
0001A7A8                            loc_1A0B4:
0001A7A8 0440 0070                  		subi.w	#$70,d0
0001A7AC 6500                       		bcs.s	loc_1A0F2
0001A7AE 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A7B4 5140                       		subq.w	#8,d0
0001A7B6 6500                       		bcs.s	loc_1A0F2
0001A7B8 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A7BE 5140                       		subq.w	#8,d0
0001A7C0 6500                       		bcs.s	loc_1A0F2
0001A7C2 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A7C8 5140                       		subq.w	#8,d0
0001A7CA 6500                       		bcs.s	loc_1A0F2
0001A7CC 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A7D2 5140                       		subq.w	#8,d0
0001A7D4 6500                       		bcs.s	loc_1A0F2
0001A7D6 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A7DC 0440 0038                  		subi.w	#$38,d0
0001A7E0 6500                       		bcs.s	loc_1A0F2
0001A7E2 4268 0010                  		clr.w	$10(a0)
0001A7E6                            
0001A7E6                            loc_1A0F2:
0001A7E6 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001A7EC 6500                       		bcs.s	loc_1A110
0001A7EE 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001A7F4 317C 0240 0010             		move.w	#$240,$10(a0)
0001A7FA 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001A800 5428 0034                  		addq.b	#2,$34(a0)
0001A804                            
0001A804                            loc_1A110:
0001A804 6000                       		bra.s	loc_1A15C
0001A806                            ; ===========================================================================
0001A806                            
0001A806                            loc_1A112:				; XREF: off_19E80
0001A806 4EB9 0000 DBD4             		jsr	SpeedToPos
0001A80C 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001A812 6500                       		bcs.s	loc_1A124
0001A814 4268 0010                  		clr.w	$10(a0)
0001A818                            
0001A818                            loc_1A124:
0001A818 0668 0034 0012             		addi.w	#$34,$12(a0)
0001A81E 4A68 0012                  		tst.w	$12(a0)
0001A822 6B00                       		bmi.s	loc_1A142
0001A824 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001A82A 6500                       		bcs.s	loc_1A142
0001A82C 317C 0592 000C             		move.w	#$592,$C(a0)
0001A832 4268 0012                  		clr.w	$12(a0)
0001A836                            
0001A836                            loc_1A142:
0001A836 3028 0010                  		move.w	$10(a0),d0
0001A83A 8068 0012                  		or.w	$12(a0),d0
0001A83E 6600                       		bne.s	loc_1A15C
0001A840 5428 0034                  		addq.b	#2,$34(a0)
0001A844 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A84A 117C 0001 0021             		move.b	#1,$21(a0)
0001A850                            
0001A850                            loc_1A15C:
0001A850 43FA F8BA                  		lea	Ani_obj82(pc),a1
0001A854 4EB9 0000 ACC4             		jsr	AnimateSprite
0001A85A                            
0001A85A                            loc_1A166:
0001A85A 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001A860 6C00                       		bge.s	loc_1A172
0001A862 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A866                            
0001A866                            loc_1A172:
0001A866 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001A86C 6C00                       		bge.s	locret_1A190
0001A86E 323C 001B                  		move.w	#$1B,d1
0001A872 343C 0070                  		move.w	#$70,d2
0001A876 363C 0071                  		move.w	#$71,d3
0001A87A 3828 0008                  		move.w	8(a0),d4
0001A87E 4EF9 0000 FFCA             		jmp	SolidObject
0001A884                            ; ===========================================================================
0001A884                            
0001A884                            locret_1A190:
0001A884 4E75                       		rts	
0001A886                            ; ===========================================================================
0001A886                            
0001A886                            loc_1A192:				; XREF: off_19E80
0001A886 217C 0001 8420 0004        		move.l	#Map_Eggman,4(a0)
0001A88E 317C 0400 0002             		move.w	#$400,2(a0)
0001A894 117C 0000 001C             		move.b	#0,$1C(a0)
0001A89A 08E8 0000 0022             		bset	#0,$22(a0)
0001A8A0 4EB9 0000 DBD4             		jsr	SpeedToPos
0001A8A6 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001A8AC 6400                       		bcc.s	loc_1A1D0
0001A8AE 317C 0180 0010             		move.w	#$180,$10(a0)
0001A8B4 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001A8BA 117C 000F 0020             		move.b	#$F,$20(a0)
0001A8C0 5428 0034                  		addq.b	#2,$34(a0)
0001A8C4                            
0001A8C4                            loc_1A1D0:
0001A8C4 6000 FF8A                  		bra.w	loc_1A15C
0001A8C8                            ; ===========================================================================
0001A8C8                            
0001A8C8                            loc_1A1D4:				; XREF: off_19E80
0001A8C8 08E8 0000 0022             		bset	#0,$22(a0)
0001A8CE 4EB9 0000 DBD4             		jsr	SpeedToPos
0001A8D4 4A68 0030                  		tst.w	$30(a0)
0001A8D8 6600                       		bne.s	loc_1A1FC
0001A8DA 4A28 0020                  		tst.b	$20(a0)
0001A8DE 6600                       		bne.s	loc_1A216
0001A8E0 317C 001E 0030             		move.w	#$1E,$30(a0)
0001A8E6 303C 00AC                  		move.w	#$AC,d0
0001A8EA 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A8F0                            
0001A8F0                            loc_1A1FC:
0001A8F0 5368 0030                  		subq.w	#1,$30(a0)
0001A8F4 6600                       		bne.s	loc_1A216
0001A8F6 4A28 0022                  		tst.b	$22(a0)
0001A8FA 6A00                       		bpl.s	loc_1A210
0001A8FC 317C 0060 0012             		move.w	#$60,$12(a0)
0001A902 6000                       		bra.s	loc_1A216
0001A904                            ; ===========================================================================
0001A904                            
0001A904                            loc_1A210:
0001A904 117C 000F 0020             		move.b	#$F,$20(a0)
0001A90A                            
0001A90A                            loc_1A216:
0001A90A 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001A910 6D00                       		blt.s	loc_1A23A
0001A912 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001A918 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001A91E 4278 D014                  		clr.w	($FFFFD014).w
0001A922 4A68 0012                  		tst.w	$12(a0)
0001A926 6A00                       		bpl.s	loc_1A248
0001A928 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001A92E                            
0001A92E                            loc_1A23A:
0001A92E 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001A934 6D00                       		blt.s	loc_1A248
0001A936 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001A93C                            
0001A93C                            loc_1A248:
0001A93C 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001A942 6500                       		bcs.s	loc_1A260
0001A944 4A28 0001                  		tst.b	1(a0)
0001A948 6B00                       		bmi.s	loc_1A260
0001A94A 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001A950 6000 FAF4                  		bra.w	Obj85_Delete
0001A954                            ; ===========================================================================
0001A954                            
0001A954                            loc_1A260:
0001A954 6000 FEFA                  		bra.w	loc_1A15C
0001A958                            ; ===========================================================================
0001A958                            
0001A958                            loc_1A264:				; XREF: Obj85_Index
0001A958 2268 0034                  		movea.l	$34(a0),a1
0001A95C 1011                       		move.b	(a1),d0
0001A95E B010                       		cmp.b	(a0),d0
0001A960 6600 FAE4                  		bne.w	Obj85_Delete
0001A964 117C 0007 001C             		move.b	#7,$1C(a0)
0001A96A 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A970 6C00                       		bge.s	loc_1A280
0001A972 6000                       		bra.s	loc_1A2A6
0001A974                            ; ===========================================================================
0001A974                            
0001A974                            loc_1A280:
0001A974 4A69 0010                  		tst.w	$10(a1)
0001A978 6700                       		beq.s	loc_1A28C
0001A97A 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A980                            
0001A980                            loc_1A28C:
0001A980 43FA DA4E                  		lea	Ani_Eggman(pc),a1
0001A984 4EB9 0000 ACC4             		jsr	AnimateSprite
0001A98A                            
0001A98A                            loc_1A296:
0001A98A 2268 0034                  		movea.l	$34(a0),a1
0001A98E 3169 0008 0008             		move.w	8(a1),8(a0)
0001A994 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A99A                            
0001A99A                            loc_1A2A6:
0001A99A 2268 0034                  		movea.l	$34(a0),a1
0001A99E 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A9A4 7003                       		moveq	#3,d0
0001A9A6 C028 0022                  		and.b	$22(a0),d0
0001A9AA 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A9B0 8128 0001                  		or.b	d0,1(a0)
0001A9B4 4EF9 0000 DBFA             		jmp	DisplaySprite
0001A9BA                            ; ===========================================================================
0001A9BA                            
0001A9BA                            loc_1A2C6:				; XREF: Obj85_Index
0001A9BA 2268 0034                  		movea.l	$34(a0),a1
0001A9BE 1011                       		move.b	(a1),d0
0001A9C0 B010                       		cmp.b	(a0),d0
0001A9C2 6600 FA82                  		bne.w	Obj85_Delete
0001A9C6 0CA9 0001 8420 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A9CE 6700                       		beq.s	loc_1A2E4
0001A9D0 117C 000A 001A             		move.b	#$A,$1A(a0)
0001A9D6 60C2                       		bra.s	loc_1A2A6
0001A9D8                            ; ===========================================================================
0001A9D8                            
0001A9D8                            loc_1A2E4:
0001A9D8 117C 0001 001C             		move.b	#1,$1C(a0)
0001A9DE 4A29 0021                  		tst.b	$21(a1)
0001A9E2 6F00                       		ble.s	loc_1A312
0001A9E4 117C 0006 001C             		move.b	#6,$1C(a0)
0001A9EA 217C 0001 8420 0004        		move.l	#Map_Eggman,4(a0)
0001A9F2 317C 0400 0002             		move.w	#$400,2(a0)
0001A9F8 43FA D9D6                  		lea	Ani_Eggman(pc),a1
0001A9FC 4EB9 0000 ACC4             		jsr	AnimateSprite
0001AA02 6000 FF86                  		bra.w	loc_1A296
0001AA06                            ; ===========================================================================
0001AA06                            
0001AA06                            loc_1A312:
0001AA06 4A28 0001                  		tst.b	1(a0)
0001AA0A 6A00 FA3A                  		bpl.w	Obj85_Delete
0001AA0E 6100 D53C                  		bsr.w	BossDefeated
0001AA12 117C 0002 0018             		move.b	#2,$18(a0)
0001AA18 117C 0000 001C             		move.b	#0,$1C(a0)
0001AA1E 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001AA26 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001AA2C 43FA 0000                  		lea	Ani_obj85(pc),a1
0001AA30 4EB9 0000 ACC4             		jsr	AnimateSprite
0001AA36 6000 FF52                  		bra.w	loc_1A296
0001AA3A                            ; ===========================================================================
0001AA3A                            
0001AA3A                            loc_1A346:				; XREF: Obj85_Index
0001AA3A 08E8 0000 0022             		bset	#0,$22(a0)
0001AA40 2268 0034                  		movea.l	$34(a0),a1
0001AA44 0CA9 0001 8420 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AA4C 6700                       		beq.s	loc_1A35E
0001AA4E 6000 FF4A                  		bra.w	loc_1A2A6
0001AA52                            ; ===========================================================================
0001AA52                            
0001AA52                            loc_1A35E:
0001AA52 3169 0008 0008             		move.w	8(a1),8(a0)
0001AA58 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AA5E 4A28 001E                  		tst.b	$1E(a0)
0001AA62 6600                       		bne.s	loc_1A376
0001AA64 117C 0014 001E             		move.b	#$14,$1E(a0)
0001AA6A                            
0001AA6A                            loc_1A376:
0001AA6A 5328 001E                  		subq.b	#1,$1E(a0)
0001AA6E 6E00                       		bgt.s	loc_1A38A
0001AA70 5228 001A                  		addq.b	#1,$1A(a0)
0001AA74 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001AA7A 6E00 F9CA                  		bgt.w	Obj85_Delete
0001AA7E                            
0001AA7E                            loc_1A38A:
0001AA7E 6000 FF0A                  		bra.w	loc_1A296
0001AA82                            ; ===========================================================================
0001AA82                            
0001AA82                            loc_1A38E:				; XREF: Obj85_Index
0001AA82 117C 000B 001A             		move.b	#$B,$1A(a0)
0001AA88 3038 D008                  		move.w	($FFFFD008).w,d0
0001AA8C 9068 0008                  		sub.w	8(a0),d0
0001AA90 6500                       		bcs.s	loc_1A3A6
0001AA92 4A28 0001                  		tst.b	1(a0)
0001AA96 6A00 F9AE                  		bpl.w	Obj85_Delete
0001AA9A                            
0001AA9A                            loc_1A3A6:
0001AA9A 4EF9 0000 DBFA             		jmp	DisplaySprite
0001AAA0                            ; ===========================================================================
0001AAA0                            
0001AAA0                            loc_1A3AC:				; XREF: Obj85_Index
0001AAA0 117C 0000 001A             		move.b	#0,$1A(a0)
0001AAA6 08E8 0000 0022             		bset	#0,$22(a0)
0001AAAC 2268 0034                  		movea.l	$34(a0),a1
0001AAB0 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AAB6 6600                       		bne.s	loc_1A3D0
0001AAB8 0CA9 0001 8420 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AAC0 6700 F984                  		beq.w	Obj85_Delete
0001AAC4                            
0001AAC4                            loc_1A3D0:
0001AAC4 6000 FED4                  		bra.w	loc_1A2A6
0001AAC8                            ; ===========================================================================
0001AAC8                            Ani_obj85:
0001AAC8                            	include "_anim\obj85.asm"
0001AAC8                            ; ---------------------------------------------------------------------------
0001AAC8                            ; Animation script - Eggman (FZ)
0001AAC8                            ; ---------------------------------------------------------------------------
0001AAC8 0000                       		dc.w byte_1A3D6-Ani_obj85
0001AACA 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001AACE                            		even
0001AACE                            		even
0001AACE                            
0001AACE                            Map_Eggman2:
0001AACE                            	include "_maps\Eggman2.asm"
0001AACE                            ; ---------------------------------------------------------------------------
0001AACE                            ; Sprite mappings - Eggman (FZ)
0001AACE                            ; ---------------------------------------------------------------------------
0001AACE 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001AAD0 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001AAD2 06                         byte_1A3DE:	dc.b 6
0001AAD3 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001AAD8 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001AADD EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AAE2 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AAE7 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AAEC 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AAF1 06                         byte_1A3FD:	dc.b 6
0001AAF2 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001AAF7 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001AAFC EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AB01 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AB06 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AB0B 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AB10                            		even
0001AB10                            		even
0001AB10                            
0001AB10                            Map_FZBoss:
0001AB10                            	include "_maps\FZ boss.asm"
0001AB10                            ; ---------------------------------------------------------------------------
0001AB10                            ; Sprite mappings - boss (FZ)
0001AB10                            ; ---------------------------------------------------------------------------
0001AB10 0000                       		dc.w byte_1A422-Map_FZBoss
0001AB12 0000                       		dc.w byte_1A42D-Map_FZBoss
0001AB14 0000                       		dc.w byte_1A43D-Map_FZBoss
0001AB16 02                         byte_1A422:	dc.b 2
0001AB17 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001AB1C 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001AB21 03                         byte_1A42D:	dc.b 3
0001AB22 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001AB27 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001AB2C 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001AB31 02                         byte_1A43D:	dc.b 2
0001AB32 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001AB37 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001AB3C                            		even
0001AB3C                            		even
0001AB3C                            
0001AB3C                            ; ===========================================================================
0001AB3C                            
0001AB3C                            Obj84_Delete:
0001AB3C 4EF9 0000 DC36             		jmp	DeleteObject
0001AB42                            ; ===========================================================================
0001AB42                            ; ---------------------------------------------------------------------------
0001AB42                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001AB42                            ; ---------------------------------------------------------------------------
0001AB42                            
0001AB42                            Obj84:					; XREF: Obj_Index
0001AB42 7000                       		moveq	#0,d0
0001AB44 1028 0024                  		move.b	$24(a0),d0
0001AB48 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001AB4C 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001AB50                            ; ===========================================================================
0001AB50 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001AB52 0000                       		dc.w loc_1A4CE-Obj84_Index
0001AB54 0000                       		dc.w loc_1A57E-Obj84_Index
0001AB56                            
0001AB56 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001AB5A 2550 0620                  		dc.w $2550, $620
0001AB5E 2490 04C0                  		dc.w $2490, $4C0
0001AB62 2510 04C0                  		dc.w $2510, $4C0
0001AB66                            ; ===========================================================================
0001AB66                            
0001AB66                            Obj84_Main:				; XREF: Obj84_Index
0001AB66 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001AB6A 7000                       		moveq	#0,d0
0001AB6C 1028 0028                  		move.b	$28(a0),d0
0001AB70 D040                       		add.w	d0,d0
0001AB72 D2C0                       		adda.w	d0,a1
0001AB74 117C 0004 0001             		move.b	#4,1(a0)
0001AB7A 08E8 0007 0001             		bset	#7,1(a0)
0001AB80 08E8 0004 0001             		bset	#4,1(a0)
0001AB86 317C 0300 0002             		move.w	#$300,2(a0)
0001AB8C 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001AB94 3159 0008                  		move.w	(a1)+,8(a0)
0001AB98 3151 000C                  		move.w	(a1),$C(a0)
0001AB9C 3159 0038                  		move.w	(a1)+,$38(a0)
0001ABA0 117C 0020 0016             		move.b	#$20,$16(a0)
0001ABA6 117C 0060 0017             		move.b	#$60,$17(a0)
0001ABAC 117C 0020 0019             		move.b	#$20,$19(a0)
0001ABB2 117C 0060 0016             		move.b	#$60,$16(a0)
0001ABB8 117C 0003 0018             		move.b	#3,$18(a0)
0001ABBE 5428 0024                  		addq.b	#2,$24(a0)
0001ABC2                            
0001ABC2                            loc_1A4CE:				; XREF: Obj84_Index
0001ABC2 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001ABC8 6F00                       		ble.s	loc_1A4DC
0001ABCA 08E8 0001 0001             		bset	#1,1(a0)
0001ABD0                            
0001ABD0                            loc_1A4DC:
0001ABD0 42A8 003C                  		clr.l	$3C(a0)
0001ABD4 4A28 0029                  		tst.b	$29(a0)
0001ABD8 6700                       		beq.s	loc_1A4EA
0001ABDA 5428 0024                  		addq.b	#2,$24(a0)
0001ABDE                            
0001ABDE                            loc_1A4EA:
0001ABDE 2028 003C                  		move.l	$3C(a0),d0
0001ABE2 2228 0038                  		move.l	$38(a0),d1
0001ABE6 D280                       		add.l	d0,d1
0001ABE8 4841                       		swap	d1
0001ABEA 3141 000C                  		move.w	d1,$C(a0)
0001ABEE 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001ABF4 6600                       		bne.s	loc_1A524
0001ABF6 4A68 0030                  		tst.w	$30(a0)
0001ABFA 6A00                       		bpl.s	loc_1A524
0001ABFC 70F6                       		moveq	#-$A,d0
0001ABFE 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AC04 6F00                       		ble.s	loc_1A514
0001AC06 700E                       		moveq	#$E,d0
0001AC08                            
0001AC08                            loc_1A514:
0001AC08 D240                       		add.w	d0,d1
0001AC0A 2268 0034                  		movea.l	$34(a0),a1
0001AC0E 3341 000C                  		move.w	d1,$C(a1)
0001AC12 3368 0008 0008             		move.w	8(a0),8(a1)
0001AC18                            
0001AC18                            loc_1A524:
0001AC18 323C 002B                  		move.w	#$2B,d1
0001AC1C 343C 0060                  		move.w	#$60,d2
0001AC20 363C 0061                  		move.w	#$61,d3
0001AC24 3828 0008                  		move.w	8(a0),d4
0001AC28 4EB9 0000 FFCA             		jsr	SolidObject
0001AC2E 7000                       		moveq	#0,d0
0001AC30 3228 003C                  		move.w	$3C(a0),d1
0001AC34 6A00                       		bpl.s	loc_1A550
0001AC36 4441                       		neg.w	d1
0001AC38 5141                       		subq.w	#8,d1
0001AC3A 6500                       		bcs.s	loc_1A55C
0001AC3C 5200                       		addq.b	#1,d0
0001AC3E E841                       		asr.w	#4,d1
0001AC40 D041                       		add.w	d1,d0
0001AC42 6000                       		bra.s	loc_1A55C
0001AC44                            ; ===========================================================================
0001AC44                            
0001AC44                            loc_1A550:
0001AC44 0441 0027                  		subi.w	#$27,d1
0001AC48 6500                       		bcs.s	loc_1A55C
0001AC4A 5200                       		addq.b	#1,d0
0001AC4C E841                       		asr.w	#4,d1
0001AC4E D041                       		add.w	d1,d0
0001AC50                            
0001AC50                            loc_1A55C:
0001AC50 1140 001A                  		move.b	d0,$1A(a0)
0001AC54 3038 D008                  		move.w	($FFFFD008).w,d0
0001AC58 9068 0008                  		sub.w	8(a0),d0
0001AC5C 6B00                       		bmi.s	loc_1A578
0001AC5E 0440 0140                  		subi.w	#$140,d0
0001AC62 6B00                       		bmi.s	loc_1A578
0001AC64 4A28 0001                  		tst.b	1(a0)
0001AC68 6A00 FED2                  		bpl.w	Obj84_Delete
0001AC6C                            
0001AC6C                            loc_1A578:
0001AC6C 4EF9 0000 DBFA             		jmp	DisplaySprite
0001AC72                            ; ===========================================================================
0001AC72                            
0001AC72                            loc_1A57E:				; XREF: Obj84_Index
0001AC72 7000                       		moveq	#0,d0
0001AC74 1028 0028                  		move.b	$28(a0),d0
0001AC78 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001AC7C 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001AC80 6000 FF5C                  		bra.w	loc_1A4EA
0001AC84                            ; ===========================================================================
0001AC84 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001AC86 0000                       		dc.w loc_1A598-off_1A590
0001AC88 0000                       		dc.w loc_1A604-off_1A590
0001AC8A 0000                       		dc.w loc_1A604-off_1A590
0001AC8C                            ; ===========================================================================
0001AC8C                            
0001AC8C                            loc_1A598:				; XREF: off_1A590
0001AC8C 4A28 0029                  		tst.b	$29(a0)
0001AC90 6600                       		bne.s	loc_1A5D4
0001AC92 2268 0034                  		movea.l	$34(a0),a1
0001AC96 4A29 0021                  		tst.b	$21(a1)
0001AC9A 6600                       		bne.s	loc_1A5B4
0001AC9C 6100 D2AE                  		bsr.w	BossDefeated
0001ACA0 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001ACA8                            
0001ACA8                            loc_1A5B4:
0001ACA8 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001ACB0 6400                       		bcc.s	locret_1A602
0001ACB2 42A8 003C                  		clr.l	$3C(a0)
0001ACB6 2268 0034                  		movea.l	$34(a0),a1
0001ACBA 5369 0032                  		subq.w	#1,$32(a1)
0001ACBE 4269 0030                  		clr.w	$30(a1)
0001ACC2 5528 0024                  		subq.b	#2,$24(a0)
0001ACC6 4E75                       		rts	
0001ACC8                            ; ===========================================================================
0001ACC8                            
0001ACC8                            loc_1A5D4:
0001ACC8 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001ACCE 6C00                       		bge.s	loc_1A5E4
0001ACD0 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001ACD8                            
0001ACD8                            loc_1A5E4:
0001ACD8 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001ACE0 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001ACE6 6E00                       		bgt.s	locret_1A602
0001ACE8 4268 003E                  		clr.w	$3E(a0)
0001ACEC 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001ACF2 4228 0029                  		clr.b	$29(a0)
0001ACF6                            
0001ACF6                            locret_1A602:
0001ACF6 4E75                       		rts	
0001ACF8                            ; ===========================================================================
0001ACF8                            
0001ACF8                            loc_1A604:				; XREF: off_1A590
0001ACF8 08E8 0001 0001             		bset	#1,1(a0)
0001ACFE 4A28 0029                  		tst.b	$29(a0)
0001AD02 6600                       		bne.s	loc_1A646
0001AD04 2268 0034                  		movea.l	$34(a0),a1
0001AD08 4A29 0021                  		tst.b	$21(a1)
0001AD0C 6600                       		bne.s	loc_1A626
0001AD0E 6100 D23C                  		bsr.w	BossDefeated
0001AD12 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001AD1A                            
0001AD1A                            loc_1A626:
0001AD1A 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001AD22 6400                       		bcc.s	locret_1A674
0001AD24 42A8 003C                  		clr.l	$3C(a0)
0001AD28 2268 0034                  		movea.l	$34(a0),a1
0001AD2C 5369 0032                  		subq.w	#1,$32(a1)
0001AD30 4269 0030                  		clr.w	$30(a1)
0001AD34 5528 0024                  		subq.b	#2,$24(a0)
0001AD38 4E75                       		rts	
0001AD3A                            ; ===========================================================================
0001AD3A                            
0001AD3A                            loc_1A646:
0001AD3A 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001AD40 6D00                       		blt.s	loc_1A656
0001AD42 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001AD4A                            
0001AD4A                            loc_1A656:
0001AD4A 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001AD52 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001AD58 6D00                       		blt.s	locret_1A674
0001AD5A 4268 003E                  		clr.w	$3E(a0)
0001AD5E 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001AD64 4228 0029                  		clr.b	$29(a0)
0001AD68                            
0001AD68                            locret_1A674:
0001AD68 4E75                       		rts	
0001AD6A                            ; ===========================================================================
0001AD6A                            ; ---------------------------------------------------------------------------
0001AD6A                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AD6A                            ; ---------------------------------------------------------------------------
0001AD6A                            Map_obj84:
0001AD6A                            	include "_maps\obj84.asm"
0001AD6A                            ; ---------------------------------------------------------------------------
0001AD6A                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AD6A                            ; ---------------------------------------------------------------------------
0001AD6A 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001AD6E 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001AD72 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001AD76 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AD7A 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AD7E 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001AD82 06                         byte_1A68E:	dc.b 6
0001AD83 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AD88 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AD8D B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AD92 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AD97 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AD9C B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001ADA1 08                         byte_1A6AD:	dc.b 8
0001ADA2 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001ADA7 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001ADAC B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001ADB1 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001ADB6 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001ADBB B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001ADC0 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001ADC5 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001ADCA 0A                         byte_1A6D6:	dc.b $A
0001ADCB A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001ADD0 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001ADD5 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001ADDA B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001ADDF B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001ADE4 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001ADE9 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001ADEE D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001ADF3 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001ADF8 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001ADFD 0C                         byte_1A709:	dc.b $C
0001ADFE A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AE03 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AE08 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AE0D B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AE12 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AE17 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AE1C D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AE21 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AE26 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AE2B F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AE30 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AE35 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AE3A 0D                         byte_1A746:	dc.b $D
0001AE3B A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AE40 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AE45 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AE4A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AE4F B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AE54 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AE59 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AE5E D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AE63 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AE68 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AE6D 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AE72 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AE77 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001AE7C 0E                         byte_1A788:	dc.b $E
0001AE7D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AE82 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AE87 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AE8C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AE91 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AE96 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AE9B D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AEA0 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AEA5 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AEAA F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AEAF 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AEB4 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AEB9 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001AEBE 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001AEC3 02                         byte_1A7CF:	dc.b 2
0001AEC4 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001AEC9 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001AECE                            		even
0001AECE                            		even
0001AECE                            
0001AECE                            ; ===========================================================================
0001AECE                            ; ---------------------------------------------------------------------------
0001AECE                            ; Object 86 - energy balls (FZ)
0001AECE                            ; ---------------------------------------------------------------------------
0001AECE                            
0001AECE                            Obj86:					; XREF: Obj_Index
0001AECE 7000                       		moveq	#0,d0
0001AED0 1028 0024                  		move.b	$24(a0),d0
0001AED4 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001AED8 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001AEDC                            ; ===========================================================================
0001AEDC 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001AEDE 0000                       		dc.w Obj86_Generator-Obj86_Index
0001AEE0 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001AEE2 0000                       		dc.w loc_1A962-Obj86_Index
0001AEE4 0000                       		dc.w loc_1A982-Obj86_Index
0001AEE6                            ; ===========================================================================
0001AEE6                            
0001AEE6                            Obj86_Main:				; XREF: Obj86_Index
0001AEE6 317C 2588 0008             		move.w	#$2588,8(a0)
0001AEEC 317C 053C 000C             		move.w	#$53C,$C(a0)
0001AEF2 317C 0300 0002             		move.w	#$300,2(a0)
0001AEF8 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001AF00 117C 0000 001C             		move.b	#0,$1C(a0)
0001AF06 117C 0003 0018             		move.b	#3,$18(a0)
0001AF0C 117C 0008 0017             		move.b	#8,$17(a0)
0001AF12 117C 0008 0016             		move.b	#8,$16(a0)
0001AF18 117C 0004 0001             		move.b	#4,1(a0)
0001AF1E 08E8 0007 0001             		bset	#7,1(a0)
0001AF24 5428 0024                  		addq.b	#2,$24(a0)
0001AF28                            
0001AF28                            Obj86_Generator:			; XREF: Obj86_Index
0001AF28 2268 0034                  		movea.l	$34(a0),a1
0001AF2C 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001AF32 6600                       		bne.s	loc_1A850
0001AF34 10BC 003F                  		move.b	#$3F,(a0)
0001AF38 117C 0000 0024             		move.b	#0,$24(a0)
0001AF3E 4EF9 0000 DBFA             		jmp	DisplaySprite
0001AF44                            ; ===========================================================================
0001AF44                            
0001AF44                            loc_1A850:
0001AF44 117C 0000 001C             		move.b	#0,$1C(a0)
0001AF4A 4A28 0029                  		tst.b	$29(a0)
0001AF4E 6700                       		beq.s	loc_1A86C
0001AF50 5428 0024                  		addq.b	#2,$24(a0)
0001AF54 117C 0001 001C             		move.b	#1,$1C(a0)
0001AF5A 117C 003E 0028             		move.b	#$3E,$28(a0)
0001AF60                            
0001AF60                            loc_1A86C:
0001AF60 323C 0013                  		move.w	#$13,d1
0001AF64 343C 0008                  		move.w	#8,d2
0001AF68 363C 0011                  		move.w	#$11,d3
0001AF6C 3828 0008                  		move.w	8(a0),d4
0001AF70 4EB9 0000 FFCA             		jsr	SolidObject
0001AF76 3038 D008                  		move.w	($FFFFD008).w,d0
0001AF7A 9068 0008                  		sub.w	8(a0),d0
0001AF7E 6B00                       		bmi.s	loc_1A89A
0001AF80 0440 0140                  		subi.w	#$140,d0
0001AF84 6B00                       		bmi.s	loc_1A89A
0001AF86 4A28 0001                  		tst.b	1(a0)
0001AF8A 6A00 FBB0                  		bpl.w	Obj84_Delete
0001AF8E                            
0001AF8E                            loc_1A89A:
0001AF8E 43FA 0000                  		lea	Ani_obj86(pc),a1
0001AF92 4EB9 0000 ACC4             		jsr	AnimateSprite
0001AF98 4EF9 0000 DBFA             		jmp	DisplaySprite
0001AF9E                            ; ===========================================================================
0001AF9E                            
0001AF9E                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001AF9E 4A28 0029                  		tst.b	$29(a0)
0001AFA2 6700 0000                  		beq.w	loc_1A954
0001AFA6 4228 0029                  		clr.b	$29(a0)
0001AFAA D068 0030                  		add.w	$30(a0),d0
0001AFAE 0240 001E                  		andi.w	#$1E,d0
0001AFB2 D4C0                       		adda.w	d0,a2
0001AFB4 5868 0030                  		addq.w	#4,$30(a0)
0001AFB8 4268 0032                  		clr.w	$32(a0)
0001AFBC 7403                       		moveq	#3,d2
0001AFBE                            
0001AFBE                            Obj86_Loop:
0001AFBE 4EB9 0000 E096             		jsr	SingleObjLoad2
0001AFC4 6600 0000                  		bne.w	loc_1A954
0001AFC8 12BC 0086                  		move.b	#$86,(a1)
0001AFCC 3368 0008 0008             		move.w	8(a0),8(a1)
0001AFD2 337C 053C 000C             		move.w	#$53C,$C(a1)
0001AFD8 137C 0008 0024             		move.b	#8,$24(a1)
0001AFDE 337C 2300 0002             		move.w	#$2300,2(a1)
0001AFE4 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001AFEC 137C 000C 0016             		move.b	#$C,$16(a1)
0001AFF2 137C 000C 0017             		move.b	#$C,$17(a1)
0001AFF8 137C 0000 0020             		move.b	#0,$20(a1)
0001AFFE 137C 0003 0018             		move.b	#3,$18(a1)
0001B004 337C 003E 0028             		move.w	#$3E,$28(a1)
0001B00A 137C 0004 0001             		move.b	#4,1(a1)
0001B010 08E9 0007 0001             		bset	#7,1(a1)
0001B016 2348 0034                  		move.l	a0,$34(a1)
0001B01A 4EB9 0000 2C3A             		jsr	(RandomNumber).l
0001B020 3228 0032                  		move.w	$32(a0),d1
0001B024 C3FC FFB1                  		muls.w	#-$4F,d1
0001B028 0641 2578                  		addi.w	#$2578,d1
0001B02C 0240 001F                  		andi.w	#$1F,d0
0001B030 0440 0010                  		subi.w	#$10,d0
0001B034 D041                       		add.w	d1,d0
0001B036 3340 0030                  		move.w	d0,$30(a1)
0001B03A 5268 0032                  		addq.w	#1,$32(a0)
0001B03E 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001B044 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001B048                            
0001B048                            loc_1A954:
0001B048 4A68 0032                  		tst.w	$32(a0)
0001B04C 6600                       		bne.s	loc_1A95E
0001B04E 5428 0024                  		addq.b	#2,$24(a0)
0001B052                            
0001B052                            loc_1A95E:
0001B052 6000 FF0C                  		bra.w	loc_1A86C
0001B056                            ; ===========================================================================
0001B056                            
0001B056                            loc_1A962:				; XREF: Obj86_Index
0001B056 117C 0002 001C             		move.b	#2,$1C(a0)
0001B05C 4A68 0038                  		tst.w	$38(a0)
0001B060 6600                       		bne.s	loc_1A97E
0001B062 117C 0002 0024             		move.b	#2,$24(a0)
0001B068 2268 0034                  		movea.l	$34(a0),a1
0001B06C 337C FFFF 0032             		move.w	#-1,$32(a1)
0001B072                            
0001B072                            loc_1A97E:
0001B072 6000 FEEC                  		bra.w	loc_1A86C
0001B076                            ; ===========================================================================
0001B076                            
0001B076                            loc_1A982:				; XREF: Obj86_Index
0001B076 7000                       		moveq	#0,d0
0001B078 1028 0025                  		move.b	$25(a0),d0
0001B07C 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001B080 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001B084 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001B088 4EB9 0000 ACC4             		jsr	AnimateSprite
0001B08E 4EF9 0000 DBFA             		jmp	DisplaySprite
0001B094                            ; ===========================================================================
0001B094 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001B096 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001B098 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001B09A                            ; ===========================================================================
0001B09A                            
0001B09A                            loc_1A9A6:				; XREF: Obj86_Index2
0001B09A 3028 0030                  		move.w	$30(a0),d0
0001B09E 9068 0008                  		sub.w	8(a0),d0
0001B0A2 E940                       		asl.w	#4,d0
0001B0A4 3140 0010                  		move.w	d0,$10(a0)
0001B0A8 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B0AE 5428 0025                  		addq.b	#2,$25(a0)
0001B0B2 4E75                       		rts	
0001B0B4                            ; ===========================================================================
0001B0B4                            
0001B0B4                            loc_1A9C0:				; XREF: Obj86_Index2
0001B0B4 4A68 0010                  		tst.w	$10(a0)
0001B0B8 6700                       		beq.s	loc_1A9E6
0001B0BA 4EB9 0000 DBD4             		jsr	SpeedToPos
0001B0C0 3028 0008                  		move.w	8(a0),d0
0001B0C4 9068 0030                  		sub.w	$30(a0),d0
0001B0C8 6400                       		bcc.s	loc_1A9E6
0001B0CA 4268 0010                  		clr.w	$10(a0)
0001B0CE D168 0008                  		add.w	d0,8(a0)
0001B0D2 2268 0034                  		movea.l	$34(a0),a1
0001B0D6 5369 0032                  		subq.w	#1,$32(a1)
0001B0DA                            
0001B0DA                            loc_1A9E6:
0001B0DA 117C 0000 001C             		move.b	#0,$1C(a0)
0001B0E0 5368 0028                  		subq.w	#1,$28(a0)
0001B0E4 6600                       		bne.s	locret_1AA1C
0001B0E6 5428 0025                  		addq.b	#2,$25(a0)
0001B0EA 117C 0001 001C             		move.b	#1,$1C(a0)
0001B0F0 117C 009A 0020             		move.b	#$9A,$20(a0)
0001B0F6 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B0FC 7000                       		moveq	#0,d0
0001B0FE 3038 D008                  		move.w	($FFFFD008).w,d0
0001B102 9068 0008                  		sub.w	8(a0),d0
0001B106 3140 0010                  		move.w	d0,$10(a0)
0001B10A 317C 0140 0012             		move.w	#$140,$12(a0)
0001B110                            
0001B110                            locret_1AA1C:
0001B110 4E75                       		rts	
0001B112                            ; ===========================================================================
0001B112                            
0001B112                            loc_1AA1E:				; XREF: Obj86_Index2
0001B112 4EB9 0000 DBD4             		jsr	SpeedToPos
0001B118 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001B11E 6400                       		bcc.s	loc_1AA34
0001B120 5368 0028                  		subq.w	#1,$28(a0)
0001B124 6700                       		beq.s	loc_1AA34
0001B126 4E75                       		rts	
0001B128                            ; ===========================================================================
0001B128                            
0001B128                            loc_1AA34:
0001B128 2268 0034                  		movea.l	$34(a0),a1
0001B12C 5369 0038                  		subq.w	#1,$38(a1)
0001B130 6000 FA0A                  		bra.w	Obj84_Delete
0001B134                            ; ===========================================================================
0001B134                            Ani_obj86:
0001B134                            	include "_anim\obj86.asm"
0001B134                            ; ---------------------------------------------------------------------------
0001B134                            ; Animation script - energy ball launcher (FZ)
0001B134                            ; ---------------------------------------------------------------------------
0001B134 0000                       		dc.w byte_1AA46-Ani_obj86
0001B136 0000                       		dc.w byte_1AA4A-Ani_obj86
0001B138 0000                       		dc.w byte_1AA50-Ani_obj86
0001B13A 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001B13E 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001B144 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001B14A                            		even
0001B14A                            		even
0001B14A                            
0001B14A                            ; ---------------------------------------------------------------------------
0001B14A                            ; Sprite mappings - energy ball	launcher (FZ)
0001B14A                            ; ---------------------------------------------------------------------------
0001B14A                            Map_obj86:
0001B14A                            	include "_maps\obj86.asm"
0001B14A                            ; ---------------------------------------------------------------------------
0001B14A                            ; Sprite mappings - energy ball	launcher (FZ)
0001B14A                            ; ---------------------------------------------------------------------------
0001B14A 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001B14E 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001B152 01                         byte_1AA5E:	dc.b 1
0001B153 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001B158 01                         byte_1AA64:	dc.b 1
0001B159 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001B15E 01                         byte_1AA6A:	dc.b 1
0001B15F F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B164 01                         byte_1AA70:	dc.b 1
0001B165 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B16A                            		even
0001B16A                            		even
0001B16A                            
0001B16A                            Ani_obj86a:
0001B16A                            	include "_anim\obj86a.asm"
0001B16A                            ; ---------------------------------------------------------------------------
0001B16A                            ; Animation script - energy balls (FZ)
0001B16A                            ; ---------------------------------------------------------------------------
0001B16A 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001B16C 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001B16E 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B17D 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B18C 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001B190 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001B19A                            		even
0001B19A                            		even
0001B19A                            
0001B19A                            ; ---------------------------------------------------------------------------
0001B19A                            ; Sprite mappings - energy balls (FZ)
0001B19A                            ; ---------------------------------------------------------------------------
0001B19A                            Map_obj86a:
0001B19A                            	include "_maps\obj86a.asm"
0001B19A                            ; ---------------------------------------------------------------------------
0001B19A                            ; Sprite mappings - energy balls (FZ)
0001B19A                            ; ---------------------------------------------------------------------------
0001B19A 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001B19E 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001B1A2 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001B1A6 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001B1AA 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001B1AE 0000                       		dc.w byte_1AB20-Map_obj86a
0001B1B0 02                         byte_1AABC:	dc.b 2
0001B1B1 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B1B6 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B1BB 02                         byte_1AAC7:	dc.b 2
0001B1BC F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B1C1 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B1C6 02                         byte_1AAD2:	dc.b 2
0001B1C7 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B1CC 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B1D1 02                         byte_1AADD:	dc.b 2
0001B1D2 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B1D7 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B1DC 02                         byte_1AAE8:	dc.b 2
0001B1DD F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B1E2 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B1E7 02                         byte_1AAF3:	dc.b 2
0001B1E8 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B1ED F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B1F2 01                         byte_1AAFE:	dc.b 1
0001B1F3 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B1F8 01                         byte_1AB04:	dc.b 1
0001B1F9 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B1FE 02                         byte_1AB0A:	dc.b 2
0001B1FF F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B204 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B209 02                         byte_1AB15:	dc.b 2
0001B20A F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B20F F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B214 00                         byte_1AB20:	dc.b 0
0001B216 00                         		even
0001B216 00                         		even
0001B216                            
0001B216                            ; ===========================================================================
0001B216                            ; ---------------------------------------------------------------------------
0001B216                            ; Object 3E - prison capsule
0001B216                            ; ---------------------------------------------------------------------------
0001B216                            
0001B216                            Obj3E:					; XREF: Obj_Index
0001B216 7000                       		moveq	#0,d0
0001B218 1028 0024                  		move.b	$24(a0),d0
0001B21C 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001B220 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001B224 3028 0008                  		move.w	8(a0),d0
0001B228 0240 FF80                  		andi.w	#$FF80,d0
0001B22C 3238 F700                  		move.w	($FFFFF700).w,d1
0001B230 0441 0080                  		subi.w	#$80,d1
0001B234 0241 FF80                  		andi.w	#$FF80,d1
0001B238 9041                       		sub.w	d1,d0
0001B23A 0C40 0280                  		cmpi.w	#$280,d0
0001B23E 6200                       		bhi.s	Obj3E_Delete
0001B240 4EF9 0000 DBFA             		jmp	DisplaySprite
0001B246                            ; ===========================================================================
0001B246                            
0001B246                            Obj3E_Delete:
0001B246 4EF9 0000 DC36             		jmp	DeleteObject
0001B24C                            ; ===========================================================================
0001B24C 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001B24E 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001B250 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001B252 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B254 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B256 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B258 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001B25A 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001B25C                            
0001B25C 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001B260 040C 0501                  		dc.b 4,	$C, 5, 1
0001B264 0610 0403                  		dc.b 6,	$10, 4,	3
0001B268 0810 0305                  		dc.b 8,	$10, 3,	5
0001B26C                            ; ===========================================================================
0001B26C                            
0001B26C                            Obj3E_Main:				; XREF: Obj3E_Index
0001B26C 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001B274 317C 049D 0002             		move.w	#$49D,2(a0)
0001B27A 117C 0004 0001             		move.b	#4,1(a0)
0001B280 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B286 7000                       		moveq	#0,d0
0001B288 1028 0028                  		move.b	$28(a0),d0
0001B28C E548                       		lsl.w	#2,d0
0001B28E 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001B292 1159 0024                  		move.b	(a1)+,$24(a0)
0001B296 1159 0019                  		move.b	(a1)+,$19(a0)
0001B29A 1159 0018                  		move.b	(a1)+,$18(a0)
0001B29E 1159 001A                  		move.b	(a1)+,$1A(a0)
0001B2A2 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001B2A6 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001B2A8 117C 0006 0020             		move.b	#6,$20(a0)
0001B2AE 117C 0008 0021             		move.b	#8,$21(a0)
0001B2B4                            
0001B2B4                            Obj3E_Not02:
0001B2B4 4E75                       		rts	
0001B2B6                            ; ===========================================================================
0001B2B6                            
0001B2B6                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001B2B6 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001B2BC 6700                       		beq.s	Obj3E_ChkOpened
0001B2BE 323C 002B                  		move.w	#$2B,d1
0001B2C2 343C 0018                  		move.w	#$18,d2
0001B2C6 363C 0018                  		move.w	#$18,d3
0001B2CA 3828 0008                  		move.w	8(a0),d4
0001B2CE 4EF9 0000 FFCA             		jmp	SolidObject
0001B2D4                            ; ===========================================================================
0001B2D4                            
0001B2D4                            Obj3E_ChkOpened:
0001B2D4 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001B2D8 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001B2DA 4228 0025                  		clr.b	$25(a0)
0001B2DE 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B2E4 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B2EA                            
0001B2EA                            Obj3E_DoOpen:
0001B2EA 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001B2F0 4E75                       		rts	
0001B2F2                            ; ===========================================================================
0001B2F2                            
0001B2F2                            Obj3E_Switched:				; XREF: Obj3E_Index
0001B2F2 323C 0017                  		move.w	#$17,d1
0001B2F6 343C 0008                  		move.w	#8,d2
0001B2FA 363C 0008                  		move.w	#8,d3
0001B2FE 3828 0008                  		move.w	8(a0),d4
0001B302 4EB9 0000 FFCA             		jsr	SolidObject
0001B308 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001B30E 4EB9 0000 ACC4             		jsr	AnimateSprite
0001B314 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001B31A 4A28 0025                  		tst.b	$25(a0)
0001B31E 6700                       		beq.s	locret_1AC60
0001B320 5068 000C                  		addq.w	#8,$C(a0)
0001B324 117C 000A 0024             		move.b	#$A,$24(a0)
0001B32A 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001B330 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001B334 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001B338 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001B33E 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001B344 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001B346 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001B34C 6000                       		bra.s	Obj3E_ContinueCode
0001B34E                            
0001B34E                            Obj3E_MoveLeft:
0001B34E 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001B354                            
0001B354                            Obj3E_ContinueCode:
0001B354 4228 0025                  		clr.b	$25(a0)
0001B358 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B35E 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B364                            
0001B364                            locret_1AC60:
0001B364 4E75                       		rts	
0001B366                            ; ===========================================================================
0001B366                            
0001B366                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001B366 7007                       		moveq	#7,d0
0001B368 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B36C 6600                       		bne.s	loc_1ACA0
0001B36E 4EB9 0000 E080             		jsr	SingleObjLoad
0001B374 6600                       		bne.s	loc_1ACA0
0001B376 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B37A 3368 0008 0008             		move.w	8(a0),8(a1)
0001B380 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B386 4EB9 0000 2C3A             		jsr	(RandomNumber).l
0001B38C 7200                       		moveq	#0,d1
0001B38E 1200                       		move.b	d0,d1
0001B390 E409                       		lsr.b	#2,d1
0001B392 0441 0020                  		subi.w	#$20,d1
0001B396 D369 0008                  		add.w	d1,8(a1)
0001B39A E048                       		lsr.w	#8,d0
0001B39C E608                       		lsr.b	#3,d0
0001B39E D169 000C                  		add.w	d0,$C(a1)
0001B3A2                            
0001B3A2                            loc_1ACA0:
0001B3A2 5368 001E                  		subq.w	#1,$1E(a0)
0001B3A6 6700                       		beq.s	Obj3E_MakeAnimal
0001B3A8 4E75                       		rts	
0001B3AA                            ; ===========================================================================
0001B3AA                            
0001B3AA                            Obj3E_MakeAnimal:
0001B3AA 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001B3B0 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001B3B6 117C 0006 001A             		move.b	#6,$1A(a0)
0001B3BC 317C 0096 001E             		move.w	#$96,$1E(a0)
0001B3C2 0668 0020 000C             		addi.w	#$20,$C(a0)
0001B3C8 7C07                       		moveq	#7,d6
0001B3CA 3A3C 009A                  		move.w	#$9A,d5
0001B3CE 78E4                       		moveq	#-$1C,d4
0001B3D0                            
0001B3D0                            Obj3E_Loop:
0001B3D0 4EB9 0000 E080             		jsr	SingleObjLoad
0001B3D6 6600                       		bne.s	locret_1ACF8
0001B3D8 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B3DC 3368 0008 0008             		move.w	8(a0),8(a1)
0001B3E2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B3E8 D969 0008                  		add.w	d4,8(a1)
0001B3EC 5E44                       		addq.w	#7,d4
0001B3EE 3345 0036                  		move.w	d5,$36(a1)
0001B3F2 5145                       		subq.w	#8,d5
0001B3F4 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001B3F8                            
0001B3F8                            locret_1ACF8:
0001B3F8 4E75                       		rts	
0001B3FA                            ; ===========================================================================
0001B3FA                            
0001B3FA                            Obj3E_Animals:				; XREF: Obj3E_Index
0001B3FA 7007                       		moveq	#7,d0
0001B3FC C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B400 6600                       		bne.s	loc_1AD38
0001B402 4EB9 0000 E080             		jsr	SingleObjLoad
0001B408 6600                       		bne.s	loc_1AD38
0001B40A 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B40E 3368 0008 0008             		move.w	8(a0),8(a1)
0001B414 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B41A 4EB9 0000 2C3A             		jsr	(RandomNumber).l
0001B420 0240 001F                  		andi.w	#$1F,d0
0001B424 5D40                       		subq.w	#6,d0
0001B426 4A41                       		tst.w	d1
0001B428 6A00                       		bpl.s	loc_1AD2E
0001B42A 4440                       		neg.w	d0
0001B42C                            
0001B42C                            loc_1AD2E:
0001B42C D169 0008                  		add.w	d0,8(a1)
0001B430 337C 000C 0036             		move.w	#$C,$36(a1)
0001B436                            
0001B436                            loc_1AD38:
0001B436 5368 001E                  		subq.w	#1,$1E(a0)
0001B43A 6600                       		bne.s	locret_1AD48
0001B43C 5428 0024                  		addq.b	#2,$24(a0)
0001B440 317C 00B4 001E             		move.w	#180,$1E(a0)
0001B446                            
0001B446                            locret_1AD48:
0001B446 4E75                       		rts	
0001B448                            ; ===========================================================================
0001B448                            
0001B448                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001B448 703E                       		moveq	#$3E,d0
0001B44A 7228                       		moveq	#$28,d1
0001B44C 7440                       		moveq	#$40,d2
0001B44E 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001B452                            
0001B452                            Obj3E_FindObj28:
0001B452 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001B454 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001B456 D2C2                       		adda.w	d2,a1		; next object RAM
0001B458 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001B45C                            
0001B45C 4EB9 0000 F286             		jsr	GotThroughAct
0001B462 4EF9 0000 DC36             		jmp	DeleteObject
0001B468                            ; ===========================================================================
0001B468                            
0001B468                            Obj3E_Obj28Found:
0001B468 4E75                       		rts	
0001B46A                            ; ===========================================================================
0001B46A                            Ani_obj3E:
0001B46A                            	include "_anim\obj3E.asm"
0001B46A                            ; ---------------------------------------------------------------------------
0001B46A                            ; Animation script - prison capsule
0001B46A                            ; ---------------------------------------------------------------------------
0001B46A 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B46C 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B46E 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001B472                            		even
0001B472                            		even
0001B472                            
0001B472                            ; ---------------------------------------------------------------------------
0001B472                            ; Sprite mappings - prison capsule
0001B472                            ; ---------------------------------------------------------------------------
0001B472                            Map_obj3E:
0001B472                            	include "_maps\obj3E.asm"
0001B472                            ; ---------------------------------------------------------------------------
0001B472                            ; Sprite mappings - prison capsule
0001B472                            ; ---------------------------------------------------------------------------
0001B472 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001B476 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001B47A 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001B47E 0000                       		dc.w byte_1ADE2-Map_obj3E
0001B480 07                         byte_1AD82:	dc.b 7
0001B481 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001B486 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001B48B E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001B490 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001B495 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001B49A 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B49F 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B4A4 01                         byte_1ADA6:	dc.b 1
0001B4A5 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001B4AA 06                         byte_1ADAC:	dc.b 6
0001B4AB 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001B4B0 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001B4B5 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001B4BA 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001B4BF 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B4C4 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B4C9 01                         byte_1ADCB:	dc.b 1
0001B4CA F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001B4CF 02                         byte_1ADD1:	dc.b 2
0001B4D0 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001B4D5 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001B4DA 01                         byte_1ADDC:	dc.b 1
0001B4DB F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001B4E0 00                         byte_1ADE2:	dc.b 0
0001B4E2 00                         		even
0001B4E2 00                         		even
0001B4E2                            
0001B4E2                            ; ---------------------------------------------------------------------------
0001B4E2                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001B4E2                            ; ---------------------------------------------------------------------------
0001B4E2                            
0001B4E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B4E2                            
0001B4E2                            
0001B4E2                            TouchResponse:				; XREF: Obj01
0001B4E2 4E71                       		nop	
0001B4E4 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001B4E8 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001B4EC 5142                       		subq.w	#8,d2
0001B4EE 7A00                       		moveq	#0,d5
0001B4F0 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001B4F4 5705                       		subq.b	#3,d5
0001B4F6 9645                       		sub.w	d5,d3
0001B4F8 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001B4FE 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001B500 0643 000C                  		addi.w	#$C,d3
0001B504 7A0A                       		moveq	#$A,d5
0001B506                            
0001B506                            Touch_NoDuck:
0001B506 383C 0010                  		move.w	#$10,d4
0001B50A DA45                       		add.w	d5,d5
0001B50C 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001B510 3C3C 005F                  		move.w	#$5F,d6
0001B514                            
0001B514                            Touch_Loop:
0001B514 4A29 0001                  		tst.b	1(a1)
0001B518 6A00                       		bpl.s	Touch_NextObj
0001B51A 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001B51E 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001B520                            
0001B520                            Touch_NextObj:
0001B520 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001B524 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001B528                            
0001B528 7000                       		moveq	#0,d0
0001B52A 4E75                       		rts	
0001B52C                            ; ===========================================================================
0001B52C 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001B52E 0C14                       		dc.b   $C, $14
0001B530 140C                       		dc.b  $14,  $C
0001B532 0410                       		dc.b	4, $10
0001B534 0C12                       		dc.b   $C, $12
0001B536 1010                       		dc.b  $10, $10
0001B538 0606                       		dc.b	6,   6
0001B53A 180C                       		dc.b  $18,  $C
0001B53C 0C10                       		dc.b   $C, $10
0001B53E 100C                       		dc.b  $10,  $C
0001B540 0808                       		dc.b	8,   8
0001B542 1410                       		dc.b  $14, $10
0001B544 1408                       		dc.b  $14,   8
0001B546 0E0E                       		dc.b   $E,  $E
0001B548 1818                       		dc.b  $18, $18
0001B54A 2810                       		dc.b  $28, $10
0001B54C 1018                       		dc.b  $10, $18
0001B54E 0810                       		dc.b	8, $10
0001B550 2070                       		dc.b  $20, $70
0001B552 4020                       		dc.b  $40, $20
0001B554 8020                       		dc.b  $80, $20
0001B556 2020                       		dc.b  $20, $20
0001B558 0808                       		dc.b	8,   8
0001B55A 0404                       		dc.b	4,   4
0001B55C 2008                       		dc.b  $20,   8
0001B55E 0C0C                       		dc.b   $C,  $C
0001B560 0804                       		dc.b	8,   4
0001B562 1804                       		dc.b  $18,   4
0001B564 2804                       		dc.b  $28,   4
0001B566 0408                       		dc.b	4,   8
0001B568 0418                       		dc.b	4, $18
0001B56A 0428                       		dc.b	4, $28
0001B56C 0420                       		dc.b	4, $20
0001B56E 1818                       		dc.b  $18, $18
0001B570 0C18                       		dc.b   $C, $18
0001B572 4808                       		dc.b  $48,   8
0001B574                            ; ===========================================================================
0001B574                            
0001B574                            Touch_Height:				; XREF: TouchResponse
0001B574 0240 003F                  		andi.w	#$3F,d0
0001B578 D040                       		add.w	d0,d0
0001B57A 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001B57E 7200                       		moveq	#0,d1
0001B580 121A                       		move.b	(a2)+,d1
0001B582 3029 0008                  		move.w	8(a1),d0
0001B586 9041                       		sub.w	d1,d0
0001B588 9042                       		sub.w	d2,d0
0001B58A 6400                       		bcc.s	loc_1AE98
0001B58C D241                       		add.w	d1,d1
0001B58E D041                       		add.w	d1,d0
0001B590 6500                       		bcs.s	Touch_Width
0001B592 6000 FF8C                  		bra.w	Touch_NextObj
0001B596                            ; ===========================================================================
0001B596                            
0001B596                            loc_1AE98:
0001B596 B044                       		cmp.w	d4,d0
0001B598 6200 FF86                  		bhi.w	Touch_NextObj
0001B59C                            
0001B59C                            Touch_Width:
0001B59C 7200                       		moveq	#0,d1
0001B59E 121A                       		move.b	(a2)+,d1
0001B5A0 3029 000C                  		move.w	$C(a1),d0
0001B5A4 9041                       		sub.w	d1,d0
0001B5A6 9043                       		sub.w	d3,d0
0001B5A8 6400                       		bcc.s	loc_1AEB6
0001B5AA D241                       		add.w	d1,d1
0001B5AC D240                       		add.w	d0,d1
0001B5AE 6500                       		bcs.s	Touch_ChkValue
0001B5B0 6000 FF6E                  		bra.w	Touch_NextObj
0001B5B4                            ; ===========================================================================
0001B5B4                            
0001B5B4                            loc_1AEB6:
0001B5B4 B045                       		cmp.w	d5,d0
0001B5B6 6200 FF68                  		bhi.w	Touch_NextObj
0001B5BA                            
0001B5BA                            Touch_ChkValue:
0001B5BA 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001B5BE 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001B5C2 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001B5C6 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001B5CA 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001B5CE 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001B5D0 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001B5D4                            
0001B5D4                            ; touch	response is $40-$7F
0001B5D4                            
0001B5D4 1029 0020                  		move.b	$20(a1),d0
0001B5D8 0200 003F                  		andi.b	#$3F,d0
0001B5DC 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001B5E0 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001B5E2 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001B5E8 6400 0000                  		bcc.w	locret_1AEF2
0001B5EC 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001B5F0                            
0001B5F0                            locret_1AEF2:
0001B5F0 4E75                       		rts	
0001B5F2                            ; ===========================================================================
0001B5F2                            
0001B5F2                            Touch_Monitor:
0001B5F2 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001B5F6 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001B5F8 3028 000C                  		move.w	$C(a0),d0
0001B5FC 0440 0010                  		subi.w	#$10,d0
0001B600 B069 000C                  		cmp.w	$C(a1),d0
0001B604 6500                       		bcs.s	locret_1AF2E
0001B606 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B60A 337C FE80 0012             		move.w	#-$180,$12(a1)
0001B610 4A29 0025                  		tst.b	$25(a1)
0001B614 6600                       		bne.s	locret_1AF2E
0001B616 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001B61A 4E75                       		rts	
0001B61C                            ; ===========================================================================
0001B61C                            
0001B61C                            loc_1AF1E:
0001B61C 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001B622 6600                       		bne.s	locret_1AF2E
0001B624 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B628 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001B62C                            
0001B62C                            locret_1AF2E:
0001B62C 4E75                       		rts	
0001B62E                            ; ===========================================================================
0001B62E                            
0001B62E                            Touch_Enemy:				; XREF: Touch_ChkValue
0001B62E 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B632 6600                       		bne.s	loc_1AF40	; if yes, branch
0001B634 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001B63A 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001B63E                            
0001B63E                            loc_1AF40:
0001B63E 4A29 0021                  		tst.b	$21(a1)
0001B642 6700                       		beq.s	Touch_KillEnemy
0001B644 4468 0010                  		neg.w	$10(a0)
0001B648 4468 0012                  		neg.w	$12(a0)
0001B64C E0E8 0010                  		asr	$10(a0)
0001B650 E0E8 0012                  		asr	$12(a0)
0001B654 137C 0000 0020             		move.b	#0,$20(a1)
0001B65A 5329 0021                  		subq.b	#1,$21(a1)
0001B65E 6600                       		bne.s	locret_1AF68
0001B660 08E9 0007 0022             		bset	#7,$22(a1)
0001B666                            
0001B666                            locret_1AF68:
0001B666 4E75                       		rts	
0001B668                            ; ===========================================================================
0001B668                            
0001B668                            Touch_KillEnemy:
0001B668 08E9 0007 0022             		bset	#7,$22(a1)
0001B66E 7000                       		moveq	#0,d0
0001B670 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001B674 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001B678 0C40 0006                  		cmpi.w	#6,d0
0001B67C 6500                       		bcs.s	loc_1AF82
0001B67E 7006                       		moveq	#6,d0
0001B680                            
0001B680                            loc_1AF82:
0001B680 3340 003E                  		move.w	d0,$3E(a1)
0001B684 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001B688 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001B68E 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001B690 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001B694 337C 000A 003E             		move.w	#$A,$3E(a1)
0001B69A                            
0001B69A                            loc_1AF9C:
0001B69A 6100 0000                  		bsr.w	AddPoints
0001B69E 7400                       		moveq	#0,d2	; GMZ
0001B6A0 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001B6A2 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001B6A4                            
0001B6A4                            TouchKE_Explode:
0001B6A4 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B6A8 137C 0000 0024             		move.b	#0,$24(a1)
0001B6AE 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001B6B2                            
0001B6B2                            TouchKE_NextExplosion:
0001B6B2 5802                       		addq.b	#4,d2
0001B6B4 4EB9 0000 E080             		jsr	SingleObjLoad
0001B6BA 6600                       		bne.s	TouchKE_NoExplosion
0001B6BC 336A 0008 0008             		move.w	8(a2),8(a1)
0001B6C2 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001B6C8 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001B6CC                            
0001B6CC                            TouchKE_NoExplosion:
0001B6CC 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001B6CE 4A68 0012                  		tst.w	$12(a0)
0001B6D2 6B00                       		bmi.s	loc_1AFC2
0001B6D4 3028 000C                  		move.w	$C(a0),d0
0001B6D8 B069 000C                  		cmp.w	$C(a1),d0
0001B6DC 6400                       		bcc.s	loc_1AFCA
0001B6DE 4468 0012                  		neg.w	$12(a0)
0001B6E2 4E75                       		rts	
0001B6E4                            ; ===========================================================================
0001B6E4                            
0001B6E4                            loc_1AFC2:
0001B6E4 0668 0100 0012             		addi.w	#$100,$12(a0)
0001B6EA 4E75                       		rts	
0001B6EC                            ; ===========================================================================
0001B6EC                            
0001B6EC                            loc_1AFCA:
0001B6EC 0468 0100 0012             		subi.w	#$100,$12(a0)
0001B6F2 4E75                       		rts	
0001B6F4                            ; ===========================================================================
0001B6F4 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001B6FC                            ; ===========================================================================
0001B6FC                            
0001B6FC                            loc_1AFDA:				; XREF: Touch_CatKiller
0001B6FC 08E9 0007 0022             		bset	#7,$22(a1)
0001B702                            
0001B702                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001B702 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B706 6700                       		beq.s	Touch_Hurt	; if not, branch
0001B708                            
0001B708                            loc_1AFE6:				; XREF: Touch_Hurt
0001B708 70FF                       		moveq	#-1,d0
0001B70A 4E75                       		rts	
0001B70C                            ; ===========================================================================
0001B70C                            
0001B70C                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001B70C 4E71                       		nop	
0001B70E 4A68 0030                  		tst.w	$30(a0)
0001B712 66F4                       		bne.s	loc_1AFE6
0001B714 2449                       		movea.l	a1,a2
0001B716                            
0001B716                            ; End of function TouchResponse
0001B716                            ; continue straight to HurtSonic
0001B716                            
0001B716                            ; ---------------------------------------------------------------------------
0001B716                            ; Hurting Sonic	subroutine
0001B716                            ; ---------------------------------------------------------------------------
0001B716                            
0001B716                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B716                            
0001B716                            
0001B716                            HurtSonic:
0001B716 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001B71A 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001B71C 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001B720 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001B724 4EB9 0000 E080             		jsr	SingleObjLoad
0001B72A 6600                       		bne.s	Hurt_Shield
0001B72C 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001B730 3368 0008 0008             		move.w	8(a0),8(a1)
0001B736 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B73C                            
0001B73C                            Hurt_Shield:
0001B73C 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001B742 117C 0004 0024             		move.b	#4,$24(a0)
0001B748 6100 86E4                  		bsr.w	Sonic_ResetOnFloor
0001B74C 08E8 0001 0022             		bset	#1,$22(a0)
0001B752 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001B758 317C FE00 0010             		move.w	#-$200,$10(a0)
0001B75E 0828 0006 0022             		btst	#6,$22(a0)
0001B764 6700                       		beq.s	Hurt_Reverse
0001B766 317C FE00 0012             		move.w	#-$200,$12(a0)
0001B76C 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B772                            
0001B772                            Hurt_Reverse:
0001B772 3028 0008                  		move.w	8(a0),d0
0001B776 B06A 0008                  		cmp.w	8(a2),d0
0001B77A 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001B77C 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001B780                            
0001B780                            Hurt_ChkSpikes:
0001B780 317C 0000 0014             		move.w	#0,$14(a0)
0001B786 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001B78C 317C 0078 0030             		move.w	#$78,$30(a0)
0001B792 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001B796 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001B79A 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B79C 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001B7A0 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B7A2 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001B7A6                            
0001B7A6                            Hurt_Sound:
0001B7A6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l
0001B7AC 70FF                       		moveq	#-1,d0
0001B7AE 4E75                       		rts	
0001B7B0                            ; ===========================================================================
0001B7B0                            
0001B7B0                            Hurt_NoRings:
0001B7B0 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001B7B4 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001B7B8                            ; End of function HurtSonic
0001B7B8                            
0001B7B8                            ; ---------------------------------------------------------------------------
0001B7B8                            ; Subroutine to	kill Sonic
0001B7B8                            ; ---------------------------------------------------------------------------
0001B7B8                            
0001B7B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B7B8                            
0001B7B8                            
0001B7B8                            KillSonic:
0001B7B8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001B7BC 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001B7BE 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001B7C4 117C 0006 0024             		move.b	#6,$24(a0)
0001B7CA 6100 8662                  		bsr.w	Sonic_ResetOnFloor
0001B7CE 08E8 0001 0022             		bset	#1,$22(a0)
0001B7D4 317C F900 0012             		move.w	#-$700,$12(a0)
0001B7DA 317C 0000 0010             		move.w	#0,$10(a0)
0001B7E0 317C 0000 0014             		move.w	#0,$14(a0)
0001B7E6 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B7EC 117C 0018 001C             		move.b	#$18,$1C(a0)
0001B7F2 08E8 0007 0002             		bset	#7,2(a0)
0001B7F8 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001B7FC 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001B800 6600                       		bne.s	Kill_Sound
0001B802 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001B806                            
0001B806                            Kill_Sound:
0001B806 4EB9 0000 15BC             		jsr	(PlaySound_Special).l
0001B80C                            
0001B80C                            Kill_NoDeath:
0001B80C 70FF                       		moveq	#-1,d0
0001B80E 4E75                       		rts	
0001B810                            ; End of function KillSonic
0001B810                            
0001B810                            
0001B810                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B810                            
0001B810                            
0001B810                            Touch_Special:				; XREF: Touch_ChkValue
0001B810 1229 0020                  		move.b	$20(a1),d1
0001B814 0201 003F                  		andi.b	#$3F,d1
0001B818 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001B81C 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001B81E 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001B822 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001B824 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001B828 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B82A 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001B82E 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B830 4E75                       		rts	
0001B832                            ; ===========================================================================
0001B832                            
0001B832                            Touch_CatKiller:			; XREF: Touch_Special
0001B832 6000 FEC8                  		bra.w	loc_1AFDA
0001B836                            ; ===========================================================================
0001B836                            
0001B836                            Touch_Yadrin:				; XREF: Touch_Special
0001B836 9A40                       		sub.w	d0,d5
0001B838 0C45 0008                  		cmpi.w	#8,d5
0001B83C 6400                       		bcc.s	loc_1B144
0001B83E 3029 0008                  		move.w	8(a1),d0
0001B842 5940                       		subq.w	#4,d0
0001B844 0829 0000 0022             		btst	#0,$22(a1)
0001B84A 6700                       		beq.s	loc_1B130
0001B84C 0440 0010                  		subi.w	#$10,d0
0001B850                            
0001B850                            loc_1B130:
0001B850 9042                       		sub.w	d2,d0
0001B852 6400                       		bcc.s	loc_1B13C
0001B854 0640 0018                  		addi.w	#$18,d0
0001B858 6500                       		bcs.s	loc_1B140
0001B85A 6000                       		bra.s	loc_1B144
0001B85C                            ; ===========================================================================
0001B85C                            
0001B85C                            loc_1B13C:
0001B85C B044                       		cmp.w	d4,d0
0001B85E 6200                       		bhi.s	loc_1B144
0001B860                            
0001B860                            loc_1B140:
0001B860 6000 FEA0                  		bra.w	Touch_ChkHurt
0001B864                            ; ===========================================================================
0001B864                            
0001B864                            loc_1B144:
0001B864 6000 FDC8                  		bra.w	Touch_Enemy
0001B868                            ; ===========================================================================
0001B868                            
0001B868                            Touch_D7orE1:				; XREF: Touch_Special
0001B868 5229 0021                  		addq.b	#1,$21(a1)
0001B86C 4E75                       		rts	
0001B86E                            ; End of function Touch_Special
0001B86E                            
0001B86E                            ; ---------------------------------------------------------------------------
0001B86E                            ; Subroutine to	show the special stage layout
0001B86E                            ; ---------------------------------------------------------------------------
0001B86E                            
0001B86E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B86E                            
0001B86E                            
0001B86E                            SS_ShowLayout:				; XREF: SpecialStage
0001B86E 6100 0000                  		bsr.w	SS_AniWallsRings
0001B872 6100 0000                  		bsr.w	SS_AniItems
0001B876 3F05                       		move.w	d5,-(sp)
0001B878 43F8 8000                  		lea	($FFFF8000).w,a1
0001B87C 1038 F780                  		move.b	($FFFFF780).w,d0
0001B880 0200 00FC                  		andi.b	#$FC,d0
0001B884 4EB9 0000 2C60             		jsr	(CalcSine).l
0001B88A 3800                       		move.w	d0,d4
0001B88C 3A01                       		move.w	d1,d5
0001B88E C9FC 0018                  		muls.w	#$18,d4
0001B892 CBFC 0018                  		muls.w	#$18,d5
0001B896 7400                       		moveq	#0,d2
0001B898 3438 F700                  		move.w	($FFFFF700).w,d2
0001B89C 84FC 0018                  		divu.w	#$18,d2
0001B8A0 4842                       		swap	d2
0001B8A2 4442                       		neg.w	d2
0001B8A4 0642 FF4C                  		addi.w	#-$B4,d2
0001B8A8 7600                       		moveq	#0,d3
0001B8AA 3638 F704                  		move.w	($FFFFF704).w,d3
0001B8AE 86FC 0018                  		divu.w	#$18,d3
0001B8B2 4843                       		swap	d3
0001B8B4 4443                       		neg.w	d3
0001B8B6 0643 FF4C                  		addi.w	#-$B4,d3
0001B8BA 3E3C 000F                  		move.w	#$F,d7
0001B8BE                            
0001B8BE                            loc_1B19E:
0001B8BE 48A7 E000                  		movem.w	d0-d2,-(sp)
0001B8C2 48A7 C000                  		movem.w	d0-d1,-(sp)
0001B8C6 4440                       		neg.w	d0
0001B8C8 C3C2                       		muls.w	d2,d1
0001B8CA C1C3                       		muls.w	d3,d0
0001B8CC 2C00                       		move.l	d0,d6
0001B8CE DC81                       		add.l	d1,d6
0001B8D0 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001B8D4 C1C2                       		muls.w	d2,d0
0001B8D6 C3C3                       		muls.w	d3,d1
0001B8D8 D280                       		add.l	d0,d1
0001B8DA 2406                       		move.l	d6,d2
0001B8DC 3C3C 000F                  		move.w	#$F,d6
0001B8E0                            
0001B8E0                            loc_1B1C0:
0001B8E0 2002                       		move.l	d2,d0
0001B8E2 E080                       		asr.l	#8,d0
0001B8E4 32C0                       		move.w	d0,(a1)+
0001B8E6 2001                       		move.l	d1,d0
0001B8E8 E080                       		asr.l	#8,d0
0001B8EA 32C0                       		move.w	d0,(a1)+
0001B8EC D485                       		add.l	d5,d2
0001B8EE D284                       		add.l	d4,d1
0001B8F0 51CE FFEE                  		dbf	d6,loc_1B1C0
0001B8F4                            
0001B8F4 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001B8F8 0643 0018                  		addi.w	#$18,d3
0001B8FC 51CF FFC0                  		dbf	d7,loc_1B19E
0001B900                            
0001B900 3A1F                       		move.w	(sp)+,d5
0001B902 41F9 00FF 0000             		lea	($FF0000).l,a0
0001B908 7000                       		moveq	#0,d0
0001B90A 3038 F704                  		move.w	($FFFFF704).w,d0
0001B90E 80FC 0018                  		divu.w	#$18,d0
0001B912 C0FC 0080                  		mulu.w	#$80,d0
0001B916 D1C0                       		adda.l	d0,a0
0001B918 7000                       		moveq	#0,d0
0001B91A 3038 F700                  		move.w	($FFFFF700).w,d0
0001B91E 80FC 0018                  		divu.w	#$18,d0
0001B922 D0C0                       		adda.w	d0,a0
0001B924 49F8 8000                  		lea	($FFFF8000).w,a4
0001B928 3E3C 000F                  		move.w	#$F,d7
0001B92C                            
0001B92C                            loc_1B20C:
0001B92C 3C3C 000F                  		move.w	#$F,d6
0001B930                            
0001B930                            loc_1B210:
0001B930 7000                       		moveq	#0,d0
0001B932 1018                       		move.b	(a0)+,d0
0001B934 6700                       		beq.s	loc_1B268
0001B936 0C00 004E                  		cmpi.b	#$4E,d0
0001B93A 6200                       		bhi.s	loc_1B268
0001B93C 3614                       		move.w	(a4),d3
0001B93E 0643 0120                  		addi.w	#$120,d3
0001B942 0C43 0070                  		cmpi.w	#$70,d3
0001B946 6500                       		bcs.s	loc_1B268
0001B948 0C43 01D0                  		cmpi.w	#$1D0,d3
0001B94C 6400                       		bcc.s	loc_1B268
0001B94E 342C 0002                  		move.w	2(a4),d2
0001B952 0642 00F0                  		addi.w	#$F0,d2
0001B956 0C42 0070                  		cmpi.w	#$70,d2
0001B95A 6500                       		bcs.s	loc_1B268
0001B95C 0C42 0170                  		cmpi.w	#$170,d2
0001B960 6400                       		bcc.s	loc_1B268
0001B962 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001B968 E748                       		lsl.w	#3,d0
0001B96A 4BF5 0000                  		lea	(a5,d0.w),a5
0001B96E 225D                       		movea.l	(a5)+,a1
0001B970 321D                       		move.w	(a5)+,d1
0001B972 D241                       		add.w	d1,d1
0001B974 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001B978 365D                       		movea.w	(a5)+,a3
0001B97A 7200                       		moveq	#0,d1
0001B97C 1219                       		move.b	(a1)+,d1
0001B97E 5301                       		subq.b	#1,d1
0001B980 6B00                       		bmi.s	loc_1B268
0001B982 4EB9 0000 DD58             		jsr	sub_D762
0001B988                            
0001B988                            loc_1B268:
0001B988 584C                       		addq.w	#4,a4
0001B98A 51CE FFA4                  		dbf	d6,loc_1B210
0001B98E                            
0001B98E 41E8 0070                  		lea	$70(a0),a0
0001B992 51CF FF98                  		dbf	d7,loc_1B20C
0001B996                            
0001B996 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001B99A 0C05 0050                  		cmpi.b	#$50,d5
0001B99E 6700                       		beq.s	loc_1B288
0001B9A0 24BC 0000 0000             		move.l	#0,(a2)
0001B9A6 4E75                       		rts	
0001B9A8                            ; ===========================================================================
0001B9A8                            
0001B9A8                            loc_1B288:
0001B9A8 157C 0000 FFFB             		move.b	#0,-5(a2)
0001B9AE 4E75                       		rts	
0001B9B0                            ; End of function SS_ShowLayout
0001B9B0                            
0001B9B0                            ; ---------------------------------------------------------------------------
0001B9B0                            ; Subroutine to	animate	walls and rings	in the special stage
0001B9B0                            ; ---------------------------------------------------------------------------
0001B9B0                            
0001B9B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B9B0                            
0001B9B0                            
0001B9B0                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001B9B0 43F9 00FF 400C             		lea	($FF400C).l,a1
0001B9B6 7000                       		moveq	#0,d0
0001B9B8 1038 F780                  		move.b	($FFFFF780).w,d0
0001B9BC E408                       		lsr.b	#2,d0
0001B9BE 0240 000F                  		andi.w	#$F,d0
0001B9C2 7223                       		moveq	#$23,d1
0001B9C4                            
0001B9C4                            loc_1B2A4:
0001B9C4 3280                       		move.w	d0,(a1)
0001B9C6 5049                       		addq.w	#8,a1
0001B9C8 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001B9CC                            
0001B9CC 43F9 00FF 4005             		lea	($FF4005).l,a1
0001B9D2 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001B9D6 6A00                       		bpl.s	loc_1B2C8
0001B9D8 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001B9DE 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001B9E2 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001B9E8                            
0001B9E8                            loc_1B2C8:
0001B9E8 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001B9EE 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001B9F2 6A00                       		bpl.s	loc_1B2E4
0001B9F4 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001B9FA 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001B9FE 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001BA04                            
0001BA04                            loc_1B2E4:
0001BA04 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001BA08 1340 0138                  		move.b	d0,$138(a1)
0001BA0C 1340 0160                  		move.b	d0,$160(a1)
0001BA10 1340 0148                  		move.b	d0,$148(a1)
0001BA14 1340 0150                  		move.b	d0,$150(a1)
0001BA18 1340 01D8                  		move.b	d0,$1D8(a1)
0001BA1C 1340 01E0                  		move.b	d0,$1E0(a1)
0001BA20 1340 01E8                  		move.b	d0,$1E8(a1)
0001BA24 1340 01F0                  		move.b	d0,$1F0(a1)
0001BA28 1340 01F8                  		move.b	d0,$1F8(a1)
0001BA2C 1340 0200                  		move.b	d0,$200(a1)
0001BA30 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001BA34 6A00                       		bpl.s	loc_1B326
0001BA36 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001BA3C 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001BA40 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001BA46                            
0001BA46                            loc_1B326:
0001BA46 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001BA4A 1340 0168                  		move.b	d0,$168(a1)
0001BA4E 1340 0170                  		move.b	d0,$170(a1)
0001BA52 1340 0178                  		move.b	d0,$178(a1)
0001BA56 1340 0180                  		move.b	d0,$180(a1)
0001BA5A 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001BA5E 6A00                       		bpl.s	loc_1B350
0001BA60 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001BA66 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001BA6A 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001BA70                            
0001BA70                            loc_1B350:
0001BA70 43F9 00FF 4016             		lea	($FF4016).l,a1
0001BA76 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001BA7C 7000                       		moveq	#0,d0
0001BA7E 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001BA82 D040                       		add.w	d0,d0
0001BA84 41F0 0000                  		lea	(a0,d0.w),a0
0001BA88 3290                       		move.w	(a0),(a1)
0001BA8A 3368 0002 0008             		move.w	2(a0),8(a1)
0001BA90 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BA96 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BA9C 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BAA2 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BAA8 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BAAE 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BAB4 D0FC 0020                  		adda.w	#$20,a0
0001BAB8 D2FC 0048                  		adda.w	#$48,a1
0001BABC 3290                       		move.w	(a0),(a1)
0001BABE 3368 0002 0008             		move.w	2(a0),8(a1)
0001BAC4 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BACA 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BAD0 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BAD6 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BADC 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BAE2 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BAE8 D0FC 0020                  		adda.w	#$20,a0
0001BAEC D2FC 0048                  		adda.w	#$48,a1
0001BAF0 3290                       		move.w	(a0),(a1)
0001BAF2 3368 0002 0008             		move.w	2(a0),8(a1)
0001BAF8 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BAFE 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BB04 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BB0A 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BB10 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BB16 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BB1C D0FC 0020                  		adda.w	#$20,a0
0001BB20 D2FC 0048                  		adda.w	#$48,a1
0001BB24 3290                       		move.w	(a0),(a1)
0001BB26 3368 0002 0008             		move.w	2(a0),8(a1)
0001BB2C 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BB32 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BB38 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BB3E 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BB44 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BB4A 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BB50 D0FC 0020                  		adda.w	#$20,a0
0001BB54 D2FC 0048                  		adda.w	#$48,a1
0001BB58 4E75                       		rts	
0001BB5A                            ; End of function SS_AniWallsRings
0001BB5A                            
0001BB5A                            ; ===========================================================================
0001BB5A 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BB6A 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BB7A 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BB8A 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BB9A 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BBAA 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BBBA 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BBCA 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BBDA                            ; ---------------------------------------------------------------------------
0001BBDA                            ; Subroutine to	remove items when you collect them in the special stage
0001BBDA                            ; ---------------------------------------------------------------------------
0001BBDA                            
0001BBDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BBDA                            
0001BBDA                            
0001BBDA                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001BBDA 45F9 00FF 4400             		lea	($FF4400).l,a2
0001BBE0 303C 001F                  		move.w	#$1F,d0
0001BBE4                            
0001BBE4                            loc_1B4C4:
0001BBE4 4A12                       		tst.b	(a2)
0001BBE6 6700                       		beq.s	locret_1B4CE
0001BBE8 504A                       		addq.w	#8,a2
0001BBEA 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001BBEE                            
0001BBEE                            locret_1B4CE:
0001BBEE 4E75                       		rts	
0001BBF0                            ; End of function SS_RemoveCollectedItem
0001BBF0                            
0001BBF0                            ; ---------------------------------------------------------------------------
0001BBF0                            ; Subroutine to	animate	special	stage items when you touch them
0001BBF0                            ; ---------------------------------------------------------------------------
0001BBF0                            
0001BBF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BBF0                            
0001BBF0                            
0001BBF0                            SS_AniItems:				; XREF: SS_ShowLayout
0001BBF0 41F9 00FF 4400             		lea	($FF4400).l,a0
0001BBF6 3E3C 001F                  		move.w	#$1F,d7
0001BBFA                            
0001BBFA                            loc_1B4DA:
0001BBFA 7000                       		moveq	#0,d0
0001BBFC 1010                       		move.b	(a0),d0
0001BBFE 6700                       		beq.s	loc_1B4E8
0001BC00 E548                       		lsl.w	#2,d0
0001BC02 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001BC06 4E91                       		jsr	(a1)
0001BC08                            
0001BC08                            loc_1B4E8:
0001BC08 5048                       		addq.w	#8,a0
0001BC0A                            
0001BC0A                            loc_1B4EA:
0001BC0A 51CF FFEE                  		dbf	d7,loc_1B4DA
0001BC0E                            
0001BC0E 4E75                       		rts	
0001BC10                            ; End of function SS_AniItems
0001BC10                            
0001BC10                            ; ===========================================================================
0001BC10 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001BC14 0000 0000                  		dc.l SS_AniBumper
0001BC18 0000 0000                  		dc.l SS_Ani1Up
0001BC1C 0000 0000                  		dc.l SS_AniReverse
0001BC20 0000 0000                  		dc.l SS_AniEmeraldSparks
0001BC24 0000 0000                  		dc.l SS_AniGlassBlock
0001BC28                            ; ===========================================================================
0001BC28                            
0001BC28                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001BC28 5328 0002                  		subq.b	#1,2(a0)
0001BC2C 6A00                       		bpl.s	locret_1B530
0001BC2E 117C 0005 0002             		move.b	#5,2(a0)
0001BC34 7000                       		moveq	#0,d0
0001BC36 1028 0003                  		move.b	3(a0),d0
0001BC3A 5228 0003                  		addq.b	#1,3(a0)
0001BC3E 2268 0004                  		movea.l	4(a0),a1
0001BC42 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001BC46 1280                       		move.b	d0,(a1)
0001BC48 6600                       		bne.s	locret_1B530
0001BC4A 4290                       		clr.l	(a0)
0001BC4C 42A8 0004                  		clr.l	4(a0)
0001BC50                            
0001BC50                            locret_1B530:
0001BC50 4E75                       		rts	
0001BC52                            ; ===========================================================================
0001BC52 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001BC58                            ; ===========================================================================
0001BC58                            
0001BC58                            SS_AniBumper:				; XREF: SS_AniIndex
0001BC58 5328 0002                  		subq.b	#1,2(a0)
0001BC5C 6A00                       		bpl.s	locret_1B566
0001BC5E 117C 0007 0002             		move.b	#7,2(a0)
0001BC64 7000                       		moveq	#0,d0
0001BC66 1028 0003                  		move.b	3(a0),d0
0001BC6A 5228 0003                  		addq.b	#1,3(a0)
0001BC6E 2268 0004                  		movea.l	4(a0),a1
0001BC72 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001BC76 6600                       		bne.s	loc_1B564
0001BC78 4290                       		clr.l	(a0)
0001BC7A 42A8 0004                  		clr.l	4(a0)
0001BC7E 12BC 0025                  		move.b	#$25,(a1)
0001BC82 4E75                       		rts	
0001BC84                            ; ===========================================================================
0001BC84                            
0001BC84                            loc_1B564:
0001BC84 1280                       		move.b	d0,(a1)
0001BC86                            
0001BC86                            locret_1B566:
0001BC86 4E75                       		rts	
0001BC88                            ; ===========================================================================
0001BC88 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001BC8E                            ; ===========================================================================
0001BC8E                            
0001BC8E                            SS_Ani1Up:				; XREF: SS_AniIndex
0001BC8E 5328 0002                  		subq.b	#1,2(a0)
0001BC92 6A00                       		bpl.s	locret_1B596
0001BC94 117C 0005 0002             		move.b	#5,2(a0)
0001BC9A 7000                       		moveq	#0,d0
0001BC9C 1028 0003                  		move.b	3(a0),d0
0001BCA0 5228 0003                  		addq.b	#1,3(a0)
0001BCA4 2268 0004                  		movea.l	4(a0),a1
0001BCA8 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001BCAC 1280                       		move.b	d0,(a1)
0001BCAE 6600                       		bne.s	locret_1B596
0001BCB0 4290                       		clr.l	(a0)
0001BCB2 42A8 0004                  		clr.l	4(a0)
0001BCB6                            
0001BCB6                            locret_1B596:
0001BCB6 4E75                       		rts	
0001BCB8                            ; ===========================================================================
0001BCB8 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001BCBE                            ; ===========================================================================
0001BCBE                            
0001BCBE                            SS_AniReverse:				; XREF: SS_AniIndex
0001BCBE 5328 0002                  		subq.b	#1,2(a0)
0001BCC2 6A00                       		bpl.s	locret_1B5CC
0001BCC4 117C 0007 0002             		move.b	#7,2(a0)
0001BCCA 7000                       		moveq	#0,d0
0001BCCC 1028 0003                  		move.b	3(a0),d0
0001BCD0 5228 0003                  		addq.b	#1,3(a0)
0001BCD4 2268 0004                  		movea.l	4(a0),a1
0001BCD8 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001BCDC 6600                       		bne.s	loc_1B5CA
0001BCDE 4290                       		clr.l	(a0)
0001BCE0 42A8 0004                  		clr.l	4(a0)
0001BCE4 12BC 002B                  		move.b	#$2B,(a1)
0001BCE8 4E75                       		rts	
0001BCEA                            ; ===========================================================================
0001BCEA                            
0001BCEA                            loc_1B5CA:
0001BCEA 1280                       		move.b	d0,(a1)
0001BCEC                            
0001BCEC                            locret_1B5CC:
0001BCEC 4E75                       		rts	
0001BCEE                            ; ===========================================================================
0001BCEE 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001BCF4                            ; ===========================================================================
0001BCF4                            
0001BCF4                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001BCF4 5328 0002                  		subq.b	#1,2(a0)
0001BCF8 6A00                       		bpl.s	locret_1B60C
0001BCFA 117C 0005 0002             		move.b	#5,2(a0)
0001BD00 7000                       		moveq	#0,d0
0001BD02 1028 0003                  		move.b	3(a0),d0
0001BD06 5228 0003                  		addq.b	#1,3(a0)
0001BD0A 2268 0004                  		movea.l	4(a0),a1
0001BD0E 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001BD12 1280                       		move.b	d0,(a1)
0001BD14 6600                       		bne.s	locret_1B60C
0001BD16 4290                       		clr.l	(a0)
0001BD18 42A8 0004                  		clr.l	4(a0)
0001BD1C 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001BD22 303C 00A8                  		move.w	#$A8,d0
0001BD26 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001BD2C                            
0001BD2C                            locret_1B60C:
0001BD2C 4E75                       		rts	
0001BD2E                            ; ===========================================================================
0001BD2E 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001BD34                            ; ===========================================================================
0001BD34                            
0001BD34                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001BD34 5328 0002                  		subq.b	#1,2(a0)
0001BD38 6A00                       		bpl.s	locret_1B640
0001BD3A 117C 0001 0002             		move.b	#1,2(a0)
0001BD40 7000                       		moveq	#0,d0
0001BD42 1028 0003                  		move.b	3(a0),d0
0001BD46 5228 0003                  		addq.b	#1,3(a0)
0001BD4A 2268 0004                  		movea.l	4(a0),a1
0001BD4E 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001BD52 1280                       		move.b	d0,(a1)
0001BD54 6600                       		bne.s	locret_1B640
0001BD56 12A8 0004                  		move.b	4(a0),(a1)
0001BD5A 4290                       		clr.l	(a0)
0001BD5C 42A8 0004                  		clr.l	4(a0)
0001BD60                            
0001BD60                            locret_1B640:
0001BD60 4E75                       		rts	
0001BD62                            ; ===========================================================================
0001BD62 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001BD6C                            ; ---------------------------------------------------------------------------
0001BD6C                            ; Special stage	layout pointers
0001BD6C                            ; ---------------------------------------------------------------------------
0001BD6C                            SS_LayoutIndex:
0001BD6C                            	include "_inc\Special stage layout pointers.asm"
0001BD6C                            ; ---------------------------------------------------------------------------
0001BD6C                            ; Special stage	layout pointers
0001BD6C                            ; ---------------------------------------------------------------------------
0001BD6C 0000 0000                  	dc.l SS_1
0001BD70 0000 0000                  	dc.l SS_2
0001BD74 0000 0000                  	dc.l SS_3
0001BD78 0000 0000                  	dc.l SS_4
0001BD7C 0000 0000                  	dc.l SS_5
0001BD80 0000 0000                  	dc.l SS_6
0001BD84                            	even
0001BD84                            	even
0001BD84                            
0001BD84                            ; ---------------------------------------------------------------------------
0001BD84                            ; Special stage	start locations
0001BD84                            ; ---------------------------------------------------------------------------
0001BD84                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001BD9C                            		even
0001BD9C                            
0001BD9C                            ; ---------------------------------------------------------------------------
0001BD9C                            ; Subroutine to	load special stage layout
0001BD9C                            ; ---------------------------------------------------------------------------
0001BD9C                            
0001BD9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BD9C                            
0001BD9C                            
0001BD9C                            SS_Load:				; XREF: SpecialStage
0001BD9C 7000                       		moveq	#0,d0
0001BD9E 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001BDA2 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001BDA6 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001BDAC 6500                       		bcs.s	SS_ChkEmldNum
0001BDAE 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001BDB4                            
0001BDB4                            SS_ChkEmldNum:
0001BDB4 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001BDBA 6700                       		beq.s	SS_LoadData	; if yes, branch
0001BDBC 7200                       		moveq	#0,d1
0001BDBE 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001BDC2 5301                       		subq.b	#1,d1
0001BDC4 6500                       		bcs.s	SS_LoadData
0001BDC6 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001BDCA                            
0001BDCA                            SS_ChkEmldLoop:	
0001BDCA B033 1000                  		cmp.b	(a3,d1.w),d0
0001BDCE 6600                       		bne.s	SS_ChkEmldRepeat
0001BDD0 60CA                       		bra.s	SS_Load
0001BDD2                            ; ===========================================================================
0001BDD2                            
0001BDD2                            SS_ChkEmldRepeat:
0001BDD2 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001BDD6                            
0001BDD6                            SS_LoadData:
0001BDD6 E548                       		lsl.w	#2,d0
0001BDD8 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001BDDC 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001BDE0 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001BDE4 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001BDE8 43F9 00FF 4000             		lea	($FF4000).l,a1
0001BDEE 303C 0000                  		move.w	#0,d0
0001BDF2 4EB9 0000 193E             		jsr	(EniDec).l
0001BDF8 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BDFE 303C 0FFF                  		move.w	#$FFF,d0
0001BE02                            
0001BE02                            SS_ClrRAM3:
0001BE02 4299                       		clr.l	(a1)+
0001BE04 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001BE08                            
0001BE08 43F9 00FF 1020             		lea	($FF1020).l,a1
0001BE0E 41F9 00FF 4000             		lea	($FF4000).l,a0
0001BE14 723F                       		moveq	#$3F,d1
0001BE16                            
0001BE16                            loc_1B6F6:
0001BE16 743F                       		moveq	#$3F,d2
0001BE18                            
0001BE18                            loc_1B6F8:
0001BE18 12D8                       		move.b	(a0)+,(a1)+
0001BE1A 51CA FFFC                  		dbf	d2,loc_1B6F8
0001BE1E                            
0001BE1E 43E9 0040                  		lea	$40(a1),a1
0001BE22 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001BE26                            
0001BE26 43F9 00FF 4008             		lea	($FF4008).l,a1
0001BE2C 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001BE32 724D                       		moveq	#$4D,d1
0001BE34                            
0001BE34                            loc_1B714:
0001BE34 22D8                       		move.l	(a0)+,(a1)+
0001BE36 32FC 0000                  		move.w	#0,(a1)+
0001BE3A 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001BE40 32D8                       		move.w	(a0)+,(a1)+
0001BE42 51C9 FFF0                  		dbf	d1,loc_1B714
0001BE46                            
0001BE46 43F9 00FF 4400             		lea	($FF4400).l,a1
0001BE4C 323C 003F                  		move.w	#$3F,d1
0001BE50                            
0001BE50                            loc_1B730:
0001BE50                            
0001BE50 4299                       		clr.l	(a1)+
0001BE52 51C9 FFFC                  		dbf	d1,loc_1B730
0001BE56                            
0001BE56 4E75                       		rts	
0001BE58                            ; End of function SS_Load
0001BE58                            
0001BE58                            ; ===========================================================================
0001BE58                            ; ---------------------------------------------------------------------------
0001BE58                            ; Special stage	mappings and VRAM pointers
0001BE58                            ; ---------------------------------------------------------------------------
0001BE58                            SS_MapIndex:
0001BE58                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001BE58                            ; ---------------------------------------------------------------------------
0001BE58                            ; Special stage	mappings and VRAM pointers
0001BE58                            ; ---------------------------------------------------------------------------
0001BE58 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001BE5C 0142                       	dc.w $142		; VRAM setting
0001BE5E 0000 0000                  	dc.l Map_SSWalls
0001BE62 0142                       	dc.w $142
0001BE64 0000 0000                  	dc.l Map_SSWalls
0001BE68 0142                       	dc.w $142
0001BE6A 0000 0000                  	dc.l Map_SSWalls
0001BE6E 0142                       	dc.w $142
0001BE70 0000 0000                  	dc.l Map_SSWalls
0001BE74 0142                       	dc.w $142
0001BE76 0000 0000                  	dc.l Map_SSWalls
0001BE7A 0142                       	dc.w $142
0001BE7C 0000 0000                  	dc.l Map_SSWalls
0001BE80 0142                       	dc.w $142
0001BE82 0000 0000                  	dc.l Map_SSWalls
0001BE86 0142                       	dc.w $142
0001BE88 0000 0000                  	dc.l Map_SSWalls
0001BE8C 0142                       	dc.w $142
0001BE8E 0000 0000                  	dc.l Map_SSWalls
0001BE92 2142                       	dc.w $2142
0001BE94 0000 0000                  	dc.l Map_SSWalls
0001BE98 2142                       	dc.w $2142
0001BE9A 0000 0000                  	dc.l Map_SSWalls
0001BE9E 2142                       	dc.w $2142
0001BEA0 0000 0000                  	dc.l Map_SSWalls
0001BEA4 2142                       	dc.w $2142
0001BEA6 0000 0000                  	dc.l Map_SSWalls
0001BEAA 2142                       	dc.w $2142
0001BEAC 0000 0000                  	dc.l Map_SSWalls
0001BEB0 2142                       	dc.w $2142
0001BEB2 0000 0000                  	dc.l Map_SSWalls
0001BEB6 2142                       	dc.w $2142
0001BEB8 0000 0000                  	dc.l Map_SSWalls
0001BEBC 2142                       	dc.w $2142
0001BEBE 0000 0000                  	dc.l Map_SSWalls
0001BEC2 2142                       	dc.w $2142
0001BEC4 0000 0000                  	dc.l Map_SSWalls
0001BEC8 4142                       	dc.w $4142
0001BECA 0000 0000                  	dc.l Map_SSWalls
0001BECE 4142                       	dc.w $4142
0001BED0 0000 0000                  	dc.l Map_SSWalls
0001BED4 4142                       	dc.w $4142
0001BED6 0000 0000                  	dc.l Map_SSWalls
0001BEDA 4142                       	dc.w $4142
0001BEDC 0000 0000                  	dc.l Map_SSWalls
0001BEE0 4142                       	dc.w $4142
0001BEE2 0000 0000                  	dc.l Map_SSWalls
0001BEE6 4142                       	dc.w $4142
0001BEE8 0000 0000                  	dc.l Map_SSWalls
0001BEEC 4142                       	dc.w $4142
0001BEEE 0000 0000                  	dc.l Map_SSWalls
0001BEF2 4142                       	dc.w $4142
0001BEF4 0000 0000                  	dc.l Map_SSWalls
0001BEF8 4142                       	dc.w $4142
0001BEFA 0000 0000                  	dc.l Map_SSWalls
0001BEFE 6142                       	dc.w $6142
0001BF00 0000 0000                  	dc.l Map_SSWalls
0001BF04 6142                       	dc.w $6142
0001BF06 0000 0000                  	dc.l Map_SSWalls
0001BF0A 6142                       	dc.w $6142
0001BF0C 0000 0000                  	dc.l Map_SSWalls
0001BF10 6142                       	dc.w $6142
0001BF12 0000 0000                  	dc.l Map_SSWalls
0001BF16 6142                       	dc.w $6142
0001BF18 0000 0000                  	dc.l Map_SSWalls
0001BF1C 6142                       	dc.w $6142
0001BF1E 0000 0000                  	dc.l Map_SSWalls
0001BF22 6142                       	dc.w $6142
0001BF24 0000 0000                  	dc.l Map_SSWalls
0001BF28 6142                       	dc.w $6142
0001BF2A 0000 0000                  	dc.l Map_SSWalls
0001BF2E 6142                       	dc.w $6142
0001BF30 0000 F0EE                  	dc.l Map_obj47
0001BF34 023B                       	dc.w $23B
0001BF36 0000 0000                  	dc.l Map_SS_R
0001BF3A 0570                       	dc.w $570
0001BF3C 0000 0000                  	dc.l Map_SS_R
0001BF40 0251                       	dc.w $251
0001BF42 0000 0000                  	dc.l Map_SS_R
0001BF46 0370                       	dc.w $370
0001BF48 0000 0000                  	dc.l Map_SS_Up
0001BF4C 0263                       	dc.w $263
0001BF4E 0000 0000                  	dc.l Map_SS_Down
0001BF52 0263                       	dc.w $263
0001BF54 0000 0000                  	dc.l Map_SS_R
0001BF58 22F0                       	dc.w $22F0
0001BF5A 0000 0000                  	dc.l Map_SS_Glass
0001BF5E 0470                       	dc.w $470
0001BF60 0000 0000                  	dc.l Map_SS_Glass
0001BF64 05F0                       	dc.w $5F0
0001BF66 0000 0000                  	dc.l Map_SS_Glass
0001BF6A 65F0                       	dc.w $65F0
0001BF6C 0000 0000                  	dc.l Map_SS_Glass
0001BF70 25F0                       	dc.w $25F0
0001BF72 0000 0000                  	dc.l Map_SS_Glass
0001BF76 45F0                       	dc.w $45F0
0001BF78 0000 0000                  	dc.l Map_SS_R
0001BF7C 02F0                       	dc.w $2F0
0001BF7E 0100 F0EE                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001BF82 023B                       	dc.w $23B
0001BF84 0200 F0EE                  	dc.l Map_obj47+$2000000
0001BF88 023B                       	dc.w $23B
0001BF8A 0000 0000                  	dc.l Map_SS_R
0001BF8E 0797                       	dc.w $797
0001BF90 0000 0000                  	dc.l Map_SS_R
0001BF94 07A0                       	dc.w $7A0
0001BF96 0000 0000                  	dc.l Map_SS_R
0001BF9A 07A9                       	dc.w $7A9
0001BF9C 0000 0000                  	dc.l Map_SS_R
0001BFA0 0797                       	dc.w $797
0001BFA2 0000 0000                  	dc.l Map_SS_R
0001BFA6 07A0                       	dc.w $7A0
0001BFA8 0000 0000                  	dc.l Map_SS_R
0001BFAC 07A9                       	dc.w $7A9
0001BFAE 0000 A462                  	dc.l Map_obj25
0001BFB2 27B2                       	dc.w $27B2
0001BFB4 0000 0000                  	dc.l Map_SS_Chaos3
0001BFB8 0770                       	dc.w $770
0001BFBA 0000 0000                  	dc.l Map_SS_Chaos3
0001BFBE 2770                       	dc.w $2770
0001BFC0 0000 0000                  	dc.l Map_SS_Chaos3
0001BFC4 4770                       	dc.w $4770
0001BFC6 0000 0000                  	dc.l Map_SS_Chaos3
0001BFCA 6770                       	dc.w $6770
0001BFCC 0000 0000                  	dc.l Map_SS_Chaos1
0001BFD0 0770                       	dc.w $770
0001BFD2 0000 0000                  	dc.l Map_SS_Chaos2
0001BFD6 0770                       	dc.w $770
0001BFD8 0000 0000                  	dc.l Map_SS_R
0001BFDC 04F0                       	dc.w $4F0
0001BFDE 0400 A462                  	dc.l Map_obj25+$4000000
0001BFE2 27B2                       	dc.w $27B2
0001BFE4 0500 A462                  	dc.l Map_obj25+$5000000
0001BFE8 27B2                       	dc.w $27B2
0001BFEA 0600 A462                  	dc.l Map_obj25+$6000000
0001BFEE 27B2                       	dc.w $27B2
0001BFF0 0700 A462                  	dc.l Map_obj25+$7000000
0001BFF4 27B2                       	dc.w $27B2
0001BFF6 0000 0000                  	dc.l Map_SS_Glass
0001BFFA 23F0                       	dc.w $23F0
0001BFFC 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001C000 23F0                       	dc.w $23F0
0001C002 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001C006 23F0                       	dc.w $23F0
0001C008 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001C00C 23F0                       	dc.w $23F0
0001C00E 0000 0000                  	dc.l Map_SS_R+$2000000
0001C012 04F0                       	dc.w $4F0
0001C014 0000 0000                  	dc.l Map_SS_Glass
0001C018 05F0                       	dc.w $5F0
0001C01A 0000 0000                  	dc.l Map_SS_Glass
0001C01E 65F0                       	dc.w $65F0
0001C020 0000 0000                  	dc.l Map_SS_Glass
0001C024 25F0                       	dc.w $25F0
0001C026 0000 0000                  	dc.l Map_SS_Glass
0001C02A 45F0                       	dc.w $45F0
0001C02A 45F0                       	dc.w $45F0
0001C02C                            
0001C02C                            ; ---------------------------------------------------------------------------
0001C02C                            ; Sprite mappings - special stage "R" block
0001C02C                            ; ---------------------------------------------------------------------------
0001C02C                            Map_SS_R:
0001C02C                            	include "_maps\SSRblock.asm"
0001C02C                            ; ---------------------------------------------------------------------------
0001C02C                            ; Sprite mappings - special stage "R" block
0001C02C                            ; ---------------------------------------------------------------------------
0001C02C 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001C030 0000                       		dc.w byte_1B91E-Map_SS_R
0001C032 01                         byte_1B912:	dc.b 1
0001C033 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C038 01                         byte_1B918:	dc.b 1
0001C039 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C03E 00                         byte_1B91E:	dc.b 0
0001C040 00                         		even
0001C040 00                         		even
0001C040                            
0001C040                            ; ---------------------------------------------------------------------------
0001C040                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C040                            ; ---------------------------------------------------------------------------
0001C040                            Map_SS_Glass:
0001C040                            	include "_maps\SSglassblock.asm"
0001C040                            ; ---------------------------------------------------------------------------
0001C040                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C040                            ; ---------------------------------------------------------------------------
0001C040 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001C044 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001C048 01                         byte_1B928:	dc.b 1
0001C049 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C04E 01                         byte_1B92E:	dc.b 1
0001C04F F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001C054 01                         byte_1B934:	dc.b 1
0001C055 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001C05A 01                         byte_1B93A:	dc.b 1
0001C05B F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001C060                            		even
0001C060                            		even
0001C060                            
0001C060                            ; ---------------------------------------------------------------------------
0001C060                            ; Sprite mappings - special stage "UP" block
0001C060                            ; ---------------------------------------------------------------------------
0001C060                            Map_SS_Up:
0001C060                            	include "_maps\SSUPblock.asm"
0001C060                            ; ---------------------------------------------------------------------------
0001C060                            ; Sprite mappings - special stage "UP" block
0001C060                            ; ---------------------------------------------------------------------------
0001C060 0000                       		dc.w byte_1B944-Map_SS_Up
0001C062 0000                       		dc.w byte_1B94A-Map_SS_Up
0001C064 01                         byte_1B944:	dc.b 1
0001C065 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C06A 01                         byte_1B94A:	dc.b 1
0001C06B F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C070                            		even
0001C070                            		even
0001C070                            
0001C070                            ; ---------------------------------------------------------------------------
0001C070                            ; Sprite mappings - special stage "DOWN" block
0001C070                            ; ---------------------------------------------------------------------------
0001C070                            Map_SS_Down:
0001C070                            	include "_maps\SSDOWNblock.asm"
0001C070                            ; ---------------------------------------------------------------------------
0001C070                            ; Sprite mappings - special stage "DOWN" block
0001C070                            ; ---------------------------------------------------------------------------
0001C070 0000                       		dc.w byte_1B954-Map_SS_Down
0001C072 0000                       		dc.w byte_1B95A-Map_SS_Down
0001C074 01                         byte_1B954:	dc.b 1
0001C075 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C07A 01                         byte_1B95A:	dc.b 1
0001C07B F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C080                            		even
0001C080                            		even
0001C080                            
0001C080                            ; ---------------------------------------------------------------------------
0001C080                            ; Sprite mappings - special stage chaos	emeralds
0001C080                            ; ---------------------------------------------------------------------------
0001C080 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001C082 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001C084 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001C086 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001C088 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001C08A 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001C08C 01                         byte_1B96C:	dc.b 1
0001C08D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001C092 01                         byte_1B972:	dc.b 1
0001C093 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001C098 01                         byte_1B978:	dc.b 1
0001C099 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001C09E 01                         byte_1B97E:	dc.b 1
0001C09F F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001C0A4                            		even
0001C0A4                            ; ===========================================================================
0001C0A4                            ; ---------------------------------------------------------------------------
0001C0A4                            ; Object 09 - Sonic (special stage)
0001C0A4                            ; ---------------------------------------------------------------------------
0001C0A4                            
0001C0A4                            Obj09:					; XREF: Obj_Index
0001C0A4 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001C0A8 6700                       		beq.s	Obj09_Normal	; if not, branch
0001C0AA 6100 0000                  		bsr.w	SS_FixCamera
0001C0AE 6000 0000                  		bra.w	DebugMode
0001C0B2                            ; ===========================================================================
0001C0B2                            
0001C0B2                            Obj09_Normal:
0001C0B2 7000                       		moveq	#0,d0
0001C0B4 1028 0024                  		move.b	$24(a0),d0
0001C0B8 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001C0BC 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001C0C0                            ; ===========================================================================
0001C0C0 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001C0C2 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001C0C4 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001C0C6 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001C0C8                            ; ===========================================================================
0001C0C8                            
0001C0C8                            Obj09_Main:				; XREF: Obj09_Index
0001C0C8 5428 0024                  		addq.b	#2,$24(a0)
0001C0CC 117C 000E 0016             		move.b	#$E,$16(a0)
0001C0D2 117C 0007 0017             		move.b	#7,$17(a0)
0001C0D8 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001C0E0 317C 0780 0002             		move.w	#$780,2(a0)
0001C0E6 117C 0004 0001             		move.b	#4,1(a0)
0001C0EC 117C 0000 0018             		move.b	#0,$18(a0)
0001C0F2 117C 0002 001C             		move.b	#2,$1C(a0)
0001C0F8 08E8 0002 0022             		bset	#2,$22(a0)
0001C0FE 08E8 0001 0022             		bset	#1,$22(a0)
0001C104                            
0001C104                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001C104 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001C108 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C10A 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001C110 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C112 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001C118                            
0001C118                            Obj09_NoDebug:
0001C118 117C 0000 0030             		move.b	#0,$30(a0)
0001C11E 7000                       		moveq	#0,d0
0001C120 1028 0022                  		move.b	$22(a0),d0
0001C124 0240 0002                  		andi.w	#2,d0
0001C128 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001C12C 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001C130 4EBA 81B6                  		jsr	LoadSonicDynPLC
0001C134 4EF9 0000 DBFA             		jmp	DisplaySprite
0001C13A                            ; ===========================================================================
0001C13A 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001C13C 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001C13E                            ; ===========================================================================
0001C13E                            
0001C13E                            Obj09_OnWall:				; XREF: Obj09_Modes
0001C13E 6100 0000                  		bsr.w	Obj09_Jump
0001C142 6100 0000                  		bsr.w	Obj09_Move
0001C146 6100 0000                  		bsr.w	Obj09_Fall
0001C14A 6000                       		bra.s	Obj09_Display
0001C14C                            ; ===========================================================================
0001C14C                            
0001C14C                            Obj09_InAir:				; XREF: Obj09_Modes
0001C14C 6100 0000                  		bsr.w	nullsub_2
0001C150 6100 0000                  		bsr.w	Obj09_Move
0001C154 6100 0000                  		bsr.w	Obj09_Fall
0001C158                            
0001C158                            Obj09_Display:				; XREF: Obj09_OnWall
0001C158 6100 0000                  		bsr.w	Obj09_ChkItems
0001C15C 6100 0000                  		bsr.w	Obj09_ChkItems2
0001C160 4EB9 0000 DBD4             		jsr	SpeedToPos
0001C166 6100 0000                  		bsr.w	SS_FixCamera
0001C16A 3038 F780                  		move.w	($FFFFF780).w,d0
0001C16E D078 F782                  		add.w	($FFFFF782).w,d0
0001C172 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C176 4EB9 0001 4052             		jsr	Sonic_Animate
0001C17C 4E75                       		rts	
0001C17E                            
0001C17E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C17E                            
0001C17E                            
0001C17E                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001C17E 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C184 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C186 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C18A                            
0001C18A                            Obj09_ChkRight:
0001C18A 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C190 6700                       		beq.s	loc_1BA78	; if not, branch
0001C192 6100 0000                  		bsr.w	Obj09_MoveRight
0001C196                            
0001C196                            loc_1BA78:
0001C196 1038 F602                  		move.b	($FFFFF602).w,d0
0001C19A 0200 000C                  		andi.b	#$C,d0
0001C19E 6600                       		bne.s	loc_1BAA8
0001C1A0 3028 0014                  		move.w	$14(a0),d0
0001C1A4 6700                       		beq.s	loc_1BAA8
0001C1A6 6B00                       		bmi.s	loc_1BA9A
0001C1A8 0440 000C                  		subi.w	#$C,d0
0001C1AC 6400                       		bcc.s	loc_1BA94
0001C1AE 303C 0000                  		move.w	#0,d0
0001C1B2                            
0001C1B2                            loc_1BA94:
0001C1B2 3140 0014                  		move.w	d0,$14(a0)
0001C1B6 6000                       		bra.s	loc_1BAA8
0001C1B8                            ; ===========================================================================
0001C1B8                            
0001C1B8                            loc_1BA9A:
0001C1B8 0640 000C                  		addi.w	#$C,d0
0001C1BC 6400                       		bcc.s	loc_1BAA4
0001C1BE 303C 0000                  		move.w	#0,d0
0001C1C2                            
0001C1C2                            loc_1BAA4:
0001C1C2 3140 0014                  		move.w	d0,$14(a0)
0001C1C6                            
0001C1C6                            loc_1BAA8:
0001C1C6 1038 F780                  		move.b	($FFFFF780).w,d0
0001C1CA 0600 0020                  		addi.b	#$20,d0
0001C1CE 0200 00C0                  		andi.b	#$C0,d0
0001C1D2 4400                       		neg.b	d0
0001C1D4 4EB9 0000 2C60             		jsr	(CalcSine).l
0001C1DA C3E8 0014                  		muls.w	$14(a0),d1
0001C1DE D3A8 0008                  		add.l	d1,8(a0)
0001C1E2 C1E8 0014                  		muls.w	$14(a0),d0
0001C1E6 D1A8 000C                  		add.l	d0,$C(a0)
0001C1EA 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C1EE 2428 000C                  		move.l	$C(a0),d2
0001C1F2 2628 0008                  		move.l	8(a0),d3
0001C1F6 6100 0000                  		bsr.w	sub_1BCE8
0001C1FA 6700                       		beq.s	loc_1BAF2
0001C1FC 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C200 93A8 0008                  		sub.l	d1,8(a0)
0001C204 91A8 000C                  		sub.l	d0,$C(a0)
0001C208 317C 0000 0014             		move.w	#0,$14(a0)
0001C20E 4E75                       		rts	
0001C210                            ; ===========================================================================
0001C210                            
0001C210                            loc_1BAF2:
0001C210 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C214 4E75                       		rts	
0001C216                            ; End of function Obj09_Move
0001C216                            
0001C216                            
0001C216                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C216                            
0001C216                            
0001C216                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001C216 08E8 0000 0022             		bset	#0,$22(a0)
0001C21C 3028 0014                  		move.w	$14(a0),d0
0001C220 6700                       		beq.s	loc_1BB06
0001C222 6A00                       		bpl.s	loc_1BB1A
0001C224                            
0001C224                            loc_1BB06:
0001C224 0440 000C                  		subi.w	#$C,d0
0001C228 0C40 F800                  		cmpi.w	#-$800,d0
0001C22C 6E00                       		bgt.s	loc_1BB14
0001C22E 303C F800                  		move.w	#-$800,d0
0001C232                            
0001C232                            loc_1BB14:
0001C232 3140 0014                  		move.w	d0,$14(a0)
0001C236 4E75                       		rts	
0001C238                            ; ===========================================================================
0001C238                            
0001C238                            loc_1BB1A:
0001C238 0440 0040                  		subi.w	#$40,d0
0001C23C 6400                       		bcc.s	loc_1BB22
0001C23E 4E71                       		nop	
0001C240                            
0001C240                            loc_1BB22:
0001C240 3140 0014                  		move.w	d0,$14(a0)
0001C244 4E75                       		rts	
0001C246                            ; End of function Obj09_MoveLeft
0001C246                            
0001C246                            
0001C246                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C246                            
0001C246                            
0001C246                            Obj09_MoveRight:			; XREF: Obj09_Move
0001C246 08A8 0000 0022             		bclr	#0,$22(a0)
0001C24C 3028 0014                  		move.w	$14(a0),d0
0001C250 6B00                       		bmi.s	loc_1BB48
0001C252 0640 000C                  		addi.w	#$C,d0
0001C256 0C40 0800                  		cmpi.w	#$800,d0
0001C25A 6D00                       		blt.s	loc_1BB42
0001C25C 303C 0800                  		move.w	#$800,d0
0001C260                            
0001C260                            loc_1BB42:
0001C260 3140 0014                  		move.w	d0,$14(a0)
0001C264 6000                       		bra.s	locret_1BB54
0001C266                            ; ===========================================================================
0001C266                            
0001C266                            loc_1BB48:
0001C266 0640 0040                  		addi.w	#$40,d0
0001C26A 6400                       		bcc.s	loc_1BB50
0001C26C 4E71                       		nop	
0001C26E                            
0001C26E                            loc_1BB50:
0001C26E 3140 0014                  		move.w	d0,$14(a0)
0001C272                            
0001C272                            locret_1BB54:
0001C272 4E75                       		rts	
0001C274                            ; End of function Obj09_MoveRight
0001C274                            
0001C274                            
0001C274                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C274                            
0001C274                            
0001C274                            Obj09_Jump:				; XREF: Obj09_OnWall
0001C274 1038 F603                  		move.b	($FFFFF603).w,d0
0001C278 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001C27C 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001C27E 1038 F780                  		move.b	($FFFFF780).w,d0
0001C282 0200 00FC                  		andi.b	#$FC,d0
0001C286 4400                       		neg.b	d0
0001C288 0400 0040                  		subi.b	#$40,d0
0001C28C 4EB9 0000 2C60             		jsr	(CalcSine).l
0001C292 C3FC 0680                  		muls.w	#$680,d1
0001C296 E081                       		asr.l	#8,d1
0001C298 3141 0010                  		move.w	d1,$10(a0)
0001C29C C1FC 0680                  		muls.w	#$680,d0
0001C2A0 E080                       		asr.l	#8,d0
0001C2A2 3140 0012                  		move.w	d0,$12(a0)
0001C2A6 08E8 0001 0022             		bset	#1,$22(a0)
0001C2AC 303C 00A0                  		move.w	#$A0,d0
0001C2B0 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play jumping sound
0001C2B6                            
0001C2B6                            Obj09_NoJump:
0001C2B6 4E75                       		rts	
0001C2B8                            ; End of function Obj09_Jump
0001C2B8                            
0001C2B8                            
0001C2B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C2B8                            
0001C2B8                            
0001C2B8                            nullsub_2:				; XREF: Obj09_InAir
0001C2B8 4E75                       		rts	
0001C2BA                            ; End of function nullsub_2
0001C2BA                            
0001C2BA                            ; ===========================================================================
0001C2BA                            ; ---------------------------------------------------------------------------
0001C2BA                            ; unused subroutine to limit Sonic's upward vertical speed
0001C2BA                            ; ---------------------------------------------------------------------------
0001C2BA 323C FC00                  		move.w	#-$400,d1
0001C2BE B268 0012                  		cmp.w	$12(a0),d1
0001C2C2 6F00                       		ble.s	locret_1BBB4
0001C2C4 1038 F602                  		move.b	($FFFFF602).w,d0
0001C2C8 0200 0070                  		andi.b	#$70,d0
0001C2CC 6600                       		bne.s	locret_1BBB4
0001C2CE 3141 0012                  		move.w	d1,$12(a0)
0001C2D2                            
0001C2D2                            locret_1BBB4:
0001C2D2 4E75                       		rts	
0001C2D4                            ; ---------------------------------------------------------------------------
0001C2D4                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001C2D4                            ; ---------------------------------------------------------------------------
0001C2D4                            
0001C2D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C2D4                            
0001C2D4                            
0001C2D4                            SS_FixCamera:				; XREF: Obj09
0001C2D4 3428 000C                  		move.w	$C(a0),d2
0001C2D8 3628 0008                  		move.w	8(a0),d3
0001C2DC 3038 F700                  		move.w	($FFFFF700).w,d0
0001C2E0 0443 00A0                  		subi.w	#$A0,d3
0001C2E4 6500                       		bcs.s	loc_1BBCE
0001C2E6 9043                       		sub.w	d3,d0
0001C2E8 9178 F700                  		sub.w	d0,($FFFFF700).w
0001C2EC                            
0001C2EC                            loc_1BBCE:
0001C2EC 3038 F704                  		move.w	($FFFFF704).w,d0
0001C2F0 0442 0070                  		subi.w	#$70,d2
0001C2F4 6500                       		bcs.s	locret_1BBDE
0001C2F6 9042                       		sub.w	d2,d0
0001C2F8 9178 F704                  		sub.w	d0,($FFFFF704).w
0001C2FC                            
0001C2FC                            locret_1BBDE:
0001C2FC 4E75                       		rts	
0001C2FE                            ; End of function SS_FixCamera
0001C2FE                            
0001C2FE                            ; ===========================================================================
0001C2FE                            
0001C2FE                            Obj09_ExitStage:			; XREF: Obj09_Index
0001C2FE 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001C304 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001C30A 6600                       		bne.s	loc_1BBF4
0001C30C 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C312                            
0001C312                            loc_1BBF4:
0001C312 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001C318 6D00                       		blt.s	loc_1BC12
0001C31A 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001C320 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001C326 5428 0024                  		addq.b	#2,$24(a0)
0001C32A 317C 003C 0038             		move.w	#$3C,$38(a0)
0001C330                            
0001C330                            loc_1BC12:
0001C330 3038 F780                  		move.w	($FFFFF780).w,d0
0001C334 D078 F782                  		add.w	($FFFFF782).w,d0
0001C338 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C33C 4EB9 0001 4052             		jsr	Sonic_Animate
0001C342 4EB9 0001 42E8             		jsr	LoadSonicDynPLC
0001C348 6100 FF8A                  		bsr.w	SS_FixCamera
0001C34C 4EF9 0000 DBFA             		jmp	DisplaySprite
0001C352                            ; ===========================================================================
0001C352                            
0001C352                            Obj09_Exit2:				; XREF: Obj09_Index
0001C352 5368 0038                  		subq.w	#1,$38(a0)
0001C356 6600                       		bne.s	loc_1BC40
0001C358 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C35E                            
0001C35E                            loc_1BC40:
0001C35E 4EB9 0001 4052             		jsr	Sonic_Animate
0001C364 4EB9 0001 42E8             		jsr	LoadSonicDynPLC
0001C36A 6100 FF68                  		bsr.w	SS_FixCamera
0001C36E 4EF9 0000 DBFA             		jmp	DisplaySprite
0001C374                            
0001C374                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C374                            
0001C374                            
0001C374                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001C374 2428 000C                  		move.l	$C(a0),d2
0001C378 2628 0008                  		move.l	8(a0),d3
0001C37C 1038 F780                  		move.b	($FFFFF780).w,d0
0001C380 0200 00FC                  		andi.b	#$FC,d0
0001C384 4EB9 0000 2C60             		jsr	(CalcSine).l
0001C38A 3828 0010                  		move.w	$10(a0),d4
0001C38E 48C4                       		ext.l	d4
0001C390 E184                       		asl.l	#8,d4
0001C392 C1FC 002A                  		muls.w	#$2A,d0
0001C396 D084                       		add.l	d4,d0
0001C398 3828 0012                  		move.w	$12(a0),d4
0001C39C 48C4                       		ext.l	d4
0001C39E E184                       		asl.l	#8,d4
0001C3A0 C3FC 002A                  		muls.w	#$2A,d1
0001C3A4 D284                       		add.l	d4,d1
0001C3A6 D680                       		add.l	d0,d3
0001C3A8 6100 0000                  		bsr.w	sub_1BCE8
0001C3AC 6700                       		beq.s	loc_1BCB0
0001C3AE 9680                       		sub.l	d0,d3
0001C3B0 7000                       		moveq	#0,d0
0001C3B2 3140 0010                  		move.w	d0,$10(a0)
0001C3B6 08A8 0001 0022             		bclr	#1,$22(a0)
0001C3BC D481                       		add.l	d1,d2
0001C3BE 6100 0000                  		bsr.w	sub_1BCE8
0001C3C2 6700                       		beq.s	loc_1BCC6
0001C3C4 9481                       		sub.l	d1,d2
0001C3C6 7200                       		moveq	#0,d1
0001C3C8 3141 0012                  		move.w	d1,$12(a0)
0001C3CC 4E75                       		rts	
0001C3CE                            ; ===========================================================================
0001C3CE                            
0001C3CE                            loc_1BCB0:
0001C3CE D481                       		add.l	d1,d2
0001C3D0 6100 0000                  		bsr.w	sub_1BCE8
0001C3D4 6700                       		beq.s	loc_1BCD4
0001C3D6 9481                       		sub.l	d1,d2
0001C3D8 7200                       		moveq	#0,d1
0001C3DA 3141 0012                  		move.w	d1,$12(a0)
0001C3DE 08A8 0001 0022             		bclr	#1,$22(a0)
0001C3E4                            
0001C3E4                            loc_1BCC6:
0001C3E4 E080                       		asr.l	#8,d0
0001C3E6 E081                       		asr.l	#8,d1
0001C3E8 3140 0010                  		move.w	d0,$10(a0)
0001C3EC 3141 0012                  		move.w	d1,$12(a0)
0001C3F0 4E75                       		rts	
0001C3F2                            ; ===========================================================================
0001C3F2                            
0001C3F2                            loc_1BCD4:
0001C3F2 E080                       		asr.l	#8,d0
0001C3F4 E081                       		asr.l	#8,d1
0001C3F6 3140 0010                  		move.w	d0,$10(a0)
0001C3FA 3141 0012                  		move.w	d1,$12(a0)
0001C3FE 08E8 0001 0022             		bset	#1,$22(a0)
0001C404 4E75                       		rts	
0001C406                            ; End of function Obj09_Fall
0001C406                            
0001C406                            
0001C406                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C406                            
0001C406                            
0001C406                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001C406 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C40C 7800                       		moveq	#0,d4
0001C40E 4842                       		swap	d2
0001C410 3802                       		move.w	d2,d4
0001C412 4842                       		swap	d2
0001C414 0644 0044                  		addi.w	#$44,d4
0001C418 88FC 0018                  		divu.w	#$18,d4
0001C41C C8FC 0080                  		mulu.w	#$80,d4
0001C420 D3C4                       		adda.l	d4,a1
0001C422 7800                       		moveq	#0,d4
0001C424 4843                       		swap	d3
0001C426 3803                       		move.w	d3,d4
0001C428 4843                       		swap	d3
0001C42A 0644 0014                  		addi.w	#$14,d4
0001C42E 88FC 0018                  		divu.w	#$18,d4
0001C432 D2C4                       		adda.w	d4,a1
0001C434 7A00                       		moveq	#0,d5
0001C436 1819                       		move.b	(a1)+,d4
0001C438 6100                       		bsr.s	sub_1BD30
0001C43A 1819                       		move.b	(a1)+,d4
0001C43C 6100                       		bsr.s	sub_1BD30
0001C43E D2FC 007E                  		adda.w	#$7E,a1
0001C442 1819                       		move.b	(a1)+,d4
0001C444 6100                       		bsr.s	sub_1BD30
0001C446 1819                       		move.b	(a1)+,d4
0001C448 6100                       		bsr.s	sub_1BD30
0001C44A 4A05                       		tst.b	d5
0001C44C 4E75                       		rts	
0001C44E                            ; End of function sub_1BCE8
0001C44E                            
0001C44E                            
0001C44E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C44E                            
0001C44E                            
0001C44E                            sub_1BD30:				; XREF: sub_1BCE8
0001C44E 6700                       		beq.s	locret_1BD44
0001C450 0C04 0028                  		cmpi.b	#$28,d4
0001C454 6700                       		beq.s	locret_1BD44
0001C456 0C04 003A                  		cmpi.b	#$3A,d4
0001C45A 6500                       		bcs.s	loc_1BD46
0001C45C 0C04 004B                  		cmpi.b	#$4B,d4
0001C460 6400                       		bcc.s	loc_1BD46
0001C462                            
0001C462                            locret_1BD44:
0001C462 4E75                       		rts	
0001C464                            ; ===========================================================================
0001C464                            
0001C464                            loc_1BD46:
0001C464 1144 0030                  		move.b	d4,$30(a0)
0001C468 2149 0032                  		move.l	a1,$32(a0)
0001C46C 7AFF                       		moveq	#-1,d5
0001C46E 4E75                       		rts	
0001C470                            ; End of function sub_1BD30
0001C470                            
0001C470                            
0001C470                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C470                            
0001C470                            
0001C470                            Obj09_ChkItems:				; XREF: Obj09_Display
0001C470 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C476 7800                       		moveq	#0,d4
0001C478 3828 000C                  		move.w	$C(a0),d4
0001C47C 0644 0050                  		addi.w	#$50,d4
0001C480 88FC 0018                  		divu.w	#$18,d4
0001C484 C8FC 0080                  		mulu.w	#$80,d4
0001C488 D3C4                       		adda.l	d4,a1
0001C48A 7800                       		moveq	#0,d4
0001C48C 3828 0008                  		move.w	8(a0),d4
0001C490 0644 0020                  		addi.w	#$20,d4
0001C494 88FC 0018                  		divu.w	#$18,d4
0001C498 D2C4                       		adda.w	d4,a1
0001C49A 1811                       		move.b	(a1),d4
0001C49C 6600                       		bne.s	Obj09_ChkCont
0001C49E 4A28 003A                  		tst.b	$3A(a0)
0001C4A2 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001C4A6 7800                       		moveq	#0,d4
0001C4A8 4E75                       		rts	
0001C4AA                            ; ===========================================================================
0001C4AA                            
0001C4AA                            Obj09_ChkCont:
0001C4AA 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001C4AE 6600                       		bne.s	Obj09_Chk1Up
0001C4B0 6100 F728                  		bsr.w	SS_RemoveCollectedItem
0001C4B4 6600                       		bne.s	Obj09_GetCont
0001C4B6 14BC 0001                  		move.b	#1,(a2)
0001C4BA 2549 0004                  		move.l	a1,4(a2)
0001C4BE                            
0001C4BE                            Obj09_GetCont:
0001C4BE 4EB9 0000 A14A             		jsr	CollectRing
0001C4C4 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001C4CA 6500                       		bcs.s	Obj09_NoCont
0001C4CC 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001C4D2 6600                       		bne.s	Obj09_NoCont
0001C4D4 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001C4D8 303C 00BF                  		move.w	#$BF,d0
0001C4DC 4EB9 0000 15B6             		jsr	(PlaySound).l	; play extra continue sound
0001C4E2                            
0001C4E2                            Obj09_NoCont:
0001C4E2 7800                       		moveq	#0,d4
0001C4E4 4E75                       		rts	
0001C4E6                            ; ===========================================================================
0001C4E6                            
0001C4E6                            Obj09_Chk1Up:
0001C4E6 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001C4EA 6600                       		bne.s	Obj09_ChkEmer
0001C4EC 6100 F6EC                  		bsr.w	SS_RemoveCollectedItem
0001C4F0 6600                       		bne.s	Obj09_Get1Up
0001C4F2 14BC 0003                  		move.b	#3,(a2)
0001C4F6 2549 0004                  		move.l	a1,4(a2)
0001C4FA                            
0001C4FA                            Obj09_Get1Up:
0001C4FA 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001C4FE 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001C502 303C 0088                  		move.w	#$88,d0
0001C506 4EB9 0000 15B6             		jsr	(PlaySound).l	; play extra life music
0001C50C 7800                       		moveq	#0,d4
0001C50E 4E75                       		rts	
0001C510                            ; ===========================================================================
0001C510                            
0001C510                            Obj09_ChkEmer:
0001C510 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001C514 6500                       		bcs.s	Obj09_ChkGhost
0001C516 0C04 0040                  		cmpi.b	#$40,d4
0001C51A 6200                       		bhi.s	Obj09_ChkGhost
0001C51C 6100 F6BC                  		bsr.w	SS_RemoveCollectedItem
0001C520 6600                       		bne.s	Obj09_GetEmer
0001C522 14BC 0005                  		move.b	#5,(a2)
0001C526 2549 0004                  		move.l	a1,4(a2)
0001C52A                            
0001C52A                            Obj09_GetEmer:
0001C52A 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001C530 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001C532 0404 003B                  		subi.b	#$3B,d4
0001C536 7000                       		moveq	#0,d0
0001C538 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001C53C 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001C540 1584 0000                  		move.b	d4,(a2,d0.w)
0001C544 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001C548                            
0001C548                            Obj09_NoEmer:
0001C548 303C 0093                  		move.w	#$93,d0
0001C54C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play emerald music
0001C552 7800                       		moveq	#0,d4
0001C554 4E75                       		rts	
0001C556                            ; ===========================================================================
0001C556                            
0001C556                            Obj09_ChkGhost:
0001C556 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001C55A 6600                       		bne.s	Obj09_ChkGhostTag
0001C55C 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001C562                            
0001C562                            Obj09_ChkGhostTag:
0001C562 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001C566 6600                       		bne.s	Obj09_NoGhost
0001C568 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001C56E 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001C570 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001C576                            
0001C576                            Obj09_NoGhost:
0001C576 78FF                       		moveq	#-1,d4
0001C578 4E75                       		rts	
0001C57A                            ; ===========================================================================
0001C57A                            
0001C57A                            Obj09_MakeGhostSolid:
0001C57A 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001C580 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001C582 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C588 723F                       		moveq	#$3F,d1
0001C58A                            
0001C58A                            Obj09_GhostLoop2:
0001C58A 743F                       		moveq	#$3F,d2
0001C58C                            
0001C58C                            Obj09_GhostLoop:
0001C58C 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001C590 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001C592 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001C596                            
0001C596                            Obj09_NoReplace:
0001C596 5249                       		addq.w	#1,a1
0001C598 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001C59C 43E9 0040                  		lea	$40(a1),a1
0001C5A0 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001C5A4                            
0001C5A4                            Obj09_GhostNotSolid:
0001C5A4 4228 003A                  		clr.b	$3A(a0)
0001C5A8 7800                       		moveq	#0,d4
0001C5AA 4E75                       		rts	
0001C5AC                            ; End of function Obj09_ChkItems
0001C5AC                            
0001C5AC                            
0001C5AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C5AC                            
0001C5AC                            
0001C5AC                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001C5AC 1028 0030                  		move.b	$30(a0),d0
0001C5B0 6600                       		bne.s	Obj09_ChkBumper
0001C5B2 5328 0036                  		subq.b	#1,$36(a0)
0001C5B6 6A00                       		bpl.s	loc_1BEA0
0001C5B8 117C 0000 0036             		move.b	#0,$36(a0)
0001C5BE                            
0001C5BE                            loc_1BEA0:
0001C5BE 5328 0037                  		subq.b	#1,$37(a0)
0001C5C2 6A00                       		bpl.s	locret_1BEAC
0001C5C4 117C 0000 0037             		move.b	#0,$37(a0)
0001C5CA                            
0001C5CA                            locret_1BEAC:
0001C5CA 4E75                       		rts	
0001C5CC                            ; ===========================================================================
0001C5CC                            
0001C5CC                            Obj09_ChkBumper:
0001C5CC 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001C5D0 6600                       		bne.s	Obj09_GOAL
0001C5D2 2228 0032                  		move.l	$32(a0),d1
0001C5D6 0481 00FF 0001             		subi.l	#$FF0001,d1
0001C5DC 3401                       		move.w	d1,d2
0001C5DE 0241 007F                  		andi.w	#$7F,d1
0001C5E2 C2FC 0018                  		mulu.w	#$18,d1
0001C5E6 0441 0014                  		subi.w	#$14,d1
0001C5EA EE4A                       		lsr.w	#7,d2
0001C5EC 0242 007F                  		andi.w	#$7F,d2
0001C5F0 C4FC 0018                  		mulu.w	#$18,d2
0001C5F4 0442 0044                  		subi.w	#$44,d2
0001C5F8 9268 0008                  		sub.w	8(a0),d1
0001C5FC 9468 000C                  		sub.w	$C(a0),d2
0001C600 4EB9 0000 2F2E             		jsr	(CalcAngle).l
0001C606 4EB9 0000 2C60             		jsr	(CalcSine).l
0001C60C C3FC F900                  		muls.w	#-$700,d1
0001C610 E081                       		asr.l	#8,d1
0001C612 3141 0010                  		move.w	d1,$10(a0)
0001C616 C1FC F900                  		muls.w	#-$700,d0
0001C61A E080                       		asr.l	#8,d0
0001C61C 3140 0012                  		move.w	d0,$12(a0)
0001C620 08E8 0001 0022             		bset	#1,$22(a0)
0001C626 6100 F5B2                  		bsr.w	SS_RemoveCollectedItem
0001C62A 6600                       		bne.s	Obj09_BumpSnd
0001C62C 14BC 0002                  		move.b	#2,(a2)
0001C630 2028 0032                  		move.l	$32(a0),d0
0001C634 5380                       		subq.l	#1,d0
0001C636 2540 0004                  		move.l	d0,4(a2)
0001C63A                            
0001C63A                            Obj09_BumpSnd:
0001C63A 303C 00B4                  		move.w	#$B4,d0
0001C63E 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play bumper sound
0001C644                            ; ===========================================================================
0001C644                            
0001C644                            Obj09_GOAL:
0001C644 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001C648 6600                       		bne.s	Obj09_UPblock
0001C64A 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001C64E 303C 00A8                  		move.w	#$A8,d0		; change item
0001C652 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001C658 4E75                       		rts	
0001C65A                            ; ===========================================================================
0001C65A                            
0001C65A                            Obj09_UPblock:
0001C65A 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001C65E 6600                       		bne.s	Obj09_DOWNblock
0001C660 4A28 0036                  		tst.b	$36(a0)
0001C664 6600 0000                  		bne.w	Obj09_NoGlass
0001C668 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C66E 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C674 6700                       		beq.s	Obj09_UPsnd
0001C676 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001C67A 2268 0032                  		movea.l	$32(a0),a1
0001C67E 5389                       		subq.l	#1,a1
0001C680 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001C684                            
0001C684                            Obj09_UPsnd:
0001C684 303C 00A9                  		move.w	#$A9,d0
0001C688 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C68E                            ; ===========================================================================
0001C68E                            
0001C68E                            Obj09_DOWNblock:
0001C68E 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001C692 6600                       		bne.s	Obj09_Rblock
0001C694 4A28 0036                  		tst.b	$36(a0)
0001C698 6600 0000                  		bne.w	Obj09_NoGlass
0001C69C 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C6A2 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C6A8 6600                       		bne.s	Obj09_DOWNsnd
0001C6AA E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001C6AE 2268 0032                  		movea.l	$32(a0),a1
0001C6B2 5389                       		subq.l	#1,a1
0001C6B4 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001C6B8                            
0001C6B8                            Obj09_DOWNsnd:
0001C6B8 303C 00A9                  		move.w	#$A9,d0
0001C6BC 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C6C2                            ; ===========================================================================
0001C6C2                            
0001C6C2                            Obj09_Rblock:
0001C6C2 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001C6C6 6600                       		bne.s	Obj09_ChkGlass
0001C6C8 4A28 0037                  		tst.b	$37(a0)
0001C6CC 6600 0000                  		bne.w	Obj09_NoGlass
0001C6D0 117C 001E 0037             		move.b	#$1E,$37(a0)
0001C6D6 6100 F502                  		bsr.w	SS_RemoveCollectedItem
0001C6DA 6600                       		bne.s	Obj09_RevStage
0001C6DC 14BC 0004                  		move.b	#4,(a2)
0001C6E0 2028 0032                  		move.l	$32(a0),d0
0001C6E4 5380                       		subq.l	#1,d0
0001C6E6 2540 0004                  		move.l	d0,4(a2)
0001C6EA                            
0001C6EA                            Obj09_RevStage:
0001C6EA 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001C6EE 303C 00A9                  		move.w	#$A9,d0
0001C6F2 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play sound
0001C6F8                            ; ===========================================================================
0001C6F8                            
0001C6F8                            Obj09_ChkGlass:
0001C6F8 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001C6FC 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001C6FE 0C00 002E                  		cmpi.b	#$2E,d0
0001C702 6700                       		beq.s	Obj09_Glass
0001C704 0C00 002F                  		cmpi.b	#$2F,d0
0001C708 6700                       		beq.s	Obj09_Glass
0001C70A 0C00 0030                  		cmpi.b	#$30,d0
0001C70E 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001C710                            
0001C710                            Obj09_Glass:
0001C710 6100 F4C8                  		bsr.w	SS_RemoveCollectedItem
0001C714 6600                       		bne.s	Obj09_GlassSnd
0001C716 14BC 0006                  		move.b	#6,(a2)
0001C71A 2268 0032                  		movea.l	$32(a0),a1
0001C71E 5389                       		subq.l	#1,a1
0001C720 2549 0004                  		move.l	a1,4(a2)
0001C724 1011                       		move.b	(a1),d0
0001C726 5200                       		addq.b	#1,d0		; change glass type when touched
0001C728 0C00 0030                  		cmpi.b	#$30,d0
0001C72C 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001C72E 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001C730                            
0001C730                            Obj09_GlassUpdate:
0001C730 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001C734                            
0001C734                            Obj09_GlassSnd:
0001C734 303C 00BA                  		move.w	#$BA,d0
0001C738 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play glass block sound
0001C73E                            ; ===========================================================================
0001C73E                            
0001C73E                            Obj09_NoGlass:
0001C73E 4E75                       		rts	
0001C740                            ; End of function Obj09_ChkItems2
0001C740                            
0001C740                            ; ===========================================================================
0001C740                            ; ---------------------------------------------------------------------------
0001C740                            ; Object 10 - blank
0001C740                            ; ---------------------------------------------------------------------------
0001C740                            
0001C740                            Obj10:					; XREF: Obj_Index
0001C740 4E75                       		rts	
0001C742                            ; ---------------------------------------------------------------------------
0001C742                            ; Subroutine to	animate	level graphics
0001C742                            ; ---------------------------------------------------------------------------
0001C742                            
0001C742                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C742                            
0001C742                            
0001C742                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001C742 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C746 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001C748 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C74E 6100 0000                  		bsr.w	AniArt_GiantRing
0001C752 7000                       		moveq	#0,d0
0001C754 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001C758 D040                       		add.w	d0,d0
0001C75A 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001C75E 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001C762                            ; ===========================================================================
0001C762                            
0001C762                            AniArt_Pause:
0001C762 4E75                       		rts	
0001C764                            ; End of function AniArt_Load
0001C764                            
0001C764                            ; ===========================================================================
0001C764 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001C768 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001C76C 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001C770 0000                       		dc.w AniArt_Ending-AniArt_Index
0001C772                            ; ===========================================================================
0001C772                            ; ---------------------------------------------------------------------------
0001C772                            ; Animated pattern routine - Green Hill
0001C772                            ; ---------------------------------------------------------------------------
0001C772                            
0001C772                            AniArt_GHZ:				; XREF: AniArt_Index
0001C772 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C776 6A00                       		bpl.s	loc_1C08A
0001C778 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001C77E 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001C784 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C788 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C78C 0240 0001                  		andi.w	#1,d0
0001C790 6700                       		beq.s	loc_1C078
0001C792 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001C796                            
0001C796                            loc_1C078:
0001C796 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001C7A0 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001C7A4 6000 0000                  		bra.w	LoadTiles
0001C7A8                            ; ===========================================================================
0001C7A8                            
0001C7A8                            loc_1C08A:
0001C7A8 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C7AC 6A00                       		bpl.s	loc_1C0C0
0001C7AE 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001C7B4 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C7BA 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C7BE 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C7C2 0240 0001                  		andi.w	#1,d0
0001C7C6 6700                       		beq.s	loc_1C0AE
0001C7C8 43E9 0200                  		lea	$200(a1),a1
0001C7CC                            
0001C7CC                            loc_1C0AE:
0001C7CC 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C7D6 323C 000F                  		move.w	#$F,d1
0001C7DA 6000 0000                  		bra.w	LoadTiles
0001C7DE                            ; ===========================================================================
0001C7DE                            
0001C7DE                            loc_1C0C0:
0001C7DE 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C7E2 6A00                       		bpl.s	locret_1C10C
0001C7E4 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C7EA 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C7EE 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C7F2 0240 0003                  		andi.w	#3,d0
0001C7F6 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001C7FA 0800 0000                  		btst	#0,d0
0001C7FE 6600                       		bne.s	loc_1C0E8
0001C800 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001C806                            
0001C806                            loc_1C0E8:
0001C806 EF48                       		lsl.w	#7,d0
0001C808 3200                       		move.w	d0,d1
0001C80A D040                       		add.w	d0,d0
0001C80C D041                       		add.w	d1,d0
0001C80E 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C818 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C81E 43F1 0000                  		lea	(a1,d0.w),a1
0001C822 323C 000B                  		move.w	#$B,d1
0001C826 6100 0000                  		bsr.w	LoadTiles
0001C82A                            
0001C82A                            locret_1C10C:
0001C82A 4E75                       		rts	
0001C82C                            ; ===========================================================================
0001C82C 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001C830                            ; ===========================================================================
0001C830                            ; ---------------------------------------------------------------------------
0001C830                            ; Animated pattern routine - Marble
0001C830                            ; ---------------------------------------------------------------------------
0001C830                            
0001C830                            AniArt_MZ:				; XREF: AniArt_Index
0001C830 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C834 6A00                       		bpl.s	loc_1C150
0001C836 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001C83C 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001C842 7000                       		moveq	#0,d0
0001C844 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C848 5200                       		addq.b	#1,d0
0001C84A 0C00 0003                  		cmpi.b	#3,d0
0001C84E 6600                       		bne.s	loc_1C134
0001C850 7000                       		moveq	#0,d0
0001C852                            
0001C852                            loc_1C134:
0001C852 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001C856 C0FC 0100                  		mulu.w	#$100,d0
0001C85A D2C0                       		adda.w	d0,a1
0001C85C 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001C866 323C 0007                  		move.w	#7,d1
0001C86A 6100 0000                  		bsr.w	LoadTiles
0001C86E                            
0001C86E                            loc_1C150:
0001C86E 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C872 6A00                       		bpl.s	loc_1C1AE
0001C874 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001C87A 7000                       		moveq	#0,d0
0001C87C 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C880 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001C886 EE58                       		ror.w	#7,d0
0001C888 D8C0                       		adda.w	d0,a4
0001C88A 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001C894 7600                       		moveq	#0,d3
0001C896 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001C89A 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C89E 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001C8A2 343C 0003                  		move.w	#3,d2
0001C8A6                            
0001C8A6                            loc_1C188:
0001C8A6 3003                       		move.w	d3,d0
0001C8A8 D040                       		add.w	d0,d0
0001C8AA 0240 001E                  		andi.w	#$1E,d0
0001C8AE 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001C8B4 3033 0000                  		move.w	(a3,d0.w),d0
0001C8B8 47F3 0000                  		lea	(a3,d0.w),a3
0001C8BC 224C                       		movea.l	a4,a1
0001C8BE 323C 001F                  		move.w	#$1F,d1
0001C8C2 4E93                       		jsr	(a3)
0001C8C4 5843                       		addq.w	#4,d3
0001C8C6 51CA FFDE                  		dbf	d2,loc_1C188
0001C8CA 4E75                       		rts	
0001C8CC                            ; ===========================================================================
0001C8CC                            
0001C8CC                            loc_1C1AE:
0001C8CC 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C8D0 6A00 0000                  		bpl.w	locret_1C1EA
0001C8D4 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C8DA 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001C8E0 7000                       		moveq	#0,d0
0001C8E2 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001C8E6 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001C8EA 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001C8F0 C0FC 00C0                  		mulu.w	#$C0,d0
0001C8F4 D2C0                       		adda.w	d0,a1
0001C8F6 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001C900 323C 0005                  		move.w	#5,d1
0001C904 6000 0000                  		bra.w	LoadTiles
0001C908                            ; ===========================================================================
0001C908                            
0001C908                            locret_1C1EA:
0001C908 4E75                       		rts	
0001C90A                            ; ===========================================================================
0001C90A                            ; ---------------------------------------------------------------------------
0001C90A                            ; Animated pattern routine - Scrap Brain
0001C90A                            ; ---------------------------------------------------------------------------
0001C90A                            
0001C90A                            AniArt_SBZ:				; XREF: AniArt_Index
0001C90A 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001C90E 6700                       		beq.s	loc_1C1F8
0001C910 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001C914 6000                       		bra.s	loc_1C250
0001C916                            ; ===========================================================================
0001C916                            
0001C916                            loc_1C1F8:
0001C916 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C91A 6A00                       		bpl.s	loc_1C250
0001C91C 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001C922 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001C928 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001C932 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C936 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C93A 0240 0007                  		andi.w	#7,d0
0001C93E 6700                       		beq.s	loc_1C234
0001C940 5340                       		subq.w	#1,d0
0001C942 C0FC 0180                  		mulu.w	#$180,d0
0001C946 43F1 0000                  		lea	(a1,d0.w),a1
0001C94A 323C 000B                  		move.w	#$B,d1
0001C94E 6000 0000                  		bra.w	LoadTiles
0001C952                            ; ===========================================================================
0001C952                            
0001C952                            loc_1C234:
0001C952 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001C958                            
0001C958                            loc_1C23A:
0001C958 323C 0005                  		move.w	#5,d1
0001C95C 6100 0000                  		bsr.w	LoadTiles
0001C960 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C966 323C 0005                  		move.w	#5,d1
0001C96A 6000 0000                  		bra.w	LoadTiles
0001C96E                            ; ===========================================================================
0001C96E                            
0001C96E                            loc_1C250:
0001C96E 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001C972 6700                       		beq.s	loc_1C25C
0001C974 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C978 6000                       		bra.s	locret_1C2A0
0001C97A                            ; ===========================================================================
0001C97A                            
0001C97A                            loc_1C25C:
0001C97A 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C97E 6A00                       		bpl.s	locret_1C2A0
0001C980 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C986 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C98C 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001C996 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C99A 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C99E 0240 0007                  		andi.w	#7,d0
0001C9A2 6700                       		beq.s	loc_1C298
0001C9A4 5340                       		subq.w	#1,d0
0001C9A6 C0FC 0180                  		mulu.w	#$180,d0
0001C9AA 43F1 0000                  		lea	(a1,d0.w),a1
0001C9AE 323C 000B                  		move.w	#$B,d1
0001C9B2 6000 0000                  		bra.w	LoadTiles
0001C9B6                            ; ===========================================================================
0001C9B6                            
0001C9B6                            loc_1C298:
0001C9B6 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001C9BC 609A                       		bra.s	loc_1C23A
0001C9BE                            ; ===========================================================================
0001C9BE                            
0001C9BE                            locret_1C2A0:
0001C9BE 4E75                       		rts	
0001C9C0                            ; ===========================================================================
0001C9C0                            ; ---------------------------------------------------------------------------
0001C9C0                            ; Animated pattern routine - ending sequence
0001C9C0                            ; ---------------------------------------------------------------------------
0001C9C0                            
0001C9C0                            AniArt_Ending:				; XREF: AniArt_Index
0001C9C0 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C9C4 6A00                       		bpl.s	loc_1C2F4
0001C9C6 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C9CC 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C9D2 45F8 9400                  		lea	($FFFF9400).w,a2
0001C9D6 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C9DA 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C9DE 0240 0001                  		andi.w	#1,d0
0001C9E2 6700                       		beq.s	loc_1C2CE
0001C9E4 43E9 0200                  		lea	$200(a1),a1
0001C9E8 45EA 0200                  		lea	$200(a2),a2
0001C9EC                            
0001C9EC                            loc_1C2CE:
0001C9EC 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C9F6 323C 000F                  		move.w	#$F,d1
0001C9FA 6100 0000                  		bsr.w	LoadTiles
0001C9FE 224A                       		movea.l	a2,a1
0001CA00 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001CA0A 323C 000F                  		move.w	#$F,d1
0001CA0E 6000 0000                  		bra.w	LoadTiles
0001CA12                            ; ===========================================================================
0001CA12                            
0001CA12                            loc_1C2F4:
0001CA12 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CA16 6A00                       		bpl.s	loc_1C33C
0001CA18 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CA1E 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CA22 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CA26 0240 0007                  		andi.w	#7,d0
0001CA2A 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001CA2E EF48                       		lsl.w	#7,d0
0001CA30 3200                       		move.w	d0,d1
0001CA32 D040                       		add.w	d0,d0
0001CA34 D041                       		add.w	d1,d0
0001CA36 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CA40 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CA46 43F1 0000                  		lea	(a1,d0.w),a1
0001CA4A 323C 000B                  		move.w	#$B,d1
0001CA4E 6000 0000                  		bra.w	LoadTiles
0001CA52                            ; ===========================================================================
0001CA52 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001CA5A                            ; ===========================================================================
0001CA5A                            
0001CA5A                            loc_1C33C:
0001CA5A 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001CA5E 6A00                       		bpl.s	loc_1C37A
0001CA60 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001CA66 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001CA6A 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001CA6E 0240 0003                  		andi.w	#3,d0
0001CA72 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001CA76 E148                       		lsl.w	#8,d0
0001CA78 D040                       		add.w	d0,d0
0001CA7A 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001CA84 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001CA88 43F1 0000                  		lea	(a1,d0.w),a1
0001CA8C 323C 000F                  		move.w	#$F,d1
0001CA90 6000 0000                  		bra.w	LoadTiles
0001CA94                            ; ===========================================================================
0001CA94 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001CA98                            ; ===========================================================================
0001CA98                            
0001CA98                            loc_1C37A:
0001CA98 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001CA9C 6A00                       		bpl.s	locret_1C3B4
0001CA9E 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001CAA4 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001CAA8 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001CAAC 0240 0003                  		andi.w	#3,d0
0001CAB0 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001CAB4 E148                       		lsl.w	#8,d0
0001CAB6 D040                       		add.w	d0,d0
0001CAB8 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001CAC2 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001CAC6 43F1 0000                  		lea	(a1,d0.w),a1
0001CACA 323C 000F                  		move.w	#$F,d1
0001CACE 6000 0000                  		bra.w	LoadTiles
0001CAD2                            ; ===========================================================================
0001CAD2                            
0001CAD2                            locret_1C3B4:
0001CAD2 4E75                       		rts	
0001CAD4                            ; ===========================================================================
0001CAD4                            
0001CAD4                            AniArt_none:				; XREF: AniArt_Index
0001CAD4 4E75                       		rts	
0001CAD6                            
0001CAD6                            ; ---------------------------------------------------------------------------
0001CAD6                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001CAD6                            ; ---------------------------------------------------------------------------
0001CAD6                            
0001CAD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CAD6                            
0001CAD6                            
0001CAD6                            LoadTiles:
0001CAD6 2C99                       		move.l	(a1)+,(a6)
0001CAD8 2C99                       		move.l	(a1)+,(a6)
0001CADA 2C99                       		move.l	(a1)+,(a6)
0001CADC 2C99                       		move.l	(a1)+,(a6)
0001CADE 2C99                       		move.l	(a1)+,(a6)
0001CAE0 2C99                       		move.l	(a1)+,(a6)
0001CAE2 2C99                       		move.l	(a1)+,(a6)
0001CAE4 2C99                       		move.l	(a1)+,(a6)
0001CAE6 51C9 FFEE                  		dbf	d1,LoadTiles
0001CAEA 4E75                       		rts	
0001CAEC                            ; End of function LoadTiles
0001CAEC                            
0001CAEC                            ; ===========================================================================
0001CAEC                            ; ---------------------------------------------------------------------------
0001CAEC                            ; Animated pattern routine - more Marble Zone
0001CAEC                            ; ---------------------------------------------------------------------------
0001CAEC 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001CAF0 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001CAF4 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001CAF8 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001CAFC 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001CB00 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001CB04 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001CB08 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001CB0C                            ; ===========================================================================
0001CB0C                            
0001CB0C                            loc_1C3EE:				; XREF: AniArt_MZextra
0001CB0C 2C91                       		move.l	(a1),(a6)
0001CB0E 43E9 0010                  		lea	$10(a1),a1
0001CB12 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001CB16 4E75                       		rts	
0001CB18                            ; ===========================================================================
0001CB18                            
0001CB18                            loc_1C3FA:				; XREF: AniArt_MZextra
0001CB18 2029 0002                  		move.l	2(a1),d0
0001CB1C 1029 0001                  		move.b	1(a1),d0
0001CB20 E098                       		ror.l	#8,d0
0001CB22 2C80                       		move.l	d0,(a6)
0001CB24 43E9 0010                  		lea	$10(a1),a1
0001CB28 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001CB2C 4E75                       		rts	
0001CB2E                            ; ===========================================================================
0001CB2E                            
0001CB2E                            loc_1C410:				; XREF: AniArt_MZextra
0001CB2E 2CA9 0002                  		move.l	2(a1),(a6)
0001CB32 43E9 0010                  		lea	$10(a1),a1
0001CB36 51C9 FFF6                  		dbf	d1,loc_1C410
0001CB3A 4E75                       		rts	
0001CB3C                            ; ===========================================================================
0001CB3C                            
0001CB3C                            loc_1C41E:				; XREF: AniArt_MZextra
0001CB3C 2029 0004                  		move.l	4(a1),d0
0001CB40 1029 0003                  		move.b	3(a1),d0
0001CB44 E098                       		ror.l	#8,d0
0001CB46 2C80                       		move.l	d0,(a6)
0001CB48 43E9 0010                  		lea	$10(a1),a1
0001CB4C 51C9 FFEE                  		dbf	d1,loc_1C41E
0001CB50 4E75                       		rts	
0001CB52                            ; ===========================================================================
0001CB52                            
0001CB52                            loc_1C434:				; XREF: AniArt_MZextra
0001CB52 2CA9 0004                  		move.l	4(a1),(a6)
0001CB56 43E9 0010                  		lea	$10(a1),a1
0001CB5A 51C9 FFF6                  		dbf	d1,loc_1C434
0001CB5E 4E75                       		rts	
0001CB60                            ; ===========================================================================
0001CB60                            
0001CB60                            loc_1C442:				; XREF: AniArt_MZextra
0001CB60 2029 0006                  		move.l	6(a1),d0
0001CB64 1029 0005                  		move.b	5(a1),d0
0001CB68 E098                       		ror.l	#8,d0
0001CB6A 2C80                       		move.l	d0,(a6)
0001CB6C 43E9 0010                  		lea	$10(a1),a1
0001CB70 51C9 FFEE                  		dbf	d1,loc_1C442
0001CB74 4E75                       		rts	
0001CB76                            ; ===========================================================================
0001CB76                            
0001CB76                            loc_1C458:				; XREF: AniArt_MZextra
0001CB76 2CA9 0006                  		move.l	6(a1),(a6)
0001CB7A 43E9 0010                  		lea	$10(a1),a1
0001CB7E 51C9 FFF6                  		dbf	d1,loc_1C458
0001CB82 4E75                       		rts	
0001CB84                            ; ===========================================================================
0001CB84                            
0001CB84                            loc_1C466:				; XREF: AniArt_MZextra
0001CB84 2029 0008                  		move.l	8(a1),d0
0001CB88 1029 0007                  		move.b	7(a1),d0
0001CB8C E098                       		ror.l	#8,d0
0001CB8E 2C80                       		move.l	d0,(a6)
0001CB90 43E9 0010                  		lea	$10(a1),a1
0001CB94 51C9 FFEE                  		dbf	d1,loc_1C466
0001CB98 4E75                       		rts	
0001CB9A                            ; ===========================================================================
0001CB9A                            
0001CB9A                            loc_1C47C:				; XREF: AniArt_MZextra
0001CB9A 2CA9 0008                  		move.l	8(a1),(a6)
0001CB9E 43E9 0010                  		lea	$10(a1),a1
0001CBA2 51C9 FFF6                  		dbf	d1,loc_1C47C
0001CBA6 4E75                       		rts	
0001CBA8                            ; ===========================================================================
0001CBA8                            
0001CBA8                            loc_1C48A:				; XREF: AniArt_MZextra
0001CBA8 2029 000A                  		move.l	$A(a1),d0
0001CBAC 1029 0009                  		move.b	9(a1),d0
0001CBB0 E098                       		ror.l	#8,d0
0001CBB2 2C80                       		move.l	d0,(a6)
0001CBB4 43E9 0010                  		lea	$10(a1),a1
0001CBB8 51C9 FFEE                  		dbf	d1,loc_1C48A
0001CBBC 4E75                       		rts	
0001CBBE                            ; ===========================================================================
0001CBBE                            
0001CBBE                            loc_1C4A0:				; XREF: AniArt_MZextra
0001CBBE 2CA9 000A                  		move.l	$A(a1),(a6)
0001CBC2 43E9 0010                  		lea	$10(a1),a1
0001CBC6 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001CBCA 4E75                       		rts	
0001CBCC                            ; ===========================================================================
0001CBCC                            
0001CBCC                            loc_1C4AE:				; XREF: AniArt_MZextra
0001CBCC 2029 000C                  		move.l	$C(a1),d0
0001CBD0 1029 000B                  		move.b	$B(a1),d0
0001CBD4 E098                       		ror.l	#8,d0
0001CBD6 2C80                       		move.l	d0,(a6)
0001CBD8 43E9 0010                  		lea	$10(a1),a1
0001CBDC 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001CBE0 4E75                       		rts	
0001CBE2                            ; ===========================================================================
0001CBE2                            
0001CBE2                            loc_1C4C4:				; XREF: AniArt_MZextra
0001CBE2 2CA9 000C                  		move.l	$C(a1),(a6)
0001CBE6 43E9 0010                  		lea	$10(a1),a1
0001CBEA 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001CBEE 4E75                       		rts	
0001CBF0                            ; ===========================================================================
0001CBF0                            
0001CBF0                            loc_1C4D2:				; XREF: AniArt_MZextra
0001CBF0 2029 000C                  		move.l	$C(a1),d0
0001CBF4 E198                       		rol.l	#8,d0
0001CBF6 1011                       		move.b	0(a1),d0
0001CBF8 2C80                       		move.l	d0,(a6)
0001CBFA 43E9 0010                  		lea	$10(a1),a1
0001CBFE 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001CC02 4E75                       		rts	
0001CC04                            ; ===========================================================================
0001CC04                            
0001CC04                            loc_1C4E8:				; XREF: AniArt_MZextra
0001CC04 3CA9 000E                  		move.w	$E(a1),(a6)
0001CC08 3C91                       		move.w	0(a1),(a6)
0001CC0A 43E9 0010                  		lea	$10(a1),a1
0001CC0E 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001CC12 4E75                       		rts	
0001CC14                            ; ===========================================================================
0001CC14                            
0001CC14                            loc_1C4FA:				; XREF: AniArt_MZextra
0001CC14 2011                       		move.l	0(a1),d0
0001CC16 1029 000F                  		move.b	$F(a1),d0
0001CC1A E098                       		ror.l	#8,d0
0001CC1C 2C80                       		move.l	d0,(a6)
0001CC1E 43E9 0010                  		lea	$10(a1),a1
0001CC22 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001CC26 4E75                       		rts	
0001CC28                            
0001CC28                            ; ---------------------------------------------------------------------------
0001CC28                            ; Animated pattern routine - giant ring
0001CC28                            ; ---------------------------------------------------------------------------
0001CC28                            
0001CC28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC28                            
0001CC28                            
0001CC28                            AniArt_GiantRing:			; XREF: AniArt_Load
0001CC28 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001CC2C 6600                       		bne.s	loc_1C518
0001CC2E 4E75                       		rts	
0001CC30                            ; ===========================================================================
0001CC30                            
0001CC30                            loc_1C518:
0001CC30 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001CC36 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001CC3C 7000                       		moveq	#0,d0
0001CC3E 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001CC42 43F1 0000                  		lea	(a1,d0.w),a1
0001CC46 0640 8000                  		addi.w	#$8000,d0
0001CC4A E588                       		lsl.l	#2,d0
0001CC4C E448                       		lsr.w	#2,d0
0001CC4E 0040 4000                  		ori.w	#$4000,d0
0001CC52 4840                       		swap	d0
0001CC54 2D40 0004                  		move.l	d0,4(a6)
0001CC58 323C 000D                  		move.w	#$D,d1
0001CC5C 6000 FE78                  		bra.w	LoadTiles
0001CC60                            ; End of function AniArt_GiantRing
0001CC60                            
0001CC60                            ; ===========================================================================
0001CC60                            ; ---------------------------------------------------------------------------
0001CC60                            ; Object 21 - SCORE, TIME, RINGS
0001CC60                            ; ---------------------------------------------------------------------------
0001CC60                            
0001CC60                            Obj21:					; XREF: Obj_Index
0001CC60 7000                       		moveq	#0,d0
0001CC62 1028 0024                  		move.b	$24(a0),d0
0001CC66 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001CC6A 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001CC6E                            ; ===========================================================================
0001CC6E 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001CC70 0000                       		dc.w Obj21_Flash-Obj21_Index
0001CC72                            ; ===========================================================================
0001CC72                            
0001CC72                            Obj21_Main:				; XREF: Obj21_Main
0001CC72 5428 0024                  		addq.b	#2,$24(a0)
0001CC76 317C 0090 0008             		move.w	#$90,8(a0)
0001CC7C 317C 0108 000A             		move.w	#$108,$A(a0)
0001CC82 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001CC8A 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001CC90 117C 0000 0001             		move.b	#0,1(a0)
0001CC96 117C 0000 0018             		move.b	#0,$18(a0)
0001CC9C                            
0001CC9C                            Obj21_Flash:				; XREF: Obj21_Main
0001CC9C 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001CCA0 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001CCA2 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001CCA6 4EF9 0000 DBFA             		jmp	DisplaySprite
0001CCAC                            ; ===========================================================================
0001CCAC                            
0001CCAC                            Obj21_Flash2:
0001CCAC 7000                       		moveq	#0,d0
0001CCAE 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001CCB4 6600                       		bne.s	Obj21_Display
0001CCB6 5240                       		addq.w	#1,d0		; make ring counter flash red
0001CCB8 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001CCBE 6600                       		bne.s	Obj21_Display	; if not, branch
0001CCC0 5440                       		addq.w	#2,d0		; make time counter flash red
0001CCC2                            
0001CCC2                            Obj21_Display:
0001CCC2 1140 001A                  		move.b	d0,$1A(a0)
0001CCC6 4EF9 0000 DBFA             		jmp	DisplaySprite
0001CCCC                            ; ===========================================================================
0001CCCC                            ; ---------------------------------------------------------------------------
0001CCCC                            ; Sprite mappings - SCORE, TIME, RINGS
0001CCCC                            ; ---------------------------------------------------------------------------
0001CCCC                            Map_obj21:
0001CCCC                            	include "_maps\obj21.asm"
0001CCCC                            ; ---------------------------------------------------------------------------
0001CCCC                            ; Sprite mappings - SCORE, TIME, RINGS
0001CCCC                            ; ---------------------------------------------------------------------------
0001CCCC 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001CCD0 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001CCD4 0A                         byte_1C5BC:	dc.b $A
0001CCD5 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CCDA 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CCDF 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CCE4 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CCE9 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CCEE A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CCF3 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CCF8 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CCFD 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CD02 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CD07 00                         		dc.b 0
0001CD08 0A                         byte_1C5F0:	dc.b $A
0001CD09 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CD0E 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CD13 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CD18 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CD1D 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CD22 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CD27 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CD2C A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CD31 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CD36 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CD3B 00                         		dc.b 0
0001CD3C 0A                         byte_1C624:	dc.b $A
0001CD3D 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CD42 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CD47 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CD4C 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CD51 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CD56 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CD5B A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CD60 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CD65 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CD6A 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CD6F 00                         		dc.b 0
0001CD70 0A                         byte_1C658:	dc.b $A
0001CD71 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CD76 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CD7B 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CD80 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CD85 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CD8A A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CD8F A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CD94 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CD99 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CD9E 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CDA4 00                         		even
0001CDA4 00                         		even
0001CDA4                            
0001CDA4                            ; ---------------------------------------------------------------------------
0001CDA4                            ; Add points subroutine
0001CDA4                            ; ---------------------------------------------------------------------------
0001CDA4                            
0001CDA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CDA4                            
0001CDA4                            
0001CDA4                            AddPoints:
0001CDA4 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001CDAA 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001CDAE 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001CDB2 D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001CDB4 223C 000F 423F             		move.l	#999999,d1
0001CDBA B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001CDBC 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001CDC0 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001CDC2 2481                       		move.l	d1,(a2)
0001CDC4                            
0001CDC4                            loc_1C6AC:
0001CDC4 2013                       		move.l	(a3),d0
0001CDC6 B092                       		cmp.l	(a2),d0
0001CDC8 6500 0000                  		bcs.w	locret_1C6B6
0001CDCC 2480                       		move.l	d0,(a2)
0001CDCE                            
0001CDCE                            locret_1C6B6:
0001CDCE 4E75                       		rts	
0001CDD0                            ; End of function AddPoints
0001CDD0                            
0001CDD0                            ; ---------------------------------------------------------------------------
0001CDD0                            ; Subroutine to	update the HUD
0001CDD0                            ; ---------------------------------------------------------------------------
0001CDD0                            
0001CDD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CDD0                            
0001CDD0                            
0001CDD0                            HudUpdate:
0001CDD0 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001CDD4 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001CDD8 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001CDDC 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001CDDE 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001CDE2 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001CDE8 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001CDEC 6100 0000                  		bsr.w	Hud_Score
0001CDF0                            
0001CDF0                            Hud_ChkRings:
0001CDF0 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CDF4 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001CDF6 6A00                       		bpl.s	loc_1C6E4
0001CDF8 6100 0000                  		bsr.w	Hud_LoadZero
0001CDFC                            
0001CDFC                            loc_1C6E4:
0001CDFC 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CE00 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CE06 7200                       		moveq	#0,d1
0001CE08 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CE0C 6100 0000                  		bsr.w	Hud_Rings
0001CE10                            
0001CE10                            Hud_ChkTime:
0001CE10 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001CE14 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001CE16 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001CE1A 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001CE1C 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001CE20 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001CE26 6700                       		beq.s	TimeOver	; if yes, branch
0001CE28 5221                       		addq.b	#1,-(a1)
0001CE2A 0C11 003C                  		cmpi.b	#60,(a1)
0001CE2E 6500                       		bcs.s	Hud_ChkLives
0001CE30 12BC 0000                  		move.b	#0,(a1)
0001CE34 5221                       		addq.b	#1,-(a1)
0001CE36 0C11 003C                  		cmpi.b	#60,(a1)
0001CE3A 6500                       		bcs.s	loc_1C734
0001CE3C 12BC 0000                  		move.b	#0,(a1)
0001CE40 5221                       		addq.b	#1,-(a1)
0001CE42 0C11 0009                  		cmpi.b	#9,(a1)
0001CE46 6500                       		bcs.s	loc_1C734
0001CE48 12BC 0009                  		move.b	#9,(a1)
0001CE4C                            
0001CE4C                            loc_1C734:
0001CE4C 203C 5E40 0003             		move.l	#$5E400003,d0
0001CE52 7200                       		moveq	#0,d1
0001CE54 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001CE58 6100 0000                  		bsr.w	Hud_Mins
0001CE5C 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001CE62 7200                       		moveq	#0,d1
0001CE64 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001CE68 6100 0000                  		bsr.w	Hud_Secs
0001CE6C                            
0001CE6C                            Hud_ChkLives:
0001CE6C 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001CE70 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001CE72 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001CE76 6100 0000                  		bsr.w	Hud_Lives
0001CE7A                            
0001CE7A                            Hud_ChkBonus:
0001CE7A 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001CE7E 6700                       		beq.s	Hud_End		; if not, branch
0001CE80 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001CE84 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001CE8E 7200                       		moveq	#0,d1
0001CE90 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001CE94 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CE98 7200                       		moveq	#0,d1
0001CE9A 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001CE9E 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CEA2                            
0001CEA2                            Hud_End:
0001CEA2 4E75                       		rts	
0001CEA4                            ; ===========================================================================
0001CEA4                            
0001CEA4                            TimeOver:				; XREF: Hud_ChkTime
0001CEA4 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001CEA8 41F8 D000                  		lea	($FFFFD000).w,a0
0001CEAC 2448                       		movea.l	a0,a2
0001CEAE 6100 E908                  		bsr.w	KillSonic
0001CEB2 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001CEB8 4E75                       		rts	
0001CEBA                            ; ===========================================================================
0001CEBA                            
0001CEBA                            HudDebug:				; XREF: HudUpdate
0001CEBA 6100 0000                  		bsr.w	HudDb_XY
0001CEBE 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CEC2 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001CEC4 6A00                       		bpl.s	HudDb_Rings
0001CEC6 6100 0000                  		bsr.w	Hud_LoadZero
0001CECA                            
0001CECA                            HudDb_Rings:
0001CECA 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CECE 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CED4 7200                       		moveq	#0,d1
0001CED6 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CEDA 6100 0000                  		bsr.w	Hud_Rings
0001CEDE                            
0001CEDE                            HudDb_ObjCount:
0001CEDE 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001CEE4 7200                       		moveq	#0,d1
0001CEE6 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001CEEA 6100 0000                  		bsr.w	Hud_Secs
0001CEEE 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001CEF2 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001CEF4 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001CEF8 6100 0000                  		bsr.w	Hud_Lives
0001CEFC                            
0001CEFC                            HudDb_ChkBonus:
0001CEFC 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001CF00 6700                       		beq.s	HudDb_End	; if not, branch
0001CF02 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001CF06 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001CF10 7200                       		moveq	#0,d1
0001CF12 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001CF16 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CF1A 7200                       		moveq	#0,d1
0001CF1C 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001CF20 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CF24                            
0001CF24                            HudDb_End:
0001CF24 4E75                       		rts	
0001CF26                            ; End of function HudUpdate
0001CF26                            
0001CF26                            ; ---------------------------------------------------------------------------
0001CF26                            ; Subroutine to	load "0" on the	HUD
0001CF26                            ; ---------------------------------------------------------------------------
0001CF26                            
0001CF26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF26                            
0001CF26                            
0001CF26                            Hud_LoadZero:				; XREF: HudUpdate
0001CF26 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001CF30 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001CF34 343C 0002                  		move.w	#2,d2
0001CF38 6000                       		bra.s	loc_1C83E
0001CF3A                            ; End of function Hud_LoadZero
0001CF3A                            
0001CF3A                            ; ---------------------------------------------------------------------------
0001CF3A                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001CF3A                            ; ---------------------------------------------------------------------------
0001CF3A                            
0001CF3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF3A                            
0001CF3A                            
0001CF3A                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001CF3A 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CF40 6100 0000                  		bsr.w	Hud_Lives
0001CF44 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001CF4E 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001CF52 343C 000E                  		move.w	#$E,d2
0001CF56                            
0001CF56                            loc_1C83E:				; XREF: Hud_LoadZero
0001CF56 43FA 0000                  		lea	Art_Hud(pc),a1
0001CF5A                            
0001CF5A                            loc_1C842:
0001CF5A 323C 000F                  		move.w	#$F,d1
0001CF5E 101A                       		move.b	(a2)+,d0
0001CF60 6B00                       		bmi.s	loc_1C85E
0001CF62 4880                       		ext.w	d0
0001CF64 EB48                       		lsl.w	#5,d0
0001CF66 47F1 0000                  		lea	(a1,d0.w),a3
0001CF6A                            
0001CF6A                            loc_1C852:
0001CF6A 2C9B                       		move.l	(a3)+,(a6)
0001CF6C 51C9 FFFC                  		dbf	d1,loc_1C852
0001CF70                            
0001CF70                            loc_1C858:
0001CF70 51CA FFE8                  		dbf	d2,loc_1C842
0001CF74                            
0001CF74 4E75                       		rts	
0001CF76                            ; ===========================================================================
0001CF76                            
0001CF76                            loc_1C85E:
0001CF76 2CBC 0000 0000             		move.l	#0,(a6)
0001CF7C 51C9 FFF8                  		dbf	d1,loc_1C85E
0001CF80                            
0001CF80 60EE                       		bra.s	loc_1C858
0001CF82                            ; End of function Hud_Base
0001CF82                            
0001CF82                            ; ===========================================================================
0001CF82 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001CF8E FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001CF92                            ; ---------------------------------------------------------------------------
0001CF92                            ; Subroutine to	load debug mode	numbers	patterns
0001CF92                            ; ---------------------------------------------------------------------------
0001CF92                            
0001CF92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF92                            
0001CF92                            
0001CF92                            HudDb_XY:				; XREF: HudDebug
0001CF92 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001CF9C 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001CFA0 4841                       		swap	d1
0001CFA2 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001CFA6 6100                       		bsr.s	HudDb_XY2
0001CFA8 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001CFAC 4841                       		swap	d1
0001CFAE 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001CFB2                            ; End of function HudDb_XY
0001CFB2                            
0001CFB2                            
0001CFB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFB2                            
0001CFB2                            
0001CFB2                            HudDb_XY2:
0001CFB2 7C07                       		moveq	#7,d6
0001CFB4 43F9 0000 05F0             		lea	(Art_Text).l,a1
0001CFBA                            
0001CFBA                            HudDb_XYLoop:
0001CFBA E959                       		rol.w	#4,d1
0001CFBC 3401                       		move.w	d1,d2
0001CFBE 0242 000F                  		andi.w	#$F,d2
0001CFC2 0C42 000A                  		cmpi.w	#$A,d2
0001CFC6 6500                       		bcs.s	loc_1C8B2
0001CFC8 5E42                       		addq.w	#7,d2
0001CFCA                            
0001CFCA                            loc_1C8B2:
0001CFCA EB4A                       		lsl.w	#5,d2
0001CFCC 47F1 2000                  		lea	(a1,d2.w),a3
0001CFD0 2C9B                       		move.l	(a3)+,(a6)
0001CFD2 2C9B                       		move.l	(a3)+,(a6)
0001CFD4 2C9B                       		move.l	(a3)+,(a6)
0001CFD6 2C9B                       		move.l	(a3)+,(a6)
0001CFD8 2C9B                       		move.l	(a3)+,(a6)
0001CFDA 2C9B                       		move.l	(a3)+,(a6)
0001CFDC 2C9B                       		move.l	(a3)+,(a6)
0001CFDE 2C9B                       		move.l	(a3)+,(a6)
0001CFE0 4841                       		swap	d1
0001CFE2 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001CFE6                            
0001CFE6 4E75                       		rts	
0001CFE8                            ; End of function HudDb_XY2
0001CFE8                            
0001CFE8                            ; ---------------------------------------------------------------------------
0001CFE8                            ; Subroutine to	load rings numbers patterns
0001CFE8                            ; ---------------------------------------------------------------------------
0001CFE8                            
0001CFE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFE8                            
0001CFE8                            
0001CFE8                            Hud_Rings:				; XREF: HudUpdate
0001CFE8 45F9 0000 0000             		lea	(Hud_100).l,a2
0001CFEE 7C02                       		moveq	#2,d6
0001CFF0 6000                       		bra.s	Hud_LoadArt
0001CFF2                            ; End of function Hud_Rings
0001CFF2                            
0001CFF2                            ; ---------------------------------------------------------------------------
0001CFF2                            ; Subroutine to	load score numbers patterns
0001CFF2                            ; ---------------------------------------------------------------------------
0001CFF2                            
0001CFF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFF2                            
0001CFF2                            
0001CFF2                            Hud_Score:				; XREF: HudUpdate
0001CFF2 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001CFF8 7C05                       		moveq	#5,d6
0001CFFA                            
0001CFFA                            Hud_LoadArt:
0001CFFA 7800                       		moveq	#0,d4
0001CFFC 43FA 0000                  		lea	Art_Hud(pc),a1
0001D000                            
0001D000                            Hud_ScoreLoop:
0001D000 7400                       		moveq	#0,d2
0001D002 261A                       		move.l	(a2)+,d3
0001D004                            
0001D004                            loc_1C8EC:
0001D004 9283                       		sub.l	d3,d1
0001D006 6500                       		bcs.s	loc_1C8F4
0001D008 5242                       		addq.w	#1,d2
0001D00A 60F8                       		bra.s	loc_1C8EC
0001D00C                            ; ===========================================================================
0001D00C                            
0001D00C                            loc_1C8F4:
0001D00C D283                       		add.l	d3,d1
0001D00E 4A42                       		tst.w	d2
0001D010 6700                       		beq.s	loc_1C8FE
0001D012 383C 0001                  		move.w	#1,d4
0001D016                            
0001D016                            loc_1C8FE:
0001D016 4A44                       		tst.w	d4
0001D018 6700                       		beq.s	loc_1C92C
0001D01A ED4A                       		lsl.w	#6,d2
0001D01C 2D40 0004                  		move.l	d0,4(a6)
0001D020 47F1 2000                  		lea	(a1,d2.w),a3
0001D024 2C9B                       		move.l	(a3)+,(a6)
0001D026 2C9B                       		move.l	(a3)+,(a6)
0001D028 2C9B                       		move.l	(a3)+,(a6)
0001D02A 2C9B                       		move.l	(a3)+,(a6)
0001D02C 2C9B                       		move.l	(a3)+,(a6)
0001D02E 2C9B                       		move.l	(a3)+,(a6)
0001D030 2C9B                       		move.l	(a3)+,(a6)
0001D032 2C9B                       		move.l	(a3)+,(a6)
0001D034 2C9B                       		move.l	(a3)+,(a6)
0001D036 2C9B                       		move.l	(a3)+,(a6)
0001D038 2C9B                       		move.l	(a3)+,(a6)
0001D03A 2C9B                       		move.l	(a3)+,(a6)
0001D03C 2C9B                       		move.l	(a3)+,(a6)
0001D03E 2C9B                       		move.l	(a3)+,(a6)
0001D040 2C9B                       		move.l	(a3)+,(a6)
0001D042 2C9B                       		move.l	(a3)+,(a6)
0001D044                            
0001D044                            loc_1C92C:
0001D044 0680 0040 0000             		addi.l	#$400000,d0
0001D04A 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001D04E                            
0001D04E 4E75                       		rts	
0001D050                            ; End of function Hud_Score
0001D050                            
0001D050                            ; ---------------------------------------------------------------------------
0001D050                            ; Subroutine to	load countdown numbers on the continue screen
0001D050                            ; ---------------------------------------------------------------------------
0001D050                            
0001D050                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D050                            
0001D050                            
0001D050                            ContScrCounter:				; XREF: ContinueScreen
0001D050 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001D05A 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D060 45F9 0000 0000             		lea	(Hud_10).l,a2
0001D066 7C01                       		moveq	#1,d6
0001D068 7800                       		moveq	#0,d4
0001D06A 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001D06E                            
0001D06E                            ContScr_Loop:
0001D06E 7400                       		moveq	#0,d2
0001D070 261A                       		move.l	(a2)+,d3
0001D072                            
0001D072                            loc_1C95A:
0001D072 9283                       		sub.l	d3,d1
0001D074 6500                       		bcs.s	loc_1C962
0001D076 5242                       		addq.w	#1,d2
0001D078 60F8                       		bra.s	loc_1C95A
0001D07A                            ; ===========================================================================
0001D07A                            
0001D07A                            loc_1C962:
0001D07A D283                       		add.l	d3,d1
0001D07C ED4A                       		lsl.w	#6,d2
0001D07E 47F1 2000                  		lea	(a1,d2.w),a3
0001D082 2C9B                       		move.l	(a3)+,(a6)
0001D084 2C9B                       		move.l	(a3)+,(a6)
0001D086 2C9B                       		move.l	(a3)+,(a6)
0001D088 2C9B                       		move.l	(a3)+,(a6)
0001D08A 2C9B                       		move.l	(a3)+,(a6)
0001D08C 2C9B                       		move.l	(a3)+,(a6)
0001D08E 2C9B                       		move.l	(a3)+,(a6)
0001D090 2C9B                       		move.l	(a3)+,(a6)
0001D092 2C9B                       		move.l	(a3)+,(a6)
0001D094 2C9B                       		move.l	(a3)+,(a6)
0001D096 2C9B                       		move.l	(a3)+,(a6)
0001D098 2C9B                       		move.l	(a3)+,(a6)
0001D09A 2C9B                       		move.l	(a3)+,(a6)
0001D09C 2C9B                       		move.l	(a3)+,(a6)
0001D09E 2C9B                       		move.l	(a3)+,(a6)
0001D0A0 2C9B                       		move.l	(a3)+,(a6)
0001D0A2 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001D0A6                            
0001D0A6 4E75                       		rts	
0001D0A8                            ; End of function ContScrCounter
0001D0A8                            
0001D0A8                            ; ===========================================================================
0001D0A8                            ; ---------------------------------------------------------------------------
0001D0A8                            ; HUD counter sizes
0001D0A8                            ; ---------------------------------------------------------------------------
0001D0A8 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001D0AC 0000 2710                  Hud_10000:	dc.l 10000
0001D0B0 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001D0B4 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001D0B8 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001D0BC 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001D0C0                            
0001D0C0                            ; ---------------------------------------------------------------------------
0001D0C0                            ; Subroutine to	load time numbers patterns
0001D0C0                            ; ---------------------------------------------------------------------------
0001D0C0                            
0001D0C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D0C0                            
0001D0C0                            
0001D0C0                            Hud_Mins:				; XREF: Hud_ChkTime
0001D0C0 45F9 0001 D0BC             		lea	(Hud_1).l,a2
0001D0C6 7C00                       		moveq	#0,d6
0001D0C8 6000                       		bra.s	loc_1C9BA
0001D0CA                            ; End of function Hud_Mins
0001D0CA                            
0001D0CA                            
0001D0CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D0CA                            
0001D0CA                            
0001D0CA                            Hud_Secs:				; XREF: Hud_ChkTime
0001D0CA 45F9 0001 D0B8             		lea	(Hud_10).l,a2
0001D0D0 7C01                       		moveq	#1,d6
0001D0D2                            
0001D0D2                            loc_1C9BA:
0001D0D2 7800                       		moveq	#0,d4
0001D0D4 43FA 0000                  		lea	Art_Hud(pc),a1
0001D0D8                            
0001D0D8                            Hud_TimeLoop:
0001D0D8 7400                       		moveq	#0,d2
0001D0DA 261A                       		move.l	(a2)+,d3
0001D0DC                            
0001D0DC                            loc_1C9C4:
0001D0DC 9283                       		sub.l	d3,d1
0001D0DE 6500                       		bcs.s	loc_1C9CC
0001D0E0 5242                       		addq.w	#1,d2
0001D0E2 60F8                       		bra.s	loc_1C9C4
0001D0E4                            ; ===========================================================================
0001D0E4                            
0001D0E4                            loc_1C9CC:
0001D0E4 D283                       		add.l	d3,d1
0001D0E6 4A42                       		tst.w	d2
0001D0E8 6700                       		beq.s	loc_1C9D6
0001D0EA 383C 0001                  		move.w	#1,d4
0001D0EE                            
0001D0EE                            loc_1C9D6:
0001D0EE ED4A                       		lsl.w	#6,d2
0001D0F0 2D40 0004                  		move.l	d0,4(a6)
0001D0F4 47F1 2000                  		lea	(a1,d2.w),a3
0001D0F8 2C9B                       		move.l	(a3)+,(a6)
0001D0FA 2C9B                       		move.l	(a3)+,(a6)
0001D0FC 2C9B                       		move.l	(a3)+,(a6)
0001D0FE 2C9B                       		move.l	(a3)+,(a6)
0001D100 2C9B                       		move.l	(a3)+,(a6)
0001D102 2C9B                       		move.l	(a3)+,(a6)
0001D104 2C9B                       		move.l	(a3)+,(a6)
0001D106 2C9B                       		move.l	(a3)+,(a6)
0001D108 2C9B                       		move.l	(a3)+,(a6)
0001D10A 2C9B                       		move.l	(a3)+,(a6)
0001D10C 2C9B                       		move.l	(a3)+,(a6)
0001D10E 2C9B                       		move.l	(a3)+,(a6)
0001D110 2C9B                       		move.l	(a3)+,(a6)
0001D112 2C9B                       		move.l	(a3)+,(a6)
0001D114 2C9B                       		move.l	(a3)+,(a6)
0001D116 2C9B                       		move.l	(a3)+,(a6)
0001D118 0680 0040 0000             		addi.l	#$400000,d0
0001D11E 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001D122                            
0001D122 4E75                       		rts	
0001D124                            ; End of function Hud_Secs
0001D124                            
0001D124                            ; ---------------------------------------------------------------------------
0001D124                            ; Subroutine to	load time/ring bonus numbers patterns
0001D124                            ; ---------------------------------------------------------------------------
0001D124                            
0001D124                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D124                            
0001D124                            
0001D124                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001D124 45F9 0001 D0B0             		lea	(Hud_1000).l,a2
0001D12A 7C03                       		moveq	#3,d6
0001D12C 7800                       		moveq	#0,d4
0001D12E 43FA 0000                  		lea	Art_Hud(pc),a1
0001D132                            
0001D132                            Hud_BonusLoop:
0001D132 7400                       		moveq	#0,d2
0001D134 261A                       		move.l	(a2)+,d3
0001D136                            
0001D136                            loc_1CA1E:
0001D136 9283                       		sub.l	d3,d1
0001D138 6500                       		bcs.s	loc_1CA26
0001D13A 5242                       		addq.w	#1,d2
0001D13C 60F8                       		bra.s	loc_1CA1E
0001D13E                            ; ===========================================================================
0001D13E                            
0001D13E                            loc_1CA26:
0001D13E D283                       		add.l	d3,d1
0001D140 4A42                       		tst.w	d2
0001D142 6700                       		beq.s	loc_1CA30
0001D144 383C 0001                  		move.w	#1,d4
0001D148                            
0001D148                            loc_1CA30:
0001D148 4A44                       		tst.w	d4
0001D14A 6700                       		beq.s	Hud_ClrBonus
0001D14C ED4A                       		lsl.w	#6,d2
0001D14E 47F1 2000                  		lea	(a1,d2.w),a3
0001D152 2C9B                       		move.l	(a3)+,(a6)
0001D154 2C9B                       		move.l	(a3)+,(a6)
0001D156 2C9B                       		move.l	(a3)+,(a6)
0001D158 2C9B                       		move.l	(a3)+,(a6)
0001D15A 2C9B                       		move.l	(a3)+,(a6)
0001D15C 2C9B                       		move.l	(a3)+,(a6)
0001D15E 2C9B                       		move.l	(a3)+,(a6)
0001D160 2C9B                       		move.l	(a3)+,(a6)
0001D162 2C9B                       		move.l	(a3)+,(a6)
0001D164 2C9B                       		move.l	(a3)+,(a6)
0001D166 2C9B                       		move.l	(a3)+,(a6)
0001D168 2C9B                       		move.l	(a3)+,(a6)
0001D16A 2C9B                       		move.l	(a3)+,(a6)
0001D16C 2C9B                       		move.l	(a3)+,(a6)
0001D16E 2C9B                       		move.l	(a3)+,(a6)
0001D170 2C9B                       		move.l	(a3)+,(a6)
0001D172                            
0001D172                            loc_1CA5A:
0001D172 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001D176                            
0001D176 4E75                       		rts	
0001D178                            ; ===========================================================================
0001D178                            
0001D178                            Hud_ClrBonus:
0001D178 7A0F                       		moveq	#$F,d5
0001D17A                            
0001D17A                            Hud_ClrBonusLoop:
0001D17A 2CBC 0000 0000             		move.l	#0,(a6)
0001D180 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001D184                            
0001D184 60EC                       		bra.s	loc_1CA5A
0001D186                            ; End of function Hud_TimeRingBonus
0001D186                            
0001D186                            ; ---------------------------------------------------------------------------
0001D186                            ; Subroutine to	load uncompressed lives	counter	patterns
0001D186                            ; ---------------------------------------------------------------------------
0001D186                            
0001D186                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D186                            
0001D186                            
0001D186                            Hud_Lives:				; XREF: Hud_ChkLives
0001D186 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001D18C 7200                       		moveq	#0,d1
0001D18E 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001D192 45F9 0001 D0B8             		lea	(Hud_10).l,a2
0001D198 7C01                       		moveq	#1,d6
0001D19A 7800                       		moveq	#0,d4
0001D19C 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001D1A0                            
0001D1A0                            Hud_LivesLoop:
0001D1A0 2D40 0004                  		move.l	d0,4(a6)
0001D1A4 7400                       		moveq	#0,d2
0001D1A6 261A                       		move.l	(a2)+,d3
0001D1A8                            
0001D1A8                            loc_1CA90:
0001D1A8 9283                       		sub.l	d3,d1
0001D1AA 6500                       		bcs.s	loc_1CA98
0001D1AC 5242                       		addq.w	#1,d2
0001D1AE 60F8                       		bra.s	loc_1CA90
0001D1B0                            ; ===========================================================================
0001D1B0                            
0001D1B0                            loc_1CA98:
0001D1B0 D283                       		add.l	d3,d1
0001D1B2 4A42                       		tst.w	d2
0001D1B4 6700                       		beq.s	loc_1CAA2
0001D1B6 383C 0001                  		move.w	#1,d4
0001D1BA                            
0001D1BA                            loc_1CAA2:
0001D1BA 4A44                       		tst.w	d4
0001D1BC 6700                       		beq.s	Hud_ClrLives
0001D1BE                            
0001D1BE                            loc_1CAA6:
0001D1BE EB4A                       		lsl.w	#5,d2
0001D1C0 47F1 2000                  		lea	(a1,d2.w),a3
0001D1C4 2C9B                       		move.l	(a3)+,(a6)
0001D1C6 2C9B                       		move.l	(a3)+,(a6)
0001D1C8 2C9B                       		move.l	(a3)+,(a6)
0001D1CA 2C9B                       		move.l	(a3)+,(a6)
0001D1CC 2C9B                       		move.l	(a3)+,(a6)
0001D1CE 2C9B                       		move.l	(a3)+,(a6)
0001D1D0 2C9B                       		move.l	(a3)+,(a6)
0001D1D2 2C9B                       		move.l	(a3)+,(a6)
0001D1D4                            
0001D1D4                            loc_1CABC:
0001D1D4 0680 0040 0000             		addi.l	#$400000,d0
0001D1DA 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001D1DE                            
0001D1DE 4E75                       		rts	
0001D1E0                            ; ===========================================================================
0001D1E0                            
0001D1E0                            Hud_ClrLives:
0001D1E0 4A46                       		tst.w	d6
0001D1E2 67DA                       		beq.s	loc_1CAA6
0001D1E4 7A07                       		moveq	#7,d5
0001D1E6                            
0001D1E6                            Hud_ClrLivesLoop:
0001D1E6 2CBC 0000 0000             		move.l	#0,(a6)
0001D1EC 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001D1F0 60E2                       		bra.s	loc_1CABC
0001D1F2                            ; End of function Hud_Lives
0001D1F2                            
0001D1F2                            ; ===========================================================================
0001D1F2                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001D4F2                            		even
0001D4F2                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001D632                            		even
0001D632                            ; ===========================================================================
0001D632                            ; ---------------------------------------------------------------------------
0001D632                            ; When debug mode is currently in use
0001D632                            ; ---------------------------------------------------------------------------
0001D632                            
0001D632                            DebugMode:				; XREF: Obj01; Obj09
0001D632 7000                       		moveq	#0,d0
0001D634 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001D638 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001D63C 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001D640                            ; ===========================================================================
0001D640 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001D642 0000                       		dc.w Debug_Skip-Debug_Index
0001D644                            ; ===========================================================================
0001D644                            
0001D644                            Debug_Main:				; XREF: Debug_Index
0001D644 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001D648 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001D64E 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001D654 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001D65A 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001D660 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001D666 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001D66C 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001D672 117C 0000 001A             		move.b	#0,$1A(a0)
0001D678 117C 0000 001C             		move.b	#0,$1C(a0)
0001D67E 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001D684 6600                       		bne.s	Debug_Zone	; if not, branch
0001D686 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001D68C 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001D692 7006                       		moveq	#6,d0		; use 6th debug	item list
0001D694 6000                       		bra.s	Debug_UseList
0001D696                            ; ===========================================================================
0001D696                            
0001D696                            Debug_Zone:
0001D696 7000                       		moveq	#0,d0
0001D698 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D69C                            
0001D69C                            Debug_UseList:
0001D69C 45F9 0000 0000             		lea	(DebugList).l,a2
0001D6A2 D040                       		add.w	d0,d0
0001D6A4 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D6A8 3C1A                       		move.w	(a2)+,d6
0001D6AA BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D6AE 6200                       		bhi.s	loc_1CF9E
0001D6B0 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001D6B6                            
0001D6B6                            loc_1CF9E:
0001D6B6 6100 0000                  		bsr.w	Debug_ShowItem
0001D6BA 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D6C0 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001D6C6                            
0001D6C6                            Debug_Skip:				; XREF: Debug_Index
0001D6C6 7006                       		moveq	#6,d0
0001D6C8 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001D6CE 6700                       		beq.s	loc_1CFBE
0001D6D0 7000                       		moveq	#0,d0
0001D6D2 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D6D6                            
0001D6D6                            loc_1CFBE:
0001D6D6 45F9 0000 0000             		lea	(DebugList).l,a2
0001D6DC D040                       		add.w	d0,d0
0001D6DE D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D6E2 3C1A                       		move.w	(a2)+,d6
0001D6E4 6100 0000                  		bsr.w	Debug_Control
0001D6E8 4EF9 0000 DBFA             		jmp	DisplaySprite
0001D6EE                            
0001D6EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D6EE                            
0001D6EE                            
0001D6EE                            Debug_Control:
0001D6EE 7800                       		moveq	#0,d4
0001D6F0 323C 0001                  		move.w	#1,d1
0001D6F4 1838 F605                  		move.b	($FFFFF605).w,d4
0001D6F8 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001D6FC 6600                       		bne.s	loc_1D018	; if yes, branch
0001D6FE 1038 F604                  		move.b	($FFFFF604).w,d0
0001D702 0240 000F                  		andi.w	#$F,d0
0001D706 6600                       		bne.s	loc_1D000
0001D708 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D70E 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001D714 6000 0000                  		bra.w	Debug_BackItem
0001D718                            ; ===========================================================================
0001D718                            
0001D718                            loc_1D000:
0001D718 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001D71C 6600                       		bne.s	loc_1D01C
0001D71E 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001D724 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001D728 6600                       		bne.s	loc_1D018
0001D72A 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001D730                            
0001D730                            loc_1D018:
0001D730 1838 F604                  		move.b	($FFFFF604).w,d4
0001D734                            
0001D734                            loc_1D01C:
0001D734 7200                       		moveq	#0,d1
0001D736 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001D73A 5241                       		addq.w	#1,d1
0001D73C 4841                       		swap	d1
0001D73E E881                       		asr.l	#4,d1
0001D740 2428 000C                  		move.l	$C(a0),d2
0001D744 2628 0008                  		move.l	8(a0),d3
0001D748 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001D74C 6700                       		beq.s	loc_1D03C	; if not, branch
0001D74E 9481                       		sub.l	d1,d2
0001D750 6400                       		bcc.s	loc_1D03C
0001D752 7400                       		moveq	#0,d2
0001D754                            
0001D754                            loc_1D03C:
0001D754 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001D758 6700                       		beq.s	loc_1D052	; if not, branch
0001D75A D481                       		add.l	d1,d2
0001D75C 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001D762 6500                       		bcs.s	loc_1D052
0001D764 243C 07FF 0000             		move.l	#$7FF0000,d2
0001D76A                            
0001D76A                            loc_1D052:
0001D76A 0804 0002                  		btst	#2,d4
0001D76E 6700                       		beq.s	loc_1D05E
0001D770 9681                       		sub.l	d1,d3
0001D772 6400                       		bcc.s	loc_1D05E
0001D774 7600                       		moveq	#0,d3
0001D776                            
0001D776                            loc_1D05E:
0001D776 0804 0003                  		btst	#3,d4
0001D77A 6700                       		beq.s	loc_1D066
0001D77C D681                       		add.l	d1,d3
0001D77E                            
0001D77E                            loc_1D066:
0001D77E 2142 000C                  		move.l	d2,$C(a0)
0001D782 2143 0008                  		move.l	d3,8(a0)
0001D786                            
0001D786                            Debug_BackItem:
0001D786 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001D78C 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D78E 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D794 6700                       		beq.s	Debug_NextItem	; if not, branch
0001D796 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001D79A 6400                       		bcc.s	Debug_NoLoop
0001D79C DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001D7A0 6000                       		bra.s	Debug_NoLoop
0001D7A2                            ; ===========================================================================
0001D7A2                            
0001D7A2                            Debug_NextItem:
0001D7A2 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001D7A8 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D7AA 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001D7AE BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D7B2 6200                       		bhi.s	Debug_NoLoop
0001D7B4 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001D7BA                            
0001D7BA                            Debug_NoLoop:
0001D7BA 6000 0000                  		bra.w	Debug_ShowItem
0001D7BE                            ; ===========================================================================
0001D7BE                            
0001D7BE                            Debug_MakeItem:
0001D7BE 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D7C4 6700                       		beq.s	Debug_Exit	; if not, branch
0001D7C6 4EB9 0000 E080             		jsr	SingleObjLoad
0001D7CC 6600                       		bne.s	Debug_Exit
0001D7CE 3368 0008 0008             		move.w	8(a0),8(a1)
0001D7D4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D7DA 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001D7DE 1368 0001 0001             		move.b	1(a0),1(a1)
0001D7E4 1368 0001 0022             		move.b	1(a0),$22(a1)
0001D7EA 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001D7F0 7000                       		moveq	#0,d0
0001D7F2 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D7F6 E748                       		lsl.w	#3,d0
0001D7F8 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001D7FE 4E75                       		rts	
0001D800                            ; ===========================================================================
0001D800                            
0001D800                            Debug_Exit:
0001D800 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001D806 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001D808 7000                       		moveq	#0,d0
0001D80A 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001D80E 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D816 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D81C 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001D820 3140 000A                  		move.w	d0,$A(a0)
0001D824 3140 000E                  		move.w	d0,$E(a0)
0001D828 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001D82E 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001D834 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001D83A 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001D83C 4278 F780                  		clr.w	($FFFFF780).w
0001D840 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001D846 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D84E 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D854 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001D85A 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001D860 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001D866                            
0001D866                            Debug_DoNothing:
0001D866 4E75                       		rts	
0001D868                            ; End of function Debug_Control
0001D868                            
0001D868                            
0001D868                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D868                            
0001D868                            
0001D868                            Debug_ShowItem:				; XREF: Debug_Main
0001D868 7000                       		moveq	#0,d0
0001D86A 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D86E E748                       		lsl.w	#3,d0
0001D870 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001D876 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001D87C 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001D882 4E75                       		rts	
0001D884                            ; End of function Debug_ShowItem
0001D884                            
0001D884                            ; ===========================================================================
0001D884                            ; ---------------------------------------------------------------------------
0001D884                            ; Debug	list pointers
0001D884                            ; ---------------------------------------------------------------------------
0001D884                            DebugList:
0001D884                            	include "_inc\Debug list pointers.asm"
0001D884                            ; ---------------------------------------------------------------------------
0001D884                            ; Debug	list pointers
0001D884                            ; ---------------------------------------------------------------------------
0001D884 0000                       	dc.w Debug_GHZ-DebugList
0001D886 0000                       	dc.w Debug_LZ-DebugList
0001D888 0000                       	dc.w Debug_MZ-DebugList
0001D88A 0000                       	dc.w Debug_SLZ-DebugList
0001D88C 0000                       	dc.w Debug_SYZ-DebugList
0001D88E 0000                       	dc.w Debug_SBZ-DebugList
0001D890 0000                       	dc.w Debug_Ending-DebugList
0001D890 0000                       	dc.w Debug_Ending-DebugList
0001D892                            
0001D892                            ; ---------------------------------------------------------------------------
0001D892                            ; Debug	list - Green Hill
0001D892                            ; ---------------------------------------------------------------------------
0001D892                            Debug_GHZ:
0001D892                            	include "_inc\Debug list - GHZ.asm"
0001D892                            ; ---------------------------------------------------------------------------
0001D892                            ; Debug	list - Green Hill
0001D892                            ; ---------------------------------------------------------------------------
0001D892 0010                       	dc.w $10			; number of items in list
0001D894 2500 A462                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001D898 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001D89C 2600 AA68                  	dc.l Map_obj26+$26000000
0001D8A0 0000 0680                  	dc.b 0,	0, 6, $80
0001D8A4 1F00 9C5A                  	dc.l Map_obj1F+$1F000000
0001D8A8 0000 0400                  	dc.b 0,	0, 4, 0
0001D8AC 2200 9F16                  	dc.l Map_obj22+$22000000
0001D8B0 0000 0444                  	dc.b 0,	0, 4, $44
0001D8B4 2B00 B0DC                  	dc.l Map_obj2B+$2B000000
0001D8B8 0000 047B                  	dc.b 0,	0, 4, $7B
0001D8BC 3600 D5E2                  	dc.l Map_obj36+$36000000
0001D8C0 0000 051B                  	dc.b 0,	0, 5, $1B
0001D8C4 1800 8608                  	dc.l Map_obj18+$18000000
0001D8C8 0000 4000                  	dc.b 0,	0, $40,	0
0001D8CC 3B00 D708                  	dc.l Map_obj3B+$3B000000
0001D8D0 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001D8D4 4000 FD94                  	dc.l Map_obj40+$40000000
0001D8D8 0000 04F0                  	dc.b 0,	0, 4, $F0
0001D8DC 4100 E30E                  	dc.l Map_obj41+$41000000
0001D8E0 0000 0523                  	dc.b 0,	0, 5, $23
0001D8E4 4200 E534                  	dc.l Map_obj42+$42000000
0001D8E8 0000 249B                  	dc.b 0,	0, $24,	$9B
0001D8EC 4400 E842                  	dc.l Map_obj44+$44000000
0001D8F0 0000 434C                  	dc.b 0,	0, $43,	$4C
0001D8F4 1900 8676                  	dc.l Map_obj48+$19000000
0001D8F8 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001D8FC 7901 77C8                  	dc.l Map_obj79+$79000000
0001D900 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D904 4B00 A4A2                  	dc.l Map_obj4B+$4B000000
0001D908 0000 2400                  	dc.b 0,	0, $24,	0
0001D90C 7D01 7918                  	dc.l Map_obj7D+$7D000000
0001D910 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001D914                            	even
0001D914                            	even
0001D914                            
0001D914                            ; ---------------------------------------------------------------------------
0001D914                            ; Debug	list - Labyrinth
0001D914                            ; ---------------------------------------------------------------------------
0001D914                            Debug_LZ:
0001D914                            	include "_inc\Debug list - LZ.asm"
0001D914                            ; ---------------------------------------------------------------------------
0001D914                            ; Debug	list - Labyrinth
0001D914                            ; ---------------------------------------------------------------------------
0001D914 0019                       	dc.w $19
0001D916 2500 A462                  	dc.l Map_obj25+$25000000
0001D91A 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D91E 2600 AA68                  	dc.l Map_obj26+$26000000
0001D922 0000 0680                  	dc.b 0,	0, 6, $80
0001D926 4100 E30E                  	dc.l Map_obj41+$41000000
0001D92A 0000 0523                  	dc.b 0,	0, 5, $23
0001D92E 2C00 B182                  	dc.l Map_obj2C+$2C000000
0001D932 0800 2486                  	dc.b 8,	0, $24,	$86
0001D936 2D00 B376                  	dc.l Map_obj2D+$2D000000
0001D93A 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001D93E 1601 2568                  	dc.l Map_obj16+$16000000
0001D942 0000 03CC                  	dc.b 0,	0, 3, $CC
0001D946 1601 2568                  	dc.l Map_obj16+$16000000
0001D94A 0203 03CC                  	dc.b 2,	3, 3, $CC
0001D94E 3300 C82E                  	dc.l Map_obj33+$33000000
0001D952 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D956 3200 C3EE                  	dc.l Map_obj32+$32000000
0001D95A 0000 0513                  	dc.b 0,	0, 5, $13
0001D95E 3600 D5E2                  	dc.l Map_obj36+$36000000
0001D962 0000 051B                  	dc.b 0,	0, 5, $1B
0001D966 5201 068A                  	dc.l Map_obj52a+$52000000
0001D96A 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001D96E 6101 2790                  	dc.l Map_obj61+$61000000
0001D972 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001D976 6101 2790                  	dc.l Map_obj61+$61000000
0001D97A 1301 43E6                  	dc.b $13, 1, $43, $E6
0001D97E 6101 2790                  	dc.l Map_obj61+$61000000
0001D982 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001D986 6201 28E4                  	dc.l Map_obj62+$62000000
0001D98A 0000 443E                  	dc.b 0,	0, $44,	$3E
0001D98E 6101 2790                  	dc.l Map_obj61+$61000000
0001D992 2702 43E6                  	dc.b $27, 2, $43, $E6
0001D996 6101 2790                  	dc.l Map_obj61+$61000000
0001D99A 3003 43E6                  	dc.b $30, 3, $43, $E6
0001D99E 6301 2C46                  	dc.l Map_obj63+$63000000
0001D9A2 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001D9A6 6001 24B2                  	dc.l Map_obj60+$60000000
0001D9AA 0000 0467                  	dc.b 0,	0, 4, $67
0001D9AE 6401 2F8C                  	dc.l Map_obj64+$64000000
0001D9B2 8413 8348                  	dc.b $84, $13, $83, $48
0001D9B6 6501 3114                  	dc.l Map_obj65+$65000000
0001D9BA 0202 C259                  	dc.b 2,	2, $C2,	$59
0001D9BE 6501 3114                  	dc.l Map_obj65+$65000000
0001D9C2 0909 C259                  	dc.b 9,	9, $C2,	$59
0001D9C6 0B01 1902                  	dc.l Map_obj0B+$B000000
0001D9CA 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D9CE 0C01 19D2                  	dc.l Map_obj0C+$C000000
0001D9D2 0200 4328                  	dc.b 2,	0, $43,	$28
0001D9D6 7901 77C8                  	dc.l Map_obj79+$79000000
0001D9DA 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D9DE                            	even
0001D9DE                            	even
0001D9DE                            
0001D9DE                            ; ---------------------------------------------------------------------------
0001D9DE                            ; Debug	list - Marble
0001D9DE                            ; ---------------------------------------------------------------------------
0001D9DE                            Debug_MZ:
0001D9DE                            	include "_inc\Debug list - MZ.asm"
0001D9DE                            ; ---------------------------------------------------------------------------
0001D9DE                            ; Debug	list - Marble
0001D9DE                            ; ---------------------------------------------------------------------------
0001D9DE 0012                       	dc.w $12
0001D9E0 2500 A462                  	dc.l Map_obj25+$25000000
0001D9E4 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D9E8 2600 AA68                  	dc.l Map_obj26+$26000000
0001D9EC 0000 0680                  	dc.b 0,	0, 6, $80
0001D9F0 2200 9F16                  	dc.l Map_obj22+$22000000
0001D9F4 0000 0444                  	dc.b 0,	0, 4, $44
0001D9F8 3600 D5E2                  	dc.l Map_obj36+$36000000
0001D9FC 0000 051B                  	dc.b 0,	0, 5, $1B
0001DA00 4100 E30E                  	dc.l Map_obj41+$41000000
0001DA04 0000 0523                  	dc.b 0,	0, 5, $23
0001DA08 1300 B8B8                  	dc.l Map_obj14+$13000000
0001DA0C 0000 0345                  	dc.b 0,	0, 3, $45
0001DA10 4600 EEF4                  	dc.l Map_obj46+$46000000
0001DA14 0000 4000                  	dc.b 0,	0, $40,	0
0001DA18 4C00 F840                  	dc.l Map_obj4C+$4C000000
0001DA1C 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DA20 4E00 FB24                  	dc.l Map_obj4E+$4E000000
0001DA24 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DA28 3300 C82E                  	dc.l Map_obj33+$33000000
0001DA2C 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DA30 5000 FF22                  	dc.l Map_obj50+$50000000
0001DA34 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DA38 5101 03BE                  	dc.l Map_obj51+$51000000
0001DA3C 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DA40 5201 0634                  	dc.l Map_obj52+$52000000
0001DA44 0000 02B8                  	dc.b 0,	0, 2, $B8
0001DA48 5300 8C0E                  	dc.l Map_obj53+$53000000
0001DA4C 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001DA50 5400 F806                  	dc.l Map_obj54+$54000000
0001DA54 0000 8680                  	dc.b 0,	0, $86,	$80
0001DA58 5501 0828                  	dc.l Map_obj55+$55000000
0001DA5C 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DA60 7801 7442                  	dc.l Map_obj78+$78000000
0001DA64 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DA68 7901 77C8                  	dc.l Map_obj79+$79000000
0001DA6C 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DA70                            	even
0001DA70                            	even
0001DA70                            
0001DA70                            ; ---------------------------------------------------------------------------
0001DA70                            ; Debug	list - Star Light
0001DA70                            ; ---------------------------------------------------------------------------
0001DA70                            Debug_SLZ:
0001DA70                            	include "_inc\Debug list - SLZ.asm"
0001DA70                            ; ---------------------------------------------------------------------------
0001DA70                            ; Debug	list - Star Light
0001DA70                            ; ---------------------------------------------------------------------------
0001DA70 000F                       	dc.w $F
0001DA72 2500 A462                  	dc.l Map_obj25+$25000000
0001DA76 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DA7A 2600 AA68                  	dc.l Map_obj26+$26000000
0001DA7E 0000 0680                  	dc.b 0,	0, 6, $80
0001DA82 5901 132A                  	dc.l Map_obj59+$59000000
0001DA86 0000 4000                  	dc.b 0,	0, $40,	0
0001DA8A 5300 8C0E                  	dc.l Map_obj53+$53000000
0001DA8E 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001DA92 1800 8666                  	dc.l Map_obj18b+$18000000
0001DA96 0000 4000                  	dc.b 0,	0, $40,	0
0001DA9A 5A01 1464                  	dc.l Map_obj5A+$5A000000
0001DA9E 0000 4000                  	dc.b 0,	0, $40,	0
0001DAA2 5B01 161C                  	dc.l Map_obj5B+$5B000000
0001DAA6 0000 4000                  	dc.b 0,	0, $40,	0
0001DAAA 5D01 1BEC                  	dc.l Map_obj5D+$5D000000
0001DAAE 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001DAB2 5E01 1F7E                  	dc.l Map_obj5E+$5E000000
0001DAB6 0000 0374                  	dc.b 0,	0, 3, $74
0001DABA 4100 E30E                  	dc.l Map_obj41+$41000000
0001DABE 0000 0523                  	dc.b 0,	0, 5, $23
0001DAC2 1300 B8B8                  	dc.l Map_obj14+$13000000
0001DAC6 0000 0480                  	dc.b 0,	0, 4, $80
0001DACA 1C00 8D1E                  	dc.l Map_obj1C+$1C000000
0001DACE 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001DAD2 5F01 21FC                  	dc.l Map_obj5F+$5F000000
0001DAD6 0000 0400                  	dc.b 0,	0, 4, 0
0001DADA 6001 24B2                  	dc.l Map_obj60+$60000000
0001DADE 0000 2429                  	dc.b 0,	0, $24,	$29
0001DAE2 7901 77C8                  	dc.l Map_obj79+$79000000
0001DAE6 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DAEA                            	even
0001DAEA                            	even
0001DAEA                            
0001DAEA                            ; ---------------------------------------------------------------------------
0001DAEA                            ; Debug	list - Spring Yard
0001DAEA                            ; ---------------------------------------------------------------------------
0001DAEA                            Debug_SYZ:
0001DAEA                            	include "_inc\Debug list - SYZ.asm"
0001DAEA                            ; ---------------------------------------------------------------------------
0001DAEA                            ; Debug	list - Spring Yard
0001DAEA                            ; ---------------------------------------------------------------------------
0001DAEA 000F                       	dc.w $F
0001DAEC 2500 A462                  	dc.l Map_obj25+$25000000
0001DAF0 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DAF4 2600 AA68                  	dc.l Map_obj26+$26000000
0001DAF8 0000 0680                  	dc.b 0,	0, 6, $80
0001DAFC 3600 D5E2                  	dc.l Map_obj36+$36000000
0001DB00 0000 051B                  	dc.b 0,	0, 5, $1B
0001DB04 4100 E30E                  	dc.l Map_obj41+$41000000
0001DB08 0000 0523                  	dc.b 0,	0, 5, $23
0001DB0C 4300 E794                  	dc.l Map_obj43+$43000000
0001DB10 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DB14 1200 EF72                  	dc.l Map_obj12+$12000000
0001DB18 0000 0000                  	dc.b 0,	0, 0, 0
0001DB1C 4700 F0EE                  	dc.l Map_obj47+$47000000
0001DB20 0000 0380                  	dc.b 0,	0, 3, $80
0001DB24 1F00 9C5A                  	dc.l Map_obj1F+$1F000000
0001DB28 0000 0400                  	dc.b 0,	0, 4, 0
0001DB2C 2200 9F16                  	dc.l Map_obj22+$22000000
0001DB30 0000 0444                  	dc.b 0,	0, 4, $44
0001DB34 5000 FF22                  	dc.l Map_obj50+$50000000
0001DB38 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DB3C 1800 8654                  	dc.l Map_obj18a+$18000000
0001DB40 0000 4000                  	dc.b 0,	0, $40,	0
0001DB44 5601 0CEA                  	dc.l Map_obj56+$56000000
0001DB48 0000 4000                  	dc.b 0,	0, $40,	0
0001DB4C 3200 C3EE                  	dc.l Map_obj32+$32000000
0001DB50 0000 0513                  	dc.b 0,	0, 5, $13
0001DB54 7801 7442                  	dc.l Map_obj78+$78000000
0001DB58 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DB5C 7901 77C8                  	dc.l Map_obj79+$79000000
0001DB60 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DB64                            	even
0001DB64                            	even
0001DB64                            
0001DB64                            ; ---------------------------------------------------------------------------
0001DB64                            ; Debug	list - Scrap Brain
0001DB64                            ; ---------------------------------------------------------------------------
0001DB64                            Debug_SBZ:
0001DB64                            	include "_inc\Debug list - SBZ.asm"
0001DB64                            ; ---------------------------------------------------------------------------
0001DB64                            ; Debug	list - Scrap Brain
0001DB64                            ; ---------------------------------------------------------------------------
0001DB64 001D                       	dc.w $1D
0001DB66 2500 A462                  	dc.l Map_obj25+$25000000
0001DB6A 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DB6E 2600 AA68                  	dc.l Map_obj26+$26000000
0001DB72 0000 0680                  	dc.b 0,	0, 6, $80
0001DB76 5F01 21FC                  	dc.l Map_obj5F+$5F000000
0001DB7A 0000 0400                  	dc.b 0,	0, 4, 0
0001DB7E 6001 24B2                  	dc.l Map_obj60+$60000000
0001DB82 0000 0429                  	dc.b 0,	0, 4, $29
0001DB86 7801 7442                  	dc.l Map_obj78+$78000000
0001DB8A 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001DB8E 1501 1086                  	dc.l Map_obj15b+$15000000
0001DB92 0702 4391                  	dc.b 7,	2, $43,	$91
0001DB96 6701 5D56                  	dc.l Map_obj67+$67000000
0001DB9A E000 C344                  	dc.b $E0, 0, $C3, $44
0001DB9E 5201 0634                  	dc.l Map_obj52+$52000000
0001DBA2 2802 22C0                  	dc.b $28, 2, $22, $C0
0001DBA6 3200 C3EE                  	dc.l Map_obj32+$32000000
0001DBAA 0000 0513                  	dc.b 0,	0, 5, $13
0001DBAE 6901 5FB0                  	dc.l Map_obj69+$69000000
0001DBB2 0300 4492                  	dc.b 3,	0, $44,	$92
0001DBB6 6901 600A                  	dc.l Map_obj69a+$69000000
0001DBBA 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001DBBE 6A01 6268                  	dc.l Map_obj6A+$6A000000
0001DBC2 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001DBC6 5300 8C0E                  	dc.l Map_obj53+$53000000
0001DBCA 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001DBCE 5201 0634                  	dc.l Map_obj52+$52000000
0001DBD2 3903 4460                  	dc.b $39, 3, $44, $60
0001DBD6 6B01 6638                  	dc.l Map_obj6B+$6B000000
0001DBDA 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001DBDE 2A00 8EB4                  	dc.l Map_obj2A+$2A000000
0001DBE2 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001DBE6 6B01 6638                  	dc.l Map_obj6B+$6B000000
0001DBEA 1301 22C0                  	dc.b $13, 1, $22, $C0
0001DBEE 6A01 6268                  	dc.l Map_obj6A+$6A000000
0001DBF2 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001DBF6 6B01 6638                  	dc.l Map_obj6B+$6B000000
0001DBFA 2401 22C0                  	dc.b $24, 1, $22, $C0
0001DBFE 6A01 6268                  	dc.l Map_obj6A+$6A000000
0001DC02 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001DC06 6B01 6638                  	dc.l Map_obj6B+$6B000000
0001DC0A 3401 22C0                  	dc.b $34, 1, $22, $C0
0001DC0E 6C01 67FA                  	dc.l Map_obj6C+$6C000000
0001DC12 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001DC16 6D00 EBE4                  	dc.l Map_obj6D+$6D000000
0001DC1A 6400 83D9                  	dc.b $64, 0, $83, $D9
0001DC1E 6D00 EBE4                  	dc.l Map_obj6D+$6D000000
0001DC22 640B 83D9                  	dc.b $64, $B, $83, $D9
0001DC26 6E01 68B0                  	dc.l Map_obj6E+$6E000000
0001DC2A 0400 047E                  	dc.b 4,	0, 4, $7E
0001DC2E 7001 6D06                  	dc.l Map_obj70+$70000000
0001DC32 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001DC36 7101 1A92                  	dc.l Map_obj71+$71000000
0001DC3A 1100 8680                  	dc.b $11, 0, $86, $80
0001DC3E 1E00 9372                  	dc.l Map_obj1E+$1E000000
0001DC42 0400 2302                  	dc.b 4,	0, $23,	2
0001DC46 7901 77C8                  	dc.l Map_obj79+$79000000
0001DC4A 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DC4E                            	even
0001DC4E                            	even
0001DC4E                            
0001DC4E                            ; ---------------------------------------------------------------------------
0001DC4E                            ; Debug	list - ending sequence / special stage
0001DC4E                            ; ---------------------------------------------------------------------------
0001DC4E                            Debug_Ending:
0001DC4E                            	include "_inc\Debug list - Ending and SS.asm"
0001DC4E                            ; ---------------------------------------------------------------------------
0001DC4E                            ; Debug	list - ending sequence / special stage
0001DC4E                            ; ---------------------------------------------------------------------------
0001DC4E 000D                       	dc.w $D
0001DC50 2500 A462                  	dc.l Map_obj25+$25000000
0001DC54 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DC58 4700 F0EE                  	dc.l Map_obj47+$47000000
0001DC5C 0000 0380                  	dc.b 0,	0, 3, $80
0001DC60 2800 998C                  	dc.l Map_obj28a+$28000000
0001DC64 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001DC68 2800 998C                  	dc.l Map_obj28a+$28000000
0001DC6C 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001DC70 2800 998C                  	dc.l Map_obj28a+$28000000
0001DC74 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001DC78 2800 9974                  	dc.l Map_obj28+$28000000
0001DC7C 0D00 0553                  	dc.b $D, 0, 5, $53
0001DC80 2800 9974                  	dc.l Map_obj28+$28000000
0001DC84 0E00 0553                  	dc.b $E, 0, 5, $53
0001DC88 2800 9974                  	dc.l Map_obj28+$28000000
0001DC8C 0F00 0573                  	dc.b $F, 0, 5, $73
0001DC90 2800 9974                  	dc.l Map_obj28+$28000000
0001DC94 1000 0573                  	dc.b $10, 0, 5,	$73
0001DC98 2800 998C                  	dc.l Map_obj28a+$28000000
0001DC9C 1100 0585                  	dc.b $11, 0, 5,	$85
0001DCA0 2800 99A4                  	dc.l Map_obj28b+$28000000
0001DCA4 1200 0593                  	dc.b $12, 0, 5,	$93
0001DCA8 2800 998C                  	dc.l Map_obj28a+$28000000
0001DCAC 1300 0565                  	dc.b $13, 0, 5,	$65
0001DCB0 2800 99A4                  	dc.l Map_obj28b+$28000000
0001DCB4 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001DCB8                            	even
0001DCB8                            	even
0001DCB8                            
0001DCB8                            ; ---------------------------------------------------------------------------
0001DCB8                            ; Main level load blocks
0001DCB8                            ; ---------------------------------------------------------------------------
0001DCB8                            MainLoadBlocks:
0001DCB8                            	include "_inc\Main level load blocks.asm"
0001DCB8                            ; ---------------------------------------------------------------------------
0001DCB8                            ; Main level load blocks
0001DCB8                            ;
0001DCB8                            ; ===FORMAT===
0001DCB8                            ; level	patterns + (1st	PLC num	* 10^6)
0001DCB8                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001DCB8                            ; 256x256 mappings
0001DCB8                            ; blank, music (unused), pal index (unused), pal index
0001DCB8                            ; ---------------------------------------------------------------------------
0001DCB8 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001DCBC 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001DCC0 0000 0000                  	dc.l Blk256_GHZ
0001DCC4 0081 0404                  	dc.b 0,	$81, 4,	4
0001DCC8 0000 0000                  	dc.l Nem_LZ+$6000000
0001DCCC 0000 0000                  	dc.l Blk16_LZ+$7000000
0001DCD0 0000 0000                  	dc.l Blk256_LZ
0001DCD4 0082 0505                  	dc.b 0,	$82, 5,	5
0001DCD8 0000 0000                  	dc.l Nem_MZ+$8000000
0001DCDC 0000 0000                  	dc.l Blk16_MZ+$9000000
0001DCE0 0000 0000                  	dc.l Blk256_MZ
0001DCE4 0083 0606                  	dc.b 0,	$83, 6,	6
0001DCE8 0000 0000                  	dc.l Nem_SLZ+$A000000
0001DCEC 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001DCF0 0000 0000                  	dc.l Blk256_SLZ
0001DCF4 0084 0707                  	dc.b 0,	$84, 7,	7
0001DCF8 0000 0000                  	dc.l Nem_SYZ+$C000000
0001DCFC 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001DD00 0000 0000                  	dc.l Blk256_SYZ
0001DD04 0085 0808                  	dc.b 0,	$85, 8,	8
0001DD08 0000 0000                  	dc.l Nem_SBZ+$E000000
0001DD0C 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001DD10 0000 0000                  	dc.l Blk256_SBZ
0001DD14 0086 0909                  	dc.b 0,	$86, 9,	9
0001DD18 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001DD1C 0000 0000                  	dc.l Blk16_GHZ
0001DD20 0000 0000                  	dc.l Blk256_GHZ
0001DD24 0086 1313                  	dc.b 0,	$86, $13, $13
0001DD28                            	even
0001DD28                            	even
0001DD28                            
0001DD28                            ; ---------------------------------------------------------------------------
0001DD28                            ; Pattern load cues
0001DD28                            ; ---------------------------------------------------------------------------
0001DD28                            ArtLoadCues:
0001DD28                            	include "_inc\Pattern load cues.asm"
0001DD28                            ; ---------------------------------------------------------------------------
0001DD28                            ; Pattern load cues - index
0001DD28                            ; ---------------------------------------------------------------------------
0001DD28 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001DD2C 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001DD30 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001DD34 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001DD38 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001DD3C 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001DD40 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001DD44 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001DD48 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001DD4C 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001DD50 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001DD54 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001DD58 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001DD5C 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001DD60 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001DD64 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001DD68                            ; ---------------------------------------------------------------------------
0001DD68                            ; Pattern load cues - standard block 1
0001DD68                            ; ---------------------------------------------------------------------------
0001DD68 0004                       PLC_Main:	dc.w 4
0001DD6A 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001DD6E F400                       		dc.w $F400
0001DD70 0000 0000                  		dc.l Nem_Hud		; HUD
0001DD74 D940                       		dc.w $D940
0001DD76 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001DD7A FA80                       		dc.w $FA80
0001DD7C 0000 0000                  		dc.l Nem_Ring		; rings
0001DD80 F640                       		dc.w $F640
0001DD82 0000 0000                  		dc.l Nem_Points		; points from enemy
0001DD86 F2E0                       		dc.w $F2E0
0001DD88                            ; ---------------------------------------------------------------------------
0001DD88                            ; Pattern load cues - standard block 2
0001DD88                            ; ---------------------------------------------------------------------------
0001DD88 0002                       PLC_Main2:	dc.w 2
0001DD8A 0000 0000                  		dc.l Nem_Monitors	; monitors
0001DD8E D000                       		dc.w $D000
0001DD90 0000 0000                  		dc.l Nem_Shield		; shield
0001DD94 A820                       		dc.w $A820
0001DD96 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001DD9A AB80                       		dc.w $AB80
0001DD9C                            ; ---------------------------------------------------------------------------
0001DD9C                            ; Pattern load cues - explosion
0001DD9C                            ; ---------------------------------------------------------------------------
0001DD9C 0000                       PLC_Explode:	dc.w 0
0001DD9E 0000 0000                  		dc.l Nem_Explode	; explosion
0001DDA2 B400                       		dc.w $B400
0001DDA4                            ; ---------------------------------------------------------------------------
0001DDA4                            ; Pattern load cues - game/time	over
0001DDA4                            ; ---------------------------------------------------------------------------
0001DDA4 0000                       PLC_GameOver:	dc.w 0
0001DDA6 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001DDAA ABC0                       		dc.w $ABC0
0001DDAC                            ; ---------------------------------------------------------------------------
0001DDAC                            ; Pattern load cues - Green Hill
0001DDAC                            ; ---------------------------------------------------------------------------
0001DDAC 000B                       PLC_GHZ:	dc.w $B
0001DDAE 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001DDB2 0000                       		dc.w 0
0001DDB4 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001DDB8 39A0                       		dc.w $39A0
0001DDBA 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001DDBE 6B00                       		dc.w $6B00
0001DDC0 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001DDC4 7A00                       		dc.w $7A00
0001DDC6 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DDCA 8000                       		dc.w $8000
0001DDCC 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DDD0 8880                       		dc.w $8880
0001DDD2 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001DDD6 8F60                       		dc.w $8F60
0001DDD8 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001DDDC 9360                       		dc.w $9360
0001DDDE 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001DDE2 9E00                       		dc.w $9E00
0001DDE4 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DDE8 A360                       		dc.w $A360
0001DDEA 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DDEE A460                       		dc.w $A460
0001DDF0 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DDF4 A660                       		dc.w $A660
0001DDF6 0005                       PLC_GHZ2:	dc.w 5
0001DDF8 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DDFC 7000                       		dc.w $7000
0001DDFE 0000 0000                  		dc.l Nem_Bridge		; bridge
0001DE02 71C0                       		dc.w $71C0
0001DE04 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001DE08 7300                       		dc.w $7300
0001DE0A 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001DE0E 7540                       		dc.w $7540
0001DE10 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001DE14 A1E0                       		dc.w $A1E0
0001DE16 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001DE1A 6980                       		dc.w $6980
0001DE1C                            ; ---------------------------------------------------------------------------
0001DE1C                            ; Pattern load cues - Labyrinth
0001DE1C                            ; ---------------------------------------------------------------------------
0001DE1C 000B                       PLC_LZ:		dc.w $B
0001DE1E 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001DE22 0000                       		dc.w 0
0001DE24 0000 0000                  		dc.l Nem_LzBlock1	; block
0001DE28 3C00                       		dc.w $3C00
0001DE2A 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001DE2E 3E00                       		dc.w $3E00
0001DE30 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001DE34 4B20                       		dc.w $4B20
0001DE36 0000 0000                  		dc.l Nem_Water		; water	surface
0001DE3A 6000                       		dc.w $6000
0001DE3C 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001DE40 6200                       		dc.w $6200
0001DE42 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001DE46 6500                       		dc.w $6500
0001DE48 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001DE4C 6900                       		dc.w $6900
0001DE4E 0000 0000                  		dc.l Nem_LzBlock3	; block
0001DE52 7780                       		dc.w $7780
0001DE54 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001DE58 7880                       		dc.w $7880
0001DE5A 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001DE5E 7980                       		dc.w $7980
0001DE60 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001DE64 94C0                       		dc.w $94C0
0001DE66 000C                       PLC_LZ2:	dc.w $C
0001DE68 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001DE6C 7BC0                       		dc.w $7BC0
0001DE6E 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001DE72 7CC0                       		dc.w $7CC0
0001DE74 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001DE78 7EC0                       		dc.w $7EC0
0001DE7A 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001DE7E 5D20                       		dc.w $5D20
0001DE80 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001DE84 8800                       		dc.w $8800
0001DE86 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001DE8A 89E0                       		dc.w $89E0
0001DE8C 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DE90 8CE0                       		dc.w $8CE0
0001DE92 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001DE96 90C0                       		dc.w $90C0
0001DE98 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DE9C A1E0                       		dc.w $A1E0
0001DE9E 0000 0000                  		dc.l Nem_Cork		; cork block
0001DEA2 A000                       		dc.w $A000
0001DEA4 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DEA8 A360                       		dc.w $A360
0001DEAA 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DEAE A460                       		dc.w $A460
0001DEB0 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DEB4 A660                       		dc.w $A660
0001DEB6                            ; ---------------------------------------------------------------------------
0001DEB6                            ; Pattern load cues - Marble
0001DEB6                            ; ---------------------------------------------------------------------------
0001DEB6 0009                       PLC_MZ:		dc.w 9
0001DEB8 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001DEBC 0000                       		dc.w 0
0001DEBE 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001DEC2 6000                       		dc.w $6000
0001DEC4 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001DEC8 68A0                       		dc.w $68A0
0001DECA 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DECE 7000                       		dc.w $7000
0001DED0 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001DED4 71C0                       		dc.w $71C0
0001DED6 0000 0000                  		dc.l Nem_Lava		; lava
0001DEDA 7500                       		dc.w $7500
0001DEDC 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DEE0 8880                       		dc.w $8880
0001DEE2 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001DEE6 8F60                       		dc.w $8F60
0001DEE8 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001DEEC 9700                       		dc.w $9700
0001DEEE 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DEF2 9FE0                       		dc.w $9FE0
0001DEF4 0004                       PLC_MZ2:	dc.w 4
0001DEF6 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001DEFA A260                       		dc.w $A260
0001DEFC 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DF00 A360                       		dc.w $A360
0001DF02 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DF06 A460                       		dc.w $A460
0001DF08 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DF0C A660                       		dc.w $A660
0001DF0E 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001DF12 5700                       		dc.w $5700
0001DF14                            ; ---------------------------------------------------------------------------
0001DF14                            ; Pattern load cues - Star Light
0001DF14                            ; ---------------------------------------------------------------------------
0001DF14 0008                       PLC_SLZ:	dc.w 8
0001DF16 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001DF1A 0000                       		dc.w 0
0001DF1C 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001DF20 8000                       		dc.w $8000
0001DF22 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DF26 8520                       		dc.w $8520
0001DF28 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001DF2C 9000                       		dc.w $9000
0001DF2E 0000 0000                  		dc.l Nem_SlzBlock	; block
0001DF32 9C00                       		dc.w $9C00
0001DF34 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001DF38 A260                       		dc.w $A260
0001DF3A 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DF3E A360                       		dc.w $A360
0001DF40 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DF44 A460                       		dc.w $A460
0001DF46 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DF4A A660                       		dc.w $A660
0001DF4C 0005                       PLC_SLZ2:	dc.w 5
0001DF4E 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001DF52 6E80                       		dc.w $6E80
0001DF54 0000 0000                  		dc.l Nem_Fan		; fan
0001DF58 7400                       		dc.w $7400
0001DF5A 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001DF5E 7980                       		dc.w $7980
0001DF60 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001DF64 7B80                       		dc.w $7B80
0001DF66 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001DF6A 9B00                       		dc.w $9B00
0001DF6C 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001DF70 9E00                       		dc.w $9E00
0001DF72                            ; ---------------------------------------------------------------------------
0001DF72                            ; Pattern load cues - Spring Yard
0001DF72                            ; ---------------------------------------------------------------------------
0001DF72 0004                       PLC_SYZ:	dc.w 4
0001DF74 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001DF78 0000                       		dc.w 0
0001DF7A 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DF7E 8000                       		dc.w $8000
0001DF80 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DF84 8880                       		dc.w $8880
0001DF86 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001DF8A 8F60                       		dc.w $8F60
0001DF8C 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001DF90 9700                       		dc.w $9700
0001DF92 0007                       PLC_SYZ2:	dc.w 7
0001DF94 0000 0000                  		dc.l Nem_Bumper		; bumper
0001DF98 7000                       		dc.w $7000
0001DF9A 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001DF9E 72C0                       		dc.w $72C0
0001DFA0 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001DFA4 7740                       		dc.w $7740
0001DFA6 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DFAA 9FE0                       		dc.w $9FE0
0001DFAC 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DFB0 A1E0                       		dc.w $A1E0
0001DFB2 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DFB6 A360                       		dc.w $A360
0001DFB8 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DFBC A460                       		dc.w $A460
0001DFBE 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DFC2 A660                       		dc.w $A660
0001DFC4                            ; ---------------------------------------------------------------------------
0001DFC4                            ; Pattern load cues - Scrap Brain
0001DFC4                            ; ---------------------------------------------------------------------------
0001DFC4 000B                       PLC_SBZ:	dc.w $B
0001DFC6 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001DFCA 0000                       		dc.w 0
0001DFCC 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001DFD0 5800                       		dc.w $5800
0001DFD2 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001DFD6 5D00                       		dc.w $5D00
0001DFD8 0000 0000                  		dc.l Nem_Girder		; girder
0001DFDC 5E00                       		dc.w $5E00
0001DFDE 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001DFE2 6040                       		dc.w $6040
0001DFE4 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001DFE8 6880                       		dc.w $6880
0001DFEA 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001DFEE 6900                       		dc.w $6900
0001DFF0 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001DFF4 7220                       		dc.w $7220
0001DFF6 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001DFFA 76A0                       		dc.w $76A0
0001DFFC 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001E000 7B20                       		dc.w $7B20
0001E002 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E006 7EA0                       		dc.w $7EA0
0001E008 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001E00C 9860                       		dc.w $9860
0001E00E 000C                       PLC_SBZ2:	dc.w $C
0001E010 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E014 5600                       		dc.w $5600
0001E016 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E01A 8000                       		dc.w $8000
0001E01C 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E020 8520                       		dc.w $8520
0001E022 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001E026 8C00                       		dc.w $8C00
0001E028 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001E02C 8DE0                       		dc.w $8DE0
0001E02E 0000 0000                  		dc.l Nem_Electric	; electric orb
0001E032 8FC0                       		dc.w $8FC0
0001E034 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001E038 9240                       		dc.w $9240
0001E03A 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E03E 7F20                       		dc.w $7F20
0001E040 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001E044 9BE0                       		dc.w $9BE0
0001E046 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E04A A1E0                       		dc.w $A1E0
0001E04C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E050 A360                       		dc.w $A360
0001E052 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E056 A460                       		dc.w $A460
0001E058 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E05C A660                       		dc.w $A660
0001E05E                            ; ---------------------------------------------------------------------------
0001E05E                            ; Pattern load cues - title card
0001E05E                            ; ---------------------------------------------------------------------------
0001E05E 0000                       PLC_TitleCard:	dc.w 0
0001E060 0000 0000                  		dc.l Nem_TitleCard
0001E064 B000                       		dc.w $B000
0001E066                            ; ---------------------------------------------------------------------------
0001E066                            ; Pattern load cues - act 3 boss
0001E066                            ; ---------------------------------------------------------------------------
0001E066 0005                       PLC_Boss:	dc.w 5
0001E068 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E06C 8000                       		dc.w $8000
0001E06E 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001E072 8D80                       		dc.w $8D80
0001E074 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E078 93A0                       		dc.w $93A0
0001E07A 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001E07E A300                       		dc.w $A300
0001E080 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001E084 A300                       		dc.w $A300
0001E086 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E08A A540                       		dc.w $A540
0001E08C                            ; ---------------------------------------------------------------------------
0001E08C                            ; Pattern load cues - act 1/2 signpost
0001E08C                            ; ---------------------------------------------------------------------------
0001E08C 0002                       PLC_Signpost:	dc.w 2
0001E08E 0000 0000                  		dc.l Nem_SignPost	; signpost
0001E092 D000                       		dc.w $D000
0001E094 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001E098 96C0                       		dc.w $96C0
0001E09A 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001E09E 8C40                       		dc.w $8C40
0001E0A0                            ; ---------------------------------------------------------------------------
0001E0A0                            ; Pattern load cues - beta special stage warp effect
0001E0A0                            ; ---------------------------------------------------------------------------
0001E0A0 0000                       PLC_Warp:	dc.w 0
0001E0A2 0000 0000                  		dc.l Nem_Warp
0001E0A6 A820                       		dc.w $A820
0001E0A8                            ; ---------------------------------------------------------------------------
0001E0A8                            ; Pattern load cues - special stage
0001E0A8                            ; ---------------------------------------------------------------------------
0001E0A8 0010                       PLC_SpeStage:	dc.w $10
0001E0AA 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001E0AE 0000                       		dc.w 0
0001E0B0 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001E0B4 0A20                       		dc.w $A20
0001E0B6 0000 0000                  		dc.l Nem_SSWalls	; walls
0001E0BA 2840                       		dc.w $2840
0001E0BC 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E0C0 4760                       		dc.w $4760
0001E0C2 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001E0C6 4A20                       		dc.w $4A20
0001E0C8 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001E0CC 4C60                       		dc.w $4C60
0001E0CE 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001E0D2 5E00                       		dc.w $5E00
0001E0D4 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001E0D8 6E00                       		dc.w $6E00
0001E0DA 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001E0DE 7E00                       		dc.w $7E00
0001E0E0 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001E0E4 8E00                       		dc.w $8E00
0001E0E6 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001E0EA 9E00                       		dc.w $9E00
0001E0EC 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001E0F0 AE00                       		dc.w $AE00
0001E0F2 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001E0F6 BE00                       		dc.w $BE00
0001E0F8 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001E0FC EE00                       		dc.w $EE00
0001E0FE 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001E102 F2E0                       		dc.w $F2E0
0001E104 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001E108 F400                       		dc.w $F400
0001E10A 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001E10E F520                       		dc.w $F520
0001E110 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001E114 F2E0                       		dc.w $F2E0
0001E116 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001E11A F400                       		dc.w $F400
0001E11C 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001E120 F520                       		dc.w $F520
0001E122                            ; ---------------------------------------------------------------------------
0001E122                            ; Pattern load cues - GHZ animals
0001E122                            ; ---------------------------------------------------------------------------
0001E122 0001                       PLC_GHZAnimals:	dc.w 1
0001E124 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E128 B000                       		dc.w $B000
0001E12A 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E12E B240                       		dc.w $B240
0001E130                            ; ---------------------------------------------------------------------------
0001E130                            ; Pattern load cues - LZ animals
0001E130                            ; ---------------------------------------------------------------------------
0001E130 0001                       PLC_LZAnimals:	dc.w 1
0001E132 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E136 B000                       		dc.w $B000
0001E138 0000 0000                  		dc.l Nem_Seal		; seal
0001E13C B240                       		dc.w $B240
0001E13E                            ; ---------------------------------------------------------------------------
0001E13E                            ; Pattern load cues - MZ animals
0001E13E                            ; ---------------------------------------------------------------------------
0001E13E 0001                       PLC_MZAnimals:	dc.w 1
0001E140 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E144 B000                       		dc.w $B000
0001E146 0000 0000                  		dc.l Nem_Seal		; seal
0001E14A B240                       		dc.w $B240
0001E14C                            ; ---------------------------------------------------------------------------
0001E14C                            ; Pattern load cues - SLZ animals
0001E14C                            ; ---------------------------------------------------------------------------
0001E14C 0001                       PLC_SLZAnimals:	dc.w 1
0001E14E 0000 0000                  		dc.l Nem_Pig		; pig
0001E152 B000                       		dc.w $B000
0001E154 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E158 B240                       		dc.w $B240
0001E15A                            ; ---------------------------------------------------------------------------
0001E15A                            ; Pattern load cues - SYZ animals
0001E15A                            ; ---------------------------------------------------------------------------
0001E15A 0001                       PLC_SYZAnimals:	dc.w 1
0001E15C 0000 0000                  		dc.l Nem_Pig		; pig
0001E160 B000                       		dc.w $B000
0001E162 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E166 B240                       		dc.w $B240
0001E168                            ; ---------------------------------------------------------------------------
0001E168                            ; Pattern load cues - SBZ animals
0001E168                            ; ---------------------------------------------------------------------------
0001E168 0001                       PLC_SBZAnimals:	dc.w 1
0001E16A 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E16E B000                       		dc.w $B000
0001E170 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E174 B240                       		dc.w $B240
0001E176                            ; ---------------------------------------------------------------------------
0001E176                            ; Pattern load cues - special stage results screen
0001E176                            ; ---------------------------------------------------------------------------
0001E176 0001                       PLC_SpeStResult:dc.w 1
0001E178 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001E17C A820                       		dc.w $A820
0001E17E 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001E182 AA20                       		dc.w $AA20
0001E184                            ; ---------------------------------------------------------------------------
0001E184                            ; Pattern load cues - ending sequence
0001E184                            ; ---------------------------------------------------------------------------
0001E184 000E                       PLC_Ending:	dc.w $E
0001E186 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E18A 0000                       		dc.w 0
0001E18C 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E190 39A0                       		dc.w $39A0
0001E192 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E196 6B00                       		dc.w $6B00
0001E198 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001E19C 7400                       		dc.w $7400
0001E19E 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E1A2 78A0                       		dc.w $78A0
0001E1A4 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001E1A8 7C20                       		dc.w $7C20
0001E1AA 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001E1AE A480                       		dc.w $A480
0001E1B0 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E1B4 AA60                       		dc.w $AA60
0001E1B6 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E1BA ACA0                       		dc.w $ACA0
0001E1BC 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E1C0 AE60                       		dc.w $AE60
0001E1C2 0000 0000                  		dc.l Nem_Seal		; seal
0001E1C6 B0A0                       		dc.w $B0A0
0001E1C8 0000 0000                  		dc.l Nem_Pig		; pig
0001E1CC B260                       		dc.w $B260
0001E1CE 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E1D2 B4A0                       		dc.w $B4A0
0001E1D4 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E1D8 B660                       		dc.w $B660
0001E1DA 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001E1DE B8A0                       		dc.w $B8A0
0001E1E0                            ; ---------------------------------------------------------------------------
0001E1E0                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001E1E0                            ; ---------------------------------------------------------------------------
0001E1E0 0002                       PLC_TryAgain:	dc.w 2
0001E1E2 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E1E6 78A0                       		dc.w $78A0
0001E1E8 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001E1EC 7C20                       		dc.w $7C20
0001E1EE 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001E1F2 B400                       		dc.w $B400
0001E1F4                            ; ---------------------------------------------------------------------------
0001E1F4                            ; Pattern load cues - Eggman on SBZ 2
0001E1F4                            ; ---------------------------------------------------------------------------
0001E1F4 0002                       PLC_EggmanSBZ2:	dc.w 2
0001E1F6 0000 0000                  		dc.l Nem_SbzBlock	; block
0001E1FA A300                       		dc.w $A300
0001E1FC 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001E200 8000                       		dc.w $8000
0001E202 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E206 9400                       		dc.w $9400
0001E208                            ; ---------------------------------------------------------------------------
0001E208                            ; Pattern load cues - final boss
0001E208                            ; ---------------------------------------------------------------------------
0001E208 0004                       PLC_FZBoss:	dc.w 4
0001E20A 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001E20E 7400                       		dc.w $7400
0001E210 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001E214 6000                       		dc.w $6000
0001E216 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E21A 8000                       		dc.w $8000
0001E21C 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001E220 8E00                       		dc.w $8E00
0001E222 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E226 A540                       		dc.w $A540
0001E228                            		even
0001E228                            		even
0001E228                            
0001E228                            		incbin	misc\padding.bin
0001E316                            		even
0001E316                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001E778                            		even
0001E778                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001E870                            		even
0001E870                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001E984                            		even
0001E984                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001F990                            		even
0001F990                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00023A96                            		even
00023A96                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00023ACA                            		even
00023ACA                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00023B88                            		even
00023B88                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00024030                            		even
00024030                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
0002408E                            		even
0002408E                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
00024C94                            		even
00024C94                            ; ---------------------------------------------------------------------------
00024C94                            ; Sprite mappings - Sonic
00024C94                            ; ---------------------------------------------------------------------------
00024C94                            Map_Sonic:
00024C94                            	include "_maps\Sonic.asm"
00024C94                            Map_6d2d:
00024C94 0000                       Map_6d2d_0: 	dc.w Map_6d2d_B8-Map_6d2d
00024C96 0000                       Map_6d2d_2: 	dc.w Map_6d2d_B9-Map_6d2d
00024C98 0000                       Map_6d2d_4: 	dc.w Map_6d2d_C4-Map_6d2d
00024C9A 0000                       Map_6d2d_6: 	dc.w Map_6d2d_D4-Map_6d2d
00024C9C 0000                       Map_6d2d_8: 	dc.w Map_6d2d_E4-Map_6d2d
00024C9E 0000                       Map_6d2d_A: 	dc.w Map_6d2d_F4-Map_6d2d
00024CA0 0000                       Map_6d2d_C: 	dc.w Map_6d2d_104-Map_6d2d
00024CA2 0000                       Map_6d2d_E: 	dc.w Map_6d2d_119-Map_6d2d
00024CA4 0000                       Map_6d2d_10: 	dc.w Map_6d2d_124-Map_6d2d
00024CA6 0000                       Map_6d2d_12: 	dc.w Map_6d2d_12F-Map_6d2d
00024CA8 0000                       Map_6d2d_14: 	dc.w Map_6d2d_144-Map_6d2d
00024CAA 0000                       Map_6d2d_16: 	dc.w Map_6d2d_14F-Map_6d2d
00024CAC 0000                       Map_6d2d_18: 	dc.w Map_6d2d_15F-Map_6d2d
00024CAE 0000                       Map_6d2d_1A: 	dc.w Map_6d2d_179-Map_6d2d
00024CB0 0000                       Map_6d2d_1C: 	dc.w Map_6d2d_198-Map_6d2d
00024CB2 0000                       Map_6d2d_1E: 	dc.w Map_6d2d_1AD-Map_6d2d
00024CB4 0000                       Map_6d2d_20: 	dc.w Map_6d2d_1C7-Map_6d2d
00024CB6 0000                       Map_6d2d_22: 	dc.w Map_6d2d_1DC-Map_6d2d
00024CB8 0000                       Map_6d2d_24: 	dc.w Map_6d2d_1F6-Map_6d2d
00024CBA 0000                       Map_6d2d_26: 	dc.w Map_6d2d_20B-Map_6d2d
00024CBC 0000                       Map_6d2d_28: 	dc.w Map_6d2d_216-Map_6d2d
00024CBE 0000                       Map_6d2d_2A: 	dc.w Map_6d2d_221-Map_6d2d
00024CC0 0000                       Map_6d2d_2C: 	dc.w Map_6d2d_236-Map_6d2d
00024CC2 0000                       Map_6d2d_2E: 	dc.w Map_6d2d_241-Map_6d2d
00024CC4 0000                       Map_6d2d_30: 	dc.w Map_6d2d_251-Map_6d2d
00024CC6 0000                       Map_6d2d_32: 	dc.w Map_6d2d_270-Map_6d2d
00024CC8 0000                       Map_6d2d_34: 	dc.w Map_6d2d_28F-Map_6d2d
00024CCA 0000                       Map_6d2d_36: 	dc.w Map_6d2d_2A4-Map_6d2d
00024CCC 0000                       Map_6d2d_38: 	dc.w Map_6d2d_2BE-Map_6d2d
00024CCE 0000                       Map_6d2d_3A: 	dc.w Map_6d2d_2D3-Map_6d2d
00024CD0 0000                       Map_6d2d_3C: 	dc.w Map_6d2d_2ED-Map_6d2d
00024CD2 0000                       Map_6d2d_3E: 	dc.w Map_6d2d_2F8-Map_6d2d
00024CD4 0000                       Map_6d2d_40: 	dc.w Map_6d2d_303-Map_6d2d
00024CD6 0000                       Map_6d2d_42: 	dc.w Map_6d2d_30E-Map_6d2d
00024CD8 0000                       Map_6d2d_44: 	dc.w Map_6d2d_319-Map_6d2d
00024CDA 0000                       Map_6d2d_46: 	dc.w Map_6d2d_32E-Map_6d2d
00024CDC 0000                       Map_6d2d_48: 	dc.w Map_6d2d_33E-Map_6d2d
00024CDE 0000                       Map_6d2d_4A: 	dc.w Map_6d2d_353-Map_6d2d
00024CE0 0000                       Map_6d2d_4C: 	dc.w Map_6d2d_363-Map_6d2d
00024CE2 0000                       Map_6d2d_4E: 	dc.w Map_6d2d_36E-Map_6d2d
00024CE4 0000                       Map_6d2d_50: 	dc.w Map_6d2d_379-Map_6d2d
00024CE6 0000                       Map_6d2d_52: 	dc.w Map_6d2d_384-Map_6d2d
00024CE8 0000                       Map_6d2d_54: 	dc.w Map_6d2d_38F-Map_6d2d
00024CEA 0000                       Map_6d2d_56: 	dc.w Map_6d2d_3A4-Map_6d2d
00024CEC 0000                       Map_6d2d_58: 	dc.w Map_6d2d_3AF-Map_6d2d
00024CEE 0000                       Map_6d2d_5A: 	dc.w Map_6d2d_3C4-Map_6d2d
00024CF0 0000                       Map_6d2d_5C: 	dc.w Map_6d2d_3CF-Map_6d2d
00024CF2 0000                       Map_6d2d_5E: 	dc.w Map_6d2d_3D5-Map_6d2d
00024CF4 0000                       Map_6d2d_60: 	dc.w Map_6d2d_3DB-Map_6d2d
00024CF6 0000                       Map_6d2d_62: 	dc.w Map_6d2d_3E1-Map_6d2d
00024CF8 0000                       Map_6d2d_64: 	dc.w Map_6d2d_3E7-Map_6d2d
00024CFA 0000                       Map_6d2d_66: 	dc.w Map_6d2d_3ED-Map_6d2d
00024CFC 0000                       Map_6d2d_68: 	dc.w Map_6d2d_3F8-Map_6d2d
00024CFE 0000                       Map_6d2d_6A: 	dc.w Map_6d2d_3FE-Map_6d2d
00024D00 0000                       Map_6d2d_6C: 	dc.w Map_6d2d_409-Map_6d2d
00024D02 0000                       Map_6d2d_6E: 	dc.w Map_6d2d_40F-Map_6d2d
00024D04 0000                       Map_6d2d_70: 	dc.w Map_6d2d_41A-Map_6d2d
00024D06 0000                       Map_6d2d_72: 	dc.w Map_6d2d_42F-Map_6d2d
00024D08 0000                       Map_6d2d_74: 	dc.w Map_6d2d_44E-Map_6d2d
00024D0A 0000                       Map_6d2d_76: 	dc.w Map_6d2d_459-Map_6d2d
00024D0C 0000                       Map_6d2d_78: 	dc.w Map_6d2d_464-Map_6d2d
00024D0E 0000                       Map_6d2d_7A: 	dc.w Map_6d2d_479-Map_6d2d
00024D10 0000                       Map_6d2d_7C: 	dc.w Map_6d2d_484-Map_6d2d
00024D12 0000                       Map_6d2d_7E: 	dc.w Map_6d2d_494-Map_6d2d
00024D14 0000                       Map_6d2d_80: 	dc.w Map_6d2d_4A9-Map_6d2d
00024D16 0000                       Map_6d2d_82: 	dc.w Map_6d2d_4B9-Map_6d2d
00024D18 0000                       Map_6d2d_84: 	dc.w Map_6d2d_4CE-Map_6d2d
00024D1A 0000                       Map_6d2d_86: 	dc.w Map_6d2d_4E3-Map_6d2d
00024D1C 0000                       Map_6d2d_88: 	dc.w Map_6d2d_4FD-Map_6d2d
00024D1E 0000                       Map_6d2d_8A: 	dc.w Map_6d2d_517-Map_6d2d
00024D20 0000                       Map_6d2d_8C: 	dc.w Map_6d2d_522-Map_6d2d
00024D22 0000                       Map_6d2d_8E: 	dc.w Map_6d2d_532-Map_6d2d
00024D24 0000                       Map_6d2d_90: 	dc.w Map_6d2d_53D-Map_6d2d
00024D26 0000                       Map_6d2d_92: 	dc.w Map_6d2d_54D-Map_6d2d
00024D28 0000                       Map_6d2d_94: 	dc.w Map_6d2d_558-Map_6d2d
00024D2A 0000                       Map_6d2d_96: 	dc.w Map_6d2d_568-Map_6d2d
00024D2C 0000                       Map_6d2d_98: 	dc.w Map_6d2d_578-Map_6d2d
00024D2E 0000                       Map_6d2d_9A: 	dc.w Map_6d2d_592-Map_6d2d
00024D30 0000                       Map_6d2d_9C: 	dc.w Map_6d2d_5AC-Map_6d2d
00024D32 0000                       Map_6d2d_9E: 	dc.w Map_6d2d_5B7-Map_6d2d
00024D34 0000                       Map_6d2d_A0: 	dc.w Map_6d2d_5C7-Map_6d2d
00024D36 0000                       Map_6d2d_A2: 	dc.w Map_6d2d_5CD-Map_6d2d
00024D38 0000                       Map_6d2d_A4: 	dc.w Map_6d2d_5D3-Map_6d2d
00024D3A 0000                       Map_6d2d_A6: 	dc.w Map_6d2d_5D9-Map_6d2d
00024D3C 0000                       Map_6d2d_A8: 	dc.w Map_6d2d_5EE-Map_6d2d
00024D3E 0000                       Map_6d2d_AA: 	dc.w Map_6d2d_5FE-Map_6d2d
00024D40 0000                       Map_6d2d_AC: 	dc.w Map_6d2d_60E-Map_6d2d
00024D42 0000                       Map_6d2d_AE: 	dc.w Map_6d2d_61E-Map_6d2d
00024D44 0000                       Map_6d2d_B0: 	dc.w Map_6d2d_629-Map_6d2d
00024D46 0000                       Map_6d2d_B2: 	dc.w Map_6d2d_634-Map_6d2d
00024D48 0000                       Map_6d2d_B4: 	dc.w Map_6d2d_644-Map_6d2d
00024D4A 0000                       Map_6d2d_B6: 	dc.w Map_6d2d_64F-Map_6d2d
00024D4C 00                         Map_6d2d_B8: 	dc.b $0
00024D4D 02                         Map_6d2d_B9: 	dc.b $2
00024D4E ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
00024D53 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
00024D58 03                         Map_6d2d_C4: 	dc.b $3
00024D59 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024D5E FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024D63 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024D68 03                         Map_6d2d_D4: 	dc.b $3
00024D69 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024D6E FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024D73 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024D78 03                         Map_6d2d_E4: 	dc.b $3
00024D79 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024D7E FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024D83 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024D88 03                         Map_6d2d_F4: 	dc.b $3
00024D89 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00024D8E 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
00024D93 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024D98 04                         Map_6d2d_104: 	dc.b $4
00024D99 EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
00024D9E FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
00024DA3 FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
00024DA8 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
00024DAD 02                         Map_6d2d_119: 	dc.b $2
00024DAE EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
00024DB3 FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
00024DB8 02                         Map_6d2d_124: 	dc.b $2
00024DB9 ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
00024DBE FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
00024DC3 04                         Map_6d2d_12F: 	dc.b $4
00024DC4 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00024DC9 FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
00024DCE FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
00024DD3 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
00024DD8 02                         Map_6d2d_144: 	dc.b $2
00024DD9 FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
00024DDE EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
00024DE3 03                         Map_6d2d_14F: 	dc.b $3
00024DE4 ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00024DE9 FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
00024DEE 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
00024DF3 05                         Map_6d2d_15F: 	dc.b $5
00024DF4 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00024DF9 EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
00024DFE FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
00024E03 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00024E08 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
00024E0D 06                         Map_6d2d_179: 	dc.b $6
00024E0E EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00024E13 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00024E18 FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
00024E1D 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
00024E22 FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00024E27 F400 0016 14               	dc.b $F4, $0, $0, $16, $14
00024E2C 04                         Map_6d2d_198: 	dc.b $4
00024E2D ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00024E32 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00024E37 FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
00024E3C 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
00024E41 05                         Map_6d2d_1AD: 	dc.b $5
00024E42 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00024E47 EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
00024E4C FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
00024E51 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
00024E56 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
00024E5B 04                         Map_6d2d_1C7: 	dc.b $4
00024E5C EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00024E61 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00024E66 FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
00024E6B 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
00024E70 05                         Map_6d2d_1DC: 	dc.b $5
00024E71 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00024E76 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00024E7B FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
00024E80 FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
00024E85 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
00024E8A 04                         Map_6d2d_1F6: 	dc.b $4
00024E8B F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
00024E90 EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
00024E95 FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
00024E9A 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
00024E9F 02                         Map_6d2d_20B: 	dc.b $2
00024EA0 F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
00024EA5 EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
00024EAA 02                         Map_6d2d_216: 	dc.b $2
00024EAB F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
00024EB0 F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
00024EB5 04                         Map_6d2d_221: 	dc.b $4
00024EB6 F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
00024EBB EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
00024EC0 FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
00024EC5 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
00024ECA 02                         Map_6d2d_236: 	dc.b $2
00024ECB F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
00024ED0 F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
00024ED5 03                         Map_6d2d_241: 	dc.b $3
00024ED6 F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
00024EDB EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
00024EE0 F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
00024EE5 06                         Map_6d2d_251: 	dc.b $6
00024EE6 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00024EEB ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
00024EF0 F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
00024EF5 F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
00024EFA 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
00024EFF FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
00024F04 06                         Map_6d2d_270: 	dc.b $6
00024F05 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00024F0A E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
00024F0F EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
00024F14 F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
00024F19 F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
00024F1E 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
00024F23 04                         Map_6d2d_28F: 	dc.b $4
00024F24 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00024F29 F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
00024F2E EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
00024F33 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00024F38 05                         Map_6d2d_2A4: 	dc.b $5
00024F39 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00024F3E ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
00024F43 F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
00024F48 F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
00024F4D 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
00024F52 04                         Map_6d2d_2BE: 	dc.b $4
00024F53 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00024F58 F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
00024F5D EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
00024F62 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
00024F67 05                         Map_6d2d_2D3: 	dc.b $5
00024F68 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00024F6D EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
00024F72 F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
00024F77 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00024F7C 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
00024F81 02                         Map_6d2d_2ED: 	dc.b $2
00024F82 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00024F87 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00024F8C 02                         Map_6d2d_2F8: 	dc.b $2
00024F8D EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00024F92 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00024F97 02                         Map_6d2d_303: 	dc.b $2
00024F98 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00024F9D FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00024FA2 02                         Map_6d2d_30E: 	dc.b $2
00024FA3 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00024FA8 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00024FAD 04                         Map_6d2d_319: 	dc.b $4
00024FAE EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00024FB3 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00024FB8 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00024FBD FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00024FC2 03                         Map_6d2d_32E: 	dc.b $3
00024FC3 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00024FC8 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00024FCD FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00024FD2 04                         Map_6d2d_33E: 	dc.b $4
00024FD3 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00024FD8 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00024FDD FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00024FE2 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00024FE7 03                         Map_6d2d_353: 	dc.b $3
00024FE8 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00024FED EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00024FF2 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00024FF7 02                         Map_6d2d_363: 	dc.b $2
00024FF8 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00024FFD F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025002 02                         Map_6d2d_36E: 	dc.b $2
00025003 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025008 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002500D 02                         Map_6d2d_379: 	dc.b $2
0002500E F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025013 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025018 02                         Map_6d2d_384: 	dc.b $2
00025019 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002501E F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025023 04                         Map_6d2d_38F: 	dc.b $4
00025024 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00025029 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
0002502E EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00025033 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00025038 02                         Map_6d2d_3A4: 	dc.b $2
00025039 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
0002503E EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00025043 04                         Map_6d2d_3AF: 	dc.b $4
00025044 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00025049 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
0002504E EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00025053 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00025058 02                         Map_6d2d_3C4: 	dc.b $2
00025059 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
0002505E EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00025063 01                         Map_6d2d_3CF: 	dc.b $1
00025064 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025069 01                         Map_6d2d_3D5: 	dc.b $1
0002506A F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002506F 01                         Map_6d2d_3DB: 	dc.b $1
00025070 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025075 01                         Map_6d2d_3E1: 	dc.b $1
00025076 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002507B 01                         Map_6d2d_3E7: 	dc.b $1
0002507C F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025081 02                         Map_6d2d_3ED: 	dc.b $2
00025082 F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
00025087 F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
0002508C 01                         Map_6d2d_3F8: 	dc.b $1
0002508D F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025092 02                         Map_6d2d_3FE: 	dc.b $2
00025093 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
00025098 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
0002509D 01                         Map_6d2d_409: 	dc.b $1
0002509E F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000250A3 02                         Map_6d2d_40F: 	dc.b $2
000250A4 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000250A9 FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
000250AE 04                         Map_6d2d_41A: 	dc.b $4
000250AF ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000250B4 FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
000250B9 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
000250BE 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
000250C3 06                         Map_6d2d_42F: 	dc.b $6
000250C4 F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
000250C9 FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
000250CE 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
000250D3 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
000250D8 FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
000250DD F400 0011 04               	dc.b $F4, $0, $0, $11, $4
000250E2 02                         Map_6d2d_44E: 	dc.b $2
000250E3 040D 0000 E4               	dc.b $4, $D, $0, $0, $E4
000250E8 EC0A 0008 EC               	dc.b $EC, $A, $0, $8, $EC
000250ED 02                         Map_6d2d_459: 	dc.b $2
000250EE 040D 0000 E3               	dc.b $4, $D, $0, $0, $E3
000250F3 EC0A 0008 EB               	dc.b $EC, $A, $0, $8, $EB
000250F8 04                         Map_6d2d_464: 	dc.b $4
000250F9 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
000250FE F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
00025103 0408 000C 03               	dc.b $4, $8, $0, $C, $3
00025108 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
0002510D 02                         Map_6d2d_479: 	dc.b $2
0002510E F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
00025113 F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
00025118 03                         Map_6d2d_484: 	dc.b $3
00025119 F40D 0000 EB               	dc.b $F4, $D, $0, $0, $EB
0002511E FC00 0008 0B               	dc.b $FC, $0, $0, $8, $B
00025123 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
00025128 04                         Map_6d2d_494: 	dc.b $4
00025129 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
0002512E F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
00025133 0408 000C 02               	dc.b $4, $8, $0, $C, $2
00025138 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
0002513D 03                         Map_6d2d_4A9: 	dc.b $3
0002513E E80B 0000 F0               	dc.b $E8, $B, $0, $0, $F0
00025143 0804 000C F8               	dc.b $8, $4, $0, $C, $F8
00025148 1000 000E F8               	dc.b $10, $0, $0, $E, $F8
0002514D 04                         Map_6d2d_4B9: 	dc.b $4
0002514E F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00025153 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00025158 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
0002515D F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00025162 04                         Map_6d2d_4CE: 	dc.b $4
00025163 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00025168 0005 000C 08               	dc.b $0, $5, $0, $C, $8
0002516D F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00025172 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00025177 05                         Map_6d2d_4E3: 	dc.b $5
00025178 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
0002517D F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
00025182 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00025187 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
0002518C 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
00025191 05                         Map_6d2d_4FD: 	dc.b $5
00025192 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00025197 E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
0002519C 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000251A1 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000251A6 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000251AB 02                         Map_6d2d_517: 	dc.b $2
000251AC ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000251B1 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000251B6 03                         Map_6d2d_522: 	dc.b $3
000251B7 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000251BC 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000251C1 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000251C6 02                         Map_6d2d_532: 	dc.b $2
000251C7 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000251CC 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000251D1 03                         Map_6d2d_53D: 	dc.b $3
000251D2 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000251D7 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000251DC 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000251E1 02                         Map_6d2d_54D: 	dc.b $2
000251E2 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000251E7 FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
000251EC 03                         Map_6d2d_558: 	dc.b $3
000251ED EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
000251F2 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
000251F7 E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
000251FC 03                         Map_6d2d_568: 	dc.b $3
000251FD E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025202 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025207 F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
0002520C 05                         Map_6d2d_578: 	dc.b $5
0002520D E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025212 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025217 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
0002521C 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00025221 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00025226 05                         Map_6d2d_592: 	dc.b $5
00025227 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002522C E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025231 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00025236 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
0002523B 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00025240 02                         Map_6d2d_5AC: 	dc.b $2
00025241 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00025246 F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
0002524B 03                         Map_6d2d_5B7: 	dc.b $3
0002524C EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00025251 F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
00025256 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
0002525B 01                         Map_6d2d_5C7: 	dc.b $1
0002525C F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
00025261 01                         Map_6d2d_5CD: 	dc.b $1
00025262 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
00025267 01                         Map_6d2d_5D3: 	dc.b $1
00025268 F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
0002526D 04                         Map_6d2d_5D9: 	dc.b $4
0002526E F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
00025273 F705 0808 04               	dc.b $F7, $5, $8, $8, $4
00025278 0408 080C E5               	dc.b $4, $8, $8, $C, $E5
0002527D 0700 080F 0C               	dc.b $7, $0, $8, $F, $C
00025282 03                         Map_6d2d_5EE: 	dc.b $3
00025283 F40D 0800 F5               	dc.b $F4, $D, $8, $0, $F5
00025288 FC00 0808 ED               	dc.b $FC, $0, $8, $8, $ED
0002528D 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
00025292 03                         Map_6d2d_5FE: 	dc.b $3
00025293 F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
00025298 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0002529D 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
000252A2 03                         Map_6d2d_60E: 	dc.b $3
000252A3 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
000252A8 FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
000252AD 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
000252B2 02                         Map_6d2d_61E: 	dc.b $2
000252B3 F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
000252B8 F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
000252BD 02                         Map_6d2d_629: 	dc.b $2
000252BE F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
000252C3 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
000252C8 03                         Map_6d2d_634: 	dc.b $3
000252C9 ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
000252CE 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
000252D3 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
000252D8 02                         Map_6d2d_644: 	dc.b $2
000252D9 F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
000252DE EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
000252E3 04                         Map_6d2d_64F: 	dc.b $4
000252E4 ED08 0000 F3               	dc.b $ED, $8, $0, $0, $F3
000252E9 F50E 0003 EB               	dc.b $F5, $E, $0, $3, $EB
000252EE F503 000F 0B               	dc.b $F5, $3, $0, $F, $B
000252F3 0D08 0013 F3               	dc.b $D, $8, $0, $13, $F3
000252F8                            	even
000252F8                            	even
000252F8                            
000252F8                            ; ---------------------------------------------------------------------------
000252F8                            ; Uncompressed graphics	loading	array for Sonic
000252F8                            ; ---------------------------------------------------------------------------
000252F8                            SonicDynPLC:
000252F8                            	include "_inc\Sonic dynamic pattern load cues.asm"
000252F8                            DPLC_2d5b:
000252F8 0000                       DPLC_2d5b_0: 	dc.w DPLC_2d5b_B8-DPLC_2d5b
000252FA 0000                       DPLC_2d5b_2: 	dc.w DPLC_2d5b_B9-DPLC_2d5b
000252FC 0000                       DPLC_2d5b_4: 	dc.w DPLC_2d5b_BE-DPLC_2d5b
000252FE 0000                       DPLC_2d5b_6: 	dc.w DPLC_2d5b_C5-DPLC_2d5b
00025300 0000                       DPLC_2d5b_8: 	dc.w DPLC_2d5b_CC-DPLC_2d5b
00025302 0000                       DPLC_2d5b_A: 	dc.w DPLC_2d5b_D3-DPLC_2d5b
00025304 0000                       DPLC_2d5b_C: 	dc.w DPLC_2d5b_DA-DPLC_2d5b
00025306 0000                       DPLC_2d5b_E: 	dc.w DPLC_2d5b_E3-DPLC_2d5b
00025308 0000                       DPLC_2d5b_10: 	dc.w DPLC_2d5b_E8-DPLC_2d5b
0002530A 0000                       DPLC_2d5b_12: 	dc.w DPLC_2d5b_ED-DPLC_2d5b
0002530C 0000                       DPLC_2d5b_14: 	dc.w DPLC_2d5b_F6-DPLC_2d5b
0002530E 0000                       DPLC_2d5b_16: 	dc.w DPLC_2d5b_FB-DPLC_2d5b
00025310 0000                       DPLC_2d5b_18: 	dc.w DPLC_2d5b_102-DPLC_2d5b
00025312 0000                       DPLC_2d5b_1A: 	dc.w DPLC_2d5b_10D-DPLC_2d5b
00025314 0000                       DPLC_2d5b_1C: 	dc.w DPLC_2d5b_11A-DPLC_2d5b
00025316 0000                       DPLC_2d5b_1E: 	dc.w DPLC_2d5b_123-DPLC_2d5b
00025318 0000                       DPLC_2d5b_20: 	dc.w DPLC_2d5b_12E-DPLC_2d5b
0002531A 0000                       DPLC_2d5b_22: 	dc.w DPLC_2d5b_137-DPLC_2d5b
0002531C 0000                       DPLC_2d5b_24: 	dc.w DPLC_2d5b_142-DPLC_2d5b
0002531E 0000                       DPLC_2d5b_26: 	dc.w DPLC_2d5b_14B-DPLC_2d5b
00025320 0000                       DPLC_2d5b_28: 	dc.w DPLC_2d5b_150-DPLC_2d5b
00025322 0000                       DPLC_2d5b_2A: 	dc.w DPLC_2d5b_155-DPLC_2d5b
00025324 0000                       DPLC_2d5b_2C: 	dc.w DPLC_2d5b_15E-DPLC_2d5b
00025326 0000                       DPLC_2d5b_2E: 	dc.w DPLC_2d5b_163-DPLC_2d5b
00025328 0000                       DPLC_2d5b_30: 	dc.w DPLC_2d5b_16A-DPLC_2d5b
0002532A 0000                       DPLC_2d5b_32: 	dc.w DPLC_2d5b_177-DPLC_2d5b
0002532C 0000                       DPLC_2d5b_34: 	dc.w DPLC_2d5b_184-DPLC_2d5b
0002532E 0000                       DPLC_2d5b_36: 	dc.w DPLC_2d5b_18D-DPLC_2d5b
00025330 0000                       DPLC_2d5b_38: 	dc.w DPLC_2d5b_198-DPLC_2d5b
00025332 0000                       DPLC_2d5b_3A: 	dc.w DPLC_2d5b_1A1-DPLC_2d5b
00025334 0000                       DPLC_2d5b_3C: 	dc.w DPLC_2d5b_1AC-DPLC_2d5b
00025336 0000                       DPLC_2d5b_3E: 	dc.w DPLC_2d5b_1B1-DPLC_2d5b
00025338 0000                       DPLC_2d5b_40: 	dc.w DPLC_2d5b_1B6-DPLC_2d5b
0002533A 0000                       DPLC_2d5b_42: 	dc.w DPLC_2d5b_1BB-DPLC_2d5b
0002533C 0000                       DPLC_2d5b_44: 	dc.w DPLC_2d5b_1C0-DPLC_2d5b
0002533E 0000                       DPLC_2d5b_46: 	dc.w DPLC_2d5b_1C9-DPLC_2d5b
00025340 0000                       DPLC_2d5b_48: 	dc.w DPLC_2d5b_1D0-DPLC_2d5b
00025342 0000                       DPLC_2d5b_4A: 	dc.w DPLC_2d5b_1D9-DPLC_2d5b
00025344 0000                       DPLC_2d5b_4C: 	dc.w DPLC_2d5b_1E0-DPLC_2d5b
00025346 0000                       DPLC_2d5b_4E: 	dc.w DPLC_2d5b_1E5-DPLC_2d5b
00025348 0000                       DPLC_2d5b_50: 	dc.w DPLC_2d5b_1EA-DPLC_2d5b
0002534A 0000                       DPLC_2d5b_52: 	dc.w DPLC_2d5b_1EF-DPLC_2d5b
0002534C 0000                       DPLC_2d5b_54: 	dc.w DPLC_2d5b_1F4-DPLC_2d5b
0002534E 0000                       DPLC_2d5b_56: 	dc.w DPLC_2d5b_1FD-DPLC_2d5b
00025350 0000                       DPLC_2d5b_58: 	dc.w DPLC_2d5b_202-DPLC_2d5b
00025352 0000                       DPLC_2d5b_5A: 	dc.w DPLC_2d5b_20B-DPLC_2d5b
00025354 0000                       DPLC_2d5b_5C: 	dc.w DPLC_2d5b_210-DPLC_2d5b
00025356 0000                       DPLC_2d5b_5E: 	dc.w DPLC_2d5b_213-DPLC_2d5b
00025358 0000                       DPLC_2d5b_60: 	dc.w DPLC_2d5b_216-DPLC_2d5b
0002535A 0000                       DPLC_2d5b_62: 	dc.w DPLC_2d5b_219-DPLC_2d5b
0002535C 0000                       DPLC_2d5b_64: 	dc.w DPLC_2d5b_21C-DPLC_2d5b
0002535E 0000                       DPLC_2d5b_66: 	dc.w DPLC_2d5b_21F-DPLC_2d5b
00025360 0000                       DPLC_2d5b_68: 	dc.w DPLC_2d5b_224-DPLC_2d5b
00025362 0000                       DPLC_2d5b_6A: 	dc.w DPLC_2d5b_227-DPLC_2d5b
00025364 0000                       DPLC_2d5b_6C: 	dc.w DPLC_2d5b_22C-DPLC_2d5b
00025366 0000                       DPLC_2d5b_6E: 	dc.w DPLC_2d5b_22F-DPLC_2d5b
00025368 0000                       DPLC_2d5b_70: 	dc.w DPLC_2d5b_234-DPLC_2d5b
0002536A 0000                       DPLC_2d5b_72: 	dc.w DPLC_2d5b_23D-DPLC_2d5b
0002536C 0000                       DPLC_2d5b_74: 	dc.w DPLC_2d5b_242-DPLC_2d5b
0002536E 0000                       DPLC_2d5b_76: 	dc.w DPLC_2d5b_247-DPLC_2d5b
00025370 0000                       DPLC_2d5b_78: 	dc.w DPLC_2d5b_24C-DPLC_2d5b
00025372 0000                       DPLC_2d5b_7A: 	dc.w DPLC_2d5b_251-DPLC_2d5b
00025374 0000                       DPLC_2d5b_7C: 	dc.w DPLC_2d5b_254-DPLC_2d5b
00025376 0000                       DPLC_2d5b_7E: 	dc.w DPLC_2d5b_25B-DPLC_2d5b
00025378 0000                       DPLC_2d5b_80: 	dc.w DPLC_2d5b_260-DPLC_2d5b
0002537A 0000                       DPLC_2d5b_82: 	dc.w DPLC_2d5b_267-DPLC_2d5b
0002537C 0000                       DPLC_2d5b_84: 	dc.w DPLC_2d5b_270-DPLC_2d5b
0002537E 0000                       DPLC_2d5b_86: 	dc.w DPLC_2d5b_279-DPLC_2d5b
00025380 0000                       DPLC_2d5b_88: 	dc.w DPLC_2d5b_284-DPLC_2d5b
00025382 0000                       DPLC_2d5b_8A: 	dc.w DPLC_2d5b_28F-DPLC_2d5b
00025384 0000                       DPLC_2d5b_8C: 	dc.w DPLC_2d5b_294-DPLC_2d5b
00025386 0000                       DPLC_2d5b_8E: 	dc.w DPLC_2d5b_29B-DPLC_2d5b
00025388 0000                       DPLC_2d5b_90: 	dc.w DPLC_2d5b_2A0-DPLC_2d5b
0002538A 0000                       DPLC_2d5b_92: 	dc.w DPLC_2d5b_2A7-DPLC_2d5b
0002538C 0000                       DPLC_2d5b_94: 	dc.w DPLC_2d5b_2AC-DPLC_2d5b
0002538E 0000                       DPLC_2d5b_96: 	dc.w DPLC_2d5b_2B3-DPLC_2d5b
00025390 0000                       DPLC_2d5b_98: 	dc.w DPLC_2d5b_2BA-DPLC_2d5b
00025392 0000                       DPLC_2d5b_9A: 	dc.w DPLC_2d5b_2C5-DPLC_2d5b
00025394 0000                       DPLC_2d5b_9C: 	dc.w DPLC_2d5b_2D0-DPLC_2d5b
00025396 0000                       DPLC_2d5b_9E: 	dc.w DPLC_2d5b_2D5-DPLC_2d5b
00025398 0000                       DPLC_2d5b_A0: 	dc.w DPLC_2d5b_2DC-DPLC_2d5b
0002539A 0000                       DPLC_2d5b_A2: 	dc.w DPLC_2d5b_2DF-DPLC_2d5b
0002539C 0000                       DPLC_2d5b_A4: 	dc.w DPLC_2d5b_2E2-DPLC_2d5b
0002539E 0000                       DPLC_2d5b_A6: 	dc.w DPLC_2d5b_2E5-DPLC_2d5b
000253A0 0000                       DPLC_2d5b_A8: 	dc.w DPLC_2d5b_2EA-DPLC_2d5b
000253A2 0000                       DPLC_2d5b_AA: 	dc.w DPLC_2d5b_2F1-DPLC_2d5b
000253A4 0000                       DPLC_2d5b_AC: 	dc.w DPLC_2d5b_2F8-DPLC_2d5b
000253A6 0000                       DPLC_2d5b_AE: 	dc.w DPLC_2d5b_2FF-DPLC_2d5b
000253A8 0000                       DPLC_2d5b_B0: 	dc.w DPLC_2d5b_304-DPLC_2d5b
000253AA 0000                       DPLC_2d5b_B2: 	dc.w DPLC_2d5b_309-DPLC_2d5b
000253AC 0000                       DPLC_2d5b_B4: 	dc.w DPLC_2d5b_30E-DPLC_2d5b
000253AE 0000                       DPLC_2d5b_B6: 	dc.w DPLC_2d5b_313-DPLC_2d5b
000253B0 00                         DPLC_2d5b_B8: 	dc.b $0
000253B1 02                         DPLC_2d5b_B9: 	dc.b $2
000253B2 F000                       	dc.b $F0, $0
000253B4 1010                       	dc.b $10, $10
000253B6 03                         DPLC_2d5b_BE: 	dc.b $3
000253B7 5012                       	dc.b $50, $12
000253B9 5018                       	dc.b $50, $18
000253BB 201E                       	dc.b $20, $1E
000253BD 03                         DPLC_2d5b_C5: 	dc.b $3
000253BE 5021                       	dc.b $50, $21
000253C0 5018                       	dc.b $50, $18
000253C2 201E                       	dc.b $20, $1E
000253C4 03                         DPLC_2d5b_CC: 	dc.b $3
000253C5 5021                       	dc.b $50, $21
000253C7 5018                       	dc.b $50, $18
000253C9 2027                       	dc.b $20, $27
000253CB 03                         DPLC_2d5b_D3: 	dc.b $3
000253CC 802A                       	dc.b $80, $2A
000253CE 2033                       	dc.b $20, $33
000253D0 2036                       	dc.b $20, $36
000253D2 04                         DPLC_2d5b_DA: 	dc.b $4
000253D3 7039                       	dc.b $70, $39
000253D5 5041                       	dc.b $50, $41
000253D7 5047                       	dc.b $50, $47
000253D9 104D                       	dc.b $10, $4D
000253DB 02                         DPLC_2d5b_E3: 	dc.b $2
000253DC 7039                       	dc.b $70, $39
000253DE B04F                       	dc.b $B0, $4F
000253E0 02                         DPLC_2d5b_E8: 	dc.b $2
000253E1 505B                       	dc.b $50, $5B
000253E3 8061                       	dc.b $80, $61
000253E5 04                         DPLC_2d5b_ED: 	dc.b $4
000253E6 505B                       	dc.b $50, $5B
000253E8 506A                       	dc.b $50, $6A
000253EA 5070                       	dc.b $50, $70
000253EC 1076                       	dc.b $10, $76
000253EE 02                         DPLC_2d5b_F6: 	dc.b $2
000253EF F4F0                       	dc.b $F4, $F0
000253F1 1500                       	dc.b $15, $0
000253F3 03                         DPLC_2d5b_FB: 	dc.b $3
000253F4 7039                       	dc.b $70, $39
000253F6 3078                       	dc.b $30, $78
000253F8 507C                       	dc.b $50, $7C
000253FA 05                         DPLC_2d5b_102: 	dc.b $5
000253FB 5082                       	dc.b $50, $82
000253FD 5088                       	dc.b $50, $88
000253FF 208E                       	dc.b $20, $8E
00025401 5091                       	dc.b $50, $91
00025403 0097                       	dc.b $0, $97
00025405 06                         DPLC_2d5b_10D: 	dc.b $6
00025406 5082                       	dc.b $50, $82
00025408 1098                       	dc.b $10, $98
0002540A 309A                       	dc.b $30, $9A
0002540C 509E                       	dc.b $50, $9E
0002540E 30A4                       	dc.b $30, $A4
00025410 00A8                       	dc.b $0, $A8
00025412 04                         DPLC_2d5b_11A: 	dc.b $4
00025413 50A9                       	dc.b $50, $A9
00025415 10AF                       	dc.b $10, $AF
00025417 70B1                       	dc.b $70, $B1
00025419 20B9                       	dc.b $20, $B9
0002541B 05                         DPLC_2d5b_123: 	dc.b $5
0002541C 50BC                       	dc.b $50, $BC
0002541E 30C2                       	dc.b $30, $C2
00025420 70C6                       	dc.b $70, $C6
00025422 20CE                       	dc.b $20, $CE
00025424 10D1                       	dc.b $10, $D1
00025426 04                         DPLC_2d5b_12E: 	dc.b $4
00025427 50BC                       	dc.b $50, $BC
00025429 10D3                       	dc.b $10, $D3
0002542B 70D5                       	dc.b $70, $D5
0002542D 20DD                       	dc.b $20, $DD
0002542F 05                         DPLC_2d5b_137: 	dc.b $5
00025430 5082                       	dc.b $50, $82
00025432 1098                       	dc.b $10, $98
00025434 008E                       	dc.b $0, $8E
00025436 70E0                       	dc.b $70, $E0
00025438 20E8                       	dc.b $20, $E8
0002543A 04                         DPLC_2d5b_142: 	dc.b $4
0002543B 70EB                       	dc.b $70, $EB
0002543D 50F3                       	dc.b $50, $F3
0002543F 10F9                       	dc.b $10, $F9
00025441 50FB                       	dc.b $50, $FB
00025443 02                         DPLC_2d5b_14B: 	dc.b $2
00025444 70EB                       	dc.b $70, $EB
00025446 B101                       	dc.b $B1, $1
00025448 02                         DPLC_2d5b_150: 	dc.b $2
00025449 510D                       	dc.b $51, $D
0002544B 8113                       	dc.b $81, $13
0002544D 04                         DPLC_2d5b_155: 	dc.b $4
0002544E 510D                       	dc.b $51, $D
00025450 511C                       	dc.b $51, $1C
00025452 1122                       	dc.b $11, $22
00025454 5124                       	dc.b $51, $24
00025456 02                         DPLC_2d5b_15E: 	dc.b $2
00025457 510D                       	dc.b $51, $D
00025459 B12A                       	dc.b $B1, $2A
0002545B 03                         DPLC_2d5b_163: 	dc.b $3
0002545C 70EB                       	dc.b $70, $EB
0002545E 0101                       	dc.b $1, $1
00025460 8136                       	dc.b $81, $36
00025462 06                         DPLC_2d5b_16A: 	dc.b $6
00025463 513F                       	dc.b $51, $3F
00025465 1145                       	dc.b $11, $45
00025467 1147                       	dc.b $11, $47
00025469 8149                       	dc.b $81, $49
0002546B 0152                       	dc.b $1, $52
0002546D 0153                       	dc.b $1, $53
0002546F 06                         DPLC_2d5b_177: 	dc.b $6
00025470 513F                       	dc.b $51, $3F
00025472 2154                       	dc.b $21, $54
00025474 1157                       	dc.b $11, $57
00025476 1159                       	dc.b $11, $59
00025478 815B                       	dc.b $81, $5B
0002547A 0152                       	dc.b $1, $52
0002547C 04                         DPLC_2d5b_184: 	dc.b $4
0002547D 5164                       	dc.b $51, $64
0002547F 116A                       	dc.b $11, $6A
00025481 816C                       	dc.b $81, $6C
00025483 1175                       	dc.b $11, $75
00025485 05                         DPLC_2d5b_18D: 	dc.b $5
00025486 5177                       	dc.b $51, $77
00025488 217D                       	dc.b $21, $7D
0002548A 1180                       	dc.b $11, $80
0002548C 7182                       	dc.b $71, $82
0002548E 218A                       	dc.b $21, $8A
00025490 04                         DPLC_2d5b_198: 	dc.b $4
00025491 5177                       	dc.b $51, $77
00025493 118D                       	dc.b $11, $8D
00025495 818F                       	dc.b $81, $8F
00025497 1198                       	dc.b $11, $98
00025499 05                         DPLC_2d5b_1A1: 	dc.b $5
0002549A 513F                       	dc.b $51, $3F
0002549C 819A                       	dc.b $81, $9A
0002549E 1159                       	dc.b $11, $59
000254A0 11A3                       	dc.b $11, $A3
000254A2 0152                       	dc.b $1, $52
000254A4 02                         DPLC_2d5b_1AC: 	dc.b $2
000254A5 51A5                       	dc.b $51, $A5
000254A7 B1AB                       	dc.b $B1, $AB
000254A9 02                         DPLC_2d5b_1B1: 	dc.b $2
000254AA 505B                       	dc.b $50, $5B
000254AC B1B7                       	dc.b $B1, $B7
000254AE 02                         DPLC_2d5b_1B6: 	dc.b $2
000254AF 51A5                       	dc.b $51, $A5
000254B1 B1C3                       	dc.b $B1, $C3
000254B3 02                         DPLC_2d5b_1BB: 	dc.b $2
000254B4 505B                       	dc.b $50, $5B
000254B6 B1CF                       	dc.b $B1, $CF
000254B8 04                         DPLC_2d5b_1C0: 	dc.b $4
000254B9 51DB                       	dc.b $51, $DB
000254BB 11E1                       	dc.b $11, $E1
000254BD B1E3                       	dc.b $B1, $E3
000254BF 01EF                       	dc.b $1, $EF
000254C1 03                         DPLC_2d5b_1C9: 	dc.b $3
000254C2 51F0                       	dc.b $51, $F0
000254C4 11F6                       	dc.b $11, $F6
000254C6 B1F8                       	dc.b $B1, $F8
000254C8 04                         DPLC_2d5b_1D0: 	dc.b $4
000254C9 51DB                       	dc.b $51, $DB
000254CB 1204                       	dc.b $12, $4
000254CD B206                       	dc.b $B2, $6
000254CF 01EF                       	dc.b $1, $EF
000254D1 03                         DPLC_2d5b_1D9: 	dc.b $3
000254D2 51F0                       	dc.b $51, $F0
000254D4 11F6                       	dc.b $11, $F6
000254D6 B212                       	dc.b $B2, $12
000254D8 02                         DPLC_2d5b_1E0: 	dc.b $2
000254D9 521E                       	dc.b $52, $1E
000254DB B224                       	dc.b $B2, $24
000254DD 02                         DPLC_2d5b_1E5: 	dc.b $2
000254DE 510D                       	dc.b $51, $D
000254E0 B230                       	dc.b $B2, $30
000254E2 02                         DPLC_2d5b_1EA: 	dc.b $2
000254E3 521E                       	dc.b $52, $1E
000254E5 B23C                       	dc.b $B2, $3C
000254E7 02                         DPLC_2d5b_1EF: 	dc.b $2
000254E8 510D                       	dc.b $51, $D
000254EA B248                       	dc.b $B2, $48
000254EC 04                         DPLC_2d5b_1F4: 	dc.b $4
000254ED 5254                       	dc.b $52, $54
000254EF 125A                       	dc.b $12, $5A
000254F1 B25C                       	dc.b $B2, $5C
000254F3 0268                       	dc.b $2, $68
000254F5 02                         DPLC_2d5b_1FD: 	dc.b $2
000254F6 7269                       	dc.b $72, $69
000254F8 B271                       	dc.b $B2, $71
000254FA 04                         DPLC_2d5b_202: 	dc.b $4
000254FB 5254                       	dc.b $52, $54
000254FD 127D                       	dc.b $12, $7D
000254FF B27F                       	dc.b $B2, $7F
00025501 0268                       	dc.b $2, $68
00025503 02                         DPLC_2d5b_20B: 	dc.b $2
00025504 7269                       	dc.b $72, $69
00025506 B28B                       	dc.b $B2, $8B
00025508 01                         DPLC_2d5b_210: 	dc.b $1
00025509 F297                       	dc.b $F2, $97
0002550B 01                         DPLC_2d5b_213: 	dc.b $1
0002550C F2A7                       	dc.b $F2, $A7
0002550E 01                         DPLC_2d5b_216: 	dc.b $1
0002550F F2B7                       	dc.b $F2, $B7
00025511 01                         DPLC_2d5b_219: 	dc.b $1
00025512 F2C7                       	dc.b $F2, $C7
00025514 01                         DPLC_2d5b_21C: 	dc.b $1
00025515 F2D7                       	dc.b $F2, $D7
00025517 02                         DPLC_2d5b_21F: 	dc.b $2
00025518 B2E7                       	dc.b $B2, $E7
0002551A 22F3                       	dc.b $22, $F3
0002551C 01                         DPLC_2d5b_224: 	dc.b $1
0002551D F2F6                       	dc.b $F2, $F6
0002551F 02                         DPLC_2d5b_227: 	dc.b $2
00025520 B306                       	dc.b $B3, $6
00025522 2312                       	dc.b $23, $12
00025524 01                         DPLC_2d5b_22C: 	dc.b $1
00025525 F315                       	dc.b $F3, $15
00025527 02                         DPLC_2d5b_22F: 	dc.b $2
00025528 5325                       	dc.b $53, $25
0002552A B32B                       	dc.b $B3, $2B
0002552C 04                         DPLC_2d5b_234: 	dc.b $4
0002552D 5337                       	dc.b $53, $37
0002552F 733D                       	dc.b $73, $3D
00025531 1345                       	dc.b $13, $45
00025533 0347                       	dc.b $3, $47
00025535 02                         DPLC_2d5b_23D: 	dc.b $2
00025536 D348                       	dc.b $D3, $48
00025538 34EC                       	dc.b $34, $EC
0002553A 02                         DPLC_2d5b_242: 	dc.b $2
0002553B F528                       	dc.b $F5, $28
0002553D 0538                       	dc.b $5, $38
0002553F 02                         DPLC_2d5b_247: 	dc.b $2
00025540 F539                       	dc.b $F5, $39
00025542 0549                       	dc.b $5, $49
00025544 02                         DPLC_2d5b_24C: 	dc.b $2
00025545 E356                       	dc.b $E3, $56
00025547 054A                       	dc.b $5, $4A
00025549 01                         DPLC_2d5b_251: 	dc.b $1
0002554A 8365                       	dc.b $83, $65
0002554C 03                         DPLC_2d5b_254: 	dc.b $3
0002554D 736E                       	dc.b $73, $6E
0002554F 0376                       	dc.b $3, $76
00025551 3377                       	dc.b $33, $77
00025553 02                         DPLC_2d5b_25B: 	dc.b $2
00025554 E37B                       	dc.b $E3, $7B
00025556 054A                       	dc.b $5, $4A
00025558 03                         DPLC_2d5b_260: 	dc.b $3
00025559 B38A                       	dc.b $B3, $8A
0002555B 1396                       	dc.b $13, $96
0002555D 0398                       	dc.b $3, $98
0002555F 04                         DPLC_2d5b_267: 	dc.b $4
00025560 B399                       	dc.b $B3, $99
00025562 33A5                       	dc.b $33, $A5
00025564 03A9                       	dc.b $3, $A9
00025566 03AA                       	dc.b $3, $AA
00025568 04                         DPLC_2d5b_270: 	dc.b $4
00025569 B3AB                       	dc.b $B3, $AB
0002556B 33B7                       	dc.b $33, $B7
0002556D 03BB                       	dc.b $3, $BB
0002556F 03BC                       	dc.b $3, $BC
00025571 05                         DPLC_2d5b_279: 	dc.b $5
00025572 83BD                       	dc.b $83, $BD
00025574 13C6                       	dc.b $13, $C6
00025576 53C8                       	dc.b $53, $C8
00025578 13CE                       	dc.b $13, $CE
0002557A 03D0                       	dc.b $3, $D0
0002557C 05                         DPLC_2d5b_284: 	dc.b $5
0002557D 83D1                       	dc.b $83, $D1
0002557F 13DA                       	dc.b $13, $DA
00025581 53C8                       	dc.b $53, $C8
00025583 13CE                       	dc.b $13, $CE
00025585 03D0                       	dc.b $3, $D0
00025587 02                         DPLC_2d5b_28F: 	dc.b $2
00025588 83DC                       	dc.b $83, $DC
0002558A 73E5                       	dc.b $73, $E5
0002558C 03                         DPLC_2d5b_294: 	dc.b $3
0002558D 83ED                       	dc.b $83, $ED
0002558F 23F6                       	dc.b $23, $F6
00025591 13F9                       	dc.b $13, $F9
00025593 02                         DPLC_2d5b_29B: 	dc.b $2
00025594 83FB                       	dc.b $83, $FB
00025596 7404                       	dc.b $74, $4
00025598 03                         DPLC_2d5b_2A0: 	dc.b $3
00025599 83ED                       	dc.b $83, $ED
0002559B 240C                       	dc.b $24, $C
0002559D 140F                       	dc.b $14, $F
0002559F 02                         DPLC_2d5b_2A7: 	dc.b $2
000255A0 5411                       	dc.b $54, $11
000255A2 B417                       	dc.b $B4, $17
000255A4 03                         DPLC_2d5b_2AC: 	dc.b $3
000255A5 8423                       	dc.b $84, $23
000255A7 342C                       	dc.b $34, $2C
000255A9 0430                       	dc.b $4, $30
000255AB 03                         DPLC_2d5b_2B3: 	dc.b $3
000255AC 7431                       	dc.b $74, $31
000255AE 1439                       	dc.b $14, $39
000255B0 B43B                       	dc.b $B4, $3B
000255B2 05                         DPLC_2d5b_2BA: 	dc.b $5
000255B3 7447                       	dc.b $74, $47
000255B5 144F                       	dc.b $14, $4F
000255B7 5451                       	dc.b $54, $51
000255B9 3457                       	dc.b $34, $57
000255BB 045B                       	dc.b $4, $5B
000255BD 05                         DPLC_2d5b_2C5: 	dc.b $5
000255BE 745C                       	dc.b $74, $5C
000255C0 144F                       	dc.b $14, $4F
000255C2 5464                       	dc.b $54, $64
000255C4 3457                       	dc.b $34, $57
000255C6 045B                       	dc.b $4, $5B
000255C8 02                         DPLC_2d5b_2D0: 	dc.b $2
000255C9 246A                       	dc.b $24, $6A
000255CB F46D                       	dc.b $F4, $6D
000255CD 03                         DPLC_2d5b_2D5: 	dc.b $3
000255CE 247D                       	dc.b $24, $7D
000255D0 B480                       	dc.b $B4, $80
000255D2 248C                       	dc.b $24, $8C
000255D4 01                         DPLC_2d5b_2DC: 	dc.b $1
000255D5 B48F                       	dc.b $B4, $8F
000255D7 01                         DPLC_2d5b_2DF: 	dc.b $1
000255D8 549B                       	dc.b $54, $9B
000255DA 01                         DPLC_2d5b_2E2: 	dc.b $1
000255DB 14A1                       	dc.b $14, $A1
000255DD 02                         DPLC_2d5b_2E5: 	dc.b $2
000255DE E356                       	dc.b $E3, $56
000255E0 054A                       	dc.b $5, $4A
000255E2 03                         DPLC_2d5b_2EA: 	dc.b $3
000255E3 736E                       	dc.b $73, $6E
000255E5 0376                       	dc.b $3, $76
000255E7 3377                       	dc.b $33, $77
000255E9 03                         DPLC_2d5b_2F1: 	dc.b $3
000255EA B4A3                       	dc.b $B4, $A3
000255EC 14AF                       	dc.b $14, $AF
000255EE 34B1                       	dc.b $34, $B1
000255F0 03                         DPLC_2d5b_2F8: 	dc.b $3
000255F1 54B5                       	dc.b $54, $B5
000255F3 B4BB                       	dc.b $B4, $BB
000255F5 1074                       	dc.b $10, $74
000255F7 02                         DPLC_2d5b_2FF: 	dc.b $2
000255F8 F4C7                       	dc.b $F4, $C7
000255FA 24D7                       	dc.b $24, $D7
000255FC 02                         DPLC_2d5b_304: 	dc.b $2
000255FD F4DA                       	dc.b $F4, $DA
000255FF 14EA                       	dc.b $14, $EA
00025601 02                         DPLC_2d5b_309: 	dc.b $2
00025602 F502                       	dc.b $F5, $2
00025604 2512                       	dc.b $25, $12
00025606 02                         DPLC_2d5b_30E: 	dc.b $2
00025607 F515                       	dc.b $F5, $15
00025609 2525                       	dc.b $25, $25
0002560B 02                         DPLC_2d5b_313: 	dc.b $2
0002560C F54B                       	dc.b $F5, $4B
0002560E 755B                       	dc.b $75, $5B
00025610                            	even
00025610                            	even
00025610                            
00025610                            ; ---------------------------------------------------------------------------
00025610                            ; Uncompressed graphics	- Sonic
00025610                            ; ---------------------------------------------------------------------------
00025610                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
00030230                            		even
00030230                            ; ---------------------------------------------------------------------------
00030230                            ; Compressed graphics - various
00030230                            ; ---------------------------------------------------------------------------
00030230                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
00030334                            		even
00030334                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0003036E                            		even
0003036E                            Nem_Shield:	incbin	artnem\shield.bin	; shield
00030504                            		even
00030504                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
0003064C                            		even
0003064C                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
00030756                            		even
00030756                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
000307A8                            		even
000307A8                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
000309F0                            		even
000309F0                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
00030B76                            		even
00030B76                            ; ---------------------------------------------------------------------------
00030B76                            ; Sprite mappings - walls of the special stage
00030B76                            ; ---------------------------------------------------------------------------
00030B76                            Map_SSWalls:
00030B76                            	include "_maps\SSwalls.asm"
00030B76                            ; ---------------------------------------------------------------------------
00030B76                            ; Sprite mappings - walls of the special stage
00030B76                            ; ---------------------------------------------------------------------------
00030B76 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
00030B7A 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
00030B7E 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
00030B82 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
00030B86 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
00030B8A 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
00030B8E 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
00030B92 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
00030B96 01                         byte_2C584:	dc.b 1
00030B97 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00030B9C 01                         byte_2C58A:	dc.b 1
00030B9D F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
00030BA2 01                         byte_2C590:	dc.b 1
00030BA3 F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
00030BA8 01                         byte_2C596:	dc.b 1
00030BA9 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
00030BAE 01                         byte_2C59C:	dc.b 1
00030BAF F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
00030BB4 01                         byte_2C5A2:	dc.b 1
00030BB5 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
00030BBA 01                         byte_2C5A8:	dc.b 1
00030BBB F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
00030BC0 01                         byte_2C5AE:	dc.b 1
00030BC1 F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
00030BC6 01                         byte_2C5B4:	dc.b 1
00030BC7 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
00030BCC 01                         byte_2C5BA:	dc.b 1
00030BCD F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
00030BD2 01                         byte_2C5C0:	dc.b 1
00030BD3 F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
00030BD8 01                         byte_2C5C6:	dc.b 1
00030BD9 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
00030BDE 01                         byte_2C5CC:	dc.b 1
00030BDF F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
00030BE4 01                         byte_2C5D2:	dc.b 1
00030BE5 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
00030BEA 01                         byte_2C5D8:	dc.b 1
00030BEB F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
00030BF0 01                         byte_2C5DE:	dc.b 1
00030BF1 F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
00030BF6                            		even
00030BF6                            		even
00030BF6                            ; ---------------------------------------------------------------------------
00030BF6                            ; Compressed graphics - special stage
00030BF6                            ; ---------------------------------------------------------------------------
00030BF6                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
0003152E                            		even
0003152E                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
0003167C                            		even
0003167C                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
00032B0E                            		even
00032B0E                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
00032E0E                            		even
00032E0E                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
00033302                            		even
00033302                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
000333F0                            		even
000333F0                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
000334C0                            		even
000334C0                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
000335B6                            		even
000335B6                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00033614                            		even
00033614                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
000336A6                            		even
000336A6                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00033768                            		even
00033768                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00033836                            		even
00033836                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00033902                            		even
00033902                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
000339CA                            		even
000339CA                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00033A94                            		even
00033A94                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00033B64                            		even
00033B64                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00033D58                            		even
00033D58                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00033EC0                            		even
00033EC0                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
00033F70                            		even
00033F70                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
0003404A                            		even
0003404A                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
000340CE                            		even
000340CE                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
0003424C                            		even
0003424C                            ; ---------------------------------------------------------------------------
0003424C                            ; Compressed graphics - GHZ stuff
0003424C                            ; ---------------------------------------------------------------------------
0003424C                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00034296                            		even
00034296                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
000343B0                            		even
000343B0                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
0003449C                            		even
0003449C                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
000344E4                            		even
000344E4                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00034682                            		even
00034682                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
000346FE                            		even
000346FE                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00034912                            		even
00034912                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00034A3E                            		even
00034A3E                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00034B6C                            		even
00034B6C                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00034C0A                            		even
00034C0A                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00034C6A                            		even
00034C6A                            ; ---------------------------------------------------------------------------
00034C6A                            ; Compressed graphics - LZ stuff
00034C6A                            ; ---------------------------------------------------------------------------
00034C6A                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00034D8E                            		even
00034D8E                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00035582                            		even
00035582                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00035702                            		even
00035702                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
0003586C                            		even
0003586C                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
00035EC2                            		even
00035EC2                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00035F78                            		even
00035F78                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
0003601A                            		even
0003601A                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00036176                            		even
00036176                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
000361DA                            		even
000361DA                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
0003632C                            		even
0003632C                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
0003680E                            		even
0003680E                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
0003697E                            		even
0003697E                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00036C36                            		even
00036C36                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00036D6E                            		even
00036D6E                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00036E98                            		even
00036E98                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00036FA8                            		even
00036FA8                            ; ---------------------------------------------------------------------------
00036FA8                            ; Compressed graphics - MZ stuff
00036FA8                            ; ---------------------------------------------------------------------------
00036FA8                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00037236                            		even
00037236                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
000372F4                            		even
000372F4                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
000373AC                            		even
000373AC                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00037400                            		even
00037400                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
000376D2 00                         		even
000376D2                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
00037FE8                            		even
00037FE8                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
0003814C                            		even
0003814C                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
000381D4                            		even
000381D4                            ; ---------------------------------------------------------------------------
000381D4                            ; Compressed graphics - SLZ stuff
000381D4                            ; ---------------------------------------------------------------------------
000381D4                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
00038410                            		even
00038410                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00038556                            		even
00038556                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
0003879A                            		even
0003879A                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
000387FC                            		even
000387FC                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
000388DE                            		even
000388DE                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00038AC0                            		even
00038AC0                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00038BCC                            		even
00038BCC                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00038C70                            		even
00038C70                            ; ---------------------------------------------------------------------------
00038C70                            ; Compressed graphics - SYZ stuff
00038C70                            ; ---------------------------------------------------------------------------
00038C70                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
00038DDA                            		even
00038DDA                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00038E3C                            		even
00038E3C                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
00038F1E                            		even
00038F1E                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
000391AC                            		even
000391AC                            ; ---------------------------------------------------------------------------
000391AC                            ; Compressed graphics - SBZ stuff
000391AC                            ; ---------------------------------------------------------------------------
000391AC                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
00039200                            		even
00039200                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
0003949C                            		even
0003949C                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
000396A0                            		even
000396A0                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
0003983E                            		even
0003983E                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00039B6E                            		even
00039B6E                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
00039D4C                            		even
00039D4C                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
00039DA4                            		even
00039DA4                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
00039F6E 00                         		even
00039F6E                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003A06C                            		even
0003A06C                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0003A1F8                            		even
0003A1F8                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003A248                            		even
0003A248                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003A2A0                            		even
0003A2A0                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003A39C                            		even
0003A39C                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003A4B2                            		even
0003A4B2                            ; ---------------------------------------------------------------------------
0003A4B2                            ; Compressed graphics - enemies
0003A4B2                            ; ---------------------------------------------------------------------------
0003A4B2                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003A872                            		even
0003A872                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003AA1C 00                         		even
0003AA1C                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003ADDE 00                         		even
0003ADDE                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003AFC6                            		even
0003AFC6                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003B17E 00                         		even
0003B17E                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003B3E6                            		even
0003B3E6                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003B670                            		even
0003B670                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003BC94                            		even
0003BC94                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003BE8A                            		even
0003BE8A                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003C4A8                            		even
0003C4A8                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003C890                            		even
0003C890                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003CB8C                            		even
0003CB8C                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003CDD4                            		even
0003CDD4                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003D06C                            		even
0003D06C                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003D24A                            		even
0003D24A                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003D3D8                            		even
0003D3D8                            ; ---------------------------------------------------------------------------
0003D3D8                            ; Compressed graphics - various
0003D3D8                            ; ---------------------------------------------------------------------------
0003D3D8                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003D9E6                            		even
0003D9E6                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003DADC                            		even
0003DADC                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003DBE2                            		even
0003DBE2                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003DCD6                            		even
0003DCD6                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003E21A                            		even
0003E21A                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003E880                            		even
0003E880                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003E930                            		even
0003E930                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003EAC2                            		even
0003EAC2                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003EBC4                            		even
0003EBC4                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003ECA0                            		even
0003ECA0                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003F11C                            		even
0003F11C                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003F1DC                            		even
0003F1DC                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003F350                            		even
0003F350                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003F652                            		even
0003F652                            ; ---------------------------------------------------------------------------
0003F652                            ; Compressed graphics - continue screen
0003F652                            ; ---------------------------------------------------------------------------
0003F652                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003F902                            		even
0003F902                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003FB3C                            		even
0003FB3C                            ; ---------------------------------------------------------------------------
0003FB3C                            ; Compressed graphics - animals
0003FB3C                            ; ---------------------------------------------------------------------------
0003FB3C                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003FC94                            		even
0003FC94                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0003FDF0                            		even
0003FDF0                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0003FF6C                            		even
0003FF6C                            Nem_Seal:	incbin	artnem\seal.bin		; seal
00040088                            		even
00040088                            Nem_Pig:	incbin	artnem\pig.bin		; pig
000401BE                            		even
000401BE                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
000402F8                            		even
000402F8                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
00040454                            		even
00040454                            ; ---------------------------------------------------------------------------
00040454                            ; Compressed graphics - primary patterns and block mappings
00040454                            ; ---------------------------------------------------------------------------
00040454                            Blk16_GHZ:	incbin	map16\ghz.bin
00040D68                            		even
00040D68                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
00042676                            		even
00042676                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
000439F6                            		even
000439F6                            Blk256_GHZ:	incbin	map256\ghz.bin
00045CF4                            		even
00045CF4                            Blk16_LZ:	incbin	map16\lz.bin
0004642E                            		even
0004642E                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00048830                            		even
00048830                            Blk256_LZ:	incbin	map256\lz.bin
0004B1B0                            		even
0004B1B0                            Blk16_MZ:	incbin	map16\mz.bin
0004B90C                            		even
0004B90C                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004E194                            		even
0004E194                            Blk256_MZ:	incbin	map256\mz.bin
0004F918                            		even
0004F918                            Blk16_SLZ:	incbin	map16\slz.bin
0004FFE2                            		even
0004FFE2                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
00051F36                            		even
00051F36                            Blk256_SLZ:	incbin	map256\slz.bin
000525B0                            		even
000525B0                            Blk16_SYZ:	incbin	map16\syz.bin
000531D6                            		even
000531D6                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
00057768                            		even
00057768                            Blk256_SYZ:	incbin	map256\syz.bin
000597C4                            		even
000597C4                            Blk16_SBZ:	incbin	map16\sbz.bin
0005A70C                            		even
0005A70C                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005D0D0                            		even
0005D0D0                            Blk256_SBZ:	incbin	map256\sbz.bin
0005FBC6                            		even
0005FBC6                            ; ---------------------------------------------------------------------------
0005FBC6                            ; Compressed graphics - bosses and ending sequence
0005FBC6                            ; ---------------------------------------------------------------------------
0005FBC6                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
000603E0 00                         		even
000603E0                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
000606CA                            		even
000606CA                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
00060F4E                            		even
00060F4E                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
00061CA4 00                         		even
00061CA4                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
0006240C                            		even
0006240C                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
0006298C                            		even
0006298C                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
00062AAC                            		even
00062AAC                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
00062CAA                            		even
00062CAA                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
00063E88                            		even
00063E88                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
000647CC                            		even
000647CC                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
00064BA2                            		even
00064BA2                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
00065132                            		even
00065132                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
000653BA                            		even
000653BA                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
000659B8                            		even
000659B8                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
00065C40                            		even
00065C40                            		incbin	misc\padding2.bin
00065D44                            		even
00065D44                            ; ---------------------------------------------------------------------------
00065D44                            ; Collision data
00065D44                            ; ---------------------------------------------------------------------------
00065D44                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
00065E44                            		even
00065E44                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00066E44                            		even
00066E44                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00067E44                            		even
00067E44                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
00067FFC 00                         		even
00067FFC                            Col_LZ:		incbin	collide\lz.bin		; LZ index
00068164                            		even
00068164                            Col_MZ:		incbin	collide\mz.bin		; MZ index
000682F4                            		even
000682F4                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
000684E8                            		even
000684E8                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
000686EE                            		even
000686EE                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
0006898C                            		even
0006898C                            ; ---------------------------------------------------------------------------
0006898C                            ; Special layouts
0006898C                            ; ---------------------------------------------------------------------------
0006898C                            SS_1:		incbin	sslayout\1.bin
00068C06                            		even
00068C06                            SS_2:		incbin	sslayout\2.bin
00069018                            		even
00069018                            SS_3:		incbin	sslayout\3.bin
00069374                            		even
00069374                            SS_4:		incbin	sslayout\4.bin
0006984E                            		even
0006984E                            SS_5:		incbin	sslayout\5.bin
00069D20                            		even
00069D20                            SS_6:		incbin	sslayout\6.bin
0006A030                            		even
0006A030                            ; ---------------------------------------------------------------------------
0006A030                            ; Animated uncompressed graphics
0006A030                            ; ---------------------------------------------------------------------------
0006A030                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
0006A230                            		even
0006A230                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0006A630                            		even
0006A630                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0006AAB0                            		even
0006AAB0                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0006ADB0                            		even
0006ADB0                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0006B3B0                            		even
0006B3B0                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0006B6B0                            		even
0006B6B0                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
0006C130                            		even
0006C130                            
0006C130                            ; ---------------------------------------------------------------------------
0006C130                            ; Level	layout index
0006C130                            ; ---------------------------------------------------------------------------
0006C130 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0006C136 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0006C13C 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0006C142 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0006C148 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0006C14E 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0006C154 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0006C15A 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0006C160 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0006C166 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0006C16C 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0006C172 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0006C178 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006C17E 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006C184 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006C18A 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0006C190 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0006C196 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0006C19C 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0006C1A2 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0006C1A8 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0006C1AE 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0006C1B4 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0006C1BA 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0006C1C0 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006C1C6 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006C1CC 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006C1D2 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006C1D8                            
0006C1D8                            Level_GHZ1:	incbin	levels\ghz1.bin
0006C2CA                            		even
0006C2CA 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0006C2CE                            Level_GHZ2:	incbin	levels\ghz2.bin
0006C396                            		even
0006C396 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0006C39A                            Level_GHZ3:	incbin	levels\ghz3.bin
0006C4BC                            		even
0006C4BC                            Level_GHZbg:	incbin	levels\ghzbg.bin
0006C4DE                            		even
0006C4DE 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0006C4E2 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0006C4E6                            
0006C4E6                            Level_LZ1:	incbin	levels\lz1.bin
0006C5E8                            		even
0006C5E8                            Level_LZbg:	incbin	levels\lzbg.bin
0006C6EA                            		even
0006C6EA 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0006C6EE                            Level_LZ2:	incbin	levels\lz2.bin
0006C788                            		even
0006C788 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0006C78C                            Level_LZ3:	incbin	levels\lz3.bin
0006C8A6                            		even
0006C8A6 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0006C8AA                            Level_SBZ3:	incbin	levels\sbz3.bin
0006C964                            		even
0006C964 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0006C968                            
0006C968                            Level_MZ1:	incbin	levels\mz1.bin
0006CA06                            		even
0006CA06                            Level_MZ1bg:	incbin	levels\mz1bg.bin
0006CA80                            		even
0006CA80                            Level_MZ2:	incbin	levels\mz2.bin
0006CB24                            		even
0006CB24                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0006CBB6                            		even
0006CBB6 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0006CBBA                            Level_MZ3:	incbin	levels\mz3.bin
0006CC9C                            		even
0006CC9C                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0006CD40 00                         		even
0006CD40 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0006CD44 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0006CD48                            
0006CD48                            Level_SLZ1:	incbin	levels\slz1.bin
0006CE5A                            		even
0006CE5A                            Level_SLZbg:	incbin	levels\slzbg.bin
0006CE74                            		even
0006CE74                            Level_SLZ2:	incbin	levels\slz2.bin
0006CF64                            		even
0006CF64                            Level_SLZ3:	incbin	levels\slz3.bin
0006D07E                            		even
0006D07E 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0006D082                            
0006D082                            Level_SYZ1:	incbin	levels\syz1.bin
0006D13E 00                         		even
0006D13E                            Level_SYZbg:	incbin	levels\syzbg.bin
0006D178                            		even
0006D178 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0006D17C                            Level_SYZ2:	incbin	levels\syz2.bin
0006D280                            		even
0006D280 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0006D284                            Level_SYZ3:	incbin	levels\syz3.bin
0006D3DE 00                         		even
0006D3DE 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0006D3E2 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0006D3E6                            
0006D3E6                            Level_SBZ1:	incbin	levels\sbz1.bin
0006D508                            		even
0006D508                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0006D546                            		even
0006D546                            Level_SBZ2:	incbin	levels\sbz2.bin
0006D688                            		even
0006D688                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0006D7F2                            		even
0006D7F2 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0006D7F6 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0006D7FA                            Level_End:	incbin	levels\ending.bin
0006D82A 00                         		even
0006D82A 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0006D82E                            
0006D82E                            ; ---------------------------------------------------------------------------
0006D82E                            ; Animated uncompressed giant ring graphics
0006D82E                            ; ---------------------------------------------------------------------------
0006D82E                            Art_BigRing:	incbin	artunc\bigring.bin
0006E46E                            		even
0006E46E                            
0006E46E                            		incbin	misc\padding3.bin
0006E50A                            		even
0006E50A                            
0006E50A                            ; ---------------------------------------------------------------------------
0006E50A                            ; Sprite locations index
0006E50A                            ; ---------------------------------------------------------------------------
0006E50A 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E50E 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E512 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E516 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E51A 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E51E 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E522 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E526 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E52A 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E52E 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E532 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E536 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E53A 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E53E 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E542 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E546 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E54A 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E54E 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E552 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E556 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E55A 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E55E 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E562 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E566 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E56A 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E56E 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E572 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E576 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E57A 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006E57E 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0006E582 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0006E586 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006E58A 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006E58E 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0006E592 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0006E596 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006E59A FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0006E5A0                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0006EDE6                            		even
0006EDE6                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0006EE9A                            		even
0006EE9A                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0006F8DE                            		even
0006F8DE                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0006FC86                            		even
0006FC86                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0006FFBC                            		even
0006FFBC                            ObjPos_LZ3:	incbin	objpos\lz3.bin
00070508                            		even
00070508                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
000709A0                            		even
000709A0                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
000709D2                            		even
000709D2                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
00070A04                            		even
00070A04                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
00070A36                            		even
00070A36                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
00070A68                            		even
00070A68                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
00070AB2                            		even
00070AB2                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
00070AF0                            		even
00070AF0                            ObjPos_MZ1:	incbin	objpos\mz1.bin
00070E5C                            		even
00070E5C                            ObjPos_MZ2:	incbin	objpos\mz2.bin
00071306                            		even
00071306                            ObjPos_MZ3:	incbin	objpos\mz3.bin
0007187C                            		even
0007187C                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
000718A6                            		even
000718A6                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
00071D0E                            		even
00071D0E                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
000722F0                            		even
000722F0                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
00072962                            		even
00072962                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
00072ECC                            		even
00072ECC                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
000734D2                            		even
000734D2                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
00073C10                            		even
00073C10                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
000742EE                            		even
000742EE                            ObjPos_FZ:	incbin	objpos\fz.bin
00074300                            		even
00074300                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
00074332                            		even
00074332                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
00074364                            		even
00074364                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
00074396                            		even
00074396                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
000743C8                            		even
000743C8                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
000743FA                            		even
000743FA                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
00074432                            		even
00074432                            ObjPos_End:	incbin	objpos\ending.bin
0007458E                            		even
0007458E FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
00074594                            ; ---------------------------------------------------------------------------
00074594                            		incbin	misc\padding4.bin
00074BBE                            		even
00074BBE                            
00074BBE 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
00074BC2 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
00074BC6 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
00074BCA 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
00074BCE 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
00074BD2 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
00074BD6                            ; ---------------------------------------------------------------------------
00074BD6                            ; PSG instruments used in music
00074BD6                            ; ---------------------------------------------------------------------------
00074BD6 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
00074BE2 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
00074BEE 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
00074BFA                            PSG1:		incbin	sound\psg1.bin
00074C11                            PSG2:		incbin	sound\psg2.bin
00074C18                            PSG3:		incbin	sound\psg3.bin
00074C29                            PSG4:		incbin	sound\psg4.bin
00074C34                            PSG6:		incbin	sound\psg6.bin
00074C43                            PSG5:		incbin	sound\psg5.bin
00074C6D                            PSG7:		incbin	sound\psg7.bin
00074C89                            PSG8:		incbin	sound\psg8.bin
00074CB1                            PSG9:		incbin	sound\psg9.bin
00074CC2                            
00074CC2 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
00074CCA                            ; ---------------------------------------------------------------------------
00074CCA                            ; Music	Pointers
00074CCA                            ; ---------------------------------------------------------------------------
00074CCA 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
00074CD2 0000 0000 0000 0000        		dc.l Music83, Music84
00074CDA 0000 0000 0000 0000        		dc.l Music85, Music86
00074CE2 0000 0000 0000 0000        		dc.l Music87, Music88
00074CEA 0000 0000 0000 0000        		dc.l Music89, Music8A
00074CF2 0000 0000 0000 0000        		dc.l Music8B, Music8C
00074CFA 0000 0000 0000 0000        		dc.l Music8D, Music8E
00074D02 0000 0000 0000 0000        		dc.l Music8F, Music90
00074D0A 0000 0000 0000 0000        		dc.l Music91, Music92
00074D12 0000 0000 0000 0000        		dc.l Music93, Music94
00074D1A 0000 0000 0000 0000        		dc.l Music95, Music96
00074D22 0000 0000 0000 0000        		dc.l Music97, Music98
00074D2A 0000 0000 0000 0000        		dc.l Music99, Music9A
00074D32 0000 0000 0000 0000        		dc.l Music9B, Music9C
00074D3A 0000 0000 0000 0000        		dc.l Music9D, Music9E
00074D42 0000 0000                  		dc.l Music9F
00074D46                            ; ---------------------------------------------------------------------------
00074D46                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
00074D46                            ; ---------------------------------------------------------------------------
00074D46 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
00074D56 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
00074D66 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
00074D76 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
00074D86 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
00074D96 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
00074DA6 9090 9090                  		dc.b $90, $90, $90, $90
00074DAA                            
00074DAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074DAA                            
00074DAA                            
00074DAA                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
00074DAA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00074DB2 4E71                       		nop	
00074DB4 4E71                       		nop	
00074DB6 4E71                       		nop	
00074DB8                            
00074DB8                            loc_71B5A:
00074DB8 0839 0000 00A1 1100        		btst	#0,($A11100).l
00074DC0 66F6                       		bne.s	loc_71B5A
00074DC2                            
00074DC2 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
00074DCA 6700                       		beq.s	loc_71B82
00074DCC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00074DD4 4E71                       		nop	
00074DD6 4E71                       		nop	
00074DD8 4E71                       		nop	
00074DDA 4E71                       		nop	
00074DDC 4E71                       		nop	
00074DDE 60CA                       		bra.s	sub_71B4C
00074DE0                            ; ===========================================================================
00074DE0                            
00074DE0                            loc_71B82:
00074DE0 4DF9 00FF F000             		lea	($FFF000).l,a6
00074DE6 422E 000E                  		clr.b	$E(a6)
00074DEA 4A2E 0003                  		tst.b	3(a6)		; is music paused?
00074DEE 6600 0000                  		bne.w	loc_71E50	; if yes, branch
00074DF2 532E 0001                  		subq.b	#1,1(a6)
00074DF6 6600                       		bne.s	loc_71B9E
00074DF8 4EBA 0000                  		jsr	sub_7260C(pc)
00074DFC                            
00074DFC                            loc_71B9E:
00074DFC 102E 0004                  		move.b	4(a6),d0
00074E00 6700                       		beq.s	loc_71BA8
00074E02 4EBA 0000                  		jsr	sub_72504(pc)
00074E06                            
00074E06                            loc_71BA8:
00074E06 4A2E 0024                  		tst.b	$24(a6)
00074E0A 6700                       		beq.s	loc_71BB2
00074E0C 4EBA 0000                  		jsr	sub_7267C(pc)
00074E10                            
00074E10                            loc_71BB2:
00074E10 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
00074E14 6700                       		beq.s	loc_71BBC	; if not, branch
00074E16 4EBA 0000                  		jsr	Sound_Play(pc)
00074E1A                            
00074E1A                            loc_71BBC:
00074E1A 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00074E20 6700                       		beq.s	loc_71BC8
00074E22 4EBA 0000                  		jsr	Sound_ChkValue(pc)
00074E26                            
00074E26                            loc_71BC8:
00074E26 4BEE 0040                  		lea	$40(a6),a5
00074E2A 4A15                       		tst.b	(a5)
00074E2C 6A00                       		bpl.s	loc_71BD4
00074E2E 4EBA 0000                  		jsr	sub_71C4E(pc)
00074E32                            
00074E32                            loc_71BD4:
00074E32 422E 0008                  		clr.b	8(a6)
00074E36 7E05                       		moveq	#5,d7
00074E38                            
00074E38                            loc_71BDA:
00074E38 DAFC 0030                  		adda.w	#$30,a5
00074E3C 4A15                       		tst.b	(a5)
00074E3E 6A00                       		bpl.s	loc_71BE6
00074E40 4EBA 0000                  		jsr	sub_71CCA(pc)
00074E44                            
00074E44                            loc_71BE6:
00074E44 51CF FFF2                  		dbf	d7,loc_71BDA
00074E48                            
00074E48 7E02                       		moveq	#2,d7
00074E4A                            
00074E4A                            loc_71BEC:
00074E4A DAFC 0030                  		adda.w	#$30,a5
00074E4E 4A15                       		tst.b	(a5)
00074E50 6A00                       		bpl.s	loc_71BF8
00074E52 4EBA 0000                  		jsr	sub_72850(pc)
00074E56                            
00074E56                            loc_71BF8:
00074E56 51CF FFF2                  		dbf	d7,loc_71BEC
00074E5A                            
00074E5A 1D7C 0080 000E             		move.b	#$80,$E(a6)
00074E60 7E02                       		moveq	#2,d7
00074E62                            
00074E62                            loc_71C04:
00074E62 DAFC 0030                  		adda.w	#$30,a5
00074E66 4A15                       		tst.b	(a5)
00074E68 6A00                       		bpl.s	loc_71C10
00074E6A 4EBA 0000                  		jsr	sub_71CCA(pc)
00074E6E                            
00074E6E                            loc_71C10:
00074E6E 51CF FFF2                  		dbf	d7,loc_71C04
00074E72                            
00074E72 7E02                       		moveq	#2,d7
00074E74                            
00074E74                            loc_71C16:
00074E74 DAFC 0030                  		adda.w	#$30,a5
00074E78 4A15                       		tst.b	(a5)
00074E7A 6A00                       		bpl.s	loc_71C22
00074E7C 4EBA 0000                  		jsr	sub_72850(pc)
00074E80                            
00074E80                            loc_71C22:
00074E80 51CF FFF2                  		dbf	d7,loc_71C16
00074E84 1D7C 0040 000E             		move.b	#$40,$E(a6)
00074E8A DAFC 0030                  		adda.w	#$30,a5
00074E8E 4A15                       		tst.b	(a5)
00074E90 6A00                       		bpl.s	loc_71C38
00074E92 4EBA 0000                  		jsr	sub_71CCA(pc)
00074E96                            
00074E96                            loc_71C38:
00074E96 DAFC 0030                  		adda.w	#$30,a5
00074E9A 4A15                       		tst.b	(a5)
00074E9C 6A00                       		bpl.s	loc_71C44
00074E9E 4EBA 0000                  		jsr	sub_72850(pc)
00074EA2                            
00074EA2                            loc_71C44:
00074EA2 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00074EAA 4E75                       		rts	
00074EAC                            ; End of function sub_71B4C
00074EAC                            
00074EAC                            
00074EAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074EAC                            
00074EAC                            
00074EAC                            sub_71C4E:				; XREF: sub_71B4C
00074EAC 532D 000E                  		subq.b	#1,$E(a5)
00074EB0 6600                       		bne.s	locret_71CAA
00074EB2 1D7C 0080 0008             		move.b	#$80,8(a6)
00074EB8 286D 0004                  		movea.l	4(a5),a4
00074EBC                            
00074EBC                            loc_71C5E:
00074EBC 7A00                       		moveq	#0,d5
00074EBE 1A1C                       		move.b	(a4)+,d5
00074EC0 0C05 00E0                  		cmpi.b	#-$20,d5
00074EC4 6500                       		bcs.s	loc_71C6E
00074EC6 4EBA 0000                  		jsr	sub_72A5A(pc)
00074ECA 60F0                       		bra.s	loc_71C5E
00074ECC                            ; ===========================================================================
00074ECC                            
00074ECC                            loc_71C6E:
00074ECC 4A05                       		tst.b	d5
00074ECE 6A00                       		bpl.s	loc_71C84
00074ED0 1B45 0010                  		move.b	d5,$10(a5)
00074ED4 1A1C                       		move.b	(a4)+,d5
00074ED6 6A00                       		bpl.s	loc_71C84
00074ED8 534C                       		subq.w	#1,a4
00074EDA 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00074EE0 6000                       		bra.s	loc_71C88
00074EE2                            ; ===========================================================================
00074EE2                            
00074EE2                            loc_71C84:
00074EE2 4EBA 0000                  		jsr	sub_71D40(pc)
00074EE6                            
00074EE6                            loc_71C88:
00074EE6 2B4C 0004                  		move.l	a4,4(a5)
00074EEA 0815 0002                  		btst	#2,(a5)
00074EEE 6600                       		bne.s	locret_71CAA
00074EF0 7000                       		moveq	#0,d0
00074EF2 102D 0010                  		move.b	$10(a5),d0
00074EF6 0C00 0080                  		cmpi.b	#$80,d0
00074EFA 6700                       		beq.s	locret_71CAA
00074EFC 0800 0003                  		btst	#3,d0
00074F00 6600                       		bne.s	loc_71CAC
00074F02 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
00074F08                            
00074F08                            locret_71CAA:
00074F08 4E75                       		rts	
00074F0A                            ; ===========================================================================
00074F0A                            
00074F0A                            loc_71CAC:
00074F0A 0400 0088                  		subi.b	#$88,d0
00074F0E 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
00074F12 13C0 00A0 00EA             		move.b	d0,($A000EA).l
00074F18 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
00074F20 4E75                       		rts	
00074F22                            ; End of function sub_71C4E
00074F22                            
00074F22                            ; ===========================================================================
00074F22 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
00074F28                            
00074F28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074F28                            
00074F28                            
00074F28                            sub_71CCA:				; XREF: sub_71B4C
00074F28 532D 000E                  		subq.b	#1,$E(a5)
00074F2C 6600                       		bne.s	loc_71CE0
00074F2E 0895 0004                  		bclr	#4,(a5)
00074F32 4EBA 0000                  		jsr	sub_71CEC(pc)
00074F36 4EBA 0000                  		jsr	sub_71E18(pc)
00074F3A 6000 0000                  		bra.w	loc_726E2
00074F3E                            ; ===========================================================================
00074F3E                            
00074F3E                            loc_71CE0:
00074F3E 4EBA 0000                  		jsr	sub_71D9E(pc)
00074F42 4EBA 0000                  		jsr	sub_71DC6(pc)
00074F46 6000 0000                  		bra.w	loc_71E24
00074F4A                            ; End of function sub_71CCA
00074F4A                            
00074F4A                            
00074F4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074F4A                            
00074F4A                            
00074F4A                            sub_71CEC:				; XREF: sub_71CCA
00074F4A 286D 0004                  		movea.l	4(a5),a4
00074F4E 0895 0001                  		bclr	#1,(a5)
00074F52                            
00074F52                            loc_71CF4:
00074F52 7A00                       		moveq	#0,d5
00074F54 1A1C                       		move.b	(a4)+,d5
00074F56 0C05 00E0                  		cmpi.b	#-$20,d5
00074F5A 6500                       		bcs.s	loc_71D04
00074F5C 4EBA 0000                  		jsr	sub_72A5A(pc)
00074F60 60F0                       		bra.s	loc_71CF4
00074F62                            ; ===========================================================================
00074F62                            
00074F62                            loc_71D04:
00074F62 4EBA 0000                  		jsr	sub_726FE(pc)
00074F66 4A05                       		tst.b	d5
00074F68 6A00                       		bpl.s	loc_71D1A
00074F6A 4EBA 0000                  		jsr	sub_71D22(pc)
00074F6E 1A1C                       		move.b	(a4)+,d5
00074F70 6A00                       		bpl.s	loc_71D1A
00074F72 534C                       		subq.w	#1,a4
00074F74 6000 0000                  		bra.w	sub_71D60
00074F78                            ; ===========================================================================
00074F78                            
00074F78                            loc_71D1A:
00074F78 4EBA 0000                  		jsr	sub_71D40(pc)
00074F7C 6000 0000                  		bra.w	sub_71D60
00074F80                            ; End of function sub_71CEC
00074F80                            
00074F80                            
00074F80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074F80                            
00074F80                            
00074F80                            sub_71D22:				; XREF: sub_71CEC
00074F80 0405 0080                  		subi.b	#$80,d5
00074F84 6700                       		beq.s	loc_71D58
00074F86 DA2D 0008                  		add.b	8(a5),d5
00074F8A 0245 007F                  		andi.w	#$7F,d5
00074F8E E34D                       		lsl.w	#1,d5
00074F90 41FA 0000                  		lea	word_72790(pc),a0
00074F94 3C30 5000                  		move.w	(a0,d5.w),d6
00074F98 3B46 0010                  		move.w	d6,$10(a5)
00074F9C 4E75                       		rts	
00074F9E                            ; End of function sub_71D22
00074F9E                            
00074F9E                            
00074F9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074F9E                            
00074F9E                            
00074F9E                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00074F9E 1005                       		move.b	d5,d0
00074FA0 122D 0002                  		move.b	2(a5),d1
00074FA4                            
00074FA4                            loc_71D46:
00074FA4 5301                       		subq.b	#1,d1
00074FA6 6700                       		beq.s	loc_71D4E
00074FA8 D005                       		add.b	d5,d0
00074FAA 60F8                       		bra.s	loc_71D46
00074FAC                            ; ===========================================================================
00074FAC                            
00074FAC                            loc_71D4E:
00074FAC 1B40 000F                  		move.b	d0,$F(a5)
00074FB0 1B40 000E                  		move.b	d0,$E(a5)
00074FB4 4E75                       		rts	
00074FB6                            ; End of function sub_71D40
00074FB6                            
00074FB6                            ; ===========================================================================
00074FB6                            
00074FB6                            loc_71D58:				; XREF: sub_71D22
00074FB6 08D5 0001                  		bset	#1,(a5)
00074FBA 426D 0010                  		clr.w	$10(a5)
00074FBE                            
00074FBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074FBE                            
00074FBE                            
00074FBE                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
00074FBE 2B4C 0004                  		move.l	a4,4(a5)
00074FC2 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00074FC8 0815 0004                  		btst	#4,(a5)
00074FCC 6600                       		bne.s	locret_71D9C
00074FCE 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
00074FD4 422D 000C                  		clr.b	$C(a5)
00074FD8 0815 0003                  		btst	#3,(a5)
00074FDC 6700                       		beq.s	locret_71D9C
00074FDE 206D 0014                  		movea.l	$14(a5),a0
00074FE2 1B58 0018                  		move.b	(a0)+,$18(a5)
00074FE6 1B58 0019                  		move.b	(a0)+,$19(a5)
00074FEA 1B58 001A                  		move.b	(a0)+,$1A(a5)
00074FEE 1018                       		move.b	(a0)+,d0
00074FF0 E208                       		lsr.b	#1,d0
00074FF2 1B40 001B                  		move.b	d0,$1B(a5)
00074FF6 426D 001C                  		clr.w	$1C(a5)
00074FFA                            
00074FFA                            locret_71D9C:
00074FFA 4E75                       		rts	
00074FFC                            ; End of function sub_71D60
00074FFC                            
00074FFC                            
00074FFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074FFC                            
00074FFC                            
00074FFC                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
00074FFC 4A2D 0012                  		tst.b	$12(a5)
00075000 6700                       		beq.s	locret_71DC4
00075002 532D 0012                  		subq.b	#1,$12(a5)
00075006 6600                       		bne.s	locret_71DC4
00075008 08D5 0001                  		bset	#1,(a5)
0007500C 4A2D 0001                  		tst.b	1(a5)
00075010 6B00 0000                  		bmi.w	loc_71DBE
00075014 4EBA 0000                  		jsr	sub_726FE(pc)
00075018 584F                       		addq.w	#4,sp
0007501A 4E75                       		rts	
0007501C                            ; ===========================================================================
0007501C                            
0007501C                            loc_71DBE:
0007501C 4EBA 0000                  		jsr	sub_729A0(pc)
00075020 584F                       		addq.w	#4,sp
00075022                            
00075022                            locret_71DC4:
00075022 4E75                       		rts	
00075024                            ; End of function sub_71D9E
00075024                            
00075024                            
00075024                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075024                            
00075024                            
00075024                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
00075024 584F                       		addq.w	#4,sp
00075026 0815 0003                  		btst	#3,(a5)
0007502A 6700                       		beq.s	locret_71E16
0007502C 4A2D 0018                  		tst.b	$18(a5)
00075030 6700                       		beq.s	loc_71DDA
00075032 532D 0018                  		subq.b	#1,$18(a5)
00075036 4E75                       		rts	
00075038                            ; ===========================================================================
00075038                            
00075038                            loc_71DDA:
00075038 532D 0019                  		subq.b	#1,$19(a5)
0007503C 6700                       		beq.s	loc_71DE2
0007503E 4E75                       		rts	
00075040                            ; ===========================================================================
00075040                            
00075040                            loc_71DE2:
00075040 206D 0014                  		movea.l	$14(a5),a0
00075044 1B68 0001 0019             		move.b	1(a0),$19(a5)
0007504A 4A2D 001B                  		tst.b	$1B(a5)
0007504E 6600                       		bne.s	loc_71DFE
00075050 1B68 0003 001B             		move.b	3(a0),$1B(a5)
00075056 442D 001A                  		neg.b	$1A(a5)
0007505A 4E75                       		rts	
0007505C                            ; ===========================================================================
0007505C                            
0007505C                            loc_71DFE:
0007505C 532D 001B                  		subq.b	#1,$1B(a5)
00075060 1C2D 001A                  		move.b	$1A(a5),d6
00075064 4886                       		ext.w	d6
00075066 DC6D 001C                  		add.w	$1C(a5),d6
0007506A 3B46 001C                  		move.w	d6,$1C(a5)
0007506E DC6D 0010                  		add.w	$10(a5),d6
00075072 594F                       		subq.w	#4,sp
00075074                            
00075074                            locret_71E16:
00075074 4E75                       		rts	
00075076                            ; End of function sub_71DC6
00075076                            
00075076                            
00075076                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075076                            
00075076                            
00075076                            sub_71E18:				; XREF: sub_71CCA
00075076 0815 0001                  		btst	#1,(a5)
0007507A 6600                       		bne.s	locret_71E48
0007507C 3C2D 0010                  		move.w	$10(a5),d6
00075080 6700                       		beq.s	loc_71E4A
00075082                            
00075082                            loc_71E24:				; XREF: sub_71CCA
00075082 102D 001E                  		move.b	$1E(a5),d0
00075086 4880                       		ext.w	d0
00075088 DC40                       		add.w	d0,d6
0007508A 0815 0002                  		btst	#2,(a5)
0007508E 6600                       		bne.s	locret_71E48
00075090 3206                       		move.w	d6,d1
00075092 E049                       		lsr.w	#8,d1
00075094 103C 00A4                  		move.b	#-$5C,d0
00075098 4EBA 0000                  		jsr	sub_72722(pc)
0007509C 1206                       		move.b	d6,d1
0007509E 103C 00A0                  		move.b	#-$60,d0
000750A2 4EBA 0000                  		jsr	sub_72722(pc)
000750A6                            
000750A6                            locret_71E48:
000750A6 4E75                       		rts	
000750A8                            ; ===========================================================================
000750A8                            
000750A8                            loc_71E4A:
000750A8 08D5 0001                  		bset	#1,(a5)
000750AC 4E75                       		rts	
000750AE                            ; End of function sub_71E18
000750AE                            
000750AE                            ; ===========================================================================
000750AE                            
000750AE                            loc_71E50:				; XREF: sub_71B4C
000750AE 6B00                       		bmi.s	loc_71E94
000750B0 0C2E 0002 0003             		cmpi.b	#2,3(a6)
000750B6 6700 0000                  		beq.w	loc_71EFE
000750BA 1D7C 0002 0003             		move.b	#2,3(a6)
000750C0 7602                       		moveq	#2,d3
000750C2 103C 00B4                  		move.b	#-$4C,d0
000750C6 7200                       		moveq	#0,d1
000750C8                            
000750C8                            loc_71E6A:
000750C8 4EBA 0000                  		jsr	sub_7272E(pc)
000750CC 4EBA 0000                  		jsr	sub_72764(pc)
000750D0 5200                       		addq.b	#1,d0
000750D2 51CB FFF4                  		dbf	d3,loc_71E6A
000750D6                            
000750D6 7602                       		moveq	#2,d3
000750D8 7028                       		moveq	#$28,d0
000750DA                            
000750DA                            loc_71E7C:
000750DA 1203                       		move.b	d3,d1
000750DC 4EBA 0000                  		jsr	sub_7272E(pc)
000750E0 5801                       		addq.b	#4,d1
000750E2 4EBA 0000                  		jsr	sub_7272E(pc)
000750E6 51CB FFF2                  		dbf	d3,loc_71E7C
000750EA                            
000750EA 4EBA 0000                  		jsr	sub_729B6(pc)
000750EE 6000 FDB2                  		bra.w	loc_71C44
000750F2                            ; ===========================================================================
000750F2                            
000750F2                            loc_71E94:				; XREF: loc_71E50
000750F2 422E 0003                  		clr.b	3(a6)
000750F6 7630                       		moveq	#$30,d3
000750F8 4BEE 0040                  		lea	$40(a6),a5
000750FC 7806                       		moveq	#6,d4
000750FE                            
000750FE                            loc_71EA0:
000750FE 0815 0007                  		btst	#7,(a5)
00075102 6700                       		beq.s	loc_71EB8
00075104 0815 0002                  		btst	#2,(a5)
00075108 6600                       		bne.s	loc_71EB8
0007510A 103C 00B4                  		move.b	#-$4C,d0
0007510E 122D 000A                  		move.b	$A(a5),d1
00075112 4EBA 0000                  		jsr	sub_72722(pc)
00075116                            
00075116                            loc_71EB8:
00075116 DAC3                       		adda.w	d3,a5
00075118 51CC FFE4                  		dbf	d4,loc_71EA0
0007511C                            
0007511C 4BEE 0220                  		lea	$220(a6),a5
00075120 7802                       		moveq	#2,d4
00075122                            
00075122                            loc_71EC4:
00075122 0815 0007                  		btst	#7,(a5)
00075126 6700                       		beq.s	loc_71EDC
00075128 0815 0002                  		btst	#2,(a5)
0007512C 6600                       		bne.s	loc_71EDC
0007512E 103C 00B4                  		move.b	#-$4C,d0
00075132 122D 000A                  		move.b	$A(a5),d1
00075136 4EBA 0000                  		jsr	sub_72722(pc)
0007513A                            
0007513A                            loc_71EDC:
0007513A DAC3                       		adda.w	d3,a5
0007513C 51CC FFE4                  		dbf	d4,loc_71EC4
00075140                            
00075140 4BEE 0340                  		lea	$340(a6),a5
00075144 0815 0007                  		btst	#7,(a5)
00075148 6700                       		beq.s	loc_71EFE
0007514A 0815 0002                  		btst	#2,(a5)
0007514E 6600                       		bne.s	loc_71EFE
00075150 103C 00B4                  		move.b	#-$4C,d0
00075154 122D 000A                  		move.b	$A(a5),d1
00075158 4EBA 0000                  		jsr	sub_72722(pc)
0007515C                            
0007515C                            loc_71EFE:
0007515C 6000 FD44                  		bra.w	loc_71C44
00075160                            
00075160                            ; ---------------------------------------------------------------------------
00075160                            ; Subroutine to	play a sound or	music track
00075160                            ; ---------------------------------------------------------------------------
00075160                            
00075160                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075160                            
00075160                            
00075160                            Sound_Play:				; XREF: sub_71B4C
00075160 2079 0007 4BBE             		movea.l	(Go_SoundTypes).l,a0
00075166 43EE 000A                  		lea	$A(a6),a1	; load music track number
0007516A 1616                       		move.b	0(a6),d3
0007516C 7802                       		moveq	#2,d4
0007516E                            
0007516E                            loc_71F12:
0007516E 1011                       		move.b	(a1),d0		; move track number to d0
00075170 1200                       		move.b	d0,d1
00075172 4219                       		clr.b	(a1)+
00075174 0400 0081                  		subi.b	#$81,d0
00075178 6500                       		bcs.s	loc_71F3E
0007517A 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00075180 6700                       		beq.s	loc_71F2C
00075182 1D41 000A                  		move.b	d1,$A(a6)
00075186 6000                       		bra.s	loc_71F3E
00075188                            ; ===========================================================================
00075188                            
00075188                            loc_71F2C:
00075188 0240 007F                  		andi.w	#$7F,d0
0007518C 1430 0000                  		move.b	(a0,d0.w),d2
00075190 B403                       		cmp.b	d3,d2
00075192 6500                       		bcs.s	loc_71F3E
00075194 1602                       		move.b	d2,d3
00075196 1D41 0009                  		move.b	d1,9(a6)	; set music flag
0007519A                            
0007519A                            loc_71F3E:
0007519A 51CC FFD2                  		dbf	d4,loc_71F12
0007519E                            
0007519E 4A03                       		tst.b	d3
000751A0 6B00                       		bmi.s	locret_71F4A
000751A2 1C83                       		move.b	d3,0(a6)
000751A4                            
000751A4                            locret_71F4A:
000751A4 4E75                       		rts	
000751A6                            ; End of function Sound_Play
000751A6                            
000751A6                            
000751A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000751A6                            
000751A6                            
000751A6                            Sound_ChkValue:				; XREF: sub_71B4C
000751A6 7E00                       		moveq	#0,d7
000751A8 1E2E 0009                  		move.b	9(a6),d7
000751AC 6700 0000                  		beq.w	Sound_E4
000751B0 6A00                       		bpl.s	locret_71F8C
000751B2 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
000751B8 0C07 009F                  		cmpi.b	#$9F,d7
000751BC 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
000751C0 0C07 00A0                  		cmpi.b	#$A0,d7
000751C4 6500 0000                  		bcs.w	locret_71F8C
000751C8 0C07 00CF                  		cmpi.b	#$CF,d7
000751CC 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
000751D0 0C07 00D0                  		cmpi.b	#$D0,d7
000751D4 6500 0000                  		bcs.w	locret_71F8C
000751D8 0C07 00E0                  		cmpi.b	#$E0,d7
000751DC 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
000751E0 0C07 00E5                  		cmpi.b	#$E5,d7
000751E4 6300                       		bls.s	Sound_E0toE5	; sound	$E0-$E5
000751E6                            
000751E6                            locret_71F8C:
000751E6 4E75                       		rts	
000751E8                            ; ===========================================================================
000751E8                            
000751E8                            Sound_E0toE5				; XREF: Sound_ChkValue
000751E8 0407 00E0                  		subi.b	#$E0,d7
000751EC E54F                       		lsl.w	#2,d7
000751EE 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
000751F2                            ; ===========================================================================
000751F2                            
000751F2                            Sound_ExIndex:
000751F2 6000 0000                  		bra.w	Sound_E0
000751F6                            ; ===========================================================================
000751F6 6000 0000                  		bra.w	Sound_E1
000751FA                            ; ===========================================================================
000751FA 6000 0000                  		bra.w	Sound_E2
000751FE                            ; ===========================================================================
000751FE 6000 0000                  		bra.w	Sound_E3
00075202                            ; ===========================================================================
00075202 6000 0000                  		bra.w	Sound_E4
00075206                            ; ===========================================================================
00075206 6000 0000                  		bra.w	Sound_E5
0007520A                            ; ===========================================================================
0007520A                            ; ---------------------------------------------------------------------------
0007520A                            ; Play "Say-gaa" PCM sound
0007520A                            ; ---------------------------------------------------------------------------
0007520A                            
0007520A                            Sound_E1:				  
0007520A 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
00075210 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
00075216 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0007521E                            PlayPCM_Loop:	  
0007521E 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
00075224 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
00075228 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
0007522C 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
0007522E 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
00075230 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
00075234 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
0007523A 4EB8 1414                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
0007523E 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
00075244 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
00075246 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
00075248                            return_PlayPCM: 
00075248 584F                       		addq.w	#4,sp 
0007524A 4E75                       		rts
0007524C                            		
0007524C                            ; ---------------------------------------------------------------------------
0007524C                            ; Play you are an idiot pcm sound
0007524C                            ; ---------------------------------------------------------------------------
0007524C                            
0007524C                            Sound_E5:  
0007524C 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
00075252 263C 0000 0000             		move.l	#(IdiotPCM_End-IdiotPCM),d3			; Load the size of the idiot PCM sample into d3 
00075258 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
00075260                            PlayPCM_LoopE5:	  
00075260                            
00075260 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
00075266                            		
00075266 5278 FE24                  		addq.w	#1,($FFFFFE24).w
0007526A                            		
0007526A 1038 FE24                  		move.b	($FFFFFE24).w,d0
0007526E 0200 000F                  		andi.b	#$F,d0
00075272 6700                       		beq.s	SfxE5SwapPalette
00075274                            		
00075274 303C 0056                  		move.w	#$58-2,d0				; Write the pitch ($58 in this case) to d0  (-28 from the check before)
00075278 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
0007527C 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
0007527E 67CC                       		beq.s	Sound_E5			; If d3 = 0, we finished playing the PCM sample, DONT STOP
00075280 60DE                       		bra.s	PlayPCM_LoopE5
00075282                            		
00075282                            SfxE5SwapPalette:
00075282                            		
00075282                            		
00075282                            		
00075282 4BF9 00C0 0004             		lea	($C00004).l,a5
00075288 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
0007528E                            		
0007528E                            		
0007528E 0838 0004 FE24             		btst	#4,($FFFFFE24).w
00075294 6700                       		beq.s	@not_black
00075296 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
0007529C 6000                       		bra.s	@merge
0007529E                            	@not_black:
0007529E 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
000752A4                            	@merge:
000752A4 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
000752A8 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
000752AC 31FC 0080 F640             		move.w	#$80+((0&$C000)>>14),($FFFFF640).w ;dest
000752B2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000752B6                            		
000752B6 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
000752BA 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
000752BE 60A0                       		bra.s	PlayPCM_LoopE5
000752C0                            		
000752C0                            ; ===========================================================================
000752C0                            ; ---------------------------------------------------------------------------
000752C0                            ; Play music track $81-$9F
000752C0                            ; ---------------------------------------------------------------------------
000752C0                            
000752C0                            Sound_81to9F:				; XREF: Sound_ChkValue
000752C0 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
000752C4 6600                       		bne.s	loc_72024	; if not, branch
000752C6 4A2E 0027                  		tst.b	$27(a6)
000752CA 6600 0000                  		bne.w	loc_721B6
000752CE 4BEE 0040                  		lea	$40(a6),a5
000752D2 7009                       		moveq	#9,d0
000752D4                            
000752D4                            loc_71FE6:
000752D4 0895 0002                  		bclr	#2,(a5)
000752D8 DAFC 0030                  		adda.w	#$30,a5
000752DC 51C8 FFF6                  		dbf	d0,loc_71FE6
000752E0                            
000752E0 4BEE 0220                  		lea	$220(a6),a5
000752E4 7005                       		moveq	#5,d0
000752E6                            
000752E6                            loc_71FF8:
000752E6 0895 0007                  		bclr	#7,(a5)
000752EA DAFC 0030                  		adda.w	#$30,a5
000752EE 51C8 FFF6                  		dbf	d0,loc_71FF8
000752F2 4216                       		clr.b	0(a6)
000752F4 204E                       		movea.l	a6,a0
000752F6 43EE 03A0                  		lea	$3A0(a6),a1
000752FA 303C 0087                  		move.w	#$87,d0
000752FE                            
000752FE                            loc_72012:
000752FE 22D8                       		move.l	(a0)+,(a1)+
00075300 51C8 FFFC                  		dbf	d0,loc_72012
00075304                            
00075304 1D7C 0080 0027             		move.b	#$80,$27(a6)
0007530A 4216                       		clr.b	0(a6)
0007530C 6000                       		bra.s	loc_7202C
0007530E                            ; ===========================================================================
0007530E                            
0007530E                            loc_72024:
0007530E 422E 0027                  		clr.b	$27(a6)
00075312 422E 0026                  		clr.b	$26(a6)
00075316                            
00075316                            loc_7202C:
00075316 4EBA 0000                  		jsr	sub_725CA(pc)
0007531A 2879 0007 4BCE             		movea.l	(off_719A0).l,a4
00075320 0407 0081                  		subi.b	#$81,d7
00075324 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
0007532A 2879 0007 4BC6             		movea.l	(Go_MusicIndex).l,a4
00075330 E54F                       		lsl.w	#2,d7
00075332 2874 7000                  		movea.l	(a4,d7.w),a4
00075336 7000                       		moveq	#0,d0
00075338 3014                       		move.w	(a4),d0
0007533A D08C                       		add.l	a4,d0
0007533C 2D40 0018                  		move.l	d0,$18(a6)
00075340 102C 0005                  		move.b	5(a4),d0
00075344 1D40 0028                  		move.b	d0,$28(a6)
00075348 4A2E 002A                  		tst.b	$2A(a6)
0007534C 6700                       		beq.s	loc_72068
0007534E 102E 0029                  		move.b	$29(a6),d0
00075352                            
00075352                            loc_72068:
00075352 1D40 0002                  		move.b	d0,2(a6)
00075356 1D40 0001                  		move.b	d0,1(a6)
0007535A 7200                       		moveq	#0,d1
0007535C 264C                       		movea.l	a4,a3
0007535E 5C4C                       		addq.w	#6,a4
00075360 7E00                       		moveq	#0,d7
00075362 1E2B 0002                  		move.b	2(a3),d7
00075366 6700 0000                  		beq.w	loc_72114
0007536A 5307                       		subq.b	#1,d7
0007536C 123C 00C0                  		move.b	#-$40,d1
00075370 182B 0004                  		move.b	4(a3),d4
00075374 7C30                       		moveq	#$30,d6
00075376 1A3C 0001                  		move.b	#1,d5
0007537A 43EE 0040                  		lea	$40(a6),a1
0007537E 45FA 0000                  		lea	byte_721BA(pc),a2
00075382                            
00075382                            loc_72098:
00075382 08D1 0007                  		bset	#7,(a1)
00075386 135A 0001                  		move.b	(a2)+,1(a1)
0007538A 1344 0002                  		move.b	d4,2(a1)
0007538E 1346 000D                  		move.b	d6,$D(a1)
00075392 1341 000A                  		move.b	d1,$A(a1)
00075396 1345 000E                  		move.b	d5,$E(a1)
0007539A 7000                       		moveq	#0,d0
0007539C 301C                       		move.w	(a4)+,d0
0007539E D08B                       		add.l	a3,d0
000753A0 2340 0004                  		move.l	d0,4(a1)
000753A4 335C 0008                  		move.w	(a4)+,8(a1)
000753A8 D2C6                       		adda.w	d6,a1
000753AA 51CF FFD6                  		dbf	d7,loc_72098
000753AE 0C2B 0007 0002             		cmpi.b	#7,2(a3)
000753B4 6600                       		bne.s	loc_720D8
000753B6 702B                       		moveq	#$2B,d0
000753B8 7200                       		moveq	#0,d1
000753BA 4EBA 0000                  		jsr	sub_7272E(pc)
000753BE 6000 0000                  		bra.w	loc_72114
000753C2                            ; ===========================================================================
000753C2                            
000753C2                            loc_720D8:
000753C2 7028                       		moveq	#$28,d0
000753C4 7206                       		moveq	#6,d1
000753C6 4EBA 0000                  		jsr	sub_7272E(pc)
000753CA 103C 0042                  		move.b	#$42,d0
000753CE 727F                       		moveq	#$7F,d1
000753D0 4EBA 0000                  		jsr	sub_72764(pc)
000753D4 103C 004A                  		move.b	#$4A,d0
000753D8 727F                       		moveq	#$7F,d1
000753DA 4EBA 0000                  		jsr	sub_72764(pc)
000753DE 103C 0046                  		move.b	#$46,d0
000753E2 727F                       		moveq	#$7F,d1
000753E4 4EBA 0000                  		jsr	sub_72764(pc)
000753E8 103C 004E                  		move.b	#$4E,d0
000753EC 727F                       		moveq	#$7F,d1
000753EE 4EBA 0000                  		jsr	sub_72764(pc)
000753F2 103C 00B6                  		move.b	#-$4A,d0
000753F6 123C 00C0                  		move.b	#-$40,d1
000753FA 4EBA 0000                  		jsr	sub_72764(pc)
000753FE                            
000753FE                            loc_72114:
000753FE 7E00                       		moveq	#0,d7
00075400 1E2B 0003                  		move.b	3(a3),d7
00075404 6700                       		beq.s	loc_72154
00075406 5307                       		subq.b	#1,d7
00075408 43EE 0190                  		lea	$190(a6),a1
0007540C 45FA 0000                  		lea	byte_721C2(pc),a2
00075410                            
00075410                            loc_72126:
00075410 08D1 0007                  		bset	#7,(a1)
00075414 135A 0001                  		move.b	(a2)+,1(a1)
00075418 1344 0002                  		move.b	d4,2(a1)
0007541C 1346 000D                  		move.b	d6,$D(a1)
00075420 1345 000E                  		move.b	d5,$E(a1)
00075424 7000                       		moveq	#0,d0
00075426 301C                       		move.w	(a4)+,d0
00075428 D08B                       		add.l	a3,d0
0007542A 2340 0004                  		move.l	d0,4(a1)
0007542E 335C 0008                  		move.w	(a4)+,8(a1)
00075432 101C                       		move.b	(a4)+,d0
00075434 135C 000B                  		move.b	(a4)+,$B(a1)
00075438 D2C6                       		adda.w	d6,a1
0007543A 51CF FFD4                  		dbf	d7,loc_72126
0007543E                            
0007543E                            loc_72154:
0007543E 43EE 0220                  		lea	$220(a6),a1
00075442 7E05                       		moveq	#5,d7
00075444                            
00075444                            loc_7215A:
00075444 4A11                       		tst.b	(a1)
00075446 6A00 0000                  		bpl.w	loc_7217C
0007544A 7000                       		moveq	#0,d0
0007544C 1029 0001                  		move.b	1(a1),d0
00075450 6B00                       		bmi.s	loc_7216E
00075452 5500                       		subq.b	#2,d0
00075454 E508                       		lsl.b	#2,d0
00075456 6000                       		bra.s	loc_72170
00075458                            ; ===========================================================================
00075458                            
00075458                            loc_7216E:
00075458 E608                       		lsr.b	#3,d0
0007545A                            
0007545A                            loc_72170:
0007545A 41FA 0000                  		lea	dword_722CC(pc),a0
0007545E 2070 0000                  		movea.l	(a0,d0.w),a0
00075462 08D0 0002                  		bset	#2,(a0)
00075466                            
00075466                            loc_7217C:
00075466 D2C6                       		adda.w	d6,a1
00075468 51CF FFDA                  		dbf	d7,loc_7215A
0007546C                            
0007546C 4A6E 0340                  		tst.w	$340(a6)
00075470 6A00                       		bpl.s	loc_7218E
00075472 08EE 0002 0100             		bset	#2,$100(a6)
00075478                            
00075478                            loc_7218E:
00075478 4A6E 0370                  		tst.w	$370(a6)
0007547C 6A00                       		bpl.s	loc_7219A
0007547E 08EE 0002 01F0             		bset	#2,$1F0(a6)
00075484                            
00075484                            loc_7219A:
00075484 4BEE 0070                  		lea	$70(a6),a5
00075488 7805                       		moveq	#5,d4
0007548A                            
0007548A                            loc_721A0:
0007548A 4EBA 0000                  		jsr	sub_726FE(pc)
0007548E DAC6                       		adda.w	d6,a5
00075490 51CC FFF8                  		dbf	d4,loc_721A0
00075494 7802                       		moveq	#2,d4
00075496                            
00075496                            loc_721AC:
00075496 4EBA 0000                  		jsr	sub_729A0(pc)
0007549A DAC6                       		adda.w	d6,a5
0007549C 51CC FFF8                  		dbf	d4,loc_721AC
000754A0                            
000754A0                            loc_721B6:
000754A0 584F                       		addq.w	#4,sp
000754A2 4E75                       		rts	
000754A4                            ; ===========================================================================
000754A4 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
000754AC                            		even
000754AC 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
000754B0                            		even
000754B0                            ; ===========================================================================
000754B0                            ; ---------------------------------------------------------------------------
000754B0                            ; Play normal sound effect
000754B0                            ; ---------------------------------------------------------------------------
000754B0                            
000754B0                            Sound_A0toCF:				; XREF: Sound_ChkValue
000754B0 4A2E 0027                  		tst.b	$27(a6)
000754B4 6600 0000                  		bne.w	loc_722C6
000754B8 4A2E 0004                  		tst.b	4(a6)
000754BC 6600 0000                  		bne.w	loc_722C6
000754C0 4A2E 0024                  		tst.b	$24(a6)
000754C4 6600 0000                  		bne.w	loc_722C6
000754C8 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
000754CC 6600                       		bne.s	Sound_notB5	; if not, branch
000754CE 4A2E 002B                  		tst.b	$2B(a6)
000754D2 6600                       		bne.s	loc_721EE
000754D4 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
000754D8                            
000754D8                            loc_721EE:
000754D8 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
000754DE                            
000754DE                            Sound_notB5:
000754DE 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
000754E2 6600                       		bne.s	Sound_notA7	; if not, branch
000754E4 4A2E 002C                  		tst.b	$2C(a6)
000754E8 6600 0000                  		bne.w	locret_722C4
000754EC 1D7C 0080 002C             		move.b	#$80,$2C(a6)
000754F2                            
000754F2                            Sound_notA7:
000754F2 2079 0007 4BCA             		movea.l	(Go_SoundIndex).l,a0
000754F8 0407 00A0                  		subi.b	#$A0,d7
000754FC E54F                       		lsl.w	#2,d7
000754FE 2670 7000                  		movea.l	(a0,d7.w),a3
00075502 224B                       		movea.l	a3,a1
00075504 7200                       		moveq	#0,d1
00075506 3219                       		move.w	(a1)+,d1
00075508 D28B                       		add.l	a3,d1
0007550A 1A19                       		move.b	(a1)+,d5
0007550C 1E19                       		move.b	(a1)+,d7
0007550E 5307                       		subq.b	#1,d7
00075510 7C30                       		moveq	#$30,d6
00075512                            
00075512                            loc_72228:
00075512 7600                       		moveq	#0,d3
00075514 1629 0001                  		move.b	1(a1),d3
00075518 1803                       		move.b	d3,d4
0007551A 6B00                       		bmi.s	loc_72244
0007551C 5543                       		subq.w	#2,d3
0007551E E54B                       		lsl.w	#2,d3
00075520 4BFA 0000                  		lea	dword_722CC(pc),a5
00075524 2A75 3000                  		movea.l	(a5,d3.w),a5
00075528 08D5 0002                  		bset	#2,(a5)
0007552C 6000                       		bra.s	loc_7226E
0007552E                            ; ===========================================================================
0007552E                            
0007552E                            loc_72244:
0007552E E64B                       		lsr.w	#3,d3
00075530 4BFA 0000                  		lea	dword_722CC(pc),a5
00075534 2A75 3000                  		movea.l	(a5,d3.w),a5
00075538 08D5 0002                  		bset	#2,(a5)
0007553C 0C04 00C0                  		cmpi.b	#$C0,d4
00075540 6600                       		bne.s	loc_7226E
00075542 1004                       		move.b	d4,d0
00075544 0000 001F                  		ori.b	#$1F,d0
00075548 13C0 00C0 0011             		move.b	d0,($C00011).l
0007554E 0840 0005                  		bchg	#5,d0
00075552 13C0 00C0 0011             		move.b	d0,($C00011).l
00075558                            
00075558                            loc_7226E:
00075558 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
0007555C 244D                       		movea.l	a5,a2
0007555E 700B                       		moveq	#$B,d0
00075560                            
00075560                            loc_72276:
00075560 429A                       		clr.l	(a2)+
00075562 51C8 FFFC                  		dbf	d0,loc_72276
00075566                            
00075566 3A99                       		move.w	(a1)+,(a5)
00075568 1B45 0002                  		move.b	d5,2(a5)
0007556C 7000                       		moveq	#0,d0
0007556E 3019                       		move.w	(a1)+,d0
00075570 D08B                       		add.l	a3,d0
00075572 2B40 0004                  		move.l	d0,4(a5)
00075576 3B59 0008                  		move.w	(a1)+,8(a5)
0007557A 1B7C 0001 000E             		move.b	#1,$E(a5)
00075580 1B46 000D                  		move.b	d6,$D(a5)
00075584 4A04                       		tst.b	d4
00075586 6B00                       		bmi.s	loc_722A8
00075588 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0007558E 2B41 0020                  		move.l	d1,$20(a5)
00075592                            
00075592                            loc_722A8:
00075592 51CF FF7E                  		dbf	d7,loc_72228
00075596                            
00075596 4A2E 0250                  		tst.b	$250(a6)
0007559A 6A00                       		bpl.s	loc_722B8
0007559C 08EE 0002 0340             		bset	#2,$340(a6)
000755A2                            
000755A2                            loc_722B8:
000755A2 4A2E 0310                  		tst.b	$310(a6)
000755A6 6A00                       		bpl.s	locret_722C4
000755A8 08EE 0002 0370             		bset	#2,$370(a6)
000755AE                            
000755AE                            locret_722C4:
000755AE 4E75                       		rts	
000755B0                            ; ===========================================================================
000755B0                            
000755B0                            loc_722C6:
000755B0 4216                       		clr.b	0(a6)
000755B2 4E75                       		rts	
000755B4                            ; ===========================================================================
000755B4 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
000755B8 0000 0000                  		dc.l 0
000755BC 00FF F100                  		dc.l $FFF100
000755C0 00FF F130                  		dc.l $FFF130
000755C4 00FF F190                  		dc.l $FFF190
000755C8 00FF F1C0                  		dc.l $FFF1C0
000755CC 00FF F1F0                  		dc.l $FFF1F0
000755D0 00FF F1F0                  		dc.l $FFF1F0
000755D4 00FF F220                  dword_722EC:	dc.l $FFF220
000755D8 0000 0000                  		dc.l 0
000755DC 00FF F250                  		dc.l $FFF250
000755E0 00FF F280                  		dc.l $FFF280
000755E4 00FF F2B0                  		dc.l $FFF2B0
000755E8 00FF F2E0                  		dc.l $FFF2E0
000755EC 00FF F310                  		dc.l $FFF310
000755F0 00FF F310                  		dc.l $FFF310
000755F4                            ; ===========================================================================
000755F4                            ; ---------------------------------------------------------------------------
000755F4                            ; Play GHZ waterfall sound
000755F4                            ; ---------------------------------------------------------------------------
000755F4                            
000755F4                            Sound_D0toDF:				; XREF: Sound_ChkValue
000755F4 4A2E 0027                  		tst.b	$27(a6)
000755F8 6600 0000                  		bne.w	locret_723C6
000755FC 4A2E 0004                  		tst.b	4(a6)
00075600 6600 0000                  		bne.w	locret_723C6
00075604 4A2E 0024                  		tst.b	$24(a6)
00075608 6600 0000                  		bne.w	locret_723C6
0007560C 2079 0007 4BC2             		movea.l	(Go_SoundD0).l,a0
00075612 0407 00D0                  		subi.b	#$D0,d7
00075616 E54F                       		lsl.w	#2,d7
00075618 2670 7000                  		movea.l	(a0,d7.w),a3
0007561C 224B                       		movea.l	a3,a1
0007561E 7000                       		moveq	#0,d0
00075620 3019                       		move.w	(a1)+,d0
00075622 D08B                       		add.l	a3,d0
00075624 2D40 0020                  		move.l	d0,$20(a6)
00075628 1A19                       		move.b	(a1)+,d5
0007562A 1E19                       		move.b	(a1)+,d7
0007562C 5307                       		subq.b	#1,d7
0007562E 7C30                       		moveq	#$30,d6
00075630                            
00075630                            loc_72348:
00075630 1829 0001                  		move.b	1(a1),d4
00075634 6B00                       		bmi.s	loc_7235A
00075636 08EE 0002 0100             		bset	#2,$100(a6)
0007563C 4BEE 0340                  		lea	$340(a6),a5
00075640 6000                       		bra.s	loc_72364
00075642                            ; ===========================================================================
00075642                            
00075642                            loc_7235A:
00075642 08EE 0002 01F0             		bset	#2,$1F0(a6)
00075648 4BEE 0370                  		lea	$370(a6),a5
0007564C                            
0007564C                            loc_72364:
0007564C 244D                       		movea.l	a5,a2
0007564E 700B                       		moveq	#$B,d0
00075650                            
00075650                            loc_72368:
00075650 429A                       		clr.l	(a2)+
00075652 51C8 FFFC                  		dbf	d0,loc_72368
00075656                            
00075656 3A99                       		move.w	(a1)+,(a5)
00075658 1B45 0002                  		move.b	d5,2(a5)
0007565C 7000                       		moveq	#0,d0
0007565E 3019                       		move.w	(a1)+,d0
00075660 D08B                       		add.l	a3,d0
00075662 2B40 0004                  		move.l	d0,4(a5)
00075666 3B59 0008                  		move.w	(a1)+,8(a5)
0007566A 1B7C 0001 000E             		move.b	#1,$E(a5)
00075670 1B46 000D                  		move.b	d6,$D(a5)
00075674 4A04                       		tst.b	d4
00075676 6B00                       		bmi.s	loc_72396
00075678 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0007567E                            
0007567E                            loc_72396:
0007567E 51CF FFB0                  		dbf	d7,loc_72348
00075682                            
00075682 4A2E 0250                  		tst.b	$250(a6)
00075686 6A00                       		bpl.s	loc_723A6
00075688 08EE 0002 0340             		bset	#2,$340(a6)
0007568E                            
0007568E                            loc_723A6:
0007568E 4A2E 0310                  		tst.b	$310(a6)
00075692 6A00                       		bpl.s	locret_723C6
00075694 08EE 0002 0370             		bset	#2,$370(a6)
0007569A 0004 001F                  		ori.b	#$1F,d4
0007569E 13C4 00C0 0011             		move.b	d4,($C00011).l
000756A4 0844 0005                  		bchg	#5,d4
000756A8 13C4 00C0 0011             		move.b	d4,($C00011).l
000756AE                            
000756AE                            locret_723C6:
000756AE 4E75                       		rts	
000756B0                            ; End of function Sound_ChkValue
000756B0                            
000756B0                            ; ===========================================================================
000756B0 00FF F100                  		dc.l $FFF100
000756B4 00FF F1F0                  		dc.l $FFF1F0
000756B8 00FF F250                  		dc.l $FFF250
000756BC 00FF F310                  		dc.l $FFF310
000756C0 00FF F340                  		dc.l $FFF340
000756C4 00FF F370                  		dc.l $FFF370
000756C8                            
000756C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000756C8                            
000756C8                            
000756C8                            Snd_FadeOut1:				; XREF: Sound_E0
000756C8 4216                       		clr.b	0(a6)
000756CA 4BEE 0220                  		lea	$220(a6),a5
000756CE 7E05                       		moveq	#5,d7
000756D0                            
000756D0                            loc_723EA:
000756D0 4A15                       		tst.b	(a5)
000756D2 6A00 0000                  		bpl.w	loc_72472
000756D6 0895 0007                  		bclr	#7,(a5)
000756DA 7600                       		moveq	#0,d3
000756DC 162D 0001                  		move.b	1(a5),d3
000756E0 6B00                       		bmi.s	loc_7243C
000756E2 4EBA 0000                  		jsr	sub_726FE(pc)
000756E6 0C03 0004                  		cmpi.b	#4,d3
000756EA 6600                       		bne.s	loc_72416
000756EC 4A2E 0340                  		tst.b	$340(a6)
000756F0 6A00                       		bpl.s	loc_72416
000756F2 4BEE 0340                  		lea	$340(a6),a5
000756F6 226E 0020                  		movea.l	$20(a6),a1
000756FA 6000                       		bra.s	loc_72428
000756FC                            ; ===========================================================================
000756FC                            
000756FC                            loc_72416:
000756FC 5503                       		subq.b	#2,d3
000756FE E50B                       		lsl.b	#2,d3
00075700 41FA FEB2                  		lea	dword_722CC(pc),a0
00075704 264D                       		movea.l	a5,a3
00075706 2A70 3000                  		movea.l	(a0,d3.w),a5
0007570A 226E 0018                  		movea.l	$18(a6),a1
0007570E                            
0007570E                            loc_72428:
0007570E 0895 0002                  		bclr	#2,(a5)
00075712 08D5 0001                  		bset	#1,(a5)
00075716 102D 000B                  		move.b	$B(a5),d0
0007571A 4EBA 0000                  		jsr	sub_72C4E(pc)
0007571E 2A4B                       		movea.l	a3,a5
00075720 6000                       		bra.s	loc_72472
00075722                            ; ===========================================================================
00075722                            
00075722                            loc_7243C:
00075722 4EBA 0000                  		jsr	sub_729A0(pc)
00075726 41EE 0370                  		lea	$370(a6),a0
0007572A 0C03 00E0                  		cmpi.b	#$E0,d3
0007572E 6700                       		beq.s	loc_7245A
00075730 0C03 00C0                  		cmpi.b	#$C0,d3
00075734 6700                       		beq.s	loc_7245A
00075736 E60B                       		lsr.b	#3,d3
00075738 41FA FE7A                  		lea	dword_722CC(pc),a0
0007573C 2070 3000                  		movea.l	(a0,d3.w),a0
00075740                            
00075740                            loc_7245A:
00075740 0890 0002                  		bclr	#2,(a0)
00075744 08D0 0001                  		bset	#1,(a0)
00075748 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0007574E 6600                       		bne.s	loc_72472
00075750 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00075758                            
00075758                            loc_72472:
00075758 DAFC 0030                  		adda.w	#$30,a5
0007575C 51CF FF72                  		dbf	d7,loc_723EA
00075760                            
00075760 4E75                       		rts	
00075762                            ; End of function Snd_FadeOut1
00075762                            
00075762                            
00075762                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075762                            
00075762                            
00075762                            Snd_FadeOut2:				; XREF: Sound_E0
00075762 4BEE 0340                  		lea	$340(a6),a5
00075766 4A15                       		tst.b	(a5)
00075768 6A00                       		bpl.s	loc_724AE
0007576A 0895 0007                  		bclr	#7,(a5)
0007576E 0815 0002                  		btst	#2,(a5)
00075772 6600                       		bne.s	loc_724AE
00075774 4EBA 0000                  		jsr	loc_7270A(pc)
00075778 4BEE 0100                  		lea	$100(a6),a5
0007577C 0895 0002                  		bclr	#2,(a5)
00075780 08D5 0001                  		bset	#1,(a5)
00075784 4A15                       		tst.b	(a5)
00075786 6A00                       		bpl.s	loc_724AE
00075788 226E 0018                  		movea.l	$18(a6),a1
0007578C 102D 000B                  		move.b	$B(a5),d0
00075790 4EBA 0000                  		jsr	sub_72C4E(pc)
00075794                            
00075794                            loc_724AE:
00075794 4BEE 0370                  		lea	$370(a6),a5
00075798 4A15                       		tst.b	(a5)
0007579A 6A00                       		bpl.s	locret_724E4
0007579C 0895 0007                  		bclr	#7,(a5)
000757A0 0815 0002                  		btst	#2,(a5)
000757A4 6600                       		bne.s	locret_724E4
000757A6 4EBA 0000                  		jsr	loc_729A6(pc)
000757AA 4BEE 01F0                  		lea	$1F0(a6),a5
000757AE 0895 0002                  		bclr	#2,(a5)
000757B2 08D5 0001                  		bset	#1,(a5)
000757B6 4A15                       		tst.b	(a5)
000757B8 6A00                       		bpl.s	locret_724E4
000757BA 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
000757C0 6600                       		bne.s	locret_724E4
000757C2 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
000757CA                            
000757CA                            locret_724E4:
000757CA 4E75                       		rts	
000757CC                            ; End of function Snd_FadeOut2
000757CC                            
000757CC                            ; ===========================================================================
000757CC                            ; ---------------------------------------------------------------------------
000757CC                            ; Fade out music
000757CC                            ; ---------------------------------------------------------------------------
000757CC                            
000757CC                            Sound_E0:				; XREF: Sound_ExIndex
000757CC 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
000757D0 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
000757D4 1D7C 0003 0006             		move.b	#3,6(a6)
000757DA 1D7C 0028 0004             		move.b	#$28,4(a6)
000757E0 422E 0040                  		clr.b	$40(a6)
000757E4 422E 002A                  		clr.b	$2A(a6)
000757E8 4E75                       		rts	
000757EA                            
000757EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000757EA                            
000757EA                            
000757EA                            sub_72504:				; XREF: sub_71B4C
000757EA 102E 0006                  		move.b	6(a6),d0
000757EE 6700                       		beq.s	loc_72510
000757F0 532E 0006                  		subq.b	#1,6(a6)
000757F4 4E75                       		rts	
000757F6                            ; ===========================================================================
000757F6                            
000757F6                            loc_72510:
000757F6 532E 0004                  		subq.b	#1,4(a6)
000757FA 6700 0000                  		beq.w	Sound_E4
000757FE 1D7C 0003 0006             		move.b	#3,6(a6)
00075804 4BEE 0070                  		lea	$70(a6),a5
00075808 7E05                       		moveq	#5,d7
0007580A                            
0007580A                            loc_72524:
0007580A 4A15                       		tst.b	(a5)
0007580C 6A00                       		bpl.s	loc_72538
0007580E 522D 0009                  		addq.b	#1,9(a5)
00075812 6A00                       		bpl.s	loc_72534
00075814 0895 0007                  		bclr	#7,(a5)
00075818 6000                       		bra.s	loc_72538
0007581A                            ; ===========================================================================
0007581A                            
0007581A                            loc_72534:
0007581A 4EBA 0000                  		jsr	sub_72CB4(pc)
0007581E                            
0007581E                            loc_72538:
0007581E DAFC 0030                  		adda.w	#$30,a5
00075822 51CF FFE6                  		dbf	d7,loc_72524
00075826                            
00075826 7E02                       		moveq	#2,d7
00075828                            
00075828                            loc_72542:
00075828 4A15                       		tst.b	(a5)
0007582A 6A00                       		bpl.s	loc_72560
0007582C 522D 0009                  		addq.b	#1,9(a5)
00075830 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
00075836 6500                       		bcs.s	loc_72558
00075838 0895 0007                  		bclr	#7,(a5)
0007583C 6000                       		bra.s	loc_72560
0007583E                            ; ===========================================================================
0007583E                            
0007583E                            loc_72558:
0007583E 1C2D 0009                  		move.b	9(a5),d6
00075842 4EBA 0000                  		jsr	sub_7296A(pc)
00075846                            
00075846                            loc_72560:
00075846 DAFC 0030                  		adda.w	#$30,a5
0007584A 51CF FFDC                  		dbf	d7,loc_72542
0007584E                            
0007584E 4E75                       		rts	
00075850                            ; End of function sub_72504
00075850                            
00075850                            
00075850                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075850                            
00075850                            
00075850                            sub_7256A:				; XREF: Sound_E4; sub_725CA
00075850 7602                       		moveq	#2,d3
00075852 7028                       		moveq	#$28,d0
00075854                            
00075854                            loc_7256E:
00075854 1203                       		move.b	d3,d1
00075856 4EBA 0000                  		jsr	sub_7272E(pc)
0007585A 5801                       		addq.b	#4,d1
0007585C 4EBA 0000                  		jsr	sub_7272E(pc)
00075860 51CB FFF2                  		dbf	d3,loc_7256E
00075864                            
00075864 7040                       		moveq	#$40,d0
00075866 727F                       		moveq	#$7F,d1
00075868 7802                       		moveq	#2,d4
0007586A                            
0007586A                            loc_72584:
0007586A 7603                       		moveq	#3,d3
0007586C                            
0007586C                            loc_72586:
0007586C 4EBA 0000                  		jsr	sub_7272E(pc)
00075870 4EBA 0000                  		jsr	sub_72764(pc)
00075874 5840                       		addq.w	#4,d0
00075876 51CB FFF4                  		dbf	d3,loc_72586
0007587A                            
0007587A 0400 000F                  		subi.b	#$F,d0
0007587E 51CC FFEA                  		dbf	d4,loc_72584
00075882                            
00075882 4E75                       		rts	
00075884                            ; End of function sub_7256A
00075884                            
00075884                            ; ===========================================================================
00075884                            ; ---------------------------------------------------------------------------
00075884                            ; Stop music
00075884                            ; ---------------------------------------------------------------------------
00075884                            
00075884                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
00075884 702B                       		moveq	#$2B,d0
00075886 123C 0080                  		move.b	#$80,d1
0007588A 4EBA 0000                  		jsr	sub_7272E(pc)
0007588E 7027                       		moveq	#$27,d0
00075890 7200                       		moveq	#0,d1
00075892 4EBA 0000                  		jsr	sub_7272E(pc)
00075896 204E                       		movea.l	a6,a0
00075898 303C 00E3                  		move.w	#$E3,d0
0007589C                            
0007589C                            loc_725B6:
0007589C 4298                       		clr.l	(a0)+
0007589E 51C8 FFFC                  		dbf	d0,loc_725B6
000758A2                            
000758A2 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
000758A8 4EBA FFA6                  		jsr	sub_7256A(pc)
000758AC 6000 0000                  		bra.w	sub_729B6
000758B0                            
000758B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000758B0                            
000758B0                            
000758B0                            sub_725CA:				; XREF: Sound_ChkValue
000758B0 204E                       		movea.l	a6,a0
000758B2 1216                       		move.b	0(a6),d1
000758B4 142E 0027                  		move.b	$27(a6),d2
000758B8 162E 002A                  		move.b	$2A(a6),d3
000758BC 182E 0026                  		move.b	$26(a6),d4
000758C0 3A2E 000A                  		move.w	$A(a6),d5
000758C4 303C 0087                  		move.w	#$87,d0
000758C8                            
000758C8                            loc_725E4:
000758C8 4298                       		clr.l	(a0)+
000758CA 51C8 FFFC                  		dbf	d0,loc_725E4
000758CE                            
000758CE 1C81                       		move.b	d1,0(a6)
000758D0 1D42 0027                  		move.b	d2,$27(a6)
000758D4 1D43 002A                  		move.b	d3,$2A(a6)
000758D8 1D44 0026                  		move.b	d4,$26(a6)
000758DC 3D45 000A                  		move.w	d5,$A(a6)
000758E0 1D7C 0080 0009             		move.b	#$80,9(a6)
000758E6 4EBA FF68                  		jsr	sub_7256A(pc)
000758EA 6000 0000                  		bra.w	sub_729B6
000758EE                            ; End of function sub_725CA
000758EE                            
000758EE                            
000758EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000758EE                            
000758EE                            
000758EE                            sub_7260C:				; XREF: sub_71B4C
000758EE 1D6E 0002 0001             		move.b	2(a6),1(a6)
000758F4 41EE 004E                  		lea	$4E(a6),a0
000758F8 7030                       		moveq	#$30,d0
000758FA 7209                       		moveq	#9,d1
000758FC                            
000758FC                            loc_7261A:
000758FC 5210                       		addq.b	#1,(a0)
000758FE D0C0                       		adda.w	d0,a0
00075900 51C9 FFFA                  		dbf	d1,loc_7261A
00075904                            
00075904 4E75                       		rts	
00075906                            ; End of function sub_7260C
00075906                            
00075906                            ; ===========================================================================
00075906                            ; ---------------------------------------------------------------------------
00075906                            ; Speed	up music
00075906                            ; ---------------------------------------------------------------------------
00075906                            
00075906                            Sound_E2:				; XREF: Sound_ExIndex
00075906 4A2E 0027                  		tst.b	$27(a6)
0007590A 6600                       		bne.s	loc_7263E
0007590C 1D6E 0029 0002             		move.b	$29(a6),2(a6)
00075912 1D6E 0029 0001             		move.b	$29(a6),1(a6)
00075918 1D7C 0080 002A             		move.b	#$80,$2A(a6)
0007591E 4E75                       		rts	
00075920                            ; ===========================================================================
00075920                            
00075920                            loc_7263E:
00075920 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
00075926 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
0007592C 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
00075932 4E75                       		rts	
00075934                            ; ===========================================================================
00075934                            ; ---------------------------------------------------------------------------
00075934                            ; Change music back to normal speed
00075934                            ; ---------------------------------------------------------------------------
00075934                            
00075934                            Sound_E3:				; XREF: Sound_ExIndex
00075934 4A2E 0027                  		tst.b	$27(a6)
00075938 6600                       		bne.s	loc_7266A
0007593A 1D6E 0028 0002             		move.b	$28(a6),2(a6)
00075940 1D6E 0028 0001             		move.b	$28(a6),1(a6)
00075946 422E 002A                  		clr.b	$2A(a6)
0007594A 4E75                       		rts	
0007594C                            ; ===========================================================================
0007594C                            
0007594C                            loc_7266A:
0007594C 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
00075952 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
00075958 422E 03CA                  		clr.b	$3CA(a6)
0007595C 4E75                       		rts	
0007595E                            
0007595E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007595E                            
0007595E                            
0007595E                            sub_7267C:				; XREF: sub_71B4C
0007595E 4A2E 0025                  		tst.b	$25(a6)
00075962 6700                       		beq.s	loc_72688
00075964 532E 0025                  		subq.b	#1,$25(a6)
00075968 4E75                       		rts	
0007596A                            ; ===========================================================================
0007596A                            
0007596A                            loc_72688:
0007596A 4A2E 0026                  		tst.b	$26(a6)
0007596E 6700                       		beq.s	loc_726D6
00075970 532E 0026                  		subq.b	#1,$26(a6)
00075974 1D7C 0002 0025             		move.b	#2,$25(a6)
0007597A 4BEE 0070                  		lea	$70(a6),a5
0007597E 7E05                       		moveq	#5,d7
00075980                            
00075980                            loc_7269E:
00075980 4A15                       		tst.b	(a5)
00075982 6A00                       		bpl.s	loc_726AA
00075984 532D 0009                  		subq.b	#1,9(a5)
00075988 4EBA 0000                  		jsr	sub_72CB4(pc)
0007598C                            
0007598C                            loc_726AA:
0007598C DAFC 0030                  		adda.w	#$30,a5
00075990 51CF FFEE                  		dbf	d7,loc_7269E
00075994 7E02                       		moveq	#2,d7
00075996                            
00075996                            loc_726B4:
00075996 4A15                       		tst.b	(a5)
00075998 6A00                       		bpl.s	loc_726CC
0007599A 532D 0009                  		subq.b	#1,9(a5)
0007599E 1C2D 0009                  		move.b	9(a5),d6
000759A2 0C06 0010                  		cmpi.b	#$10,d6
000759A6 6500                       		bcs.s	loc_726C8
000759A8 7C0F                       		moveq	#$F,d6
000759AA                            
000759AA                            loc_726C8:
000759AA 4EBA 0000                  		jsr	sub_7296A(pc)
000759AE                            
000759AE                            loc_726CC:
000759AE DAFC 0030                  		adda.w	#$30,a5
000759B2 51CF FFE2                  		dbf	d7,loc_726B4
000759B6 4E75                       		rts	
000759B8                            ; ===========================================================================
000759B8                            
000759B8                            loc_726D6:
000759B8 08AE 0002 0040             		bclr	#2,$40(a6)
000759BE 422E 0024                  		clr.b	$24(a6)
000759C2 4E75                       		rts	
000759C4                            ; End of function sub_7267C
000759C4                            
000759C4                            ; ===========================================================================
000759C4                            
000759C4                            loc_726E2:				; XREF: sub_71CCA
000759C4 0815 0001                  		btst	#1,(a5)
000759C8 6600                       		bne.s	locret_726FC
000759CA 0815 0002                  		btst	#2,(a5)
000759CE 6600                       		bne.s	locret_726FC
000759D0 7028                       		moveq	#$28,d0
000759D2 122D 0001                  		move.b	1(a5),d1
000759D6 0001 00F0                  		ori.b	#-$10,d1
000759DA 6000 0000                  		bra.w	sub_7272E
000759DE                            ; ===========================================================================
000759DE                            
000759DE                            locret_726FC:
000759DE 4E75                       		rts	
000759E0                            
000759E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000759E0                            
000759E0                            
000759E0                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
000759E0 0815 0004                  		btst	#4,(a5)
000759E4 6600                       		bne.s	locret_72714
000759E6 0815 0002                  		btst	#2,(a5)
000759EA 6600                       		bne.s	locret_72714
000759EC                            
000759EC                            loc_7270A:				; XREF: Snd_FadeOut2
000759EC 7028                       		moveq	#$28,d0
000759EE 122D 0001                  		move.b	1(a5),d1
000759F2 6000 0000                  		bra.w	sub_7272E
000759F6                            ; ===========================================================================
000759F6                            
000759F6                            locret_72714:
000759F6 4E75                       		rts	
000759F8                            ; End of function sub_726FE
000759F8                            
000759F8                            ; ===========================================================================
000759F8                            
000759F8                            loc_72716:				; XREF: sub_72A5A
000759F8 0815 0002                  		btst	#2,(a5)
000759FC 6600                       		bne.s	locret_72720
000759FE 6000 0000                  		bra.w	sub_72722
00075A02                            ; ===========================================================================
00075A02                            
00075A02                            locret_72720:
00075A02 4E75                       		rts	
00075A04                            
00075A04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075A04                            
00075A04                            
00075A04                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
00075A04 082D 0002 0001             		btst	#2,1(a5)
00075A0A 6600                       		bne.s	loc_7275A
00075A0C D02D 0001                  		add.b	1(a5),d0
00075A10                            ; End of function sub_72722
00075A10                            
00075A10                            
00075A10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075A10                            
00075A10                            
00075A10                            sub_7272E:				; XREF: loc_71E6A
00075A10 1439 00A0 4000             		move.b	($A04000).l,d2
00075A16 0802 0007                  		btst	#7,d2
00075A1A 66F4                       		bne.s	sub_7272E
00075A1C 13C0 00A0 4000             		move.b	d0,($A04000).l
00075A22 4E71                       		nop	
00075A24 4E71                       		nop	
00075A26 4E71                       		nop	
00075A28                            
00075A28                            loc_72746:
00075A28 1439 00A0 4000             		move.b	($A04000).l,d2
00075A2E 0802 0007                  		btst	#7,d2
00075A32 66F4                       		bne.s	loc_72746
00075A34                            
00075A34 13C1 00A0 4001             		move.b	d1,($A04001).l
00075A3A 4E75                       		rts	
00075A3C                            ; End of function sub_7272E
00075A3C                            
00075A3C                            ; ===========================================================================
00075A3C                            
00075A3C                            loc_7275A:				; XREF: sub_72722
00075A3C 142D 0001                  		move.b	1(a5),d2
00075A40 0882 0002                  		bclr	#2,d2
00075A44 D002                       		add.b	d2,d0
00075A46                            
00075A46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075A46                            
00075A46                            
00075A46                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
00075A46 1439 00A0 4000             		move.b	($A04000).l,d2
00075A4C 0802 0007                  		btst	#7,d2
00075A50 66F4                       		bne.s	sub_72764
00075A52 13C0 00A0 4002             		move.b	d0,($A04002).l
00075A58 4E71                       		nop	
00075A5A 4E71                       		nop	
00075A5C 4E71                       		nop	
00075A5E                            
00075A5E                            loc_7277C:
00075A5E 1439 00A0 4000             		move.b	($A04000).l,d2
00075A64 0802 0007                  		btst	#7,d2
00075A68 66F4                       		bne.s	loc_7277C
00075A6A                            
00075A6A 13C1 00A0 4003             		move.b	d1,($A04003).l
00075A70 4E75                       		rts	
00075A72                            ; End of function sub_72764
00075A72                            
00075A72                            ; ===========================================================================
00075A72 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
00075A84 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
00075A96 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
00075AA6 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
00075AB6 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
00075AC6 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
00075AD6 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
00075AE6 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
00075AF6 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
00075B06 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
00075B16 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
00075B26 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
00075B32                            
00075B32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075B32                            
00075B32                            
00075B32                            sub_72850:				; XREF: sub_71B4C
00075B32 532D 000E                  		subq.b	#1,$E(a5)
00075B36 6600                       		bne.s	loc_72866
00075B38 0895 0004                  		bclr	#4,(a5)
00075B3C 4EBA 0000                  		jsr	sub_72878(pc)
00075B40 4EBA 0000                  		jsr	sub_728DC(pc)
00075B44 6000 0000                  		bra.w	loc_7292E
00075B48                            ; ===========================================================================
00075B48                            
00075B48                            loc_72866:
00075B48 4EBA F4B2                  		jsr	sub_71D9E(pc)
00075B4C 4EBA 0000                  		jsr	sub_72926(pc)
00075B50 4EBA F4D2                  		jsr	sub_71DC6(pc)
00075B54 4EBA 0000                  		jsr	sub_728E2(pc)
00075B58 4E75                       		rts	
00075B5A                            ; End of function sub_72850
00075B5A                            
00075B5A                            
00075B5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075B5A                            
00075B5A                            
00075B5A                            sub_72878:				; XREF: sub_72850
00075B5A 0895 0001                  		bclr	#1,(a5)
00075B5E 286D 0004                  		movea.l	4(a5),a4
00075B62                            
00075B62                            loc_72880:
00075B62 7A00                       		moveq	#0,d5
00075B64 1A1C                       		move.b	(a4)+,d5
00075B66 0C05 00E0                  		cmpi.b	#$E0,d5
00075B6A 6500                       		bcs.s	loc_72890
00075B6C 4EBA 0000                  		jsr	sub_72A5A(pc)
00075B70 60F0                       		bra.s	loc_72880
00075B72                            ; ===========================================================================
00075B72                            
00075B72                            loc_72890:
00075B72 4A05                       		tst.b	d5
00075B74 6A00                       		bpl.s	loc_728A4
00075B76 4EBA 0000                  		jsr	sub_728AC(pc)
00075B7A 1A1C                       		move.b	(a4)+,d5
00075B7C 4A05                       		tst.b	d5
00075B7E 6A00                       		bpl.s	loc_728A4
00075B80 534C                       		subq.w	#1,a4
00075B82 6000 F43A                  		bra.w	sub_71D60
00075B86                            ; ===========================================================================
00075B86                            
00075B86                            loc_728A4:
00075B86 4EBA F416                  		jsr	sub_71D40(pc)
00075B8A 6000 F432                  		bra.w	sub_71D60
00075B8E                            ; End of function sub_72878
00075B8E                            
00075B8E                            
00075B8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075B8E                            
00075B8E                            
00075B8E                            sub_728AC:				; XREF: sub_72878
00075B8E 0405 0081                  		subi.b	#$81,d5
00075B92 6500                       		bcs.s	loc_728CA
00075B94 DA2D 0008                  		add.b	8(a5),d5
00075B98 0245 007F                  		andi.w	#$7F,d5
00075B9C E34D                       		lsl.w	#1,d5
00075B9E 41FA 0000                  		lea	word_729CE(pc),a0
00075BA2 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
00075BA8 6000 F414                  		bra.w	sub_71D60
00075BAC                            ; ===========================================================================
00075BAC                            
00075BAC                            loc_728CA:
00075BAC 08D5 0001                  		bset	#1,(a5)
00075BB0 3B7C FFFF 0010             		move.w	#-1,$10(a5)
00075BB6 4EBA F406                  		jsr	sub_71D60(pc)
00075BBA 6000 0000                  		bra.w	sub_729A0
00075BBE                            ; End of function sub_728AC
00075BBE                            
00075BBE                            
00075BBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075BBE                            
00075BBE                            
00075BBE                            sub_728DC:				; XREF: sub_72850
00075BBE 3C2D 0010                  		move.w	$10(a5),d6
00075BC2 6B00                       		bmi.s	loc_72920
00075BC4                            ; End of function sub_728DC
00075BC4                            
00075BC4                            
00075BC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075BC4                            
00075BC4                            
00075BC4                            sub_728E2:				; XREF: sub_72850
00075BC4 102D 001E                  		move.b	$1E(a5),d0
00075BC8 4880                       		ext.w	d0
00075BCA DC40                       		add.w	d0,d6
00075BCC 0815 0002                  		btst	#2,(a5)
00075BD0 6600                       		bne.s	locret_7291E
00075BD2 0815 0001                  		btst	#1,(a5)
00075BD6 6600                       		bne.s	locret_7291E
00075BD8 102D 0001                  		move.b	1(a5),d0
00075BDC 0C00 00E0                  		cmpi.b	#$E0,d0
00075BE0 6600                       		bne.s	loc_72904
00075BE2 103C 00C0                  		move.b	#$C0,d0
00075BE6                            
00075BE6                            loc_72904:
00075BE6 3206                       		move.w	d6,d1
00075BE8 0201 000F                  		andi.b	#$F,d1
00075BEC 8001                       		or.b	d1,d0
00075BEE E84E                       		lsr.w	#4,d6
00075BF0 0206 003F                  		andi.b	#$3F,d6
00075BF4 13C0 00C0 0011             		move.b	d0,($C00011).l
00075BFA 13C6 00C0 0011             		move.b	d6,($C00011).l
00075C00                            
00075C00                            locret_7291E:
00075C00 4E75                       		rts	
00075C02                            ; End of function sub_728E2
00075C02                            
00075C02                            ; ===========================================================================
00075C02                            
00075C02                            loc_72920:				; XREF: sub_728DC
00075C02 08D5 0001                  		bset	#1,(a5)
00075C06 4E75                       		rts	
00075C08                            
00075C08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075C08                            
00075C08                            
00075C08                            sub_72926:				; XREF: sub_72850
00075C08 4A2D 000B                  		tst.b	$B(a5)
00075C0C 6700 0000                  		beq.w	locret_7298A
00075C10                            
00075C10                            loc_7292E:				; XREF: sub_72850
00075C10 1C2D 0009                  		move.b	9(a5),d6
00075C14 7000                       		moveq	#0,d0
00075C16 102D 000B                  		move.b	$B(a5),d0
00075C1A 6700                       		beq.s	sub_7296A
00075C1C 2079 0007 4BD2             		movea.l	(Go_PSGIndex).l,a0
00075C22 5340                       		subq.w	#1,d0
00075C24 E548                       		lsl.w	#2,d0
00075C26 2070 0000                  		movea.l	(a0,d0.w),a0
00075C2A 102D 000C                  		move.b	$C(a5),d0
00075C2E 1030 0000                  		move.b	(a0,d0.w),d0
00075C32 522D 000C                  		addq.b	#1,$C(a5)
00075C36 0800 0007                  		btst	#7,d0
00075C3A 6700                       		beq.s	loc_72960
00075C3C 0C00 0080                  		cmpi.b	#$80,d0
00075C40 6700                       		beq.s	loc_7299A
00075C42                            
00075C42                            loc_72960:
00075C42 DC40                       		add.w	d0,d6
00075C44 0C06 0010                  		cmpi.b	#$10,d6
00075C48 6500                       		bcs.s	sub_7296A
00075C4A 7C0F                       		moveq	#$F,d6
00075C4C                            ; End of function sub_72926
00075C4C                            
00075C4C                            
00075C4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075C4C                            
00075C4C                            
00075C4C                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
00075C4C 0815 0001                  		btst	#1,(a5)
00075C50 6600                       		bne.s	locret_7298A
00075C52 0815 0002                  		btst	#2,(a5)
00075C56 6600                       		bne.s	locret_7298A
00075C58 0815 0004                  		btst	#4,(a5)
00075C5C 6600                       		bne.s	loc_7298C
00075C5E                            
00075C5E                            loc_7297C:
00075C5E 8C2D 0001                  		or.b	1(a5),d6
00075C62 0606 0010                  		addi.b	#$10,d6
00075C66 13C6 00C0 0011             		move.b	d6,($C00011).l
00075C6C                            
00075C6C                            locret_7298A:
00075C6C 4E75                       		rts	
00075C6E                            ; ===========================================================================
00075C6E                            
00075C6E                            loc_7298C:
00075C6E 4A2D 0013                  		tst.b	$13(a5)
00075C72 67EA                       		beq.s	loc_7297C
00075C74 4A2D 0012                  		tst.b	$12(a5)
00075C78 66E4                       		bne.s	loc_7297C
00075C7A 4E75                       		rts	
00075C7C                            ; End of function sub_7296A
00075C7C                            
00075C7C                            ; ===========================================================================
00075C7C                            
00075C7C                            loc_7299A:				; XREF: sub_72926
00075C7C 532D 000C                  		subq.b	#1,$C(a5)
00075C80 4E75                       		rts	
00075C82                            
00075C82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075C82                            
00075C82                            
00075C82                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
00075C82 0815 0002                  		btst	#2,(a5)
00075C86 6600                       		bne.s	locret_729B4
00075C88                            
00075C88                            loc_729A6:				; XREF: Snd_FadeOut2
00075C88 102D 0001                  		move.b	1(a5),d0
00075C8C 0000 001F                  		ori.b	#$1F,d0
00075C90 13C0 00C0 0011             		move.b	d0,($C00011).l
00075C96                            
00075C96                            locret_729B4:
00075C96 4E75                       		rts	
00075C98                            ; End of function sub_729A0
00075C98                            
00075C98                            
00075C98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075C98                            
00075C98                            
00075C98                            sub_729B6:				; XREF: loc_71E7C
00075C98 41F9 00C0 0011             		lea	($C00011).l,a0
00075C9E 10BC 009F                  		move.b	#$9F,(a0)
00075CA2 10BC 00BF                  		move.b	#$BF,(a0)
00075CA6 10BC 00DF                  		move.b	#$DF,(a0)
00075CAA 10BC 00FF                  		move.b	#$FF,(a0)
00075CAE 4E75                       		rts	
00075CB0                            ; End of function sub_729B6
00075CB0                            
00075CB0                            ; ===========================================================================
00075CB0 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
00075CC2 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
00075CD4 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
00075CE8 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
00075CFC 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
00075D10 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
00075D24 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
00075D38 0011 0000                  		dc.w $11, 0
00075D3C                            
00075D3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075D3C                            
00075D3C                            
00075D3C                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00075D3C 0445 00E0                  		subi.w	#$E0,d5
00075D40 E54D                       		lsl.w	#2,d5
00075D42 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
00075D46                            ; End of function sub_72A5A
00075D46                            
00075D46                            ; ===========================================================================
00075D46                            
00075D46                            loc_72A64:
00075D46 6000 0000                  		bra.w	loc_72ACC
00075D4A                            ; ===========================================================================
00075D4A 6000 0000                  		bra.w	loc_72AEC
00075D4E                            ; ===========================================================================
00075D4E 6000 0000                  		bra.w	loc_72AF2
00075D52                            ; ===========================================================================
00075D52 6000 0000                  		bra.w	loc_72AF8
00075D56                            ; ===========================================================================
00075D56 6000 0000                  		bra.w	loc_72B14
00075D5A                            ; ===========================================================================
00075D5A 6000 0000                  		bra.w	loc_72B9E
00075D5E                            ; ===========================================================================
00075D5E 6000 0000                  		bra.w	loc_72BA4
00075D62                            ; ===========================================================================
00075D62 6000 0000                  		bra.w	loc_72BAE
00075D66                            ; ===========================================================================
00075D66 6000 0000                  		bra.w	loc_72BB4
00075D6A                            ; ===========================================================================
00075D6A 6000 0000                  		bra.w	loc_72BBE
00075D6E                            ; ===========================================================================
00075D6E 6000 0000                  		bra.w	loc_72BC6
00075D72                            ; ===========================================================================
00075D72 6000 0000                  		bra.w	loc_72BD0
00075D76                            ; ===========================================================================
00075D76 6000 0000                  		bra.w	loc_72BE6
00075D7A                            ; ===========================================================================
00075D7A 6000 0000                  		bra.w	loc_72BEE
00075D7E                            ; ===========================================================================
00075D7E 6000 0000                  		bra.w	loc_72BF4
00075D82                            ; ===========================================================================
00075D82 6000 0000                  		bra.w	loc_72C26
00075D86                            ; ===========================================================================
00075D86 6000 0000                  		bra.w	loc_72D30
00075D8A                            ; ===========================================================================
00075D8A 6000 0000                  		bra.w	loc_72D52
00075D8E                            ; ===========================================================================
00075D8E 6000 0000                  		bra.w	loc_72D58
00075D92                            ; ===========================================================================
00075D92 6000 0000                  		bra.w	loc_72E06
00075D96                            ; ===========================================================================
00075D96 6000 0000                  		bra.w	loc_72E20
00075D9A                            ; ===========================================================================
00075D9A 6000 0000                  		bra.w	loc_72E26
00075D9E                            ; ===========================================================================
00075D9E 6000 0000                  		bra.w	loc_72E2C
00075DA2                            ; ===========================================================================
00075DA2 6000 0000                  		bra.w	loc_72E38
00075DA6                            ; ===========================================================================
00075DA6 6000 0000                  		bra.w	loc_72E52
00075DAA                            ; ===========================================================================
00075DAA 6000 0000                  		bra.w	loc_72E64
00075DAE                            ; ===========================================================================
00075DAE                            
00075DAE                            loc_72ACC:				; XREF: loc_72A64
00075DAE 121C                       		move.b	(a4)+,d1
00075DB0 4A2D 0001                  		tst.b	1(a5)
00075DB4 6B00                       		bmi.s	locret_72AEA
00075DB6 102D 000A                  		move.b	$A(a5),d0
00075DBA 0200 0037                  		andi.b	#$37,d0
00075DBE 8200                       		or.b	d0,d1
00075DC0 1B41 000A                  		move.b	d1,$A(a5)
00075DC4 103C 00B4                  		move.b	#$B4,d0
00075DC8 6000 FC2E                  		bra.w	loc_72716
00075DCC                            ; ===========================================================================
00075DCC                            
00075DCC                            locret_72AEA:
00075DCC 4E75                       		rts	
00075DCE                            ; ===========================================================================
00075DCE                            
00075DCE                            loc_72AEC:				; XREF: loc_72A64
00075DCE 1B5C 001E                  		move.b	(a4)+,$1E(a5)
00075DD2 4E75                       		rts	
00075DD4                            ; ===========================================================================
00075DD4                            
00075DD4                            loc_72AF2:				; XREF: loc_72A64
00075DD4 1D5C 0007                  		move.b	(a4)+,7(a6)
00075DD8 4E75                       		rts	
00075DDA                            ; ===========================================================================
00075DDA                            
00075DDA                            loc_72AF8:				; XREF: loc_72A64
00075DDA 7000                       		moveq	#0,d0
00075DDC 102D 000D                  		move.b	$D(a5),d0
00075DE0 2875 0000                  		movea.l	(a5,d0.w),a4
00075DE4 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
00075DEC 544C                       		addq.w	#2,a4
00075DEE 5800                       		addq.b	#4,d0
00075DF0 1B40 000D                  		move.b	d0,$D(a5)
00075DF4 4E75                       		rts	
00075DF6                            ; ===========================================================================
00075DF6                            
00075DF6                            loc_72B14:				; XREF: loc_72A64
00075DF6 204E                       		movea.l	a6,a0
00075DF8 43EE 03A0                  		lea	$3A0(a6),a1
00075DFC 303C 0087                  		move.w	#$87,d0
00075E00                            
00075E00                            loc_72B1E:
00075E00 20D9                       		move.l	(a1)+,(a0)+
00075E02 51C8 FFFC                  		dbf	d0,loc_72B1E
00075E06                            
00075E06 08EE 0002 0040             		bset	#2,$40(a6)
00075E0C 264D                       		movea.l	a5,a3
00075E0E 1C3C 0028                  		move.b	#$28,d6
00075E12 9C2E 0026                  		sub.b	$26(a6),d6
00075E16 7E05                       		moveq	#5,d7
00075E18 4BEE 0070                  		lea	$70(a6),a5
00075E1C                            
00075E1C                            loc_72B3A:
00075E1C 0815 0007                  		btst	#7,(a5)
00075E20 6700                       		beq.s	loc_72B5C
00075E22 08D5 0001                  		bset	#1,(a5)
00075E26 DD2D 0009                  		add.b	d6,9(a5)
00075E2A 0815 0002                  		btst	#2,(a5)
00075E2E 6600                       		bne.s	loc_72B5C
00075E30 7000                       		moveq	#0,d0
00075E32 102D 000B                  		move.b	$B(a5),d0
00075E36 226E 0018                  		movea.l	$18(a6),a1
00075E3A 4EBA 0000                  		jsr	sub_72C4E(pc)
00075E3E                            
00075E3E                            loc_72B5C:
00075E3E DAFC 0030                  		adda.w	#$30,a5
00075E42 51CF FFD8                  		dbf	d7,loc_72B3A
00075E46                            
00075E46 7E02                       		moveq	#2,d7
00075E48                            
00075E48                            loc_72B66:
00075E48 0815 0007                  		btst	#7,(a5)
00075E4C 6700                       		beq.s	loc_72B78
00075E4E 08D5 0001                  		bset	#1,(a5)
00075E52 4EBA FE2E                  		jsr	sub_729A0(pc)
00075E56 DD2D 0009                  		add.b	d6,9(a5)
00075E5A                            
00075E5A                            loc_72B78:
00075E5A DAFC 0030                  		adda.w	#$30,a5
00075E5E 51CF FFE8                  		dbf	d7,loc_72B66
00075E62 2A4B                       		movea.l	a3,a5
00075E64 1D7C 0080 0024             		move.b	#$80,$24(a6)
00075E6A 1D7C 0028 0026             		move.b	#$28,$26(a6)
00075E70 422E 0027                  		clr.b	$27(a6)
00075E74 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00075E7C 504F                       		addq.w	#8,sp
00075E7E 4E75                       		rts	
00075E80                            ; ===========================================================================
00075E80                            
00075E80                            loc_72B9E:				; XREF: loc_72A64
00075E80 1B5C 0002                  		move.b	(a4)+,2(a5)
00075E84 4E75                       		rts	
00075E86                            ; ===========================================================================
00075E86                            
00075E86                            loc_72BA4:				; XREF: loc_72A64
00075E86 101C                       		move.b	(a4)+,d0
00075E88 D12D 0009                  		add.b	d0,9(a5)
00075E8C 6000 0000                  		bra.w	sub_72CB4
00075E90                            ; ===========================================================================
00075E90                            
00075E90                            loc_72BAE:				; XREF: loc_72A64
00075E90 08D5 0004                  		bset	#4,(a5)
00075E94 4E75                       		rts	
00075E96                            ; ===========================================================================
00075E96                            
00075E96                            loc_72BB4:				; XREF: loc_72A64
00075E96 1B54 0012                  		move.b	(a4),$12(a5)
00075E9A 1B5C 0013                  		move.b	(a4)+,$13(a5)
00075E9E 4E75                       		rts	
00075EA0                            ; ===========================================================================
00075EA0                            
00075EA0                            loc_72BBE:				; XREF: loc_72A64
00075EA0 101C                       		move.b	(a4)+,d0
00075EA2 D12D 0008                  		add.b	d0,8(a5)
00075EA6 4E75                       		rts	
00075EA8                            ; ===========================================================================
00075EA8                            
00075EA8                            loc_72BC6:				; XREF: loc_72A64
00075EA8 1D54 0002                  		move.b	(a4),2(a6)
00075EAC 1D5C 0001                  		move.b	(a4)+,1(a6)
00075EB0 4E75                       		rts	
00075EB2                            ; ===========================================================================
00075EB2                            
00075EB2                            loc_72BD0:				; XREF: loc_72A64
00075EB2 41EE 0040                  		lea	$40(a6),a0
00075EB6 101C                       		move.b	(a4)+,d0
00075EB8 7230                       		moveq	#$30,d1
00075EBA 7409                       		moveq	#9,d2
00075EBC                            
00075EBC                            loc_72BDA:
00075EBC 1140 0002                  		move.b	d0,2(a0)
00075EC0 D0C1                       		adda.w	d1,a0
00075EC2 51CA FFF8                  		dbf	d2,loc_72BDA
00075EC6                            
00075EC6 4E75                       		rts	
00075EC8                            ; ===========================================================================
00075EC8                            
00075EC8                            loc_72BE6:				; XREF: loc_72A64
00075EC8 101C                       		move.b	(a4)+,d0
00075ECA D12D 0009                  		add.b	d0,9(a5)
00075ECE 4E75                       		rts	
00075ED0                            ; ===========================================================================
00075ED0                            
00075ED0                            loc_72BEE:				; XREF: loc_72A64
00075ED0 422E 002C                  		clr.b	$2C(a6)
00075ED4 4E75                       		rts	
00075ED6                            ; ===========================================================================
00075ED6                            
00075ED6                            loc_72BF4:				; XREF: loc_72A64
00075ED6 0895 0007                  		bclr	#7,(a5)
00075EDA 0895 0004                  		bclr	#4,(a5)
00075EDE 4EBA FB00                  		jsr	sub_726FE(pc)
00075EE2 4A2E 0250                  		tst.b	$250(a6)
00075EE6 6B00                       		bmi.s	loc_72C22
00075EE8 264D                       		movea.l	a5,a3
00075EEA 4BEE 0100                  		lea	$100(a6),a5
00075EEE 226E 0018                  		movea.l	$18(a6),a1
00075EF2 0895 0002                  		bclr	#2,(a5)
00075EF6 08D5 0001                  		bset	#1,(a5)
00075EFA 102D 000B                  		move.b	$B(a5),d0
00075EFE 4EBA 0000                  		jsr	sub_72C4E(pc)
00075F02 2A4B                       		movea.l	a3,a5
00075F04                            
00075F04                            loc_72C22:
00075F04 504F                       		addq.w	#8,sp
00075F06 4E75                       		rts	
00075F08                            ; ===========================================================================
00075F08                            
00075F08                            loc_72C26:				; XREF: loc_72A64
00075F08 7000                       		moveq	#0,d0
00075F0A 101C                       		move.b	(a4)+,d0
00075F0C 1B40 000B                  		move.b	d0,$B(a5)
00075F10 0815 0002                  		btst	#2,(a5)
00075F14 6600 0000                  		bne.w	locret_72CAA
00075F18 226E 0018                  		movea.l	$18(a6),a1
00075F1C 4A2E 000E                  		tst.b	$E(a6)
00075F20 6700                       		beq.s	sub_72C4E
00075F22 226D 0020                  		movea.l	$20(a5),a1
00075F26 4A2E 000E                  		tst.b	$E(a6)
00075F2A 6B00                       		bmi.s	sub_72C4E
00075F2C 226E 0020                  		movea.l	$20(a6),a1
00075F30                            
00075F30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075F30                            
00075F30                            
00075F30                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
00075F30 5340                       		subq.w	#1,d0
00075F32 6B00                       		bmi.s	loc_72C5C
00075F34 323C 0019                  		move.w	#$19,d1
00075F38                            
00075F38                            loc_72C56:
00075F38 D2C1                       		adda.w	d1,a1
00075F3A 51C8 FFFC                  		dbf	d0,loc_72C56
00075F3E                            
00075F3E                            loc_72C5C:
00075F3E 1219                       		move.b	(a1)+,d1
00075F40 1B41 001F                  		move.b	d1,$1F(a5)
00075F44 1801                       		move.b	d1,d4
00075F46 103C 00B0                  		move.b	#$B0,d0
00075F4A 4EBA FAB8                  		jsr	sub_72722(pc)
00075F4E 45FA 0000                  		lea	byte_72D18(pc),a2
00075F52 7613                       		moveq	#$13,d3
00075F54                            
00075F54                            loc_72C72:
00075F54 101A                       		move.b	(a2)+,d0
00075F56 1219                       		move.b	(a1)+,d1
00075F58 4EBA FAAA                  		jsr	sub_72722(pc)
00075F5C 51CB FFF6                  		dbf	d3,loc_72C72
00075F60 7A03                       		moveq	#3,d5
00075F62 0244 0007                  		andi.w	#7,d4
00075F66 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
00075F6A 162D 0009                  		move.b	9(a5),d3
00075F6E                            
00075F6E                            loc_72C8C:
00075F6E 101A                       		move.b	(a2)+,d0
00075F70 1219                       		move.b	(a1)+,d1
00075F72 E20C                       		lsr.b	#1,d4
00075F74 6400                       		bcc.s	loc_72C96
00075F76 D203                       		add.b	d3,d1
00075F78                            
00075F78                            loc_72C96:
00075F78 4EBA FA8A                  		jsr	sub_72722(pc)
00075F7C 51CD FFF0                  		dbf	d5,loc_72C8C
00075F80 103C 00B4                  		move.b	#$B4,d0
00075F84 122D 000A                  		move.b	$A(a5),d1
00075F88 4EBA FA7A                  		jsr	sub_72722(pc)
00075F8C                            
00075F8C                            locret_72CAA:
00075F8C 4E75                       		rts	
00075F8E                            ; End of function sub_72C4E
00075F8E                            
00075F8E                            ; ===========================================================================
00075F8E 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00075F96                            
00075F96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075F96                            
00075F96                            
00075F96                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
00075F96 0815 0002                  		btst	#2,(a5)
00075F9A 6600                       		bne.s	locret_72D16
00075F9C 7000                       		moveq	#0,d0
00075F9E 102D 000B                  		move.b	$B(a5),d0
00075FA2 226E 0018                  		movea.l	$18(a6),a1
00075FA6 4A2E 000E                  		tst.b	$E(a6)
00075FAA 6700                       		beq.s	loc_72CD8
00075FAC 226E 0020                  		movea.l	$20(a6),a1
00075FB0 4A2E 000E                  		tst.b	$E(a6)
00075FB4 6B00                       		bmi.s	loc_72CD8
00075FB6 226E 0020                  		movea.l	$20(a6),a1
00075FBA                            
00075FBA                            loc_72CD8:
00075FBA 5340                       		subq.w	#1,d0
00075FBC 6B00                       		bmi.s	loc_72CE6
00075FBE 323C 0019                  		move.w	#$19,d1
00075FC2                            
00075FC2                            loc_72CE0:
00075FC2 D2C1                       		adda.w	d1,a1
00075FC4 51C8 FFFC                  		dbf	d0,loc_72CE0
00075FC8                            
00075FC8                            loc_72CE6:
00075FC8 D2FC 0015                  		adda.w	#$15,a1
00075FCC 45FA 0000                  		lea	byte_72D2C(pc),a2
00075FD0 102D 001F                  		move.b	$1F(a5),d0
00075FD4 0240 0007                  		andi.w	#7,d0
00075FD8 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
00075FDC 162D 0009                  		move.b	9(a5),d3
00075FE0 6B00                       		bmi.s	locret_72D16
00075FE2 7A03                       		moveq	#3,d5
00075FE4                            
00075FE4                            loc_72D02:
00075FE4 101A                       		move.b	(a2)+,d0
00075FE6 1219                       		move.b	(a1)+,d1
00075FE8 E20C                       		lsr.b	#1,d4
00075FEA 6400                       		bcc.s	loc_72D12
00075FEC D203                       		add.b	d3,d1
00075FEE 6500                       		bcs.s	loc_72D12
00075FF0 4EBA FA12                  		jsr	sub_72722(pc)
00075FF4                            
00075FF4                            loc_72D12:
00075FF4 51CD FFEE                  		dbf	d5,loc_72D02
00075FF8                            
00075FF8                            locret_72D16:
00075FF8 4E75                       		rts	
00075FFA                            ; End of function sub_72CB4
00075FFA                            
00075FFA                            ; ===========================================================================
00075FFA 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
00076004 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
0007600E 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
00076012                            ; ===========================================================================
00076012                            
00076012                            loc_72D30:				; XREF: loc_72A64
00076012 08D5 0003                  		bset	#3,(a5)
00076016 2B4C 0014                  		move.l	a4,$14(a5)
0007601A 1B5C 0018                  		move.b	(a4)+,$18(a5)
0007601E 1B5C 0019                  		move.b	(a4)+,$19(a5)
00076022 1B5C 001A                  		move.b	(a4)+,$1A(a5)
00076026 101C                       		move.b	(a4)+,d0
00076028 E208                       		lsr.b	#1,d0
0007602A 1B40 001B                  		move.b	d0,$1B(a5)
0007602E 426D 001C                  		clr.w	$1C(a5)
00076032 4E75                       		rts	
00076034                            ; ===========================================================================
00076034                            
00076034                            loc_72D52:				; XREF: loc_72A64
00076034 08D5 0003                  		bset	#3,(a5)
00076038 4E75                       		rts	
0007603A                            ; ===========================================================================
0007603A                            
0007603A                            loc_72D58:				; XREF: loc_72A64
0007603A 0895 0007                  		bclr	#7,(a5)
0007603E 0895 0004                  		bclr	#4,(a5)
00076042 4A2D 0001                  		tst.b	1(a5)
00076046 6B00                       		bmi.s	loc_72D74
00076048 4A2E 0008                  		tst.b	8(a6)
0007604C 6B00 0000                  		bmi.w	loc_72E02
00076050 4EBA F98E                  		jsr	sub_726FE(pc)
00076054 6000                       		bra.s	loc_72D78
00076056                            ; ===========================================================================
00076056                            
00076056                            loc_72D74:
00076056 4EBA FC2A                  		jsr	sub_729A0(pc)
0007605A                            
0007605A                            loc_72D78:
0007605A 4A2E 000E                  		tst.b	$E(a6)
0007605E 6A00 0000                  		bpl.w	loc_72E02
00076062 4216                       		clr.b	0(a6)
00076064 7000                       		moveq	#0,d0
00076066 102D 0001                  		move.b	1(a5),d0
0007606A 6B00                       		bmi.s	loc_72DCC
0007606C 41FA F546                  		lea	dword_722CC(pc),a0
00076070 264D                       		movea.l	a5,a3
00076072 0C00 0004                  		cmpi.b	#4,d0
00076076 6600                       		bne.s	loc_72DA8
00076078 4A2E 0340                  		tst.b	$340(a6)
0007607C 6A00                       		bpl.s	loc_72DA8
0007607E 4BEE 0340                  		lea	$340(a6),a5
00076082 226E 0020                  		movea.l	$20(a6),a1
00076086 6000                       		bra.s	loc_72DB8
00076088                            ; ===========================================================================
00076088                            
00076088                            loc_72DA8:
00076088 5500                       		subq.b	#2,d0
0007608A E508                       		lsl.b	#2,d0
0007608C 2A70 0000                  		movea.l	(a0,d0.w),a5
00076090 4A15                       		tst.b	(a5)
00076092 6A00                       		bpl.s	loc_72DC8
00076094 226E 0018                  		movea.l	$18(a6),a1
00076098                            
00076098                            loc_72DB8:
00076098 0895 0002                  		bclr	#2,(a5)
0007609C 08D5 0001                  		bset	#1,(a5)
000760A0 102D 000B                  		move.b	$B(a5),d0
000760A4 4EBA FE8A                  		jsr	sub_72C4E(pc)
000760A8                            
000760A8                            loc_72DC8:
000760A8 2A4B                       		movea.l	a3,a5
000760AA 6000                       		bra.s	loc_72E02
000760AC                            ; ===========================================================================
000760AC                            
000760AC                            loc_72DCC:
000760AC 41EE 0370                  		lea	$370(a6),a0
000760B0 4A10                       		tst.b	(a0)
000760B2 6A00                       		bpl.s	loc_72DE0
000760B4 0C00 00E0                  		cmpi.b	#$E0,d0
000760B8 6700                       		beq.s	loc_72DEA
000760BA 0C00 00C0                  		cmpi.b	#$C0,d0
000760BE 6700                       		beq.s	loc_72DEA
000760C0                            
000760C0                            loc_72DE0:
000760C0 41FA F4F2                  		lea	dword_722CC(pc),a0
000760C4 E608                       		lsr.b	#3,d0
000760C6 2070 0000                  		movea.l	(a0,d0.w),a0
000760CA                            
000760CA                            loc_72DEA:
000760CA 0890 0002                  		bclr	#2,(a0)
000760CE 08D0 0001                  		bset	#1,(a0)
000760D2 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000760D8 6600                       		bne.s	loc_72E02
000760DA 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000760E2                            
000760E2                            loc_72E02:
000760E2 504F                       		addq.w	#8,sp
000760E4 4E75                       		rts	
000760E6                            ; ===========================================================================
000760E6                            
000760E6                            loc_72E06:				; XREF: loc_72A64
000760E6 1B7C 00E0 0001             		move.b	#$E0,1(a5)
000760EC 1B5C 001F                  		move.b	(a4)+,$1F(a5)
000760F0 0815 0002                  		btst	#2,(a5)
000760F4 6600                       		bne.s	locret_72E1E
000760F6 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
000760FE                            
000760FE                            locret_72E1E:
000760FE 4E75                       		rts	
00076100                            ; ===========================================================================
00076100                            
00076100                            loc_72E20:				; XREF: loc_72A64
00076100 0895 0003                  		bclr	#3,(a5)
00076104 4E75                       		rts	
00076106                            ; ===========================================================================
00076106                            
00076106                            loc_72E26:				; XREF: loc_72A64
00076106 1B5C 000B                  		move.b	(a4)+,$B(a5)
0007610A 4E75                       		rts	
0007610C                            ; ===========================================================================
0007610C                            
0007610C                            loc_72E2C:				; XREF: loc_72A64
0007610C 101C                       		move.b	(a4)+,d0
0007610E E148                       		lsl.w	#8,d0
00076110 101C                       		move.b	(a4)+,d0
00076112 D8C0                       		adda.w	d0,a4
00076114 534C                       		subq.w	#1,a4
00076116 4E75                       		rts	
00076118                            ; ===========================================================================
00076118                            
00076118                            loc_72E38:				; XREF: loc_72A64
00076118 7000                       		moveq	#0,d0
0007611A 101C                       		move.b	(a4)+,d0
0007611C 121C                       		move.b	(a4)+,d1
0007611E 4A35 0024                  		tst.b	$24(a5,d0.w)
00076122 6600                       		bne.s	loc_72E48
00076124 1B81 0024                  		move.b	d1,$24(a5,d0.w)
00076128                            
00076128                            loc_72E48:
00076128 5335 0024                  		subq.b	#1,$24(a5,d0.w)
0007612C 66DE                       		bne.s	loc_72E2C
0007612E 544C                       		addq.w	#2,a4
00076130 4E75                       		rts	
00076132                            ; ===========================================================================
00076132                            
00076132                            loc_72E52:				; XREF: loc_72A64
00076132 7000                       		moveq	#0,d0
00076134 102D 000D                  		move.b	$D(a5),d0
00076138 5900                       		subq.b	#4,d0
0007613A 2B8C 0000                  		move.l	a4,(a5,d0.w)
0007613E 1B40 000D                  		move.b	d0,$D(a5)
00076142 60C8                       		bra.s	loc_72E2C
00076144                            ; ===========================================================================
00076144                            
00076144                            loc_72E64:				; XREF: loc_72A64
00076144 103C 0088                  		move.b	#$88,d0
00076148 123C 000F                  		move.b	#$F,d1
0007614C 4EBA F8C2                  		jsr	sub_7272E(pc)
00076150 103C 008C                  		move.b	#$8C,d0
00076154 123C 000F                  		move.b	#$F,d1
00076158 6000 F8B6                  		bra.w	sub_7272E
0007615C                            ; ===========================================================================
0007615C                            Kos_Z80:	incbin	sound\z80_1.bin
0007620C 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
0007620E 21                         		dc.b $21
0007620F 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
00076211                            		incbin	sound\z80_2.bin
000778BC                            		even
000778BC                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
0007E0BC                            		even
0007E0BC                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
0008795A                            		even
0008795A                            Music83:	incbin	sound\music83.bin ; Marble Act 1
00087EE8                            		even
00087EE8                            Music84:	include	sound\music84.asm ; Star Light Act 1
00087EE8                            music84_Header:
00087EE8 =00000001                  smpsHeaderStartSong = 1
00087EE8 0000                       	smpsHeaderVoice     music84_Voices
00087EEA 0603                       	smpsHeaderChan      $06, $03
00087EEC 0205                       	smpsHeaderTempo     $02, $05
00087EEE                            
00087EF2 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
00087EF6 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
00087EFA 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
00087EFE 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
00087F02 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
00087F06 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
00087F0C 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
00087F12 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
00087F18                            
00087F18                            ; FM1 Data
00087F18                            music84_FM1:
00087F18 E0C0                       	smpsPan             panCenter, $00
00087F1C E107                       	smpsAlterNote       $07
00087F1E 9B03 8007                  	dc.b	nD2, $03, nRst, $07
00087F22 E106                       	smpsAlterNote       $06
00087F24 9903 800B                  	dc.b	nC2, $03, nRst, $0B
00087F28 E10B                       	smpsAlterNote       $0B
00087F2A 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
00087F30 E10C                       	smpsAlterNote       $0C
00087F32 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00087F35 E10B                       	smpsAlterNote       $0B
00087F37 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00087F3A E109                       	smpsAlterNote       $09
00087F3C E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
00087F41 E108                       	smpsAlterNote       $08
00087F43 8001                       	dc.b	nRst, $01
00087F45 E10B                       	smpsAlterNote       $0B
00087F47 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
00087F4D E107                       	smpsAlterNote       $07
00087F4F 9B03                       	dc.b	nD2, $03
00087F51                            
00087F51                            music84_Jump04:
00087F51 E107                       	smpsAlterNote       $07
00087F53 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00087F57 E10B                       	smpsAlterNote       $0B
00087F59 A202 8001                  	dc.b	nA2, $02, nRst, $01
00087F5D E107                       	smpsAlterNote       $07
00087F5F 9B03                       	dc.b	nD2, $03
00087F61 E11A                       	smpsAlterNote       $1A
00087F63 A301                       	dc.b	nBb2, $01
00087F65 E1F2                       	smpsAlterNote       $F2
00087F67 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00087F6A E1FF                       	smpsAlterNote       $FF
00087F6C E701                       	dc.b	smpsNoAttack, $01
00087F6E E111                       	smpsAlterNote       $11
00087F70 E701                       	dc.b	smpsNoAttack, $01
00087F72 E106                       	smpsAlterNote       $06
00087F74 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00087F77 E107                       	smpsAlterNote       $07
00087F79 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00087F7D E108                       	smpsAlterNote       $08
00087F7F 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
00087F87 E109                       	smpsAlterNote       $09
00087F89 A003                       	dc.b	nG2, $03
00087F8B E10C                       	smpsAlterNote       $0C
00087F8D A303 8001                  	dc.b	nBb2, $03, nRst, $01
00087F91 E1FD                       	smpsAlterNote       $FD
00087F93 A401                       	dc.b	nB2, $01
00087F95 E109                       	smpsAlterNote       $09
00087F97 E701                       	dc.b	smpsNoAttack, $01
00087F99 E106                       	smpsAlterNote       $06
00087F9B E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00087F9E E109                       	smpsAlterNote       $09
00087FA0 A007                       	dc.b	nG2, $07
00087FA2 E108                       	smpsAlterNote       $08
00087FA4 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00087FA8 E107                       	smpsAlterNote       $07
00087FAA 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00087FB0 E10B                       	smpsAlterNote       $0B
00087FB2 A203 8001                  	dc.b	nA2, $03, nRst, $01
00087FB6 E107                       	smpsAlterNote       $07
00087FB8 9B03                       	dc.b	nD2, $03
00087FBA E11A                       	smpsAlterNote       $1A
00087FBC A301                       	dc.b	nBb2, $01
00087FBE E1F9                       	smpsAlterNote       $F9
00087FC0 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00087FC3 E107                       	smpsAlterNote       $07
00087FC5 E701                       	dc.b	smpsNoAttack, $01
00087FC7 E111                       	smpsAlterNote       $11
00087FC9 E701                       	dc.b	smpsNoAttack, $01
00087FCB E106                       	smpsAlterNote       $06
00087FCD E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
00087FD2 E107                       	smpsAlterNote       $07
00087FD4 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00087FDC E1EC                       	smpsAlterNote       $EC
00087FDE A101                       	dc.b	nAb2, $01
00087FE0 E108                       	smpsAlterNote       $08
00087FE2 E701                       	dc.b	smpsNoAttack, $01
00087FE4 E116                       	smpsAlterNote       $16
00087FE6 E701                       	dc.b	smpsNoAttack, $01
00087FE8 E1F5                       	smpsAlterNote       $F5
00087FEA E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00087FED E10B                       	smpsAlterNote       $0B
00087FEF E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00087FF3 E107                       	smpsAlterNote       $07
00087FF5 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00087FFB E109                       	smpsAlterNote       $09
00087FFD 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00088001 E10B                       	smpsAlterNote       $0B
00088003 9603                       	dc.b	nA1, $03
00088005 E107                       	smpsAlterNote       $07
00088007 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
0008800D E10B                       	smpsAlterNote       $0B
0008800F A203 8001                  	dc.b	nA2, $03, nRst, $01
00088013 E107                       	smpsAlterNote       $07
00088015 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00088019 E11A                       	smpsAlterNote       $1A
0008801B A301                       	dc.b	nBb2, $01
0008801D E1F9                       	smpsAlterNote       $F9
0008801F E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088022 E107                       	smpsAlterNote       $07
00088024 E701                       	dc.b	smpsNoAttack, $01
00088026 E1FB                       	smpsAlterNote       $FB
00088028 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008802B E106                       	smpsAlterNote       $06
0008802D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088031 E107                       	smpsAlterNote       $07
00088033 9B03                       	dc.b	nD2, $03
00088035 E108                       	smpsAlterNote       $08
00088037 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
0008803D E109                       	smpsAlterNote       $09
0008803F A002 8001                  	dc.b	nG2, $02, nRst, $01
00088043 E10C                       	smpsAlterNote       $0C
00088045 A303                       	dc.b	nBb2, $03
00088047 E1F0                       	smpsAlterNote       $F0
00088049 A401                       	dc.b	nB2, $01
0008804B E1FD                       	smpsAlterNote       $FD
0008804D E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
00088052 E106                       	smpsAlterNote       $06
00088054 8001                       	dc.b	nRst, $01
00088056 E109                       	smpsAlterNote       $09
00088058 A006 8001                  	dc.b	nG2, $06, nRst, $01
0008805C E108                       	smpsAlterNote       $08
0008805E 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
00088062 E107                       	smpsAlterNote       $07
00088064 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008806A E10B                       	smpsAlterNote       $0B
0008806C A203                       	dc.b	nA2, $03
0008806E E107                       	smpsAlterNote       $07
00088070 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088074 E1F2                       	smpsAlterNote       $F2
00088076 A401                       	dc.b	nB2, $01
00088078 E1FF                       	smpsAlterNote       $FF
0008807A E701                       	dc.b	smpsNoAttack, $01
0008807C E107                       	smpsAlterNote       $07
0008807E E701                       	dc.b	smpsNoAttack, $01
00088080 E1FB                       	smpsAlterNote       $FB
00088082 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088085 E106                       	smpsAlterNote       $06
00088087 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008808B E107                       	smpsAlterNote       $07
0008808D 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
00088097 E117                       	smpsAlterNote       $17
00088099 A001                       	dc.b	nG2, $01
0008809B E1FA                       	smpsAlterNote       $FA
0008809D E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000880A0 E108                       	smpsAlterNote       $08
000880A2 E701                       	dc.b	smpsNoAttack, $01
000880A4 E1E7                       	smpsAlterNote       $E7
000880A6 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000880A9 E103                       	smpsAlterNote       $03
000880AB E701                       	dc.b	smpsNoAttack, $01
000880AD E10B                       	smpsAlterNote       $0B
000880AF E702                       	dc.b	smpsNoAttack, $02
000880B1 E107                       	smpsAlterNote       $07
000880B3 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
000880BB E106                       	smpsAlterNote       $06
000880BD 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
000880C3 E10C                       	smpsAlterNote       $0C
000880C5 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
000880CB E109                       	smpsAlterNote       $09
000880CD 9E03                       	dc.b	nF2, $03
000880CF E10C                       	smpsAlterNote       $0C
000880D1 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000880D5 E1EA                       	smpsAlterNote       $EA
000880D7 A201                       	dc.b	nA2, $01
000880D9 E106                       	smpsAlterNote       $06
000880DB E701                       	dc.b	smpsNoAttack, $01
000880DD E1E2                       	smpsAlterNote       $E2
000880DF E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000880E2 E1F0                       	smpsAlterNote       $F0
000880E4 E701                       	dc.b	smpsNoAttack, $01
000880E6 E10C                       	smpsAlterNote       $0C
000880E8 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
000880F4 E116                       	smpsAlterNote       $16
000880F6 9C01                       	dc.b	nEb2, $01
000880F8 E105                       	smpsAlterNote       $05
000880FA E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000880FD E1F1                       	smpsAlterNote       $F1
000880FF E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00088102 E1FF                       	smpsAlterNote       $FF
00088104 E701                       	dc.b	smpsNoAttack, $01
00088106 E109                       	smpsAlterNote       $09
00088108 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008810C E10C                       	smpsAlterNote       $0C
0008810E 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
0008811A 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
00088120 E109                       	smpsAlterNote       $09
00088122 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00088126 E10C                       	smpsAlterNote       $0C
00088128 9703                       	dc.b	nBb1, $03
0008812A E11A                       	smpsAlterNote       $1A
0008812C A101                       	dc.b	nAb2, $01
0008812E E1FB                       	smpsAlterNote       $FB
00088130 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00088133 E10A                       	smpsAlterNote       $0A
00088135 E701                       	dc.b	smpsNoAttack, $01
00088137 E1E8                       	smpsAlterNote       $E8
00088139 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008813C E106                       	smpsAlterNote       $06
0008813E E701                       	dc.b	smpsNoAttack, $01
00088140 E10C                       	smpsAlterNote       $0C
00088142 E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
0008814E E1F9                       	smpsAlterNote       $F9
00088150 9D01                       	dc.b	nE2, $01
00088152 E108                       	smpsAlterNote       $08
00088154 E701                       	dc.b	smpsNoAttack, $01
00088156 E1F6                       	smpsAlterNote       $F6
00088158 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008815B E109                       	smpsAlterNote       $09
0008815D E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
00088161 E10C                       	smpsAlterNote       $0C
00088163 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
0008816F E108                       	smpsAlterNote       $08
00088171 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
00088177 E106                       	smpsAlterNote       $06
00088179 A403 8001                  	dc.b	nB2, $03, nRst, $01
0008817D E108                       	smpsAlterNote       $08
0008817F 9D03                       	dc.b	nE2, $03
00088181 E1EB                       	smpsAlterNote       $EB
00088183 A801                       	dc.b	nEb3, $01
00088185 E109                       	smpsAlterNote       $09
00088187 E701                       	dc.b	smpsNoAttack, $01
00088189 E1FA                       	smpsAlterNote       $FA
0008818B E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
0008818E E108                       	smpsAlterNote       $08
00088190 E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
0008819C E1E9                       	smpsAlterNote       $E9
0008819E A301                       	dc.b	nBb2, $01
000881A0 E107                       	smpsAlterNote       $07
000881A2 E701                       	dc.b	smpsNoAttack, $01
000881A4 E1F0                       	smpsAlterNote       $F0
000881A6 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000881A9 E1F7                       	smpsAlterNote       $F7
000881AB E701                       	dc.b	smpsNoAttack, $01
000881AD E107                       	smpsAlterNote       $07
000881AF E701                       	dc.b	smpsNoAttack, $01
000881B1 E106                       	smpsAlterNote       $06
000881B3 E701                       	dc.b	smpsNoAttack, $01
000881B5 E108                       	smpsAlterNote       $08
000881B7 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
000881BD E106                       	smpsAlterNote       $06
000881BF A403 8001                  	dc.b	nB2, $03, nRst, $01
000881C3 E108                       	smpsAlterNote       $08
000881C5 9D03                       	dc.b	nE2, $03
000881C7 E10B                       	smpsAlterNote       $0B
000881C9 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
000881D1 E108                       	smpsAlterNote       $08
000881D3 9D03                       	dc.b	nE2, $03
000881D5 E10B                       	smpsAlterNote       $0B
000881D7 9603 8001                  	dc.b	nA1, $03, nRst, $01
000881DB E113                       	smpsAlterNote       $13
000881DD A001                       	dc.b	nG2, $01
000881DF E118                       	smpsAlterNote       $18
000881E1 E701                       	dc.b	smpsNoAttack, $01
000881E3 E1E9                       	smpsAlterNote       $E9
000881E5 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000881E8 E1F3                       	smpsAlterNote       $F3
000881EA E701                       	dc.b	smpsNoAttack, $01
000881EC E1FD                       	smpsAlterNote       $FD
000881EE E701                       	dc.b	smpsNoAttack, $01
000881F0 E102                       	smpsAlterNote       $02
000881F2 E701                       	dc.b	smpsNoAttack, $01
000881F4 E107                       	smpsAlterNote       $07
000881F6 8001                       	dc.b	nRst, $01
000881F8 E10B                       	smpsAlterNote       $0B
000881FA 9603                       	dc.b	nA1, $03
000881FC E10C                       	smpsAlterNote       $0C
000881FE 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
00088204 E10B                       	smpsAlterNote       $0B
00088206 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
00088212 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
00088218 E107                       	smpsAlterNote       $07
0008821A 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00088220 E10B                       	smpsAlterNote       $0B
00088222 A203                       	dc.b	nA2, $03
00088224 E107                       	smpsAlterNote       $07
00088226 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008822A E1F2                       	smpsAlterNote       $F2
0008822C A401                       	dc.b	nB2, $01
0008822E E1FF                       	smpsAlterNote       $FF
00088230 E701                       	dc.b	smpsNoAttack, $01
00088232 E107                       	smpsAlterNote       $07
00088234 E701                       	dc.b	smpsNoAttack, $01
00088236 E1FB                       	smpsAlterNote       $FB
00088238 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008823B E106                       	smpsAlterNote       $06
0008823D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088241 E107                       	smpsAlterNote       $07
00088243 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00088247 E108                       	smpsAlterNote       $08
00088249 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
0008824F E109                       	smpsAlterNote       $09
00088251 A003 8001                  	dc.b	nG2, $03, nRst, $01
00088255 E10C                       	smpsAlterNote       $0C
00088257 A302 8001                  	dc.b	nBb2, $02, nRst, $01
0008825B E1F0                       	smpsAlterNote       $F0
0008825D A401                       	dc.b	nB2, $01
0008825F E109                       	smpsAlterNote       $09
00088261 E701                       	dc.b	smpsNoAttack, $01
00088263 E106                       	smpsAlterNote       $06
00088265 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088268 E109                       	smpsAlterNote       $09
0008826A A007                       	dc.b	nG2, $07
0008826C E108                       	smpsAlterNote       $08
0008826E 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00088272 E107                       	smpsAlterNote       $07
00088274 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008827A E10B                       	smpsAlterNote       $0B
0008827C A202 8001                  	dc.b	nA2, $02, nRst, $01
00088280 E107                       	smpsAlterNote       $07
00088282 9B03                       	dc.b	nD2, $03
00088284 E11A                       	smpsAlterNote       $1A
00088286 A301                       	dc.b	nBb2, $01
00088288 E1F2                       	smpsAlterNote       $F2
0008828A E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008828D E1FF                       	smpsAlterNote       $FF
0008828F E701                       	dc.b	smpsNoAttack, $01
00088291 E111                       	smpsAlterNote       $11
00088293 E701                       	dc.b	smpsNoAttack, $01
00088295 E106                       	smpsAlterNote       $06
00088297 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008829A E107                       	smpsAlterNote       $07
0008829C 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
000882A8 E117                       	smpsAlterNote       $17
000882AA A001                       	dc.b	nG2, $01
000882AC E1FA                       	smpsAlterNote       $FA
000882AE E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000882B1 E116                       	smpsAlterNote       $16
000882B3 E701                       	dc.b	smpsNoAttack, $01
000882B5 E1F5                       	smpsAlterNote       $F5
000882B7 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000882BA E103                       	smpsAlterNote       $03
000882BC E701                       	dc.b	smpsNoAttack, $01
000882BE E10B                       	smpsAlterNote       $0B
000882C0 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000882C4 E107                       	smpsAlterNote       $07
000882C6 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000882CC E109                       	smpsAlterNote       $09
000882CE 9E03                       	dc.b	nF2, $03
000882D0 E10B                       	smpsAlterNote       $0B
000882D2 9603 8001                  	dc.b	nA1, $03, nRst, $01
000882D6 E107                       	smpsAlterNote       $07
000882D8 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000882DE E10B                       	smpsAlterNote       $0B
000882E0 A203 8001                  	dc.b	nA2, $03, nRst, $01
000882E4 E107                       	smpsAlterNote       $07
000882E6 9B03                       	dc.b	nD2, $03
000882E8 E11A                       	smpsAlterNote       $1A
000882EA A301                       	dc.b	nBb2, $01
000882EC E1F9                       	smpsAlterNote       $F9
000882EE E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000882F1 E107                       	smpsAlterNote       $07
000882F3 E701                       	dc.b	smpsNoAttack, $01
000882F5 E111                       	smpsAlterNote       $11
000882F7 E701                       	dc.b	smpsNoAttack, $01
000882F9 E106                       	smpsAlterNote       $06
000882FB E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
00088300 E107                       	smpsAlterNote       $07
00088302 9B03                       	dc.b	nD2, $03
00088304 E108                       	smpsAlterNote       $08
00088306 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
0008830C E109                       	smpsAlterNote       $09
0008830E A003                       	dc.b	nG2, $03
00088310 E10C                       	smpsAlterNote       $0C
00088312 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00088316 E1FD                       	smpsAlterNote       $FD
00088318 A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
0008831D E106                       	smpsAlterNote       $06
0008831F 8001                       	dc.b	nRst, $01
00088321 E109                       	smpsAlterNote       $09
00088323 A006 8001                  	dc.b	nG2, $06, nRst, $01
00088327 E108                       	smpsAlterNote       $08
00088329 9C03                       	dc.b	nEb2, $03
0008832B E107                       	smpsAlterNote       $07
0008832D 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00088333 E10B                       	smpsAlterNote       $0B
00088335 A203 8001                  	dc.b	nA2, $03, nRst, $01
00088339 E107                       	smpsAlterNote       $07
0008833B 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008833F E11A                       	smpsAlterNote       $1A
00088341 A301                       	dc.b	nBb2, $01
00088343 E1F9                       	smpsAlterNote       $F9
00088345 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088348 E107                       	smpsAlterNote       $07
0008834A E701                       	dc.b	smpsNoAttack, $01
0008834C E1FB                       	smpsAlterNote       $FB
0008834E E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088351 E106                       	smpsAlterNote       $06
00088353 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088357 E107                       	smpsAlterNote       $07
00088359 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00088361 E1EC                       	smpsAlterNote       $EC
00088363 A101                       	dc.b	nAb2, $01
00088365 E108                       	smpsAlterNote       $08
00088367 E701                       	dc.b	smpsNoAttack, $01
00088369 E1E7                       	smpsAlterNote       $E7
0008836B E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008836E E1F5                       	smpsAlterNote       $F5
00088370 E701                       	dc.b	smpsNoAttack, $01
00088372 E10B                       	smpsAlterNote       $0B
00088374 E702                       	dc.b	smpsNoAttack, $02
00088376 E107                       	smpsAlterNote       $07
00088378 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
0008837E E106                       	smpsAlterNote       $06
00088380 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00088386 E10C                       	smpsAlterNote       $0C
00088388 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00088390 E109                       	smpsAlterNote       $09
00088392 9E03                       	dc.b	nF2, $03
00088394 E10C                       	smpsAlterNote       $0C
00088396 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008839A E1EA                       	smpsAlterNote       $EA
0008839C A201                       	dc.b	nA2, $01
0008839E E106                       	smpsAlterNote       $06
000883A0 E701                       	dc.b	smpsNoAttack, $01
000883A2 E114                       	smpsAlterNote       $14
000883A4 E701                       	dc.b	smpsNoAttack, $01
000883A6 E1F0                       	smpsAlterNote       $F0
000883A8 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000883AB E10C                       	smpsAlterNote       $0C
000883AD E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
000883B9 9703                       	dc.b	nBb1, $03
000883BB E116                       	smpsAlterNote       $16
000883BD 9C01                       	dc.b	nEb2, $01
000883BF E105                       	smpsAlterNote       $05
000883C1 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000883C4 E113                       	smpsAlterNote       $13
000883C6 E701                       	dc.b	smpsNoAttack, $01
000883C8 E1FF                       	smpsAlterNote       $FF
000883CA E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000883CD E109                       	smpsAlterNote       $09
000883CF E703                       	dc.b	smpsNoAttack, $03
000883D1 E10C                       	smpsAlterNote       $0C
000883D3 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
000883DF 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
000883E7 E109                       	smpsAlterNote       $09
000883E9 9E03                       	dc.b	nF2, $03
000883EB E10C                       	smpsAlterNote       $0C
000883ED 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000883F1 E1EC                       	smpsAlterNote       $EC
000883F3 A201                       	dc.b	nA2, $01
000883F5 E10A                       	smpsAlterNote       $0A
000883F7 E701                       	dc.b	smpsNoAttack, $01
000883F9 E1E8                       	smpsAlterNote       $E8
000883FB E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000883FE E1F7                       	smpsAlterNote       $F7
00088400 E701                       	dc.b	smpsNoAttack, $01
00088402 E10C                       	smpsAlterNote       $0C
00088404 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00088410 E1EA                       	smpsAlterNote       $EA
00088412 9D01                       	dc.b	nE2, $01
00088414 E108                       	smpsAlterNote       $08
00088416 E701                       	dc.b	smpsNoAttack, $01
00088418 E1F6                       	smpsAlterNote       $F6
0008841A E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008841D E105                       	smpsAlterNote       $05
0008841F E701                       	dc.b	smpsNoAttack, $01
00088421 E109                       	smpsAlterNote       $09
00088423 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088427 E10C                       	smpsAlterNote       $0C
00088429 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00088435 E108                       	smpsAlterNote       $08
00088437 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
0008843D E106                       	smpsAlterNote       $06
0008843F A403 8001                  	dc.b	nB2, $03, nRst, $01
00088443 E108                       	smpsAlterNote       $08
00088445 9D03                       	dc.b	nE2, $03
00088447 E1EB                       	smpsAlterNote       $EB
00088449 A801                       	dc.b	nEb3, $01
0008844B E109                       	smpsAlterNote       $09
0008844D E701                       	dc.b	smpsNoAttack, $01
0008844F E1EB                       	smpsAlterNote       $EB
00088451 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00088454 E108                       	smpsAlterNote       $08
00088456 E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
00088462 E1E9                       	smpsAlterNote       $E9
00088464 A301                       	dc.b	nBb2, $01
00088466 E1F8                       	smpsAlterNote       $F8
00088468 E701                       	dc.b	smpsNoAttack, $01
0008846A E116                       	smpsAlterNote       $16
0008846C E701                       	dc.b	smpsNoAttack, $01
0008846E E1F7                       	smpsAlterNote       $F7
00088470 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088473 E107                       	smpsAlterNote       $07
00088475 E701                       	dc.b	smpsNoAttack, $01
00088477 E1EE                       	smpsAlterNote       $EE
00088479 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008847C E106                       	smpsAlterNote       $06
0008847E 8001                       	dc.b	nRst, $01
00088480 E108                       	smpsAlterNote       $08
00088482 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
00088488 E106                       	smpsAlterNote       $06
0008848A A402 8001                  	dc.b	nB2, $02, nRst, $01
0008848E E108                       	smpsAlterNote       $08
00088490 9D03                       	dc.b	nE2, $03
00088492 E10B                       	smpsAlterNote       $0B
00088494 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
0008849A E108                       	smpsAlterNote       $08
0008849C 9D03 8001                  	dc.b	nE2, $03, nRst, $01
000884A0 E10B                       	smpsAlterNote       $0B
000884A2 9603                       	dc.b	nA1, $03
000884A4 E10E                       	smpsAlterNote       $0E
000884A6 A001                       	dc.b	nG2, $01
000884A8 E118                       	smpsAlterNote       $18
000884AA E701                       	dc.b	smpsNoAttack, $01
000884AC E1E9                       	smpsAlterNote       $E9
000884AE E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000884B1 E1EE                       	smpsAlterNote       $EE
000884B3 E701                       	dc.b	smpsNoAttack, $01
000884B5 E1F8                       	smpsAlterNote       $F8
000884B7 E701                       	dc.b	smpsNoAttack, $01
000884B9 E102                       	smpsAlterNote       $02
000884BB E701                       	dc.b	smpsNoAttack, $01
000884BD E107                       	smpsAlterNote       $07
000884BF 8001                       	dc.b	nRst, $01
000884C1 E10B                       	smpsAlterNote       $0B
000884C3 9603                       	dc.b	nA1, $03
000884C5 E10C                       	smpsAlterNote       $0C
000884C7 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
000884CD E10B                       	smpsAlterNote       $0B
000884CF 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
000884DB 8001 9603                  	dc.b	nRst, $01, nA1, $03
000884DF E10C                       	smpsAlterNote       $0C
000884E1 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
000884ED 8001                       	dc.b	nRst, $01
000884EF E10B                       	smpsAlterNote       $0B
000884F1 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
000884F9 E107                       	smpsAlterNote       $07
000884FB 9B06 8001                  	dc.b	nD2, $06, nRst, $01
000884FF E10B                       	smpsAlterNote       $0B
00088501 9603                       	dc.b	nA1, $03
00088503 E109                       	smpsAlterNote       $09
00088505 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00088509 E108                       	smpsAlterNote       $08
0008850B 9D06                       	dc.b	nE2, $06
0008850D E107                       	smpsAlterNote       $07
0008850F 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088513 E106                       	smpsAlterNote       $06
00088515 9903                       	dc.b	nC2, $03
00088517 E10C                       	smpsAlterNote       $0C
00088519 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008851D E10B                       	smpsAlterNote       $0B
0008851F 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
0008852B 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00088535 E10C                       	smpsAlterNote       $0C
00088537 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
00088543 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
0008854F 8001                       	dc.b	nRst, $01
00088551 E10B                       	smpsAlterNote       $0B
00088553 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008855F 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
0008856B 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
00088577 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00088581 E10C                       	smpsAlterNote       $0C
00088583 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
0008858F E10B                       	smpsAlterNote       $0B
00088591 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00088599 E107                       	smpsAlterNote       $07
0008859B 9B06 8001                  	dc.b	nD2, $06, nRst, $01
0008859F E10B                       	smpsAlterNote       $0B
000885A1 9603                       	dc.b	nA1, $03
000885A3 E109                       	smpsAlterNote       $09
000885A5 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000885A9 E108                       	smpsAlterNote       $08
000885AB 9D06 8001                  	dc.b	nE2, $06, nRst, $01
000885AF E107                       	smpsAlterNote       $07
000885B1 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000885B5 E106                       	smpsAlterNote       $06
000885B7 9903                       	dc.b	nC2, $03
000885B9 E10C                       	smpsAlterNote       $0C
000885BB 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000885BF E10B                       	smpsAlterNote       $0B
000885C1 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
000885CD 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
000885D7 E10C                       	smpsAlterNote       $0C
000885D9 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
000885E5 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
000885F1 8001                       	dc.b	nRst, $01
000885F3 E10B                       	smpsAlterNote       $0B
000885F5 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00088601 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008860B E10C                       	smpsAlterNote       $0C
0008860D 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00088619 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
00088625 E10B                       	smpsAlterNote       $0B
00088627 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00088633 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
0008863D E10C                       	smpsAlterNote       $0C
0008863F 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008864B 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
00088657 E10B                       	smpsAlterNote       $0B
00088659 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
00088665 8001                       	dc.b	nRst, $01
00088667 E1EC                       	smpsAlterNote       $EC
00088669 A101                       	dc.b	nAb2, $01
0008866B E1FA                       	smpsAlterNote       $FA
0008866D E701                       	dc.b	smpsNoAttack, $01
0008866F E116                       	smpsAlterNote       $16
00088671 E701                       	dc.b	smpsNoAttack, $01
00088673 E1F5                       	smpsAlterNote       $F5
00088675 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00088678 E10B                       	smpsAlterNote       $0B
0008867A E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
00088686 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
00088692 E107                       	smpsAlterNote       $07
00088694 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008869A E10B                       	smpsAlterNote       $0B
0008869C A203                       	dc.b	nA2, $03
0008869E E107                       	smpsAlterNote       $07
000886A0 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000886A4 E1F3                       	smpsAlterNote       $F3
000886A6 A401                       	dc.b	nB2, $01
000886A8 E102                       	smpsAlterNote       $02
000886AA E701                       	dc.b	smpsNoAttack, $01
000886AC E109                       	smpsAlterNote       $09
000886AE E701                       	dc.b	smpsNoAttack, $01
000886B0 E102                       	smpsAlterNote       $02
000886B2 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000886B5 E106                       	smpsAlterNote       $06
000886B7 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000886BB E107                       	smpsAlterNote       $07
000886BD 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000886C1 E108                       	smpsAlterNote       $08
000886C3 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
000886C9 E109                       	smpsAlterNote       $09
000886CB A003 8001                  	dc.b	nG2, $03, nRst, $01
000886CF E1F2                       	smpsAlterNote       $F2
000886D1 A401                       	dc.b	nB2, $01
000886D3 E1FF                       	smpsAlterNote       $FF
000886D5 E701                       	dc.b	smpsNoAttack, $01
000886D7 E111                       	smpsAlterNote       $11
000886D9 E701                       	dc.b	smpsNoAttack, $01
000886DB E1FB                       	smpsAlterNote       $FB
000886DD E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000886E0 E106                       	smpsAlterNote       $06
000886E2 E702                       	dc.b	smpsNoAttack, $02
000886E4 E109                       	smpsAlterNote       $09
000886E6 A007                       	dc.b	nG2, $07
000886E8 E108                       	smpsAlterNote       $08
000886EA 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
000886EE E107                       	smpsAlterNote       $07
000886F0 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000886F6 E10B                       	smpsAlterNote       $0B
000886F8 A202 8001                  	dc.b	nA2, $02, nRst, $01
000886FC E107                       	smpsAlterNote       $07
000886FE 9B03                       	dc.b	nD2, $03
00088700 E11A                       	smpsAlterNote       $1A
00088702 A301                       	dc.b	nBb2, $01
00088704 E1F2                       	smpsAlterNote       $F2
00088706 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088709 E1FF                       	smpsAlterNote       $FF
0008870B E701                       	dc.b	smpsNoAttack, $01
0008870D E111                       	smpsAlterNote       $11
0008870F E701                       	dc.b	smpsNoAttack, $01
00088711 E106                       	smpsAlterNote       $06
00088713 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00088716 E107                       	smpsAlterNote       $07
00088718 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00088724 E117                       	smpsAlterNote       $17
00088726 A001                       	dc.b	nG2, $01
00088728 E1FA                       	smpsAlterNote       $FA
0008872A E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008872D E116                       	smpsAlterNote       $16
0008872F E701                       	dc.b	smpsNoAttack, $01
00088731 E1F5                       	smpsAlterNote       $F5
00088733 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00088736 E103                       	smpsAlterNote       $03
00088738 E701                       	dc.b	smpsNoAttack, $01
0008873A E10B                       	smpsAlterNote       $0B
0008873C E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00088740 E107                       	smpsAlterNote       $07
00088742 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00088748 E109                       	smpsAlterNote       $09
0008874A 9E03                       	dc.b	nF2, $03
0008874C E10B                       	smpsAlterNote       $0B
0008874E 9603 8001                  	dc.b	nA1, $03, nRst, $01
00088752 E107                       	smpsAlterNote       $07
00088754 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008875A E10B                       	smpsAlterNote       $0B
0008875C A203 8001                  	dc.b	nA2, $03, nRst, $01
00088760 E107                       	smpsAlterNote       $07
00088762 9B03                       	dc.b	nD2, $03
00088764 E11A                       	smpsAlterNote       $1A
00088766 A301                       	dc.b	nBb2, $01
00088768 E1F9                       	smpsAlterNote       $F9
0008876A E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008876D E1FF                       	smpsAlterNote       $FF
0008876F E701                       	dc.b	smpsNoAttack, $01
00088771 E111                       	smpsAlterNote       $11
00088773 E701                       	dc.b	smpsNoAttack, $01
00088775 E106                       	smpsAlterNote       $06
00088777 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008877A E107                       	smpsAlterNote       $07
0008877C 9B03                       	dc.b	nD2, $03
0008877E E108                       	smpsAlterNote       $08
00088780 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00088786 E109                       	smpsAlterNote       $09
00088788 A003                       	dc.b	nG2, $03
0008878A E1F0                       	smpsAlterNote       $F0
0008878C A501                       	dc.b	nC3, $01
0008878E E106                       	smpsAlterNote       $06
00088790 E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
00088794 E109                       	smpsAlterNote       $09
00088796 A006 8001                  	dc.b	nG2, $06, nRst, $01
0008879A E108                       	smpsAlterNote       $08
0008879C 9C03                       	dc.b	nEb2, $03
0008879E E107                       	smpsAlterNote       $07
000887A0 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000887A6 E10B                       	smpsAlterNote       $0B
000887A8 A203 8001                  	dc.b	nA2, $03, nRst, $01
000887AC E107                       	smpsAlterNote       $07
000887AE 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000887B2 E11A                       	smpsAlterNote       $1A
000887B4 A301                       	dc.b	nBb2, $01
000887B6 E1F9                       	smpsAlterNote       $F9
000887B8 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000887BB E107                       	smpsAlterNote       $07
000887BD E701                       	dc.b	smpsNoAttack, $01
000887BF E1FB                       	smpsAlterNote       $FB
000887C1 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000887C4 E106                       	smpsAlterNote       $06
000887C6 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000887CA E107                       	smpsAlterNote       $07
000887CC 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000887D4 E1EC                       	smpsAlterNote       $EC
000887D6 A101                       	dc.b	nAb2, $01
000887D8 E108                       	smpsAlterNote       $08
000887DA E701                       	dc.b	smpsNoAttack, $01
000887DC E1E7                       	smpsAlterNote       $E7
000887DE E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000887E1 E1F5                       	smpsAlterNote       $F5
000887E3 E701                       	dc.b	smpsNoAttack, $01
000887E5 E10B                       	smpsAlterNote       $0B
000887E7 E702                       	dc.b	smpsNoAttack, $02
000887E9 E107                       	smpsAlterNote       $07
000887EB 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
000887F1 E106                       	smpsAlterNote       $06
000887F3 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
000887F9 E10C                       	smpsAlterNote       $0C
000887FB 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00088803 E109                       	smpsAlterNote       $09
00088805 9E03                       	dc.b	nF2, $03
00088807 E10C                       	smpsAlterNote       $0C
00088809 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008880D E1EA                       	smpsAlterNote       $EA
0008880F A201                       	dc.b	nA2, $01
00088811 E106                       	smpsAlterNote       $06
00088813 E701                       	dc.b	smpsNoAttack, $01
00088815 E114                       	smpsAlterNote       $14
00088817 E701                       	dc.b	smpsNoAttack, $01
00088819 E1F0                       	smpsAlterNote       $F0
0008881B E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008881E E10C                       	smpsAlterNote       $0C
00088820 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
0008882C 9703                       	dc.b	nBb1, $03
0008882E E116                       	smpsAlterNote       $16
00088830 9C01                       	dc.b	nEb2, $01
00088832 E105                       	smpsAlterNote       $05
00088834 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00088837 E113                       	smpsAlterNote       $13
00088839 E701                       	dc.b	smpsNoAttack, $01
0008883B E1FF                       	smpsAlterNote       $FF
0008883D E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00088840 E109                       	smpsAlterNote       $09
00088842 E703                       	dc.b	smpsNoAttack, $03
00088844 E10C                       	smpsAlterNote       $0C
00088846 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00088852 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008885A E109                       	smpsAlterNote       $09
0008885C 9E03                       	dc.b	nF2, $03
0008885E E10C                       	smpsAlterNote       $0C
00088860 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00088864 E1EA                       	smpsAlterNote       $EA
00088866 A201                       	dc.b	nA2, $01
00088868 E106                       	smpsAlterNote       $06
0008886A E701                       	dc.b	smpsNoAttack, $01
0008886C E1E2                       	smpsAlterNote       $E2
0008886E E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00088871 E1F0                       	smpsAlterNote       $F0
00088873 E701                       	dc.b	smpsNoAttack, $01
00088875 E10C                       	smpsAlterNote       $0C
00088877 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00088883 E116                       	smpsAlterNote       $16
00088885 9C01                       	dc.b	nEb2, $01
00088887 E105                       	smpsAlterNote       $05
00088889 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0008888C E1F1                       	smpsAlterNote       $F1
0008888E E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00088891 E1FF                       	smpsAlterNote       $FF
00088893 E701                       	dc.b	smpsNoAttack, $01
00088895 E109                       	smpsAlterNote       $09
00088897 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008889B E10C                       	smpsAlterNote       $0C
0008889D 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
000888A9 E106                       	smpsAlterNote       $06
000888AB 9903                       	dc.b	nC2, $03
000888AD E107                       	smpsAlterNote       $07
000888AF 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000888B3 E109                       	smpsAlterNote       $09
000888B5 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
000888BB E107                       	smpsAlterNote       $07
000888BD 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000888C1 E108                       	smpsAlterNote       $08
000888C3 9D03                       	dc.b	nE2, $03
000888C5 E10B                       	smpsAlterNote       $0B
000888C7 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
000888CD E109                       	smpsAlterNote       $09
000888CF 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
000888D5 E10C                       	smpsAlterNote       $0C
000888D7 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
000888DD E106                       	smpsAlterNote       $06
000888DF 9903                       	dc.b	nC2, $03
000888E1 E11A                       	smpsAlterNote       $1A
000888E3 A301                       	dc.b	nBb2, $01
000888E5 E1F9                       	smpsAlterNote       $F9
000888E7 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000888EA E1FF                       	smpsAlterNote       $FF
000888EC E701                       	dc.b	smpsNoAttack, $01
000888EE E111                       	smpsAlterNote       $11
000888F0 E701                       	dc.b	smpsNoAttack, $01
000888F2 E106                       	smpsAlterNote       $06
000888F4 E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
000888FB E109                       	smpsAlterNote       $09
000888FD A003                       	dc.b	nG2, $03
000888FF E106                       	smpsAlterNote       $06
00088901 9907                       	dc.b	nC2, $07
00088903 E107                       	smpsAlterNote       $07
00088905 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
0008890D E10B                       	smpsAlterNote       $0B
0008890F A203                       	dc.b	nA2, $03
00088911 E107                       	smpsAlterNote       $07
00088913 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088917 E1F2                       	smpsAlterNote       $F2
00088919 A401                       	dc.b	nB2, $01
0008891B E1F9                       	smpsAlterNote       $F9
0008891D E701                       	dc.b	smpsNoAttack, $01
0008891F E107                       	smpsAlterNote       $07
00088921 E701                       	dc.b	smpsNoAttack, $01
00088923 E1FB                       	smpsAlterNote       $FB
00088925 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088928 E106                       	smpsAlterNote       $06
0008892A E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008892E E107                       	smpsAlterNote       $07
00088930 9B03                       	dc.b	nD2, $03
00088932 E108                       	smpsAlterNote       $08
00088934 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
0008893A E109                       	smpsAlterNote       $09
0008893C A003 8001                  	dc.b	nG2, $03, nRst, $01
00088940 E1F2                       	smpsAlterNote       $F2
00088942 A401                       	dc.b	nB2, $01
00088944 E1F9                       	smpsAlterNote       $F9
00088946 E701                       	dc.b	smpsNoAttack, $01
00088948 E107                       	smpsAlterNote       $07
0008894A E701                       	dc.b	smpsNoAttack, $01
0008894C E1FB                       	smpsAlterNote       $FB
0008894E E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088951 E106                       	smpsAlterNote       $06
00088953 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088957 E108                       	smpsAlterNote       $08
00088959 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
0008895D E10C                       	smpsAlterNote       $0C
0008895F A302 8001                  	dc.b	nBb2, $02, nRst, $01
00088963 E107                       	smpsAlterNote       $07
00088965 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008896B E10B                       	smpsAlterNote       $0B
0008896D A203                       	dc.b	nA2, $03
0008896F E107                       	smpsAlterNote       $07
00088971 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088975 E1F2                       	smpsAlterNote       $F2
00088977 A401                       	dc.b	nB2, $01
00088979 E1FF                       	smpsAlterNote       $FF
0008897B E701                       	dc.b	smpsNoAttack, $01
0008897D E107                       	smpsAlterNote       $07
0008897F E701                       	dc.b	smpsNoAttack, $01
00088981 E1FB                       	smpsAlterNote       $FB
00088983 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088986 E106                       	smpsAlterNote       $06
00088988 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008898C E107                       	smpsAlterNote       $07
0008898E 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00088992 E108                       	smpsAlterNote       $08
00088994 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
0008899A E109                       	smpsAlterNote       $09
0008899C A003 8001                  	dc.b	nG2, $03, nRst, $01
000889A0 E1F2                       	smpsAlterNote       $F2
000889A2 A401                       	dc.b	nB2, $01
000889A4 E1FF                       	smpsAlterNote       $FF
000889A6 E701                       	dc.b	smpsNoAttack, $01
000889A8 E111                       	smpsAlterNote       $11
000889AA E701                       	dc.b	smpsNoAttack, $01
000889AC E1FB                       	smpsAlterNote       $FB
000889AE E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000889B1 E106                       	smpsAlterNote       $06
000889B3 E702                       	dc.b	smpsNoAttack, $02
000889B5 E108                       	smpsAlterNote       $08
000889B7 9C07                       	dc.b	nEb2, $07
000889B9 E10C                       	smpsAlterNote       $0C
000889BB A303 8001                  	dc.b	nBb2, $03, nRst, $01
000889BF E107                       	smpsAlterNote       $07
000889C1 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000889C7 E10B                       	smpsAlterNote       $0B
000889C9 A202 8001                  	dc.b	nA2, $02, nRst, $01
000889CD E107                       	smpsAlterNote       $07
000889CF 9B03                       	dc.b	nD2, $03
000889D1 E11A                       	smpsAlterNote       $1A
000889D3 A301                       	dc.b	nBb2, $01
000889D5 E1F2                       	smpsAlterNote       $F2
000889D7 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000889DA E1FF                       	smpsAlterNote       $FF
000889DC E701                       	dc.b	smpsNoAttack, $01
000889DE E111                       	smpsAlterNote       $11
000889E0 E701                       	dc.b	smpsNoAttack, $01
000889E2 E106                       	smpsAlterNote       $06
000889E4 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000889E7 E107                       	smpsAlterNote       $07
000889E9 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000889ED E108                       	smpsAlterNote       $08
000889EF 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
000889F7 E109                       	smpsAlterNote       $09
000889F9 A003                       	dc.b	nG2, $03
000889FB E11A                       	smpsAlterNote       $1A
000889FD A301                       	dc.b	nBb2, $01
000889FF E1F2                       	smpsAlterNote       $F2
00088A01 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088A04 E1FF                       	smpsAlterNote       $FF
00088A06 E701                       	dc.b	smpsNoAttack, $01
00088A08 E111                       	smpsAlterNote       $11
00088A0A E701                       	dc.b	smpsNoAttack, $01
00088A0C E106                       	smpsAlterNote       $06
00088A0E E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00088A11 E108                       	smpsAlterNote       $08
00088A13 9C07                       	dc.b	nEb2, $07
00088A15 E10C                       	smpsAlterNote       $0C
00088A17 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00088A1B E107                       	smpsAlterNote       $07
00088A1D 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
00088A29 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
00088A33 E108                       	smpsAlterNote       $08
00088A35 9C06                       	dc.b	nEb2, $06
00088A37 E10C                       	smpsAlterNote       $0C
00088A39 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00088A3D E108                       	smpsAlterNote       $08
00088A3F 9C03                       	dc.b	nEb2, $03
00088A41 E109                       	smpsAlterNote       $09
00088A43 A003 8001                  	dc.b	nG2, $03, nRst, $01
00088A47 E10C                       	smpsAlterNote       $0C
00088A49 A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
00088A51 E107                       	smpsAlterNote       $07
00088A53 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088A57 F6F4 F8                    	smpsJump            music84_Jump04
00088A5A                            
00088A5A                            ; FM2 Data
00088A5A                            music84_FM2:
00088A5A E0C0                       	smpsPan             panCenter, $00
00088A5E E10B                       	smpsAlterNote       $0B
00088A60 C603 8007                  	dc.b	nA5, $03, nRst, $07
00088A64 E109                       	smpsAlterNote       $09
00088A66 C403 800B                  	dc.b	nG5, $03, nRst, $0B
00088A6A E108                       	smpsAlterNote       $08
00088A6C C103 8004                  	dc.b	nE5, $03, nRst, $04
00088A72 E080                       	smpsPan             panLeft, $00
00088A74 E10C                       	smpsAlterNote       $0C
00088A76 E6F9                       	smpsAlterVol        $F9
00088A78 C703                       	dc.b	nBb5, $03
00088A7A E10B                       	smpsAlterNote       $0B
00088A7C C603 8001                  	dc.b	nA5, $03, nRst, $01
00088A80 E109                       	smpsAlterNote       $09
00088A82 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
00088A88 E108                       	smpsAlterNote       $08
00088A8A C103 8001                  	dc.b	nE5, $03, nRst, $01
00088A8E E106                       	smpsAlterNote       $06
00088A90 BD03                       	dc.b	nC5, $03
00088A92 E10B                       	smpsAlterNote       $0B
00088A94 BA03 8001                  	dc.b	nA4, $03, nRst, $01
00088A9A E0C0                       	smpsPan             panCenter, $00
00088A9C E107                       	smpsAlterNote       $07
00088A9E E606                       	smpsAlterVol        $06
00088AA0 BF03                       	dc.b	nD5, $03
00088AA2                            
00088AA2                            music84_Jump03:
00088AA2 E108                       	smpsAlterNote       $08
00088AA4 C103 8001                  	dc.b	nE5, $03, nRst, $01
00088AA8 E109                       	smpsAlterNote       $09
00088AAA C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
00088AB0 E10B                       	smpsAlterNote       $0B
00088AB2 C607                       	dc.b	nA5, $07
00088AB4 E107                       	smpsAlterNote       $07
00088AB6 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00088ABA E106                       	smpsAlterNote       $06
00088ABC C90D                       	dc.b	nC6, $0D
00088ABE E100                       	smpsAlterNote       $00
00088AC0 E701                       	dc.b	smpsNoAttack, $01
00088AC2 E1FF                       	smpsAlterNote       $FF
00088AC4 E701                       	dc.b	smpsNoAttack, $01
00088AC6 E103                       	smpsAlterNote       $03
00088AC8 E701                       	dc.b	smpsNoAttack, $01
00088ACA E109                       	smpsAlterNote       $09
00088ACC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088AD0 E106                       	smpsAlterNote       $06
00088AD2 E701                       	dc.b	smpsNoAttack, $01
00088AD4 E100                       	smpsAlterNote       $00
00088AD6 E701                       	dc.b	smpsNoAttack, $01
00088AD8 E10C                       	smpsAlterNote       $0C
00088ADA C703 8001                  	dc.b	nBb5, $03, nRst, $01
00088ADE E10B                       	smpsAlterNote       $0B
00088AE0 C603                       	dc.b	nA5, $03
00088AE2 E109                       	smpsAlterNote       $09
00088AE4 C403 8001                  	dc.b	nG5, $03, nRst, $01
00088AE8 E10B                       	smpsAlterNote       $0B
00088AEA C60D                       	dc.b	nA5, $0D
00088AEC E105                       	smpsAlterNote       $05
00088AEE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088AF2 E10B                       	smpsAlterNote       $0B
00088AF4 E701                       	dc.b	smpsNoAttack, $01
00088AF6 E10E                       	smpsAlterNote       $0E
00088AF8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088AFC E108                       	smpsAlterNote       $08
00088AFE E701                       	dc.b	smpsNoAttack, $01
00088B00 E104                       	smpsAlterNote       $04
00088B02 E701                       	dc.b	smpsNoAttack, $01
00088B04 E105                       	smpsAlterNote       $05
00088B06 E701                       	dc.b	smpsNoAttack, $01
00088B08 E10B                       	smpsAlterNote       $0B
00088B0A E701                       	dc.b	smpsNoAttack, $01
00088B0C E10F                       	smpsAlterNote       $0F
00088B0E E701                       	dc.b	smpsNoAttack, $01
00088B10 E10B                       	smpsAlterNote       $0B
00088B12 E701                       	dc.b	smpsNoAttack, $01
00088B14 E108                       	smpsAlterNote       $08
00088B16 E701                       	dc.b	smpsNoAttack, $01
00088B18 E104                       	smpsAlterNote       $04
00088B1A E701                       	dc.b	smpsNoAttack, $01
00088B1C E108                       	smpsAlterNote       $08
00088B1E E701                       	dc.b	smpsNoAttack, $01
00088B20 E10E                       	smpsAlterNote       $0E
00088B22 E701                       	dc.b	smpsNoAttack, $01
00088B24 E10F                       	smpsAlterNote       $0F
00088B26 E701                       	dc.b	smpsNoAttack, $01
00088B28 E10B                       	smpsAlterNote       $0B
00088B2A E701                       	dc.b	smpsNoAttack, $01
00088B2C E105                       	smpsAlterNote       $05
00088B2E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B32 E108                       	smpsAlterNote       $08
00088B34 E701                       	dc.b	smpsNoAttack, $01
00088B36 E10E                       	smpsAlterNote       $0E
00088B38 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B3C E108                       	smpsAlterNote       $08
00088B3E E701                       	dc.b	smpsNoAttack, $01
00088B40 E105                       	smpsAlterNote       $05
00088B42 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B46 E10B                       	smpsAlterNote       $0B
00088B48 E701                       	dc.b	smpsNoAttack, $01
00088B4A E10F                       	smpsAlterNote       $0F
00088B4C E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00088B50 E107                       	smpsAlterNote       $07
00088B52 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00088B56 E108                       	smpsAlterNote       $08
00088B58 C103                       	dc.b	nE5, $03
00088B5A E109                       	smpsAlterNote       $09
00088B5C C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
00088B64 E10B                       	smpsAlterNote       $0B
00088B66 C606 8001                  	dc.b	nA5, $06, nRst, $01
00088B6A E107                       	smpsAlterNote       $07
00088B6C BF03                       	dc.b	nD5, $03
00088B6E E106                       	smpsAlterNote       $06
00088B70 C90D 8001                  	dc.b	nC6, $0D, nRst, $01
00088B74 E107                       	smpsAlterNote       $07
00088B76 CB03                       	dc.b	nD6, $03
00088B78 E10C                       	smpsAlterNote       $0C
00088B7A C704 8001                  	dc.b	nBb5, $04, nRst, $01
00088B7E E10B                       	smpsAlterNote       $0B
00088B80 C604 8001                  	dc.b	nA5, $04, nRst, $01
00088B84 E109                       	smpsAlterNote       $09
00088B86 C404                       	dc.b	nG5, $04
00088B88 E10B                       	smpsAlterNote       $0B
00088B8A C60D                       	dc.b	nA5, $0D
00088B8C E108                       	smpsAlterNote       $08
00088B8E E701                       	dc.b	smpsNoAttack, $01
00088B90 E104                       	smpsAlterNote       $04
00088B92 E701                       	dc.b	smpsNoAttack, $01
00088B94 E108                       	smpsAlterNote       $08
00088B96 E701                       	dc.b	smpsNoAttack, $01
00088B98 E10B                       	smpsAlterNote       $0B
00088B9A E701                       	dc.b	smpsNoAttack, $01
00088B9C E10F                       	smpsAlterNote       $0F
00088B9E E701                       	dc.b	smpsNoAttack, $01
00088BA0 E10B                       	smpsAlterNote       $0B
00088BA2 E701                       	dc.b	smpsNoAttack, $01
00088BA4 E105                       	smpsAlterNote       $05
00088BA6 E701                       	dc.b	smpsNoAttack, $01
00088BA8 E104                       	smpsAlterNote       $04
00088BAA E701                       	dc.b	smpsNoAttack, $01
00088BAC E108                       	smpsAlterNote       $08
00088BAE E701                       	dc.b	smpsNoAttack, $01
00088BB0 E10E                       	smpsAlterNote       $0E
00088BB2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088BB6 E10B                       	smpsAlterNote       $0B
00088BB8 E701                       	dc.b	smpsNoAttack, $01
00088BBA E105                       	smpsAlterNote       $05
00088BBC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088BC0 E10B                       	smpsAlterNote       $0B
00088BC2 E701                       	dc.b	smpsNoAttack, $01
00088BC4 E10E                       	smpsAlterNote       $0E
00088BC6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088BCA E108                       	smpsAlterNote       $08
00088BCC E701                       	dc.b	smpsNoAttack, $01
00088BCE E104                       	smpsAlterNote       $04
00088BD0 E701                       	dc.b	smpsNoAttack, $01
00088BD2 E105                       	smpsAlterNote       $05
00088BD4 E701                       	dc.b	smpsNoAttack, $01
00088BD6 E10B                       	smpsAlterNote       $0B
00088BD8 E701                       	dc.b	smpsNoAttack, $01
00088BDA E10F                       	smpsAlterNote       $0F
00088BDC E701                       	dc.b	smpsNoAttack, $01
00088BDE E10B                       	smpsAlterNote       $0B
00088BE0 E701                       	dc.b	smpsNoAttack, $01
00088BE2 E108                       	smpsAlterNote       $08
00088BE4 E701                       	dc.b	smpsNoAttack, $01
00088BE6 E105                       	smpsAlterNote       $05
00088BE8 8001                       	dc.b	nRst, $01
00088BEA E109                       	smpsAlterNote       $09
00088BEC C401                       	dc.b	nG5, $01
00088BEE E10B                       	smpsAlterNote       $0B
00088BF0 E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
00088BF9 E109                       	smpsAlterNote       $09
00088BFB C404 8001                  	dc.b	nG5, $04, nRst, $01
00088BFF E10B                       	smpsAlterNote       $0B
00088C01 C604 8001                  	dc.b	nA5, $04, nRst, $01
00088C05 E107                       	smpsAlterNote       $07
00088C07 BF0D                       	dc.b	nD5, $0D
00088C09 E101                       	smpsAlterNote       $01
00088C0B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088C0F E104                       	smpsAlterNote       $04
00088C11 E701                       	dc.b	smpsNoAttack, $01
00088C13 E10A                       	smpsAlterNote       $0A
00088C15 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088C19 E104                       	smpsAlterNote       $04
00088C1B E701                       	dc.b	smpsNoAttack, $01
00088C1D E101                       	smpsAlterNote       $01
00088C1F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088C23 E107                       	smpsAlterNote       $07
00088C25 E701                       	dc.b	smpsNoAttack, $01
00088C27 E10B                       	smpsAlterNote       $0B
00088C29 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00088C2D E108                       	smpsAlterNote       $08
00088C2F C101                       	dc.b	nE5, $01
00088C31 E109                       	smpsAlterNote       $09
00088C33 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
00088C38 E10B                       	smpsAlterNote       $0B
00088C3A C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00088C42 E108                       	smpsAlterNote       $08
00088C44 CD06                       	dc.b	nE6, $06
00088C46 E109                       	smpsAlterNote       $09
00088C48 CE07                       	dc.b	nF6, $07
00088C4A E108                       	smpsAlterNote       $08
00088C4C CD03 8001                  	dc.b	nE6, $03, nRst, $01
00088C50 E106                       	smpsAlterNote       $06
00088C52 C903                       	dc.b	nC6, $03
00088C54 E109                       	smpsAlterNote       $09
00088C56 C403 8001                  	dc.b	nG5, $03, nRst, $01
00088C5A E10C                       	smpsAlterNote       $0C
00088C5C C70D                       	dc.b	nBb5, $0D
00088C5E E106                       	smpsAlterNote       $06
00088C60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088C64 E109                       	smpsAlterNote       $09
00088C66 E701                       	dc.b	smpsNoAttack, $01
00088C68 E10F                       	smpsAlterNote       $0F
00088C6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088C6E E109                       	smpsAlterNote       $09
00088C70 E701                       	dc.b	smpsNoAttack, $01
00088C72 E106                       	smpsAlterNote       $06
00088C74 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088C78 E10C                       	smpsAlterNote       $0C
00088C7A E701                       	dc.b	smpsNoAttack, $01
00088C7C E110                       	smpsAlterNote       $10
00088C7E E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00088C82 E10B                       	smpsAlterNote       $0B
00088C84 C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
00088C88 E105                       	smpsAlterNote       $05
00088C8A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088C8E E10B                       	smpsAlterNote       $0B
00088C90 E701                       	dc.b	smpsNoAttack, $01
00088C92 E10E                       	smpsAlterNote       $0E
00088C94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088C98 E108                       	smpsAlterNote       $08
00088C9A E701                       	dc.b	smpsNoAttack, $01
00088C9C E104                       	smpsAlterNote       $04
00088C9E E701                       	dc.b	smpsNoAttack, $01
00088CA0 E105                       	smpsAlterNote       $05
00088CA2 E701                       	dc.b	smpsNoAttack, $01
00088CA4 E10B                       	smpsAlterNote       $0B
00088CA6 E701                       	dc.b	smpsNoAttack, $01
00088CA8 E10F                       	smpsAlterNote       $0F
00088CAA E701                       	dc.b	smpsNoAttack, $01
00088CAC E10B                       	smpsAlterNote       $0B
00088CAE E701                       	dc.b	smpsNoAttack, $01
00088CB0 E108                       	smpsAlterNote       $08
00088CB2 E701                       	dc.b	smpsNoAttack, $01
00088CB4 E104                       	smpsAlterNote       $04
00088CB6 E701                       	dc.b	smpsNoAttack, $01
00088CB8 E108                       	smpsAlterNote       $08
00088CBA E701                       	dc.b	smpsNoAttack, $01
00088CBC E10E                       	smpsAlterNote       $0E
00088CBE E701                       	dc.b	smpsNoAttack, $01
00088CC0 E10F                       	smpsAlterNote       $0F
00088CC2 E701                       	dc.b	smpsNoAttack, $01
00088CC4 E10B                       	smpsAlterNote       $0B
00088CC6 E701                       	dc.b	smpsNoAttack, $01
00088CC8 E105                       	smpsAlterNote       $05
00088CCA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088CCE E108                       	smpsAlterNote       $08
00088CD0 E701                       	dc.b	smpsNoAttack, $01
00088CD2 E10E                       	smpsAlterNote       $0E
00088CD4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088CD8 E108                       	smpsAlterNote       $08
00088CDA E701                       	dc.b	smpsNoAttack, $01
00088CDC E105                       	smpsAlterNote       $05
00088CDE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088CE2 E10B                       	smpsAlterNote       $0B
00088CE4 E701                       	dc.b	smpsNoAttack, $01
00088CE6 E10F                       	smpsAlterNote       $0F
00088CE8 E701                       	dc.b	smpsNoAttack, $01
00088CEA E10E                       	smpsAlterNote       $0E
00088CEC E701                       	dc.b	smpsNoAttack, $01
00088CEE E108                       	smpsAlterNote       $08
00088CF0 E701                       	dc.b	smpsNoAttack, $01
00088CF2 E104                       	smpsAlterNote       $04
00088CF4 E701                       	dc.b	smpsNoAttack, $01
00088CF6 E108                       	smpsAlterNote       $08
00088CF8 E701                       	dc.b	smpsNoAttack, $01
00088CFA E10E                       	smpsAlterNote       $0E
00088CFC E701                       	dc.b	smpsNoAttack, $01
00088CFE E10F                       	smpsAlterNote       $0F
00088D00 E701                       	dc.b	smpsNoAttack, $01
00088D02 E10B                       	smpsAlterNote       $0B
00088D04 E701                       	dc.b	smpsNoAttack, $01
00088D06 E105                       	smpsAlterNote       $05
00088D08 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D0C E108                       	smpsAlterNote       $08
00088D0E E701                       	dc.b	smpsNoAttack, $01
00088D10 E10E                       	smpsAlterNote       $0E
00088D12 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D16 E108                       	smpsAlterNote       $08
00088D18 E701                       	dc.b	smpsNoAttack, $01
00088D1A E105                       	smpsAlterNote       $05
00088D1C E701                       	dc.b	smpsNoAttack, $01
00088D1E E10B                       	smpsAlterNote       $0B
00088D20 C60D                       	dc.b	nA5, $0D
00088D22 E108                       	smpsAlterNote       $08
00088D24 E701                       	dc.b	smpsNoAttack, $01
00088D26 E104                       	smpsAlterNote       $04
00088D28 E701                       	dc.b	smpsNoAttack, $01
00088D2A E105                       	smpsAlterNote       $05
00088D2C E701                       	dc.b	smpsNoAttack, $01
00088D2E E10B                       	smpsAlterNote       $0B
00088D30 E701                       	dc.b	smpsNoAttack, $01
00088D32 E10F                       	smpsAlterNote       $0F
00088D34 E701                       	dc.b	smpsNoAttack, $01
00088D36 E10B                       	smpsAlterNote       $0B
00088D38 E701                       	dc.b	smpsNoAttack, $01
00088D3A E108                       	smpsAlterNote       $08
00088D3C E701                       	dc.b	smpsNoAttack, $01
00088D3E E104                       	smpsAlterNote       $04
00088D40 E701                       	dc.b	smpsNoAttack, $01
00088D42 E108                       	smpsAlterNote       $08
00088D44 E701                       	dc.b	smpsNoAttack, $01
00088D46 E10E                       	smpsAlterNote       $0E
00088D48 E701                       	dc.b	smpsNoAttack, $01
00088D4A E10F                       	smpsAlterNote       $0F
00088D4C E701                       	dc.b	smpsNoAttack, $01
00088D50 E109                       	smpsAlterNote       $09
00088D52 E6FF                       	smpsAlterVol        $FF
00088D54 C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
00088D5E E108                       	smpsAlterNote       $08
00088D60 C103 800E                  	dc.b	nE5, $03, nRst, $0E
00088D66 E107                       	smpsAlterNote       $07
00088D68 E601                       	smpsAlterVol        $01
00088D6A BF03                       	dc.b	nD5, $03
00088D6C E108                       	smpsAlterNote       $08
00088D6E C103 8001                  	dc.b	nE5, $03, nRst, $01
00088D72 E109                       	smpsAlterNote       $09
00088D74 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00088D7A E10B                       	smpsAlterNote       $0B
00088D7C C606 8001                  	dc.b	nA5, $06, nRst, $01
00088D80 E107                       	smpsAlterNote       $07
00088D82 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00088D86 E106                       	smpsAlterNote       $06
00088D88 C90D                       	dc.b	nC6, $0D
00088D8A E103                       	smpsAlterNote       $03
00088D8C E701                       	dc.b	smpsNoAttack, $01
00088D8E E1FF                       	smpsAlterNote       $FF
00088D90 E701                       	dc.b	smpsNoAttack, $01
00088D92 E103                       	smpsAlterNote       $03
00088D94 E701                       	dc.b	smpsNoAttack, $01
00088D96 E109                       	smpsAlterNote       $09
00088D98 E701                       	dc.b	smpsNoAttack, $01
00088D9A E10A                       	smpsAlterNote       $0A
00088D9C E701                       	dc.b	smpsNoAttack, $01
00088D9E E106                       	smpsAlterNote       $06
00088DA0 E701                       	dc.b	smpsNoAttack, $01
00088DA2 E100                       	smpsAlterNote       $00
00088DA4 E701                       	dc.b	smpsNoAttack, $01
00088DA6 E10C                       	smpsAlterNote       $0C
00088DA8 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00088DAC E10B                       	smpsAlterNote       $0B
00088DAE C603                       	dc.b	nA5, $03
00088DB0 E109                       	smpsAlterNote       $09
00088DB2 C403 8001                  	dc.b	nG5, $03, nRst, $01
00088DB6 E10B                       	smpsAlterNote       $0B
00088DB8 C60D                       	dc.b	nA5, $0D
00088DBA E105                       	smpsAlterNote       $05
00088DBC E701                       	dc.b	smpsNoAttack, $01
00088DBE E104                       	smpsAlterNote       $04
00088DC0 E701                       	dc.b	smpsNoAttack, $01
00088DC2 E108                       	smpsAlterNote       $08
00088DC4 E701                       	dc.b	smpsNoAttack, $01
00088DC6 E10E                       	smpsAlterNote       $0E
00088DC8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088DCC E10B                       	smpsAlterNote       $0B
00088DCE E701                       	dc.b	smpsNoAttack, $01
00088DD0 E105                       	smpsAlterNote       $05
00088DD2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088DD6 E10B                       	smpsAlterNote       $0B
00088DD8 E701                       	dc.b	smpsNoAttack, $01
00088DDA E10E                       	smpsAlterNote       $0E
00088DDC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088DE0 E108                       	smpsAlterNote       $08
00088DE2 E701                       	dc.b	smpsNoAttack, $01
00088DE4 E104                       	smpsAlterNote       $04
00088DE6 E701                       	dc.b	smpsNoAttack, $01
00088DE8 E105                       	smpsAlterNote       $05
00088DEA E701                       	dc.b	smpsNoAttack, $01
00088DEC E10B                       	smpsAlterNote       $0B
00088DEE E701                       	dc.b	smpsNoAttack, $01
00088DF0 E10F                       	smpsAlterNote       $0F
00088DF2 E701                       	dc.b	smpsNoAttack, $01
00088DF4 E10B                       	smpsAlterNote       $0B
00088DF6 E701                       	dc.b	smpsNoAttack, $01
00088DF8 E108                       	smpsAlterNote       $08
00088DFA E701                       	dc.b	smpsNoAttack, $01
00088DFC E104                       	smpsAlterNote       $04
00088DFE E701                       	dc.b	smpsNoAttack, $01
00088E00 E108                       	smpsAlterNote       $08
00088E02 E701                       	dc.b	smpsNoAttack, $01
00088E04 E10E                       	smpsAlterNote       $0E
00088E06 E701                       	dc.b	smpsNoAttack, $01
00088E08 E10F                       	smpsAlterNote       $0F
00088E0A E701                       	dc.b	smpsNoAttack, $01
00088E0C E10B                       	smpsAlterNote       $0B
00088E0E E701                       	dc.b	smpsNoAttack, $01
00088E10 E105                       	smpsAlterNote       $05
00088E12 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E16 E108                       	smpsAlterNote       $08
00088E18 E701                       	dc.b	smpsNoAttack, $01
00088E1A E10E                       	smpsAlterNote       $0E
00088E1C E701                       	dc.b	smpsNoAttack, $01
00088E1E E10F                       	smpsAlterNote       $0F
00088E20 800F                       	dc.b	nRst, $0F
00088E22 E107                       	smpsAlterNote       $07
00088E24 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00088E28 E108                       	smpsAlterNote       $08
00088E2A C103                       	dc.b	nE5, $03
00088E2C E109                       	smpsAlterNote       $09
00088E2E C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00088E34 E10B                       	smpsAlterNote       $0B
00088E36 C606 8001                  	dc.b	nA5, $06, nRst, $01
00088E3A E107                       	smpsAlterNote       $07
00088E3C BF03                       	dc.b	nD5, $03
00088E3E E106                       	smpsAlterNote       $06
00088E40 C90E                       	dc.b	nC6, $0E
00088E42 E107                       	smpsAlterNote       $07
00088E44 CB03 8001                  	dc.b	nD6, $03, nRst, $01
00088E48 E10C                       	smpsAlterNote       $0C
00088E4A C704                       	dc.b	nBb5, $04
00088E4C E10B                       	smpsAlterNote       $0B
00088E4E C604 8001                  	dc.b	nA5, $04, nRst, $01
00088E52 E109                       	smpsAlterNote       $09
00088E54 C404                       	dc.b	nG5, $04
00088E56 E10B                       	smpsAlterNote       $0B
00088E58 C60D                       	dc.b	nA5, $0D
00088E5A E108                       	smpsAlterNote       $08
00088E5C E701                       	dc.b	smpsNoAttack, $01
00088E5E E105                       	smpsAlterNote       $05
00088E60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E64 E10B                       	smpsAlterNote       $0B
00088E66 E701                       	dc.b	smpsNoAttack, $01
00088E68 E10F                       	smpsAlterNote       $0F
00088E6A E701                       	dc.b	smpsNoAttack, $01
00088E6C E10E                       	smpsAlterNote       $0E
00088E6E E701                       	dc.b	smpsNoAttack, $01
00088E70 E108                       	smpsAlterNote       $08
00088E72 E701                       	dc.b	smpsNoAttack, $01
00088E74 E104                       	smpsAlterNote       $04
00088E76 E701                       	dc.b	smpsNoAttack, $01
00088E78 E108                       	smpsAlterNote       $08
00088E7A E701                       	dc.b	smpsNoAttack, $01
00088E7C E10B                       	smpsAlterNote       $0B
00088E7E E701                       	dc.b	smpsNoAttack, $01
00088E80 E10F                       	smpsAlterNote       $0F
00088E82 E701                       	dc.b	smpsNoAttack, $01
00088E84 E10B                       	smpsAlterNote       $0B
00088E86 E701                       	dc.b	smpsNoAttack, $01
00088E88 E105                       	smpsAlterNote       $05
00088E8A E701                       	dc.b	smpsNoAttack, $01
00088E8C E104                       	smpsAlterNote       $04
00088E8E E701                       	dc.b	smpsNoAttack, $01
00088E90 E108                       	smpsAlterNote       $08
00088E92 E701                       	dc.b	smpsNoAttack, $01
00088E94 E10E                       	smpsAlterNote       $0E
00088E96 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E9A E10B                       	smpsAlterNote       $0B
00088E9C E701                       	dc.b	smpsNoAttack, $01
00088E9E E105                       	smpsAlterNote       $05
00088EA0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088EA4 E10B                       	smpsAlterNote       $0B
00088EA6 E701                       	dc.b	smpsNoAttack, $01
00088EA8 E10E                       	smpsAlterNote       $0E
00088EAA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088EAE E108                       	smpsAlterNote       $08
00088EB0 E701                       	dc.b	smpsNoAttack, $01
00088EB2 E105                       	smpsAlterNote       $05
00088EB4 8001                       	dc.b	nRst, $01
00088EB6 E109                       	smpsAlterNote       $09
00088EB8 C402                       	dc.b	nG5, $02
00088EBA E10B                       	smpsAlterNote       $0B
00088EBC E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00088EC5 E109                       	smpsAlterNote       $09
00088EC7 C404                       	dc.b	nG5, $04
00088EC9 E10B                       	smpsAlterNote       $0B
00088ECB C604 8001                  	dc.b	nA5, $04, nRst, $01
00088ECF E107                       	smpsAlterNote       $07
00088ED1 BF0D                       	dc.b	nD5, $0D
00088ED3 E101                       	smpsAlterNote       $01
00088ED5 E701                       	dc.b	smpsNoAttack, $01
00088ED7 E100                       	smpsAlterNote       $00
00088ED9 E701                       	dc.b	smpsNoAttack, $01
00088EDB E104                       	smpsAlterNote       $04
00088EDD E701                       	dc.b	smpsNoAttack, $01
00088EDF E10A                       	smpsAlterNote       $0A
00088EE1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088EE5 E107                       	smpsAlterNote       $07
00088EE7 E701                       	dc.b	smpsNoAttack, $01
00088EE9 E101                       	smpsAlterNote       $01
00088EEB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088EEF E107                       	smpsAlterNote       $07
00088EF1 E701                       	dc.b	smpsNoAttack, $01
00088EF3 E10A                       	smpsAlterNote       $0A
00088EF5 E701                       	dc.b	smpsNoAttack, $01
00088EF7 E10B                       	smpsAlterNote       $0B
00088EF9 8001                       	dc.b	nRst, $01
00088EFB E108                       	smpsAlterNote       $08
00088EFD C101                       	dc.b	nE5, $01
00088EFF E109                       	smpsAlterNote       $09
00088F01 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
00088F06 E10B                       	smpsAlterNote       $0B
00088F08 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00088F10 E108                       	smpsAlterNote       $08
00088F12 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00088F16 E109                       	smpsAlterNote       $09
00088F18 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00088F1C E108                       	smpsAlterNote       $08
00088F1E CD02 8001                  	dc.b	nE6, $02, nRst, $01
00088F22 E106                       	smpsAlterNote       $06
00088F24 C903                       	dc.b	nC6, $03
00088F26 E109                       	smpsAlterNote       $09
00088F28 C403 8001                  	dc.b	nG5, $03, nRst, $01
00088F2C E10C                       	smpsAlterNote       $0C
00088F2E C70D                       	dc.b	nBb5, $0D
00088F30 E109                       	smpsAlterNote       $09
00088F32 E701                       	dc.b	smpsNoAttack, $01
00088F34 E105                       	smpsAlterNote       $05
00088F36 E701                       	dc.b	smpsNoAttack, $01
00088F38 E109                       	smpsAlterNote       $09
00088F3A E701                       	dc.b	smpsNoAttack, $01
00088F3C E10F                       	smpsAlterNote       $0F
00088F3E E701                       	dc.b	smpsNoAttack, $01
00088F40 E110                       	smpsAlterNote       $10
00088F42 E701                       	dc.b	smpsNoAttack, $01
00088F44 E10C                       	smpsAlterNote       $0C
00088F46 E701                       	dc.b	smpsNoAttack, $01
00088F48 E106                       	smpsAlterNote       $06
00088F4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088F4E E109                       	smpsAlterNote       $09
00088F50 E701                       	dc.b	smpsNoAttack, $01
00088F52 E10F                       	smpsAlterNote       $0F
00088F54 E701                       	dc.b	smpsNoAttack, $01
00088F56 E110                       	smpsAlterNote       $10
00088F58 8001                       	dc.b	nRst, $01
00088F5A E10B                       	smpsAlterNote       $0B
00088F5C C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
00088F62 E105                       	smpsAlterNote       $05
00088F64 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088F68 E108                       	smpsAlterNote       $08
00088F6A E701                       	dc.b	smpsNoAttack, $01
00088F6C E10E                       	smpsAlterNote       $0E
00088F6E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088F72 E108                       	smpsAlterNote       $08
00088F74 E701                       	dc.b	smpsNoAttack, $01
00088F76 E105                       	smpsAlterNote       $05
00088F78 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088F7C E10B                       	smpsAlterNote       $0B
00088F7E E701                       	dc.b	smpsNoAttack, $01
00088F80 E10F                       	smpsAlterNote       $0F
00088F82 E701                       	dc.b	smpsNoAttack, $01
00088F84 E10E                       	smpsAlterNote       $0E
00088F86 E701                       	dc.b	smpsNoAttack, $01
00088F88 E108                       	smpsAlterNote       $08
00088F8A E701                       	dc.b	smpsNoAttack, $01
00088F8C E104                       	smpsAlterNote       $04
00088F8E E701                       	dc.b	smpsNoAttack, $01
00088F90 E108                       	smpsAlterNote       $08
00088F92 E701                       	dc.b	smpsNoAttack, $01
00088F94 E10B                       	smpsAlterNote       $0B
00088F96 E701                       	dc.b	smpsNoAttack, $01
00088F98 E10F                       	smpsAlterNote       $0F
00088F9A E701                       	dc.b	smpsNoAttack, $01
00088F9C E10B                       	smpsAlterNote       $0B
00088F9E E701                       	dc.b	smpsNoAttack, $01
00088FA0 E105                       	smpsAlterNote       $05
00088FA2 E701                       	dc.b	smpsNoAttack, $01
00088FA4 E104                       	smpsAlterNote       $04
00088FA6 E701                       	dc.b	smpsNoAttack, $01
00088FA8 E108                       	smpsAlterNote       $08
00088FAA E701                       	dc.b	smpsNoAttack, $01
00088FAC E10E                       	smpsAlterNote       $0E
00088FAE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088FB2 E10B                       	smpsAlterNote       $0B
00088FB4 E701                       	dc.b	smpsNoAttack, $01
00088FB6 E105                       	smpsAlterNote       $05
00088FB8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088FBC E10B                       	smpsAlterNote       $0B
00088FBE E701                       	dc.b	smpsNoAttack, $01
00088FC0 E10E                       	smpsAlterNote       $0E
00088FC2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088FC6 E108                       	smpsAlterNote       $08
00088FC8 E701                       	dc.b	smpsNoAttack, $01
00088FCA E104                       	smpsAlterNote       $04
00088FCC E701                       	dc.b	smpsNoAttack, $01
00088FCE E105                       	smpsAlterNote       $05
00088FD0 E701                       	dc.b	smpsNoAttack, $01
00088FD2 E10B                       	smpsAlterNote       $0B
00088FD4 E701                       	dc.b	smpsNoAttack, $01
00088FD6 E10F                       	smpsAlterNote       $0F
00088FD8 E701                       	dc.b	smpsNoAttack, $01
00088FDA E10B                       	smpsAlterNote       $0B
00088FDC E701                       	dc.b	smpsNoAttack, $01
00088FDE E108                       	smpsAlterNote       $08
00088FE0 E701                       	dc.b	smpsNoAttack, $01
00088FE2 E104                       	smpsAlterNote       $04
00088FE4 E701                       	dc.b	smpsNoAttack, $01
00088FE6 E108                       	smpsAlterNote       $08
00088FE8 E701                       	dc.b	smpsNoAttack, $01
00088FEA E10E                       	smpsAlterNote       $0E
00088FEC E701                       	dc.b	smpsNoAttack, $01
00088FEE E10F                       	smpsAlterNote       $0F
00088FF0 E701                       	dc.b	smpsNoAttack, $01
00088FF2 E10B                       	smpsAlterNote       $0B
00088FF4 E701                       	dc.b	smpsNoAttack, $01
00088FF6 E105                       	smpsAlterNote       $05
00088FF8 E701                       	dc.b	smpsNoAttack, $01
00088FFA E10B                       	smpsAlterNote       $0B
00088FFC C60E                       	dc.b	nA5, $0E
00088FFE E105                       	smpsAlterNote       $05
00089000 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089004 E10B                       	smpsAlterNote       $0B
00089006 E701                       	dc.b	smpsNoAttack, $01
00089008 E10E                       	smpsAlterNote       $0E
0008900A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008900E E108                       	smpsAlterNote       $08
00089010 E701                       	dc.b	smpsNoAttack, $01
00089012 E104                       	smpsAlterNote       $04
00089014 E701                       	dc.b	smpsNoAttack, $01
00089016 E105                       	smpsAlterNote       $05
00089018 E701                       	dc.b	smpsNoAttack, $01
0008901A E10B                       	smpsAlterNote       $0B
0008901C E701                       	dc.b	smpsNoAttack, $01
0008901E E10F                       	smpsAlterNote       $0F
00089020 E701                       	dc.b	smpsNoAttack, $01
00089022 E10B                       	smpsAlterNote       $0B
00089024 E701                       	dc.b	smpsNoAttack, $01
00089026 E108                       	smpsAlterNote       $08
00089028 E701                       	dc.b	smpsNoAttack, $01
0008902A E104                       	smpsAlterNote       $04
0008902C E701                       	dc.b	smpsNoAttack, $01
0008902E E108                       	smpsAlterNote       $08
00089030 E701                       	dc.b	smpsNoAttack, $01
00089032 E10E                       	smpsAlterNote       $0E
00089034 E701                       	dc.b	smpsNoAttack, $01
00089036 E10F                       	smpsAlterNote       $0F
00089038 E701                       	dc.b	smpsNoAttack, $01
0008903A E10B                       	smpsAlterNote       $0B
0008903C E701                       	dc.b	smpsNoAttack, $01
0008903E E105                       	smpsAlterNote       $05
00089040 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089044 E108                       	smpsAlterNote       $08
00089046 E701                       	dc.b	smpsNoAttack, $01
00089048 E10E                       	smpsAlterNote       $0E
0008904A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008904E E108                       	smpsAlterNote       $08
00089050 E701                       	dc.b	smpsNoAttack, $01
00089052 E105                       	smpsAlterNote       $05
00089054 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089058 E10B                       	smpsAlterNote       $0B
0008905A E701                       	dc.b	smpsNoAttack, $01
0008905C E10F                       	smpsAlterNote       $0F
0008905E E701                       	dc.b	smpsNoAttack, $01
00089060 E10E                       	smpsAlterNote       $0E
00089062 E701                       	dc.b	smpsNoAttack, $01
00089064 E108                       	smpsAlterNote       $08
00089066 E701                       	dc.b	smpsNoAttack, $01
00089068 E104                       	smpsAlterNote       $04
0008906A E701                       	dc.b	smpsNoAttack, $01
0008906C E108                       	smpsAlterNote       $08
0008906E E701                       	dc.b	smpsNoAttack, $01
00089070 E10E                       	smpsAlterNote       $0E
00089072 E701                       	dc.b	smpsNoAttack, $01
00089074 E10F                       	smpsAlterNote       $0F
00089076 E701                       	dc.b	smpsNoAttack, $01
00089078 E10B                       	smpsAlterNote       $0B
0008907A E701                       	dc.b	smpsNoAttack, $01
0008907C E105                       	smpsAlterNote       $05
0008907E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089082 E108                       	smpsAlterNote       $08
00089084 E701                       	dc.b	smpsNoAttack, $01
00089086 E10E                       	smpsAlterNote       $0E
00089088 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008908C E108                       	smpsAlterNote       $08
0008908E E701                       	dc.b	smpsNoAttack, $01
00089090 E105                       	smpsAlterNote       $05
00089092 E701                       	dc.b	smpsNoAttack, $01
00089096 E10B                       	smpsAlterNote       $0B
00089098 E6FD                       	smpsAlterVol        $FD
0008909A C604 8001                  	dc.b	nA5, $04, nRst, $01
0008909E E109                       	smpsAlterNote       $09
000890A0 C404                       	dc.b	nG5, $04
000890A2 E10B                       	smpsAlterNote       $0B
000890A4 C604 8001                  	dc.b	nA5, $04, nRst, $01
000890A8 E107                       	smpsAlterNote       $07
000890AA BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
000890B0 E10B                       	smpsAlterNote       $0B
000890B2 C604                       	dc.b	nA5, $04
000890B4 E109                       	smpsAlterNote       $09
000890B6 C404 8001                  	dc.b	nG5, $04, nRst, $01
000890BA E10B                       	smpsAlterNote       $0B
000890BC C604                       	dc.b	nA5, $04
000890BE E108                       	smpsAlterNote       $08
000890C0 C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
000890C8 E106                       	smpsAlterNote       $06
000890CA C904 8001                  	dc.b	nC6, $04, nRst, $01
000890CE E10C                       	smpsAlterNote       $0C
000890D0 C704                       	dc.b	nBb5, $04
000890D2 E10B                       	smpsAlterNote       $0B
000890D4 C604 8001                  	dc.b	nA5, $04, nRst, $01
000890D8 E109                       	smpsAlterNote       $09
000890DA C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
000890E4 E10B                       	smpsAlterNote       $0B
000890E6 C60D                       	dc.b	nA5, $0D
000890E8 E108                       	smpsAlterNote       $08
000890EA E701                       	dc.b	smpsNoAttack, $01
000890EC E104                       	smpsAlterNote       $04
000890EE E701                       	dc.b	smpsNoAttack, $01
000890F0 E108                       	smpsAlterNote       $08
000890F2 E701                       	dc.b	smpsNoAttack, $01
000890F4 E10E                       	smpsAlterNote       $0E
000890F6 E701                       	dc.b	smpsNoAttack, $01
000890F8 E10F                       	smpsAlterNote       $0F
000890FA E701                       	dc.b	smpsNoAttack, $01
000890FC E10B                       	smpsAlterNote       $0B
000890FE E701                       	dc.b	smpsNoAttack, $01
00089100 E105                       	smpsAlterNote       $05
00089102 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089106 E108                       	smpsAlterNote       $08
00089108 E701                       	dc.b	smpsNoAttack, $01
0008910A E10E                       	smpsAlterNote       $0E
0008910C E701                       	dc.b	smpsNoAttack, $01
0008910E E10F                       	smpsAlterNote       $0F
00089110 8001                       	dc.b	nRst, $01
00089112 E109                       	smpsAlterNote       $09
00089114 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008911A E108                       	smpsAlterNote       $08
0008911C C10D                       	dc.b	nE5, $0D
0008911E E102                       	smpsAlterNote       $02
00089120 E701                       	dc.b	smpsNoAttack, $01
00089122 E101                       	smpsAlterNote       $01
00089124 E701                       	dc.b	smpsNoAttack, $01
00089126 E105                       	smpsAlterNote       $05
00089128 E701                       	dc.b	smpsNoAttack, $01
0008912A E10B                       	smpsAlterNote       $0B
0008912C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089130 E108                       	smpsAlterNote       $08
00089132 E701                       	dc.b	smpsNoAttack, $01
00089134 E102                       	smpsAlterNote       $02
00089136 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008913A E108                       	smpsAlterNote       $08
0008913C E701                       	dc.b	smpsNoAttack, $01
0008913E E10B                       	smpsAlterNote       $0B
00089140 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089144 E105                       	smpsAlterNote       $05
00089146 E701                       	dc.b	smpsNoAttack, $01
00089148 E101                       	smpsAlterNote       $01
0008914A E701                       	dc.b	smpsNoAttack, $01
0008914C E102                       	smpsAlterNote       $02
0008914E E701                       	dc.b	smpsNoAttack, $01
00089150 E108                       	smpsAlterNote       $08
00089152 E701                       	dc.b	smpsNoAttack, $01
00089154 E10C                       	smpsAlterNote       $0C
00089156 E701                       	dc.b	smpsNoAttack, $01
00089158 E108                       	smpsAlterNote       $08
0008915A E701                       	dc.b	smpsNoAttack, $01
0008915C E105                       	smpsAlterNote       $05
0008915E E701                       	dc.b	smpsNoAttack, $01
00089160 E101                       	smpsAlterNote       $01
00089162 E701                       	dc.b	smpsNoAttack, $01
00089164 E105                       	smpsAlterNote       $05
00089166 E701                       	dc.b	smpsNoAttack, $01
00089168 E10B                       	smpsAlterNote       $0B
0008916A E701                       	dc.b	smpsNoAttack, $01
0008916C E10C                       	smpsAlterNote       $0C
0008916E E701                       	dc.b	smpsNoAttack, $01
00089170 E108                       	smpsAlterNote       $08
00089172 E701                       	dc.b	smpsNoAttack, $01
00089174 E102                       	smpsAlterNote       $02
00089176 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008917A E105                       	smpsAlterNote       $05
0008917C E701                       	dc.b	smpsNoAttack, $01
0008917E E10B                       	smpsAlterNote       $0B
00089180 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089184 E105                       	smpsAlterNote       $05
00089186 E701                       	dc.b	smpsNoAttack, $01
00089188 E102                       	smpsAlterNote       $02
0008918A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008918E E108                       	smpsAlterNote       $08
00089190 E701                       	dc.b	smpsNoAttack, $01
00089192 E10C                       	smpsAlterNote       $0C
00089194 E701                       	dc.b	smpsNoAttack, $01
00089196 E10B                       	smpsAlterNote       $0B
00089198 E701                       	dc.b	smpsNoAttack, $01
0008919A E105                       	smpsAlterNote       $05
0008919C E701                       	dc.b	smpsNoAttack, $01
0008919E E101                       	smpsAlterNote       $01
000891A0 E701                       	dc.b	smpsNoAttack, $01
000891A2 E105                       	smpsAlterNote       $05
000891A4 E701                       	dc.b	smpsNoAttack, $01
000891A6 E108                       	smpsAlterNote       $08
000891A8 E701                       	dc.b	smpsNoAttack, $01
000891AA E10C                       	smpsAlterNote       $0C
000891AC E701                       	dc.b	smpsNoAttack, $01
000891AE E108                       	smpsAlterNote       $08
000891B0 E701                       	dc.b	smpsNoAttack, $01
000891B2 E102                       	smpsAlterNote       $02
000891B4 E701                       	dc.b	smpsNoAttack, $01
000891B6 E101                       	smpsAlterNote       $01
000891B8 E701                       	dc.b	smpsNoAttack, $01
000891BA E105                       	smpsAlterNote       $05
000891BC E701                       	dc.b	smpsNoAttack, $01
000891BE E10B                       	smpsAlterNote       $0B
000891C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000891C4 E108                       	smpsAlterNote       $08
000891C6 E701                       	dc.b	smpsNoAttack, $01
000891C8 E102                       	smpsAlterNote       $02
000891CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000891CE E108                       	smpsAlterNote       $08
000891D0 E701                       	dc.b	smpsNoAttack, $01
000891D2 E10B                       	smpsAlterNote       $0B
000891D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000891D8 E105                       	smpsAlterNote       $05
000891DA E701                       	dc.b	smpsNoAttack, $01
000891DC E101                       	smpsAlterNote       $01
000891DE E701                       	dc.b	smpsNoAttack, $01
000891E0 E102                       	smpsAlterNote       $02
000891E2 E701                       	dc.b	smpsNoAttack, $01
000891E4 E108                       	smpsAlterNote       $08
000891E6 E701                       	dc.b	smpsNoAttack, $01
000891E8 E10C                       	smpsAlterNote       $0C
000891EA E701                       	dc.b	smpsNoAttack, $01
000891EC E108                       	smpsAlterNote       $08
000891EE E701                       	dc.b	smpsNoAttack, $01
000891F0 E105                       	smpsAlterNote       $05
000891F2 E701                       	dc.b	smpsNoAttack, $01
000891F4 E101                       	smpsAlterNote       $01
000891F6 E701                       	dc.b	smpsNoAttack, $01
000891F8 E105                       	smpsAlterNote       $05
000891FA E701                       	dc.b	smpsNoAttack, $01
000891FC E10B                       	smpsAlterNote       $0B
000891FE E701                       	dc.b	smpsNoAttack, $01
00089200 E10C                       	smpsAlterNote       $0C
00089202 E701                       	dc.b	smpsNoAttack, $01
00089204 E108                       	smpsAlterNote       $08
00089206 E701                       	dc.b	smpsNoAttack, $01
00089208 E102                       	smpsAlterNote       $02
0008920A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008920E E105                       	smpsAlterNote       $05
00089210 E701                       	dc.b	smpsNoAttack, $01
00089212 E10B                       	smpsAlterNote       $0B
00089214 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089218 E105                       	smpsAlterNote       $05
0008921A E701                       	dc.b	smpsNoAttack, $01
0008921C E101                       	smpsAlterNote       $01
0008921E E701                       	dc.b	smpsNoAttack, $01
00089220 E102                       	smpsAlterNote       $02
00089222 E701                       	dc.b	smpsNoAttack, $01
00089224 E108                       	smpsAlterNote       $08
00089226 E701                       	dc.b	smpsNoAttack, $01
00089228 E10C                       	smpsAlterNote       $0C
0008922A E701                       	dc.b	smpsNoAttack, $01
0008922C E108                       	smpsAlterNote       $08
0008922E E701                       	dc.b	smpsNoAttack, $01
00089230 E105                       	smpsAlterNote       $05
00089232 E701                       	dc.b	smpsNoAttack, $01
00089234 E101                       	smpsAlterNote       $01
00089236 E701                       	dc.b	smpsNoAttack, $01
00089238 E105                       	smpsAlterNote       $05
0008923A E701                       	dc.b	smpsNoAttack, $01
0008923C E10B                       	smpsAlterNote       $0B
0008923E E701                       	dc.b	smpsNoAttack, $01
00089240 E10C                       	smpsAlterNote       $0C
00089242 E701                       	dc.b	smpsNoAttack, $01
00089244 E108                       	smpsAlterNote       $08
00089246 E701                       	dc.b	smpsNoAttack, $01
00089248 E102                       	smpsAlterNote       $02
0008924A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008924E E105                       	smpsAlterNote       $05
00089250 E701                       	dc.b	smpsNoAttack, $01
00089252 E10B                       	smpsAlterNote       $0B
00089254 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089258 E105                       	smpsAlterNote       $05
0008925A E701                       	dc.b	smpsNoAttack, $01
0008925C E102                       	smpsAlterNote       $02
0008925E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089262 E108                       	smpsAlterNote       $08
00089264 E701                       	dc.b	smpsNoAttack, $01
00089266 E10C                       	smpsAlterNote       $0C
00089268 E701                       	dc.b	smpsNoAttack, $01
0008926A E10B                       	smpsAlterNote       $0B
0008926C E701                       	dc.b	smpsNoAttack, $01
0008926E E105                       	smpsAlterNote       $05
00089270 E701                       	dc.b	smpsNoAttack, $01
00089272 E101                       	smpsAlterNote       $01
00089274 E701                       	dc.b	smpsNoAttack, $01
00089276 E105                       	smpsAlterNote       $05
00089278 E701                       	dc.b	smpsNoAttack, $01
0008927A E108                       	smpsAlterNote       $08
0008927C E701                       	dc.b	smpsNoAttack, $01
0008927E E10C                       	smpsAlterNote       $0C
00089280 E701                       	dc.b	smpsNoAttack, $01
00089284 E10B                       	smpsAlterNote       $0B
00089286 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008928A E109                       	smpsAlterNote       $09
0008928C C404                       	dc.b	nG5, $04
0008928E E10B                       	smpsAlterNote       $0B
00089290 C604 8001                  	dc.b	nA5, $04, nRst, $01
00089294 E107                       	smpsAlterNote       $07
00089296 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
0008929C E10B                       	smpsAlterNote       $0B
0008929E C604                       	dc.b	nA5, $04
000892A0 E109                       	smpsAlterNote       $09
000892A2 C404 8001                  	dc.b	nG5, $04, nRst, $01
000892A6 E10B                       	smpsAlterNote       $0B
000892A8 C604                       	dc.b	nA5, $04
000892AA E108                       	smpsAlterNote       $08
000892AC C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
000892B2 E106                       	smpsAlterNote       $06
000892B4 C904 8001                  	dc.b	nC6, $04, nRst, $01
000892B8 E10C                       	smpsAlterNote       $0C
000892BA C704                       	dc.b	nBb5, $04
000892BC E10B                       	smpsAlterNote       $0B
000892BE C604 8001                  	dc.b	nA5, $04, nRst, $01
000892C2 E109                       	smpsAlterNote       $09
000892C4 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
000892CE E10B                       	smpsAlterNote       $0B
000892D0 C60D                       	dc.b	nA5, $0D
000892D2 E108                       	smpsAlterNote       $08
000892D4 E701                       	dc.b	smpsNoAttack, $01
000892D6 E104                       	smpsAlterNote       $04
000892D8 E701                       	dc.b	smpsNoAttack, $01
000892DA E108                       	smpsAlterNote       $08
000892DC E701                       	dc.b	smpsNoAttack, $01
000892DE E10B                       	smpsAlterNote       $0B
000892E0 E701                       	dc.b	smpsNoAttack, $01
000892E2 E10F                       	smpsAlterNote       $0F
000892E4 E701                       	dc.b	smpsNoAttack, $01
000892E6 E10B                       	smpsAlterNote       $0B
000892E8 E701                       	dc.b	smpsNoAttack, $01
000892EA E105                       	smpsAlterNote       $05
000892EC E701                       	dc.b	smpsNoAttack, $01
000892EE E104                       	smpsAlterNote       $04
000892F0 E701                       	dc.b	smpsNoAttack, $01
000892F2 E108                       	smpsAlterNote       $08
000892F4 E701                       	dc.b	smpsNoAttack, $01
000892F6 E10E                       	smpsAlterNote       $0E
000892F8 E701                       	dc.b	smpsNoAttack, $01
000892FA E10F                       	smpsAlterNote       $0F
000892FC 8001                       	dc.b	nRst, $01
000892FE E109                       	smpsAlterNote       $09
00089300 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00089306 E108                       	smpsAlterNote       $08
00089308 C10D                       	dc.b	nE5, $0D
0008930A E105                       	smpsAlterNote       $05
0008930C E701                       	dc.b	smpsNoAttack, $01
0008930E E101                       	smpsAlterNote       $01
00089310 E701                       	dc.b	smpsNoAttack, $01
00089312 E105                       	smpsAlterNote       $05
00089314 E701                       	dc.b	smpsNoAttack, $01
00089316 E10B                       	smpsAlterNote       $0B
00089318 E701                       	dc.b	smpsNoAttack, $01
0008931A E10C                       	smpsAlterNote       $0C
0008931C E701                       	dc.b	smpsNoAttack, $01
0008931E E108                       	smpsAlterNote       $08
00089320 E701                       	dc.b	smpsNoAttack, $01
00089322 E102                       	smpsAlterNote       $02
00089324 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089328 E105                       	smpsAlterNote       $05
0008932A E701                       	dc.b	smpsNoAttack, $01
0008932C E10B                       	smpsAlterNote       $0B
0008932E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089332 E105                       	smpsAlterNote       $05
00089334 E701                       	dc.b	smpsNoAttack, $01
00089336 E102                       	smpsAlterNote       $02
00089338 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008933C E108                       	smpsAlterNote       $08
0008933E E701                       	dc.b	smpsNoAttack, $01
00089340 E10C                       	smpsAlterNote       $0C
00089342 E701                       	dc.b	smpsNoAttack, $01
00089344 E10B                       	smpsAlterNote       $0B
00089346 E701                       	dc.b	smpsNoAttack, $01
00089348 E105                       	smpsAlterNote       $05
0008934A E701                       	dc.b	smpsNoAttack, $01
0008934C E101                       	smpsAlterNote       $01
0008934E E701                       	dc.b	smpsNoAttack, $01
00089350 E105                       	smpsAlterNote       $05
00089352 E701                       	dc.b	smpsNoAttack, $01
00089354 E108                       	smpsAlterNote       $08
00089356 E701                       	dc.b	smpsNoAttack, $01
00089358 E10C                       	smpsAlterNote       $0C
0008935A E701                       	dc.b	smpsNoAttack, $01
0008935C E108                       	smpsAlterNote       $08
0008935E E701                       	dc.b	smpsNoAttack, $01
00089360 E102                       	smpsAlterNote       $02
00089362 E701                       	dc.b	smpsNoAttack, $01
00089364 E101                       	smpsAlterNote       $01
00089366 E701                       	dc.b	smpsNoAttack, $01
00089368 E105                       	smpsAlterNote       $05
0008936A E701                       	dc.b	smpsNoAttack, $01
0008936C E10B                       	smpsAlterNote       $0B
0008936E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089372 E108                       	smpsAlterNote       $08
00089374 E701                       	dc.b	smpsNoAttack, $01
00089376 E102                       	smpsAlterNote       $02
00089378 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008937C E108                       	smpsAlterNote       $08
0008937E E701                       	dc.b	smpsNoAttack, $01
00089380 E10B                       	smpsAlterNote       $0B
00089382 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089386 E105                       	smpsAlterNote       $05
00089388 E701                       	dc.b	smpsNoAttack, $01
0008938A E101                       	smpsAlterNote       $01
0008938C E701                       	dc.b	smpsNoAttack, $01
0008938E E102                       	smpsAlterNote       $02
00089390 E701                       	dc.b	smpsNoAttack, $01
00089392 E108                       	smpsAlterNote       $08
00089394 E701                       	dc.b	smpsNoAttack, $01
00089396 E10C                       	smpsAlterNote       $0C
00089398 E701                       	dc.b	smpsNoAttack, $01
0008939A E108                       	smpsAlterNote       $08
0008939C E701                       	dc.b	smpsNoAttack, $01
0008939E E105                       	smpsAlterNote       $05
000893A0 E701                       	dc.b	smpsNoAttack, $01
000893A2 E101                       	smpsAlterNote       $01
000893A4 E701                       	dc.b	smpsNoAttack, $01
000893A6 E105                       	smpsAlterNote       $05
000893A8 E701                       	dc.b	smpsNoAttack, $01
000893AA E10B                       	smpsAlterNote       $0B
000893AC E701                       	dc.b	smpsNoAttack, $01
000893AE E10C                       	smpsAlterNote       $0C
000893B0 E701                       	dc.b	smpsNoAttack, $01
000893B2 E108                       	smpsAlterNote       $08
000893B4 E701                       	dc.b	smpsNoAttack, $01
000893B6 E102                       	smpsAlterNote       $02
000893B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000893BC E108                       	smpsAlterNote       $08
000893BE E701                       	dc.b	smpsNoAttack, $01
000893C0 E10B                       	smpsAlterNote       $0B
000893C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000893C6 E105                       	smpsAlterNote       $05
000893C8 E701                       	dc.b	smpsNoAttack, $01
000893CA E101                       	smpsAlterNote       $01
000893CC E701                       	dc.b	smpsNoAttack, $01
000893CE E102                       	smpsAlterNote       $02
000893D0 E701                       	dc.b	smpsNoAttack, $01
000893D2 E108                       	smpsAlterNote       $08
000893D4 E701                       	dc.b	smpsNoAttack, $01
000893D6 E10C                       	smpsAlterNote       $0C
000893D8 E701                       	dc.b	smpsNoAttack, $01
000893DA E108                       	smpsAlterNote       $08
000893DC E701                       	dc.b	smpsNoAttack, $01
000893DE E105                       	smpsAlterNote       $05
000893E0 E701                       	dc.b	smpsNoAttack, $01
000893E2 E101                       	smpsAlterNote       $01
000893E4 E701                       	dc.b	smpsNoAttack, $01
000893E6 E105                       	smpsAlterNote       $05
000893E8 E701                       	dc.b	smpsNoAttack, $01
000893EA E10B                       	smpsAlterNote       $0B
000893EC E701                       	dc.b	smpsNoAttack, $01
000893EE E10C                       	smpsAlterNote       $0C
000893F0 E701                       	dc.b	smpsNoAttack, $01
000893F2 E108                       	smpsAlterNote       $08
000893F4 E701                       	dc.b	smpsNoAttack, $01
000893F6 E102                       	smpsAlterNote       $02
000893F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000893FC E105                       	smpsAlterNote       $05
000893FE E701                       	dc.b	smpsNoAttack, $01
00089400 E10B                       	smpsAlterNote       $0B
00089402 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089406 E105                       	smpsAlterNote       $05
00089408 E701                       	dc.b	smpsNoAttack, $01
0008940A E102                       	smpsAlterNote       $02
0008940C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089410 E108                       	smpsAlterNote       $08
00089412 E701                       	dc.b	smpsNoAttack, $01
00089414 E10C                       	smpsAlterNote       $0C
00089416 E701                       	dc.b	smpsNoAttack, $01
00089418 E10B                       	smpsAlterNote       $0B
0008941A E701                       	dc.b	smpsNoAttack, $01
0008941C E105                       	smpsAlterNote       $05
0008941E E701                       	dc.b	smpsNoAttack, $01
00089420 E101                       	smpsAlterNote       $01
00089422 E701                       	dc.b	smpsNoAttack, $01
00089424 E105                       	smpsAlterNote       $05
00089426 E701                       	dc.b	smpsNoAttack, $01
00089428 E108                       	smpsAlterNote       $08
0008942A E701                       	dc.b	smpsNoAttack, $01
0008942C E10C                       	smpsAlterNote       $0C
0008942E E701                       	dc.b	smpsNoAttack, $01
00089430 E108                       	smpsAlterNote       $08
00089432 E701                       	dc.b	smpsNoAttack, $01
00089434 E102                       	smpsAlterNote       $02
00089436 E701                       	dc.b	smpsNoAttack, $01
00089438 E101                       	smpsAlterNote       $01
0008943A E701                       	dc.b	smpsNoAttack, $01
0008943C E105                       	smpsAlterNote       $05
0008943E E701                       	dc.b	smpsNoAttack, $01
00089440 E10B                       	smpsAlterNote       $0B
00089442 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089446 E108                       	smpsAlterNote       $08
00089448 E701                       	dc.b	smpsNoAttack, $01
0008944A E102                       	smpsAlterNote       $02
0008944C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089450 E108                       	smpsAlterNote       $08
00089452 E701                       	dc.b	smpsNoAttack, $01
00089454 E10B                       	smpsAlterNote       $0B
00089456 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008945A E105                       	smpsAlterNote       $05
0008945C E701                       	dc.b	smpsNoAttack, $01
0008945E E102                       	smpsAlterNote       $02
00089460 8001                       	dc.b	nRst, $01
00089462 E107                       	smpsAlterNote       $07
00089464 BF01 8001                  	dc.b	nD5, $01, nRst, $01
00089468 E108                       	smpsAlterNote       $08
0008946A C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
0008946E E102                       	smpsAlterNote       $02
00089470 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089474 E108                       	smpsAlterNote       $08
00089476 E701                       	dc.b	smpsNoAttack, $01
00089478 E10B                       	smpsAlterNote       $0B
0008947A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008947E E105                       	smpsAlterNote       $05
00089480 E701                       	dc.b	smpsNoAttack, $01
00089482 E101                       	smpsAlterNote       $01
00089484 E701                       	dc.b	smpsNoAttack, $01
00089486 E102                       	smpsAlterNote       $02
00089488 E701                       	dc.b	smpsNoAttack, $01
0008948A E108                       	smpsAlterNote       $08
0008948C E701                       	dc.b	smpsNoAttack, $01
0008948E E10C                       	smpsAlterNote       $0C
00089490 E701                       	dc.b	smpsNoAttack, $01
00089492 E108                       	smpsAlterNote       $08
00089494 E701                       	dc.b	smpsNoAttack, $01
00089496 E105                       	smpsAlterNote       $05
00089498 E701                       	dc.b	smpsNoAttack, $01
0008949A E101                       	smpsAlterNote       $01
0008949C E701                       	dc.b	smpsNoAttack, $01
0008949E E105                       	smpsAlterNote       $05
000894A0 E701                       	dc.b	smpsNoAttack, $01
000894A2 E10B                       	smpsAlterNote       $0B
000894A4 E701                       	dc.b	smpsNoAttack, $01
000894A6 E10C                       	smpsAlterNote       $0C
000894A8 E701                       	dc.b	smpsNoAttack, $01
000894AA E108                       	smpsAlterNote       $08
000894AC E701                       	dc.b	smpsNoAttack, $01
000894AE E102                       	smpsAlterNote       $02
000894B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000894B4 E105                       	smpsAlterNote       $05
000894B6 E701                       	dc.b	smpsNoAttack, $01
000894B8 E10B                       	smpsAlterNote       $0B
000894BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000894BE E105                       	smpsAlterNote       $05
000894C0 E701                       	dc.b	smpsNoAttack, $01
000894C2 E102                       	smpsAlterNote       $02
000894C4 E701                       	dc.b	smpsNoAttack, $01
000894C6 E109                       	smpsAlterNote       $09
000894C8 C40A C207                  	dc.b	nG5, $0A, nF5, $07
000894CC E108                       	smpsAlterNote       $08
000894CE C10D                       	dc.b	nE5, $0D
000894D0 E105                       	smpsAlterNote       $05
000894D2 E701                       	dc.b	smpsNoAttack, $01
000894D4 E101                       	smpsAlterNote       $01
000894D6 E701                       	dc.b	smpsNoAttack, $01
000894D8 E102                       	smpsAlterNote       $02
000894DA E701                       	dc.b	smpsNoAttack, $01
000894DC E108                       	smpsAlterNote       $08
000894DE E701                       	dc.b	smpsNoAttack, $01
000894E0 E10C                       	smpsAlterNote       $0C
000894E2 E701                       	dc.b	smpsNoAttack, $01
000894E4 E108                       	smpsAlterNote       $08
000894E6 E701                       	dc.b	smpsNoAttack, $01
000894E8 E105                       	smpsAlterNote       $05
000894EA E701                       	dc.b	smpsNoAttack, $01
000894EC E101                       	smpsAlterNote       $01
000894EE E701                       	dc.b	smpsNoAttack, $01
000894F0 E105                       	smpsAlterNote       $05
000894F2 E701                       	dc.b	smpsNoAttack, $01
000894F4 E10B                       	smpsAlterNote       $0B
000894F6 E701                       	dc.b	smpsNoAttack, $01
000894F8 E10C                       	smpsAlterNote       $0C
000894FA E701                       	dc.b	smpsNoAttack, $01
000894FC E108                       	smpsAlterNote       $08
000894FE E701                       	dc.b	smpsNoAttack, $01
00089500 E102                       	smpsAlterNote       $02
00089502 E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
0008950A E10B                       	smpsAlterNote       $0B
0008950C BA01 8001                  	dc.b	nA4, $01, nRst, $01
00089510 E10C                       	smpsAlterNote       $0C
00089512 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00089516 E10B                       	smpsAlterNote       $0B
00089518 BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
0008951E E107                       	smpsAlterNote       $07
00089520 BF03                       	dc.b	nD5, $03
00089522 E108                       	smpsAlterNote       $08
00089524 C103 8001                  	dc.b	nE5, $03, nRst, $01
00089528 E109                       	smpsAlterNote       $09
0008952A C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00089530 E10B                       	smpsAlterNote       $0B
00089532 C606 8001                  	dc.b	nA5, $06, nRst, $01
00089536 E107                       	smpsAlterNote       $07
00089538 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008953C E106                       	smpsAlterNote       $06
0008953E C90D                       	dc.b	nC6, $0D
00089540 E103                       	smpsAlterNote       $03
00089542 E701                       	dc.b	smpsNoAttack, $01
00089544 E1FF                       	smpsAlterNote       $FF
00089546 E701                       	dc.b	smpsNoAttack, $01
00089548 E103                       	smpsAlterNote       $03
0008954A E701                       	dc.b	smpsNoAttack, $01
0008954C E109                       	smpsAlterNote       $09
0008954E E701                       	dc.b	smpsNoAttack, $01
00089550 E10A                       	smpsAlterNote       $0A
00089552 E701                       	dc.b	smpsNoAttack, $01
00089554 E106                       	smpsAlterNote       $06
00089556 E701                       	dc.b	smpsNoAttack, $01
00089558 E100                       	smpsAlterNote       $00
0008955A E701                       	dc.b	smpsNoAttack, $01
0008955C E10C                       	smpsAlterNote       $0C
0008955E C703 8001                  	dc.b	nBb5, $03, nRst, $01
00089562 E10B                       	smpsAlterNote       $0B
00089564 C603                       	dc.b	nA5, $03
00089566 E109                       	smpsAlterNote       $09
00089568 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008956C E10B                       	smpsAlterNote       $0B
0008956E C60D                       	dc.b	nA5, $0D
00089570 E105                       	smpsAlterNote       $05
00089572 E701                       	dc.b	smpsNoAttack, $01
00089574 E104                       	smpsAlterNote       $04
00089576 E701                       	dc.b	smpsNoAttack, $01
00089578 E108                       	smpsAlterNote       $08
0008957A E701                       	dc.b	smpsNoAttack, $01
0008957C E10E                       	smpsAlterNote       $0E
0008957E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089582 E10B                       	smpsAlterNote       $0B
00089584 E701                       	dc.b	smpsNoAttack, $01
00089586 E105                       	smpsAlterNote       $05
00089588 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008958C E10B                       	smpsAlterNote       $0B
0008958E E701                       	dc.b	smpsNoAttack, $01
00089590 E10E                       	smpsAlterNote       $0E
00089592 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089596 E108                       	smpsAlterNote       $08
00089598 E701                       	dc.b	smpsNoAttack, $01
0008959A E104                       	smpsAlterNote       $04
0008959C E701                       	dc.b	smpsNoAttack, $01
0008959E E105                       	smpsAlterNote       $05
000895A0 E701                       	dc.b	smpsNoAttack, $01
000895A2 E10B                       	smpsAlterNote       $0B
000895A4 E701                       	dc.b	smpsNoAttack, $01
000895A6 E10F                       	smpsAlterNote       $0F
000895A8 E701                       	dc.b	smpsNoAttack, $01
000895AA E10B                       	smpsAlterNote       $0B
000895AC E701                       	dc.b	smpsNoAttack, $01
000895AE E108                       	smpsAlterNote       $08
000895B0 E701                       	dc.b	smpsNoAttack, $01
000895B2 E104                       	smpsAlterNote       $04
000895B4 E701                       	dc.b	smpsNoAttack, $01
000895B6 E108                       	smpsAlterNote       $08
000895B8 E701                       	dc.b	smpsNoAttack, $01
000895BA E10E                       	smpsAlterNote       $0E
000895BC E701                       	dc.b	smpsNoAttack, $01
000895BE E10F                       	smpsAlterNote       $0F
000895C0 E701                       	dc.b	smpsNoAttack, $01
000895C2 E10B                       	smpsAlterNote       $0B
000895C4 E701                       	dc.b	smpsNoAttack, $01
000895C6 E105                       	smpsAlterNote       $05
000895C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000895CC E108                       	smpsAlterNote       $08
000895CE E701                       	dc.b	smpsNoAttack, $01
000895D0 E10E                       	smpsAlterNote       $0E
000895D2 E701                       	dc.b	smpsNoAttack, $01
000895D4 E10F                       	smpsAlterNote       $0F
000895D6 800F                       	dc.b	nRst, $0F
000895D8 E107                       	smpsAlterNote       $07
000895DA BF02 8001                  	dc.b	nD5, $02, nRst, $01
000895DE E108                       	smpsAlterNote       $08
000895E0 C103                       	dc.b	nE5, $03
000895E2 E109                       	smpsAlterNote       $09
000895E4 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
000895EA E10B                       	smpsAlterNote       $0B
000895EC C607                       	dc.b	nA5, $07
000895EE E107                       	smpsAlterNote       $07
000895F0 BF03 8001                  	dc.b	nD5, $03, nRst, $01
000895F4 E106                       	smpsAlterNote       $06
000895F6 C90D                       	dc.b	nC6, $0D
000895F8 E107                       	smpsAlterNote       $07
000895FA CB03 8001                  	dc.b	nD6, $03, nRst, $01
000895FE E10C                       	smpsAlterNote       $0C
00089600 C704                       	dc.b	nBb5, $04
00089602 E10B                       	smpsAlterNote       $0B
00089604 C604 8001                  	dc.b	nA5, $04, nRst, $01
00089608 E109                       	smpsAlterNote       $09
0008960A C404                       	dc.b	nG5, $04
0008960C E10B                       	smpsAlterNote       $0B
0008960E C60D                       	dc.b	nA5, $0D
00089610 E108                       	smpsAlterNote       $08
00089612 E701                       	dc.b	smpsNoAttack, $01
00089614 E105                       	smpsAlterNote       $05
00089616 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008961A E10B                       	smpsAlterNote       $0B
0008961C E701                       	dc.b	smpsNoAttack, $01
0008961E E10F                       	smpsAlterNote       $0F
00089620 E701                       	dc.b	smpsNoAttack, $01
00089622 E10E                       	smpsAlterNote       $0E
00089624 E701                       	dc.b	smpsNoAttack, $01
00089626 E108                       	smpsAlterNote       $08
00089628 E701                       	dc.b	smpsNoAttack, $01
0008962A E104                       	smpsAlterNote       $04
0008962C E701                       	dc.b	smpsNoAttack, $01
0008962E E108                       	smpsAlterNote       $08
00089630 E701                       	dc.b	smpsNoAttack, $01
00089632 E10B                       	smpsAlterNote       $0B
00089634 E701                       	dc.b	smpsNoAttack, $01
00089636 E10F                       	smpsAlterNote       $0F
00089638 E701                       	dc.b	smpsNoAttack, $01
0008963A E10B                       	smpsAlterNote       $0B
0008963C E701                       	dc.b	smpsNoAttack, $01
0008963E E105                       	smpsAlterNote       $05
00089640 E701                       	dc.b	smpsNoAttack, $01
00089642 E104                       	smpsAlterNote       $04
00089644 E701                       	dc.b	smpsNoAttack, $01
00089646 E108                       	smpsAlterNote       $08
00089648 E701                       	dc.b	smpsNoAttack, $01
0008964A E10E                       	smpsAlterNote       $0E
0008964C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089650 E10B                       	smpsAlterNote       $0B
00089652 E701                       	dc.b	smpsNoAttack, $01
00089654 E105                       	smpsAlterNote       $05
00089656 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008965A E10B                       	smpsAlterNote       $0B
0008965C E701                       	dc.b	smpsNoAttack, $01
0008965E E10E                       	smpsAlterNote       $0E
00089660 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089664 E108                       	smpsAlterNote       $08
00089666 E701                       	dc.b	smpsNoAttack, $01
00089668 E105                       	smpsAlterNote       $05
0008966A 8001                       	dc.b	nRst, $01
0008966C E109                       	smpsAlterNote       $09
0008966E C401 8001                  	dc.b	nG5, $01, nRst, $01
00089672 E10B                       	smpsAlterNote       $0B
00089674 C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
0008967C E109                       	smpsAlterNote       $09
0008967E C404                       	dc.b	nG5, $04
00089680 E10B                       	smpsAlterNote       $0B
00089682 C604 8001                  	dc.b	nA5, $04, nRst, $01
00089686 E107                       	smpsAlterNote       $07
00089688 BF0D                       	dc.b	nD5, $0D
0008968A E101                       	smpsAlterNote       $01
0008968C E701                       	dc.b	smpsNoAttack, $01
0008968E E100                       	smpsAlterNote       $00
00089690 E701                       	dc.b	smpsNoAttack, $01
00089692 E104                       	smpsAlterNote       $04
00089694 E701                       	dc.b	smpsNoAttack, $01
00089696 E10A                       	smpsAlterNote       $0A
00089698 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008969C E107                       	smpsAlterNote       $07
0008969E E701                       	dc.b	smpsNoAttack, $01
000896A0 E101                       	smpsAlterNote       $01
000896A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000896A6 E107                       	smpsAlterNote       $07
000896A8 E701                       	dc.b	smpsNoAttack, $01
000896AA E10A                       	smpsAlterNote       $0A
000896AC E701                       	dc.b	smpsNoAttack, $01
000896AE E10B                       	smpsAlterNote       $0B
000896B0 8001                       	dc.b	nRst, $01
000896B2 E108                       	smpsAlterNote       $08
000896B4 8001                       	dc.b	nRst, $01
000896B6 E109                       	smpsAlterNote       $09
000896B8 8001 C401                  	dc.b	nRst, $01, nG5, $01
000896BC E10B                       	smpsAlterNote       $0B
000896BE C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000896C6 E108                       	smpsAlterNote       $08
000896C8 CD06 8001                  	dc.b	nE6, $06, nRst, $01
000896CC E109                       	smpsAlterNote       $09
000896CE CE06 8001                  	dc.b	nF6, $06, nRst, $01
000896D2 E108                       	smpsAlterNote       $08
000896D4 CD02 8001                  	dc.b	nE6, $02, nRst, $01
000896D8 E106                       	smpsAlterNote       $06
000896DA C903                       	dc.b	nC6, $03
000896DC E109                       	smpsAlterNote       $09
000896DE C403 8001                  	dc.b	nG5, $03, nRst, $01
000896E2 E10C                       	smpsAlterNote       $0C
000896E4 C70D                       	dc.b	nBb5, $0D
000896E6 E109                       	smpsAlterNote       $09
000896E8 E701                       	dc.b	smpsNoAttack, $01
000896EA E105                       	smpsAlterNote       $05
000896EC E701                       	dc.b	smpsNoAttack, $01
000896EE E109                       	smpsAlterNote       $09
000896F0 E701                       	dc.b	smpsNoAttack, $01
000896F2 E10F                       	smpsAlterNote       $0F
000896F4 E701                       	dc.b	smpsNoAttack, $01
000896F6 E110                       	smpsAlterNote       $10
000896F8 E701                       	dc.b	smpsNoAttack, $01
000896FA E10C                       	smpsAlterNote       $0C
000896FC E701                       	dc.b	smpsNoAttack, $01
000896FE E106                       	smpsAlterNote       $06
00089700 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089704 E109                       	smpsAlterNote       $09
00089706 E701                       	dc.b	smpsNoAttack, $01
00089708 E10F                       	smpsAlterNote       $0F
0008970A E701                       	dc.b	smpsNoAttack, $01
0008970C E110                       	smpsAlterNote       $10
0008970E 8001                       	dc.b	nRst, $01
00089710 E10B                       	smpsAlterNote       $0B
00089712 C606 8001                  	dc.b	nA5, $06, nRst, $01
00089716 E109                       	smpsAlterNote       $09
00089718 C40D                       	dc.b	nG5, $0D
0008971A E103                       	smpsAlterNote       $03
0008971C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089720 E106                       	smpsAlterNote       $06
00089722 E701                       	dc.b	smpsNoAttack, $01
00089724 E10C                       	smpsAlterNote       $0C
00089726 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008972A E106                       	smpsAlterNote       $06
0008972C E701                       	dc.b	smpsNoAttack, $01
0008972E E103                       	smpsAlterNote       $03
00089730 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089734 E109                       	smpsAlterNote       $09
00089736 E701                       	dc.b	smpsNoAttack, $01
00089738 E10D                       	smpsAlterNote       $0D
0008973A E701                       	dc.b	smpsNoAttack, $01
0008973C E10C                       	smpsAlterNote       $0C
0008973E E701                       	dc.b	smpsNoAttack, $01
00089740 E106                       	smpsAlterNote       $06
00089742 E701                       	dc.b	smpsNoAttack, $01
00089744 E102                       	smpsAlterNote       $02
00089746 E701                       	dc.b	smpsNoAttack, $01
00089748 E103                       	smpsAlterNote       $03
0008974A 8001                       	dc.b	nRst, $01
0008974C E10B                       	smpsAlterNote       $0B
0008974E C60D                       	dc.b	nA5, $0D
00089750 E108                       	smpsAlterNote       $08
00089752 E701                       	dc.b	smpsNoAttack, $01
00089754 E104                       	smpsAlterNote       $04
00089756 E701                       	dc.b	smpsNoAttack, $01
00089758 E108                       	smpsAlterNote       $08
0008975A E701                       	dc.b	smpsNoAttack, $01
0008975C E10B                       	smpsAlterNote       $0B
0008975E E701                       	dc.b	smpsNoAttack, $01
00089760 E10F                       	smpsAlterNote       $0F
00089762 E701                       	dc.b	smpsNoAttack, $01
00089764 E10B                       	smpsAlterNote       $0B
00089766 E701                       	dc.b	smpsNoAttack, $01
00089768 E105                       	smpsAlterNote       $05
0008976A E701                       	dc.b	smpsNoAttack, $01
0008976C E104                       	smpsAlterNote       $04
0008976E E701                       	dc.b	smpsNoAttack, $01
00089770 E108                       	smpsAlterNote       $08
00089772 E701                       	dc.b	smpsNoAttack, $01
00089774 E10E                       	smpsAlterNote       $0E
00089776 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008977A E10B                       	smpsAlterNote       $0B
0008977C E701                       	dc.b	smpsNoAttack, $01
0008977E E105                       	smpsAlterNote       $05
00089780 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089784 E10C                       	smpsAlterNote       $0C
00089786 C70E                       	dc.b	nBb5, $0E
00089788 E106                       	smpsAlterNote       $06
0008978A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008978E E10C                       	smpsAlterNote       $0C
00089790 E701                       	dc.b	smpsNoAttack, $01
00089792 E10F                       	smpsAlterNote       $0F
00089794 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089798 E109                       	smpsAlterNote       $09
0008979A E701                       	dc.b	smpsNoAttack, $01
0008979C E105                       	smpsAlterNote       $05
0008979E E701                       	dc.b	smpsNoAttack, $01
000897A0 E106                       	smpsAlterNote       $06
000897A2 E701                       	dc.b	smpsNoAttack, $01
000897A4 E10C                       	smpsAlterNote       $0C
000897A6 E701                       	dc.b	smpsNoAttack, $01
000897A8 E110                       	smpsAlterNote       $10
000897AA E701                       	dc.b	smpsNoAttack, $01
000897AC E10C                       	smpsAlterNote       $0C
000897AE E701                       	dc.b	smpsNoAttack, $01
000897B0 E109                       	smpsAlterNote       $09
000897B2 E701                       	dc.b	smpsNoAttack, $01
000897B4 E105                       	smpsAlterNote       $05
000897B6 E701                       	dc.b	smpsNoAttack, $01
000897B8 E106                       	smpsAlterNote       $06
000897BA 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
000897BE E107                       	smpsAlterNote       $07
000897C0 CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
000897C5 E108                       	smpsAlterNote       $08
000897C7 CD0D                       	dc.b	nE6, $0D
000897C9 E107                       	smpsAlterNote       $07
000897CB CB0D                       	dc.b	nD6, $0D
000897CD E104                       	smpsAlterNote       $04
000897CF E701                       	dc.b	smpsNoAttack, $01
000897D1 E100                       	smpsAlterNote       $00
000897D3 E701                       	dc.b	smpsNoAttack, $01
000897D5 E101                       	smpsAlterNote       $01
000897D7 E701                       	dc.b	smpsNoAttack, $01
000897D9 E107                       	smpsAlterNote       $07
000897DB E701                       	dc.b	smpsNoAttack, $01
000897DD E10B                       	smpsAlterNote       $0B
000897DF E701                       	dc.b	smpsNoAttack, $01
000897E1 E107                       	smpsAlterNote       $07
000897E3 E701                       	dc.b	smpsNoAttack, $01
000897E5 E104                       	smpsAlterNote       $04
000897E7 E701                       	dc.b	smpsNoAttack, $01
000897E9 E100                       	smpsAlterNote       $00
000897EB E701                       	dc.b	smpsNoAttack, $01
000897ED E104                       	smpsAlterNote       $04
000897EF E701                       	dc.b	smpsNoAttack, $01
000897F1 E10A                       	smpsAlterNote       $0A
000897F3 E701                       	dc.b	smpsNoAttack, $01
000897F5 E10B                       	smpsAlterNote       $0B
000897F7 E701                       	dc.b	smpsNoAttack, $01
000897F9 E108                       	smpsAlterNote       $08
000897FB CC0D                       	dc.b	nEb6, $0D
000897FD E105                       	smpsAlterNote       $05
000897FF E701                       	dc.b	smpsNoAttack, $01
00089801 E101                       	smpsAlterNote       $01
00089803 E701                       	dc.b	smpsNoAttack, $01
00089805 E102                       	smpsAlterNote       $02
00089807 E701                       	dc.b	smpsNoAttack, $01
00089809 E108                       	smpsAlterNote       $08
0008980B E701                       	dc.b	smpsNoAttack, $01
0008980D E106                       	smpsAlterNote       $06
0008980F C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
0008981B 8001                       	dc.b	nRst, $01
0008981D E107                       	smpsAlterNote       $07
0008981F CB0D                       	dc.b	nD6, $0D
00089821 E104                       	smpsAlterNote       $04
00089823 E701                       	dc.b	smpsNoAttack, $01
00089825 E100                       	smpsAlterNote       $00
00089827 E701                       	dc.b	smpsNoAttack, $01
00089829 E104                       	smpsAlterNote       $04
0008982B E701                       	dc.b	smpsNoAttack, $01
0008982D E107                       	smpsAlterNote       $07
0008982F E701                       	dc.b	smpsNoAttack, $01
00089831 E10B                       	smpsAlterNote       $0B
00089833 E701                       	dc.b	smpsNoAttack, $01
00089835 E107                       	smpsAlterNote       $07
00089837 E701                       	dc.b	smpsNoAttack, $01
00089839 E101                       	smpsAlterNote       $01
0008983B E701                       	dc.b	smpsNoAttack, $01
0008983D E100                       	smpsAlterNote       $00
0008983F E701                       	dc.b	smpsNoAttack, $01
00089841 E104                       	smpsAlterNote       $04
00089843 E701                       	dc.b	smpsNoAttack, $01
00089845 E10A                       	smpsAlterNote       $0A
00089847 E701                       	dc.b	smpsNoAttack, $01
00089849 E10B                       	smpsAlterNote       $0B
0008984B 8001                       	dc.b	nRst, $01
0008984D E109                       	smpsAlterNote       $09
0008984F CE0A                       	dc.b	nF6, $0A
00089851 E108                       	smpsAlterNote       $08
00089853 CC07                       	dc.b	nEb6, $07
00089855 E106                       	smpsAlterNote       $06
00089857 C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
00089863 E107                       	smpsAlterNote       $07
00089865 CB0D                       	dc.b	nD6, $0D
00089867 E101                       	smpsAlterNote       $01
00089869 E701                       	dc.b	smpsNoAttack, $01
0008986B E100                       	smpsAlterNote       $00
0008986D E701                       	dc.b	smpsNoAttack, $01
0008986F E104                       	smpsAlterNote       $04
00089871 E701                       	dc.b	smpsNoAttack, $01
00089873 E10A                       	smpsAlterNote       $0A
00089875 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089879 E107                       	smpsAlterNote       $07
0008987B E701                       	dc.b	smpsNoAttack, $01
0008987D E101                       	smpsAlterNote       $01
0008987F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089883 E107                       	smpsAlterNote       $07
00089885 E701                       	dc.b	smpsNoAttack, $01
00089887 E10A                       	smpsAlterNote       $0A
00089889 E701                       	dc.b	smpsNoAttack, $01
0008988B E10B                       	smpsAlterNote       $0B
0008988D 8001                       	dc.b	nRst, $01
0008988F E108                       	smpsAlterNote       $08
00089891 CC0D                       	dc.b	nEb6, $0D
00089893 E102                       	smpsAlterNote       $02
00089895 E701                       	dc.b	smpsNoAttack, $01
00089897 E101                       	smpsAlterNote       $01
00089899 E701                       	dc.b	smpsNoAttack, $01
0008989B E105                       	smpsAlterNote       $05
0008989D E701                       	dc.b	smpsNoAttack, $01
0008989F E108                       	smpsAlterNote       $08
000898A1 8001                       	dc.b	nRst, $01
000898A3 E106                       	smpsAlterNote       $06
000898A5 C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
000898B1 8001                       	dc.b	nRst, $01
000898B3 E107                       	smpsAlterNote       $07
000898B5 CB0D                       	dc.b	nD6, $0D
000898B7 E101                       	smpsAlterNote       $01
000898B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898BD E104                       	smpsAlterNote       $04
000898BF E701                       	dc.b	smpsNoAttack, $01
000898C1 E10A                       	smpsAlterNote       $0A
000898C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898C7 E104                       	smpsAlterNote       $04
000898C9 E701                       	dc.b	smpsNoAttack, $01
000898CB E101                       	smpsAlterNote       $01
000898CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898D1 E107                       	smpsAlterNote       $07
000898D3 E701                       	dc.b	smpsNoAttack, $01
000898D5 E10B                       	smpsAlterNote       $0B
000898D7 E701                       	dc.b	smpsNoAttack, $01
000898D9 E10A                       	smpsAlterNote       $0A
000898DB E701                       	dc.b	smpsNoAttack, $01
000898DD E104                       	smpsAlterNote       $04
000898DF E701                       	dc.b	smpsNoAttack, $01
000898E1 E100                       	smpsAlterNote       $00
000898E3 E701                       	dc.b	smpsNoAttack, $01
000898E5 E101                       	smpsAlterNote       $01
000898E7 801C                       	dc.b	nRst, $1C
000898EB E107                       	smpsAlterNote       $07
000898ED BF03 8001                  	dc.b	nD5, $03, nRst, $01
000898F1 E603                       	smpsAlterVol        $03
000898F3 F6F1 AD                    	smpsJump            music84_Jump03
000898F6                            
000898F6                            ; FM3 Data
000898F6                            music84_FM3:
000898F6 E0C0                       	smpsPan             panCenter, $00
000898FA E109                       	smpsAlterNote       $09
000898FC C203 8007                  	dc.b	nF5, $03, nRst, $07
00089900 E108                       	smpsAlterNote       $08
00089902 C103 800B                  	dc.b	nE5, $03, nRst, $0B
00089906 E10B                       	smpsAlterNote       $0B
00089908 BA03 8006                  	dc.b	nA4, $03, nRst, $06
0008990E E040                       	smpsPan             panRight, $00
00089910 E110                       	smpsAlterNote       $10
00089912 E6F9                       	smpsAlterVol        $F9
00089914 C702 8001                  	dc.b	nBb5, $02, nRst, $01
00089918 E10F                       	smpsAlterNote       $0F
0008991A C603                       	dc.b	nA5, $03
0008991C E10D                       	smpsAlterNote       $0D
0008991E C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00089924 E10C                       	smpsAlterNote       $0C
00089926 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008992A E10A                       	smpsAlterNote       $0A
0008992C BD02 8001                  	dc.b	nC5, $02, nRst, $01
00089930 E10F                       	smpsAlterNote       $0F
00089932 BA01 8001                  	dc.b	nA4, $01, nRst, $01
00089936 E0C0                       	smpsPan             panCenter, $00
0008993A E109                       	smpsAlterNote       $09
0008993C E609                       	smpsAlterVol        $09
0008993E B603                       	dc.b	nF4, $03
00089940                            
00089940                            music84_Jump02:
00089940 E70A                       	dc.b	smpsNoAttack, $0A
00089942 E103                       	smpsAlterNote       $03
00089944 E701                       	dc.b	smpsNoAttack, $01
00089946 E102                       	smpsAlterNote       $02
00089948 E701                       	dc.b	smpsNoAttack, $01
0008994A E106                       	smpsAlterNote       $06
0008994C E701                       	dc.b	smpsNoAttack, $01
0008994E E10C                       	smpsAlterNote       $0C
00089950 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089954 E109                       	smpsAlterNote       $09
00089956 E701                       	dc.b	smpsNoAttack, $01
00089958 E103                       	smpsAlterNote       $03
0008995A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008995E E109                       	smpsAlterNote       $09
00089960 E701                       	dc.b	smpsNoAttack, $01
00089962 E10C                       	smpsAlterNote       $0C
00089964 E701                       	dc.b	smpsNoAttack, $01
00089966 E10D                       	smpsAlterNote       $0D
00089968 8001                       	dc.b	nRst, $01
0008996A E109                       	smpsAlterNote       $09
0008996C B80D                       	dc.b	nG4, $0D
0008996E E103                       	smpsAlterNote       $03
00089970 E701                       	dc.b	smpsNoAttack, $01
00089972 E102                       	smpsAlterNote       $02
00089974 E701                       	dc.b	smpsNoAttack, $01
00089976 E106                       	smpsAlterNote       $06
00089978 E701                       	dc.b	smpsNoAttack, $01
0008997A E10C                       	smpsAlterNote       $0C
0008997C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089980 E109                       	smpsAlterNote       $09
00089982 E701                       	dc.b	smpsNoAttack, $01
00089984 E103                       	smpsAlterNote       $03
00089986 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008998A E109                       	smpsAlterNote       $09
0008998C E701                       	dc.b	smpsNoAttack, $01
0008998E E10C                       	smpsAlterNote       $0C
00089990 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089994 E106                       	smpsAlterNote       $06
00089996 E701                       	dc.b	smpsNoAttack, $01
00089998 E102                       	smpsAlterNote       $02
0008999A E701                       	dc.b	smpsNoAttack, $01
0008999C E103                       	smpsAlterNote       $03
0008999E E701                       	dc.b	smpsNoAttack, $01
000899A0 E109                       	smpsAlterNote       $09
000899A2 E701                       	dc.b	smpsNoAttack, $01
000899A4 E10D                       	smpsAlterNote       $0D
000899A6 E701                       	dc.b	smpsNoAttack, $01
000899A8 E109                       	smpsAlterNote       $09
000899AA E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000899AE E10B                       	smpsAlterNote       $0B
000899B0 BA0D                       	dc.b	nA4, $0D
000899B2 E105                       	smpsAlterNote       $05
000899B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000899B8 E108                       	smpsAlterNote       $08
000899BA E701                       	dc.b	smpsNoAttack, $01
000899BC E10E                       	smpsAlterNote       $0E
000899BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000899C2 E108                       	smpsAlterNote       $08
000899C4 E701                       	dc.b	smpsNoAttack, $01
000899C6 E104                       	smpsAlterNote       $04
000899C8 E701                       	dc.b	smpsNoAttack, $01
000899CA E105                       	smpsAlterNote       $05
000899CC E701                       	dc.b	smpsNoAttack, $01
000899CE E10B                       	smpsAlterNote       $0B
000899D0 E701                       	dc.b	smpsNoAttack, $01
000899D2 E10F                       	smpsAlterNote       $0F
000899D4 E701                       	dc.b	smpsNoAttack, $01
000899D6 E10B                       	smpsAlterNote       $0B
000899D8 E701                       	dc.b	smpsNoAttack, $01
000899DA E108                       	smpsAlterNote       $08
000899DC E701                       	dc.b	smpsNoAttack, $01
000899DE E104                       	smpsAlterNote       $04
000899E0 E701                       	dc.b	smpsNoAttack, $01
000899E2 E108                       	smpsAlterNote       $08
000899E4 E701                       	dc.b	smpsNoAttack, $01
000899E6 E10E                       	smpsAlterNote       $0E
000899E8 E701                       	dc.b	smpsNoAttack, $01
000899EA E10F                       	smpsAlterNote       $0F
000899EC E701                       	dc.b	smpsNoAttack, $01
000899EE E10B                       	smpsAlterNote       $0B
000899F0 E701                       	dc.b	smpsNoAttack, $01
000899F2 E105                       	smpsAlterNote       $05
000899F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000899F8 E108                       	smpsAlterNote       $08
000899FA E701                       	dc.b	smpsNoAttack, $01
000899FC E10E                       	smpsAlterNote       $0E
000899FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A02 E108                       	smpsAlterNote       $08
00089A04 E701                       	dc.b	smpsNoAttack, $01
00089A06 E105                       	smpsAlterNote       $05
00089A08 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A0C E10B                       	smpsAlterNote       $0B
00089A0E E701                       	dc.b	smpsNoAttack, $01
00089A10 E10F                       	smpsAlterNote       $0F
00089A12 E701                       	dc.b	smpsNoAttack, $01
00089A14 E10E                       	smpsAlterNote       $0E
00089A16 E701                       	dc.b	smpsNoAttack, $01
00089A18 E108                       	smpsAlterNote       $08
00089A1A E701                       	dc.b	smpsNoAttack, $01
00089A1C E104                       	smpsAlterNote       $04
00089A1E E701                       	dc.b	smpsNoAttack, $01
00089A20 E105                       	smpsAlterNote       $05
00089A22 8001                       	dc.b	nRst, $01
00089A24 E108                       	smpsAlterNote       $08
00089A26 B50A                       	dc.b	nE4, $0A
00089A28 E109                       	smpsAlterNote       $09
00089A2A B60D                       	dc.b	nF4, $0D
00089A2C E106                       	smpsAlterNote       $06
00089A2E E701                       	dc.b	smpsNoAttack, $01
00089A30 E103                       	smpsAlterNote       $03
00089A32 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A36 E109                       	smpsAlterNote       $09
00089A38 E701                       	dc.b	smpsNoAttack, $01
00089A3A E10D                       	smpsAlterNote       $0D
00089A3C E701                       	dc.b	smpsNoAttack, $01
00089A3E E10C                       	smpsAlterNote       $0C
00089A40 E701                       	dc.b	smpsNoAttack, $01
00089A42 E106                       	smpsAlterNote       $06
00089A44 E701                       	dc.b	smpsNoAttack, $01
00089A46 E102                       	smpsAlterNote       $02
00089A48 E701                       	dc.b	smpsNoAttack, $01
00089A4A E106                       	smpsAlterNote       $06
00089A4C E701                       	dc.b	smpsNoAttack, $01
00089A4E E109                       	smpsAlterNote       $09
00089A50 E701                       	dc.b	smpsNoAttack, $01
00089A52 E10D                       	smpsAlterNote       $0D
00089A54 E701                       	dc.b	smpsNoAttack, $01
00089A56 E109                       	smpsAlterNote       $09
00089A58 B80D                       	dc.b	nG4, $0D
00089A5A E106                       	smpsAlterNote       $06
00089A5C E701                       	dc.b	smpsNoAttack, $01
00089A5E E103                       	smpsAlterNote       $03
00089A60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A64 E109                       	smpsAlterNote       $09
00089A66 E701                       	dc.b	smpsNoAttack, $01
00089A68 E10D                       	smpsAlterNote       $0D
00089A6A E701                       	dc.b	smpsNoAttack, $01
00089A6C E10C                       	smpsAlterNote       $0C
00089A6E E701                       	dc.b	smpsNoAttack, $01
00089A70 E106                       	smpsAlterNote       $06
00089A72 E701                       	dc.b	smpsNoAttack, $01
00089A74 E102                       	smpsAlterNote       $02
00089A76 E701                       	dc.b	smpsNoAttack, $01
00089A78 E106                       	smpsAlterNote       $06
00089A7A E701                       	dc.b	smpsNoAttack, $01
00089A7C E109                       	smpsAlterNote       $09
00089A7E E701                       	dc.b	smpsNoAttack, $01
00089A80 E10D                       	smpsAlterNote       $0D
00089A82 E701                       	dc.b	smpsNoAttack, $01
00089A84 E109                       	smpsAlterNote       $09
00089A86 E701                       	dc.b	smpsNoAttack, $01
00089A88 E103                       	smpsAlterNote       $03
00089A8A E701                       	dc.b	smpsNoAttack, $01
00089A8C E102                       	smpsAlterNote       $02
00089A8E E701                       	dc.b	smpsNoAttack, $01
00089A90 E106                       	smpsAlterNote       $06
00089A92 E701                       	dc.b	smpsNoAttack, $01
00089A94 E10C                       	smpsAlterNote       $0C
00089A96 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A9A E109                       	smpsAlterNote       $09
00089A9C E701                       	dc.b	smpsNoAttack, $01
00089A9E E10B                       	smpsAlterNote       $0B
00089AA0 BA0D                       	dc.b	nA4, $0D
00089AA2 E108                       	smpsAlterNote       $08
00089AA4 E701                       	dc.b	smpsNoAttack, $01
00089AA6 E104                       	smpsAlterNote       $04
00089AA8 E701                       	dc.b	smpsNoAttack, $01
00089AAA E108                       	smpsAlterNote       $08
00089AAC E701                       	dc.b	smpsNoAttack, $01
00089AAE E10B                       	smpsAlterNote       $0B
00089AB0 E701                       	dc.b	smpsNoAttack, $01
00089AB2 E10F                       	smpsAlterNote       $0F
00089AB4 E701                       	dc.b	smpsNoAttack, $01
00089AB6 E10B                       	smpsAlterNote       $0B
00089AB8 E701                       	dc.b	smpsNoAttack, $01
00089ABA E105                       	smpsAlterNote       $05
00089ABC E701                       	dc.b	smpsNoAttack, $01
00089ABE E104                       	smpsAlterNote       $04
00089AC0 E701                       	dc.b	smpsNoAttack, $01
00089AC2 E108                       	smpsAlterNote       $08
00089AC4 E701                       	dc.b	smpsNoAttack, $01
00089AC6 E10E                       	smpsAlterNote       $0E
00089AC8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089ACC E10B                       	smpsAlterNote       $0B
00089ACE E701                       	dc.b	smpsNoAttack, $01
00089AD0 E105                       	smpsAlterNote       $05
00089AD2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AD6 E10B                       	smpsAlterNote       $0B
00089AD8 E701                       	dc.b	smpsNoAttack, $01
00089ADA E10E                       	smpsAlterNote       $0E
00089ADC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AE0 E108                       	smpsAlterNote       $08
00089AE2 E701                       	dc.b	smpsNoAttack, $01
00089AE4 E104                       	smpsAlterNote       $04
00089AE6 E701                       	dc.b	smpsNoAttack, $01
00089AE8 E105                       	smpsAlterNote       $05
00089AEA E701                       	dc.b	smpsNoAttack, $01
00089AEC E10B                       	smpsAlterNote       $0B
00089AEE E701                       	dc.b	smpsNoAttack, $01
00089AF0 E10F                       	smpsAlterNote       $0F
00089AF2 E701                       	dc.b	smpsNoAttack, $01
00089AF4 E10B                       	smpsAlterNote       $0B
00089AF6 E701                       	dc.b	smpsNoAttack, $01
00089AF8 E108                       	smpsAlterNote       $08
00089AFA E701                       	dc.b	smpsNoAttack, $01
00089AFC E105                       	smpsAlterNote       $05
00089AFE 8001                       	dc.b	nRst, $01
00089B00 E109                       	smpsAlterNote       $09
00089B02 B609 8001                  	dc.b	nF4, $09, nRst, $01
00089B06 E108                       	smpsAlterNote       $08
00089B08 B506 8001                  	dc.b	nE4, $06, nRst, $01
00089B0C E107                       	smpsAlterNote       $07
00089B0E B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00089B12 E108                       	smpsAlterNote       $08
00089B14 B502 8001                  	dc.b	nE4, $02, nRst, $01
00089B18 E109                       	smpsAlterNote       $09
00089B1A B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
00089B20 E10B                       	smpsAlterNote       $0B
00089B22 BA0D                       	dc.b	nA4, $0D
00089B24 E108                       	smpsAlterNote       $08
00089B26 E701                       	dc.b	smpsNoAttack, $01
00089B28 E104                       	smpsAlterNote       $04
00089B2A E701                       	dc.b	smpsNoAttack, $01
00089B2C E108                       	smpsAlterNote       $08
00089B2E E701                       	dc.b	smpsNoAttack, $01
00089B30 E10E                       	smpsAlterNote       $0E
00089B32 E701                       	dc.b	smpsNoAttack, $01
00089B34 E10F                       	smpsAlterNote       $0F
00089B36 E701                       	dc.b	smpsNoAttack, $01
00089B38 E10B                       	smpsAlterNote       $0B
00089B3A E701                       	dc.b	smpsNoAttack, $01
00089B3C E105                       	smpsAlterNote       $05
00089B3E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B42 E108                       	smpsAlterNote       $08
00089B44 E701                       	dc.b	smpsNoAttack, $01
00089B46 E10E                       	smpsAlterNote       $0E
00089B48 E701                       	dc.b	smpsNoAttack, $01
00089B4A E10F                       	smpsAlterNote       $0F
00089B4C 8001                       	dc.b	nRst, $01
00089B4E E109                       	smpsAlterNote       $09
00089B50 C20D                       	dc.b	nF5, $0D
00089B52 E103                       	smpsAlterNote       $03
00089B54 E701                       	dc.b	smpsNoAttack, $01
00089B56 E102                       	smpsAlterNote       $02
00089B58 E701                       	dc.b	smpsNoAttack, $01
00089B5A E106                       	smpsAlterNote       $06
00089B5C E701                       	dc.b	smpsNoAttack, $01
00089B5E E10C                       	smpsAlterNote       $0C
00089B60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B64 E109                       	smpsAlterNote       $09
00089B66 E701                       	dc.b	smpsNoAttack, $01
00089B68 E103                       	smpsAlterNote       $03
00089B6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B6E E109                       	smpsAlterNote       $09
00089B70 E701                       	dc.b	smpsNoAttack, $01
00089B72 E10C                       	smpsAlterNote       $0C
00089B74 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B78 E106                       	smpsAlterNote       $06
00089B7A E701                       	dc.b	smpsNoAttack, $01
00089B7C E102                       	smpsAlterNote       $02
00089B7E E701                       	dc.b	smpsNoAttack, $01
00089B80 E103                       	smpsAlterNote       $03
00089B82 E701                       	dc.b	smpsNoAttack, $01
00089B84 E109                       	smpsAlterNote       $09
00089B86 E701                       	dc.b	smpsNoAttack, $01
00089B88 E10D                       	smpsAlterNote       $0D
00089B8A E701                       	dc.b	smpsNoAttack, $01
00089B8C E109                       	smpsAlterNote       $09
00089B8E E701                       	dc.b	smpsNoAttack, $01
00089B90 E106                       	smpsAlterNote       $06
00089B92 E701                       	dc.b	smpsNoAttack, $01
00089B94 E102                       	smpsAlterNote       $02
00089B96 E701                       	dc.b	smpsNoAttack, $01
00089B98 E106                       	smpsAlterNote       $06
00089B9A E701                       	dc.b	smpsNoAttack, $01
00089B9C E10C                       	smpsAlterNote       $0C
00089B9E E701                       	dc.b	smpsNoAttack, $01
00089BA0 E10D                       	smpsAlterNote       $0D
00089BA2 E701                       	dc.b	smpsNoAttack, $01
00089BA4 E109                       	smpsAlterNote       $09
00089BA6 E701                       	dc.b	smpsNoAttack, $01
00089BA8 E103                       	smpsAlterNote       $03
00089BAA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089BAE E106                       	smpsAlterNote       $06
00089BB0 E701                       	dc.b	smpsNoAttack, $01
00089BB2 E10C                       	smpsAlterNote       $0C
00089BB4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089BB8 E106                       	smpsAlterNote       $06
00089BBA E701                       	dc.b	smpsNoAttack, $01
00089BBC E103                       	smpsAlterNote       $03
00089BBE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089BC2 E109                       	smpsAlterNote       $09
00089BC4 E701                       	dc.b	smpsNoAttack, $01
00089BC6 E10D                       	smpsAlterNote       $0D
00089BC8 E701                       	dc.b	smpsNoAttack, $01
00089BCA E10C                       	smpsAlterNote       $0C
00089BCC E701                       	dc.b	smpsNoAttack, $01
00089BCE E106                       	smpsAlterNote       $06
00089BD0 E701                       	dc.b	smpsNoAttack, $01
00089BD2 E102                       	smpsAlterNote       $02
00089BD4 E701                       	dc.b	smpsNoAttack, $01
00089BD6 E106                       	smpsAlterNote       $06
00089BD8 E701                       	dc.b	smpsNoAttack, $01
00089BDA E109                       	smpsAlterNote       $09
00089BDC E701                       	dc.b	smpsNoAttack, $01
00089BDE E10D                       	smpsAlterNote       $0D
00089BE0 E701                       	dc.b	smpsNoAttack, $01
00089BE2 E109                       	smpsAlterNote       $09
00089BE4 E701                       	dc.b	smpsNoAttack, $01
00089BE6 E103                       	smpsAlterNote       $03
00089BE8 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00089BEC E109                       	smpsAlterNote       $09
00089BEE C206                       	dc.b	nF5, $06
00089BF0 E108                       	smpsAlterNote       $08
00089BF2 C10E                       	dc.b	nE5, $0E
00089BF4 E102                       	smpsAlterNote       $02
00089BF6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089BFA E108                       	smpsAlterNote       $08
00089BFC E701                       	dc.b	smpsNoAttack, $01
00089BFE E10B                       	smpsAlterNote       $0B
00089C00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C04 E105                       	smpsAlterNote       $05
00089C06 E701                       	dc.b	smpsNoAttack, $01
00089C08 E101                       	smpsAlterNote       $01
00089C0A E701                       	dc.b	smpsNoAttack, $01
00089C0C E102                       	smpsAlterNote       $02
00089C0E E701                       	dc.b	smpsNoAttack, $01
00089C10 E108                       	smpsAlterNote       $08
00089C12 E701                       	dc.b	smpsNoAttack, $01
00089C14 E10C                       	smpsAlterNote       $0C
00089C16 E701                       	dc.b	smpsNoAttack, $01
00089C18 E107                       	smpsAlterNote       $07
00089C1A BF0E                       	dc.b	nD5, $0E
00089C1C E101                       	smpsAlterNote       $01
00089C1E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C22 E107                       	smpsAlterNote       $07
00089C24 E701                       	dc.b	smpsNoAttack, $01
00089C26 E10A                       	smpsAlterNote       $0A
00089C28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C2C E104                       	smpsAlterNote       $04
00089C2E E701                       	dc.b	smpsNoAttack, $01
00089C30 E100                       	smpsAlterNote       $00
00089C32 E701                       	dc.b	smpsNoAttack, $01
00089C34 E104                       	smpsAlterNote       $04
00089C36 E701                       	dc.b	smpsNoAttack, $01
00089C38 E107                       	smpsAlterNote       $07
00089C3A E701                       	dc.b	smpsNoAttack, $01
00089C3C E10B                       	smpsAlterNote       $0B
00089C3E E701                       	dc.b	smpsNoAttack, $01
00089C40 E107                       	smpsAlterNote       $07
00089C42 E701                       	dc.b	smpsNoAttack, $01
00089C44 E101                       	smpsAlterNote       $01
00089C46 E701                       	dc.b	smpsNoAttack, $01
00089C48 E100                       	smpsAlterNote       $00
00089C4A E701                       	dc.b	smpsNoAttack, $01
00089C4C E104                       	smpsAlterNote       $04
00089C4E E701                       	dc.b	smpsNoAttack, $01
00089C50 E10A                       	smpsAlterNote       $0A
00089C52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C56 E107                       	smpsAlterNote       $07
00089C58 E701                       	dc.b	smpsNoAttack, $01
00089C5A E101                       	smpsAlterNote       $01
00089C5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C60 E107                       	smpsAlterNote       $07
00089C62 E701                       	dc.b	smpsNoAttack, $01
00089C64 E10A                       	smpsAlterNote       $0A
00089C66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C6A E104                       	smpsAlterNote       $04
00089C6C E701                       	dc.b	smpsNoAttack, $01
00089C6E E100                       	smpsAlterNote       $00
00089C70 E701                       	dc.b	smpsNoAttack, $01
00089C72 E101                       	smpsAlterNote       $01
00089C74 E701                       	dc.b	smpsNoAttack, $01
00089C76 E107                       	smpsAlterNote       $07
00089C78 E701                       	dc.b	smpsNoAttack, $01
00089C7A E10B                       	smpsAlterNote       $0B
00089C7C E701                       	dc.b	smpsNoAttack, $01
00089C7E E107                       	smpsAlterNote       $07
00089C80 E701                       	dc.b	smpsNoAttack, $01
00089C82 E104                       	smpsAlterNote       $04
00089C84 E701                       	dc.b	smpsNoAttack, $01
00089C86 E100                       	smpsAlterNote       $00
00089C88 E701                       	dc.b	smpsNoAttack, $01
00089C8A E104                       	smpsAlterNote       $04
00089C8C E701                       	dc.b	smpsNoAttack, $01
00089C8E E10A                       	smpsAlterNote       $0A
00089C90 E701                       	dc.b	smpsNoAttack, $01
00089C92 E10B                       	smpsAlterNote       $0B
00089C94 E701                       	dc.b	smpsNoAttack, $01
00089C96 E107                       	smpsAlterNote       $07
00089C98 E701                       	dc.b	smpsNoAttack, $01
00089C9A E101                       	smpsAlterNote       $01
00089C9C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089CA0 E104                       	smpsAlterNote       $04
00089CA2 E701                       	dc.b	smpsNoAttack, $01
00089CA4 E10A                       	smpsAlterNote       $0A
00089CA6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089CAA E104                       	smpsAlterNote       $04
00089CAC E701                       	dc.b	smpsNoAttack, $01
00089CAE E101                       	smpsAlterNote       $01
00089CB0 E701                       	dc.b	smpsNoAttack, $01
00089CB4 E107                       	smpsAlterNote       $07
00089CB6 E6FF                       	smpsAlterVol        $FF
00089CB8 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00089CC4 8004                       	dc.b	nRst, $04
00089CC8 E109                       	smpsAlterNote       $09
00089CCA E602                       	smpsAlterVol        $02
00089CCC B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
00089CD2 E108                       	smpsAlterNote       $08
00089CD4 B502 8001                  	dc.b	nE4, $02, nRst, $01
00089CD8 E109                       	smpsAlterNote       $09
00089CDA B60D                       	dc.b	nF4, $0D
00089CDC E106                       	smpsAlterNote       $06
00089CDE E701                       	dc.b	smpsNoAttack, $01
00089CE0 E102                       	smpsAlterNote       $02
00089CE2 E701                       	dc.b	smpsNoAttack, $01
00089CE4 E106                       	smpsAlterNote       $06
00089CE6 E701                       	dc.b	smpsNoAttack, $01
00089CE8 E109                       	smpsAlterNote       $09
00089CEA E701                       	dc.b	smpsNoAttack, $01
00089CEC E10D                       	smpsAlterNote       $0D
00089CEE E701                       	dc.b	smpsNoAttack, $01
00089CF0 E109                       	smpsAlterNote       $09
00089CF2 E701                       	dc.b	smpsNoAttack, $01
00089CF4 E103                       	smpsAlterNote       $03
00089CF6 E701                       	dc.b	smpsNoAttack, $01
00089CF8 E102                       	smpsAlterNote       $02
00089CFA E701                       	dc.b	smpsNoAttack, $01
00089CFC E106                       	smpsAlterNote       $06
00089CFE E701                       	dc.b	smpsNoAttack, $01
00089D00 E10C                       	smpsAlterNote       $0C
00089D02 E701                       	dc.b	smpsNoAttack, $01
00089D04 E10D                       	smpsAlterNote       $0D
00089D06 8001                       	dc.b	nRst, $01
00089D08 E109                       	smpsAlterNote       $09
00089D0A B80D                       	dc.b	nG4, $0D
00089D0C E106                       	smpsAlterNote       $06
00089D0E E701                       	dc.b	smpsNoAttack, $01
00089D10 E102                       	smpsAlterNote       $02
00089D12 E701                       	dc.b	smpsNoAttack, $01
00089D14 E106                       	smpsAlterNote       $06
00089D16 E701                       	dc.b	smpsNoAttack, $01
00089D18 E10C                       	smpsAlterNote       $0C
00089D1A E701                       	dc.b	smpsNoAttack, $01
00089D1C E10D                       	smpsAlterNote       $0D
00089D1E E701                       	dc.b	smpsNoAttack, $01
00089D20 E109                       	smpsAlterNote       $09
00089D22 E701                       	dc.b	smpsNoAttack, $01
00089D24 E103                       	smpsAlterNote       $03
00089D26 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089D2A E106                       	smpsAlterNote       $06
00089D2C E701                       	dc.b	smpsNoAttack, $01
00089D2E E10C                       	smpsAlterNote       $0C
00089D30 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089D34 E106                       	smpsAlterNote       $06
00089D36 E701                       	dc.b	smpsNoAttack, $01
00089D38 E103                       	smpsAlterNote       $03
00089D3A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089D3E E109                       	smpsAlterNote       $09
00089D40 E701                       	dc.b	smpsNoAttack, $01
00089D42 E10D                       	smpsAlterNote       $0D
00089D44 E701                       	dc.b	smpsNoAttack, $01
00089D46 E10C                       	smpsAlterNote       $0C
00089D48 E701                       	dc.b	smpsNoAttack, $01
00089D4A E109                       	smpsAlterNote       $09
00089D4C 8001                       	dc.b	nRst, $01
00089D4E E10B                       	smpsAlterNote       $0B
00089D50 BA03                       	dc.b	nA4, $03
00089D52 E10C                       	smpsAlterNote       $0C
00089D54 BB03 8001                  	dc.b	nBb4, $03, nRst, $01
00089D58 E10B                       	smpsAlterNote       $0B
00089D5A BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
00089D60 E10C                       	smpsAlterNote       $0C
00089D62 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00089D66 E10B                       	smpsAlterNote       $0B
00089D68 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00089D6E E10C                       	smpsAlterNote       $0C
00089D70 D303                       	dc.b	nBb6, $03
00089D72 E10B                       	smpsAlterNote       $0B
00089D74 D20D                       	dc.b	nA6, $0D
00089D76 E108                       	smpsAlterNote       $08
00089D78 E701                       	dc.b	smpsNoAttack, $01
00089D7A E104                       	smpsAlterNote       $04
00089D7C E701                       	dc.b	smpsNoAttack, $01
00089D7E E105                       	smpsAlterNote       $05
00089D80 E701                       	dc.b	smpsNoAttack, $01
00089D82 E10B                       	smpsAlterNote       $0B
00089D84 E701                       	dc.b	smpsNoAttack, $01
00089D86 E10F                       	smpsAlterNote       $0F
00089D88 E701                       	dc.b	smpsNoAttack, $01
00089D8A E10B                       	smpsAlterNote       $0B
00089D8C E701                       	dc.b	smpsNoAttack, $01
00089D8E E108                       	smpsAlterNote       $08
00089D90 E701                       	dc.b	smpsNoAttack, $01
00089D92 E104                       	smpsAlterNote       $04
00089D94 E701                       	dc.b	smpsNoAttack, $01
00089D96 E108                       	smpsAlterNote       $08
00089D98 E701                       	dc.b	smpsNoAttack, $01
00089D9A E10E                       	smpsAlterNote       $0E
00089D9C E701                       	dc.b	smpsNoAttack, $01
00089D9E E10F                       	smpsAlterNote       $0F
00089DA0 E701                       	dc.b	smpsNoAttack, $01
00089DA2 E10B                       	smpsAlterNote       $0B
00089DA4 E701                       	dc.b	smpsNoAttack, $01
00089DA6 E105                       	smpsAlterNote       $05
00089DA8 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00089DAE E109                       	smpsAlterNote       $09
00089DB0 CE07                       	dc.b	nF6, $07
00089DB2 E108                       	smpsAlterNote       $08
00089DB4 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00089DB8 E109                       	smpsAlterNote       $09
00089DBA CE03 8001                  	dc.b	nF6, $03, nRst, $01
00089DBE E108                       	smpsAlterNote       $08
00089DC0 CC0D                       	dc.b	nEb6, $0D
00089DC2 E102                       	smpsAlterNote       $02
00089DC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089DC8 E108                       	smpsAlterNote       $08
00089DCA E701                       	dc.b	smpsNoAttack, $01
00089DCC E10B                       	smpsAlterNote       $0B
00089DCE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089DD2 E105                       	smpsAlterNote       $05
00089DD4 E701                       	dc.b	smpsNoAttack, $01
00089DD6 E101                       	smpsAlterNote       $01
00089DD8 E701                       	dc.b	smpsNoAttack, $01
00089DDA E102                       	smpsAlterNote       $02
00089DDC E701                       	dc.b	smpsNoAttack, $01
00089DDE E108                       	smpsAlterNote       $08
00089DE0 E701                       	dc.b	smpsNoAttack, $01
00089DE2 E10C                       	smpsAlterNote       $0C
00089DE4 E701                       	dc.b	smpsNoAttack, $01
00089DE6 E108                       	smpsAlterNote       $08
00089DE8 E701                       	dc.b	smpsNoAttack, $01
00089DEA E105                       	smpsAlterNote       $05
00089DEC E701                       	dc.b	smpsNoAttack, $01
00089DEE E101                       	smpsAlterNote       $01
00089DF0 E701                       	dc.b	smpsNoAttack, $01
00089DF2 E105                       	smpsAlterNote       $05
00089DF4 E701                       	dc.b	smpsNoAttack, $01
00089DF6 E10B                       	smpsAlterNote       $0B
00089DF8 E701                       	dc.b	smpsNoAttack, $01
00089DFA E10C                       	smpsAlterNote       $0C
00089DFC E701                       	dc.b	smpsNoAttack, $01
00089DFE E108                       	smpsAlterNote       $08
00089E00 E701                       	dc.b	smpsNoAttack, $01
00089E02 E107                       	smpsAlterNote       $07
00089E04 CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
00089E0E E10B                       	smpsAlterNote       $0B
00089E10 C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
00089E1A E109                       	smpsAlterNote       $09
00089E1C C203                       	dc.b	nF5, $03
00089E1E E108                       	smpsAlterNote       $08
00089E20 C103 8001                  	dc.b	nE5, $03, nRst, $01
00089E24 E109                       	smpsAlterNote       $09
00089E26 C20D                       	dc.b	nF5, $0D
00089E28 E108                       	smpsAlterNote       $08
00089E2A C10E                       	dc.b	nE5, $0E
00089E2C E107                       	smpsAlterNote       $07
00089E2E BF0D                       	dc.b	nD5, $0D
00089E30 E104                       	smpsAlterNote       $04
00089E32 E701                       	dc.b	smpsNoAttack, $01
00089E34 E100                       	smpsAlterNote       $00
00089E36 E701                       	dc.b	smpsNoAttack, $01
00089E38 E104                       	smpsAlterNote       $04
00089E3A E701                       	dc.b	smpsNoAttack, $01
00089E3C E107                       	smpsAlterNote       $07
00089E3E E701                       	dc.b	smpsNoAttack, $01
00089E40 E10B                       	smpsAlterNote       $0B
00089E42 E701                       	dc.b	smpsNoAttack, $01
00089E44 E107                       	smpsAlterNote       $07
00089E46 E701                       	dc.b	smpsNoAttack, $01
00089E48 E101                       	smpsAlterNote       $01
00089E4A E701                       	dc.b	smpsNoAttack, $01
00089E4C E100                       	smpsAlterNote       $00
00089E4E E701                       	dc.b	smpsNoAttack, $01
00089E50 E104                       	smpsAlterNote       $04
00089E52 E701                       	dc.b	smpsNoAttack, $01
00089E54 E10A                       	smpsAlterNote       $0A
00089E56 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E5A E107                       	smpsAlterNote       $07
00089E5C E701                       	dc.b	smpsNoAttack, $01
00089E5E E101                       	smpsAlterNote       $01
00089E60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E64 E107                       	smpsAlterNote       $07
00089E66 E701                       	dc.b	smpsNoAttack, $01
00089E68 E10A                       	smpsAlterNote       $0A
00089E6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E6E E104                       	smpsAlterNote       $04
00089E70 E701                       	dc.b	smpsNoAttack, $01
00089E72 E100                       	smpsAlterNote       $00
00089E74 E701                       	dc.b	smpsNoAttack, $01
00089E76 E101                       	smpsAlterNote       $01
00089E78 E701                       	dc.b	smpsNoAttack, $01
00089E7A E107                       	smpsAlterNote       $07
00089E7C E701                       	dc.b	smpsNoAttack, $01
00089E7E E10B                       	smpsAlterNote       $0B
00089E80 E701                       	dc.b	smpsNoAttack, $01
00089E82 E107                       	smpsAlterNote       $07
00089E84 E701                       	dc.b	smpsNoAttack, $01
00089E86 E104                       	smpsAlterNote       $04
00089E88 E701                       	dc.b	smpsNoAttack, $01
00089E8A E100                       	smpsAlterNote       $00
00089E8C E701                       	dc.b	smpsNoAttack, $01
00089E8E E104                       	smpsAlterNote       $04
00089E90 E701                       	dc.b	smpsNoAttack, $01
00089E92 E10A                       	smpsAlterNote       $0A
00089E94 E701                       	dc.b	smpsNoAttack, $01
00089E96 E10B                       	smpsAlterNote       $0B
00089E98 E701                       	dc.b	smpsNoAttack, $01
00089E9A E107                       	smpsAlterNote       $07
00089E9C E701                       	dc.b	smpsNoAttack, $01
00089E9E E101                       	smpsAlterNote       $01
00089EA0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089EA4 E104                       	smpsAlterNote       $04
00089EA6 E701                       	dc.b	smpsNoAttack, $01
00089EA8 E10A                       	smpsAlterNote       $0A
00089EAA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089EAE E104                       	smpsAlterNote       $04
00089EB0 E701                       	dc.b	smpsNoAttack, $01
00089EB2 E101                       	smpsAlterNote       $01
00089EB4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089EB8 E107                       	smpsAlterNote       $07
00089EBA E701                       	dc.b	smpsNoAttack, $01
00089EBC E10B                       	smpsAlterNote       $0B
00089EBE E701                       	dc.b	smpsNoAttack, $01
00089EC0 E10A                       	smpsAlterNote       $0A
00089EC2 E701                       	dc.b	smpsNoAttack, $01
00089EC4 E104                       	smpsAlterNote       $04
00089EC6 E701                       	dc.b	smpsNoAttack, $01
00089EC8 E100                       	smpsAlterNote       $00
00089ECA E701                       	dc.b	smpsNoAttack, $01
00089ECC E104                       	smpsAlterNote       $04
00089ECE E701                       	dc.b	smpsNoAttack, $01
00089ED0 E107                       	smpsAlterNote       $07
00089ED2 E701                       	dc.b	smpsNoAttack, $01
00089ED4 E10B                       	smpsAlterNote       $0B
00089ED6 E701                       	dc.b	smpsNoAttack, $01
00089ED8 E107                       	smpsAlterNote       $07
00089EDA E701                       	dc.b	smpsNoAttack, $01
00089EDC E101                       	smpsAlterNote       $01
00089EDE E701                       	dc.b	smpsNoAttack, $01
00089EE0 E100                       	smpsAlterNote       $00
00089EE2 E701                       	dc.b	smpsNoAttack, $01
00089EE4 E104                       	smpsAlterNote       $04
00089EE6 E701                       	dc.b	smpsNoAttack, $01
00089EE8 E10A                       	smpsAlterNote       $0A
00089EEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089EEE E107                       	smpsAlterNote       $07
00089EF0 E701                       	dc.b	smpsNoAttack, $01
00089EF2 E101                       	smpsAlterNote       $01
00089EF4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089EF8 E107                       	smpsAlterNote       $07
00089EFA E701                       	dc.b	smpsNoAttack, $01
00089EFC E10A                       	smpsAlterNote       $0A
00089EFE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089F02 E104                       	smpsAlterNote       $04
00089F04 E701                       	dc.b	smpsNoAttack, $01
00089F06 E100                       	smpsAlterNote       $00
00089F08 E701                       	dc.b	smpsNoAttack, $01
00089F0A E101                       	smpsAlterNote       $01
00089F0C E701                       	dc.b	smpsNoAttack, $01
00089F0E E107                       	smpsAlterNote       $07
00089F10 E701                       	dc.b	smpsNoAttack, $01
00089F12 E10B                       	smpsAlterNote       $0B
00089F14 E701                       	dc.b	smpsNoAttack, $01
00089F16 E107                       	smpsAlterNote       $07
00089F18 E701                       	dc.b	smpsNoAttack, $01
00089F1A E104                       	smpsAlterNote       $04
00089F1C E701                       	dc.b	smpsNoAttack, $01
00089F1E E100                       	smpsAlterNote       $00
00089F20 E701                       	dc.b	smpsNoAttack, $01
00089F22 E101                       	smpsAlterNote       $01
00089F24 8001                       	dc.b	nRst, $01
00089F26 E109                       	smpsAlterNote       $09
00089F28 C20D                       	dc.b	nF5, $0D
00089F2A E106                       	smpsAlterNote       $06
00089F2C E701                       	dc.b	smpsNoAttack, $01
00089F2E E102                       	smpsAlterNote       $02
00089F30 E701                       	dc.b	smpsNoAttack, $01
00089F32 E106                       	smpsAlterNote       $06
00089F34 E701                       	dc.b	smpsNoAttack, $01
00089F36 E10C                       	smpsAlterNote       $0C
00089F38 E701                       	dc.b	smpsNoAttack, $01
00089F3A E10D                       	smpsAlterNote       $0D
00089F3C E701                       	dc.b	smpsNoAttack, $01
00089F3E E109                       	smpsAlterNote       $09
00089F40 E701                       	dc.b	smpsNoAttack, $01
00089F42 E103                       	smpsAlterNote       $03
00089F44 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089F48 E106                       	smpsAlterNote       $06
00089F4A E701                       	dc.b	smpsNoAttack, $01
00089F4C E10C                       	smpsAlterNote       $0C
00089F4E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089F52 E106                       	smpsAlterNote       $06
00089F54 E701                       	dc.b	smpsNoAttack, $01
00089F56 E103                       	smpsAlterNote       $03
00089F58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089F5C E109                       	smpsAlterNote       $09
00089F5E E701                       	dc.b	smpsNoAttack, $01
00089F60 E10D                       	smpsAlterNote       $0D
00089F62 E701                       	dc.b	smpsNoAttack, $01
00089F64 E10C                       	smpsAlterNote       $0C
00089F66 E701                       	dc.b	smpsNoAttack, $01
00089F68 E109                       	smpsAlterNote       $09
00089F6A 8001                       	dc.b	nRst, $01
00089F6C E108                       	smpsAlterNote       $08
00089F6E C10D                       	dc.b	nE5, $0D
00089F70 E109                       	smpsAlterNote       $09
00089F72 C20A 8001                  	dc.b	nF5, $0A, nRst, $01
00089F76 E108                       	smpsAlterNote       $08
00089F78 C10D                       	dc.b	nE5, $0D
00089F7A E102                       	smpsAlterNote       $02
00089F7C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089F80 E105                       	smpsAlterNote       $05
00089F82 E701                       	dc.b	smpsNoAttack, $01
00089F84 E108                       	smpsAlterNote       $08
00089F86 8001                       	dc.b	nRst, $01
00089F88 E107                       	smpsAlterNote       $07
00089F8A BF0D                       	dc.b	nD5, $0D
00089F8C E108                       	smpsAlterNote       $08
00089F8E C107                       	dc.b	nE5, $07
00089F90 E109                       	smpsAlterNote       $09
00089F92 C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
00089F98 E10B                       	smpsAlterNote       $0B
00089F9A C603                       	dc.b	nA5, $03
00089F9C E10C                       	smpsAlterNote       $0C
00089F9E C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
00089FA4 E10B                       	smpsAlterNote       $0B
00089FA6 C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
00089FAC E109                       	smpsAlterNote       $09
00089FAE D003                       	dc.b	nG6, $03
00089FB0 E108                       	smpsAlterNote       $08
00089FB2 CD02 8001                  	dc.b	nE6, $02, nRst, $01
00089FB6 E10B                       	smpsAlterNote       $0B
00089FB8 C601 8001                  	dc.b	nA5, $01, nRst, $01
00089FBC E108                       	smpsAlterNote       $08
00089FBE C102                       	dc.b	nE5, $02
00089FC2 E10C                       	smpsAlterNote       $0C
00089FC4 E6FB                       	smpsAlterVol        $FB
00089FC6 A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
00089FD2 8001                       	dc.b	nRst, $01
00089FD4 E10B                       	smpsAlterNote       $0B
00089FD6 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
00089FDE E107                       	smpsAlterNote       $07
00089FE0 A706 8001                  	dc.b	nD3, $06, nRst, $01
00089FE4 E10B                       	smpsAlterNote       $0B
00089FE6 A203                       	dc.b	nA2, $03
00089FE8 E109                       	smpsAlterNote       $09
00089FEA AA03 8001                  	dc.b	nF3, $03, nRst, $01
00089FEE E108                       	smpsAlterNote       $08
00089FF0 A906                       	dc.b	nE3, $06
00089FF2 E107                       	smpsAlterNote       $07
00089FF4 A703 8001                  	dc.b	nD3, $03, nRst, $01
00089FF8 E106                       	smpsAlterNote       $06
00089FFA A503                       	dc.b	nC3, $03
00089FFC E10C                       	smpsAlterNote       $0C
00089FFE A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008A002 E10B                       	smpsAlterNote       $0B
0008A004 A203 8004                  	dc.b	nA2, $03, nRst, $04
0008A008 E11B                       	smpsAlterNote       $1B
0008A00A C401                       	dc.b	nG5, $01
0008A00C E1F4                       	smpsAlterNote       $F4
0008A00E E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
0008A011 E106                       	smpsAlterNote       $06
0008A013 E701                       	dc.b	smpsNoAttack, $01
0008A015 E10F                       	smpsAlterNote       $0F
0008A017 E701                       	dc.b	smpsNoAttack, $01
0008A019 E1E4                       	smpsAlterNote       $E4
0008A01B E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008A01E E1F6                       	smpsAlterNote       $F6
0008A020 E701                       	dc.b	smpsNoAttack, $01
0008A022 E108                       	smpsAlterNote       $08
0008A024 E701                       	dc.b	smpsNoAttack, $01
0008A026 E10B                       	smpsAlterNote       $0B
0008A028 E706                       	dc.b	smpsNoAttack, $06
0008A02A E105                       	smpsAlterNote       $05
0008A02C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A030 E108                       	smpsAlterNote       $08
0008A032 E701                       	dc.b	smpsNoAttack, $01
0008A034 E10E                       	smpsAlterNote       $0E
0008A036 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A03A E108                       	smpsAlterNote       $08
0008A03C E701                       	dc.b	smpsNoAttack, $01
0008A03E E105                       	smpsAlterNote       $05
0008A040 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A044 E10B                       	smpsAlterNote       $0B
0008A046 E701                       	dc.b	smpsNoAttack, $01
0008A048 E10F                       	smpsAlterNote       $0F
0008A04A E701                       	dc.b	smpsNoAttack, $01
0008A04C E10E                       	smpsAlterNote       $0E
0008A04E E701                       	dc.b	smpsNoAttack, $01
0008A050 E108                       	smpsAlterNote       $08
0008A052 E701                       	dc.b	smpsNoAttack, $01
0008A054 E104                       	smpsAlterNote       $04
0008A056 E701                       	dc.b	smpsNoAttack, $01
0008A058 E108                       	smpsAlterNote       $08
0008A05A E701                       	dc.b	smpsNoAttack, $01
0008A05C E10B                       	smpsAlterNote       $0B
0008A05E E701                       	dc.b	smpsNoAttack, $01
0008A060 E10F                       	smpsAlterNote       $0F
0008A062 E701                       	dc.b	smpsNoAttack, $01
0008A064 E10B                       	smpsAlterNote       $0B
0008A066 E701                       	dc.b	smpsNoAttack, $01
0008A068 E105                       	smpsAlterNote       $05
0008A06A E701                       	dc.b	smpsNoAttack, $01
0008A06C E104                       	smpsAlterNote       $04
0008A06E E701                       	dc.b	smpsNoAttack, $01
0008A070 E108                       	smpsAlterNote       $08
0008A072 E701                       	dc.b	smpsNoAttack, $01
0008A074 E10E                       	smpsAlterNote       $0E
0008A076 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A07A E10B                       	smpsAlterNote       $0B
0008A07C E701                       	dc.b	smpsNoAttack, $01
0008A07E E105                       	smpsAlterNote       $05
0008A080 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A084 E10B                       	smpsAlterNote       $0B
0008A086 E701                       	dc.b	smpsNoAttack, $01
0008A088 E10E                       	smpsAlterNote       $0E
0008A08A E701                       	dc.b	smpsNoAttack, $01
0008A08C E10F                       	smpsAlterNote       $0F
0008A08E 8001                       	dc.b	nRst, $01
0008A090 E109                       	smpsAlterNote       $09
0008A092 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008A098 E108                       	smpsAlterNote       $08
0008A09A C101 8001                  	dc.b	nE5, $01, nRst, $01
0008A09E E109                       	smpsAlterNote       $09
0008A0A0 C202                       	dc.b	nF5, $02
0008A0A2 E108                       	smpsAlterNote       $08
0008A0A4 C102                       	dc.b	nE5, $02
0008A0A6 E107                       	smpsAlterNote       $07
0008A0A8 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008A0AC E108                       	smpsAlterNote       $08
0008A0AE C101 8001                  	dc.b	nE5, $01, nRst, $01
0008A0B2 E107                       	smpsAlterNote       $07
0008A0B4 BF02                       	dc.b	nD5, $02
0008A0B6 E106                       	smpsAlterNote       $06
0008A0B8 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008A0BC E107                       	smpsAlterNote       $07
0008A0BE BF01 8001                  	dc.b	nD5, $01, nRst, $01
0008A0C2 E106                       	smpsAlterNote       $06
0008A0C4 BD02                       	dc.b	nC5, $02
0008A0C6 E10C                       	smpsAlterNote       $0C
0008A0C8 BB02                       	dc.b	nBb4, $02
0008A0CA E106                       	smpsAlterNote       $06
0008A0CC BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008A0D0 E10C                       	smpsAlterNote       $0C
0008A0D2 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008A0D6 E10B                       	smpsAlterNote       $0B
0008A0D8 BA02                       	dc.b	nA4, $02
0008A0DA E10C                       	smpsAlterNote       $0C
0008A0DC BB02                       	dc.b	nBb4, $02
0008A0DE E10B                       	smpsAlterNote       $0B
0008A0E0 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0008A0EA E108                       	smpsAlterNote       $08
0008A0EC B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
0008A0F4 E107                       	smpsAlterNote       $07
0008A0F6 BE02                       	dc.b	nCs5, $02
0008A0F8 E10B                       	smpsAlterNote       $0B
0008A0FA BA02                       	dc.b	nA4, $02
0008A0FC E109                       	smpsAlterNote       $09
0008A0FE B802 8001                  	dc.b	nG4, $02, nRst, $01
0008A102 E108                       	smpsAlterNote       $08
0008A104 B501 8001                  	dc.b	nE4, $01, nRst, $01
0008A108 E10B                       	smpsAlterNote       $0B
0008A10A AE02                       	dc.b	nA3, $02
0008A10C E10C                       	smpsAlterNote       $0C
0008A10E A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
0008A11A E10B                       	smpsAlterNote       $0B
0008A11C A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
0008A124 E107                       	smpsAlterNote       $07
0008A126 A706 8001                  	dc.b	nD3, $06, nRst, $01
0008A12A E10B                       	smpsAlterNote       $0B
0008A12C A203                       	dc.b	nA2, $03
0008A12E E109                       	smpsAlterNote       $09
0008A130 AA03 8001                  	dc.b	nF3, $03, nRst, $01
0008A134 E108                       	smpsAlterNote       $08
0008A136 A906 8001                  	dc.b	nE3, $06, nRst, $01
0008A13A E107                       	smpsAlterNote       $07
0008A13C A702 8001                  	dc.b	nD3, $02, nRst, $01
0008A140 E106                       	smpsAlterNote       $06
0008A142 A503                       	dc.b	nC3, $03
0008A144 E10C                       	smpsAlterNote       $0C
0008A146 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008A14C E107                       	smpsAlterNote       $07
0008A14E B20D                       	dc.b	nCs4, $0D
0008A150 E104                       	smpsAlterNote       $04
0008A152 E701                       	dc.b	smpsNoAttack, $01
0008A154 E100                       	smpsAlterNote       $00
0008A156 E701                       	dc.b	smpsNoAttack, $01
0008A158 E104                       	smpsAlterNote       $04
0008A15A E701                       	dc.b	smpsNoAttack, $01
0008A15C E10A                       	smpsAlterNote       $0A
0008A15E E701                       	dc.b	smpsNoAttack, $01
0008A160 E10B                       	smpsAlterNote       $0B
0008A162 E701                       	dc.b	smpsNoAttack, $01
0008A164 E107                       	smpsAlterNote       $07
0008A166 E701                       	dc.b	smpsNoAttack, $01
0008A168 E101                       	smpsAlterNote       $01
0008A16A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A16E E104                       	smpsAlterNote       $04
0008A170 E701                       	dc.b	smpsNoAttack, $01
0008A172 E10A                       	smpsAlterNote       $0A
0008A174 E701                       	dc.b	smpsNoAttack, $01
0008A176 E10B                       	smpsAlterNote       $0B
0008A178 8001                       	dc.b	nRst, $01
0008A17A E107                       	smpsAlterNote       $07
0008A17C B30D                       	dc.b	nD4, $0D
0008A17E E104                       	smpsAlterNote       $04
0008A180 E701                       	dc.b	smpsNoAttack, $01
0008A182 E100                       	smpsAlterNote       $00
0008A184 E701                       	dc.b	smpsNoAttack, $01
0008A186 E104                       	smpsAlterNote       $04
0008A188 E701                       	dc.b	smpsNoAttack, $01
0008A18A E10A                       	smpsAlterNote       $0A
0008A18C E701                       	dc.b	smpsNoAttack, $01
0008A18E E10B                       	smpsAlterNote       $0B
0008A190 E701                       	dc.b	smpsNoAttack, $01
0008A192 E107                       	smpsAlterNote       $07
0008A194 E701                       	dc.b	smpsNoAttack, $01
0008A196 E101                       	smpsAlterNote       $01
0008A198 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A19C E104                       	smpsAlterNote       $04
0008A19E E701                       	dc.b	smpsNoAttack, $01
0008A1A0 E10A                       	smpsAlterNote       $0A
0008A1A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1A6 E104                       	smpsAlterNote       $04
0008A1A8 E701                       	dc.b	smpsNoAttack, $01
0008A1AA E101                       	smpsAlterNote       $01
0008A1AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1B0 E107                       	smpsAlterNote       $07
0008A1B2 E701                       	dc.b	smpsNoAttack, $01
0008A1B4 E10B                       	smpsAlterNote       $0B
0008A1B6 E701                       	dc.b	smpsNoAttack, $01
0008A1B8 E10A                       	smpsAlterNote       $0A
0008A1BA E701                       	dc.b	smpsNoAttack, $01
0008A1BC E107                       	smpsAlterNote       $07
0008A1BE 8001                       	dc.b	nRst, $01
0008A1C0 E108                       	smpsAlterNote       $08
0008A1C2 B50D                       	dc.b	nE4, $0D
0008A1C4 E102                       	smpsAlterNote       $02
0008A1C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1CA E105                       	smpsAlterNote       $05
0008A1CC E701                       	dc.b	smpsNoAttack, $01
0008A1CE E10B                       	smpsAlterNote       $0B
0008A1D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1D4 E105                       	smpsAlterNote       $05
0008A1D6 E701                       	dc.b	smpsNoAttack, $01
0008A1D8 E102                       	smpsAlterNote       $02
0008A1DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1DE E108                       	smpsAlterNote       $08
0008A1E0 E701                       	dc.b	smpsNoAttack, $01
0008A1E2 E10C                       	smpsAlterNote       $0C
0008A1E4 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008A1E8 E107                       	smpsAlterNote       $07
0008A1EA B30D                       	dc.b	nD4, $0D
0008A1EC E101                       	smpsAlterNote       $01
0008A1EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1F2 E104                       	smpsAlterNote       $04
0008A1F4 E701                       	dc.b	smpsNoAttack, $01
0008A1F6 E10A                       	smpsAlterNote       $0A
0008A1F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1FC E104                       	smpsAlterNote       $04
0008A1FE E701                       	dc.b	smpsNoAttack, $01
0008A200 E101                       	smpsAlterNote       $01
0008A202 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A206 E107                       	smpsAlterNote       $07
0008A208 E701                       	dc.b	smpsNoAttack, $01
0008A20A E10B                       	smpsAlterNote       $0B
0008A20C E701                       	dc.b	smpsNoAttack, $01
0008A20E E10A                       	smpsAlterNote       $0A
0008A210 E701                       	dc.b	smpsNoAttack, $01
0008A212 E104                       	smpsAlterNote       $04
0008A214 E701                       	dc.b	smpsNoAttack, $01
0008A216 E100                       	smpsAlterNote       $00
0008A218 E701                       	dc.b	smpsNoAttack, $01
0008A21A E104                       	smpsAlterNote       $04
0008A21C E701                       	dc.b	smpsNoAttack, $01
0008A21E E107                       	smpsAlterNote       $07
0008A220 E701                       	dc.b	smpsNoAttack, $01
0008A222 E10B                       	smpsAlterNote       $0B
0008A224 E701                       	dc.b	smpsNoAttack, $01
0008A226 E107                       	smpsAlterNote       $07
0008A228 E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
0008A22C E101                       	smpsAlterNote       $01
0008A22E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A232 E107                       	smpsAlterNote       $07
0008A234 E701                       	dc.b	smpsNoAttack, $01
0008A236 E10A                       	smpsAlterNote       $0A
0008A238 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A23C E104                       	smpsAlterNote       $04
0008A23E E701                       	dc.b	smpsNoAttack, $01
0008A240 E100                       	smpsAlterNote       $00
0008A242 E701                       	dc.b	smpsNoAttack, $01
0008A244 E101                       	smpsAlterNote       $01
0008A246 E701                       	dc.b	smpsNoAttack, $01
0008A248 E107                       	smpsAlterNote       $07
0008A24A E701                       	dc.b	smpsNoAttack, $01
0008A24C E10B                       	smpsAlterNote       $0B
0008A24E E701                       	dc.b	smpsNoAttack, $01
0008A250 E107                       	smpsAlterNote       $07
0008A252 B30E                       	dc.b	nD4, $0E
0008A254 E101                       	smpsAlterNote       $01
0008A256 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A25A E107                       	smpsAlterNote       $07
0008A25C E701                       	dc.b	smpsNoAttack, $01
0008A25E E10A                       	smpsAlterNote       $0A
0008A260 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A264 E104                       	smpsAlterNote       $04
0008A266 E701                       	dc.b	smpsNoAttack, $01
0008A268 E100                       	smpsAlterNote       $00
0008A26A E701                       	dc.b	smpsNoAttack, $01
0008A26C E101                       	smpsAlterNote       $01
0008A26E E701                       	dc.b	smpsNoAttack, $01
0008A270 E107                       	smpsAlterNote       $07
0008A272 E701                       	dc.b	smpsNoAttack, $01
0008A274 E10B                       	smpsAlterNote       $0B
0008A276 E701                       	dc.b	smpsNoAttack, $01
0008A278 E107                       	smpsAlterNote       $07
0008A27A E701                       	dc.b	smpsNoAttack, $01
0008A27C E104                       	smpsAlterNote       $04
0008A27E E701                       	dc.b	smpsNoAttack, $01
0008A280 E100                       	smpsAlterNote       $00
0008A282 E701                       	dc.b	smpsNoAttack, $01
0008A284 E104                       	smpsAlterNote       $04
0008A286 E701                       	dc.b	smpsNoAttack, $01
0008A288 E10A                       	smpsAlterNote       $0A
0008A28A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A28E E107                       	smpsAlterNote       $07
0008A290 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0008A294 E104                       	smpsAlterNote       $04
0008A296 E701                       	dc.b	smpsNoAttack, $01
0008A298 E100                       	smpsAlterNote       $00
0008A29A E701                       	dc.b	smpsNoAttack, $01
0008A29C E101                       	smpsAlterNote       $01
0008A29E E701                       	dc.b	smpsNoAttack, $01
0008A2A0 E107                       	smpsAlterNote       $07
0008A2A2 E701                       	dc.b	smpsNoAttack, $01
0008A2A4 E10B                       	smpsAlterNote       $0B
0008A2A6 E701                       	dc.b	smpsNoAttack, $01
0008A2A8 E107                       	smpsAlterNote       $07
0008A2AA E701                       	dc.b	smpsNoAttack, $01
0008A2AC E104                       	smpsAlterNote       $04
0008A2AE E701                       	dc.b	smpsNoAttack, $01
0008A2B0 E100                       	smpsAlterNote       $00
0008A2B2 E701                       	dc.b	smpsNoAttack, $01
0008A2B4 E104                       	smpsAlterNote       $04
0008A2B6 E701                       	dc.b	smpsNoAttack, $01
0008A2B8 E10A                       	smpsAlterNote       $0A
0008A2BA E701                       	dc.b	smpsNoAttack, $01
0008A2BC E10B                       	smpsAlterNote       $0B
0008A2BE E701                       	dc.b	smpsNoAttack, $01
0008A2C2 E6FF                       	smpsAlterVol        $FF
0008A2C4 A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
0008A2D0 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
0008A2D8 E109                       	smpsAlterNote       $09
0008A2DA E601                       	smpsAlterVol        $01
0008A2DC B60D                       	dc.b	nF4, $0D
0008A2DE E106                       	smpsAlterNote       $06
0008A2E0 E701                       	dc.b	smpsNoAttack, $01
0008A2E2 E102                       	smpsAlterNote       $02
0008A2E4 E701                       	dc.b	smpsNoAttack, $01
0008A2E6 E106                       	smpsAlterNote       $06
0008A2E8 E701                       	dc.b	smpsNoAttack, $01
0008A2EA E109                       	smpsAlterNote       $09
0008A2EC E701                       	dc.b	smpsNoAttack, $01
0008A2EE E10D                       	smpsAlterNote       $0D
0008A2F0 E701                       	dc.b	smpsNoAttack, $01
0008A2F2 E109                       	smpsAlterNote       $09
0008A2F4 E701                       	dc.b	smpsNoAttack, $01
0008A2F6 E103                       	smpsAlterNote       $03
0008A2F8 E701                       	dc.b	smpsNoAttack, $01
0008A2FA E102                       	smpsAlterNote       $02
0008A2FC E701                       	dc.b	smpsNoAttack, $01
0008A2FE E106                       	smpsAlterNote       $06
0008A300 E701                       	dc.b	smpsNoAttack, $01
0008A302 E10C                       	smpsAlterNote       $0C
0008A304 E701                       	dc.b	smpsNoAttack, $01
0008A306 E10D                       	smpsAlterNote       $0D
0008A308 8001                       	dc.b	nRst, $01
0008A30A E109                       	smpsAlterNote       $09
0008A30C B80D                       	dc.b	nG4, $0D
0008A30E E106                       	smpsAlterNote       $06
0008A310 E701                       	dc.b	smpsNoAttack, $01
0008A312 E102                       	smpsAlterNote       $02
0008A314 E701                       	dc.b	smpsNoAttack, $01
0008A316 E106                       	smpsAlterNote       $06
0008A318 E701                       	dc.b	smpsNoAttack, $01
0008A31A E109                       	smpsAlterNote       $09
0008A31C E701                       	dc.b	smpsNoAttack, $01
0008A31E E10D                       	smpsAlterNote       $0D
0008A320 E701                       	dc.b	smpsNoAttack, $01
0008A322 E109                       	smpsAlterNote       $09
0008A324 E701                       	dc.b	smpsNoAttack, $01
0008A326 E103                       	smpsAlterNote       $03
0008A328 E701                       	dc.b	smpsNoAttack, $01
0008A32A E102                       	smpsAlterNote       $02
0008A32C E701                       	dc.b	smpsNoAttack, $01
0008A32E E106                       	smpsAlterNote       $06
0008A330 E701                       	dc.b	smpsNoAttack, $01
0008A332 E10C                       	smpsAlterNote       $0C
0008A334 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A338 E106                       	smpsAlterNote       $06
0008A33A E701                       	dc.b	smpsNoAttack, $01
0008A33C E103                       	smpsAlterNote       $03
0008A33E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A342 E109                       	smpsAlterNote       $09
0008A344 E701                       	dc.b	smpsNoAttack, $01
0008A346 E10D                       	smpsAlterNote       $0D
0008A348 E701                       	dc.b	smpsNoAttack, $01
0008A34A E10C                       	smpsAlterNote       $0C
0008A34C E701                       	dc.b	smpsNoAttack, $01
0008A34E E109                       	smpsAlterNote       $09
0008A350 8001                       	dc.b	nRst, $01
0008A352 E10B                       	smpsAlterNote       $0B
0008A354 BA0D                       	dc.b	nA4, $0D
0008A356 E105                       	smpsAlterNote       $05
0008A358 E701                       	dc.b	smpsNoAttack, $01
0008A35A E104                       	smpsAlterNote       $04
0008A35C E701                       	dc.b	smpsNoAttack, $01
0008A35E E108                       	smpsAlterNote       $08
0008A360 E701                       	dc.b	smpsNoAttack, $01
0008A362 E10E                       	smpsAlterNote       $0E
0008A364 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A368 E10B                       	smpsAlterNote       $0B
0008A36A E701                       	dc.b	smpsNoAttack, $01
0008A36C E105                       	smpsAlterNote       $05
0008A36E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A372 E10B                       	smpsAlterNote       $0B
0008A374 E701                       	dc.b	smpsNoAttack, $01
0008A376 E10E                       	smpsAlterNote       $0E
0008A378 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A37C E108                       	smpsAlterNote       $08
0008A37E E701                       	dc.b	smpsNoAttack, $01
0008A380 E104                       	smpsAlterNote       $04
0008A382 E701                       	dc.b	smpsNoAttack, $01
0008A384 E105                       	smpsAlterNote       $05
0008A386 E701                       	dc.b	smpsNoAttack, $01
0008A388 E10B                       	smpsAlterNote       $0B
0008A38A E701                       	dc.b	smpsNoAttack, $01
0008A38C E10F                       	smpsAlterNote       $0F
0008A38E E701                       	dc.b	smpsNoAttack, $01
0008A390 E10B                       	smpsAlterNote       $0B
0008A392 E701                       	dc.b	smpsNoAttack, $01
0008A394 E108                       	smpsAlterNote       $08
0008A396 E701                       	dc.b	smpsNoAttack, $01
0008A398 E104                       	smpsAlterNote       $04
0008A39A E701                       	dc.b	smpsNoAttack, $01
0008A39C E108                       	smpsAlterNote       $08
0008A39E E701                       	dc.b	smpsNoAttack, $01
0008A3A0 E10E                       	smpsAlterNote       $0E
0008A3A2 E701                       	dc.b	smpsNoAttack, $01
0008A3A4 E10F                       	smpsAlterNote       $0F
0008A3A6 E701                       	dc.b	smpsNoAttack, $01
0008A3A8 E10B                       	smpsAlterNote       $0B
0008A3AA E701                       	dc.b	smpsNoAttack, $01
0008A3AC E105                       	smpsAlterNote       $05
0008A3AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3B2 E108                       	smpsAlterNote       $08
0008A3B4 E701                       	dc.b	smpsNoAttack, $01
0008A3B6 E10E                       	smpsAlterNote       $0E
0008A3B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3BC E108                       	smpsAlterNote       $08
0008A3BE E701                       	dc.b	smpsNoAttack, $01
0008A3C0 E105                       	smpsAlterNote       $05
0008A3C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3C6 E108                       	smpsAlterNote       $08
0008A3C8 B50A 8001                  	dc.b	nE4, $0A, nRst, $01
0008A3CC E109                       	smpsAlterNote       $09
0008A3CE B60D                       	dc.b	nF4, $0D
0008A3D0 E103                       	smpsAlterNote       $03
0008A3D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3D6 E106                       	smpsAlterNote       $06
0008A3D8 E701                       	dc.b	smpsNoAttack, $01
0008A3DA E10C                       	smpsAlterNote       $0C
0008A3DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3E0 E106                       	smpsAlterNote       $06
0008A3E2 E701                       	dc.b	smpsNoAttack, $01
0008A3E4 E103                       	smpsAlterNote       $03
0008A3E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3EA E109                       	smpsAlterNote       $09
0008A3EC E701                       	dc.b	smpsNoAttack, $01
0008A3EE E10D                       	smpsAlterNote       $0D
0008A3F0 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008A3F4 E109                       	smpsAlterNote       $09
0008A3F6 B80D                       	dc.b	nG4, $0D
0008A3F8 E103                       	smpsAlterNote       $03
0008A3FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3FE E109                       	smpsAlterNote       $09
0008A400 E701                       	dc.b	smpsNoAttack, $01
0008A402 E10C                       	smpsAlterNote       $0C
0008A404 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A408 E106                       	smpsAlterNote       $06
0008A40A E701                       	dc.b	smpsNoAttack, $01
0008A40C E102                       	smpsAlterNote       $02
0008A40E E701                       	dc.b	smpsNoAttack, $01
0008A410 E103                       	smpsAlterNote       $03
0008A412 E701                       	dc.b	smpsNoAttack, $01
0008A414 E109                       	smpsAlterNote       $09
0008A416 E701                       	dc.b	smpsNoAttack, $01
0008A418 E10D                       	smpsAlterNote       $0D
0008A41A E701                       	dc.b	smpsNoAttack, $01
0008A41C E109                       	smpsAlterNote       $09
0008A41E E701                       	dc.b	smpsNoAttack, $01
0008A420 E106                       	smpsAlterNote       $06
0008A422 E701                       	dc.b	smpsNoAttack, $01
0008A424 E102                       	smpsAlterNote       $02
0008A426 E701                       	dc.b	smpsNoAttack, $01
0008A428 E106                       	smpsAlterNote       $06
0008A42A E701                       	dc.b	smpsNoAttack, $01
0008A42C E10C                       	smpsAlterNote       $0C
0008A42E E701                       	dc.b	smpsNoAttack, $01
0008A430 E10D                       	smpsAlterNote       $0D
0008A432 E701                       	dc.b	smpsNoAttack, $01
0008A434 E109                       	smpsAlterNote       $09
0008A436 E701                       	dc.b	smpsNoAttack, $01
0008A438 E10B                       	smpsAlterNote       $0B
0008A43A BA0D                       	dc.b	nA4, $0D
0008A43C E108                       	smpsAlterNote       $08
0008A43E E701                       	dc.b	smpsNoAttack, $01
0008A440 E105                       	smpsAlterNote       $05
0008A442 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A446 E10B                       	smpsAlterNote       $0B
0008A448 E701                       	dc.b	smpsNoAttack, $01
0008A44A E10F                       	smpsAlterNote       $0F
0008A44C E701                       	dc.b	smpsNoAttack, $01
0008A44E E10E                       	smpsAlterNote       $0E
0008A450 E701                       	dc.b	smpsNoAttack, $01
0008A452 E108                       	smpsAlterNote       $08
0008A454 E701                       	dc.b	smpsNoAttack, $01
0008A456 E104                       	smpsAlterNote       $04
0008A458 E701                       	dc.b	smpsNoAttack, $01
0008A45A E108                       	smpsAlterNote       $08
0008A45C E701                       	dc.b	smpsNoAttack, $01
0008A45E E10B                       	smpsAlterNote       $0B
0008A460 E701                       	dc.b	smpsNoAttack, $01
0008A462 E10F                       	smpsAlterNote       $0F
0008A464 E701                       	dc.b	smpsNoAttack, $01
0008A466 E10B                       	smpsAlterNote       $0B
0008A468 E701                       	dc.b	smpsNoAttack, $01
0008A46A E105                       	smpsAlterNote       $05
0008A46C E701                       	dc.b	smpsNoAttack, $01
0008A46E E104                       	smpsAlterNote       $04
0008A470 E701                       	dc.b	smpsNoAttack, $01
0008A472 E108                       	smpsAlterNote       $08
0008A474 E701                       	dc.b	smpsNoAttack, $01
0008A476 E10E                       	smpsAlterNote       $0E
0008A478 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A47C E10B                       	smpsAlterNote       $0B
0008A47E E701                       	dc.b	smpsNoAttack, $01
0008A480 E105                       	smpsAlterNote       $05
0008A482 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A486 E10B                       	smpsAlterNote       $0B
0008A488 E701                       	dc.b	smpsNoAttack, $01
0008A48A E10E                       	smpsAlterNote       $0E
0008A48C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A490 E108                       	smpsAlterNote       $08
0008A492 E701                       	dc.b	smpsNoAttack, $01
0008A494 E105                       	smpsAlterNote       $05
0008A496 8001                       	dc.b	nRst, $01
0008A498 E109                       	smpsAlterNote       $09
0008A49A B60A                       	dc.b	nF4, $0A
0008A49C E108                       	smpsAlterNote       $08
0008A49E B507                       	dc.b	nE4, $07
0008A4A0 E107                       	smpsAlterNote       $07
0008A4A2 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008A4A6 E108                       	smpsAlterNote       $08
0008A4A8 B503                       	dc.b	nE4, $03
0008A4AA E109                       	smpsAlterNote       $09
0008A4AC B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
0008A4B4 E10B                       	smpsAlterNote       $0B
0008A4B6 BA0D                       	dc.b	nA4, $0D
0008A4B8 E108                       	smpsAlterNote       $08
0008A4BA E701                       	dc.b	smpsNoAttack, $01
0008A4BC E104                       	smpsAlterNote       $04
0008A4BE E701                       	dc.b	smpsNoAttack, $01
0008A4C0 E108                       	smpsAlterNote       $08
0008A4C2 E701                       	dc.b	smpsNoAttack, $01
0008A4C4 E10B                       	smpsAlterNote       $0B
0008A4C6 E701                       	dc.b	smpsNoAttack, $01
0008A4C8 E10F                       	smpsAlterNote       $0F
0008A4CA E701                       	dc.b	smpsNoAttack, $01
0008A4CC E10B                       	smpsAlterNote       $0B
0008A4CE E701                       	dc.b	smpsNoAttack, $01
0008A4D0 E105                       	smpsAlterNote       $05
0008A4D2 E701                       	dc.b	smpsNoAttack, $01
0008A4D4 E104                       	smpsAlterNote       $04
0008A4D6 E701                       	dc.b	smpsNoAttack, $01
0008A4D8 E108                       	smpsAlterNote       $08
0008A4DA E701                       	dc.b	smpsNoAttack, $01
0008A4DC E10E                       	smpsAlterNote       $0E
0008A4DE E701                       	dc.b	smpsNoAttack, $01
0008A4E0 E10F                       	smpsAlterNote       $0F
0008A4E2 8001                       	dc.b	nRst, $01
0008A4E4 E109                       	smpsAlterNote       $09
0008A4E6 C20D                       	dc.b	nF5, $0D
0008A4E8 E106                       	smpsAlterNote       $06
0008A4EA E701                       	dc.b	smpsNoAttack, $01
0008A4EC E102                       	smpsAlterNote       $02
0008A4EE E701                       	dc.b	smpsNoAttack, $01
0008A4F0 E106                       	smpsAlterNote       $06
0008A4F2 E701                       	dc.b	smpsNoAttack, $01
0008A4F4 E109                       	smpsAlterNote       $09
0008A4F6 E701                       	dc.b	smpsNoAttack, $01
0008A4F8 E10D                       	smpsAlterNote       $0D
0008A4FA E701                       	dc.b	smpsNoAttack, $01
0008A4FC E109                       	smpsAlterNote       $09
0008A4FE E701                       	dc.b	smpsNoAttack, $01
0008A500 E103                       	smpsAlterNote       $03
0008A502 E701                       	dc.b	smpsNoAttack, $01
0008A504 E102                       	smpsAlterNote       $02
0008A506 E701                       	dc.b	smpsNoAttack, $01
0008A508 E106                       	smpsAlterNote       $06
0008A50A E701                       	dc.b	smpsNoAttack, $01
0008A50C E10C                       	smpsAlterNote       $0C
0008A50E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A512 E109                       	smpsAlterNote       $09
0008A514 E701                       	dc.b	smpsNoAttack, $01
0008A516 E103                       	smpsAlterNote       $03
0008A518 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A51C E109                       	smpsAlterNote       $09
0008A51E E701                       	dc.b	smpsNoAttack, $01
0008A520 E10C                       	smpsAlterNote       $0C
0008A522 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A526 E106                       	smpsAlterNote       $06
0008A528 E701                       	dc.b	smpsNoAttack, $01
0008A52A E102                       	smpsAlterNote       $02
0008A52C E701                       	dc.b	smpsNoAttack, $01
0008A52E E103                       	smpsAlterNote       $03
0008A530 E701                       	dc.b	smpsNoAttack, $01
0008A532 E109                       	smpsAlterNote       $09
0008A534 E701                       	dc.b	smpsNoAttack, $01
0008A536 E10D                       	smpsAlterNote       $0D
0008A538 E701                       	dc.b	smpsNoAttack, $01
0008A53A E109                       	smpsAlterNote       $09
0008A53C E701                       	dc.b	smpsNoAttack, $01
0008A53E E106                       	smpsAlterNote       $06
0008A540 E701                       	dc.b	smpsNoAttack, $01
0008A542 E102                       	smpsAlterNote       $02
0008A544 E701                       	dc.b	smpsNoAttack, $01
0008A546 E106                       	smpsAlterNote       $06
0008A548 E701                       	dc.b	smpsNoAttack, $01
0008A54A E10C                       	smpsAlterNote       $0C
0008A54C E701                       	dc.b	smpsNoAttack, $01
0008A54E E10D                       	smpsAlterNote       $0D
0008A550 E701                       	dc.b	smpsNoAttack, $01
0008A552 E109                       	smpsAlterNote       $09
0008A554 E701                       	dc.b	smpsNoAttack, $01
0008A556 E103                       	smpsAlterNote       $03
0008A558 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A55C E106                       	smpsAlterNote       $06
0008A55E E701                       	dc.b	smpsNoAttack, $01
0008A560 E10C                       	smpsAlterNote       $0C
0008A562 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A566 E106                       	smpsAlterNote       $06
0008A568 E701                       	dc.b	smpsNoAttack, $01
0008A56A E103                       	smpsAlterNote       $03
0008A56C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A570 E109                       	smpsAlterNote       $09
0008A572 E701                       	dc.b	smpsNoAttack, $01
0008A574 E10D                       	smpsAlterNote       $0D
0008A576 E701                       	dc.b	smpsNoAttack, $01
0008A578 E10C                       	smpsAlterNote       $0C
0008A57A E701                       	dc.b	smpsNoAttack, $01
0008A57C E106                       	smpsAlterNote       $06
0008A57E E701                       	dc.b	smpsNoAttack, $01
0008A580 E103                       	smpsAlterNote       $03
0008A582 8001                       	dc.b	nRst, $01
0008A584 E109                       	smpsAlterNote       $09
0008A586 C206 8001                  	dc.b	nF5, $06, nRst, $01
0008A58C E10C                       	smpsAlterNote       $0C
0008A58E E601                       	smpsAlterVol        $01
0008A590 BB0D                       	dc.b	nBb4, $0D
0008A592 E106                       	smpsAlterNote       $06
0008A594 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A598 E109                       	smpsAlterNote       $09
0008A59A E701                       	dc.b	smpsNoAttack, $01
0008A59C E10F                       	smpsAlterNote       $0F
0008A59E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A5A2 E109                       	smpsAlterNote       $09
0008A5A4 E701                       	dc.b	smpsNoAttack, $01
0008A5A6 E106                       	smpsAlterNote       $06
0008A5A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A5AC E10C                       	smpsAlterNote       $0C
0008A5AE E701                       	dc.b	smpsNoAttack, $01
0008A5B0 E110                       	smpsAlterNote       $10
0008A5B2 E701                       	dc.b	smpsNoAttack, $01
0008A5B4 E10F                       	smpsAlterNote       $0F
0008A5B6 E701                       	dc.b	smpsNoAttack, $01
0008A5B8 E109                       	smpsAlterNote       $09
0008A5BA E701                       	dc.b	smpsNoAttack, $01
0008A5BC E105                       	smpsAlterNote       $05
0008A5BE E701                       	dc.b	smpsNoAttack, $01
0008A5C0 E106                       	smpsAlterNote       $06
0008A5C2 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0008A5C6 E103                       	smpsAlterNote       $03
0008A5C8 E701                       	dc.b	smpsNoAttack, $01
0008A5CA E1FF                       	smpsAlterNote       $FF
0008A5CC E701                       	dc.b	smpsNoAttack, $01
0008A5CE E103                       	smpsAlterNote       $03
0008A5D0 E701                       	dc.b	smpsNoAttack, $01
0008A5D2 E106                       	smpsAlterNote       $06
0008A5D4 E701                       	dc.b	smpsNoAttack, $01
0008A5D6 E10A                       	smpsAlterNote       $0A
0008A5D8 E701                       	dc.b	smpsNoAttack, $01
0008A5DA E106                       	smpsAlterNote       $06
0008A5DC E701                       	dc.b	smpsNoAttack, $01
0008A5DE E100                       	smpsAlterNote       $00
0008A5E0 E701                       	dc.b	smpsNoAttack, $01
0008A5E2 E1FF                       	smpsAlterNote       $FF
0008A5E4 E701                       	dc.b	smpsNoAttack, $01
0008A5E6 E103                       	smpsAlterNote       $03
0008A5E8 E701                       	dc.b	smpsNoAttack, $01
0008A5EA E109                       	smpsAlterNote       $09
0008A5EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A5F0 E106                       	smpsAlterNote       $06
0008A5F2 E701                       	dc.b	smpsNoAttack, $01
0008A5F4 E100                       	smpsAlterNote       $00
0008A5F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A5FA E107                       	smpsAlterNote       $07
0008A5FC BF0E                       	dc.b	nD5, $0E
0008A5FE E101                       	smpsAlterNote       $01
0008A600 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A604 E107                       	smpsAlterNote       $07
0008A606 E701                       	dc.b	smpsNoAttack, $01
0008A608 E10A                       	smpsAlterNote       $0A
0008A60A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A60E E104                       	smpsAlterNote       $04
0008A610 E701                       	dc.b	smpsNoAttack, $01
0008A612 E100                       	smpsAlterNote       $00
0008A614 E701                       	dc.b	smpsNoAttack, $01
0008A616 E101                       	smpsAlterNote       $01
0008A618 E701                       	dc.b	smpsNoAttack, $01
0008A61A E107                       	smpsAlterNote       $07
0008A61C E701                       	dc.b	smpsNoAttack, $01
0008A61E E10B                       	smpsAlterNote       $0B
0008A620 E701                       	dc.b	smpsNoAttack, $01
0008A622 E107                       	smpsAlterNote       $07
0008A624 E701                       	dc.b	smpsNoAttack, $01
0008A626 E104                       	smpsAlterNote       $04
0008A628 E701                       	dc.b	smpsNoAttack, $01
0008A62A E100                       	smpsAlterNote       $00
0008A62C E701                       	dc.b	smpsNoAttack, $01
0008A62E E101                       	smpsAlterNote       $01
0008A630 8001                       	dc.b	nRst, $01
0008A632 E108                       	smpsAlterNote       $08
0008A634 C10C                       	dc.b	nE5, $0C
0008A636 E109                       	smpsAlterNote       $09
0008A638 C201 8001                  	dc.b	nF5, $01, nRst, $01
0008A63C E10A                       	smpsAlterNote       $0A
0008A63E 8001                       	dc.b	nRst, $01
0008A640 E109                       	smpsAlterNote       $09
0008A642 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0008A646 E106                       	smpsAlterNote       $06
0008A648 E701                       	dc.b	smpsNoAttack, $01
0008A64A E102                       	smpsAlterNote       $02
0008A64C E701                       	dc.b	smpsNoAttack, $01
0008A64E E103                       	smpsAlterNote       $03
0008A650 E701                       	dc.b	smpsNoAttack, $01
0008A652 E109                       	smpsAlterNote       $09
0008A654 E701                       	dc.b	smpsNoAttack, $01
0008A656 E10D                       	smpsAlterNote       $0D
0008A658 E701                       	dc.b	smpsNoAttack, $01
0008A65A E109                       	smpsAlterNote       $09
0008A65C E701                       	dc.b	smpsNoAttack, $01
0008A65E E106                       	smpsAlterNote       $06
0008A660 E701                       	dc.b	smpsNoAttack, $01
0008A662 E102                       	smpsAlterNote       $02
0008A664 E701                       	dc.b	smpsNoAttack, $01
0008A666 E106                       	smpsAlterNote       $06
0008A668 E701                       	dc.b	smpsNoAttack, $01
0008A66A E10C                       	smpsAlterNote       $0C
0008A66C E701                       	dc.b	smpsNoAttack, $01
0008A66E E10D                       	smpsAlterNote       $0D
0008A670 E701                       	dc.b	smpsNoAttack, $01
0008A672 E109                       	smpsAlterNote       $09
0008A674 C40D                       	dc.b	nG5, $0D
0008A676 E106                       	smpsAlterNote       $06
0008A678 E701                       	dc.b	smpsNoAttack, $01
0008A67A E102                       	smpsAlterNote       $02
0008A67C E701                       	dc.b	smpsNoAttack, $01
0008A67E E103                       	smpsAlterNote       $03
0008A680 E701                       	dc.b	smpsNoAttack, $01
0008A682 E109                       	smpsAlterNote       $09
0008A684 E701                       	dc.b	smpsNoAttack, $01
0008A686 E108                       	smpsAlterNote       $08
0008A688 C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
0008A694 E109                       	smpsAlterNote       $09
0008A696 C20D                       	dc.b	nF5, $0D
0008A698 E106                       	smpsAlterNote       $06
0008A69A E701                       	dc.b	smpsNoAttack, $01
0008A69C E102                       	smpsAlterNote       $02
0008A69E E701                       	dc.b	smpsNoAttack, $01
0008A6A0 E106                       	smpsAlterNote       $06
0008A6A2 E701                       	dc.b	smpsNoAttack, $01
0008A6A4 E109                       	smpsAlterNote       $09
0008A6A6 E701                       	dc.b	smpsNoAttack, $01
0008A6A8 E10D                       	smpsAlterNote       $0D
0008A6AA E701                       	dc.b	smpsNoAttack, $01
0008A6AC E109                       	smpsAlterNote       $09
0008A6AE E701                       	dc.b	smpsNoAttack, $01
0008A6B0 E103                       	smpsAlterNote       $03
0008A6B2 E701                       	dc.b	smpsNoAttack, $01
0008A6B4 E102                       	smpsAlterNote       $02
0008A6B6 E701                       	dc.b	smpsNoAttack, $01
0008A6B8 E106                       	smpsAlterNote       $06
0008A6BA E701                       	dc.b	smpsNoAttack, $01
0008A6BC E10C                       	smpsAlterNote       $0C
0008A6BE E701                       	dc.b	smpsNoAttack, $01
0008A6C0 E10D                       	smpsAlterNote       $0D
0008A6C2 8001                       	dc.b	nRst, $01
0008A6C4 E112                       	smpsAlterNote       $12
0008A6C6 C401                       	dc.b	nG5, $01
0008A6C8 E1EB                       	smpsAlterNote       $EB
0008A6CA E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
0008A6CD E1FD                       	smpsAlterNote       $FD
0008A6CF E701                       	dc.b	smpsNoAttack, $01
0008A6D1 E10F                       	smpsAlterNote       $0F
0008A6D3 E701                       	dc.b	smpsNoAttack, $01
0008A6D5 E118                       	smpsAlterNote       $18
0008A6D7 E701                       	dc.b	smpsNoAttack, $01
0008A6D9 E1ED                       	smpsAlterNote       $ED
0008A6DB E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008A6DE E1FF                       	smpsAlterNote       $FF
0008A6E0 E701                       	dc.b	smpsNoAttack, $01
0008A6E2 E10B                       	smpsAlterNote       $0B
0008A6E4 E703                       	dc.b	smpsNoAttack, $03
0008A6E6 E109                       	smpsAlterNote       $09
0008A6E8 C407                       	dc.b	nG5, $07
0008A6EA E108                       	smpsAlterNote       $08
0008A6EC C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
0008A6F8 E109                       	smpsAlterNote       $09
0008A6FA C20D                       	dc.b	nF5, $0D
0008A6FC E103                       	smpsAlterNote       $03
0008A6FE E701                       	dc.b	smpsNoAttack, $01
0008A700 E102                       	smpsAlterNote       $02
0008A702 E701                       	dc.b	smpsNoAttack, $01
0008A704 E106                       	smpsAlterNote       $06
0008A706 E701                       	dc.b	smpsNoAttack, $01
0008A708 E10C                       	smpsAlterNote       $0C
0008A70A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A70E E109                       	smpsAlterNote       $09
0008A710 E701                       	dc.b	smpsNoAttack, $01
0008A712 E103                       	smpsAlterNote       $03
0008A714 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A718 E109                       	smpsAlterNote       $09
0008A71A E701                       	dc.b	smpsNoAttack, $01
0008A71C E10C                       	smpsAlterNote       $0C
0008A71E E701                       	dc.b	smpsNoAttack, $01
0008A720 E10D                       	smpsAlterNote       $0D
0008A722 8001                       	dc.b	nRst, $01
0008A724 E10B                       	smpsAlterNote       $0B
0008A726 C609 8001                  	dc.b	nA5, $09, nRst, $01
0008A72A E109                       	smpsAlterNote       $09
0008A72C B806 8001                  	dc.b	nG4, $06, nRst, $01
0008A730 E108                       	smpsAlterNote       $08
0008A732 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0008A73E 8001                       	dc.b	nRst, $01
0008A740 E109                       	smpsAlterNote       $09
0008A742 C20D                       	dc.b	nF5, $0D
0008A744 E103                       	smpsAlterNote       $03
0008A746 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A74A E106                       	smpsAlterNote       $06
0008A74C E701                       	dc.b	smpsNoAttack, $01
0008A74E E10C                       	smpsAlterNote       $0C
0008A750 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A754 E106                       	smpsAlterNote       $06
0008A756 E701                       	dc.b	smpsNoAttack, $01
0008A758 E103                       	smpsAlterNote       $03
0008A75A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A75E E109                       	smpsAlterNote       $09
0008A760 E701                       	dc.b	smpsNoAttack, $01
0008A762 E10D                       	smpsAlterNote       $0D
0008A764 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008A76A E108                       	smpsAlterNote       $08
0008A76C E6FF                       	smpsAlterVol        $FF
0008A76E A806                       	dc.b	nEb3, $06
0008A770 E10C                       	smpsAlterNote       $0C
0008A772 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008A776 E108                       	smpsAlterNote       $08
0008A778 A803                       	dc.b	nEb3, $03
0008A77A E109                       	smpsAlterNote       $09
0008A77C AC03 8001                  	dc.b	nG3, $03, nRst, $01
0008A780 E10C                       	smpsAlterNote       $0C
0008A782 AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
0008A78C E109                       	smpsAlterNote       $09
0008A78E E602                       	smpsAlterVol        $02
0008A790 B604                       	dc.b	nF4, $04
0008A792 E602                       	smpsAlterVol        $02
0008A794 F6F1 AA                    	smpsJump            music84_Jump02
0008A797                            
0008A797                            ; FM4 Data
0008A797                            music84_FM4:
0008A799 E040                       	smpsPan             panRight, $00
0008A79B 8003                       	dc.b	nRst, $03
0008A79D E10F                       	smpsAlterNote       $0F
0008A79F C603 8008                  	dc.b	nA5, $03, nRst, $08
0008A7A3 E10D                       	smpsAlterNote       $0D
0008A7A5 C403 800A                  	dc.b	nG5, $03, nRst, $0A
0008A7A9 E10C                       	smpsAlterNote       $0C
0008A7AB C103 8004                  	dc.b	nE5, $03, nRst, $04
0008A7B1 E6FE                       	smpsAlterVol        $FE
0008A7B3 E110                       	smpsAlterNote       $10
0008A7B5 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008A7B9 E10F                       	smpsAlterNote       $0F
0008A7BB C602 8001                  	dc.b	nA5, $02, nRst, $01
0008A7BF E10D                       	smpsAlterNote       $0D
0008A7C1 C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
0008A7CA E10C                       	smpsAlterNote       $0C
0008A7CC C103                       	dc.b	nE5, $03
0008A7CE E10A                       	smpsAlterNote       $0A
0008A7D0 BD03 8001                  	dc.b	nC5, $03, nRst, $01
0008A7D6 03                         	dc.b	$03
0008A7D7                            
0008A7D7                            music84_Jump01:
0008A7D7 E10B                       	smpsAlterNote       $0B
0008A7D9 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008A7DD E10C                       	smpsAlterNote       $0C
0008A7DF C102 8001                  	dc.b	nE5, $02, nRst, $01
0008A7E3 E10D                       	smpsAlterNote       $0D
0008A7E5 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008A7EF E10B                       	smpsAlterNote       $0B
0008A7F1 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
0008A7F5 E107                       	smpsAlterNote       $07
0008A7F7 E701                       	dc.b	smpsNoAttack, $01
0008A7F9 E103                       	smpsAlterNote       $03
0008A7FB E701                       	dc.b	smpsNoAttack, $01
0008A7FD E104                       	smpsAlterNote       $04
0008A7FF E701                       	dc.b	smpsNoAttack, $01
0008A801 E10A                       	smpsAlterNote       $0A
0008A803 E701                       	dc.b	smpsNoAttack, $01
0008A805 E10E                       	smpsAlterNote       $0E
0008A807 E701                       	dc.b	smpsNoAttack, $01
0008A809 E10A                       	smpsAlterNote       $0A
0008A80B E701                       	dc.b	smpsNoAttack, $01
0008A80D E107                       	smpsAlterNote       $07
0008A80F E701                       	dc.b	smpsNoAttack, $01
0008A811 E104                       	smpsAlterNote       $04
0008A813 8001                       	dc.b	nRst, $01
0008A815 E110                       	smpsAlterNote       $10
0008A817 C703                       	dc.b	nBb5, $03
0008A819 E10F                       	smpsAlterNote       $0F
0008A81B C603 8001                  	dc.b	nA5, $03, nRst, $01
0008A81F E10D                       	smpsAlterNote       $0D
0008A821 C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
0008A827 E10C                       	smpsAlterNote       $0C
0008A829 E701                       	dc.b	smpsNoAttack, $01
0008A82B E108                       	smpsAlterNote       $08
0008A82D E701                       	dc.b	smpsNoAttack, $01
0008A82F E10C                       	smpsAlterNote       $0C
0008A831 E701                       	dc.b	smpsNoAttack, $01
0008A833 E10F                       	smpsAlterNote       $0F
0008A835 E701                       	dc.b	smpsNoAttack, $01
0008A837 E113                       	smpsAlterNote       $13
0008A839 E701                       	dc.b	smpsNoAttack, $01
0008A83B E10F                       	smpsAlterNote       $0F
0008A83D E701                       	dc.b	smpsNoAttack, $01
0008A83F E109                       	smpsAlterNote       $09
0008A841 E701                       	dc.b	smpsNoAttack, $01
0008A843 E108                       	smpsAlterNote       $08
0008A845 E701                       	dc.b	smpsNoAttack, $01
0008A847 E10C                       	smpsAlterNote       $0C
0008A849 E701                       	dc.b	smpsNoAttack, $01
0008A84B E112                       	smpsAlterNote       $12
0008A84D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A851 E10C                       	smpsAlterNote       $0C
0008A853 E701                       	dc.b	smpsNoAttack, $01
0008A855 E109                       	smpsAlterNote       $09
0008A857 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A85B E10F                       	smpsAlterNote       $0F
0008A85D E701                       	dc.b	smpsNoAttack, $01
0008A85F E113                       	smpsAlterNote       $13
0008A861 E701                       	dc.b	smpsNoAttack, $01
0008A863 E112                       	smpsAlterNote       $12
0008A865 E701                       	dc.b	smpsNoAttack, $01
0008A867 E10C                       	smpsAlterNote       $0C
0008A869 E701                       	dc.b	smpsNoAttack, $01
0008A86B E108                       	smpsAlterNote       $08
0008A86D E701                       	dc.b	smpsNoAttack, $01
0008A86F E10C                       	smpsAlterNote       $0C
0008A871 E701                       	dc.b	smpsNoAttack, $01
0008A873 E10F                       	smpsAlterNote       $0F
0008A875 E701                       	dc.b	smpsNoAttack, $01
0008A877 E113                       	smpsAlterNote       $13
0008A879 E701                       	dc.b	smpsNoAttack, $01
0008A87B E10F                       	smpsAlterNote       $0F
0008A87D E701                       	dc.b	smpsNoAttack, $01
0008A87F E109                       	smpsAlterNote       $09
0008A881 E701                       	dc.b	smpsNoAttack, $01
0008A883 E108                       	smpsAlterNote       $08
0008A885 E701                       	dc.b	smpsNoAttack, $01
0008A887 E10C                       	smpsAlterNote       $0C
0008A889 E701                       	dc.b	smpsNoAttack, $01
0008A88B E112                       	smpsAlterNote       $12
0008A88D E701                       	dc.b	smpsNoAttack, $01
0008A88F E113                       	smpsAlterNote       $13
0008A891 800F                       	dc.b	nRst, $0F
0008A893 E10B                       	smpsAlterNote       $0B
0008A895 BF03                       	dc.b	nD5, $03
0008A897 E10C                       	smpsAlterNote       $0C
0008A899 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008A89D E10D                       	smpsAlterNote       $0D
0008A89F C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
0008A8A7 E10B                       	smpsAlterNote       $0B
0008A8A9 BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
0008A8B3 E110                       	smpsAlterNote       $10
0008A8B5 C704                       	dc.b	nBb5, $04
0008A8B7 E10F                       	smpsAlterNote       $0F
0008A8B9 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008A8BD E10D                       	smpsAlterNote       $0D
0008A8BF C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008A8C5 E109                       	smpsAlterNote       $09
0008A8C7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A8CB E10F                       	smpsAlterNote       $0F
0008A8CD E701                       	dc.b	smpsNoAttack, $01
0008A8CF E112                       	smpsAlterNote       $12
0008A8D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A8D5 E10C                       	smpsAlterNote       $0C
0008A8D7 E701                       	dc.b	smpsNoAttack, $01
0008A8D9 E108                       	smpsAlterNote       $08
0008A8DB E701                       	dc.b	smpsNoAttack, $01
0008A8DD E109                       	smpsAlterNote       $09
0008A8DF E701                       	dc.b	smpsNoAttack, $01
0008A8E1 E10F                       	smpsAlterNote       $0F
0008A8E3 E701                       	dc.b	smpsNoAttack, $01
0008A8E5 E113                       	smpsAlterNote       $13
0008A8E7 E701                       	dc.b	smpsNoAttack, $01
0008A8E9 E10F                       	smpsAlterNote       $0F
0008A8EB E701                       	dc.b	smpsNoAttack, $01
0008A8ED E10C                       	smpsAlterNote       $0C
0008A8EF E701                       	dc.b	smpsNoAttack, $01
0008A8F1 E108                       	smpsAlterNote       $08
0008A8F3 E701                       	dc.b	smpsNoAttack, $01
0008A8F5 E10C                       	smpsAlterNote       $0C
0008A8F7 E701                       	dc.b	smpsNoAttack, $01
0008A8F9 E112                       	smpsAlterNote       $12
0008A8FB E701                       	dc.b	smpsNoAttack, $01
0008A8FD E113                       	smpsAlterNote       $13
0008A8FF E701                       	dc.b	smpsNoAttack, $01
0008A901 E10F                       	smpsAlterNote       $0F
0008A903 E701                       	dc.b	smpsNoAttack, $01
0008A905 E109                       	smpsAlterNote       $09
0008A907 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A90B E10C                       	smpsAlterNote       $0C
0008A90D E701                       	dc.b	smpsNoAttack, $01
0008A90F E112                       	smpsAlterNote       $12
0008A911 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A915 E10C                       	smpsAlterNote       $0C
0008A917 E701                       	dc.b	smpsNoAttack, $01
0008A919 E109                       	smpsAlterNote       $09
0008A91B E701                       	dc.b	smpsNoAttack, $01
0008A91D E10D                       	smpsAlterNote       $0D
0008A91F C401 8001                  	dc.b	nG5, $01, nRst, $01
0008A923 E10F                       	smpsAlterNote       $0F
0008A925 C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
0008A92F E10D                       	smpsAlterNote       $0D
0008A931 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008A937 E10B                       	smpsAlterNote       $0B
0008A939 BF0D                       	dc.b	nD5, $0D
0008A93B E108                       	smpsAlterNote       $08
0008A93D E701                       	dc.b	smpsNoAttack, $01
0008A93F E104                       	smpsAlterNote       $04
0008A941 E701                       	dc.b	smpsNoAttack, $01
0008A943 E108                       	smpsAlterNote       $08
0008A945 E701                       	dc.b	smpsNoAttack, $01
0008A947 E10B                       	smpsAlterNote       $0B
0008A949 E701                       	dc.b	smpsNoAttack, $01
0008A94B E10F                       	smpsAlterNote       $0F
0008A94D E701                       	dc.b	smpsNoAttack, $01
0008A94F E10B                       	smpsAlterNote       $0B
0008A951 E701                       	dc.b	smpsNoAttack, $01
0008A953 E105                       	smpsAlterNote       $05
0008A955 E701                       	dc.b	smpsNoAttack, $01
0008A957 E104                       	smpsAlterNote       $04
0008A959 E701                       	dc.b	smpsNoAttack, $01
0008A95B E108                       	smpsAlterNote       $08
0008A95D E701                       	dc.b	smpsNoAttack, $01
0008A95F E10E                       	smpsAlterNote       $0E
0008A961 E701                       	dc.b	smpsNoAttack, $01
0008A963 E10F                       	smpsAlterNote       $0F
0008A965 8001                       	dc.b	nRst, $01
0008A967 E10C                       	smpsAlterNote       $0C
0008A969 C101                       	dc.b	nE5, $01
0008A96B E10D                       	smpsAlterNote       $0D
0008A96D C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
0008A973 E10F                       	smpsAlterNote       $0F
0008A975 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008A979 E10C                       	smpsAlterNote       $0C
0008A97B CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008A97F E10D                       	smpsAlterNote       $0D
0008A981 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008A985 E10C                       	smpsAlterNote       $0C
0008A987 CD03                       	dc.b	nE6, $03
0008A989 E10A                       	smpsAlterNote       $0A
0008A98B C903 8001                  	dc.b	nC6, $03, nRst, $01
0008A98F E10D                       	smpsAlterNote       $0D
0008A991 C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
0008A999 E109                       	smpsAlterNote       $09
0008A99B E701                       	dc.b	smpsNoAttack, $01
0008A99D E10D                       	smpsAlterNote       $0D
0008A99F E701                       	dc.b	smpsNoAttack, $01
0008A9A1 E110                       	smpsAlterNote       $10
0008A9A3 E701                       	dc.b	smpsNoAttack, $01
0008A9A5 E114                       	smpsAlterNote       $14
0008A9A7 E701                       	dc.b	smpsNoAttack, $01
0008A9A9 E110                       	smpsAlterNote       $10
0008A9AB E701                       	dc.b	smpsNoAttack, $01
0008A9AD E10A                       	smpsAlterNote       $0A
0008A9AF E701                       	dc.b	smpsNoAttack, $01
0008A9B1 E109                       	smpsAlterNote       $09
0008A9B3 E701                       	dc.b	smpsNoAttack, $01
0008A9B5 E10D                       	smpsAlterNote       $0D
0008A9B7 E701                       	dc.b	smpsNoAttack, $01
0008A9B9 E113                       	smpsAlterNote       $13
0008A9BB E701                       	dc.b	smpsNoAttack, $01
0008A9BD E114                       	smpsAlterNote       $14
0008A9BF 8001                       	dc.b	nRst, $01
0008A9C1 E10F                       	smpsAlterNote       $0F
0008A9C3 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0008A9C9 E10C                       	smpsAlterNote       $0C
0008A9CB E701                       	dc.b	smpsNoAttack, $01
0008A9CD E108                       	smpsAlterNote       $08
0008A9CF E701                       	dc.b	smpsNoAttack, $01
0008A9D1 E10C                       	smpsAlterNote       $0C
0008A9D3 E701                       	dc.b	smpsNoAttack, $01
0008A9D5 E112                       	smpsAlterNote       $12
0008A9D7 E701                       	dc.b	smpsNoAttack, $01
0008A9D9 E113                       	smpsAlterNote       $13
0008A9DB E701                       	dc.b	smpsNoAttack, $01
0008A9DD E10F                       	smpsAlterNote       $0F
0008A9DF E701                       	dc.b	smpsNoAttack, $01
0008A9E1 E109                       	smpsAlterNote       $09
0008A9E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A9E7 E10C                       	smpsAlterNote       $0C
0008A9E9 E701                       	dc.b	smpsNoAttack, $01
0008A9EB E112                       	smpsAlterNote       $12
0008A9ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A9F1 E10C                       	smpsAlterNote       $0C
0008A9F3 E701                       	dc.b	smpsNoAttack, $01
0008A9F5 E109                       	smpsAlterNote       $09
0008A9F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A9FB E10F                       	smpsAlterNote       $0F
0008A9FD E701                       	dc.b	smpsNoAttack, $01
0008A9FF E113                       	smpsAlterNote       $13
0008AA01 E701                       	dc.b	smpsNoAttack, $01
0008AA03 E112                       	smpsAlterNote       $12
0008AA05 E701                       	dc.b	smpsNoAttack, $01
0008AA07 E10C                       	smpsAlterNote       $0C
0008AA09 E701                       	dc.b	smpsNoAttack, $01
0008AA0B E108                       	smpsAlterNote       $08
0008AA0D E701                       	dc.b	smpsNoAttack, $01
0008AA0F E10C                       	smpsAlterNote       $0C
0008AA11 E701                       	dc.b	smpsNoAttack, $01
0008AA13 E10F                       	smpsAlterNote       $0F
0008AA15 E701                       	dc.b	smpsNoAttack, $01
0008AA17 E113                       	smpsAlterNote       $13
0008AA19 E701                       	dc.b	smpsNoAttack, $01
0008AA1B E10F                       	smpsAlterNote       $0F
0008AA1D E701                       	dc.b	smpsNoAttack, $01
0008AA1F E109                       	smpsAlterNote       $09
0008AA21 E701                       	dc.b	smpsNoAttack, $01
0008AA23 E108                       	smpsAlterNote       $08
0008AA25 E701                       	dc.b	smpsNoAttack, $01
0008AA27 E10C                       	smpsAlterNote       $0C
0008AA29 E701                       	dc.b	smpsNoAttack, $01
0008AA2B E112                       	smpsAlterNote       $12
0008AA2D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA31 E10F                       	smpsAlterNote       $0F
0008AA33 E701                       	dc.b	smpsNoAttack, $01
0008AA35 E109                       	smpsAlterNote       $09
0008AA37 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA3B E10F                       	smpsAlterNote       $0F
0008AA3D E701                       	dc.b	smpsNoAttack, $01
0008AA3F E113                       	smpsAlterNote       $13
0008AA41 E701                       	dc.b	smpsNoAttack, $01
0008AA43 E112                       	smpsAlterNote       $12
0008AA45 E701                       	dc.b	smpsNoAttack, $01
0008AA47 E10C                       	smpsAlterNote       $0C
0008AA49 E701                       	dc.b	smpsNoAttack, $01
0008AA4B E108                       	smpsAlterNote       $08
0008AA4D E701                       	dc.b	smpsNoAttack, $01
0008AA4F E10C                       	smpsAlterNote       $0C
0008AA51 E701                       	dc.b	smpsNoAttack, $01
0008AA53 E10F                       	smpsAlterNote       $0F
0008AA55 E701                       	dc.b	smpsNoAttack, $01
0008AA57 E113                       	smpsAlterNote       $13
0008AA59 E701                       	dc.b	smpsNoAttack, $01
0008AA5B E10F                       	smpsAlterNote       $0F
0008AA5D E701                       	dc.b	smpsNoAttack, $01
0008AA5F E109                       	smpsAlterNote       $09
0008AA61 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008AA65 E10F                       	smpsAlterNote       $0F
0008AA67 C60D                       	dc.b	nA5, $0D
0008AA69 E109                       	smpsAlterNote       $09
0008AA6B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA6F E10C                       	smpsAlterNote       $0C
0008AA71 E701                       	dc.b	smpsNoAttack, $01
0008AA73 E112                       	smpsAlterNote       $12
0008AA75 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA79 E10C                       	smpsAlterNote       $0C
0008AA7B E701                       	dc.b	smpsNoAttack, $01
0008AA7D E109                       	smpsAlterNote       $09
0008AA7F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA83 E10F                       	smpsAlterNote       $0F
0008AA85 E701                       	dc.b	smpsNoAttack, $01
0008AA87 E113                       	smpsAlterNote       $13
0008AA89 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008AA8F E10D                       	smpsAlterNote       $0D
0008AA91 C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
0008AA99 E10C                       	smpsAlterNote       $0C
0008AA9B C103 800E                  	dc.b	nE5, $03, nRst, $0E
0008AAA1 E6FF                       	smpsAlterVol        $FF
0008AAA3 E10B                       	smpsAlterNote       $0B
0008AAA5 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008AAA9 E10C                       	smpsAlterNote       $0C
0008AAAB C103                       	dc.b	nE5, $03
0008AAAD E10D                       	smpsAlterNote       $0D
0008AAAF C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0008AAB9 E10B                       	smpsAlterNote       $0B
0008AABB BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
0008AABF E107                       	smpsAlterNote       $07
0008AAC1 E701                       	dc.b	smpsNoAttack, $01
0008AAC3 E104                       	smpsAlterNote       $04
0008AAC5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AAC9 E10A                       	smpsAlterNote       $0A
0008AACB E701                       	dc.b	smpsNoAttack, $01
0008AACD E10D                       	smpsAlterNote       $0D
0008AACF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AAD3 E107                       	smpsAlterNote       $07
0008AAD5 E701                       	dc.b	smpsNoAttack, $01
0008AAD7 E104                       	smpsAlterNote       $04
0008AAD9 8001                       	dc.b	nRst, $01
0008AADB E110                       	smpsAlterNote       $10
0008AADD C703                       	dc.b	nBb5, $03
0008AADF E10F                       	smpsAlterNote       $0F
0008AAE1 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008AAE5 E10D                       	smpsAlterNote       $0D
0008AAE7 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0008AAEB E10C                       	smpsAlterNote       $0C
0008AAED E701                       	dc.b	smpsNoAttack, $01
0008AAEF E108                       	smpsAlterNote       $08
0008AAF1 E701                       	dc.b	smpsNoAttack, $01
0008AAF3 E109                       	smpsAlterNote       $09
0008AAF5 E701                       	dc.b	smpsNoAttack, $01
0008AAF7 E10F                       	smpsAlterNote       $0F
0008AAF9 E701                       	dc.b	smpsNoAttack, $01
0008AAFB E113                       	smpsAlterNote       $13
0008AAFD E701                       	dc.b	smpsNoAttack, $01
0008AAFF E10F                       	smpsAlterNote       $0F
0008AB01 E701                       	dc.b	smpsNoAttack, $01
0008AB03 E10C                       	smpsAlterNote       $0C
0008AB05 E701                       	dc.b	smpsNoAttack, $01
0008AB07 E108                       	smpsAlterNote       $08
0008AB09 E701                       	dc.b	smpsNoAttack, $01
0008AB0B E10C                       	smpsAlterNote       $0C
0008AB0D E701                       	dc.b	smpsNoAttack, $01
0008AB0F E112                       	smpsAlterNote       $12
0008AB11 E701                       	dc.b	smpsNoAttack, $01
0008AB13 E113                       	smpsAlterNote       $13
0008AB15 E701                       	dc.b	smpsNoAttack, $01
0008AB17 E10F                       	smpsAlterNote       $0F
0008AB19 E701                       	dc.b	smpsNoAttack, $01
0008AB1B E109                       	smpsAlterNote       $09
0008AB1D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB21 E10C                       	smpsAlterNote       $0C
0008AB23 E701                       	dc.b	smpsNoAttack, $01
0008AB25 E112                       	smpsAlterNote       $12
0008AB27 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB2B E10C                       	smpsAlterNote       $0C
0008AB2D E701                       	dc.b	smpsNoAttack, $01
0008AB2F E109                       	smpsAlterNote       $09
0008AB31 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB35 E10F                       	smpsAlterNote       $0F
0008AB37 E701                       	dc.b	smpsNoAttack, $01
0008AB39 E113                       	smpsAlterNote       $13
0008AB3B E701                       	dc.b	smpsNoAttack, $01
0008AB3D E112                       	smpsAlterNote       $12
0008AB3F E701                       	dc.b	smpsNoAttack, $01
0008AB41 E10C                       	smpsAlterNote       $0C
0008AB43 E701                       	dc.b	smpsNoAttack, $01
0008AB45 E108                       	smpsAlterNote       $08
0008AB47 E701                       	dc.b	smpsNoAttack, $01
0008AB49 E10C                       	smpsAlterNote       $0C
0008AB4B E701                       	dc.b	smpsNoAttack, $01
0008AB4D E10F                       	smpsAlterNote       $0F
0008AB4F E701                       	dc.b	smpsNoAttack, $01
0008AB51 E113                       	smpsAlterNote       $13
0008AB53 E701                       	dc.b	smpsNoAttack, $01
0008AB55 E10F                       	smpsAlterNote       $0F
0008AB57 BA03 8001                  	dc.b	nA4, $03, nRst, $01
0008AB5B E110                       	smpsAlterNote       $10
0008AB5D BB03                       	dc.b	nBb4, $03
0008AB5F E10F                       	smpsAlterNote       $0F
0008AB61 BA06 8001                  	dc.b	nA4, $06, nRst, $01
0008AB65 E10B                       	smpsAlterNote       $0B
0008AB67 BF03                       	dc.b	nD5, $03
0008AB69 E10C                       	smpsAlterNote       $0C
0008AB6B C103 8001                  	dc.b	nE5, $03, nRst, $01
0008AB6F E10D                       	smpsAlterNote       $0D
0008AB71 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008AB7B E10B                       	smpsAlterNote       $0B
0008AB7D BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008AB89 E110                       	smpsAlterNote       $10
0008AB8B C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008AB8F E10F                       	smpsAlterNote       $0F
0008AB91 C604                       	dc.b	nA5, $04
0008AB93 E10D                       	smpsAlterNote       $0D
0008AB95 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008AB9B E109                       	smpsAlterNote       $09
0008AB9D E701                       	dc.b	smpsNoAttack, $01
0008AB9F E108                       	smpsAlterNote       $08
0008ABA1 E701                       	dc.b	smpsNoAttack, $01
0008ABA3 E10C                       	smpsAlterNote       $0C
0008ABA5 E701                       	dc.b	smpsNoAttack, $01
0008ABA7 E112                       	smpsAlterNote       $12
0008ABA9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ABAD E10F                       	smpsAlterNote       $0F
0008ABAF E701                       	dc.b	smpsNoAttack, $01
0008ABB1 E109                       	smpsAlterNote       $09
0008ABB3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ABB7 E10F                       	smpsAlterNote       $0F
0008ABB9 E701                       	dc.b	smpsNoAttack, $01
0008ABBB E112                       	smpsAlterNote       $12
0008ABBD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ABC1 E10C                       	smpsAlterNote       $0C
0008ABC3 E701                       	dc.b	smpsNoAttack, $01
0008ABC5 E108                       	smpsAlterNote       $08
0008ABC7 E701                       	dc.b	smpsNoAttack, $01
0008ABC9 E109                       	smpsAlterNote       $09
0008ABCB E701                       	dc.b	smpsNoAttack, $01
0008ABCD E10F                       	smpsAlterNote       $0F
0008ABCF E701                       	dc.b	smpsNoAttack, $01
0008ABD1 E113                       	smpsAlterNote       $13
0008ABD3 E701                       	dc.b	smpsNoAttack, $01
0008ABD5 E10F                       	smpsAlterNote       $0F
0008ABD7 E701                       	dc.b	smpsNoAttack, $01
0008ABD9 E10C                       	smpsAlterNote       $0C
0008ABDB E701                       	dc.b	smpsNoAttack, $01
0008ABDD E108                       	smpsAlterNote       $08
0008ABDF E701                       	dc.b	smpsNoAttack, $01
0008ABE1 E10C                       	smpsAlterNote       $0C
0008ABE3 E701                       	dc.b	smpsNoAttack, $01
0008ABE5 E112                       	smpsAlterNote       $12
0008ABE7 E701                       	dc.b	smpsNoAttack, $01
0008ABE9 E113                       	smpsAlterNote       $13
0008ABEB E701                       	dc.b	smpsNoAttack, $01
0008ABED E10F                       	smpsAlterNote       $0F
0008ABEF E701                       	dc.b	smpsNoAttack, $01
0008ABF1 E109                       	smpsAlterNote       $09
0008ABF3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ABF7 E10C                       	smpsAlterNote       $0C
0008ABF9 E701                       	dc.b	smpsNoAttack, $01
0008ABFB E112                       	smpsAlterNote       $12
0008ABFD E701                       	dc.b	smpsNoAttack, $01
0008ABFF E113                       	smpsAlterNote       $13
0008AC01 8001                       	dc.b	nRst, $01
0008AC03 E10F                       	smpsAlterNote       $0F
0008AC05 C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
0008AC11 C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
0008AC19 E10D                       	smpsAlterNote       $0D
0008AC1B C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008AC21 E10B                       	smpsAlterNote       $0B
0008AC23 BF0D                       	dc.b	nD5, $0D
0008AC25 E108                       	smpsAlterNote       $08
0008AC27 E701                       	dc.b	smpsNoAttack, $01
0008AC29 E104                       	smpsAlterNote       $04
0008AC2B E701                       	dc.b	smpsNoAttack, $01
0008AC2D E105                       	smpsAlterNote       $05
0008AC2F E701                       	dc.b	smpsNoAttack, $01
0008AC31 E10B                       	smpsAlterNote       $0B
0008AC33 E701                       	dc.b	smpsNoAttack, $01
0008AC35 E10F                       	smpsAlterNote       $0F
0008AC37 E701                       	dc.b	smpsNoAttack, $01
0008AC39 E10B                       	smpsAlterNote       $0B
0008AC3B E701                       	dc.b	smpsNoAttack, $01
0008AC3D E108                       	smpsAlterNote       $08
0008AC3F E701                       	dc.b	smpsNoAttack, $01
0008AC41 E104                       	smpsAlterNote       $04
0008AC43 E701                       	dc.b	smpsNoAttack, $01
0008AC45 E108                       	smpsAlterNote       $08
0008AC47 E701                       	dc.b	smpsNoAttack, $01
0008AC49 E10E                       	smpsAlterNote       $0E
0008AC4B E701                       	dc.b	smpsNoAttack, $01
0008AC4D E10F                       	smpsAlterNote       $0F
0008AC4F E701                       	dc.b	smpsNoAttack, $01
0008AC51 E10C                       	smpsAlterNote       $0C
0008AC53 C101                       	dc.b	nE5, $01
0008AC55 E10D                       	smpsAlterNote       $0D
0008AC57 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0008AC5F E10F                       	smpsAlterNote       $0F
0008AC61 C607                       	dc.b	nA5, $07
0008AC63 E10C                       	smpsAlterNote       $0C
0008AC65 CD07                       	dc.b	nE6, $07
0008AC67 E10D                       	smpsAlterNote       $0D
0008AC69 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008AC6D E10C                       	smpsAlterNote       $0C
0008AC6F CD03                       	dc.b	nE6, $03
0008AC71 E10A                       	smpsAlterNote       $0A
0008AC73 C903 8001                  	dc.b	nC6, $03, nRst, $01
0008AC77 E10D                       	smpsAlterNote       $0D
0008AC79 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0008AC7F E10A                       	smpsAlterNote       $0A
0008AC81 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AC85 E110                       	smpsAlterNote       $10
0008AC87 E701                       	dc.b	smpsNoAttack, $01
0008AC89 E114                       	smpsAlterNote       $14
0008AC8B E701                       	dc.b	smpsNoAttack, $01
0008AC8D E113                       	smpsAlterNote       $13
0008AC8F E701                       	dc.b	smpsNoAttack, $01
0008AC91 E10D                       	smpsAlterNote       $0D
0008AC93 E701                       	dc.b	smpsNoAttack, $01
0008AC95 E109                       	smpsAlterNote       $09
0008AC97 E701                       	dc.b	smpsNoAttack, $01
0008AC99 E10D                       	smpsAlterNote       $0D
0008AC9B E701                       	dc.b	smpsNoAttack, $01
0008AC9D E110                       	smpsAlterNote       $10
0008AC9F E701                       	dc.b	smpsNoAttack, $01
0008ACA1 E114                       	smpsAlterNote       $14
0008ACA3 E701                       	dc.b	smpsNoAttack, $01
0008ACA5 E10F                       	smpsAlterNote       $0F
0008ACA7 C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
0008ACAB E10C                       	smpsAlterNote       $0C
0008ACAD E701                       	dc.b	smpsNoAttack, $01
0008ACAF E108                       	smpsAlterNote       $08
0008ACB1 E701                       	dc.b	smpsNoAttack, $01
0008ACB3 E10C                       	smpsAlterNote       $0C
0008ACB5 E701                       	dc.b	smpsNoAttack, $01
0008ACB7 E10F                       	smpsAlterNote       $0F
0008ACB9 E701                       	dc.b	smpsNoAttack, $01
0008ACBB E113                       	smpsAlterNote       $13
0008ACBD E701                       	dc.b	smpsNoAttack, $01
0008ACBF E10F                       	smpsAlterNote       $0F
0008ACC1 E701                       	dc.b	smpsNoAttack, $01
0008ACC3 E109                       	smpsAlterNote       $09
0008ACC5 E701                       	dc.b	smpsNoAttack, $01
0008ACC7 E108                       	smpsAlterNote       $08
0008ACC9 E701                       	dc.b	smpsNoAttack, $01
0008ACCB E10C                       	smpsAlterNote       $0C
0008ACCD E701                       	dc.b	smpsNoAttack, $01
0008ACCF E112                       	smpsAlterNote       $12
0008ACD1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ACD5 E10F                       	smpsAlterNote       $0F
0008ACD7 E701                       	dc.b	smpsNoAttack, $01
0008ACD9 E109                       	smpsAlterNote       $09
0008ACDB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ACDF E10F                       	smpsAlterNote       $0F
0008ACE1 E701                       	dc.b	smpsNoAttack, $01
0008ACE3 E112                       	smpsAlterNote       $12
0008ACE5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ACE9 E10C                       	smpsAlterNote       $0C
0008ACEB E701                       	dc.b	smpsNoAttack, $01
0008ACED E108                       	smpsAlterNote       $08
0008ACEF E701                       	dc.b	smpsNoAttack, $01
0008ACF1 E109                       	smpsAlterNote       $09
0008ACF3 E701                       	dc.b	smpsNoAttack, $01
0008ACF5 E10F                       	smpsAlterNote       $0F
0008ACF7 E701                       	dc.b	smpsNoAttack, $01
0008ACF9 E113                       	smpsAlterNote       $13
0008ACFB E701                       	dc.b	smpsNoAttack, $01
0008ACFD E10F                       	smpsAlterNote       $0F
0008ACFF E701                       	dc.b	smpsNoAttack, $01
0008AD01 E10C                       	smpsAlterNote       $0C
0008AD03 E701                       	dc.b	smpsNoAttack, $01
0008AD05 E108                       	smpsAlterNote       $08
0008AD07 E701                       	dc.b	smpsNoAttack, $01
0008AD09 E10C                       	smpsAlterNote       $0C
0008AD0B E701                       	dc.b	smpsNoAttack, $01
0008AD0D E112                       	smpsAlterNote       $12
0008AD0F E701                       	dc.b	smpsNoAttack, $01
0008AD11 E113                       	smpsAlterNote       $13
0008AD13 E701                       	dc.b	smpsNoAttack, $01
0008AD15 E10F                       	smpsAlterNote       $0F
0008AD17 E701                       	dc.b	smpsNoAttack, $01
0008AD19 E109                       	smpsAlterNote       $09
0008AD1B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD1F E10C                       	smpsAlterNote       $0C
0008AD21 E701                       	dc.b	smpsNoAttack, $01
0008AD23 E112                       	smpsAlterNote       $12
0008AD25 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD29 E10C                       	smpsAlterNote       $0C
0008AD2B E701                       	dc.b	smpsNoAttack, $01
0008AD2D E109                       	smpsAlterNote       $09
0008AD2F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD33 E10F                       	smpsAlterNote       $0F
0008AD35 E701                       	dc.b	smpsNoAttack, $01
0008AD37 E113                       	smpsAlterNote       $13
0008AD39 E701                       	dc.b	smpsNoAttack, $01
0008AD3B E112                       	smpsAlterNote       $12
0008AD3D E701                       	dc.b	smpsNoAttack, $01
0008AD3F E10C                       	smpsAlterNote       $0C
0008AD41 E701                       	dc.b	smpsNoAttack, $01
0008AD43 E109                       	smpsAlterNote       $09
0008AD45 8001                       	dc.b	nRst, $01
0008AD47 E10F                       	smpsAlterNote       $0F
0008AD49 C60D                       	dc.b	nA5, $0D
0008AD4B E10C                       	smpsAlterNote       $0C
0008AD4D E701                       	dc.b	smpsNoAttack, $01
0008AD4F E108                       	smpsAlterNote       $08
0008AD51 E701                       	dc.b	smpsNoAttack, $01
0008AD53 E10C                       	smpsAlterNote       $0C
0008AD55 E701                       	dc.b	smpsNoAttack, $01
0008AD57 E112                       	smpsAlterNote       $12
0008AD59 E701                       	dc.b	smpsNoAttack, $01
0008AD5B E113                       	smpsAlterNote       $13
0008AD5D E701                       	dc.b	smpsNoAttack, $01
0008AD5F E10F                       	smpsAlterNote       $0F
0008AD61 E701                       	dc.b	smpsNoAttack, $01
0008AD63 E109                       	smpsAlterNote       $09
0008AD65 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD69 E10C                       	smpsAlterNote       $0C
0008AD6B E701                       	dc.b	smpsNoAttack, $01
0008AD6D E112                       	smpsAlterNote       $12
0008AD6F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD73 E10C                       	smpsAlterNote       $0C
0008AD75 E701                       	dc.b	smpsNoAttack, $01
0008AD77 E109                       	smpsAlterNote       $09
0008AD79 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD7D E10F                       	smpsAlterNote       $0F
0008AD7F E701                       	dc.b	smpsNoAttack, $01
0008AD81 E113                       	smpsAlterNote       $13
0008AD83 E701                       	dc.b	smpsNoAttack, $01
0008AD85 E112                       	smpsAlterNote       $12
0008AD87 E701                       	dc.b	smpsNoAttack, $01
0008AD89 E10C                       	smpsAlterNote       $0C
0008AD8B E701                       	dc.b	smpsNoAttack, $01
0008AD8D E108                       	smpsAlterNote       $08
0008AD8F E701                       	dc.b	smpsNoAttack, $01
0008AD91 E10C                       	smpsAlterNote       $0C
0008AD93 E701                       	dc.b	smpsNoAttack, $01
0008AD95 E10F                       	smpsAlterNote       $0F
0008AD97 E701                       	dc.b	smpsNoAttack, $01
0008AD99 E113                       	smpsAlterNote       $13
0008AD9B E701                       	dc.b	smpsNoAttack, $01
0008AD9D E10F                       	smpsAlterNote       $0F
0008AD9F E701                       	dc.b	smpsNoAttack, $01
0008ADA1 E109                       	smpsAlterNote       $09
0008ADA3 E701                       	dc.b	smpsNoAttack, $01
0008ADA5 E108                       	smpsAlterNote       $08
0008ADA7 E701                       	dc.b	smpsNoAttack, $01
0008ADA9 E10C                       	smpsAlterNote       $0C
0008ADAB E701                       	dc.b	smpsNoAttack, $01
0008ADAD E112                       	smpsAlterNote       $12
0008ADAF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ADB3 E10F                       	smpsAlterNote       $0F
0008ADB5 E701                       	dc.b	smpsNoAttack, $01
0008ADB7 E109                       	smpsAlterNote       $09
0008ADB9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ADBD E10F                       	smpsAlterNote       $0F
0008ADBF E701                       	dc.b	smpsNoAttack, $01
0008ADC1 E112                       	smpsAlterNote       $12
0008ADC3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ADC7 E10C                       	smpsAlterNote       $0C
0008ADC9 E701                       	dc.b	smpsNoAttack, $01
0008ADCB E108                       	smpsAlterNote       $08
0008ADCD E701                       	dc.b	smpsNoAttack, $01
0008ADCF E10C                       	smpsAlterNote       $0C
0008ADD1 E701                       	dc.b	smpsNoAttack, $01
0008ADD3 E10F                       	smpsAlterNote       $0F
0008ADD5 E701                       	dc.b	smpsNoAttack, $01
0008ADD7 E113                       	smpsAlterNote       $13
0008ADD9 E701                       	dc.b	smpsNoAttack, $01
0008ADDB E10F                       	smpsAlterNote       $0F
0008ADDD E701                       	dc.b	smpsNoAttack, $01
0008ADDF E109                       	smpsAlterNote       $09
0008ADE1 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008ADE7 E601                       	smpsAlterVol        $01
0008ADE9 E10F                       	smpsAlterNote       $0F
0008ADEB C604                       	dc.b	nA5, $04
0008ADED E10D                       	smpsAlterNote       $0D
0008ADEF C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008ADF5 E10B                       	smpsAlterNote       $0B
0008ADF7 BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
0008ADFF E10F                       	smpsAlterNote       $0F
0008AE01 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008AE05 E10D                       	smpsAlterNote       $0D
0008AE07 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008AE0D E10C                       	smpsAlterNote       $0C
0008AE0F C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
0008AE15 E10A                       	smpsAlterNote       $0A
0008AE17 C904 8001                  	dc.b	nC6, $04, nRst, $01
0008AE1B E110                       	smpsAlterNote       $10
0008AE1D C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008AE21 E10F                       	smpsAlterNote       $0F
0008AE23 C604                       	dc.b	nA5, $04
0008AE25 E10D                       	smpsAlterNote       $0D
0008AE27 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0008AE33 E109                       	smpsAlterNote       $09
0008AE35 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AE39 E10F                       	smpsAlterNote       $0F
0008AE3B E701                       	dc.b	smpsNoAttack, $01
0008AE3D E112                       	smpsAlterNote       $12
0008AE3F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AE43 E10C                       	smpsAlterNote       $0C
0008AE45 E701                       	dc.b	smpsNoAttack, $01
0008AE47 E108                       	smpsAlterNote       $08
0008AE49 E701                       	dc.b	smpsNoAttack, $01
0008AE4B E10C                       	smpsAlterNote       $0C
0008AE4D E701                       	dc.b	smpsNoAttack, $01
0008AE4F E10F                       	smpsAlterNote       $0F
0008AE51 E701                       	dc.b	smpsNoAttack, $01
0008AE53 E113                       	smpsAlterNote       $13
0008AE55 E701                       	dc.b	smpsNoAttack, $01
0008AE57 E10D                       	smpsAlterNote       $0D
0008AE59 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008AE5F E10C                       	smpsAlterNote       $0C
0008AE61 C10D                       	dc.b	nE5, $0D
0008AE63 E109                       	smpsAlterNote       $09
0008AE65 E701                       	dc.b	smpsNoAttack, $01
0008AE67 E105                       	smpsAlterNote       $05
0008AE69 E701                       	dc.b	smpsNoAttack, $01
0008AE6B E106                       	smpsAlterNote       $06
0008AE6D E701                       	dc.b	smpsNoAttack, $01
0008AE6F E10C                       	smpsAlterNote       $0C
0008AE71 E701                       	dc.b	smpsNoAttack, $01
0008AE73 E110                       	smpsAlterNote       $10
0008AE75 E701                       	dc.b	smpsNoAttack, $01
0008AE77 E10C                       	smpsAlterNote       $0C
0008AE79 E701                       	dc.b	smpsNoAttack, $01
0008AE7B E109                       	smpsAlterNote       $09
0008AE7D E701                       	dc.b	smpsNoAttack, $01
0008AE7F E105                       	smpsAlterNote       $05
0008AE81 E701                       	dc.b	smpsNoAttack, $01
0008AE83 E109                       	smpsAlterNote       $09
0008AE85 E701                       	dc.b	smpsNoAttack, $01
0008AE87 E10F                       	smpsAlterNote       $0F
0008AE89 E701                       	dc.b	smpsNoAttack, $01
0008AE8B E110                       	smpsAlterNote       $10
0008AE8D E701                       	dc.b	smpsNoAttack, $01
0008AE8F E10C                       	smpsAlterNote       $0C
0008AE91 E701                       	dc.b	smpsNoAttack, $01
0008AE93 E106                       	smpsAlterNote       $06
0008AE95 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AE99 E109                       	smpsAlterNote       $09
0008AE9B E701                       	dc.b	smpsNoAttack, $01
0008AE9D E10F                       	smpsAlterNote       $0F
0008AE9F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AEA3 E109                       	smpsAlterNote       $09
0008AEA5 E701                       	dc.b	smpsNoAttack, $01
0008AEA7 E106                       	smpsAlterNote       $06
0008AEA9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AEAD E10C                       	smpsAlterNote       $0C
0008AEAF E701                       	dc.b	smpsNoAttack, $01
0008AEB1 E110                       	smpsAlterNote       $10
0008AEB3 E701                       	dc.b	smpsNoAttack, $01
0008AEB5 E10F                       	smpsAlterNote       $0F
0008AEB7 E701                       	dc.b	smpsNoAttack, $01
0008AEB9 E109                       	smpsAlterNote       $09
0008AEBB E701                       	dc.b	smpsNoAttack, $01
0008AEBD E105                       	smpsAlterNote       $05
0008AEBF E701                       	dc.b	smpsNoAttack, $01
0008AEC1 E109                       	smpsAlterNote       $09
0008AEC3 E701                       	dc.b	smpsNoAttack, $01
0008AEC5 E10C                       	smpsAlterNote       $0C
0008AEC7 E701                       	dc.b	smpsNoAttack, $01
0008AEC9 E110                       	smpsAlterNote       $10
0008AECB E701                       	dc.b	smpsNoAttack, $01
0008AECD E10C                       	smpsAlterNote       $0C
0008AECF E701                       	dc.b	smpsNoAttack, $01
0008AED1 E106                       	smpsAlterNote       $06
0008AED3 E701                       	dc.b	smpsNoAttack, $01
0008AED5 E105                       	smpsAlterNote       $05
0008AED7 E701                       	dc.b	smpsNoAttack, $01
0008AED9 E109                       	smpsAlterNote       $09
0008AEDB E701                       	dc.b	smpsNoAttack, $01
0008AEDD E10F                       	smpsAlterNote       $0F
0008AEDF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AEE3 E10C                       	smpsAlterNote       $0C
0008AEE5 E701                       	dc.b	smpsNoAttack, $01
0008AEE7 E106                       	smpsAlterNote       $06
0008AEE9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AEED E10C                       	smpsAlterNote       $0C
0008AEEF E701                       	dc.b	smpsNoAttack, $01
0008AEF1 E10F                       	smpsAlterNote       $0F
0008AEF3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AEF7 E109                       	smpsAlterNote       $09
0008AEF9 E701                       	dc.b	smpsNoAttack, $01
0008AEFB E105                       	smpsAlterNote       $05
0008AEFD E701                       	dc.b	smpsNoAttack, $01
0008AEFF E106                       	smpsAlterNote       $06
0008AF01 E701                       	dc.b	smpsNoAttack, $01
0008AF03 E10C                       	smpsAlterNote       $0C
0008AF05 E701                       	dc.b	smpsNoAttack, $01
0008AF07 E110                       	smpsAlterNote       $10
0008AF09 E701                       	dc.b	smpsNoAttack, $01
0008AF0B E10C                       	smpsAlterNote       $0C
0008AF0D E701                       	dc.b	smpsNoAttack, $01
0008AF0F E109                       	smpsAlterNote       $09
0008AF11 E701                       	dc.b	smpsNoAttack, $01
0008AF13 E105                       	smpsAlterNote       $05
0008AF15 E701                       	dc.b	smpsNoAttack, $01
0008AF17 E109                       	smpsAlterNote       $09
0008AF19 E701                       	dc.b	smpsNoAttack, $01
0008AF1B E10F                       	smpsAlterNote       $0F
0008AF1D E701                       	dc.b	smpsNoAttack, $01
0008AF1F E110                       	smpsAlterNote       $10
0008AF21 E701                       	dc.b	smpsNoAttack, $01
0008AF23 E10C                       	smpsAlterNote       $0C
0008AF25 E701                       	dc.b	smpsNoAttack, $01
0008AF27 E106                       	smpsAlterNote       $06
0008AF29 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF2D E109                       	smpsAlterNote       $09
0008AF2F E701                       	dc.b	smpsNoAttack, $01
0008AF31 E10F                       	smpsAlterNote       $0F
0008AF33 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF37 E109                       	smpsAlterNote       $09
0008AF39 E701                       	dc.b	smpsNoAttack, $01
0008AF3B E106                       	smpsAlterNote       $06
0008AF3D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF41 E10C                       	smpsAlterNote       $0C
0008AF43 E701                       	dc.b	smpsNoAttack, $01
0008AF45 E110                       	smpsAlterNote       $10
0008AF47 E701                       	dc.b	smpsNoAttack, $01
0008AF49 E10F                       	smpsAlterNote       $0F
0008AF4B E701                       	dc.b	smpsNoAttack, $01
0008AF4D E109                       	smpsAlterNote       $09
0008AF4F E701                       	dc.b	smpsNoAttack, $01
0008AF51 E105                       	smpsAlterNote       $05
0008AF53 E701                       	dc.b	smpsNoAttack, $01
0008AF55 E109                       	smpsAlterNote       $09
0008AF57 E701                       	dc.b	smpsNoAttack, $01
0008AF59 E10C                       	smpsAlterNote       $0C
0008AF5B E701                       	dc.b	smpsNoAttack, $01
0008AF5D E110                       	smpsAlterNote       $10
0008AF5F E701                       	dc.b	smpsNoAttack, $01
0008AF61 E10C                       	smpsAlterNote       $0C
0008AF63 E701                       	dc.b	smpsNoAttack, $01
0008AF65 E106                       	smpsAlterNote       $06
0008AF67 E701                       	dc.b	smpsNoAttack, $01
0008AF69 E105                       	smpsAlterNote       $05
0008AF6B E701                       	dc.b	smpsNoAttack, $01
0008AF6D E109                       	smpsAlterNote       $09
0008AF6F E701                       	dc.b	smpsNoAttack, $01
0008AF71 E10F                       	smpsAlterNote       $0F
0008AF73 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF77 E109                       	smpsAlterNote       $09
0008AF79 E701                       	dc.b	smpsNoAttack, $01
0008AF7B E106                       	smpsAlterNote       $06
0008AF7D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF81 E10C                       	smpsAlterNote       $0C
0008AF83 E701                       	dc.b	smpsNoAttack, $01
0008AF85 E110                       	smpsAlterNote       $10
0008AF87 E701                       	dc.b	smpsNoAttack, $01
0008AF89 E10F                       	smpsAlterNote       $0F
0008AF8B E701                       	dc.b	smpsNoAttack, $01
0008AF8D E109                       	smpsAlterNote       $09
0008AF8F E701                       	dc.b	smpsNoAttack, $01
0008AF91 E105                       	smpsAlterNote       $05
0008AF93 E701                       	dc.b	smpsNoAttack, $01
0008AF95 E109                       	smpsAlterNote       $09
0008AF97 E701                       	dc.b	smpsNoAttack, $01
0008AF99 E10C                       	smpsAlterNote       $0C
0008AF9B E701                       	dc.b	smpsNoAttack, $01
0008AF9D E110                       	smpsAlterNote       $10
0008AF9F E701                       	dc.b	smpsNoAttack, $01
0008AFA1 E10C                       	smpsAlterNote       $0C
0008AFA3 E701                       	dc.b	smpsNoAttack, $01
0008AFA5 E106                       	smpsAlterNote       $06
0008AFA7 E701                       	dc.b	smpsNoAttack, $01
0008AFA9 E105                       	smpsAlterNote       $05
0008AFAB E701                       	dc.b	smpsNoAttack, $01
0008AFAD E109                       	smpsAlterNote       $09
0008AFAF E701                       	dc.b	smpsNoAttack, $01
0008AFB1 E10F                       	smpsAlterNote       $0F
0008AFB3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AFB7 E10C                       	smpsAlterNote       $0C
0008AFB9 E701                       	dc.b	smpsNoAttack, $01
0008AFBB E106                       	smpsAlterNote       $06
0008AFBD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AFC1 E10C                       	smpsAlterNote       $0C
0008AFC3 E701                       	dc.b	smpsNoAttack, $01
0008AFC5 E10F                       	smpsAlterNote       $0F
0008AFC7 E701                       	dc.b	smpsNoAttack, $01
0008AFC9 E110                       	smpsAlterNote       $10
0008AFCB 8001                       	dc.b	nRst, $01
0008AFCD E10F                       	smpsAlterNote       $0F
0008AFCF C604                       	dc.b	nA5, $04
0008AFD1 E10D                       	smpsAlterNote       $0D
0008AFD3 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008AFD9 E10B                       	smpsAlterNote       $0B
0008AFDB BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
0008AFE1 E10F                       	smpsAlterNote       $0F
0008AFE3 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008AFE7 E10D                       	smpsAlterNote       $0D
0008AFE9 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008AFEF E10C                       	smpsAlterNote       $0C
0008AFF1 C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
0008AFF7 E10A                       	smpsAlterNote       $0A
0008AFF9 C904                       	dc.b	nC6, $04
0008AFFB E110                       	smpsAlterNote       $10
0008AFFD C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008B001 E10F                       	smpsAlterNote       $0F
0008B003 C604                       	dc.b	nA5, $04
0008B005 E10D                       	smpsAlterNote       $0D
0008B007 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0008B013 E109                       	smpsAlterNote       $09
0008B015 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B019 E10F                       	smpsAlterNote       $0F
0008B01B E701                       	dc.b	smpsNoAttack, $01
0008B01D E112                       	smpsAlterNote       $12
0008B01F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B023 E10C                       	smpsAlterNote       $0C
0008B025 E701                       	dc.b	smpsNoAttack, $01
0008B027 E108                       	smpsAlterNote       $08
0008B029 E701                       	dc.b	smpsNoAttack, $01
0008B02B E109                       	smpsAlterNote       $09
0008B02D E701                       	dc.b	smpsNoAttack, $01
0008B02F E10F                       	smpsAlterNote       $0F
0008B031 E701                       	dc.b	smpsNoAttack, $01
0008B033 E113                       	smpsAlterNote       $13
0008B035 E701                       	dc.b	smpsNoAttack, $01
0008B037 E10D                       	smpsAlterNote       $0D
0008B039 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008B03F E10C                       	smpsAlterNote       $0C
0008B041 C10D                       	dc.b	nE5, $0D
0008B043 E109                       	smpsAlterNote       $09
0008B045 E701                       	dc.b	smpsNoAttack, $01
0008B047 E106                       	smpsAlterNote       $06
0008B049 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B04D E10C                       	smpsAlterNote       $0C
0008B04F E701                       	dc.b	smpsNoAttack, $01
0008B051 E110                       	smpsAlterNote       $10
0008B053 E701                       	dc.b	smpsNoAttack, $01
0008B055 E10F                       	smpsAlterNote       $0F
0008B057 E701                       	dc.b	smpsNoAttack, $01
0008B059 E109                       	smpsAlterNote       $09
0008B05B E701                       	dc.b	smpsNoAttack, $01
0008B05D E105                       	smpsAlterNote       $05
0008B05F E701                       	dc.b	smpsNoAttack, $01
0008B061 E109                       	smpsAlterNote       $09
0008B063 E701                       	dc.b	smpsNoAttack, $01
0008B065 E10C                       	smpsAlterNote       $0C
0008B067 E701                       	dc.b	smpsNoAttack, $01
0008B069 E110                       	smpsAlterNote       $10
0008B06B E701                       	dc.b	smpsNoAttack, $01
0008B06D E10C                       	smpsAlterNote       $0C
0008B06F E701                       	dc.b	smpsNoAttack, $01
0008B071 E106                       	smpsAlterNote       $06
0008B073 E701                       	dc.b	smpsNoAttack, $01
0008B075 E105                       	smpsAlterNote       $05
0008B077 E701                       	dc.b	smpsNoAttack, $01
0008B079 E109                       	smpsAlterNote       $09
0008B07B E701                       	dc.b	smpsNoAttack, $01
0008B07D E10F                       	smpsAlterNote       $0F
0008B07F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B083 E10C                       	smpsAlterNote       $0C
0008B085 E701                       	dc.b	smpsNoAttack, $01
0008B087 E106                       	smpsAlterNote       $06
0008B089 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B08D E10C                       	smpsAlterNote       $0C
0008B08F E701                       	dc.b	smpsNoAttack, $01
0008B091 E10F                       	smpsAlterNote       $0F
0008B093 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B097 E109                       	smpsAlterNote       $09
0008B099 E701                       	dc.b	smpsNoAttack, $01
0008B09B E105                       	smpsAlterNote       $05
0008B09D E701                       	dc.b	smpsNoAttack, $01
0008B09F E106                       	smpsAlterNote       $06
0008B0A1 E701                       	dc.b	smpsNoAttack, $01
0008B0A3 E10C                       	smpsAlterNote       $0C
0008B0A5 E701                       	dc.b	smpsNoAttack, $01
0008B0A7 E110                       	smpsAlterNote       $10
0008B0A9 E701                       	dc.b	smpsNoAttack, $01
0008B0AB E10C                       	smpsAlterNote       $0C
0008B0AD E701                       	dc.b	smpsNoAttack, $01
0008B0AF E109                       	smpsAlterNote       $09
0008B0B1 E701                       	dc.b	smpsNoAttack, $01
0008B0B3 E105                       	smpsAlterNote       $05
0008B0B5 E701                       	dc.b	smpsNoAttack, $01
0008B0B7 E109                       	smpsAlterNote       $09
0008B0B9 E701                       	dc.b	smpsNoAttack, $01
0008B0BB E10F                       	smpsAlterNote       $0F
0008B0BD E701                       	dc.b	smpsNoAttack, $01
0008B0BF E110                       	smpsAlterNote       $10
0008B0C1 E701                       	dc.b	smpsNoAttack, $01
0008B0C3 E10C                       	smpsAlterNote       $0C
0008B0C5 E701                       	dc.b	smpsNoAttack, $01
0008B0C7 E106                       	smpsAlterNote       $06
0008B0C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B0CD E109                       	smpsAlterNote       $09
0008B0CF E701                       	dc.b	smpsNoAttack, $01
0008B0D1 E10F                       	smpsAlterNote       $0F
0008B0D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B0D7 E109                       	smpsAlterNote       $09
0008B0D9 E701                       	dc.b	smpsNoAttack, $01
0008B0DB E106                       	smpsAlterNote       $06
0008B0DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B0E1 E10C                       	smpsAlterNote       $0C
0008B0E3 E701                       	dc.b	smpsNoAttack, $01
0008B0E5 E110                       	smpsAlterNote       $10
0008B0E7 E701                       	dc.b	smpsNoAttack, $01
0008B0E9 E10F                       	smpsAlterNote       $0F
0008B0EB E701                       	dc.b	smpsNoAttack, $01
0008B0ED E109                       	smpsAlterNote       $09
0008B0EF E701                       	dc.b	smpsNoAttack, $01
0008B0F1 E105                       	smpsAlterNote       $05
0008B0F3 E701                       	dc.b	smpsNoAttack, $01
0008B0F5 E109                       	smpsAlterNote       $09
0008B0F7 E701                       	dc.b	smpsNoAttack, $01
0008B0F9 E10F                       	smpsAlterNote       $0F
0008B0FB E701                       	dc.b	smpsNoAttack, $01
0008B0FD E110                       	smpsAlterNote       $10
0008B0FF E701                       	dc.b	smpsNoAttack, $01
0008B101 E10C                       	smpsAlterNote       $0C
0008B103 E701                       	dc.b	smpsNoAttack, $01
0008B105 E106                       	smpsAlterNote       $06
0008B107 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B10B E109                       	smpsAlterNote       $09
0008B10D E701                       	dc.b	smpsNoAttack, $01
0008B10F E10F                       	smpsAlterNote       $0F
0008B111 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B115 E109                       	smpsAlterNote       $09
0008B117 E701                       	dc.b	smpsNoAttack, $01
0008B119 E106                       	smpsAlterNote       $06
0008B11B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B11F E10C                       	smpsAlterNote       $0C
0008B121 E701                       	dc.b	smpsNoAttack, $01
0008B123 E110                       	smpsAlterNote       $10
0008B125 E701                       	dc.b	smpsNoAttack, $01
0008B127 E10F                       	smpsAlterNote       $0F
0008B129 E701                       	dc.b	smpsNoAttack, $01
0008B12B E109                       	smpsAlterNote       $09
0008B12D E701                       	dc.b	smpsNoAttack, $01
0008B12F E105                       	smpsAlterNote       $05
0008B131 E701                       	dc.b	smpsNoAttack, $01
0008B133 E109                       	smpsAlterNote       $09
0008B135 E701                       	dc.b	smpsNoAttack, $01
0008B137 E10C                       	smpsAlterNote       $0C
0008B139 E701                       	dc.b	smpsNoAttack, $01
0008B13B E110                       	smpsAlterNote       $10
0008B13D E701                       	dc.b	smpsNoAttack, $01
0008B13F E10C                       	smpsAlterNote       $0C
0008B141 E701                       	dc.b	smpsNoAttack, $01
0008B143 E106                       	smpsAlterNote       $06
0008B145 E701                       	dc.b	smpsNoAttack, $01
0008B147 E105                       	smpsAlterNote       $05
0008B149 E701                       	dc.b	smpsNoAttack, $01
0008B14B E109                       	smpsAlterNote       $09
0008B14D E701                       	dc.b	smpsNoAttack, $01
0008B14F E10F                       	smpsAlterNote       $0F
0008B151 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B155 E10C                       	smpsAlterNote       $0C
0008B157 E701                       	dc.b	smpsNoAttack, $01
0008B159 E106                       	smpsAlterNote       $06
0008B15B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B15F E10C                       	smpsAlterNote       $0C
0008B161 E701                       	dc.b	smpsNoAttack, $01
0008B163 E10F                       	smpsAlterNote       $0F
0008B165 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B169 E109                       	smpsAlterNote       $09
0008B16B E701                       	dc.b	smpsNoAttack, $01
0008B16D E105                       	smpsAlterNote       $05
0008B16F E701                       	dc.b	smpsNoAttack, $01
0008B171 E106                       	smpsAlterNote       $06
0008B173 E701                       	dc.b	smpsNoAttack, $01
0008B175 E10C                       	smpsAlterNote       $0C
0008B177 E701                       	dc.b	smpsNoAttack, $01
0008B179 E110                       	smpsAlterNote       $10
0008B17B E701                       	dc.b	smpsNoAttack, $01
0008B17D E10C                       	smpsAlterNote       $0C
0008B17F E701                       	dc.b	smpsNoAttack, $01
0008B181 E109                       	smpsAlterNote       $09
0008B183 E701                       	dc.b	smpsNoAttack, $01
0008B185 E105                       	smpsAlterNote       $05
0008B187 E701                       	dc.b	smpsNoAttack, $01
0008B189 E109                       	smpsAlterNote       $09
0008B18B E701                       	dc.b	smpsNoAttack, $01
0008B18D E10F                       	smpsAlterNote       $0F
0008B18F E701                       	dc.b	smpsNoAttack, $01
0008B191 E110                       	smpsAlterNote       $10
0008B193 E701                       	dc.b	smpsNoAttack, $01
0008B195 E10C                       	smpsAlterNote       $0C
0008B197 E701                       	dc.b	smpsNoAttack, $01
0008B199 E106                       	smpsAlterNote       $06
0008B19B E701                       	dc.b	smpsNoAttack, $01
0008B19D E10B                       	smpsAlterNote       $0B
0008B19F BF02                       	dc.b	nD5, $02
0008B1A1 E10C                       	smpsAlterNote       $0C
0008B1A3 C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
0008B1A9 E109                       	smpsAlterNote       $09
0008B1AB E701                       	dc.b	smpsNoAttack, $01
0008B1AD E105                       	smpsAlterNote       $05
0008B1AF E701                       	dc.b	smpsNoAttack, $01
0008B1B1 E109                       	smpsAlterNote       $09
0008B1B3 E701                       	dc.b	smpsNoAttack, $01
0008B1B5 E10F                       	smpsAlterNote       $0F
0008B1B7 E701                       	dc.b	smpsNoAttack, $01
0008B1B9 E110                       	smpsAlterNote       $10
0008B1BB E701                       	dc.b	smpsNoAttack, $01
0008B1BD E10C                       	smpsAlterNote       $0C
0008B1BF E701                       	dc.b	smpsNoAttack, $01
0008B1C1 E106                       	smpsAlterNote       $06
0008B1C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B1C7 E109                       	smpsAlterNote       $09
0008B1C9 E701                       	dc.b	smpsNoAttack, $01
0008B1CB E10F                       	smpsAlterNote       $0F
0008B1CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B1D1 E109                       	smpsAlterNote       $09
0008B1D3 E701                       	dc.b	smpsNoAttack, $01
0008B1D5 E106                       	smpsAlterNote       $06
0008B1D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B1DB E10C                       	smpsAlterNote       $0C
0008B1DD E701                       	dc.b	smpsNoAttack, $01
0008B1DF E110                       	smpsAlterNote       $10
0008B1E1 E701                       	dc.b	smpsNoAttack, $01
0008B1E3 E10F                       	smpsAlterNote       $0F
0008B1E5 E701                       	dc.b	smpsNoAttack, $01
0008B1E7 E109                       	smpsAlterNote       $09
0008B1E9 E701                       	dc.b	smpsNoAttack, $01
0008B1EB E105                       	smpsAlterNote       $05
0008B1ED E701                       	dc.b	smpsNoAttack, $01
0008B1EF E109                       	smpsAlterNote       $09
0008B1F1 E701                       	dc.b	smpsNoAttack, $01
0008B1F3 E10C                       	smpsAlterNote       $0C
0008B1F5 E701                       	dc.b	smpsNoAttack, $01
0008B1F7 E110                       	smpsAlterNote       $10
0008B1F9 E701                       	dc.b	smpsNoAttack, $01
0008B1FB E10C                       	smpsAlterNote       $0C
0008B1FD E701                       	dc.b	smpsNoAttack, $01
0008B1FF E106                       	smpsAlterNote       $06
0008B201 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B205 E10D                       	smpsAlterNote       $0D
0008B207 C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
0008B20F E10C                       	smpsAlterNote       $0C
0008B211 C10D                       	dc.b	nE5, $0D
0008B213 E106                       	smpsAlterNote       $06
0008B215 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B219 E109                       	smpsAlterNote       $09
0008B21B E701                       	dc.b	smpsNoAttack, $01
0008B21D E10F                       	smpsAlterNote       $0F
0008B21F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B223 E109                       	smpsAlterNote       $09
0008B225 E701                       	dc.b	smpsNoAttack, $01
0008B227 E106                       	smpsAlterNote       $06
0008B229 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B22D E10C                       	smpsAlterNote       $0C
0008B22F E701                       	dc.b	smpsNoAttack, $01
0008B231 E110                       	smpsAlterNote       $10
0008B233 E701                       	dc.b	smpsNoAttack, $01
0008B235 E10F                       	smpsAlterNote       $0F
0008B237 E701                       	dc.b	smpsNoAttack, $01
0008B239 E109                       	smpsAlterNote       $09
0008B23B E701                       	dc.b	smpsNoAttack, $01
0008B23D E105                       	smpsAlterNote       $05
0008B23F E701                       	dc.b	smpsNoAttack, $01
0008B241 E106                       	smpsAlterNote       $06
0008B243 800F                       	dc.b	nRst, $0F
0008B247 E6FF                       	smpsAlterVol        $FF
0008B249 E10F                       	smpsAlterNote       $0F
0008B24B BA01                       	dc.b	nA4, $01
0008B24D E110                       	smpsAlterNote       $10
0008B24F BB02                       	dc.b	nBb4, $02
0008B251 E10F                       	smpsAlterNote       $0F
0008B253 BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
0008B259 E10B                       	smpsAlterNote       $0B
0008B25B BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008B25F E10C                       	smpsAlterNote       $0C
0008B261 C103                       	dc.b	nE5, $03
0008B263 E10D                       	smpsAlterNote       $0D
0008B265 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0008B26F E10B                       	smpsAlterNote       $0B
0008B271 BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
0008B275 E104                       	smpsAlterNote       $04
0008B277 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B27B E10A                       	smpsAlterNote       $0A
0008B27D E701                       	dc.b	smpsNoAttack, $01
0008B27F E10D                       	smpsAlterNote       $0D
0008B281 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B285 E107                       	smpsAlterNote       $07
0008B287 E701                       	dc.b	smpsNoAttack, $01
0008B289 E104                       	smpsAlterNote       $04
0008B28B 8001                       	dc.b	nRst, $01
0008B28D E110                       	smpsAlterNote       $10
0008B28F C703                       	dc.b	nBb5, $03
0008B291 E10F                       	smpsAlterNote       $0F
0008B293 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008B297 E10D                       	smpsAlterNote       $0D
0008B299 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0008B29D E10C                       	smpsAlterNote       $0C
0008B29F E701                       	dc.b	smpsNoAttack, $01
0008B2A1 E108                       	smpsAlterNote       $08
0008B2A3 E701                       	dc.b	smpsNoAttack, $01
0008B2A5 E109                       	smpsAlterNote       $09
0008B2A7 E701                       	dc.b	smpsNoAttack, $01
0008B2A9 E10F                       	smpsAlterNote       $0F
0008B2AB E701                       	dc.b	smpsNoAttack, $01
0008B2AD E113                       	smpsAlterNote       $13
0008B2AF E701                       	dc.b	smpsNoAttack, $01
0008B2B1 E10F                       	smpsAlterNote       $0F
0008B2B3 E701                       	dc.b	smpsNoAttack, $01
0008B2B5 E10C                       	smpsAlterNote       $0C
0008B2B7 E701                       	dc.b	smpsNoAttack, $01
0008B2B9 E108                       	smpsAlterNote       $08
0008B2BB E701                       	dc.b	smpsNoAttack, $01
0008B2BD E10C                       	smpsAlterNote       $0C
0008B2BF E701                       	dc.b	smpsNoAttack, $01
0008B2C1 E112                       	smpsAlterNote       $12
0008B2C3 E701                       	dc.b	smpsNoAttack, $01
0008B2C5 E113                       	smpsAlterNote       $13
0008B2C7 E701                       	dc.b	smpsNoAttack, $01
0008B2C9 E10F                       	smpsAlterNote       $0F
0008B2CB E701                       	dc.b	smpsNoAttack, $01
0008B2CD E109                       	smpsAlterNote       $09
0008B2CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B2D3 E10C                       	smpsAlterNote       $0C
0008B2D5 E701                       	dc.b	smpsNoAttack, $01
0008B2D7 E112                       	smpsAlterNote       $12
0008B2D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B2DD E10C                       	smpsAlterNote       $0C
0008B2DF E701                       	dc.b	smpsNoAttack, $01
0008B2E1 E109                       	smpsAlterNote       $09
0008B2E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B2E7 E10F                       	smpsAlterNote       $0F
0008B2E9 E701                       	dc.b	smpsNoAttack, $01
0008B2EB E113                       	smpsAlterNote       $13
0008B2ED E701                       	dc.b	smpsNoAttack, $01
0008B2EF E112                       	smpsAlterNote       $12
0008B2F1 E701                       	dc.b	smpsNoAttack, $01
0008B2F3 E10C                       	smpsAlterNote       $0C
0008B2F5 E701                       	dc.b	smpsNoAttack, $01
0008B2F7 E108                       	smpsAlterNote       $08
0008B2F9 E701                       	dc.b	smpsNoAttack, $01
0008B2FB E10C                       	smpsAlterNote       $0C
0008B2FD E701                       	dc.b	smpsNoAttack, $01
0008B2FF E10F                       	smpsAlterNote       $0F
0008B301 E701                       	dc.b	smpsNoAttack, $01
0008B303 E113                       	smpsAlterNote       $13
0008B305 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
0008B309 E10B                       	smpsAlterNote       $0B
0008B30B BF03                       	dc.b	nD5, $03
0008B30D E10C                       	smpsAlterNote       $0C
0008B30F C103 8001                  	dc.b	nE5, $03, nRst, $01
0008B313 E10D                       	smpsAlterNote       $0D
0008B315 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008B31F E10B                       	smpsAlterNote       $0B
0008B321 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008B32D E110                       	smpsAlterNote       $10
0008B32F C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008B333 E10F                       	smpsAlterNote       $0F
0008B335 C604                       	dc.b	nA5, $04
0008B337 E10D                       	smpsAlterNote       $0D
0008B339 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008B33F E109                       	smpsAlterNote       $09
0008B341 E701                       	dc.b	smpsNoAttack, $01
0008B343 E108                       	smpsAlterNote       $08
0008B345 E701                       	dc.b	smpsNoAttack, $01
0008B347 E10C                       	smpsAlterNote       $0C
0008B349 E701                       	dc.b	smpsNoAttack, $01
0008B34B E112                       	smpsAlterNote       $12
0008B34D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B351 E10F                       	smpsAlterNote       $0F
0008B353 E701                       	dc.b	smpsNoAttack, $01
0008B355 E109                       	smpsAlterNote       $09
0008B357 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B35B E10F                       	smpsAlterNote       $0F
0008B35D E701                       	dc.b	smpsNoAttack, $01
0008B35F E112                       	smpsAlterNote       $12
0008B361 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B365 E10C                       	smpsAlterNote       $0C
0008B367 E701                       	dc.b	smpsNoAttack, $01
0008B369 E108                       	smpsAlterNote       $08
0008B36B E701                       	dc.b	smpsNoAttack, $01
0008B36D E109                       	smpsAlterNote       $09
0008B36F E701                       	dc.b	smpsNoAttack, $01
0008B371 E10F                       	smpsAlterNote       $0F
0008B373 E701                       	dc.b	smpsNoAttack, $01
0008B375 E113                       	smpsAlterNote       $13
0008B377 E701                       	dc.b	smpsNoAttack, $01
0008B379 E10F                       	smpsAlterNote       $0F
0008B37B E701                       	dc.b	smpsNoAttack, $01
0008B37D E10C                       	smpsAlterNote       $0C
0008B37F E701                       	dc.b	smpsNoAttack, $01
0008B381 E108                       	smpsAlterNote       $08
0008B383 E701                       	dc.b	smpsNoAttack, $01
0008B385 E10C                       	smpsAlterNote       $0C
0008B387 E701                       	dc.b	smpsNoAttack, $01
0008B389 E112                       	smpsAlterNote       $12
0008B38B E701                       	dc.b	smpsNoAttack, $01
0008B38D E113                       	smpsAlterNote       $13
0008B38F E701                       	dc.b	smpsNoAttack, $01
0008B391 E10F                       	smpsAlterNote       $0F
0008B393 E701                       	dc.b	smpsNoAttack, $01
0008B395 E109                       	smpsAlterNote       $09
0008B397 E701                       	dc.b	smpsNoAttack, $01
0008B399 E10D                       	smpsAlterNote       $0D
0008B39B C402                       	dc.b	nG5, $02
0008B39D E10F                       	smpsAlterNote       $0F
0008B39F C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
0008B3A9 E10D                       	smpsAlterNote       $0D
0008B3AB C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008B3B1 E10B                       	smpsAlterNote       $0B
0008B3B3 BF0D                       	dc.b	nD5, $0D
0008B3B5 E108                       	smpsAlterNote       $08
0008B3B7 E701                       	dc.b	smpsNoAttack, $01
0008B3B9 E104                       	smpsAlterNote       $04
0008B3BB E701                       	dc.b	smpsNoAttack, $01
0008B3BD E105                       	smpsAlterNote       $05
0008B3BF E701                       	dc.b	smpsNoAttack, $01
0008B3C1 E10B                       	smpsAlterNote       $0B
0008B3C3 E701                       	dc.b	smpsNoAttack, $01
0008B3C5 E10F                       	smpsAlterNote       $0F
0008B3C7 E701                       	dc.b	smpsNoAttack, $01
0008B3C9 E10B                       	smpsAlterNote       $0B
0008B3CB E701                       	dc.b	smpsNoAttack, $01
0008B3CD E108                       	smpsAlterNote       $08
0008B3CF E701                       	dc.b	smpsNoAttack, $01
0008B3D1 E104                       	smpsAlterNote       $04
0008B3D3 E701                       	dc.b	smpsNoAttack, $01
0008B3D5 E108                       	smpsAlterNote       $08
0008B3D7 E701                       	dc.b	smpsNoAttack, $01
0008B3D9 E10E                       	smpsAlterNote       $0E
0008B3DB E701                       	dc.b	smpsNoAttack, $01
0008B3DD E10F                       	smpsAlterNote       $0F
0008B3DF E701                       	dc.b	smpsNoAttack, $01
0008B3E1 E10C                       	smpsAlterNote       $0C
0008B3E3 C101                       	dc.b	nE5, $01
0008B3E5 E10D                       	smpsAlterNote       $0D
0008B3E7 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0008B3EF E10F                       	smpsAlterNote       $0F
0008B3F1 C607                       	dc.b	nA5, $07
0008B3F3 E10C                       	smpsAlterNote       $0C
0008B3F5 CD07                       	dc.b	nE6, $07
0008B3F7 E10D                       	smpsAlterNote       $0D
0008B3F9 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008B3FD E10C                       	smpsAlterNote       $0C
0008B3FF CD03                       	dc.b	nE6, $03
0008B401 E10A                       	smpsAlterNote       $0A
0008B403 C903 8001                  	dc.b	nC6, $03, nRst, $01
0008B407 E10D                       	smpsAlterNote       $0D
0008B409 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0008B40F E10A                       	smpsAlterNote       $0A
0008B411 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B415 E110                       	smpsAlterNote       $10
0008B417 E701                       	dc.b	smpsNoAttack, $01
0008B419 E114                       	smpsAlterNote       $14
0008B41B E701                       	dc.b	smpsNoAttack, $01
0008B41D E113                       	smpsAlterNote       $13
0008B41F E701                       	dc.b	smpsNoAttack, $01
0008B421 E10D                       	smpsAlterNote       $0D
0008B423 E701                       	dc.b	smpsNoAttack, $01
0008B425 E109                       	smpsAlterNote       $09
0008B427 E701                       	dc.b	smpsNoAttack, $01
0008B429 E10D                       	smpsAlterNote       $0D
0008B42B E701                       	dc.b	smpsNoAttack, $01
0008B42D E110                       	smpsAlterNote       $10
0008B42F E701                       	dc.b	smpsNoAttack, $01
0008B431 E114                       	smpsAlterNote       $14
0008B433 E701                       	dc.b	smpsNoAttack, $01
0008B435 E10F                       	smpsAlterNote       $0F
0008B437 C607                       	dc.b	nA5, $07
0008B439 E10D                       	smpsAlterNote       $0D
0008B43B C40D                       	dc.b	nG5, $0D
0008B43D E10A                       	smpsAlterNote       $0A
0008B43F E701                       	dc.b	smpsNoAttack, $01
0008B441 E106                       	smpsAlterNote       $06
0008B443 E701                       	dc.b	smpsNoAttack, $01
0008B445 E10A                       	smpsAlterNote       $0A
0008B447 E701                       	dc.b	smpsNoAttack, $01
0008B449 E10D                       	smpsAlterNote       $0D
0008B44B E701                       	dc.b	smpsNoAttack, $01
0008B44D E111                       	smpsAlterNote       $11
0008B44F E701                       	dc.b	smpsNoAttack, $01
0008B451 E10D                       	smpsAlterNote       $0D
0008B453 E701                       	dc.b	smpsNoAttack, $01
0008B455 E107                       	smpsAlterNote       $07
0008B457 E701                       	dc.b	smpsNoAttack, $01
0008B459 E106                       	smpsAlterNote       $06
0008B45B E701                       	dc.b	smpsNoAttack, $01
0008B45D E10A                       	smpsAlterNote       $0A
0008B45F E701                       	dc.b	smpsNoAttack, $01
0008B461 E110                       	smpsAlterNote       $10
0008B463 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B467 E10D                       	smpsAlterNote       $0D
0008B469 E701                       	dc.b	smpsNoAttack, $01
0008B46B E107                       	smpsAlterNote       $07
0008B46D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B471 E10F                       	smpsAlterNote       $0F
0008B473 C60E                       	dc.b	nA5, $0E
0008B475 E109                       	smpsAlterNote       $09
0008B477 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B47B E10F                       	smpsAlterNote       $0F
0008B47D E701                       	dc.b	smpsNoAttack, $01
0008B47F E112                       	smpsAlterNote       $12
0008B481 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B485 E10C                       	smpsAlterNote       $0C
0008B487 E701                       	dc.b	smpsNoAttack, $01
0008B489 E108                       	smpsAlterNote       $08
0008B48B E701                       	dc.b	smpsNoAttack, $01
0008B48D E109                       	smpsAlterNote       $09
0008B48F E701                       	dc.b	smpsNoAttack, $01
0008B491 E10F                       	smpsAlterNote       $0F
0008B493 E701                       	dc.b	smpsNoAttack, $01
0008B495 E113                       	smpsAlterNote       $13
0008B497 E701                       	dc.b	smpsNoAttack, $01
0008B499 E10F                       	smpsAlterNote       $0F
0008B49B E701                       	dc.b	smpsNoAttack, $01
0008B49D E10C                       	smpsAlterNote       $0C
0008B49F E701                       	dc.b	smpsNoAttack, $01
0008B4A1 E108                       	smpsAlterNote       $08
0008B4A3 E701                       	dc.b	smpsNoAttack, $01
0008B4A5 E109                       	smpsAlterNote       $09
0008B4A7 8001                       	dc.b	nRst, $01
0008B4A9 E110                       	smpsAlterNote       $10
0008B4AB C70D                       	dc.b	nBb5, $0D
0008B4AD E10D                       	smpsAlterNote       $0D
0008B4AF E701                       	dc.b	smpsNoAttack, $01
0008B4B1 E109                       	smpsAlterNote       $09
0008B4B3 E701                       	dc.b	smpsNoAttack, $01
0008B4B5 E10D                       	smpsAlterNote       $0D
0008B4B7 E701                       	dc.b	smpsNoAttack, $01
0008B4B9 E113                       	smpsAlterNote       $13
0008B4BB E701                       	dc.b	smpsNoAttack, $01
0008B4BD E114                       	smpsAlterNote       $14
0008B4BF E701                       	dc.b	smpsNoAttack, $01
0008B4C1 E110                       	smpsAlterNote       $10
0008B4C3 E701                       	dc.b	smpsNoAttack, $01
0008B4C5 E10A                       	smpsAlterNote       $0A
0008B4C7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B4CB E10D                       	smpsAlterNote       $0D
0008B4CD E701                       	dc.b	smpsNoAttack, $01
0008B4CF E113                       	smpsAlterNote       $13
0008B4D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B4D5 E10D                       	smpsAlterNote       $0D
0008B4D7 E701                       	dc.b	smpsNoAttack, $01
0008B4D9 E10A                       	smpsAlterNote       $0A
0008B4DB E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
0008B4E5 E10B                       	smpsAlterNote       $0B
0008B4E7 8001                       	dc.b	nRst, $01
0008B4E9 E10C                       	smpsAlterNote       $0C
0008B4EB CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
0008B4EF E10B                       	smpsAlterNote       $0B
0008B4F1 CB0D                       	dc.b	nD6, $0D
0008B4F3 E105                       	smpsAlterNote       $05
0008B4F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B4F9 E108                       	smpsAlterNote       $08
0008B4FB E701                       	dc.b	smpsNoAttack, $01
0008B4FD E10E                       	smpsAlterNote       $0E
0008B4FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B503 E108                       	smpsAlterNote       $08
0008B505 E701                       	dc.b	smpsNoAttack, $01
0008B507 E105                       	smpsAlterNote       $05
0008B509 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B50D E10B                       	smpsAlterNote       $0B
0008B50F E701                       	dc.b	smpsNoAttack, $01
0008B511 E10F                       	smpsAlterNote       $0F
0008B513 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B517 E10C                       	smpsAlterNote       $0C
0008B519 CC0D                       	dc.b	nEb6, $0D
0008B51B E106                       	smpsAlterNote       $06
0008B51D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B521 E109                       	smpsAlterNote       $09
0008B523 E701                       	dc.b	smpsNoAttack, $01
0008B525 E10C                       	smpsAlterNote       $0C
0008B527 8001                       	dc.b	nRst, $01
0008B529 E10A                       	smpsAlterNote       $0A
0008B52B C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
0008B537 CB0E                       	dc.b	nD6, $0E
0008B539 E105                       	smpsAlterNote       $05
0008B53B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B53F E10B                       	smpsAlterNote       $0B
0008B541 E701                       	dc.b	smpsNoAttack, $01
0008B543 E10E                       	smpsAlterNote       $0E
0008B545 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B549 E108                       	smpsAlterNote       $08
0008B54B E701                       	dc.b	smpsNoAttack, $01
0008B54D E104                       	smpsAlterNote       $04
0008B54F E701                       	dc.b	smpsNoAttack, $01
0008B551 E105                       	smpsAlterNote       $05
0008B553 E701                       	dc.b	smpsNoAttack, $01
0008B555 E10B                       	smpsAlterNote       $0B
0008B557 E701                       	dc.b	smpsNoAttack, $01
0008B559 E10F                       	smpsAlterNote       $0F
0008B55B E701                       	dc.b	smpsNoAttack, $01
0008B55D E10D                       	smpsAlterNote       $0D
0008B55F CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
0008B563 E10C                       	smpsAlterNote       $0C
0008B565 CC06 8001                  	dc.b	nEb6, $06, nRst, $01
0008B569 E10A                       	smpsAlterNote       $0A
0008B56B C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
0008B577 CB0D                       	dc.b	nD6, $0D
0008B579 E108                       	smpsAlterNote       $08
0008B57B E701                       	dc.b	smpsNoAttack, $01
0008B57D E104                       	smpsAlterNote       $04
0008B57F E701                       	dc.b	smpsNoAttack, $01
0008B581 E105                       	smpsAlterNote       $05
0008B583 E701                       	dc.b	smpsNoAttack, $01
0008B585 E10B                       	smpsAlterNote       $0B
0008B587 E701                       	dc.b	smpsNoAttack, $01
0008B589 E10F                       	smpsAlterNote       $0F
0008B58B E701                       	dc.b	smpsNoAttack, $01
0008B58D E10B                       	smpsAlterNote       $0B
0008B58F E701                       	dc.b	smpsNoAttack, $01
0008B591 E108                       	smpsAlterNote       $08
0008B593 E701                       	dc.b	smpsNoAttack, $01
0008B595 E104                       	smpsAlterNote       $04
0008B597 E701                       	dc.b	smpsNoAttack, $01
0008B599 E108                       	smpsAlterNote       $08
0008B59B E701                       	dc.b	smpsNoAttack, $01
0008B59D E10E                       	smpsAlterNote       $0E
0008B59F E701                       	dc.b	smpsNoAttack, $01
0008B5A1 E10F                       	smpsAlterNote       $0F
0008B5A3 E701                       	dc.b	smpsNoAttack, $01
0008B5A5 E10C                       	smpsAlterNote       $0C
0008B5A7 CC0D                       	dc.b	nEb6, $0D
0008B5A9 E109                       	smpsAlterNote       $09
0008B5AB E701                       	dc.b	smpsNoAttack, $01
0008B5AD E105                       	smpsAlterNote       $05
0008B5AF E701                       	dc.b	smpsNoAttack, $01
0008B5B1 E106                       	smpsAlterNote       $06
0008B5B3 E701                       	dc.b	smpsNoAttack, $01
0008B5B5 E10C                       	smpsAlterNote       $0C
0008B5B7 E701                       	dc.b	smpsNoAttack, $01
0008B5B9 E10A                       	smpsAlterNote       $0A
0008B5BB C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
0008B5C7 CB0D                       	dc.b	nD6, $0D
0008B5C9 E108                       	smpsAlterNote       $08
0008B5CB E701                       	dc.b	smpsNoAttack, $01
0008B5CD E104                       	smpsAlterNote       $04
0008B5CF E701                       	dc.b	smpsNoAttack, $01
0008B5D1 E108                       	smpsAlterNote       $08
0008B5D3 E701                       	dc.b	smpsNoAttack, $01
0008B5D5 E10B                       	smpsAlterNote       $0B
0008B5D7 E701                       	dc.b	smpsNoAttack, $01
0008B5D9 E10F                       	smpsAlterNote       $0F
0008B5DB E701                       	dc.b	smpsNoAttack, $01
0008B5DD E10B                       	smpsAlterNote       $0B
0008B5DF E701                       	dc.b	smpsNoAttack, $01
0008B5E1 E105                       	smpsAlterNote       $05
0008B5E3 E701                       	dc.b	smpsNoAttack, $01
0008B5E5 E104                       	smpsAlterNote       $04
0008B5E7 E701                       	dc.b	smpsNoAttack, $01
0008B5E9 E108                       	smpsAlterNote       $08
0008B5EB E701                       	dc.b	smpsNoAttack, $01
0008B5ED E10E                       	smpsAlterNote       $0E
0008B5EF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B5F3 E10B                       	smpsAlterNote       $0B
0008B5F5 E701                       	dc.b	smpsNoAttack, $01
0008B5F7 E105                       	smpsAlterNote       $05
0008B5F9 E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
0008B601 03                         	dc.b	$03
0008B602 E601                       	smpsAlterVol        $01
0008B604 F6F1 D1                    	smpsJump            music84_Jump01
0008B607                            
0008B607                            ; FM5 Data
0008B607                            music84_FM5:
0008B609 E080                       	smpsPan             panLeft, $00
0008B60B 8003                       	dc.b	nRst, $03
0008B60D E10D                       	smpsAlterNote       $0D
0008B60F C203 8008                  	dc.b	nF5, $03, nRst, $08
0008B613 E10C                       	smpsAlterNote       $0C
0008B615 C103 800A                  	dc.b	nE5, $03, nRst, $0A
0008B619 E10F                       	smpsAlterNote       $0F
0008B61B BA03 8006                  	dc.b	nA4, $03, nRst, $06
0008B621 E6FE                       	smpsAlterVol        $FE
0008B623 C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
0008B629 E10D                       	smpsAlterNote       $0D
0008B62B C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008B631 E10C                       	smpsAlterNote       $0C
0008B633 C102 8001                  	dc.b	nE5, $02, nRst, $01
0008B637 E10A                       	smpsAlterNote       $0A
0008B639 BD01 8001                  	dc.b	nC5, $01, nRst, $01
0008B63F 03                         	dc.b	$03
0008B640                            
0008B640                            music84_Jump00:
0008B640 8004                       	dc.b	nRst, $04
0008B642 E602                       	smpsAlterVol        $02
0008B644 E10D                       	smpsAlterNote       $0D
0008B646 B60D                       	dc.b	nF4, $0D
0008B648 E107                       	smpsAlterNote       $07
0008B64A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B64E E10A                       	smpsAlterNote       $0A
0008B650 E701                       	dc.b	smpsNoAttack, $01
0008B652 E110                       	smpsAlterNote       $10
0008B654 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B658 E10A                       	smpsAlterNote       $0A
0008B65A E701                       	dc.b	smpsNoAttack, $01
0008B65C E107                       	smpsAlterNote       $07
0008B65E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B662 E10D                       	smpsAlterNote       $0D
0008B664 E701                       	dc.b	smpsNoAttack, $01
0008B666 E111                       	smpsAlterNote       $11
0008B668 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B66C E10D                       	smpsAlterNote       $0D
0008B66E B80D                       	dc.b	nG4, $0D
0008B670 E107                       	smpsAlterNote       $07
0008B672 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B676 E10A                       	smpsAlterNote       $0A
0008B678 E701                       	dc.b	smpsNoAttack, $01
0008B67A E110                       	smpsAlterNote       $10
0008B67C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B680 E10A                       	smpsAlterNote       $0A
0008B682 E701                       	dc.b	smpsNoAttack, $01
0008B684 E107                       	smpsAlterNote       $07
0008B686 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B68A E10D                       	smpsAlterNote       $0D
0008B68C E701                       	dc.b	smpsNoAttack, $01
0008B68E E111                       	smpsAlterNote       $11
0008B690 E701                       	dc.b	smpsNoAttack, $01
0008B692 E110                       	smpsAlterNote       $10
0008B694 E701                       	dc.b	smpsNoAttack, $01
0008B696 E10A                       	smpsAlterNote       $0A
0008B698 E701                       	dc.b	smpsNoAttack, $01
0008B69A E106                       	smpsAlterNote       $06
0008B69C E701                       	dc.b	smpsNoAttack, $01
0008B69E E10A                       	smpsAlterNote       $0A
0008B6A0 E701                       	dc.b	smpsNoAttack, $01
0008B6A2 E10D                       	smpsAlterNote       $0D
0008B6A4 E701                       	dc.b	smpsNoAttack, $01
0008B6A6 E111                       	smpsAlterNote       $11
0008B6A8 E701                       	dc.b	smpsNoAttack, $01
0008B6AA E10D                       	smpsAlterNote       $0D
0008B6AC E701                       	dc.b	smpsNoAttack, $01
0008B6AE E10F                       	smpsAlterNote       $0F
0008B6B0 BA0E                       	dc.b	nA4, $0E
0008B6B2 E109                       	smpsAlterNote       $09
0008B6B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B6B8 E10F                       	smpsAlterNote       $0F
0008B6BA E701                       	dc.b	smpsNoAttack, $01
0008B6BC E112                       	smpsAlterNote       $12
0008B6BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B6C2 E10C                       	smpsAlterNote       $0C
0008B6C4 E701                       	dc.b	smpsNoAttack, $01
0008B6C6 E108                       	smpsAlterNote       $08
0008B6C8 E701                       	dc.b	smpsNoAttack, $01
0008B6CA E109                       	smpsAlterNote       $09
0008B6CC E701                       	dc.b	smpsNoAttack, $01
0008B6CE E10F                       	smpsAlterNote       $0F
0008B6D0 E701                       	dc.b	smpsNoAttack, $01
0008B6D2 E113                       	smpsAlterNote       $13
0008B6D4 E701                       	dc.b	smpsNoAttack, $01
0008B6D6 E10F                       	smpsAlterNote       $0F
0008B6D8 E701                       	dc.b	smpsNoAttack, $01
0008B6DA E109                       	smpsAlterNote       $09
0008B6DC E701                       	dc.b	smpsNoAttack, $01
0008B6DE E108                       	smpsAlterNote       $08
0008B6E0 E701                       	dc.b	smpsNoAttack, $01
0008B6E2 E10C                       	smpsAlterNote       $0C
0008B6E4 E701                       	dc.b	smpsNoAttack, $01
0008B6E6 E112                       	smpsAlterNote       $12
0008B6E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B6EC E10F                       	smpsAlterNote       $0F
0008B6EE E701                       	dc.b	smpsNoAttack, $01
0008B6F0 E109                       	smpsAlterNote       $09
0008B6F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B6F6 E10F                       	smpsAlterNote       $0F
0008B6F8 E701                       	dc.b	smpsNoAttack, $01
0008B6FA E112                       	smpsAlterNote       $12
0008B6FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B700 E10C                       	smpsAlterNote       $0C
0008B702 E701                       	dc.b	smpsNoAttack, $01
0008B704 E108                       	smpsAlterNote       $08
0008B706 E701                       	dc.b	smpsNoAttack, $01
0008B708 E109                       	smpsAlterNote       $09
0008B70A E701                       	dc.b	smpsNoAttack, $01
0008B70C E10F                       	smpsAlterNote       $0F
0008B70E E701                       	dc.b	smpsNoAttack, $01
0008B710 E113                       	smpsAlterNote       $13
0008B712 E701                       	dc.b	smpsNoAttack, $01
0008B714 E10F                       	smpsAlterNote       $0F
0008B716 E701                       	dc.b	smpsNoAttack, $01
0008B718 E10C                       	smpsAlterNote       $0C
0008B71A E701                       	dc.b	smpsNoAttack, $01
0008B71C E108                       	smpsAlterNote       $08
0008B71E E701                       	dc.b	smpsNoAttack, $01
0008B720 E109                       	smpsAlterNote       $09
0008B722 8001                       	dc.b	nRst, $01
0008B724 E10C                       	smpsAlterNote       $0C
0008B726 B50A                       	dc.b	nE4, $0A
0008B728 E10D                       	smpsAlterNote       $0D
0008B72A B60D                       	dc.b	nF4, $0D
0008B72C E10A                       	smpsAlterNote       $0A
0008B72E E701                       	dc.b	smpsNoAttack, $01
0008B730 E106                       	smpsAlterNote       $06
0008B732 E701                       	dc.b	smpsNoAttack, $01
0008B734 E107                       	smpsAlterNote       $07
0008B736 E701                       	dc.b	smpsNoAttack, $01
0008B738 E10D                       	smpsAlterNote       $0D
0008B73A E701                       	dc.b	smpsNoAttack, $01
0008B73C E111                       	smpsAlterNote       $11
0008B73E E701                       	dc.b	smpsNoAttack, $01
0008B740 E10D                       	smpsAlterNote       $0D
0008B742 E701                       	dc.b	smpsNoAttack, $01
0008B744 E10A                       	smpsAlterNote       $0A
0008B746 E701                       	dc.b	smpsNoAttack, $01
0008B748 E106                       	smpsAlterNote       $06
0008B74A E701                       	dc.b	smpsNoAttack, $01
0008B74C E10A                       	smpsAlterNote       $0A
0008B74E E701                       	dc.b	smpsNoAttack, $01
0008B750 E110                       	smpsAlterNote       $10
0008B752 E701                       	dc.b	smpsNoAttack, $01
0008B754 E111                       	smpsAlterNote       $11
0008B756 E701                       	dc.b	smpsNoAttack, $01
0008B758 E10D                       	smpsAlterNote       $0D
0008B75A B80D                       	dc.b	nG4, $0D
0008B75C E10A                       	smpsAlterNote       $0A
0008B75E E701                       	dc.b	smpsNoAttack, $01
0008B760 E106                       	smpsAlterNote       $06
0008B762 E701                       	dc.b	smpsNoAttack, $01
0008B764 E107                       	smpsAlterNote       $07
0008B766 E701                       	dc.b	smpsNoAttack, $01
0008B768 E10D                       	smpsAlterNote       $0D
0008B76A E701                       	dc.b	smpsNoAttack, $01
0008B76C E111                       	smpsAlterNote       $11
0008B76E E701                       	dc.b	smpsNoAttack, $01
0008B770 E10D                       	smpsAlterNote       $0D
0008B772 E701                       	dc.b	smpsNoAttack, $01
0008B774 E10A                       	smpsAlterNote       $0A
0008B776 E701                       	dc.b	smpsNoAttack, $01
0008B778 E106                       	smpsAlterNote       $06
0008B77A E701                       	dc.b	smpsNoAttack, $01
0008B77C E10A                       	smpsAlterNote       $0A
0008B77E E701                       	dc.b	smpsNoAttack, $01
0008B780 E110                       	smpsAlterNote       $10
0008B782 E701                       	dc.b	smpsNoAttack, $01
0008B784 E111                       	smpsAlterNote       $11
0008B786 E701                       	dc.b	smpsNoAttack, $01
0008B788 E10D                       	smpsAlterNote       $0D
0008B78A E701                       	dc.b	smpsNoAttack, $01
0008B78C E107                       	smpsAlterNote       $07
0008B78E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B792 E10A                       	smpsAlterNote       $0A
0008B794 E701                       	dc.b	smpsNoAttack, $01
0008B796 E110                       	smpsAlterNote       $10
0008B798 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B79C E10D                       	smpsAlterNote       $0D
0008B79E 8001                       	dc.b	nRst, $01
0008B7A0 E10F                       	smpsAlterNote       $0F
0008B7A2 BA0D                       	dc.b	nA4, $0D
0008B7A4 E10C                       	smpsAlterNote       $0C
0008B7A6 E701                       	dc.b	smpsNoAttack, $01
0008B7A8 E108                       	smpsAlterNote       $08
0008B7AA E701                       	dc.b	smpsNoAttack, $01
0008B7AC E10C                       	smpsAlterNote       $0C
0008B7AE E701                       	dc.b	smpsNoAttack, $01
0008B7B0 E112                       	smpsAlterNote       $12
0008B7B2 E701                       	dc.b	smpsNoAttack, $01
0008B7B4 E113                       	smpsAlterNote       $13
0008B7B6 E701                       	dc.b	smpsNoAttack, $01
0008B7B8 E10F                       	smpsAlterNote       $0F
0008B7BA E701                       	dc.b	smpsNoAttack, $01
0008B7BC E109                       	smpsAlterNote       $09
0008B7BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B7C2 E10C                       	smpsAlterNote       $0C
0008B7C4 E701                       	dc.b	smpsNoAttack, $01
0008B7C6 E112                       	smpsAlterNote       $12
0008B7C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B7CC E10C                       	smpsAlterNote       $0C
0008B7CE E701                       	dc.b	smpsNoAttack, $01
0008B7D0 E109                       	smpsAlterNote       $09
0008B7D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B7D6 E10F                       	smpsAlterNote       $0F
0008B7D8 E701                       	dc.b	smpsNoAttack, $01
0008B7DA E113                       	smpsAlterNote       $13
0008B7DC E701                       	dc.b	smpsNoAttack, $01
0008B7DE E112                       	smpsAlterNote       $12
0008B7E0 E701                       	dc.b	smpsNoAttack, $01
0008B7E2 E10C                       	smpsAlterNote       $0C
0008B7E4 E701                       	dc.b	smpsNoAttack, $01
0008B7E6 E108                       	smpsAlterNote       $08
0008B7E8 E701                       	dc.b	smpsNoAttack, $01
0008B7EA E10C                       	smpsAlterNote       $0C
0008B7EC E701                       	dc.b	smpsNoAttack, $01
0008B7EE E10F                       	smpsAlterNote       $0F
0008B7F0 E701                       	dc.b	smpsNoAttack, $01
0008B7F2 E113                       	smpsAlterNote       $13
0008B7F4 E701                       	dc.b	smpsNoAttack, $01
0008B7F6 E10F                       	smpsAlterNote       $0F
0008B7F8 E701                       	dc.b	smpsNoAttack, $01
0008B7FA E109                       	smpsAlterNote       $09
0008B7FC E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B800 E10D                       	smpsAlterNote       $0D
0008B802 B609 8001                  	dc.b	nF4, $09, nRst, $01
0008B806 E10C                       	smpsAlterNote       $0C
0008B808 B506 8001                  	dc.b	nE4, $06, nRst, $01
0008B80C E10B                       	smpsAlterNote       $0B
0008B80E B30D                       	dc.b	nD4, $0D
0008B810 E10C                       	smpsAlterNote       $0C
0008B812 B503 8001                  	dc.b	nE4, $03, nRst, $01
0008B816 E10D                       	smpsAlterNote       $0D
0008B818 B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
0008B820 E109                       	smpsAlterNote       $09
0008B822 E701                       	dc.b	smpsNoAttack, $01
0008B824 E108                       	smpsAlterNote       $08
0008B826 E701                       	dc.b	smpsNoAttack, $01
0008B828 E10C                       	smpsAlterNote       $0C
0008B82A E701                       	dc.b	smpsNoAttack, $01
0008B82C E112                       	smpsAlterNote       $12
0008B82E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B832 E10F                       	smpsAlterNote       $0F
0008B834 E701                       	dc.b	smpsNoAttack, $01
0008B836 E109                       	smpsAlterNote       $09
0008B838 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B83C E10F                       	smpsAlterNote       $0F
0008B83E E701                       	dc.b	smpsNoAttack, $01
0008B840 E112                       	smpsAlterNote       $12
0008B842 E701                       	dc.b	smpsNoAttack, $01
0008B844 E113                       	smpsAlterNote       $13
0008B846 8001                       	dc.b	nRst, $01
0008B848 E10D                       	smpsAlterNote       $0D
0008B84A C20D                       	dc.b	nF5, $0D
0008B84C E107                       	smpsAlterNote       $07
0008B84E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B852 E10A                       	smpsAlterNote       $0A
0008B854 E701                       	dc.b	smpsNoAttack, $01
0008B856 E110                       	smpsAlterNote       $10
0008B858 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B85C E10A                       	smpsAlterNote       $0A
0008B85E E701                       	dc.b	smpsNoAttack, $01
0008B860 E107                       	smpsAlterNote       $07
0008B862 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B866 E10D                       	smpsAlterNote       $0D
0008B868 E701                       	dc.b	smpsNoAttack, $01
0008B86A E111                       	smpsAlterNote       $11
0008B86C E701                       	dc.b	smpsNoAttack, $01
0008B86E E110                       	smpsAlterNote       $10
0008B870 E701                       	dc.b	smpsNoAttack, $01
0008B872 E10A                       	smpsAlterNote       $0A
0008B874 E701                       	dc.b	smpsNoAttack, $01
0008B876 E106                       	smpsAlterNote       $06
0008B878 E701                       	dc.b	smpsNoAttack, $01
0008B87A E10A                       	smpsAlterNote       $0A
0008B87C E701                       	dc.b	smpsNoAttack, $01
0008B87E E10D                       	smpsAlterNote       $0D
0008B880 E701                       	dc.b	smpsNoAttack, $01
0008B882 E111                       	smpsAlterNote       $11
0008B884 E701                       	dc.b	smpsNoAttack, $01
0008B886 E10D                       	smpsAlterNote       $0D
0008B888 E701                       	dc.b	smpsNoAttack, $01
0008B88A E107                       	smpsAlterNote       $07
0008B88C E701                       	dc.b	smpsNoAttack, $01
0008B88E E106                       	smpsAlterNote       $06
0008B890 E701                       	dc.b	smpsNoAttack, $01
0008B892 E10A                       	smpsAlterNote       $0A
0008B894 E701                       	dc.b	smpsNoAttack, $01
0008B896 E110                       	smpsAlterNote       $10
0008B898 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B89C E10D                       	smpsAlterNote       $0D
0008B89E E701                       	dc.b	smpsNoAttack, $01
0008B8A0 E107                       	smpsAlterNote       $07
0008B8A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B8A6 E10D                       	smpsAlterNote       $0D
0008B8A8 E701                       	dc.b	smpsNoAttack, $01
0008B8AA E110                       	smpsAlterNote       $10
0008B8AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B8B0 E10A                       	smpsAlterNote       $0A
0008B8B2 E701                       	dc.b	smpsNoAttack, $01
0008B8B4 E106                       	smpsAlterNote       $06
0008B8B6 E701                       	dc.b	smpsNoAttack, $01
0008B8B8 E107                       	smpsAlterNote       $07
0008B8BA E701                       	dc.b	smpsNoAttack, $01
0008B8BC E10D                       	smpsAlterNote       $0D
0008B8BE E701                       	dc.b	smpsNoAttack, $01
0008B8C0 E111                       	smpsAlterNote       $11
0008B8C2 E701                       	dc.b	smpsNoAttack, $01
0008B8C4 E10D                       	smpsAlterNote       $0D
0008B8C6 E701                       	dc.b	smpsNoAttack, $01
0008B8C8 E10A                       	smpsAlterNote       $0A
0008B8CA E701                       	dc.b	smpsNoAttack, $01
0008B8CC E106                       	smpsAlterNote       $06
0008B8CE E701                       	dc.b	smpsNoAttack, $01
0008B8D0 E10A                       	smpsAlterNote       $0A
0008B8D2 E701                       	dc.b	smpsNoAttack, $01
0008B8D4 E110                       	smpsAlterNote       $10
0008B8D6 E701                       	dc.b	smpsNoAttack, $01
0008B8D8 E111                       	smpsAlterNote       $11
0008B8DA E701                       	dc.b	smpsNoAttack, $01
0008B8DC E10D                       	smpsAlterNote       $0D
0008B8DE E701                       	dc.b	smpsNoAttack, $01
0008B8E0 E107                       	smpsAlterNote       $07
0008B8E2 E701                       	dc.b	smpsNoAttack, $01
0008B8E4 E10D                       	smpsAlterNote       $0D
0008B8E6 C207                       	dc.b	nF5, $07
0008B8E8 E10C                       	smpsAlterNote       $0C
0008B8EA C10D                       	dc.b	nE5, $0D
0008B8EC E109                       	smpsAlterNote       $09
0008B8EE E701                       	dc.b	smpsNoAttack, $01
0008B8F0 E106                       	smpsAlterNote       $06
0008B8F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B8F6 E10C                       	smpsAlterNote       $0C
0008B8F8 E701                       	dc.b	smpsNoAttack, $01
0008B8FA E110                       	smpsAlterNote       $10
0008B8FC E701                       	dc.b	smpsNoAttack, $01
0008B8FE E10F                       	smpsAlterNote       $0F
0008B900 E701                       	dc.b	smpsNoAttack, $01
0008B902 E109                       	smpsAlterNote       $09
0008B904 E701                       	dc.b	smpsNoAttack, $01
0008B906 E105                       	smpsAlterNote       $05
0008B908 E701                       	dc.b	smpsNoAttack, $01
0008B90A E109                       	smpsAlterNote       $09
0008B90C E701                       	dc.b	smpsNoAttack, $01
0008B90E E10C                       	smpsAlterNote       $0C
0008B910 E701                       	dc.b	smpsNoAttack, $01
0008B912 E110                       	smpsAlterNote       $10
0008B914 E701                       	dc.b	smpsNoAttack, $01
0008B916 E10B                       	smpsAlterNote       $0B
0008B918 BF0D                       	dc.b	nD5, $0D
0008B91A E108                       	smpsAlterNote       $08
0008B91C E701                       	dc.b	smpsNoAttack, $01
0008B91E E105                       	smpsAlterNote       $05
0008B920 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B924 E10B                       	smpsAlterNote       $0B
0008B926 E701                       	dc.b	smpsNoAttack, $01
0008B928 E10F                       	smpsAlterNote       $0F
0008B92A E701                       	dc.b	smpsNoAttack, $01
0008B92C E10E                       	smpsAlterNote       $0E
0008B92E E701                       	dc.b	smpsNoAttack, $01
0008B930 E108                       	smpsAlterNote       $08
0008B932 E701                       	dc.b	smpsNoAttack, $01
0008B934 E104                       	smpsAlterNote       $04
0008B936 E701                       	dc.b	smpsNoAttack, $01
0008B938 E108                       	smpsAlterNote       $08
0008B93A E701                       	dc.b	smpsNoAttack, $01
0008B93C E10E                       	smpsAlterNote       $0E
0008B93E E701                       	dc.b	smpsNoAttack, $01
0008B940 E10F                       	smpsAlterNote       $0F
0008B942 E701                       	dc.b	smpsNoAttack, $01
0008B944 E10B                       	smpsAlterNote       $0B
0008B946 E701                       	dc.b	smpsNoAttack, $01
0008B948 E105                       	smpsAlterNote       $05
0008B94A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B94E E108                       	smpsAlterNote       $08
0008B950 E701                       	dc.b	smpsNoAttack, $01
0008B952 E10E                       	smpsAlterNote       $0E
0008B954 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B958 E108                       	smpsAlterNote       $08
0008B95A E701                       	dc.b	smpsNoAttack, $01
0008B95C E105                       	smpsAlterNote       $05
0008B95E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B962 E10B                       	smpsAlterNote       $0B
0008B964 E701                       	dc.b	smpsNoAttack, $01
0008B966 E10F                       	smpsAlterNote       $0F
0008B968 E701                       	dc.b	smpsNoAttack, $01
0008B96A E10E                       	smpsAlterNote       $0E
0008B96C E701                       	dc.b	smpsNoAttack, $01
0008B96E E108                       	smpsAlterNote       $08
0008B970 E701                       	dc.b	smpsNoAttack, $01
0008B972 E104                       	smpsAlterNote       $04
0008B974 E701                       	dc.b	smpsNoAttack, $01
0008B976 E108                       	smpsAlterNote       $08
0008B978 E701                       	dc.b	smpsNoAttack, $01
0008B97A E10B                       	smpsAlterNote       $0B
0008B97C E701                       	dc.b	smpsNoAttack, $01
0008B97E E10F                       	smpsAlterNote       $0F
0008B980 E701                       	dc.b	smpsNoAttack, $01
0008B982 E10B                       	smpsAlterNote       $0B
0008B984 E701                       	dc.b	smpsNoAttack, $01
0008B986 E105                       	smpsAlterNote       $05
0008B988 E701                       	dc.b	smpsNoAttack, $01
0008B98A E104                       	smpsAlterNote       $04
0008B98C E701                       	dc.b	smpsNoAttack, $01
0008B98E E108                       	smpsAlterNote       $08
0008B990 E701                       	dc.b	smpsNoAttack, $01
0008B992 E10E                       	smpsAlterNote       $0E
0008B994 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B998 E10B                       	smpsAlterNote       $0B
0008B99A E701                       	dc.b	smpsNoAttack, $01
0008B99C E105                       	smpsAlterNote       $05
0008B99E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B9A2 E10B                       	smpsAlterNote       $0B
0008B9A4 E701                       	dc.b	smpsNoAttack, $01
0008B9A6 E10E                       	smpsAlterNote       $0E
0008B9A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B9AC E108                       	smpsAlterNote       $08
0008B9AE E701                       	dc.b	smpsNoAttack, $01
0008B9B0 E105                       	smpsAlterNote       $05
0008B9B2 8001                       	dc.b	nRst, $01
0008B9B6 E601                       	smpsAlterVol        $01
0008B9B8 E10B                       	smpsAlterNote       $0B
0008B9BA BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0008B9C6 8004                       	dc.b	nRst, $04
0008B9CA E6FF                       	smpsAlterVol        $FF
0008B9CC E10D                       	smpsAlterNote       $0D
0008B9CE B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
0008B9D6 E10C                       	smpsAlterNote       $0C
0008B9D8 E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
0008B9DD E10D                       	smpsAlterNote       $0D
0008B9DF B60D                       	dc.b	nF4, $0D
0008B9E1 E10A                       	smpsAlterNote       $0A
0008B9E3 E701                       	dc.b	smpsNoAttack, $01
0008B9E5 E106                       	smpsAlterNote       $06
0008B9E7 E701                       	dc.b	smpsNoAttack, $01
0008B9E9 E10A                       	smpsAlterNote       $0A
0008B9EB E701                       	dc.b	smpsNoAttack, $01
0008B9ED E110                       	smpsAlterNote       $10
0008B9EF E701                       	dc.b	smpsNoAttack, $01
0008B9F1 E111                       	smpsAlterNote       $11
0008B9F3 E701                       	dc.b	smpsNoAttack, $01
0008B9F5 E10D                       	smpsAlterNote       $0D
0008B9F7 E701                       	dc.b	smpsNoAttack, $01
0008B9F9 E107                       	smpsAlterNote       $07
0008B9FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B9FF E10A                       	smpsAlterNote       $0A
0008BA01 E701                       	dc.b	smpsNoAttack, $01
0008BA03 E110                       	smpsAlterNote       $10
0008BA05 E701                       	dc.b	smpsNoAttack, $01
0008BA07 E111                       	smpsAlterNote       $11
0008BA09 8001                       	dc.b	nRst, $01
0008BA0B E10D                       	smpsAlterNote       $0D
0008BA0D B80D                       	dc.b	nG4, $0D
0008BA0F E10A                       	smpsAlterNote       $0A
0008BA11 E701                       	dc.b	smpsNoAttack, $01
0008BA13 E106                       	smpsAlterNote       $06
0008BA15 E701                       	dc.b	smpsNoAttack, $01
0008BA17 E10A                       	smpsAlterNote       $0A
0008BA19 E701                       	dc.b	smpsNoAttack, $01
0008BA1B E110                       	smpsAlterNote       $10
0008BA1D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BA21 E10D                       	smpsAlterNote       $0D
0008BA23 E701                       	dc.b	smpsNoAttack, $01
0008BA25 E107                       	smpsAlterNote       $07
0008BA27 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BA2B E10D                       	smpsAlterNote       $0D
0008BA2D E701                       	dc.b	smpsNoAttack, $01
0008BA2F E110                       	smpsAlterNote       $10
0008BA31 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BA35 E10A                       	smpsAlterNote       $0A
0008BA37 E701                       	dc.b	smpsNoAttack, $01
0008BA39 E106                       	smpsAlterNote       $06
0008BA3B E701                       	dc.b	smpsNoAttack, $01
0008BA3D E107                       	smpsAlterNote       $07
0008BA3F E701                       	dc.b	smpsNoAttack, $01
0008BA41 E10D                       	smpsAlterNote       $0D
0008BA43 E701                       	dc.b	smpsNoAttack, $01
0008BA45 E111                       	smpsAlterNote       $11
0008BA47 E701                       	dc.b	smpsNoAttack, $01
0008BA49 E10D                       	smpsAlterNote       $0D
0008BA4B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008BA4F E10F                       	smpsAlterNote       $0F
0008BA51 BA02 8001                  	dc.b	nA4, $02, nRst, $01
0008BA55 E110                       	smpsAlterNote       $10
0008BA57 BB03                       	dc.b	nBb4, $03
0008BA59 E10F                       	smpsAlterNote       $0F
0008BA5B BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
0008BA61 E110                       	smpsAlterNote       $10
0008BA63 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008BA67 E10F                       	smpsAlterNote       $0F
0008BA69 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
0008BA6F E110                       	smpsAlterNote       $10
0008BA71 D302 8001                  	dc.b	nBb6, $02, nRst, $01
0008BA75 E10F                       	smpsAlterNote       $0F
0008BA77 D20D                       	dc.b	nA6, $0D
0008BA79 E10C                       	smpsAlterNote       $0C
0008BA7B E701                       	dc.b	smpsNoAttack, $01
0008BA7D E108                       	smpsAlterNote       $08
0008BA7F E701                       	dc.b	smpsNoAttack, $01
0008BA81 E10C                       	smpsAlterNote       $0C
0008BA83 E701                       	dc.b	smpsNoAttack, $01
0008BA85 E10F                       	smpsAlterNote       $0F
0008BA87 E701                       	dc.b	smpsNoAttack, $01
0008BA89 E113                       	smpsAlterNote       $13
0008BA8B E701                       	dc.b	smpsNoAttack, $01
0008BA8D E10F                       	smpsAlterNote       $0F
0008BA8F E701                       	dc.b	smpsNoAttack, $01
0008BA91 E109                       	smpsAlterNote       $09
0008BA93 E701                       	dc.b	smpsNoAttack, $01
0008BA95 E108                       	smpsAlterNote       $08
0008BA97 E701                       	dc.b	smpsNoAttack, $01
0008BA99 E10C                       	smpsAlterNote       $0C
0008BA9B E701                       	dc.b	smpsNoAttack, $01
0008BA9D E112                       	smpsAlterNote       $12
0008BA9F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BAA3 E10F                       	smpsAlterNote       $0F
0008BAA5 E701                       	dc.b	smpsNoAttack, $01
0008BAA7 E109                       	smpsAlterNote       $09
0008BAA9 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0008BAAF E10D                       	smpsAlterNote       $0D
0008BAB1 CE07                       	dc.b	nF6, $07
0008BAB3 E10C                       	smpsAlterNote       $0C
0008BAB5 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008BAB9 E10D                       	smpsAlterNote       $0D
0008BABB CE03                       	dc.b	nF6, $03
0008BABD E10C                       	smpsAlterNote       $0C
0008BABF CC0D                       	dc.b	nEb6, $0D
0008BAC1 E109                       	smpsAlterNote       $09
0008BAC3 E701                       	dc.b	smpsNoAttack, $01
0008BAC5 E106                       	smpsAlterNote       $06
0008BAC7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BACB E10C                       	smpsAlterNote       $0C
0008BACD E701                       	dc.b	smpsNoAttack, $01
0008BACF E110                       	smpsAlterNote       $10
0008BAD1 E701                       	dc.b	smpsNoAttack, $01
0008BAD3 E10F                       	smpsAlterNote       $0F
0008BAD5 E701                       	dc.b	smpsNoAttack, $01
0008BAD7 E109                       	smpsAlterNote       $09
0008BAD9 E701                       	dc.b	smpsNoAttack, $01
0008BADB E105                       	smpsAlterNote       $05
0008BADD E701                       	dc.b	smpsNoAttack, $01
0008BADF E109                       	smpsAlterNote       $09
0008BAE1 E701                       	dc.b	smpsNoAttack, $01
0008BAE3 E10C                       	smpsAlterNote       $0C
0008BAE5 E701                       	dc.b	smpsNoAttack, $01
0008BAE7 E110                       	smpsAlterNote       $10
0008BAE9 E701                       	dc.b	smpsNoAttack, $01
0008BAEB E10C                       	smpsAlterNote       $0C
0008BAED E701                       	dc.b	smpsNoAttack, $01
0008BAEF E106                       	smpsAlterNote       $06
0008BAF1 E701                       	dc.b	smpsNoAttack, $01
0008BAF3 E105                       	smpsAlterNote       $05
0008BAF5 E701                       	dc.b	smpsNoAttack, $01
0008BAF7 E109                       	smpsAlterNote       $09
0008BAF9 E701                       	dc.b	smpsNoAttack, $01
0008BAFB E10F                       	smpsAlterNote       $0F
0008BAFD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BB01 E10C                       	smpsAlterNote       $0C
0008BB03 E701                       	dc.b	smpsNoAttack, $01
0008BB05 E10B                       	smpsAlterNote       $0B
0008BB07 CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
0008BB11 E10F                       	smpsAlterNote       $0F
0008BB13 C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
0008BB1D E10D                       	smpsAlterNote       $0D
0008BB1F C203                       	dc.b	nF5, $03
0008BB21 E10C                       	smpsAlterNote       $0C
0008BB23 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008BB27 E10D                       	smpsAlterNote       $0D
0008BB29 C20D                       	dc.b	nF5, $0D
0008BB2B E10C                       	smpsAlterNote       $0C
0008BB2D C10D 8001                  	dc.b	nE5, $0D, nRst, $01
0008BB31 E10B                       	smpsAlterNote       $0B
0008BB33 BF0D                       	dc.b	nD5, $0D
0008BB35 E108                       	smpsAlterNote       $08
0008BB37 E701                       	dc.b	smpsNoAttack, $01
0008BB39 E104                       	smpsAlterNote       $04
0008BB3B E701                       	dc.b	smpsNoAttack, $01
0008BB3D E108                       	smpsAlterNote       $08
0008BB3F E701                       	dc.b	smpsNoAttack, $01
0008BB41 E10E                       	smpsAlterNote       $0E
0008BB43 E701                       	dc.b	smpsNoAttack, $01
0008BB45 E10F                       	smpsAlterNote       $0F
0008BB47 E701                       	dc.b	smpsNoAttack, $01
0008BB49 E10B                       	smpsAlterNote       $0B
0008BB4B E701                       	dc.b	smpsNoAttack, $01
0008BB4D E105                       	smpsAlterNote       $05
0008BB4F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BB53 E108                       	smpsAlterNote       $08
0008BB55 E701                       	dc.b	smpsNoAttack, $01
0008BB57 E10E                       	smpsAlterNote       $0E
0008BB59 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BB5D E108                       	smpsAlterNote       $08
0008BB5F E701                       	dc.b	smpsNoAttack, $01
0008BB61 E105                       	smpsAlterNote       $05
0008BB63 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BB67 E10B                       	smpsAlterNote       $0B
0008BB69 E701                       	dc.b	smpsNoAttack, $01
0008BB6B E10F                       	smpsAlterNote       $0F
0008BB6D E701                       	dc.b	smpsNoAttack, $01
0008BB6F E10E                       	smpsAlterNote       $0E
0008BB71 E701                       	dc.b	smpsNoAttack, $01
0008BB73 E108                       	smpsAlterNote       $08
0008BB75 E701                       	dc.b	smpsNoAttack, $01
0008BB77 E104                       	smpsAlterNote       $04
0008BB79 E701                       	dc.b	smpsNoAttack, $01
0008BB7B E108                       	smpsAlterNote       $08
0008BB7D E701                       	dc.b	smpsNoAttack, $01
0008BB7F E10B                       	smpsAlterNote       $0B
0008BB81 E701                       	dc.b	smpsNoAttack, $01
0008BB83 E10F                       	smpsAlterNote       $0F
0008BB85 E701                       	dc.b	smpsNoAttack, $01
0008BB87 E10B                       	smpsAlterNote       $0B
0008BB89 E701                       	dc.b	smpsNoAttack, $01
0008BB8B E105                       	smpsAlterNote       $05
0008BB8D E701                       	dc.b	smpsNoAttack, $01
0008BB8F E104                       	smpsAlterNote       $04
0008BB91 E701                       	dc.b	smpsNoAttack, $01
0008BB93 E108                       	smpsAlterNote       $08
0008BB95 E701                       	dc.b	smpsNoAttack, $01
0008BB97 E10E                       	smpsAlterNote       $0E
0008BB99 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BB9D E10B                       	smpsAlterNote       $0B
0008BB9F E701                       	dc.b	smpsNoAttack, $01
0008BBA1 E105                       	smpsAlterNote       $05
0008BBA3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BBA7 E10B                       	smpsAlterNote       $0B
0008BBA9 E701                       	dc.b	smpsNoAttack, $01
0008BBAB E10E                       	smpsAlterNote       $0E
0008BBAD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BBB1 E108                       	smpsAlterNote       $08
0008BBB3 E701                       	dc.b	smpsNoAttack, $01
0008BBB5 E104                       	smpsAlterNote       $04
0008BBB7 E701                       	dc.b	smpsNoAttack, $01
0008BBB9 E105                       	smpsAlterNote       $05
0008BBBB E701                       	dc.b	smpsNoAttack, $01
0008BBBD E10B                       	smpsAlterNote       $0B
0008BBBF E701                       	dc.b	smpsNoAttack, $01
0008BBC1 E10F                       	smpsAlterNote       $0F
0008BBC3 E701                       	dc.b	smpsNoAttack, $01
0008BBC5 E10B                       	smpsAlterNote       $0B
0008BBC7 E701                       	dc.b	smpsNoAttack, $01
0008BBC9 E108                       	smpsAlterNote       $08
0008BBCB E701                       	dc.b	smpsNoAttack, $01
0008BBCD E104                       	smpsAlterNote       $04
0008BBCF E701                       	dc.b	smpsNoAttack, $01
0008BBD1 E108                       	smpsAlterNote       $08
0008BBD3 E701                       	dc.b	smpsNoAttack, $01
0008BBD5 E10E                       	smpsAlterNote       $0E
0008BBD7 E701                       	dc.b	smpsNoAttack, $01
0008BBD9 E10F                       	smpsAlterNote       $0F
0008BBDB E701                       	dc.b	smpsNoAttack, $01
0008BBDD E10B                       	smpsAlterNote       $0B
0008BBDF E701                       	dc.b	smpsNoAttack, $01
0008BBE1 E105                       	smpsAlterNote       $05
0008BBE3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BBE7 E108                       	smpsAlterNote       $08
0008BBE9 E701                       	dc.b	smpsNoAttack, $01
0008BBEB E10E                       	smpsAlterNote       $0E
0008BBED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BBF1 E108                       	smpsAlterNote       $08
0008BBF3 E701                       	dc.b	smpsNoAttack, $01
0008BBF5 E105                       	smpsAlterNote       $05
0008BBF7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BBFB E10B                       	smpsAlterNote       $0B
0008BBFD E701                       	dc.b	smpsNoAttack, $01
0008BBFF E10F                       	smpsAlterNote       $0F
0008BC01 E701                       	dc.b	smpsNoAttack, $01
0008BC03 E10E                       	smpsAlterNote       $0E
0008BC05 E701                       	dc.b	smpsNoAttack, $01
0008BC07 E108                       	smpsAlterNote       $08
0008BC09 E701                       	dc.b	smpsNoAttack, $01
0008BC0B E104                       	smpsAlterNote       $04
0008BC0D E701                       	dc.b	smpsNoAttack, $01
0008BC0F E108                       	smpsAlterNote       $08
0008BC11 E701                       	dc.b	smpsNoAttack, $01
0008BC13 E10B                       	smpsAlterNote       $0B
0008BC15 E701                       	dc.b	smpsNoAttack, $01
0008BC17 E10F                       	smpsAlterNote       $0F
0008BC19 E701                       	dc.b	smpsNoAttack, $01
0008BC1B E10B                       	smpsAlterNote       $0B
0008BC1D E701                       	dc.b	smpsNoAttack, $01
0008BC1F E105                       	smpsAlterNote       $05
0008BC21 E701                       	dc.b	smpsNoAttack, $01
0008BC23 E104                       	smpsAlterNote       $04
0008BC25 E701                       	dc.b	smpsNoAttack, $01
0008BC27 E105                       	smpsAlterNote       $05
0008BC29 8001                       	dc.b	nRst, $01
0008BC2B E10D                       	smpsAlterNote       $0D
0008BC2D C20D                       	dc.b	nF5, $0D
0008BC2F E107                       	smpsAlterNote       $07
0008BC31 E701                       	dc.b	smpsNoAttack, $01
0008BC33 E106                       	smpsAlterNote       $06
0008BC35 E701                       	dc.b	smpsNoAttack, $01
0008BC37 E10A                       	smpsAlterNote       $0A
0008BC39 E701                       	dc.b	smpsNoAttack, $01
0008BC3B E110                       	smpsAlterNote       $10
0008BC3D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BC41 E10D                       	smpsAlterNote       $0D
0008BC43 E701                       	dc.b	smpsNoAttack, $01
0008BC45 E107                       	smpsAlterNote       $07
0008BC47 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BC4B E10D                       	smpsAlterNote       $0D
0008BC4D E701                       	dc.b	smpsNoAttack, $01
0008BC4F E110                       	smpsAlterNote       $10
0008BC51 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BC55 E10A                       	smpsAlterNote       $0A
0008BC57 E701                       	dc.b	smpsNoAttack, $01
0008BC59 E106                       	smpsAlterNote       $06
0008BC5B E701                       	dc.b	smpsNoAttack, $01
0008BC5D E107                       	smpsAlterNote       $07
0008BC5F E701                       	dc.b	smpsNoAttack, $01
0008BC61 E10D                       	smpsAlterNote       $0D
0008BC63 E701                       	dc.b	smpsNoAttack, $01
0008BC65 E111                       	smpsAlterNote       $11
0008BC67 E701                       	dc.b	smpsNoAttack, $01
0008BC69 E10D                       	smpsAlterNote       $0D
0008BC6B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008BC6F E10C                       	smpsAlterNote       $0C
0008BC71 C10D                       	dc.b	nE5, $0D
0008BC73 E10D                       	smpsAlterNote       $0D
0008BC75 C20A                       	dc.b	nF5, $0A
0008BC77 E10C                       	smpsAlterNote       $0C
0008BC79 C10E                       	dc.b	nE5, $0E
0008BC7B E106                       	smpsAlterNote       $06
0008BC7D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BC81 E10C                       	smpsAlterNote       $0C
0008BC83 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008BC87 E10B                       	smpsAlterNote       $0B
0008BC89 BF0D                       	dc.b	nD5, $0D
0008BC8B E10C                       	smpsAlterNote       $0C
0008BC8D C107                       	dc.b	nE5, $07
0008BC8F E10D                       	smpsAlterNote       $0D
0008BC91 C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
0008BC9B E110                       	smpsAlterNote       $10
0008BC9D C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0008BCA3 E10F                       	smpsAlterNote       $0F
0008BCA5 C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
0008BCAD E10D                       	smpsAlterNote       $0D
0008BCAF D003                       	dc.b	nG6, $03
0008BCB3 E0C0                       	smpsPan             panCenter, $00
0008BCB5 E6FF                       	smpsAlterVol        $FF
0008BCB7 AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
0008BCC3 8001                       	dc.b	nRst, $01
0008BCC5 E10C                       	smpsAlterNote       $0C
0008BCC7 A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
0008BCD1 E604                       	smpsAlterVol        $04
0008BCD3 E10B                       	smpsAlterNote       $0B
0008BCD5 B306 8001                  	dc.b	nD4, $06, nRst, $01
0008BCD9 E10F                       	smpsAlterNote       $0F
0008BCDB AE03                       	dc.b	nA3, $03
0008BCDD E10D                       	smpsAlterNote       $0D
0008BCDF B603 8001                  	dc.b	nF4, $03, nRst, $01
0008BCE3 E10C                       	smpsAlterNote       $0C
0008BCE5 B506 8001                  	dc.b	nE4, $06, nRst, $01
0008BCE9 E10B                       	smpsAlterNote       $0B
0008BCEB B302 8001                  	dc.b	nD4, $02, nRst, $01
0008BCEF E10A                       	smpsAlterNote       $0A
0008BCF1 B103                       	dc.b	nC4, $03
0008BCF3 E110                       	smpsAlterNote       $10
0008BCF5 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008BCF9 E10F                       	smpsAlterNote       $0F
0008BCFB AE03 800A                  	dc.b	nA3, $03, nRst, $0A
0008BCFF E080                       	smpsPan             panLeft, $00
0008BD01 01                         	dc.b	$01
0008BD04 E6FB                       	smpsAlterVol        $FB
0008BD06 E1E4                       	smpsAlterNote       $E4
0008BD08 C501                       	dc.b	nAb5, $01
0008BD0A E1F4                       	smpsAlterNote       $F4
0008BD0C E701                       	dc.b	smpsNoAttack, $01
0008BD0E E104                       	smpsAlterNote       $04
0008BD10 E701                       	dc.b	smpsNoAttack, $01
0008BD12 E114                       	smpsAlterNote       $14
0008BD14 E701                       	dc.b	smpsNoAttack, $01
0008BD16 E11C                       	smpsAlterNote       $1C
0008BD18 E701                       	dc.b	smpsNoAttack, $01
0008BD1A E1EF                       	smpsAlterNote       $EF
0008BD1C E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008BD1F E1FF                       	smpsAlterNote       $FF
0008BD21 E701                       	dc.b	smpsNoAttack, $01
0008BD23 E10F                       	smpsAlterNote       $0F
0008BD25 C606                       	dc.b	nA5, $06
0008BD27 E109                       	smpsAlterNote       $09
0008BD29 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD2D E10F                       	smpsAlterNote       $0F
0008BD2F E701                       	dc.b	smpsNoAttack, $01
0008BD31 E112                       	smpsAlterNote       $12
0008BD33 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD37 E10C                       	smpsAlterNote       $0C
0008BD39 E701                       	dc.b	smpsNoAttack, $01
0008BD3B E108                       	smpsAlterNote       $08
0008BD3D E701                       	dc.b	smpsNoAttack, $01
0008BD3F E109                       	smpsAlterNote       $09
0008BD41 E701                       	dc.b	smpsNoAttack, $01
0008BD43 E10F                       	smpsAlterNote       $0F
0008BD45 E701                       	dc.b	smpsNoAttack, $01
0008BD47 E113                       	smpsAlterNote       $13
0008BD49 E701                       	dc.b	smpsNoAttack, $01
0008BD4B E10F                       	smpsAlterNote       $0F
0008BD4D E701                       	dc.b	smpsNoAttack, $01
0008BD4F E10C                       	smpsAlterNote       $0C
0008BD51 E701                       	dc.b	smpsNoAttack, $01
0008BD53 E108                       	smpsAlterNote       $08
0008BD55 E701                       	dc.b	smpsNoAttack, $01
0008BD57 E10C                       	smpsAlterNote       $0C
0008BD59 E701                       	dc.b	smpsNoAttack, $01
0008BD5B E112                       	smpsAlterNote       $12
0008BD5D E701                       	dc.b	smpsNoAttack, $01
0008BD5F E113                       	smpsAlterNote       $13
0008BD61 E701                       	dc.b	smpsNoAttack, $01
0008BD63 E10F                       	smpsAlterNote       $0F
0008BD65 E701                       	dc.b	smpsNoAttack, $01
0008BD67 E109                       	smpsAlterNote       $09
0008BD69 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD6D E10C                       	smpsAlterNote       $0C
0008BD6F E701                       	dc.b	smpsNoAttack, $01
0008BD71 E112                       	smpsAlterNote       $12
0008BD73 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD77 E10C                       	smpsAlterNote       $0C
0008BD79 E701                       	dc.b	smpsNoAttack, $01
0008BD7B E109                       	smpsAlterNote       $09
0008BD7D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD81 E10F                       	smpsAlterNote       $0F
0008BD83 E701                       	dc.b	smpsNoAttack, $01
0008BD85 E113                       	smpsAlterNote       $13
0008BD87 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008BD8B E10D                       	smpsAlterNote       $0D
0008BD8D C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0008BD93 E10C                       	smpsAlterNote       $0C
0008BD95 C102 8001                  	dc.b	nE5, $02, nRst, $01
0008BD99 E10D                       	smpsAlterNote       $0D
0008BD9B C201 8001                  	dc.b	nF5, $01, nRst, $01
0008BD9F E10C                       	smpsAlterNote       $0C
0008BDA1 C102                       	dc.b	nE5, $02
0008BDA3 E10B                       	smpsAlterNote       $0B
0008BDA5 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008BDA9 E10C                       	smpsAlterNote       $0C
0008BDAB C101 8001                  	dc.b	nE5, $01, nRst, $01
0008BDAF E10B                       	smpsAlterNote       $0B
0008BDB1 BF02                       	dc.b	nD5, $02
0008BDB3 E10A                       	smpsAlterNote       $0A
0008BDB5 BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
0008BDBF E110                       	smpsAlterNote       $10
0008BDC1 BB02                       	dc.b	nBb4, $02
0008BDC3 E10A                       	smpsAlterNote       $0A
0008BDC5 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008BDC9 E110                       	smpsAlterNote       $10
0008BDCB BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008BDCF E10F                       	smpsAlterNote       $0F
0008BDD1 BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008BDD5 E110                       	smpsAlterNote       $10
0008BDD7 BB02                       	dc.b	nBb4, $02
0008BDD9 E10F                       	smpsAlterNote       $0F
0008BDDB BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0008BDE5 E10C                       	smpsAlterNote       $0C
0008BDE7 B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
0008BDEF E10B                       	smpsAlterNote       $0B
0008BDF1 BE01 8001                  	dc.b	nCs5, $01, nRst, $01
0008BDF5 E10F                       	smpsAlterNote       $0F
0008BDF7 BA02                       	dc.b	nA4, $02
0008BDFB E0C0                       	smpsPan             panCenter, $00
0008BDFD E601                       	smpsAlterVol        $01
0008BDFF E109                       	smpsAlterNote       $09
0008BE01 AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
0008BE0D E108                       	smpsAlterNote       $08
0008BE0F A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
0008BE15 E107                       	smpsAlterNote       $07
0008BE17 B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
0008BE1D E109                       	smpsAlterNote       $09
0008BE1F B603 8001                  	dc.b	nF4, $03, nRst, $01
0008BE23 E108                       	smpsAlterNote       $08
0008BE25 B506 8001                  	dc.b	nE4, $06, nRst, $01
0008BE29 E107                       	smpsAlterNote       $07
0008BE2B B302 8001                  	dc.b	nD4, $02, nRst, $01
0008BE2F E106                       	smpsAlterNote       $06
0008BE31 B103                       	dc.b	nC4, $03
0008BE33 E10C                       	smpsAlterNote       $0C
0008BE35 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008BE3B E080                       	smpsPan             panLeft, $00
0008BE3D 07                         	dc.b	$07
0008BE3E E6FE                       	smpsAlterVol        $FE
0008BE40 E10B                       	smpsAlterNote       $0B
0008BE42 B20D                       	dc.b	nCs4, $0D
0008BE44 E105                       	smpsAlterNote       $05
0008BE46 E701                       	dc.b	smpsNoAttack, $01
0008BE48 E104                       	smpsAlterNote       $04
0008BE4A E701                       	dc.b	smpsNoAttack, $01
0008BE4C E108                       	smpsAlterNote       $08
0008BE4E E701                       	dc.b	smpsNoAttack, $01
0008BE50 E10E                       	smpsAlterNote       $0E
0008BE52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BE56 E10B                       	smpsAlterNote       $0B
0008BE58 E701                       	dc.b	smpsNoAttack, $01
0008BE5A E105                       	smpsAlterNote       $05
0008BE5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BE60 E10B                       	smpsAlterNote       $0B
0008BE62 E701                       	dc.b	smpsNoAttack, $01
0008BE64 E10E                       	smpsAlterNote       $0E
0008BE66 E701                       	dc.b	smpsNoAttack, $01
0008BE68 E10F                       	smpsAlterNote       $0F
0008BE6A 8001                       	dc.b	nRst, $01
0008BE6C E10B                       	smpsAlterNote       $0B
0008BE6E B30D                       	dc.b	nD4, $0D
0008BE70 E105                       	smpsAlterNote       $05
0008BE72 E701                       	dc.b	smpsNoAttack, $01
0008BE74 E104                       	smpsAlterNote       $04
0008BE76 E701                       	dc.b	smpsNoAttack, $01
0008BE78 E108                       	smpsAlterNote       $08
0008BE7A E701                       	dc.b	smpsNoAttack, $01
0008BE7C E10E                       	smpsAlterNote       $0E
0008BE7E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BE82 E10B                       	smpsAlterNote       $0B
0008BE84 E701                       	dc.b	smpsNoAttack, $01
0008BE86 E105                       	smpsAlterNote       $05
0008BE88 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BE8C E10B                       	smpsAlterNote       $0B
0008BE8E E701                       	dc.b	smpsNoAttack, $01
0008BE90 E10E                       	smpsAlterNote       $0E
0008BE92 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BE96 E108                       	smpsAlterNote       $08
0008BE98 E701                       	dc.b	smpsNoAttack, $01
0008BE9A E104                       	smpsAlterNote       $04
0008BE9C E701                       	dc.b	smpsNoAttack, $01
0008BE9E E105                       	smpsAlterNote       $05
0008BEA0 E701                       	dc.b	smpsNoAttack, $01
0008BEA2 E10B                       	smpsAlterNote       $0B
0008BEA4 E701                       	dc.b	smpsNoAttack, $01
0008BEA6 E10F                       	smpsAlterNote       $0F
0008BEA8 E701                       	dc.b	smpsNoAttack, $01
0008BEAA E10B                       	smpsAlterNote       $0B
0008BEAC E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008BEB0 E10C                       	smpsAlterNote       $0C
0008BEB2 B50D                       	dc.b	nE4, $0D
0008BEB4 E106                       	smpsAlterNote       $06
0008BEB6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BEBA E10C                       	smpsAlterNote       $0C
0008BEBC E701                       	dc.b	smpsNoAttack, $01
0008BEBE E10F                       	smpsAlterNote       $0F
0008BEC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BEC4 E109                       	smpsAlterNote       $09
0008BEC6 E701                       	dc.b	smpsNoAttack, $01
0008BEC8 E105                       	smpsAlterNote       $05
0008BECA E701                       	dc.b	smpsNoAttack, $01
0008BECC E106                       	smpsAlterNote       $06
0008BECE E701                       	dc.b	smpsNoAttack, $01
0008BED0 E10C                       	smpsAlterNote       $0C
0008BED2 E701                       	dc.b	smpsNoAttack, $01
0008BED4 E110                       	smpsAlterNote       $10
0008BED6 E701                       	dc.b	smpsNoAttack, $01
0008BED8 E10B                       	smpsAlterNote       $0B
0008BEDA B30E                       	dc.b	nD4, $0E
0008BEDC E105                       	smpsAlterNote       $05
0008BEDE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BEE2 E10B                       	smpsAlterNote       $0B
0008BEE4 E701                       	dc.b	smpsNoAttack, $01
0008BEE6 E10E                       	smpsAlterNote       $0E
0008BEE8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BEEC E108                       	smpsAlterNote       $08
0008BEEE E701                       	dc.b	smpsNoAttack, $01
0008BEF0 E104                       	smpsAlterNote       $04
0008BEF2 E701                       	dc.b	smpsNoAttack, $01
0008BEF4 E105                       	smpsAlterNote       $05
0008BEF6 E701                       	dc.b	smpsNoAttack, $01
0008BEF8 E10B                       	smpsAlterNote       $0B
0008BEFA E701                       	dc.b	smpsNoAttack, $01
0008BEFC E10F                       	smpsAlterNote       $0F
0008BEFE E701                       	dc.b	smpsNoAttack, $01
0008BF00 E10B                       	smpsAlterNote       $0B
0008BF02 E701                       	dc.b	smpsNoAttack, $01
0008BF04 E108                       	smpsAlterNote       $08
0008BF06 E701                       	dc.b	smpsNoAttack, $01
0008BF08 E104                       	smpsAlterNote       $04
0008BF0A E701                       	dc.b	smpsNoAttack, $01
0008BF0C E108                       	smpsAlterNote       $08
0008BF0E E701                       	dc.b	smpsNoAttack, $01
0008BF10 E10E                       	smpsAlterNote       $0E
0008BF12 E701                       	dc.b	smpsNoAttack, $01
0008BF14 E10F                       	smpsAlterNote       $0F
0008BF16 E701                       	dc.b	smpsNoAttack, $01
0008BF18 E10B                       	smpsAlterNote       $0B
0008BF1A E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0008BF1E E108                       	smpsAlterNote       $08
0008BF20 E701                       	dc.b	smpsNoAttack, $01
0008BF22 E105                       	smpsAlterNote       $05
0008BF24 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BF28 E10B                       	smpsAlterNote       $0B
0008BF2A E701                       	dc.b	smpsNoAttack, $01
0008BF2C E10F                       	smpsAlterNote       $0F
0008BF2E E701                       	dc.b	smpsNoAttack, $01
0008BF30 E10E                       	smpsAlterNote       $0E
0008BF32 E701                       	dc.b	smpsNoAttack, $01
0008BF34 E108                       	smpsAlterNote       $08
0008BF36 E701                       	dc.b	smpsNoAttack, $01
0008BF38 E104                       	smpsAlterNote       $04
0008BF3A E701                       	dc.b	smpsNoAttack, $01
0008BF3C E108                       	smpsAlterNote       $08
0008BF3E E701                       	dc.b	smpsNoAttack, $01
0008BF40 E10B                       	smpsAlterNote       $0B
0008BF42 E701                       	dc.b	smpsNoAttack, $01
0008BF44 E10F                       	smpsAlterNote       $0F
0008BF46 E701                       	dc.b	smpsNoAttack, $01
0008BF48 E10B                       	smpsAlterNote       $0B
0008BF4A B30D                       	dc.b	nD4, $0D
0008BF4C E108                       	smpsAlterNote       $08
0008BF4E E701                       	dc.b	smpsNoAttack, $01
0008BF50 E105                       	smpsAlterNote       $05
0008BF52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BF56 E10B                       	smpsAlterNote       $0B
0008BF58 E701                       	dc.b	smpsNoAttack, $01
0008BF5A E10F                       	smpsAlterNote       $0F
0008BF5C E701                       	dc.b	smpsNoAttack, $01
0008BF5E E10E                       	smpsAlterNote       $0E
0008BF60 E701                       	dc.b	smpsNoAttack, $01
0008BF62 E108                       	smpsAlterNote       $08
0008BF64 E701                       	dc.b	smpsNoAttack, $01
0008BF66 E104                       	smpsAlterNote       $04
0008BF68 E701                       	dc.b	smpsNoAttack, $01
0008BF6A E108                       	smpsAlterNote       $08
0008BF6C E701                       	dc.b	smpsNoAttack, $01
0008BF6E E10B                       	smpsAlterNote       $0B
0008BF70 E701                       	dc.b	smpsNoAttack, $01
0008BF72 E10F                       	smpsAlterNote       $0F
0008BF74 E701                       	dc.b	smpsNoAttack, $01
0008BF76 E10B                       	smpsAlterNote       $0B
0008BF78 E701                       	dc.b	smpsNoAttack, $01
0008BF7A E105                       	smpsAlterNote       $05
0008BF7C E701                       	dc.b	smpsNoAttack, $01
0008BF7E E104                       	smpsAlterNote       $04
0008BF80 E701                       	dc.b	smpsNoAttack, $01
0008BF82 E108                       	smpsAlterNote       $08
0008BF84 E701                       	dc.b	smpsNoAttack, $01
0008BF86 E10E                       	smpsAlterNote       $0E
0008BF88 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BF8C E10B                       	smpsAlterNote       $0B
0008BF8E 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
0008BF92 E108                       	smpsAlterNote       $08
0008BF94 E701                       	dc.b	smpsNoAttack, $01
0008BF96 E104                       	smpsAlterNote       $04
0008BF98 E701                       	dc.b	smpsNoAttack, $01
0008BF9A E108                       	smpsAlterNote       $08
0008BF9C E701                       	dc.b	smpsNoAttack, $01
0008BF9E E10B                       	smpsAlterNote       $0B
0008BFA0 E701                       	dc.b	smpsNoAttack, $01
0008BFA4 E0C0                       	smpsPan             panCenter, $00
0008BFA6 E601                       	smpsAlterVol        $01
0008BFA8 E108                       	smpsAlterNote       $08
0008BFAA A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
0008BFB6 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
0008BFBE E080                       	smpsPan             panLeft, $00
0008BFC0 07                         	dc.b	$07
0008BFC1 E6FF                       	smpsAlterVol        $FF
0008BFC3 E10D                       	smpsAlterNote       $0D
0008BFC5 B60D                       	dc.b	nF4, $0D
0008BFC7 E10A                       	smpsAlterNote       $0A
0008BFC9 E701                       	dc.b	smpsNoAttack, $01
0008BFCB E106                       	smpsAlterNote       $06
0008BFCD E701                       	dc.b	smpsNoAttack, $01
0008BFCF E10A                       	smpsAlterNote       $0A
0008BFD1 E701                       	dc.b	smpsNoAttack, $01
0008BFD3 E110                       	smpsAlterNote       $10
0008BFD5 E701                       	dc.b	smpsNoAttack, $01
0008BFD7 E111                       	smpsAlterNote       $11
0008BFD9 E701                       	dc.b	smpsNoAttack, $01
0008BFDB E10D                       	smpsAlterNote       $0D
0008BFDD E701                       	dc.b	smpsNoAttack, $01
0008BFDF E107                       	smpsAlterNote       $07
0008BFE1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BFE5 E10A                       	smpsAlterNote       $0A
0008BFE7 E701                       	dc.b	smpsNoAttack, $01
0008BFE9 E110                       	smpsAlterNote       $10
0008BFEB E701                       	dc.b	smpsNoAttack, $01
0008BFED E111                       	smpsAlterNote       $11
0008BFEF 8001                       	dc.b	nRst, $01
0008BFF1 E10D                       	smpsAlterNote       $0D
0008BFF3 B80D                       	dc.b	nG4, $0D
0008BFF5 E10A                       	smpsAlterNote       $0A
0008BFF7 E701                       	dc.b	smpsNoAttack, $01
0008BFF9 E106                       	smpsAlterNote       $06
0008BFFB E701                       	dc.b	smpsNoAttack, $01
0008BFFD E10A                       	smpsAlterNote       $0A
0008BFFF E701                       	dc.b	smpsNoAttack, $01
0008C001 E110                       	smpsAlterNote       $10
0008C003 E701                       	dc.b	smpsNoAttack, $01
0008C005 E111                       	smpsAlterNote       $11
0008C007 E701                       	dc.b	smpsNoAttack, $01
0008C009 E10D                       	smpsAlterNote       $0D
0008C00B E701                       	dc.b	smpsNoAttack, $01
0008C00D E107                       	smpsAlterNote       $07
0008C00F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C013 E10D                       	smpsAlterNote       $0D
0008C015 E701                       	dc.b	smpsNoAttack, $01
0008C017 E110                       	smpsAlterNote       $10
0008C019 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C01D E10A                       	smpsAlterNote       $0A
0008C01F E701                       	dc.b	smpsNoAttack, $01
0008C021 E106                       	smpsAlterNote       $06
0008C023 E701                       	dc.b	smpsNoAttack, $01
0008C025 E107                       	smpsAlterNote       $07
0008C027 E701                       	dc.b	smpsNoAttack, $01
0008C029 E10D                       	smpsAlterNote       $0D
0008C02B E701                       	dc.b	smpsNoAttack, $01
0008C02D E111                       	smpsAlterNote       $11
0008C02F E701                       	dc.b	smpsNoAttack, $01
0008C031 E10D                       	smpsAlterNote       $0D
0008C033 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C037 E10F                       	smpsAlterNote       $0F
0008C039 BA0D                       	dc.b	nA4, $0D
0008C03B E109                       	smpsAlterNote       $09
0008C03D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C041 E10C                       	smpsAlterNote       $0C
0008C043 E701                       	dc.b	smpsNoAttack, $01
0008C045 E112                       	smpsAlterNote       $12
0008C047 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C04B E10C                       	smpsAlterNote       $0C
0008C04D E701                       	dc.b	smpsNoAttack, $01
0008C04F E109                       	smpsAlterNote       $09
0008C051 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C055 E10F                       	smpsAlterNote       $0F
0008C057 E701                       	dc.b	smpsNoAttack, $01
0008C059 E113                       	smpsAlterNote       $13
0008C05B E701                       	dc.b	smpsNoAttack, $01
0008C05D E112                       	smpsAlterNote       $12
0008C05F E701                       	dc.b	smpsNoAttack, $01
0008C061 E10C                       	smpsAlterNote       $0C
0008C063 E701                       	dc.b	smpsNoAttack, $01
0008C065 E108                       	smpsAlterNote       $08
0008C067 E701                       	dc.b	smpsNoAttack, $01
0008C069 E10C                       	smpsAlterNote       $0C
0008C06B E701                       	dc.b	smpsNoAttack, $01
0008C06D E10F                       	smpsAlterNote       $0F
0008C06F E701                       	dc.b	smpsNoAttack, $01
0008C071 E113                       	smpsAlterNote       $13
0008C073 E701                       	dc.b	smpsNoAttack, $01
0008C075 E10F                       	smpsAlterNote       $0F
0008C077 E701                       	dc.b	smpsNoAttack, $01
0008C079 E109                       	smpsAlterNote       $09
0008C07B E701                       	dc.b	smpsNoAttack, $01
0008C07D E108                       	smpsAlterNote       $08
0008C07F E701                       	dc.b	smpsNoAttack, $01
0008C081 E10C                       	smpsAlterNote       $0C
0008C083 E701                       	dc.b	smpsNoAttack, $01
0008C085 E112                       	smpsAlterNote       $12
0008C087 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C08B E10F                       	smpsAlterNote       $0F
0008C08D E701                       	dc.b	smpsNoAttack, $01
0008C08F E109                       	smpsAlterNote       $09
0008C091 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C095 E10F                       	smpsAlterNote       $0F
0008C097 E701                       	dc.b	smpsNoAttack, $01
0008C099 E112                       	smpsAlterNote       $12
0008C09B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C09F E10C                       	smpsAlterNote       $0C
0008C0A1 E701                       	dc.b	smpsNoAttack, $01
0008C0A3 E108                       	smpsAlterNote       $08
0008C0A5 E701                       	dc.b	smpsNoAttack, $01
0008C0A7 E109                       	smpsAlterNote       $09
0008C0A9 E701                       	dc.b	smpsNoAttack, $01
0008C0AB E10C                       	smpsAlterNote       $0C
0008C0AD B50A                       	dc.b	nE4, $0A
0008C0AF E10D                       	smpsAlterNote       $0D
0008C0B1 B60E                       	dc.b	nF4, $0E
0008C0B3 E107                       	smpsAlterNote       $07
0008C0B5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C0B9 E10D                       	smpsAlterNote       $0D
0008C0BB E701                       	dc.b	smpsNoAttack, $01
0008C0BD E110                       	smpsAlterNote       $10
0008C0BF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C0C3 E10A                       	smpsAlterNote       $0A
0008C0C5 E701                       	dc.b	smpsNoAttack, $01
0008C0C7 E106                       	smpsAlterNote       $06
0008C0C9 E701                       	dc.b	smpsNoAttack, $01
0008C0CB E107                       	smpsAlterNote       $07
0008C0CD E701                       	dc.b	smpsNoAttack, $01
0008C0CF E10D                       	smpsAlterNote       $0D
0008C0D1 E701                       	dc.b	smpsNoAttack, $01
0008C0D3 E111                       	smpsAlterNote       $11
0008C0D5 E701                       	dc.b	smpsNoAttack, $01
0008C0D7 E10D                       	smpsAlterNote       $0D
0008C0D9 B80D                       	dc.b	nG4, $0D
0008C0DB E10A                       	smpsAlterNote       $0A
0008C0DD E701                       	dc.b	smpsNoAttack, $01
0008C0DF E107                       	smpsAlterNote       $07
0008C0E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C0E5 E10D                       	smpsAlterNote       $0D
0008C0E7 E701                       	dc.b	smpsNoAttack, $01
0008C0E9 E111                       	smpsAlterNote       $11
0008C0EB E701                       	dc.b	smpsNoAttack, $01
0008C0ED E110                       	smpsAlterNote       $10
0008C0EF E701                       	dc.b	smpsNoAttack, $01
0008C0F1 E10A                       	smpsAlterNote       $0A
0008C0F3 E701                       	dc.b	smpsNoAttack, $01
0008C0F5 E106                       	smpsAlterNote       $06
0008C0F7 E701                       	dc.b	smpsNoAttack, $01
0008C0F9 E10A                       	smpsAlterNote       $0A
0008C0FB E701                       	dc.b	smpsNoAttack, $01
0008C0FD E10D                       	smpsAlterNote       $0D
0008C0FF E701                       	dc.b	smpsNoAttack, $01
0008C101 E111                       	smpsAlterNote       $11
0008C103 E701                       	dc.b	smpsNoAttack, $01
0008C105 E10D                       	smpsAlterNote       $0D
0008C107 E701                       	dc.b	smpsNoAttack, $01
0008C109 E107                       	smpsAlterNote       $07
0008C10B E701                       	dc.b	smpsNoAttack, $01
0008C10D E106                       	smpsAlterNote       $06
0008C10F E701                       	dc.b	smpsNoAttack, $01
0008C111 E10A                       	smpsAlterNote       $0A
0008C113 E701                       	dc.b	smpsNoAttack, $01
0008C115 E110                       	smpsAlterNote       $10
0008C117 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C11B E10D                       	smpsAlterNote       $0D
0008C11D E701                       	dc.b	smpsNoAttack, $01
0008C11F E10F                       	smpsAlterNote       $0F
0008C121 BA0D                       	dc.b	nA4, $0D
0008C123 E10C                       	smpsAlterNote       $0C
0008C125 E701                       	dc.b	smpsNoAttack, $01
0008C127 E108                       	smpsAlterNote       $08
0008C129 E701                       	dc.b	smpsNoAttack, $01
0008C12B E109                       	smpsAlterNote       $09
0008C12D E701                       	dc.b	smpsNoAttack, $01
0008C12F E10F                       	smpsAlterNote       $0F
0008C131 E701                       	dc.b	smpsNoAttack, $01
0008C133 E113                       	smpsAlterNote       $13
0008C135 E701                       	dc.b	smpsNoAttack, $01
0008C137 E10F                       	smpsAlterNote       $0F
0008C139 E701                       	dc.b	smpsNoAttack, $01
0008C13B E10C                       	smpsAlterNote       $0C
0008C13D E701                       	dc.b	smpsNoAttack, $01
0008C13F E108                       	smpsAlterNote       $08
0008C141 E701                       	dc.b	smpsNoAttack, $01
0008C143 E10C                       	smpsAlterNote       $0C
0008C145 E701                       	dc.b	smpsNoAttack, $01
0008C147 E112                       	smpsAlterNote       $12
0008C149 E701                       	dc.b	smpsNoAttack, $01
0008C14B E113                       	smpsAlterNote       $13
0008C14D E701                       	dc.b	smpsNoAttack, $01
0008C14F E10F                       	smpsAlterNote       $0F
0008C151 E701                       	dc.b	smpsNoAttack, $01
0008C153 E109                       	smpsAlterNote       $09
0008C155 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C159 E10C                       	smpsAlterNote       $0C
0008C15B E701                       	dc.b	smpsNoAttack, $01
0008C15D E112                       	smpsAlterNote       $12
0008C15F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C163 E10C                       	smpsAlterNote       $0C
0008C165 E701                       	dc.b	smpsNoAttack, $01
0008C167 E109                       	smpsAlterNote       $09
0008C169 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C16D E10F                       	smpsAlterNote       $0F
0008C16F E701                       	dc.b	smpsNoAttack, $01
0008C171 E113                       	smpsAlterNote       $13
0008C173 E701                       	dc.b	smpsNoAttack, $01
0008C175 E112                       	smpsAlterNote       $12
0008C177 E701                       	dc.b	smpsNoAttack, $01
0008C179 E10C                       	smpsAlterNote       $0C
0008C17B E701                       	dc.b	smpsNoAttack, $01
0008C17D E109                       	smpsAlterNote       $09
0008C17F 8001                       	dc.b	nRst, $01
0008C181 E10D                       	smpsAlterNote       $0D
0008C183 B60A                       	dc.b	nF4, $0A
0008C185 E10C                       	smpsAlterNote       $0C
0008C187 B506 8001                  	dc.b	nE4, $06, nRst, $01
0008C18B E10B                       	smpsAlterNote       $0B
0008C18D B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008C191 E10C                       	smpsAlterNote       $0C
0008C193 B503                       	dc.b	nE4, $03
0008C195 E10D                       	smpsAlterNote       $0D
0008C197 B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
0008C1A1 E10C                       	smpsAlterNote       $0C
0008C1A3 E701                       	dc.b	smpsNoAttack, $01
0008C1A5 E108                       	smpsAlterNote       $08
0008C1A7 E701                       	dc.b	smpsNoAttack, $01
0008C1A9 E10C                       	smpsAlterNote       $0C
0008C1AB E701                       	dc.b	smpsNoAttack, $01
0008C1AD E112                       	smpsAlterNote       $12
0008C1AF E701                       	dc.b	smpsNoAttack, $01
0008C1B1 E113                       	smpsAlterNote       $13
0008C1B3 E701                       	dc.b	smpsNoAttack, $01
0008C1B5 E10F                       	smpsAlterNote       $0F
0008C1B7 E701                       	dc.b	smpsNoAttack, $01
0008C1B9 E109                       	smpsAlterNote       $09
0008C1BB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C1BF E10C                       	smpsAlterNote       $0C
0008C1C1 E701                       	dc.b	smpsNoAttack, $01
0008C1C3 E112                       	smpsAlterNote       $12
0008C1C5 E701                       	dc.b	smpsNoAttack, $01
0008C1C7 E113                       	smpsAlterNote       $13
0008C1C9 8001                       	dc.b	nRst, $01
0008C1CB E10D                       	smpsAlterNote       $0D
0008C1CD C20D                       	dc.b	nF5, $0D
0008C1CF E10A                       	smpsAlterNote       $0A
0008C1D1 E701                       	dc.b	smpsNoAttack, $01
0008C1D3 E106                       	smpsAlterNote       $06
0008C1D5 E701                       	dc.b	smpsNoAttack, $01
0008C1D7 E10A                       	smpsAlterNote       $0A
0008C1D9 E701                       	dc.b	smpsNoAttack, $01
0008C1DB E110                       	smpsAlterNote       $10
0008C1DD E701                       	dc.b	smpsNoAttack, $01
0008C1DF E111                       	smpsAlterNote       $11
0008C1E1 E701                       	dc.b	smpsNoAttack, $01
0008C1E3 E10D                       	smpsAlterNote       $0D
0008C1E5 E701                       	dc.b	smpsNoAttack, $01
0008C1E7 E107                       	smpsAlterNote       $07
0008C1E9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C1ED E10A                       	smpsAlterNote       $0A
0008C1EF E701                       	dc.b	smpsNoAttack, $01
0008C1F1 E110                       	smpsAlterNote       $10
0008C1F3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C1F7 E10A                       	smpsAlterNote       $0A
0008C1F9 E701                       	dc.b	smpsNoAttack, $01
0008C1FB E107                       	smpsAlterNote       $07
0008C1FD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C201 E10D                       	smpsAlterNote       $0D
0008C203 E701                       	dc.b	smpsNoAttack, $01
0008C205 E111                       	smpsAlterNote       $11
0008C207 E701                       	dc.b	smpsNoAttack, $01
0008C209 E110                       	smpsAlterNote       $10
0008C20B E701                       	dc.b	smpsNoAttack, $01
0008C20D E10A                       	smpsAlterNote       $0A
0008C20F E701                       	dc.b	smpsNoAttack, $01
0008C211 E106                       	smpsAlterNote       $06
0008C213 E701                       	dc.b	smpsNoAttack, $01
0008C215 E10A                       	smpsAlterNote       $0A
0008C217 E701                       	dc.b	smpsNoAttack, $01
0008C219 E10D                       	smpsAlterNote       $0D
0008C21B E701                       	dc.b	smpsNoAttack, $01
0008C21D E111                       	smpsAlterNote       $11
0008C21F E701                       	dc.b	smpsNoAttack, $01
0008C221 E10D                       	smpsAlterNote       $0D
0008C223 E701                       	dc.b	smpsNoAttack, $01
0008C225 E107                       	smpsAlterNote       $07
0008C227 E701                       	dc.b	smpsNoAttack, $01
0008C229 E106                       	smpsAlterNote       $06
0008C22B E701                       	dc.b	smpsNoAttack, $01
0008C22D E10A                       	smpsAlterNote       $0A
0008C22F E701                       	dc.b	smpsNoAttack, $01
0008C231 E110                       	smpsAlterNote       $10
0008C233 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C237 E10D                       	smpsAlterNote       $0D
0008C239 E701                       	dc.b	smpsNoAttack, $01
0008C23B E107                       	smpsAlterNote       $07
0008C23D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C241 E10D                       	smpsAlterNote       $0D
0008C243 E701                       	dc.b	smpsNoAttack, $01
0008C245 E110                       	smpsAlterNote       $10
0008C247 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C24B E10A                       	smpsAlterNote       $0A
0008C24D E701                       	dc.b	smpsNoAttack, $01
0008C24F E106                       	smpsAlterNote       $06
0008C251 E701                       	dc.b	smpsNoAttack, $01
0008C253 E107                       	smpsAlterNote       $07
0008C255 E701                       	dc.b	smpsNoAttack, $01
0008C257 E10D                       	smpsAlterNote       $0D
0008C259 E701                       	dc.b	smpsNoAttack, $01
0008C25B E111                       	smpsAlterNote       $11
0008C25D E701                       	dc.b	smpsNoAttack, $01
0008C25F E10D                       	smpsAlterNote       $0D
0008C261 E701                       	dc.b	smpsNoAttack, $01
0008C263 E10A                       	smpsAlterNote       $0A
0008C265 E701                       	dc.b	smpsNoAttack, $01
0008C267 E107                       	smpsAlterNote       $07
0008C269 8001                       	dc.b	nRst, $01
0008C26B E10D                       	smpsAlterNote       $0D
0008C26D C206 8001                  	dc.b	nF5, $06, nRst, $01
0008C273 E601                       	smpsAlterVol        $01
0008C275 E110                       	smpsAlterNote       $10
0008C277 BB0D                       	dc.b	nBb4, $0D
0008C279 E10A                       	smpsAlterNote       $0A
0008C27B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C27F E110                       	smpsAlterNote       $10
0008C281 E701                       	dc.b	smpsNoAttack, $01
0008C283 E113                       	smpsAlterNote       $13
0008C285 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C289 E10D                       	smpsAlterNote       $0D
0008C28B E701                       	dc.b	smpsNoAttack, $01
0008C28D E109                       	smpsAlterNote       $09
0008C28F E701                       	dc.b	smpsNoAttack, $01
0008C291 E10A                       	smpsAlterNote       $0A
0008C293 E701                       	dc.b	smpsNoAttack, $01
0008C295 E110                       	smpsAlterNote       $10
0008C297 E701                       	dc.b	smpsNoAttack, $01
0008C299 E114                       	smpsAlterNote       $14
0008C29B E701                       	dc.b	smpsNoAttack, $01
0008C29D E110                       	smpsAlterNote       $10
0008C29F E701                       	dc.b	smpsNoAttack, $01
0008C2A1 E10D                       	smpsAlterNote       $0D
0008C2A3 E701                       	dc.b	smpsNoAttack, $01
0008C2A5 E109                       	smpsAlterNote       $09
0008C2A7 E701                       	dc.b	smpsNoAttack, $01
0008C2A9 E10A                       	smpsAlterNote       $0A
0008C2AB 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0008C2AF E107                       	smpsAlterNote       $07
0008C2B1 E701                       	dc.b	smpsNoAttack, $01
0008C2B3 E103                       	smpsAlterNote       $03
0008C2B5 E701                       	dc.b	smpsNoAttack, $01
0008C2B7 E107                       	smpsAlterNote       $07
0008C2B9 E701                       	dc.b	smpsNoAttack, $01
0008C2BB E10D                       	smpsAlterNote       $0D
0008C2BD E701                       	dc.b	smpsNoAttack, $01
0008C2BF E10E                       	smpsAlterNote       $0E
0008C2C1 E701                       	dc.b	smpsNoAttack, $01
0008C2C3 E10A                       	smpsAlterNote       $0A
0008C2C5 E701                       	dc.b	smpsNoAttack, $01
0008C2C7 E104                       	smpsAlterNote       $04
0008C2C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C2CD E107                       	smpsAlterNote       $07
0008C2CF E701                       	dc.b	smpsNoAttack, $01
0008C2D1 E10D                       	smpsAlterNote       $0D
0008C2D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C2D7 E107                       	smpsAlterNote       $07
0008C2D9 E701                       	dc.b	smpsNoAttack, $01
0008C2DB E104                       	smpsAlterNote       $04
0008C2DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C2E1 E10B                       	smpsAlterNote       $0B
0008C2E3 BF0D                       	dc.b	nD5, $0D
0008C2E5 E108                       	smpsAlterNote       $08
0008C2E7 E701                       	dc.b	smpsNoAttack, $01
0008C2E9 E105                       	smpsAlterNote       $05
0008C2EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C2EF E10B                       	smpsAlterNote       $0B
0008C2F1 E701                       	dc.b	smpsNoAttack, $01
0008C2F3 E10F                       	smpsAlterNote       $0F
0008C2F5 E701                       	dc.b	smpsNoAttack, $01
0008C2F7 E10E                       	smpsAlterNote       $0E
0008C2F9 E701                       	dc.b	smpsNoAttack, $01
0008C2FB E108                       	smpsAlterNote       $08
0008C2FD E701                       	dc.b	smpsNoAttack, $01
0008C2FF E104                       	smpsAlterNote       $04
0008C301 E701                       	dc.b	smpsNoAttack, $01
0008C303 E108                       	smpsAlterNote       $08
0008C305 E701                       	dc.b	smpsNoAttack, $01
0008C307 E10B                       	smpsAlterNote       $0B
0008C309 E701                       	dc.b	smpsNoAttack, $01
0008C30B E10F                       	smpsAlterNote       $0F
0008C30D E701                       	dc.b	smpsNoAttack, $01
0008C30F E10B                       	smpsAlterNote       $0B
0008C311 E701                       	dc.b	smpsNoAttack, $01
0008C313 E105                       	smpsAlterNote       $05
0008C315 E701                       	dc.b	smpsNoAttack, $01
0008C317 E104                       	smpsAlterNote       $04
0008C319 E701                       	dc.b	smpsNoAttack, $01
0008C31B E105                       	smpsAlterNote       $05
0008C31D 8001                       	dc.b	nRst, $01
0008C31F E10C                       	smpsAlterNote       $0C
0008C321 C10C                       	dc.b	nE5, $0C
0008C323 E10D                       	smpsAlterNote       $0D
0008C325 C201                       	dc.b	nF5, $01
0008C327 E10E                       	smpsAlterNote       $0E
0008C329 C301 8001                  	dc.b	nFs5, $01, nRst, $01
0008C32D E10D                       	smpsAlterNote       $0D
0008C32F C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0008C333 E10A                       	smpsAlterNote       $0A
0008C335 E701                       	dc.b	smpsNoAttack, $01
0008C337 E106                       	smpsAlterNote       $06
0008C339 E701                       	dc.b	smpsNoAttack, $01
0008C33B E10A                       	smpsAlterNote       $0A
0008C33D E701                       	dc.b	smpsNoAttack, $01
0008C33F E10D                       	smpsAlterNote       $0D
0008C341 E701                       	dc.b	smpsNoAttack, $01
0008C343 E111                       	smpsAlterNote       $11
0008C345 E701                       	dc.b	smpsNoAttack, $01
0008C347 E10D                       	smpsAlterNote       $0D
0008C349 E701                       	dc.b	smpsNoAttack, $01
0008C34B E107                       	smpsAlterNote       $07
0008C34D E701                       	dc.b	smpsNoAttack, $01
0008C34F E106                       	smpsAlterNote       $06
0008C351 E701                       	dc.b	smpsNoAttack, $01
0008C353 E10A                       	smpsAlterNote       $0A
0008C355 E701                       	dc.b	smpsNoAttack, $01
0008C357 E110                       	smpsAlterNote       $10
0008C359 E701                       	dc.b	smpsNoAttack, $01
0008C35B E111                       	smpsAlterNote       $11
0008C35D 8001                       	dc.b	nRst, $01
0008C35F E10D                       	smpsAlterNote       $0D
0008C361 C40D                       	dc.b	nG5, $0D
0008C363 E10A                       	smpsAlterNote       $0A
0008C365 E701                       	dc.b	smpsNoAttack, $01
0008C367 E106                       	smpsAlterNote       $06
0008C369 E701                       	dc.b	smpsNoAttack, $01
0008C36B E10A                       	smpsAlterNote       $0A
0008C36D E701                       	dc.b	smpsNoAttack, $01
0008C36F E10D                       	smpsAlterNote       $0D
0008C371 E701                       	dc.b	smpsNoAttack, $01
0008C373 E10C                       	smpsAlterNote       $0C
0008C375 C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
0008C381 8001                       	dc.b	nRst, $01
0008C383 E10D                       	smpsAlterNote       $0D
0008C385 C20D                       	dc.b	nF5, $0D
0008C387 E10A                       	smpsAlterNote       $0A
0008C389 E701                       	dc.b	smpsNoAttack, $01
0008C38B E106                       	smpsAlterNote       $06
0008C38D E701                       	dc.b	smpsNoAttack, $01
0008C38F E10A                       	smpsAlterNote       $0A
0008C391 E701                       	dc.b	smpsNoAttack, $01
0008C393 E110                       	smpsAlterNote       $10
0008C395 E701                       	dc.b	smpsNoAttack, $01
0008C397 E111                       	smpsAlterNote       $11
0008C399 E701                       	dc.b	smpsNoAttack, $01
0008C39B E10D                       	smpsAlterNote       $0D
0008C39D E701                       	dc.b	smpsNoAttack, $01
0008C39F E107                       	smpsAlterNote       $07
0008C3A1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C3A5 E10A                       	smpsAlterNote       $0A
0008C3A7 E701                       	dc.b	smpsNoAttack, $01
0008C3A9 E110                       	smpsAlterNote       $10
0008C3AB E701                       	dc.b	smpsNoAttack, $01
0008C3AD E111                       	smpsAlterNote       $11
0008C3AF 8001                       	dc.b	nRst, $01
0008C3B1 E10F                       	smpsAlterNote       $0F
0008C3B3 C60A                       	dc.b	nA5, $0A
0008C3B5 E10D                       	smpsAlterNote       $0D
0008C3B7 C406 8001                  	dc.b	nG5, $06, nRst, $01
0008C3BB E10C                       	smpsAlterNote       $0C
0008C3BD C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0008C3C9 8001                       	dc.b	nRst, $01
0008C3CB E10D                       	smpsAlterNote       $0D
0008C3CD C20D                       	dc.b	nF5, $0D
0008C3CF E107                       	smpsAlterNote       $07
0008C3D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C3D5 E10A                       	smpsAlterNote       $0A
0008C3D7 E701                       	dc.b	smpsNoAttack, $01
0008C3D9 E110                       	smpsAlterNote       $10
0008C3DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C3DF E10A                       	smpsAlterNote       $0A
0008C3E1 E701                       	dc.b	smpsNoAttack, $01
0008C3E3 E107                       	smpsAlterNote       $07
0008C3E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C3E9 E10D                       	smpsAlterNote       $0D
0008C3EB E701                       	dc.b	smpsNoAttack, $01
0008C3ED E111                       	smpsAlterNote       $11
0008C3EF E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C3F3 E10D                       	smpsAlterNote       $0D
0008C3F5 C40D                       	dc.b	nG5, $0D
0008C3F7 E107                       	smpsAlterNote       $07
0008C3F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C3FD E10A                       	smpsAlterNote       $0A
0008C3FF E701                       	dc.b	smpsNoAttack, $01
0008C401 E10D                       	smpsAlterNote       $0D
0008C403 8001                       	dc.b	nRst, $01
0008C405 E10C                       	smpsAlterNote       $0C
0008C407 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0008C413 E10D                       	smpsAlterNote       $0D
0008C415 C20E                       	dc.b	nF5, $0E
0008C417 E107                       	smpsAlterNote       $07
0008C419 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C41D E10D                       	smpsAlterNote       $0D
0008C41F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C425 E0C0                       	smpsPan             panCenter, $00
0008C427 E603                       	smpsAlterVol        $03
0008C429 E108                       	smpsAlterNote       $08
0008C42B B406                       	dc.b	nEb4, $06
0008C42D E10C                       	smpsAlterNote       $0C
0008C42F AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008C433 E108                       	smpsAlterNote       $08
0008C435 B403                       	dc.b	nEb4, $03
0008C437 E109                       	smpsAlterNote       $09
0008C439 B803 8001                  	dc.b	nG4, $03, nRst, $01
0008C43D E10C                       	smpsAlterNote       $0C
0008C43F BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
0008C447 03                         	dc.b	$03
0008C448 E6FD                       	smpsAlterVol        $FD
0008C44A F6F1 F4                    	smpsJump            music84_Jump00
0008C44D                            
0008C44D                            ; PSG1 Data
0008C44D                            music84_PSG1:
0008C44D E1FD                       	smpsAlterNote       $FD
0008C44F EC04                       	smpsPSGAlterVol     $04
0008C451 9203                       	dc.b	nF1, $03
0008C453 E1FE                       	smpsAlterNote       $FE
0008C455 9603                       	dc.b	nA1, $03
0008C457 EC04                       	smpsPSGAlterVol     $04
0008C459 E701                       	dc.b	smpsNoAttack, $01
0008C45B E1FF                       	smpsAlterNote       $FF
0008C45D ECFC                       	smpsPSGAlterVol     $FC
0008C45F 9B03                       	dc.b	nD2, $03
0008C461 E1FD                       	smpsAlterNote       $FD
0008C463 9403                       	dc.b	nG1, $03
0008C465 EC04                       	smpsPSGAlterVol     $04
0008C467 E701                       	dc.b	smpsNoAttack, $01
0008C469 E1FE                       	smpsAlterNote       $FE
0008C46B ECFC                       	smpsPSGAlterVol     $FC
0008C46D 9703                       	dc.b	nBb1, $03
0008C46F E1FF                       	smpsAlterNote       $FF
0008C471 9B03                       	dc.b	nD2, $03
0008C473 EC04                       	smpsPSGAlterVol     $04
0008C475 E701                       	dc.b	smpsNoAttack, $01
0008C477 E1FE                       	smpsAlterNote       $FE
0008C479 ECFC                       	smpsPSGAlterVol     $FC
0008C47B A002                       	dc.b	nG2, $02
0008C47D EC04                       	smpsPSGAlterVol     $04
0008C47F E701                       	dc.b	smpsNoAttack, $01
0008C481 E1FF                       	smpsAlterNote       $FF
0008C483 ECFC                       	smpsPSGAlterVol     $FC
0008C485 A203                       	dc.b	nA2, $03
0008C487 EC0B                       	smpsPSGAlterVol     $0B
0008C489 800A                       	dc.b	nRst, $0A
0008C48B E105                       	smpsAlterNote       $05
0008C48D 01                         	dc.b	$01
0008C48E E1FC                       	smpsAlterNote       $FC
0008C490 01                         	dc.b	$01
0008C491 E105                       	smpsAlterNote       $05
0008C493 01                         	dc.b	$01
0008C494 E1FD                       	smpsAlterNote       $FD
0008C496 01                         	dc.b	$01
0008C497 E105                       	smpsAlterNote       $05
0008C499 01                         	dc.b	$01
0008C49A E1FD                       	smpsAlterNote       $FD
0008C49C 01                         	dc.b	$01
0008C49D E1FA                       	smpsAlterNote       $FA
0008C49F 01                         	dc.b	$01
0008C4A0 E1FC                       	smpsAlterNote       $FC
0008C4A2 01                         	dc.b	$01
0008C4A3 E105                       	smpsAlterNote       $05
0008C4A5 01                         	dc.b	$01
0008C4A6 E108                       	smpsAlterNote       $08
0008C4A8 0101                       	dc.b	$01, $01
0008C4AA E105                       	smpsAlterNote       $05
0008C4AC 01                         	dc.b	$01
0008C4AD E1FA                       	smpsAlterNote       $FA
0008C4AF 0101                       	dc.b	$01, $01
0008C4B1 E1FD                       	smpsAlterNote       $FD
0008C4B3 01                         	dc.b	$01
0008C4B4 E105                       	smpsAlterNote       $05
0008C4B6 01                         	dc.b	$01
0008C4B7 E108                       	smpsAlterNote       $08
0008C4B9 01                         	dc.b	$01
0008C4BA E105                       	smpsAlterNote       $05
0008C4BC 01                         	dc.b	$01
0008C4BD E1FC                       	smpsAlterNote       $FC
0008C4BF 01                         	dc.b	$01
0008C4C0 E105                       	smpsAlterNote       $05
0008C4C2 01                         	dc.b	$01
0008C4C3 E1FD                       	smpsAlterNote       $FD
0008C4C5 01                         	dc.b	$01
0008C4C6                            
0008C4C6                            music84_Jump07:
0008C4C6 E105                       	smpsAlterNote       $05
0008C4C8 8001                       	dc.b	nRst, $01
0008C4CA E1FD                       	smpsAlterNote       $FD
0008C4CC 01                         	dc.b	$01
0008C4CD E1FA                       	smpsAlterNote       $FA
0008C4CF 01                         	dc.b	$01
0008C4D0 E1FC                       	smpsAlterNote       $FC
0008C4D2 01                         	dc.b	$01
0008C4D3 E1FD                       	smpsAlterNote       $FD
0008C4D5 ECF5                       	smpsPSGAlterVol     $F5
0008C4D7 9206                       	dc.b	nF1, $06
0008C4D9 EC04                       	smpsPSGAlterVol     $04
0008C4DB E701                       	dc.b	smpsNoAttack, $01
0008C4DD EC07                       	smpsPSGAlterVol     $07
0008C4DF 8003                       	dc.b	nRst, $03
0008C4E1 ECF5                       	smpsPSGAlterVol     $F5
0008C4E3 9206                       	dc.b	nF1, $06
0008C4E5 EC04                       	smpsPSGAlterVol     $04
0008C4E7 E701                       	dc.b	smpsNoAttack, $01
0008C4E9 EC07                       	smpsPSGAlterVol     $07
0008C4EB 8006                       	dc.b	nRst, $06
0008C4ED E100                       	smpsAlterNote       $00
0008C4EF 01                         	dc.b	$01
0008C4F0 E104                       	smpsAlterNote       $04
0008C4F2 01                         	dc.b	$01
0008C4F3 E100                       	smpsAlterNote       $00
0008C4F5 01                         	dc.b	$01
0008C4F6 E1FB                       	smpsAlterNote       $FB
0008C4F8 01                         	dc.b	$01
0008C4F9 E1FD                       	smpsAlterNote       $FD
0008C4FB ECF5                       	smpsPSGAlterVol     $F5
0008C4FD 9406                       	dc.b	nG1, $06
0008C4FF EC04                       	smpsPSGAlterVol     $04
0008C501 E701                       	dc.b	smpsNoAttack, $01
0008C503 EC07                       	smpsPSGAlterVol     $07
0008C505 8003                       	dc.b	nRst, $03
0008C507 ECF5                       	smpsPSGAlterVol     $F5
0008C509 9407                       	dc.b	nG1, $07
0008C50B EC0B                       	smpsPSGAlterVol     $0B
0008C50D 8006                       	dc.b	nRst, $06
0008C50F E100                       	smpsAlterNote       $00
0008C511 01                         	dc.b	$01
0008C512 E103                       	smpsAlterNote       $03
0008C514 0101                       	dc.b	$01, $01
0008C516 E1FD                       	smpsAlterNote       $FD
0008C518 01                         	dc.b	$01
0008C519 ECF5                       	smpsPSGAlterVol     $F5
0008C51B 9207                       	dc.b	nF1, $07
0008C51D EC0B                       	smpsPSGAlterVol     $0B
0008C51F 8004                       	dc.b	nRst, $04
0008C521 ECF5                       	smpsPSGAlterVol     $F5
0008C523 9206                       	dc.b	nF1, $06
0008C525 EC04                       	smpsPSGAlterVol     $04
0008C527 E701                       	dc.b	smpsNoAttack, $01
0008C529 EC07                       	smpsPSGAlterVol     $07
0008C52B 8006                       	dc.b	nRst, $06
0008C52D E103                       	smpsAlterNote       $03
0008C52F 01                         	dc.b	$01
0008C530 E104                       	smpsAlterNote       $04
0008C532 01                         	dc.b	$01
0008C533 E100                       	smpsAlterNote       $00
0008C535 01                         	dc.b	$01
0008C536 E1FA                       	smpsAlterNote       $FA
0008C538 01                         	dc.b	$01
0008C539 E1FD                       	smpsAlterNote       $FD
0008C53B ECF5                       	smpsPSGAlterVol     $F5
0008C53D 9206                       	dc.b	nF1, $06
0008C53F EC04                       	smpsPSGAlterVol     $04
0008C541 E701                       	dc.b	smpsNoAttack, $01
0008C543 EC07                       	smpsPSGAlterVol     $07
0008C545 8003                       	dc.b	nRst, $03
0008C547 ECF5                       	smpsPSGAlterVol     $F5
0008C549 9106                       	dc.b	nE1, $06
0008C54B EC04                       	smpsPSGAlterVol     $04
0008C54D E701                       	dc.b	smpsNoAttack, $01
0008C54F EC07                       	smpsPSGAlterVol     $07
0008C551 8006                       	dc.b	nRst, $06
0008C553 E100                       	smpsAlterNote       $00
0008C555 01                         	dc.b	$01
0008C556 E104                       	smpsAlterNote       $04
0008C558 01                         	dc.b	$01
0008C559 E100                       	smpsAlterNote       $00
0008C55B 01                         	dc.b	$01
0008C55C E1FD                       	smpsAlterNote       $FD
0008C55E 01                         	dc.b	$01
0008C55F ECF5                       	smpsPSGAlterVol     $F5
0008C561 9206                       	dc.b	nF1, $06
0008C563 EC04                       	smpsPSGAlterVol     $04
0008C565 E701                       	dc.b	smpsNoAttack, $01
0008C567 EC07                       	smpsPSGAlterVol     $07
0008C569 8003                       	dc.b	nRst, $03
0008C56B ECF5                       	smpsPSGAlterVol     $F5
0008C56D 9207                       	dc.b	nF1, $07
0008C56F EC0B                       	smpsPSGAlterVol     $0B
0008C571 8007                       	dc.b	nRst, $07
0008C573 E103                       	smpsAlterNote       $03
0008C575 0101                       	dc.b	$01, $01
0008C577 E1FD                       	smpsAlterNote       $FD
0008C579 01                         	dc.b	$01
0008C57A E1FB                       	smpsAlterNote       $FB
0008C57C 01                         	dc.b	$01
0008C57D E1FD                       	smpsAlterNote       $FD
0008C57F ECF5                       	smpsPSGAlterVol     $F5
0008C581 9406                       	dc.b	nG1, $06
0008C583 EC0B                       	smpsPSGAlterVol     $0B
0008C585 8004                       	dc.b	nRst, $04
0008C587 ECF5                       	smpsPSGAlterVol     $F5
0008C589 9406                       	dc.b	nG1, $06
0008C58B EC04                       	smpsPSGAlterVol     $04
0008C58D E701                       	dc.b	smpsNoAttack, $01
0008C58F EC07                       	smpsPSGAlterVol     $07
0008C591 8006                       	dc.b	nRst, $06
0008C593 E100                       	smpsAlterNote       $00
0008C595 01                         	dc.b	$01
0008C596 E104                       	smpsAlterNote       $04
0008C598 01                         	dc.b	$01
0008C599 E100                       	smpsAlterNote       $00
0008C59B 01                         	dc.b	$01
0008C59C E1F9                       	smpsAlterNote       $F9
0008C59E 01                         	dc.b	$01
0008C59F E1FD                       	smpsAlterNote       $FD
0008C5A1 ECF5                       	smpsPSGAlterVol     $F5
0008C5A3 9206                       	dc.b	nF1, $06
0008C5A5 EC04                       	smpsPSGAlterVol     $04
0008C5A7 E701                       	dc.b	smpsNoAttack, $01
0008C5A9 EC07                       	smpsPSGAlterVol     $07
0008C5AB 8003                       	dc.b	nRst, $03
0008C5AD ECF5                       	smpsPSGAlterVol     $F5
0008C5AF 9207                       	dc.b	nF1, $07
0008C5B1 EC0B                       	smpsPSGAlterVol     $0B
0008C5B3 8006                       	dc.b	nRst, $06
0008C5B5 E100                       	smpsAlterNote       $00
0008C5B7 01                         	dc.b	$01
0008C5B8 E104                       	smpsAlterNote       $04
0008C5BA 01                         	dc.b	$01
0008C5BB E103                       	smpsAlterNote       $03
0008C5BD 01                         	dc.b	$01
0008C5BE E1FD                       	smpsAlterNote       $FD
0008C5C0 01                         	dc.b	$01
0008C5C1 ECF5                       	smpsPSGAlterVol     $F5
0008C5C3 9207                       	dc.b	nF1, $07
0008C5C5 EC0B                       	smpsPSGAlterVol     $0B
0008C5C7 8004                       	dc.b	nRst, $04
0008C5C9 ECF5                       	smpsPSGAlterVol     $F5
0008C5CB 9206                       	dc.b	nF1, $06
0008C5CD EC0B                       	smpsPSGAlterVol     $0B
0008C5CF 8007                       	dc.b	nRst, $07
0008C5D1 E103                       	smpsAlterNote       $03
0008C5D3 0101                       	dc.b	$01, $01
0008C5D5 E100                       	smpsAlterNote       $00
0008C5D7 01                         	dc.b	$01
0008C5D8 E1FA                       	smpsAlterNote       $FA
0008C5DA 01                         	dc.b	$01
0008C5DB E1FD                       	smpsAlterNote       $FD
0008C5DD ECF5                       	smpsPSGAlterVol     $F5
0008C5DF 9206                       	dc.b	nF1, $06
0008C5E1 EC04                       	smpsPSGAlterVol     $04
0008C5E3 E701                       	dc.b	smpsNoAttack, $01
0008C5E5 EC07                       	smpsPSGAlterVol     $07
0008C5E7 8003                       	dc.b	nRst, $03
0008C5E9 ECF5                       	smpsPSGAlterVol     $F5
0008C5EB 9206                       	dc.b	nF1, $06
0008C5ED EC04                       	smpsPSGAlterVol     $04
0008C5EF E701                       	dc.b	smpsNoAttack, $01
0008C5F1 EC07                       	smpsPSGAlterVol     $07
0008C5F3 8006                       	dc.b	nRst, $06
0008C5F5 E100                       	smpsAlterNote       $00
0008C5F7 01                         	dc.b	$01
0008C5F8 E104                       	smpsAlterNote       $04
0008C5FA 01                         	dc.b	$01
0008C5FB E100                       	smpsAlterNote       $00
0008C5FD 01                         	dc.b	$01
0008C5FE E1FD                       	smpsAlterNote       $FD
0008C600 01                         	dc.b	$01
0008C601 ECF5                       	smpsPSGAlterVol     $F5
0008C603 9206                       	dc.b	nF1, $06
0008C605 EC04                       	smpsPSGAlterVol     $04
0008C607 E701                       	dc.b	smpsNoAttack, $01
0008C609 EC07                       	smpsPSGAlterVol     $07
0008C60B 8003                       	dc.b	nRst, $03
0008C60D ECF5                       	smpsPSGAlterVol     $F5
0008C60F 9207                       	dc.b	nF1, $07
0008C611 EC0B                       	smpsPSGAlterVol     $0B
0008C613 8007                       	dc.b	nRst, $07
0008C615 E103                       	smpsAlterNote       $03
0008C617 0101                       	dc.b	$01, $01
0008C619 E1FD                       	smpsAlterNote       $FD
0008C61B 01                         	dc.b	$01
0008C61C E1FA                       	smpsAlterNote       $FA
0008C61E 01                         	dc.b	$01
0008C61F E1FD                       	smpsAlterNote       $FD
0008C621 ECF5                       	smpsPSGAlterVol     $F5
0008C623 9206                       	dc.b	nF1, $06
0008C625 EC0B                       	smpsPSGAlterVol     $0B
0008C627 8004                       	dc.b	nRst, $04
0008C629 ECF5                       	smpsPSGAlterVol     $F5
0008C62B 9206                       	dc.b	nF1, $06
0008C62D EC04                       	smpsPSGAlterVol     $04
0008C62F E701                       	dc.b	smpsNoAttack, $01
0008C631 EC07                       	smpsPSGAlterVol     $07
0008C633 8006                       	dc.b	nRst, $06
0008C635 E103                       	smpsAlterNote       $03
0008C637 01                         	dc.b	$01
0008C638 E104                       	smpsAlterNote       $04
0008C63A 01                         	dc.b	$01
0008C63B E100                       	smpsAlterNote       $00
0008C63D 01                         	dc.b	$01
0008C63E E1FA                       	smpsAlterNote       $FA
0008C640 01                         	dc.b	$01
0008C641 E1FD                       	smpsAlterNote       $FD
0008C643 ECF5                       	smpsPSGAlterVol     $F5
0008C645 9206                       	dc.b	nF1, $06
0008C647 EC04                       	smpsPSGAlterVol     $04
0008C649 E701                       	dc.b	smpsNoAttack, $01
0008C64B EC07                       	smpsPSGAlterVol     $07
0008C64D 8003                       	dc.b	nRst, $03
0008C64F ECF5                       	smpsPSGAlterVol     $F5
0008C651 9206                       	dc.b	nF1, $06
0008C653 EC04                       	smpsPSGAlterVol     $04
0008C655 E701                       	dc.b	smpsNoAttack, $01
0008C657 EC07                       	smpsPSGAlterVol     $07
0008C659 8006                       	dc.b	nRst, $06
0008C65B E100                       	smpsAlterNote       $00
0008C65D 01                         	dc.b	$01
0008C65E E104                       	smpsAlterNote       $04
0008C660 01                         	dc.b	$01
0008C661 E103                       	smpsAlterNote       $03
0008C663 01                         	dc.b	$01
0008C664 E1FD                       	smpsAlterNote       $FD
0008C666 01                         	dc.b	$01
0008C667 ECF5                       	smpsPSGAlterVol     $F5
0008C669 9107                       	dc.b	nE1, $07
0008C66B EC0B                       	smpsPSGAlterVol     $0B
0008C66D 8004                       	dc.b	nRst, $04
0008C66F ECF5                       	smpsPSGAlterVol     $F5
0008C671 9106                       	dc.b	nE1, $06
0008C673 EC0B                       	smpsPSGAlterVol     $0B
0008C675 8007                       	dc.b	nRst, $07
0008C677 E103                       	smpsAlterNote       $03
0008C679 0101                       	dc.b	$01, $01
0008C67B E100                       	smpsAlterNote       $00
0008C67D 01                         	dc.b	$01
0008C67E E1FA                       	smpsAlterNote       $FA
0008C680 01                         	dc.b	$01
0008C681 E1FD                       	smpsAlterNote       $FD
0008C683 ECF5                       	smpsPSGAlterVol     $F5
0008C685 9106                       	dc.b	nE1, $06
0008C687 EC04                       	smpsPSGAlterVol     $04
0008C689 E701                       	dc.b	smpsNoAttack, $01
0008C68B EC07                       	smpsPSGAlterVol     $07
0008C68D 8003                       	dc.b	nRst, $03
0008C68F ECF5                       	smpsPSGAlterVol     $F5
0008C691 9106                       	dc.b	nE1, $06
0008C693 EC04                       	smpsPSGAlterVol     $04
0008C695 E701                       	dc.b	smpsNoAttack, $01
0008C697 EC07                       	smpsPSGAlterVol     $07
0008C699 8006                       	dc.b	nRst, $06
0008C69B E100                       	smpsAlterNote       $00
0008C69D 01                         	dc.b	$01
0008C69E E104                       	smpsAlterNote       $04
0008C6A0 01                         	dc.b	$01
0008C6A1 E100                       	smpsAlterNote       $00
0008C6A3 01                         	dc.b	$01
0008C6A4 E1FA                       	smpsAlterNote       $FA
0008C6A6 01                         	dc.b	$01
0008C6A7 E1FD                       	smpsAlterNote       $FD
0008C6A9 ECF5                       	smpsPSGAlterVol     $F5
0008C6AB 9106                       	dc.b	nE1, $06
0008C6AD EC04                       	smpsPSGAlterVol     $04
0008C6AF E701                       	dc.b	smpsNoAttack, $01
0008C6B1 EC07                       	smpsPSGAlterVol     $07
0008C6B3 8003                       	dc.b	nRst, $03
0008C6B5 ECF5                       	smpsPSGAlterVol     $F5
0008C6B7 9107 9106                  	dc.b	nE1, $07, nE1, $06
0008C6BB EC04                       	smpsPSGAlterVol     $04
0008C6BD E701                       	dc.b	smpsNoAttack, $01
0008C6BF ECFC                       	smpsPSGAlterVol     $FC
0008C6C1 9103 9103                  	dc.b	nE1, $03, nE1, $03
0008C6C5 EC04                       	smpsPSGAlterVol     $04
0008C6C7 E701                       	dc.b	smpsNoAttack, $01
0008C6C9 ECFC                       	smpsPSGAlterVol     $FC
0008C6CB 9106                       	dc.b	nE1, $06
0008C6CD EC04                       	smpsPSGAlterVol     $04
0008C6CF E701                       	dc.b	smpsNoAttack, $01
0008C6D1 EC07                       	smpsPSGAlterVol     $07
0008C6D3 8006                       	dc.b	nRst, $06
0008C6D5 E100                       	smpsAlterNote       $00
0008C6D7 01                         	dc.b	$01
0008C6D8 E104                       	smpsAlterNote       $04
0008C6DA 01                         	dc.b	$01
0008C6DB E100                       	smpsAlterNote       $00
0008C6DD 01                         	dc.b	$01
0008C6DE E1FA                       	smpsAlterNote       $FA
0008C6E0 01                         	dc.b	$01
0008C6E1 E1F9                       	smpsAlterNote       $F9
0008C6E3 01                         	dc.b	$01
0008C6E4 E1FD                       	smpsAlterNote       $FD
0008C6E6 01                         	dc.b	$01
0008C6E7 E103                       	smpsAlterNote       $03
0008C6E9 01                         	dc.b	$01
0008C6EA E104                       	smpsAlterNote       $04
0008C6EC 01                         	dc.b	$01
0008C6ED E100                       	smpsAlterNote       $00
0008C6EF 01                         	dc.b	$01
0008C6F0 E1FA                       	smpsAlterNote       $FA
0008C6F2 0101                       	dc.b	$01, $01
0008C6F4 E1FD                       	smpsAlterNote       $FD
0008C6F6 ECF5                       	smpsPSGAlterVol     $F5
0008C6F8 9206                       	dc.b	nF1, $06
0008C6FA EC04                       	smpsPSGAlterVol     $04
0008C6FC E701                       	dc.b	smpsNoAttack, $01
0008C6FE EC07                       	smpsPSGAlterVol     $07
0008C700 8003                       	dc.b	nRst, $03
0008C702 ECF5                       	smpsPSGAlterVol     $F5
0008C704 9206                       	dc.b	nF1, $06
0008C706 EC04                       	smpsPSGAlterVol     $04
0008C708 E701                       	dc.b	smpsNoAttack, $01
0008C70A EC07                       	smpsPSGAlterVol     $07
0008C70C 8006                       	dc.b	nRst, $06
0008C70E E100                       	smpsAlterNote       $00
0008C710 01                         	dc.b	$01
0008C711 E104                       	smpsAlterNote       $04
0008C713 01                         	dc.b	$01
0008C714 E103                       	smpsAlterNote       $03
0008C716 01                         	dc.b	$01
0008C717 E1FD                       	smpsAlterNote       $FD
0008C719 01                         	dc.b	$01
0008C71A ECF5                       	smpsPSGAlterVol     $F5
0008C71C 9407                       	dc.b	nG1, $07
0008C71E EC0B                       	smpsPSGAlterVol     $0B
0008C720 8004                       	dc.b	nRst, $04
0008C722 ECF5                       	smpsPSGAlterVol     $F5
0008C724 9406                       	dc.b	nG1, $06
0008C726 EC0B                       	smpsPSGAlterVol     $0B
0008C728 8007                       	dc.b	nRst, $07
0008C72A E103                       	smpsAlterNote       $03
0008C72C 0101                       	dc.b	$01, $01
0008C72E E1FD                       	smpsAlterNote       $FD
0008C730 01                         	dc.b	$01
0008C731 E1F9                       	smpsAlterNote       $F9
0008C733 01                         	dc.b	$01
0008C734 E1FD                       	smpsAlterNote       $FD
0008C736 ECF5                       	smpsPSGAlterVol     $F5
0008C738 9206                       	dc.b	nF1, $06
0008C73A EC04                       	smpsPSGAlterVol     $04
0008C73C E701                       	dc.b	smpsNoAttack, $01
0008C73E EC07                       	smpsPSGAlterVol     $07
0008C740 8003                       	dc.b	nRst, $03
0008C742 ECF5                       	smpsPSGAlterVol     $F5
0008C744 9206                       	dc.b	nF1, $06
0008C746 EC04                       	smpsPSGAlterVol     $04
0008C748 E701                       	dc.b	smpsNoAttack, $01
0008C74A EC07                       	smpsPSGAlterVol     $07
0008C74C 8006                       	dc.b	nRst, $06
0008C74E E100                       	smpsAlterNote       $00
0008C750 01                         	dc.b	$01
0008C751 E104                       	smpsAlterNote       $04
0008C753 01                         	dc.b	$01
0008C754 E100                       	smpsAlterNote       $00
0008C756 01                         	dc.b	$01
0008C757 E1FA                       	smpsAlterNote       $FA
0008C759 01                         	dc.b	$01
0008C75A E1FD                       	smpsAlterNote       $FD
0008C75C ECF5                       	smpsPSGAlterVol     $F5
0008C75E 9206                       	dc.b	nF1, $06
0008C760 EC04                       	smpsPSGAlterVol     $04
0008C762 E701                       	dc.b	smpsNoAttack, $01
0008C764 EC07                       	smpsPSGAlterVol     $07
0008C766 8003                       	dc.b	nRst, $03
0008C768 ECF5                       	smpsPSGAlterVol     $F5
0008C76A 9107                       	dc.b	nE1, $07
0008C76C EC0B                       	smpsPSGAlterVol     $0B
0008C76E 8006                       	dc.b	nRst, $06
0008C770 E100                       	smpsAlterNote       $00
0008C772 01                         	dc.b	$01
0008C773 E103                       	smpsAlterNote       $03
0008C775 0101                       	dc.b	$01, $01
0008C777 E1FD                       	smpsAlterNote       $FD
0008C779 01                         	dc.b	$01
0008C77A ECF5                       	smpsPSGAlterVol     $F5
0008C77C 9207                       	dc.b	nF1, $07
0008C77E EC0B                       	smpsPSGAlterVol     $0B
0008C780 8004                       	dc.b	nRst, $04
0008C782 ECF5                       	smpsPSGAlterVol     $F5
0008C784 9206                       	dc.b	nF1, $06
0008C786 EC04                       	smpsPSGAlterVol     $04
0008C788 E701                       	dc.b	smpsNoAttack, $01
0008C78A EC07                       	smpsPSGAlterVol     $07
0008C78C 8006                       	dc.b	nRst, $06
0008C78E E103                       	smpsAlterNote       $03
0008C790 01                         	dc.b	$01
0008C791 E104                       	smpsAlterNote       $04
0008C793 01                         	dc.b	$01
0008C794 E100                       	smpsAlterNote       $00
0008C796 01                         	dc.b	$01
0008C797 E1FB                       	smpsAlterNote       $FB
0008C799 01                         	dc.b	$01
0008C79A E1FD                       	smpsAlterNote       $FD
0008C79C ECF5                       	smpsPSGAlterVol     $F5
0008C79E 9406                       	dc.b	nG1, $06
0008C7A0 EC04                       	smpsPSGAlterVol     $04
0008C7A2 E701                       	dc.b	smpsNoAttack, $01
0008C7A4 EC07                       	smpsPSGAlterVol     $07
0008C7A6 8003                       	dc.b	nRst, $03
0008C7A8 ECF5                       	smpsPSGAlterVol     $F5
0008C7AA 9406                       	dc.b	nG1, $06
0008C7AC EC04                       	smpsPSGAlterVol     $04
0008C7AE E701                       	dc.b	smpsNoAttack, $01
0008C7B0 EC07                       	smpsPSGAlterVol     $07
0008C7B2 8006                       	dc.b	nRst, $06
0008C7B4 E100                       	smpsAlterNote       $00
0008C7B6 01                         	dc.b	$01
0008C7B7 E104                       	smpsAlterNote       $04
0008C7B9 01                         	dc.b	$01
0008C7BA E100                       	smpsAlterNote       $00
0008C7BC 01                         	dc.b	$01
0008C7BD E1FD                       	smpsAlterNote       $FD
0008C7BF 01                         	dc.b	$01
0008C7C0 ECF5                       	smpsPSGAlterVol     $F5
0008C7C2 9206                       	dc.b	nF1, $06
0008C7C4 EC04                       	smpsPSGAlterVol     $04
0008C7C6 E701                       	dc.b	smpsNoAttack, $01
0008C7C8 EC07                       	smpsPSGAlterVol     $07
0008C7CA 8003                       	dc.b	nRst, $03
0008C7CC ECF5                       	smpsPSGAlterVol     $F5
0008C7CE 9207                       	dc.b	nF1, $07
0008C7D0 EC0B                       	smpsPSGAlterVol     $0B
0008C7D2 8007                       	dc.b	nRst, $07
0008C7D4 E103                       	smpsAlterNote       $03
0008C7D6 0101                       	dc.b	$01, $01
0008C7D8 E1FD                       	smpsAlterNote       $FD
0008C7DA 01                         	dc.b	$01
0008C7DB E1FA                       	smpsAlterNote       $FA
0008C7DD 01                         	dc.b	$01
0008C7DE E1FD                       	smpsAlterNote       $FD
0008C7E0 ECF5                       	smpsPSGAlterVol     $F5
0008C7E2 9206                       	dc.b	nF1, $06
0008C7E4 EC0B                       	smpsPSGAlterVol     $0B
0008C7E6 8004                       	dc.b	nRst, $04
0008C7E8 ECF5                       	smpsPSGAlterVol     $F5
0008C7EA 9206                       	dc.b	nF1, $06
0008C7EC EC04                       	smpsPSGAlterVol     $04
0008C7EE E701                       	dc.b	smpsNoAttack, $01
0008C7F0 EC07                       	smpsPSGAlterVol     $07
0008C7F2 8006                       	dc.b	nRst, $06
0008C7F4 E100                       	smpsAlterNote       $00
0008C7F6 01                         	dc.b	$01
0008C7F7 E104                       	smpsAlterNote       $04
0008C7F9 01                         	dc.b	$01
0008C7FA E100                       	smpsAlterNote       $00
0008C7FC 01                         	dc.b	$01
0008C7FD E1FA                       	smpsAlterNote       $FA
0008C7FF 01                         	dc.b	$01
0008C800 E1FD                       	smpsAlterNote       $FD
0008C802 ECF5                       	smpsPSGAlterVol     $F5
0008C804 9206                       	dc.b	nF1, $06
0008C806 EC04                       	smpsPSGAlterVol     $04
0008C808 E704                       	dc.b	smpsNoAttack, $04
0008C80A ECFC                       	smpsPSGAlterVol     $FC
0008C80C 9207                       	dc.b	nF1, $07
0008C80E EC0B                       	smpsPSGAlterVol     $0B
0008C810 8006                       	dc.b	nRst, $06
0008C812 E100                       	smpsAlterNote       $00
0008C814 01                         	dc.b	$01
0008C815 E104                       	smpsAlterNote       $04
0008C817 01                         	dc.b	$01
0008C818 E103                       	smpsAlterNote       $03
0008C81A 01                         	dc.b	$01
0008C81B E1FD                       	smpsAlterNote       $FD
0008C81D 01                         	dc.b	$01
0008C81E ECF5                       	smpsPSGAlterVol     $F5
0008C820 9207                       	dc.b	nF1, $07
0008C822 EC0B                       	smpsPSGAlterVol     $0B
0008C824 8004                       	dc.b	nRst, $04
0008C826 ECF5                       	smpsPSGAlterVol     $F5
0008C828 9206                       	dc.b	nF1, $06
0008C82A EC0B                       	smpsPSGAlterVol     $0B
0008C82C 8007                       	dc.b	nRst, $07
0008C82E E103                       	smpsAlterNote       $03
0008C830 0101                       	dc.b	$01, $01
0008C832 E100                       	smpsAlterNote       $00
0008C834 01                         	dc.b	$01
0008C835 E1FA                       	smpsAlterNote       $FA
0008C837 01                         	dc.b	$01
0008C838 E1FD                       	smpsAlterNote       $FD
0008C83A ECF5                       	smpsPSGAlterVol     $F5
0008C83C 9206                       	dc.b	nF1, $06
0008C83E EC04                       	smpsPSGAlterVol     $04
0008C840 E704                       	dc.b	smpsNoAttack, $04
0008C842 ECFC                       	smpsPSGAlterVol     $FC
0008C844 9206                       	dc.b	nF1, $06
0008C846 EC04                       	smpsPSGAlterVol     $04
0008C848 E701                       	dc.b	smpsNoAttack, $01
0008C84A EC07                       	smpsPSGAlterVol     $07
0008C84C 8006                       	dc.b	nRst, $06
0008C84E E100                       	smpsAlterNote       $00
0008C850 01                         	dc.b	$01
0008C851 E104                       	smpsAlterNote       $04
0008C853 01                         	dc.b	$01
0008C854 E100                       	smpsAlterNote       $00
0008C856 01                         	dc.b	$01
0008C857 E1FD                       	smpsAlterNote       $FD
0008C859 01                         	dc.b	$01
0008C85A ECF5                       	smpsPSGAlterVol     $F5
0008C85C 9206                       	dc.b	nF1, $06
0008C85E EC04                       	smpsPSGAlterVol     $04
0008C860 E701                       	dc.b	smpsNoAttack, $01
0008C862 EC07                       	smpsPSGAlterVol     $07
0008C864 8003                       	dc.b	nRst, $03
0008C866 ECF5                       	smpsPSGAlterVol     $F5
0008C868 9207                       	dc.b	nF1, $07
0008C86A EC0B                       	smpsPSGAlterVol     $0B
0008C86C 8007                       	dc.b	nRst, $07
0008C86E E103                       	smpsAlterNote       $03
0008C870 0101                       	dc.b	$01, $01
0008C872 E1FD                       	smpsAlterNote       $FD
0008C874 01                         	dc.b	$01
0008C875 E1FA                       	smpsAlterNote       $FA
0008C877 01                         	dc.b	$01
0008C878 E1FD                       	smpsAlterNote       $FD
0008C87A ECF5                       	smpsPSGAlterVol     $F5
0008C87C 9106                       	dc.b	nE1, $06
0008C87E EC0B                       	smpsPSGAlterVol     $0B
0008C880 8004                       	dc.b	nRst, $04
0008C882 ECF5                       	smpsPSGAlterVol     $F5
0008C884 9106                       	dc.b	nE1, $06
0008C886 EC04                       	smpsPSGAlterVol     $04
0008C888 E701                       	dc.b	smpsNoAttack, $01
0008C88A EC07                       	smpsPSGAlterVol     $07
0008C88C 8006                       	dc.b	nRst, $06
0008C88E E100                       	smpsAlterNote       $00
0008C890 01                         	dc.b	$01
0008C891 E104                       	smpsAlterNote       $04
0008C893 01                         	dc.b	$01
0008C894 E100                       	smpsAlterNote       $00
0008C896 01                         	dc.b	$01
0008C897 E1FA                       	smpsAlterNote       $FA
0008C899 01                         	dc.b	$01
0008C89A E1FD                       	smpsAlterNote       $FD
0008C89C ECF5                       	smpsPSGAlterVol     $F5
0008C89E 9106                       	dc.b	nE1, $06
0008C8A0 EC04                       	smpsPSGAlterVol     $04
0008C8A2 E701                       	dc.b	smpsNoAttack, $01
0008C8A4 EC07                       	smpsPSGAlterVol     $07
0008C8A6 8003                       	dc.b	nRst, $03
0008C8A8 ECF5                       	smpsPSGAlterVol     $F5
0008C8AA 9106                       	dc.b	nE1, $06
0008C8AC EC04                       	smpsPSGAlterVol     $04
0008C8AE E701                       	dc.b	smpsNoAttack, $01
0008C8B0 EC07                       	smpsPSGAlterVol     $07
0008C8B2 8006                       	dc.b	nRst, $06
0008C8B4 E100                       	smpsAlterNote       $00
0008C8B6 01                         	dc.b	$01
0008C8B7 E104                       	smpsAlterNote       $04
0008C8B9 01                         	dc.b	$01
0008C8BA E103                       	smpsAlterNote       $03
0008C8BC 01                         	dc.b	$01
0008C8BD E1FD                       	smpsAlterNote       $FD
0008C8BF 01                         	dc.b	$01
0008C8C0 ECF5                       	smpsPSGAlterVol     $F5
0008C8C2 9107                       	dc.b	nE1, $07
0008C8C4 EC0B                       	smpsPSGAlterVol     $0B
0008C8C6 8004                       	dc.b	nRst, $04
0008C8C8 ECF5                       	smpsPSGAlterVol     $F5
0008C8CA 9106                       	dc.b	nE1, $06
0008C8CC EC0B                       	smpsPSGAlterVol     $0B
0008C8CE 8007                       	dc.b	nRst, $07
0008C8D0 E103                       	smpsAlterNote       $03
0008C8D2 0101                       	dc.b	$01, $01
0008C8D4 E100                       	smpsAlterNote       $00
0008C8D6 01                         	dc.b	$01
0008C8D7 E1FA                       	smpsAlterNote       $FA
0008C8D9 01                         	dc.b	$01
0008C8DA E1FD                       	smpsAlterNote       $FD
0008C8DC ECF5                       	smpsPSGAlterVol     $F5
0008C8DE 9106                       	dc.b	nE1, $06
0008C8E0 EC04                       	smpsPSGAlterVol     $04
0008C8E2 E701                       	dc.b	smpsNoAttack, $01
0008C8E4 EC07                       	smpsPSGAlterVol     $07
0008C8E6 8003                       	dc.b	nRst, $03
0008C8E8 ECF5                       	smpsPSGAlterVol     $F5
0008C8EA 9106                       	dc.b	nE1, $06
0008C8EC EC04                       	smpsPSGAlterVol     $04
0008C8EE E701                       	dc.b	smpsNoAttack, $01
0008C8F0 EC07                       	smpsPSGAlterVol     $07
0008C8F2 8003                       	dc.b	nRst, $03
0008C8F4 ECF5                       	smpsPSGAlterVol     $F5
0008C8F6 9207                       	dc.b	nF1, $07
0008C8F8 EC0B                       	smpsPSGAlterVol     $0B
0008C8FA 8006                       	dc.b	nRst, $06
0008C8FC E100                       	smpsAlterNote       $00
0008C8FE 01                         	dc.b	$01
0008C8FF E104                       	smpsAlterNote       $04
0008C901 01                         	dc.b	$01
0008C902 E103                       	smpsAlterNote       $03
0008C904 01                         	dc.b	$01
0008C905 E1FD                       	smpsAlterNote       $FD
0008C907 01                         	dc.b	$01
0008C908 E1F9                       	smpsAlterNote       $F9
0008C90A 01                         	dc.b	$01
0008C90B E1FD                       	smpsAlterNote       $FD
0008C90D 01                         	dc.b	$01
0008C90E E100                       	smpsAlterNote       $00
0008C910 01                         	dc.b	$01
0008C911 E104                       	smpsAlterNote       $04
0008C913 01                         	dc.b	$01
0008C914 E1FD                       	smpsAlterNote       $FD
0008C916 ECF5                       	smpsPSGAlterVol     $F5
0008C918 9203 9203                  	dc.b	nF1, $03, nF1, $03
0008C91C EC04                       	smpsPSGAlterVol     $04
0008C91E E701                       	dc.b	smpsNoAttack, $01
0008C920 EC07                       	smpsPSGAlterVol     $07
0008C922 8009                       	dc.b	nRst, $09
0008C924 E100                       	smpsAlterNote       $00
0008C926 01                         	dc.b	$01
0008C927 E104                       	smpsAlterNote       $04
0008C929 01                         	dc.b	$01
0008C92A E103                       	smpsAlterNote       $03
0008C92C 01                         	dc.b	$01
0008C92D E1FD                       	smpsAlterNote       $FD
0008C92F 01                         	dc.b	$01
0008C930 E1F9                       	smpsAlterNote       $F9
0008C932 01                         	dc.b	$01
0008C933 E1FD                       	smpsAlterNote       $FD
0008C935 01                         	dc.b	$01
0008C936 E100                       	smpsAlterNote       $00
0008C938 01                         	dc.b	$01
0008C939 E104                       	smpsAlterNote       $04
0008C93B 01                         	dc.b	$01
0008C93C E100                       	smpsAlterNote       $00
0008C93E 01                         	dc.b	$01
0008C93F E1FA                       	smpsAlterNote       $FA
0008C941 01                         	dc.b	$01
0008C942 E1F9                       	smpsAlterNote       $F9
0008C944 01                         	dc.b	$01
0008C945 E1FD                       	smpsAlterNote       $FD
0008C947 01                         	dc.b	$01
0008C948 E103                       	smpsAlterNote       $03
0008C94A 0101                       	dc.b	$01, $01
0008C94C E100                       	smpsAlterNote       $00
0008C94E 01                         	dc.b	$01
0008C94F E1FD                       	smpsAlterNote       $FD
0008C951 ECF5                       	smpsPSGAlterVol     $F5
0008C953 9202                       	dc.b	nF1, $02
0008C955 EC04                       	smpsPSGAlterVol     $04
0008C957 E701                       	dc.b	smpsNoAttack, $01
0008C959 ECFC                       	smpsPSGAlterVol     $FC
0008C95B 9106                       	dc.b	nE1, $06
0008C95D EC04                       	smpsPSGAlterVol     $04
0008C95F E701                       	dc.b	smpsNoAttack, $01
0008C961 EC07                       	smpsPSGAlterVol     $07
0008C963 8006                       	dc.b	nRst, $06
0008C965 E100                       	smpsAlterNote       $00
0008C967 01                         	dc.b	$01
0008C968 E104                       	smpsAlterNote       $04
0008C96A 01                         	dc.b	$01
0008C96B E100                       	smpsAlterNote       $00
0008C96D 01                         	dc.b	$01
0008C96E E1FD                       	smpsAlterNote       $FD
0008C970 01                         	dc.b	$01
0008C971 E1F9                       	smpsAlterNote       $F9
0008C973 01                         	dc.b	$01
0008C974 E1FD                       	smpsAlterNote       $FD
0008C976 01                         	dc.b	$01
0008C977 E103                       	smpsAlterNote       $03
0008C979 01                         	dc.b	$01
0008C97A E104                       	smpsAlterNote       $04
0008C97C 01                         	dc.b	$01
0008C97D E1FD                       	smpsAlterNote       $FD
0008C97F ECF5                       	smpsPSGAlterVol     $F5
0008C981 9102                       	dc.b	nE1, $02
0008C983 EC04                       	smpsPSGAlterVol     $04
0008C985 E701                       	dc.b	smpsNoAttack, $01
0008C987 ECFC                       	smpsPSGAlterVol     $FC
0008C989 920D                       	dc.b	nF1, $0D
0008C98B E100                       	smpsAlterNote       $00
0008C98D E701                       	dc.b	smpsNoAttack, $01
0008C98F E104                       	smpsAlterNote       $04
0008C991 E701                       	dc.b	smpsNoAttack, $01
0008C993 E100                       	smpsAlterNote       $00
0008C995 E701                       	dc.b	smpsNoAttack, $01
0008C997 E1FD                       	smpsAlterNote       $FD
0008C999 E701                       	dc.b	smpsNoAttack, $01
0008C99B E1F9                       	smpsAlterNote       $F9
0008C99D E701                       	dc.b	smpsNoAttack, $01
0008C99F E1FD                       	smpsAlterNote       $FD
0008C9A1 E701                       	dc.b	smpsNoAttack, $01
0008C9A3 E103                       	smpsAlterNote       $03
0008C9A5 E701                       	dc.b	smpsNoAttack, $01
0008C9A7 E104                       	smpsAlterNote       $04
0008C9A9 E701                       	dc.b	smpsNoAttack, $01
0008C9AB E100                       	smpsAlterNote       $00
0008C9AD E701                       	dc.b	smpsNoAttack, $01
0008C9AF E1FA                       	smpsAlterNote       $FA
0008C9B1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C9B5 E1FD                       	smpsAlterNote       $FD
0008C9B7 E701                       	dc.b	smpsNoAttack, $01
0008C9B9 E103                       	smpsAlterNote       $03
0008C9BB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C9BF E1FD                       	smpsAlterNote       $FD
0008C9C1 E701                       	dc.b	smpsNoAttack, $01
0008C9C3 E1F9                       	smpsAlterNote       $F9
0008C9C5 E701                       	dc.b	smpsNoAttack, $01
0008C9C7 E1FA                       	smpsAlterNote       $FA
0008C9C9 E701                       	dc.b	smpsNoAttack, $01
0008C9CB E100                       	smpsAlterNote       $00
0008C9CD EC04                       	smpsPSGAlterVol     $04
0008C9CF E701                       	dc.b	smpsNoAttack, $01
0008C9D1 EC07                       	smpsPSGAlterVol     $07
0008C9D3 E104                       	smpsAlterNote       $04
0008C9D5 8001                       	dc.b	nRst, $01
0008C9D7 E100                       	smpsAlterNote       $00
0008C9D9 01                         	dc.b	$01
0008C9DA E1FD                       	smpsAlterNote       $FD
0008C9DC 01                         	dc.b	$01
0008C9DD E1F9                       	smpsAlterNote       $F9
0008C9DF 01                         	dc.b	$01
0008C9E0 E1FD                       	smpsAlterNote       $FD
0008C9E2 01                         	dc.b	$01
0008C9E3 E103                       	smpsAlterNote       $03
0008C9E5 01                         	dc.b	$01
0008C9E6 E104                       	smpsAlterNote       $04
0008C9E8 01                         	dc.b	$01
0008C9E9 E1FD                       	smpsAlterNote       $FD
0008C9EB ECF5                       	smpsPSGAlterVol     $F5
0008C9ED 9106                       	dc.b	nE1, $06
0008C9EF EC04                       	smpsPSGAlterVol     $04
0008C9F1 E701                       	dc.b	smpsNoAttack, $01
0008C9F3 EC07                       	smpsPSGAlterVol     $07
0008C9F5 8003                       	dc.b	nRst, $03
0008C9F7 ECF5                       	smpsPSGAlterVol     $F5
0008C9F9 9106                       	dc.b	nE1, $06
0008C9FB EC04                       	smpsPSGAlterVol     $04
0008C9FD E701                       	dc.b	smpsNoAttack, $01
0008C9FF EC07                       	smpsPSGAlterVol     $07
0008CA01 8006                       	dc.b	nRst, $06
0008CA03 E100                       	smpsAlterNote       $00
0008CA05 01                         	dc.b	$01
0008CA06 E104                       	smpsAlterNote       $04
0008CA08 01                         	dc.b	$01
0008CA09 E100                       	smpsAlterNote       $00
0008CA0B 01                         	dc.b	$01
0008CA0C E1FA                       	smpsAlterNote       $FA
0008CA0E 01                         	dc.b	$01
0008CA0F E1FD                       	smpsAlterNote       $FD
0008CA11 ECF5                       	smpsPSGAlterVol     $F5
0008CA13 9206                       	dc.b	nF1, $06
0008CA15 EC04                       	smpsPSGAlterVol     $04
0008CA17 E701                       	dc.b	smpsNoAttack, $01
0008CA19 EC07                       	smpsPSGAlterVol     $07
0008CA1B 8003                       	dc.b	nRst, $03
0008CA1D ECF5                       	smpsPSGAlterVol     $F5
0008CA1F 9207                       	dc.b	nF1, $07
0008CA21 EC0B                       	smpsPSGAlterVol     $0B
0008CA23 8006                       	dc.b	nRst, $06
0008CA25 E100                       	smpsAlterNote       $00
0008CA27 01                         	dc.b	$01
0008CA28 E103                       	smpsAlterNote       $03
0008CA2A 0101                       	dc.b	$01, $01
0008CA2C E1FD                       	smpsAlterNote       $FD
0008CA2E 01                         	dc.b	$01
0008CA2F ECF5                       	smpsPSGAlterVol     $F5
0008CA31 9107                       	dc.b	nE1, $07
0008CA33 EC0B                       	smpsPSGAlterVol     $0B
0008CA35 8004                       	dc.b	nRst, $04
0008CA37 ECF5                       	smpsPSGAlterVol     $F5
0008CA39 9106                       	dc.b	nE1, $06
0008CA3B EC04                       	smpsPSGAlterVol     $04
0008CA3D E701                       	dc.b	smpsNoAttack, $01
0008CA3F EC07                       	smpsPSGAlterVol     $07
0008CA41 8006                       	dc.b	nRst, $06
0008CA43 E103                       	smpsAlterNote       $03
0008CA45 01                         	dc.b	$01
0008CA46 E104                       	smpsAlterNote       $04
0008CA48 01                         	dc.b	$01
0008CA49 E100                       	smpsAlterNote       $00
0008CA4B 01                         	dc.b	$01
0008CA4C E1FA                       	smpsAlterNote       $FA
0008CA4E 01                         	dc.b	$01
0008CA4F E1FD                       	smpsAlterNote       $FD
0008CA51 ECF5                       	smpsPSGAlterVol     $F5
0008CA53 9106                       	dc.b	nE1, $06
0008CA55 EC04                       	smpsPSGAlterVol     $04
0008CA57 E701                       	dc.b	smpsNoAttack, $01
0008CA59 EC07                       	smpsPSGAlterVol     $07
0008CA5B 8003                       	dc.b	nRst, $03
0008CA5D ECF5                       	smpsPSGAlterVol     $F5
0008CA5F 9106                       	dc.b	nE1, $06
0008CA61 EC04                       	smpsPSGAlterVol     $04
0008CA63 E701                       	dc.b	smpsNoAttack, $01
0008CA65 EC07                       	smpsPSGAlterVol     $07
0008CA67 8003                       	dc.b	nRst, $03
0008CA69 ECF5                       	smpsPSGAlterVol     $F5
0008CA6B 9207                       	dc.b	nF1, $07
0008CA6D EC0B                       	smpsPSGAlterVol     $0B
0008CA6F 8006                       	dc.b	nRst, $06
0008CA71 E100                       	smpsAlterNote       $00
0008CA73 01                         	dc.b	$01
0008CA74 E103                       	smpsAlterNote       $03
0008CA76 0101                       	dc.b	$01, $01
0008CA78 E1FD                       	smpsAlterNote       $FD
0008CA7A 01                         	dc.b	$01
0008CA7B E1F9                       	smpsAlterNote       $F9
0008CA7D 01                         	dc.b	$01
0008CA7E E1FA                       	smpsAlterNote       $FA
0008CA80 01                         	dc.b	$01
0008CA81 E100                       	smpsAlterNote       $00
0008CA83 01                         	dc.b	$01
0008CA84 E104                       	smpsAlterNote       $04
0008CA86 01                         	dc.b	$01
0008CA87 E1FD                       	smpsAlterNote       $FD
0008CA89 ECF5                       	smpsPSGAlterVol     $F5
0008CA8B 9203 9203                  	dc.b	nF1, $03, nF1, $03
0008CA8F EC04                       	smpsPSGAlterVol     $04
0008CA91 E701                       	dc.b	smpsNoAttack, $01
0008CA93 EC07                       	smpsPSGAlterVol     $07
0008CA95 8009                       	dc.b	nRst, $09
0008CA97 E100                       	smpsAlterNote       $00
0008CA99 01                         	dc.b	$01
0008CA9A E103                       	smpsAlterNote       $03
0008CA9C 0101                       	dc.b	$01, $01
0008CA9E E1FD                       	smpsAlterNote       $FD
0008CAA0 01                         	dc.b	$01
0008CAA1 E1F9                       	smpsAlterNote       $F9
0008CAA3 01                         	dc.b	$01
0008CAA4 E1FA                       	smpsAlterNote       $FA
0008CAA6 01                         	dc.b	$01
0008CAA7 E100                       	smpsAlterNote       $00
0008CAA9 01                         	dc.b	$01
0008CAAA E104                       	smpsAlterNote       $04
0008CAAC 01                         	dc.b	$01
0008CAAD E100                       	smpsAlterNote       $00
0008CAAF 01                         	dc.b	$01
0008CAB0 E1FD                       	smpsAlterNote       $FD
0008CAB2 01                         	dc.b	$01
0008CAB3 E1F9                       	smpsAlterNote       $F9
0008CAB5 01                         	dc.b	$01
0008CAB6 E1FD                       	smpsAlterNote       $FD
0008CAB8 01                         	dc.b	$01
0008CAB9 E103                       	smpsAlterNote       $03
0008CABB 01                         	dc.b	$01
0008CABC E104                       	smpsAlterNote       $04
0008CABE 01                         	dc.b	$01
0008CABF E100                       	smpsAlterNote       $00
0008CAC1 01                         	dc.b	$01
0008CAC2 E1FD                       	smpsAlterNote       $FD
0008CAC4 ECF5                       	smpsPSGAlterVol     $F5
0008CAC6 9203 9106                  	dc.b	nF1, $03, nE1, $06
0008CACA EC04                       	smpsPSGAlterVol     $04
0008CACC E701                       	dc.b	smpsNoAttack, $01
0008CACE EC07                       	smpsPSGAlterVol     $07
0008CAD0 8006                       	dc.b	nRst, $06
0008CAD2 E100                       	smpsAlterNote       $00
0008CAD4 01                         	dc.b	$01
0008CAD5 E104                       	smpsAlterNote       $04
0008CAD7 01                         	dc.b	$01
0008CAD8 E103                       	smpsAlterNote       $03
0008CADA 01                         	dc.b	$01
0008CADB E1FD                       	smpsAlterNote       $FD
0008CADD 01                         	dc.b	$01
0008CADE E1F9                       	smpsAlterNote       $F9
0008CAE0 01                         	dc.b	$01
0008CAE1 E1FD                       	smpsAlterNote       $FD
0008CAE3 01                         	dc.b	$01
0008CAE4 E100                       	smpsAlterNote       $00
0008CAE6 01                         	dc.b	$01
0008CAE7 E104                       	smpsAlterNote       $04
0008CAE9 01                         	dc.b	$01
0008CAEA E1FD                       	smpsAlterNote       $FD
0008CAEC ECF5                       	smpsPSGAlterVol     $F5
0008CAEE 9103 920D                  	dc.b	nE1, $03, nF1, $0D
0008CAF2 E100                       	smpsAlterNote       $00
0008CAF4 E701                       	dc.b	smpsNoAttack, $01
0008CAF6 E104                       	smpsAlterNote       $04
0008CAF8 E701                       	dc.b	smpsNoAttack, $01
0008CAFA E100                       	smpsAlterNote       $00
0008CAFC E701                       	dc.b	smpsNoAttack, $01
0008CAFE E1FD                       	smpsAlterNote       $FD
0008CB00 E701                       	dc.b	smpsNoAttack, $01
0008CB02 E1F9                       	smpsAlterNote       $F9
0008CB04 E701                       	dc.b	smpsNoAttack, $01
0008CB06 E1FD                       	smpsAlterNote       $FD
0008CB08 E701                       	dc.b	smpsNoAttack, $01
0008CB0A E103                       	smpsAlterNote       $03
0008CB0C E701                       	dc.b	smpsNoAttack, $01
0008CB0E E104                       	smpsAlterNote       $04
0008CB10 E701                       	dc.b	smpsNoAttack, $01
0008CB12 E100                       	smpsAlterNote       $00
0008CB14 E701                       	dc.b	smpsNoAttack, $01
0008CB16 E1FA                       	smpsAlterNote       $FA
0008CB18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CB1C E1FD                       	smpsAlterNote       $FD
0008CB1E E701                       	dc.b	smpsNoAttack, $01
0008CB20 E103                       	smpsAlterNote       $03
0008CB22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CB26 E100                       	smpsAlterNote       $00
0008CB28 E701                       	dc.b	smpsNoAttack, $01
0008CB2A E1FA                       	smpsAlterNote       $FA
0008CB2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CB30 E100                       	smpsAlterNote       $00
0008CB32 EC04                       	smpsPSGAlterVol     $04
0008CB34 E701                       	dc.b	smpsNoAttack, $01
0008CB36 EC07                       	smpsPSGAlterVol     $07
0008CB38 E104                       	smpsAlterNote       $04
0008CB3A 8001                       	dc.b	nRst, $01
0008CB3C E103                       	smpsAlterNote       $03
0008CB3E 01                         	dc.b	$01
0008CB3F E1FD                       	smpsAlterNote       $FD
0008CB41 01                         	dc.b	$01
0008CB42 E1F9                       	smpsAlterNote       $F9
0008CB44 01                         	dc.b	$01
0008CB45 E1FD                       	smpsAlterNote       $FD
0008CB47 01                         	dc.b	$01
0008CB48 E100                       	smpsAlterNote       $00
0008CB4A 01                         	dc.b	$01
0008CB4B E104                       	smpsAlterNote       $04
0008CB4D 01                         	dc.b	$01
0008CB4E E1FD                       	smpsAlterNote       $FD
0008CB50 ECF5                       	smpsPSGAlterVol     $F5
0008CB52 9106                       	dc.b	nE1, $06
0008CB54 EC04                       	smpsPSGAlterVol     $04
0008CB56 E701                       	dc.b	smpsNoAttack, $01
0008CB58 EC07                       	smpsPSGAlterVol     $07
0008CB5A 8003                       	dc.b	nRst, $03
0008CB5C ECF5                       	smpsPSGAlterVol     $F5
0008CB5E 9106                       	dc.b	nE1, $06
0008CB60 EC04                       	smpsPSGAlterVol     $04
0008CB62 E701                       	dc.b	smpsNoAttack, $01
0008CB64 EC07                       	smpsPSGAlterVol     $07
0008CB66 8006                       	dc.b	nRst, $06
0008CB68 E100                       	smpsAlterNote       $00
0008CB6A 01                         	dc.b	$01
0008CB6B E104                       	smpsAlterNote       $04
0008CB6D 01                         	dc.b	$01
0008CB6E E100                       	smpsAlterNote       $00
0008CB70 01                         	dc.b	$01
0008CB71 E1FD                       	smpsAlterNote       $FD
0008CB73 01                         	dc.b	$01
0008CB74 ECF5                       	smpsPSGAlterVol     $F5
0008CB76 9206                       	dc.b	nF1, $06
0008CB78 EC04                       	smpsPSGAlterVol     $04
0008CB7A E701                       	dc.b	smpsNoAttack, $01
0008CB7C EC07                       	smpsPSGAlterVol     $07
0008CB7E 8003                       	dc.b	nRst, $03
0008CB80 ECF5                       	smpsPSGAlterVol     $F5
0008CB82 9207                       	dc.b	nF1, $07
0008CB84 EC0B                       	smpsPSGAlterVol     $0B
0008CB86 8007                       	dc.b	nRst, $07
0008CB88 E103                       	smpsAlterNote       $03
0008CB8A 0101                       	dc.b	$01, $01
0008CB8C E1FD                       	smpsAlterNote       $FD
0008CB8E 01                         	dc.b	$01
0008CB8F E1FA                       	smpsAlterNote       $FA
0008CB91 01                         	dc.b	$01
0008CB92 E1FD                       	smpsAlterNote       $FD
0008CB94 ECF5                       	smpsPSGAlterVol     $F5
0008CB96 9106                       	dc.b	nE1, $06
0008CB98 EC0B                       	smpsPSGAlterVol     $0B
0008CB9A 8004                       	dc.b	nRst, $04
0008CB9C ECF5                       	smpsPSGAlterVol     $F5
0008CB9E 9106                       	dc.b	nE1, $06
0008CBA0 EC04                       	smpsPSGAlterVol     $04
0008CBA2 E701                       	dc.b	smpsNoAttack, $01
0008CBA4 EC07                       	smpsPSGAlterVol     $07
0008CBA6 8006                       	dc.b	nRst, $06
0008CBA8 E100                       	smpsAlterNote       $00
0008CBAA 01                         	dc.b	$01
0008CBAB E104                       	smpsAlterNote       $04
0008CBAD 01                         	dc.b	$01
0008CBAE E100                       	smpsAlterNote       $00
0008CBB0 01                         	dc.b	$01
0008CBB1 E1FA                       	smpsAlterNote       $FA
0008CBB3 01                         	dc.b	$01
0008CBB4 E1FD                       	smpsAlterNote       $FD
0008CBB6 ECF5                       	smpsPSGAlterVol     $F5
0008CBB8 9206                       	dc.b	nF1, $06
0008CBBA EC04                       	smpsPSGAlterVol     $04
0008CBBC E701                       	dc.b	smpsNoAttack, $01
0008CBBE EC07                       	smpsPSGAlterVol     $07
0008CBC0 8003                       	dc.b	nRst, $03
0008CBC2 ECF5                       	smpsPSGAlterVol     $F5
0008CBC4 9206                       	dc.b	nF1, $06
0008CBC6 EC04                       	smpsPSGAlterVol     $04
0008CBC8 E701                       	dc.b	smpsNoAttack, $01
0008CBCA EC07                       	smpsPSGAlterVol     $07
0008CBCC 8006                       	dc.b	nRst, $06
0008CBCE E100                       	smpsAlterNote       $00
0008CBD0 01                         	dc.b	$01
0008CBD1 E104                       	smpsAlterNote       $04
0008CBD3 01                         	dc.b	$01
0008CBD4 E103                       	smpsAlterNote       $03
0008CBD6 01                         	dc.b	$01
0008CBD7 E1FD                       	smpsAlterNote       $FD
0008CBD9 01                         	dc.b	$01
0008CBDA ECF5                       	smpsPSGAlterVol     $F5
0008CBDC 9107                       	dc.b	nE1, $07
0008CBDE EC0B                       	smpsPSGAlterVol     $0B
0008CBE0 8004                       	dc.b	nRst, $04
0008CBE2 ECF5                       	smpsPSGAlterVol     $F5
0008CBE4 9106                       	dc.b	nE1, $06
0008CBE6 EC0B                       	smpsPSGAlterVol     $0B
0008CBE8 8007                       	dc.b	nRst, $07
0008CBEA E103                       	smpsAlterNote       $03
0008CBEC 0101                       	dc.b	$01, $01
0008CBEE E100                       	smpsAlterNote       $00
0008CBF0 01                         	dc.b	$01
0008CBF1 E1FA                       	smpsAlterNote       $FA
0008CBF3 01                         	dc.b	$01
0008CBF4 E1FD                       	smpsAlterNote       $FD
0008CBF6 ECF5                       	smpsPSGAlterVol     $F5
0008CBF8 9206                       	dc.b	nF1, $06
0008CBFA EC04                       	smpsPSGAlterVol     $04
0008CBFC E701                       	dc.b	smpsNoAttack, $01
0008CBFE EC07                       	smpsPSGAlterVol     $07
0008CC00 8003                       	dc.b	nRst, $03
0008CC02 ECF5                       	smpsPSGAlterVol     $F5
0008CC04 9206                       	dc.b	nF1, $06
0008CC06 EC04                       	smpsPSGAlterVol     $04
0008CC08 E701                       	dc.b	smpsNoAttack, $01
0008CC0A EC07                       	smpsPSGAlterVol     $07
0008CC0C 8006                       	dc.b	nRst, $06
0008CC0E E100                       	smpsAlterNote       $00
0008CC10 01                         	dc.b	$01
0008CC11 E104                       	smpsAlterNote       $04
0008CC13 01                         	dc.b	$01
0008CC14 E100                       	smpsAlterNote       $00
0008CC16 01                         	dc.b	$01
0008CC17 E1FD                       	smpsAlterNote       $FD
0008CC19 01                         	dc.b	$01
0008CC1A ECF5                       	smpsPSGAlterVol     $F5
0008CC1C 9106                       	dc.b	nE1, $06
0008CC1E EC04                       	smpsPSGAlterVol     $04
0008CC20 E701                       	dc.b	smpsNoAttack, $01
0008CC22 EC07                       	smpsPSGAlterVol     $07
0008CC24 8003                       	dc.b	nRst, $03
0008CC26 ECF5                       	smpsPSGAlterVol     $F5
0008CC28 9107 9106                  	dc.b	nE1, $07, nE1, $06
0008CC2C EC04                       	smpsPSGAlterVol     $04
0008CC2E E701                       	dc.b	smpsNoAttack, $01
0008CC30 ECFC                       	smpsPSGAlterVol     $FC
0008CC32 9103                       	dc.b	nE1, $03
0008CC34 EC04                       	smpsPSGAlterVol     $04
0008CC36 E701                       	dc.b	smpsNoAttack, $01
0008CC38 ECFC                       	smpsPSGAlterVol     $FC
0008CC3A 9102                       	dc.b	nE1, $02
0008CC3C EC04                       	smpsPSGAlterVol     $04
0008CC3E E701                       	dc.b	smpsNoAttack, $01
0008CC40 ECFC                       	smpsPSGAlterVol     $FC
0008CC42 9103                       	dc.b	nE1, $03
0008CC44 EC0B                       	smpsPSGAlterVol     $0B
0008CC46 800A                       	dc.b	nRst, $0A
0008CC48 E100                       	smpsAlterNote       $00
0008CC4A 01                         	dc.b	$01
0008CC4B E104                       	smpsAlterNote       $04
0008CC4D 01                         	dc.b	$01
0008CC4E E100                       	smpsAlterNote       $00
0008CC50 01                         	dc.b	$01
0008CC51 E1FA                       	smpsAlterNote       $FA
0008CC53 01                         	dc.b	$01
0008CC54 E1F9                       	smpsAlterNote       $F9
0008CC56 01                         	dc.b	$01
0008CC57 E1FD                       	smpsAlterNote       $FD
0008CC59 01                         	dc.b	$01
0008CC5A E103                       	smpsAlterNote       $03
0008CC5C 0101                       	dc.b	$01, $01
0008CC5E E100                       	smpsAlterNote       $00
0008CC60 01                         	dc.b	$01
0008CC61 E1FA                       	smpsAlterNote       $FA
0008CC63 0101                       	dc.b	$01, $01
0008CC65 E1FD                       	smpsAlterNote       $FD
0008CC67 ECF5                       	smpsPSGAlterVol     $F5
0008CC69 9206                       	dc.b	nF1, $06
0008CC6B EC04                       	smpsPSGAlterVol     $04
0008CC6D E704                       	dc.b	smpsNoAttack, $04
0008CC6F ECFC                       	smpsPSGAlterVol     $FC
0008CC71 9206                       	dc.b	nF1, $06
0008CC73 EC04                       	smpsPSGAlterVol     $04
0008CC75 E701                       	dc.b	smpsNoAttack, $01
0008CC77 EC07                       	smpsPSGAlterVol     $07
0008CC79 8006                       	dc.b	nRst, $06
0008CC7B E100                       	smpsAlterNote       $00
0008CC7D 01                         	dc.b	$01
0008CC7E E104                       	smpsAlterNote       $04
0008CC80 01                         	dc.b	$01
0008CC81 E103                       	smpsAlterNote       $03
0008CC83 01                         	dc.b	$01
0008CC84 E1FD                       	smpsAlterNote       $FD
0008CC86 01                         	dc.b	$01
0008CC87 ECF5                       	smpsPSGAlterVol     $F5
0008CC89 9407                       	dc.b	nG1, $07
0008CC8B EC0B                       	smpsPSGAlterVol     $0B
0008CC8D 8004                       	dc.b	nRst, $04
0008CC8F ECF5                       	smpsPSGAlterVol     $F5
0008CC91 9406                       	dc.b	nG1, $06
0008CC93 EC0B                       	smpsPSGAlterVol     $0B
0008CC95 8007                       	dc.b	nRst, $07
0008CC97 E103                       	smpsAlterNote       $03
0008CC99 0101                       	dc.b	$01, $01
0008CC9B E1FD                       	smpsAlterNote       $FD
0008CC9D 01                         	dc.b	$01
0008CC9E E1F9                       	smpsAlterNote       $F9
0008CCA0 01                         	dc.b	$01
0008CCA1 E1FD                       	smpsAlterNote       $FD
0008CCA3 ECF5                       	smpsPSGAlterVol     $F5
0008CCA5 9206                       	dc.b	nF1, $06
0008CCA7 EC04                       	smpsPSGAlterVol     $04
0008CCA9 E701                       	dc.b	smpsNoAttack, $01
0008CCAB EC07                       	smpsPSGAlterVol     $07
0008CCAD 8003                       	dc.b	nRst, $03
0008CCAF ECF5                       	smpsPSGAlterVol     $F5
0008CCB1 9206                       	dc.b	nF1, $06
0008CCB3 EC04                       	smpsPSGAlterVol     $04
0008CCB5 E701                       	dc.b	smpsNoAttack, $01
0008CCB7 EC07                       	smpsPSGAlterVol     $07
0008CCB9 8006                       	dc.b	nRst, $06
0008CCBB E100                       	smpsAlterNote       $00
0008CCBD 01                         	dc.b	$01
0008CCBE E104                       	smpsAlterNote       $04
0008CCC0 01                         	dc.b	$01
0008CCC1 E100                       	smpsAlterNote       $00
0008CCC3 01                         	dc.b	$01
0008CCC4 E1FA                       	smpsAlterNote       $FA
0008CCC6 01                         	dc.b	$01
0008CCC7 E1FD                       	smpsAlterNote       $FD
0008CCC9 ECF5                       	smpsPSGAlterVol     $F5
0008CCCB 9206                       	dc.b	nF1, $06
0008CCCD EC04                       	smpsPSGAlterVol     $04
0008CCCF E701                       	dc.b	smpsNoAttack, $01
0008CCD1 EC07                       	smpsPSGAlterVol     $07
0008CCD3 8003                       	dc.b	nRst, $03
0008CCD5 ECF5                       	smpsPSGAlterVol     $F5
0008CCD7 9107                       	dc.b	nE1, $07
0008CCD9 EC0B                       	smpsPSGAlterVol     $0B
0008CCDB 8006                       	dc.b	nRst, $06
0008CCDD E100                       	smpsAlterNote       $00
0008CCDF 01                         	dc.b	$01
0008CCE0 E103                       	smpsAlterNote       $03
0008CCE2 0101                       	dc.b	$01, $01
0008CCE4 E1FD                       	smpsAlterNote       $FD
0008CCE6 01                         	dc.b	$01
0008CCE7 ECF5                       	smpsPSGAlterVol     $F5
0008CCE9 9207                       	dc.b	nF1, $07
0008CCEB EC0B                       	smpsPSGAlterVol     $0B
0008CCED 8004                       	dc.b	nRst, $04
0008CCEF ECF5                       	smpsPSGAlterVol     $F5
0008CCF1 9206                       	dc.b	nF1, $06
0008CCF3 EC04                       	smpsPSGAlterVol     $04
0008CCF5 E701                       	dc.b	smpsNoAttack, $01
0008CCF7 EC07                       	smpsPSGAlterVol     $07
0008CCF9 8006                       	dc.b	nRst, $06
0008CCFB E103                       	smpsAlterNote       $03
0008CCFD 01                         	dc.b	$01
0008CCFE E104                       	smpsAlterNote       $04
0008CD00 01                         	dc.b	$01
0008CD01 E100                       	smpsAlterNote       $00
0008CD03 01                         	dc.b	$01
0008CD04 E1FB                       	smpsAlterNote       $FB
0008CD06 01                         	dc.b	$01
0008CD07 E1FD                       	smpsAlterNote       $FD
0008CD09 ECF5                       	smpsPSGAlterVol     $F5
0008CD0B 9406                       	dc.b	nG1, $06
0008CD0D EC04                       	smpsPSGAlterVol     $04
0008CD0F E701                       	dc.b	smpsNoAttack, $01
0008CD11 EC07                       	smpsPSGAlterVol     $07
0008CD13 8003                       	dc.b	nRst, $03
0008CD15 ECF5                       	smpsPSGAlterVol     $F5
0008CD17 9406                       	dc.b	nG1, $06
0008CD19 EC04                       	smpsPSGAlterVol     $04
0008CD1B E701                       	dc.b	smpsNoAttack, $01
0008CD1D EC07                       	smpsPSGAlterVol     $07
0008CD1F 8006                       	dc.b	nRst, $06
0008CD21 E100                       	smpsAlterNote       $00
0008CD23 01                         	dc.b	$01
0008CD24 E104                       	smpsAlterNote       $04
0008CD26 01                         	dc.b	$01
0008CD27 E100                       	smpsAlterNote       $00
0008CD29 01                         	dc.b	$01
0008CD2A E1FD                       	smpsAlterNote       $FD
0008CD2C 01                         	dc.b	$01
0008CD2D ECF5                       	smpsPSGAlterVol     $F5
0008CD2F 9206                       	dc.b	nF1, $06
0008CD31 EC04                       	smpsPSGAlterVol     $04
0008CD33 E701                       	dc.b	smpsNoAttack, $01
0008CD35 EC07                       	smpsPSGAlterVol     $07
0008CD37 8003                       	dc.b	nRst, $03
0008CD39 ECF5                       	smpsPSGAlterVol     $F5
0008CD3B 9207                       	dc.b	nF1, $07
0008CD3D EC0B                       	smpsPSGAlterVol     $0B
0008CD3F 8007                       	dc.b	nRst, $07
0008CD41 E103                       	smpsAlterNote       $03
0008CD43 0101                       	dc.b	$01, $01
0008CD45 E1FD                       	smpsAlterNote       $FD
0008CD47 01                         	dc.b	$01
0008CD48 E1FA                       	smpsAlterNote       $FA
0008CD4A 01                         	dc.b	$01
0008CD4B E1FD                       	smpsAlterNote       $FD
0008CD4D ECF5                       	smpsPSGAlterVol     $F5
0008CD4F 9206                       	dc.b	nF1, $06
0008CD51 EC0B                       	smpsPSGAlterVol     $0B
0008CD53 8004                       	dc.b	nRst, $04
0008CD55 ECF5                       	smpsPSGAlterVol     $F5
0008CD57 9206                       	dc.b	nF1, $06
0008CD59 EC04                       	smpsPSGAlterVol     $04
0008CD5B E701                       	dc.b	smpsNoAttack, $01
0008CD5D EC07                       	smpsPSGAlterVol     $07
0008CD5F 8006                       	dc.b	nRst, $06
0008CD61 E100                       	smpsAlterNote       $00
0008CD63 01                         	dc.b	$01
0008CD64 E104                       	smpsAlterNote       $04
0008CD66 01                         	dc.b	$01
0008CD67 E100                       	smpsAlterNote       $00
0008CD69 01                         	dc.b	$01
0008CD6A E1FA                       	smpsAlterNote       $FA
0008CD6C 01                         	dc.b	$01
0008CD6D E1FD                       	smpsAlterNote       $FD
0008CD6F ECF5                       	smpsPSGAlterVol     $F5
0008CD71 9206                       	dc.b	nF1, $06
0008CD73 EC04                       	smpsPSGAlterVol     $04
0008CD75 E701                       	dc.b	smpsNoAttack, $01
0008CD77 EC07                       	smpsPSGAlterVol     $07
0008CD79 8003                       	dc.b	nRst, $03
0008CD7B ECF5                       	smpsPSGAlterVol     $F5
0008CD7D 9207                       	dc.b	nF1, $07
0008CD7F EC0B                       	smpsPSGAlterVol     $0B
0008CD81 8006                       	dc.b	nRst, $06
0008CD83 E100                       	smpsAlterNote       $00
0008CD85 01                         	dc.b	$01
0008CD86 E103                       	smpsAlterNote       $03
0008CD88 0101                       	dc.b	$01, $01
0008CD8A E1FD                       	smpsAlterNote       $FD
0008CD8C 01                         	dc.b	$01
0008CD8D ECF5                       	smpsPSGAlterVol     $F5
0008CD8F 9207                       	dc.b	nF1, $07
0008CD91 EC0B                       	smpsPSGAlterVol     $0B
0008CD93 8004                       	dc.b	nRst, $04
0008CD95 ECF5                       	smpsPSGAlterVol     $F5
0008CD97 9206                       	dc.b	nF1, $06
0008CD99 EC0B                       	smpsPSGAlterVol     $0B
0008CD9B 8007                       	dc.b	nRst, $07
0008CD9D E103                       	smpsAlterNote       $03
0008CD9F 0101                       	dc.b	$01, $01
0008CDA1 E100                       	smpsAlterNote       $00
0008CDA3 01                         	dc.b	$01
0008CDA4 E1FA                       	smpsAlterNote       $FA
0008CDA6 01                         	dc.b	$01
0008CDA7 E1FD                       	smpsAlterNote       $FD
0008CDA9 ECF5                       	smpsPSGAlterVol     $F5
0008CDAB 9206                       	dc.b	nF1, $06
0008CDAD EC04                       	smpsPSGAlterVol     $04
0008CDAF E701                       	dc.b	smpsNoAttack, $01
0008CDB1 EC07                       	smpsPSGAlterVol     $07
0008CDB3 8003                       	dc.b	nRst, $03
0008CDB5 ECF5                       	smpsPSGAlterVol     $F5
0008CDB7 9206                       	dc.b	nF1, $06
0008CDB9 EC04                       	smpsPSGAlterVol     $04
0008CDBB E701                       	dc.b	smpsNoAttack, $01
0008CDBD EC07                       	smpsPSGAlterVol     $07
0008CDBF 8006                       	dc.b	nRst, $06
0008CDC1 E100                       	smpsAlterNote       $00
0008CDC3 01                         	dc.b	$01
0008CDC4 E104                       	smpsAlterNote       $04
0008CDC6 01                         	dc.b	$01
0008CDC7 E100                       	smpsAlterNote       $00
0008CDC9 01                         	dc.b	$01
0008CDCA E1FD                       	smpsAlterNote       $FD
0008CDCC 01                         	dc.b	$01
0008CDCD ECF5                       	smpsPSGAlterVol     $F5
0008CDCF 9206                       	dc.b	nF1, $06
0008CDD1 EC04                       	smpsPSGAlterVol     $04
0008CDD3 E701                       	dc.b	smpsNoAttack, $01
0008CDD5 EC07                       	smpsPSGAlterVol     $07
0008CDD7 8003                       	dc.b	nRst, $03
0008CDD9 ECF5                       	smpsPSGAlterVol     $F5
0008CDDB 9207                       	dc.b	nF1, $07
0008CDDD EC0B                       	smpsPSGAlterVol     $0B
0008CDDF 8007                       	dc.b	nRst, $07
0008CDE1 E104                       	smpsAlterNote       $04
0008CDE3 0101                       	dc.b	$01, $01
0008CDE5 E1FB                       	smpsAlterNote       $FB
0008CDE7 01                         	dc.b	$01
0008CDE8 E1F6                       	smpsAlterNote       $F6
0008CDEA 0101                       	dc.b	$01, $01
0008CDEC E1FF                       	smpsAlterNote       $FF
0008CDEE 01                         	dc.b	$01
0008CDEF E105                       	smpsAlterNote       $05
0008CDF1 01                         	dc.b	$01
0008CDF2 E104                       	smpsAlterNote       $04
0008CDF4 01                         	dc.b	$01
0008CDF5 E1FB                       	smpsAlterNote       $FB
0008CDF7 01                         	dc.b	$01
0008CDF8 E1F5                       	smpsAlterNote       $F5
0008CDFA 01                         	dc.b	$01
0008CDFB E1FC                       	smpsAlterNote       $FC
0008CDFD ECF5                       	smpsPSGAlterVol     $F5
0008CDFF 8B0E                       	dc.b	nBb0, $0E
0008CE01 E102                       	smpsAlterNote       $02
0008CE03 EC0B                       	smpsPSGAlterVol     $0B
0008CE05 8001                       	dc.b	nRst, $01
0008CE07 E101                       	smpsAlterNote       $01
0008CE09 01                         	dc.b	$01
0008CE0A E1FC                       	smpsAlterNote       $FC
0008CE0C 01                         	dc.b	$01
0008CE0D E1F9                       	smpsAlterNote       $F9
0008CE0F 0101                       	dc.b	$01, $01
0008CE11 E1FF                       	smpsAlterNote       $FF
0008CE13 01                         	dc.b	$01
0008CE14 E102                       	smpsAlterNote       $02
0008CE16 01                         	dc.b	$01
0008CE17 E1FF                       	smpsAlterNote       $FF
0008CE19 01                         	dc.b	$01
0008CE1A E1FC                       	smpsAlterNote       $FC
0008CE1C 01                         	dc.b	$01
0008CE1D E1F8                       	smpsAlterNote       $F8
0008CE1F 01                         	dc.b	$01
0008CE20 E1FC                       	smpsAlterNote       $FC
0008CE22 01                         	dc.b	$01
0008CE23 E101                       	smpsAlterNote       $01
0008CE25 01                         	dc.b	$01
0008CE26 E102                       	smpsAlterNote       $02
0008CE28 01                         	dc.b	$01
0008CE29 E1FF                       	smpsAlterNote       $FF
0008CE2B 01                         	dc.b	$01
0008CE2C E1FB                       	smpsAlterNote       $FB
0008CE2E ECF5                       	smpsPSGAlterVol     $F5
0008CE30 8D0D                       	dc.b	nC1, $0D
0008CE32 E101                       	smpsAlterNote       $01
0008CE34 EC0B                       	smpsPSGAlterVol     $0B
0008CE36 8001                       	dc.b	nRst, $01
0008CE38 E102                       	smpsAlterNote       $02
0008CE3A 01                         	dc.b	$01
0008CE3B E1FF                       	smpsAlterNote       $FF
0008CE3D 01                         	dc.b	$01
0008CE3E E1F9                       	smpsAlterNote       $F9
0008CE40 0101                       	dc.b	$01, $01
0008CE42 E1FC                       	smpsAlterNote       $FC
0008CE44 01                         	dc.b	$01
0008CE45 E101                       	smpsAlterNote       $01
0008CE47 0101                       	dc.b	$01, $01
0008CE49 E1FC                       	smpsAlterNote       $FC
0008CE4B 01                         	dc.b	$01
0008CE4C E1F9                       	smpsAlterNote       $F9
0008CE4E 0101                       	dc.b	$01, $01
0008CE50 E1FF                       	smpsAlterNote       $FF
0008CE52 01                         	dc.b	$01
0008CE53 E102                       	smpsAlterNote       $02
0008CE55 01                         	dc.b	$01
0008CE56 E101                       	smpsAlterNote       $01
0008CE58 01                         	dc.b	$01
0008CE59 E1FC                       	smpsAlterNote       $FC
0008CE5B ECF5                       	smpsPSGAlterVol     $F5
0008CE5D 8F0D                       	dc.b	nD1, $0D
0008CE5F E1FF                       	smpsAlterNote       $FF
0008CE61 EC04                       	smpsPSGAlterVol     $04
0008CE63 E701                       	dc.b	smpsNoAttack, $01
0008CE65 EC07                       	smpsPSGAlterVol     $07
0008CE67 E103                       	smpsAlterNote       $03
0008CE69 8001                       	dc.b	nRst, $01
0008CE6B E102                       	smpsAlterNote       $02
0008CE6D 01                         	dc.b	$01
0008CE6E E1FD                       	smpsAlterNote       $FD
0008CE70 01                         	dc.b	$01
0008CE71 E1F9                       	smpsAlterNote       $F9
0008CE73 01                         	dc.b	$01
0008CE74 E1FD                       	smpsAlterNote       $FD
0008CE76 01                         	dc.b	$01
0008CE77 E100                       	smpsAlterNote       $00
0008CE79 01                         	dc.b	$01
0008CE7A E103                       	smpsAlterNote       $03
0008CE7C 01                         	dc.b	$01
0008CE7D E100                       	smpsAlterNote       $00
0008CE7F 01                         	dc.b	$01
0008CE80 E1FA                       	smpsAlterNote       $FA
0008CE82 01                         	dc.b	$01
0008CE83 E1F9                       	smpsAlterNote       $F9
0008CE85 01                         	dc.b	$01
0008CE86 E1FD                       	smpsAlterNote       $FD
0008CE88 01                         	dc.b	$01
0008CE89 E102                       	smpsAlterNote       $02
0008CE8B 0101                       	dc.b	$01, $01
0008CE8D E100                       	smpsAlterNote       $00
0008CE8F 01                         	dc.b	$01
0008CE90 E1FD                       	smpsAlterNote       $FD
0008CE92 ECF5                       	smpsPSGAlterVol     $F5
0008CE94 910D                       	dc.b	nE1, $0D
0008CE96 E103                       	smpsAlterNote       $03
0008CE98 EC0B                       	smpsPSGAlterVol     $0B
0008CE9A 8001 01                    	dc.b	nRst, $01, $01
0008CE9D E100                       	smpsAlterNote       $00
0008CE9F 01                         	dc.b	$01
0008CEA0 E1FA                       	smpsAlterNote       $FA
0008CEA2 0101                       	dc.b	$01, $01
0008CEA4 E100                       	smpsAlterNote       $00
0008CEA6 01                         	dc.b	$01
0008CEA7 E103                       	smpsAlterNote       $03
0008CEA9 01                         	dc.b	$01
0008CEAA E1FD                       	smpsAlterNote       $FD
0008CEAC ECF5                       	smpsPSGAlterVol     $F5
0008CEAE 9206                       	dc.b	nF1, $06
0008CEB0 EC04                       	smpsPSGAlterVol     $04
0008CEB2 E701                       	dc.b	smpsNoAttack, $01
0008CEB4 EC07                       	smpsPSGAlterVol     $07
0008CEB6 8003                       	dc.b	nRst, $03
0008CEB8 ECF5                       	smpsPSGAlterVol     $F5
0008CEBA 9207                       	dc.b	nF1, $07
0008CEBC EC0B                       	smpsPSGAlterVol     $0B
0008CEBE 8006                       	dc.b	nRst, $06
0008CEC0 E100                       	smpsAlterNote       $00
0008CEC2 01                         	dc.b	$01
0008CEC3 E103                       	smpsAlterNote       $03
0008CEC5 0101                       	dc.b	$01, $01
0008CEC7 E1FD                       	smpsAlterNote       $FD
0008CEC9 01                         	dc.b	$01
0008CECA ECF5                       	smpsPSGAlterVol     $F5
0008CECC 9407                       	dc.b	nG1, $07
0008CECE EC0B                       	smpsPSGAlterVol     $0B
0008CED0 8004                       	dc.b	nRst, $04
0008CED2 ECF5                       	smpsPSGAlterVol     $F5
0008CED4 9406                       	dc.b	nG1, $06
0008CED6 EC04                       	smpsPSGAlterVol     $04
0008CED8 E701                       	dc.b	smpsNoAttack, $01
0008CEDA EC07                       	smpsPSGAlterVol     $07
0008CEDC 8006                       	dc.b	nRst, $06
0008CEDE E103                       	smpsAlterNote       $03
0008CEE0 01                         	dc.b	$01
0008CEE1 E104                       	smpsAlterNote       $04
0008CEE3 01                         	dc.b	$01
0008CEE4 E100                       	smpsAlterNote       $00
0008CEE6 01                         	dc.b	$01
0008CEE7 E1F9                       	smpsAlterNote       $F9
0008CEE9 01                         	dc.b	$01
0008CEEA E1FD                       	smpsAlterNote       $FD
0008CEEC ECF5                       	smpsPSGAlterVol     $F5
0008CEEE 9206                       	dc.b	nF1, $06
0008CEF0 EC04                       	smpsPSGAlterVol     $04
0008CEF2 E701                       	dc.b	smpsNoAttack, $01
0008CEF4 EC07                       	smpsPSGAlterVol     $07
0008CEF6 8003                       	dc.b	nRst, $03
0008CEF8 ECF5                       	smpsPSGAlterVol     $F5
0008CEFA 9206                       	dc.b	nF1, $06
0008CEFC EC04                       	smpsPSGAlterVol     $04
0008CEFE E701                       	dc.b	smpsNoAttack, $01
0008CF00 EC07                       	smpsPSGAlterVol     $07
0008CF02 8006                       	dc.b	nRst, $06
0008CF04 E100                       	smpsAlterNote       $00
0008CF06 01                         	dc.b	$01
0008CF07 E104                       	smpsAlterNote       $04
0008CF09 01                         	dc.b	$01
0008CF0A E103                       	smpsAlterNote       $03
0008CF0C 01                         	dc.b	$01
0008CF0D E1FD                       	smpsAlterNote       $FD
0008CF0F 01                         	dc.b	$01
0008CF10 ECF5                       	smpsPSGAlterVol     $F5
0008CF12 9407                       	dc.b	nG1, $07
0008CF14 EC0B                       	smpsPSGAlterVol     $0B
0008CF16 8004                       	dc.b	nRst, $04
0008CF18 ECF5                       	smpsPSGAlterVol     $F5
0008CF1A 9406                       	dc.b	nG1, $06
0008CF1C EC0B                       	smpsPSGAlterVol     $0B
0008CF1E 8007                       	dc.b	nRst, $07
0008CF20 E103                       	smpsAlterNote       $03
0008CF22 0101                       	dc.b	$01, $01
0008CF24 E100                       	smpsAlterNote       $00
0008CF26 01                         	dc.b	$01
0008CF27 E1F9                       	smpsAlterNote       $F9
0008CF29 01                         	dc.b	$01
0008CF2A E1FD                       	smpsAlterNote       $FD
0008CF2C ECF5                       	smpsPSGAlterVol     $F5
0008CF2E 9206                       	dc.b	nF1, $06
0008CF30 EC04                       	smpsPSGAlterVol     $04
0008CF32 E701                       	dc.b	smpsNoAttack, $01
0008CF34 EC07                       	smpsPSGAlterVol     $07
0008CF36 8003                       	dc.b	nRst, $03
0008CF38 ECF5                       	smpsPSGAlterVol     $F5
0008CF3A 9206                       	dc.b	nF1, $06
0008CF3C EC04                       	smpsPSGAlterVol     $04
0008CF3E E701                       	dc.b	smpsNoAttack, $01
0008CF40 EC07                       	smpsPSGAlterVol     $07
0008CF42 8006                       	dc.b	nRst, $06
0008CF44 E100                       	smpsAlterNote       $00
0008CF46 01                         	dc.b	$01
0008CF47 E104                       	smpsAlterNote       $04
0008CF49 01                         	dc.b	$01
0008CF4A E100                       	smpsAlterNote       $00
0008CF4C 01                         	dc.b	$01
0008CF4D E1FB                       	smpsAlterNote       $FB
0008CF4F 01                         	dc.b	$01
0008CF50 E1FD                       	smpsAlterNote       $FD
0008CF52 ECF5                       	smpsPSGAlterVol     $F5
0008CF54 9406                       	dc.b	nG1, $06
0008CF56 EC04                       	smpsPSGAlterVol     $04
0008CF58 E701                       	dc.b	smpsNoAttack, $01
0008CF5A EC07                       	smpsPSGAlterVol     $07
0008CF5C 8003                       	dc.b	nRst, $03
0008CF5E ECF5                       	smpsPSGAlterVol     $F5
0008CF60 9407                       	dc.b	nG1, $07
0008CF62 EC0B                       	smpsPSGAlterVol     $0B
0008CF64 8006                       	dc.b	nRst, $06
0008CF66 E100                       	smpsAlterNote       $00
0008CF68 01                         	dc.b	$01
0008CF69 E103                       	smpsAlterNote       $03
0008CF6B 0101                       	dc.b	$01, $01
0008CF6D E1FD                       	smpsAlterNote       $FD
0008CF6F 01                         	dc.b	$01
0008CF70 ECF5                       	smpsPSGAlterVol     $F5
0008CF72 9207                       	dc.b	nF1, $07
0008CF74 EC0B                       	smpsPSGAlterVol     $0B
0008CF76 8004                       	dc.b	nRst, $04
0008CF78 ECF5                       	smpsPSGAlterVol     $F5
0008CF7A 9206                       	dc.b	nF1, $06
0008CF7C EC04                       	smpsPSGAlterVol     $04
0008CF7E E701                       	dc.b	smpsNoAttack, $01
0008CF80 ECFC                       	smpsPSGAlterVol     $FC
0008CF82 E1FC                       	smpsAlterNote       $FC
0008CF84 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
0008CF88 EC04                       	smpsPSGAlterVol     $04
0008CF8A E701                       	dc.b	smpsNoAttack, $01
0008CF8C ECFC                       	smpsPSGAlterVol     $FC
0008CF8E 9003                       	dc.b	nEb1, $03
0008CF90 E1FD                       	smpsAlterNote       $FD
0008CF92 9403                       	dc.b	nG1, $03
0008CF94 EC04                       	smpsPSGAlterVol     $04
0008CF96 E701                       	dc.b	smpsNoAttack, $01
0008CF98 E1FE                       	smpsAlterNote       $FE
0008CF9A ECFC                       	smpsPSGAlterVol     $FC
0008CF9C 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0008CFA0 EC04                       	smpsPSGAlterVol     $04
0008CFA2 E701                       	dc.b	smpsNoAttack, $01
0008CFA4 EC07                       	smpsPSGAlterVol     $07
0008CFA6 8009                       	dc.b	nRst, $09
0008CFA8 E100                       	smpsAlterNote       $00
0008CFAA 01                         	dc.b	$01
0008CFAB F6F5 19                    	smpsJump            music84_Jump07
0008CFAE                            
0008CFAE                            ; PSG2 Data
0008CFAE                            music84_PSG2:
0008CFAE E1FC                       	smpsAlterNote       $FC
0008CFB0 EC04                       	smpsPSGAlterVol     $04
0008CFB2 8F03                       	dc.b	nD1, $03
0008CFB4 E1FD                       	smpsAlterNote       $FD
0008CFB6 9203                       	dc.b	nF1, $03
0008CFB8 EC04                       	smpsPSGAlterVol     $04
0008CFBA E701                       	dc.b	smpsNoAttack, $01
0008CFBC E1FE                       	smpsAlterNote       $FE
0008CFBE ECFC                       	smpsPSGAlterVol     $FC
0008CFC0 9603                       	dc.b	nA1, $03
0008CFC2 E1FD                       	smpsAlterNote       $FD
0008CFC4 9103                       	dc.b	nE1, $03
0008CFC6 EC04                       	smpsPSGAlterVol     $04
0008CFC8 E701                       	dc.b	smpsNoAttack, $01
0008CFCA ECFC                       	smpsPSGAlterVol     $FC
0008CFCC 9403                       	dc.b	nG1, $03
0008CFCE E1FE                       	smpsAlterNote       $FE
0008CFD0 9703                       	dc.b	nBb1, $03
0008CFD2 EC04                       	smpsPSGAlterVol     $04
0008CFD4 E701                       	dc.b	smpsNoAttack, $01
0008CFD6 E1FF                       	smpsAlterNote       $FF
0008CFD8 ECFC                       	smpsPSGAlterVol     $FC
0008CFDA 9B02                       	dc.b	nD2, $02
0008CFDC EC04                       	smpsPSGAlterVol     $04
0008CFDE E701                       	dc.b	smpsNoAttack, $01
0008CFE0 ECFC                       	smpsPSGAlterVol     $FC
0008CFE2 E1FE                       	smpsAlterNote       $FE
0008CFE4 9A03                       	dc.b	nCs2, $03
0008CFE6 EC0B                       	smpsPSGAlterVol     $0B
0008CFE8 800A                       	dc.b	nRst, $0A
0008CFEA E102                       	smpsAlterNote       $02
0008CFEC 01                         	dc.b	$01
0008CFED E10A                       	smpsAlterNote       $0A
0008CFEF 01                         	dc.b	$01
0008CFF0 E102                       	smpsAlterNote       $02
0008CFF2 01                         	dc.b	$01
0008CFF3 E1FC                       	smpsAlterNote       $FC
0008CFF5 01                         	dc.b	$01
0008CFF6 E10A                       	smpsAlterNote       $0A
0008CFF8 01                         	dc.b	$01
0008CFF9 E1FC                       	smpsAlterNote       $FC
0008CFFB 01                         	dc.b	$01
0008CFFC E108                       	smpsAlterNote       $08
0008CFFE 01                         	dc.b	$01
0008CFFF E10A                       	smpsAlterNote       $0A
0008D001 01                         	dc.b	$01
0008D002 E102                       	smpsAlterNote       $02
0008D004 01                         	dc.b	$01
0008D005 E1F7                       	smpsAlterNote       $F7
0008D007 0101                       	dc.b	$01, $01
0008D009 E102                       	smpsAlterNote       $02
0008D00B 01                         	dc.b	$01
0008D00C E108                       	smpsAlterNote       $08
0008D00E 0101                       	dc.b	$01, $01
0008D010 E1FC                       	smpsAlterNote       $FC
0008D012 01                         	dc.b	$01
0008D013 E10A                       	smpsAlterNote       $0A
0008D015 01                         	dc.b	$01
0008D016 E1F7                       	smpsAlterNote       $F7
0008D018 01                         	dc.b	$01
0008D019 E102                       	smpsAlterNote       $02
0008D01B 01                         	dc.b	$01
0008D01C E10A                       	smpsAlterNote       $0A
0008D01E 01                         	dc.b	$01
0008D01F E102                       	smpsAlterNote       $02
0008D021 01                         	dc.b	$01
0008D022 E1FC                       	smpsAlterNote       $FC
0008D024 01                         	dc.b	$01
0008D025                            
0008D025                            music84_Jump06:
0008D025 E10A                       	smpsAlterNote       $0A
0008D027 8001                       	dc.b	nRst, $01
0008D029 E1FC                       	smpsAlterNote       $FC
0008D02B 01                         	dc.b	$01
0008D02C E108                       	smpsAlterNote       $08
0008D02E 01                         	dc.b	$01
0008D02F E10A                       	smpsAlterNote       $0A
0008D031 01                         	dc.b	$01
0008D032 E1FC                       	smpsAlterNote       $FC
0008D034 ECF5                       	smpsPSGAlterVol     $F5
0008D036 8F06                       	dc.b	nD1, $06
0008D038 EC04                       	smpsPSGAlterVol     $04
0008D03A E701                       	dc.b	smpsNoAttack, $01
0008D03C EC07                       	smpsPSGAlterVol     $07
0008D03E 8003                       	dc.b	nRst, $03
0008D040 ECF5                       	smpsPSGAlterVol     $F5
0008D042 8F06                       	dc.b	nD1, $06
0008D044 EC04                       	smpsPSGAlterVol     $04
0008D046 E701                       	dc.b	smpsNoAttack, $01
0008D048 EC07                       	smpsPSGAlterVol     $07
0008D04A 8006                       	dc.b	nRst, $06
0008D04C E1FF                       	smpsAlterNote       $FF
0008D04E 01                         	dc.b	$01
0008D04F E102                       	smpsAlterNote       $02
0008D051 01                         	dc.b	$01
0008D052 E1FF                       	smpsAlterNote       $FF
0008D054 01                         	dc.b	$01
0008D055 E1F9                       	smpsAlterNote       $F9
0008D057 01                         	dc.b	$01
0008D058 E1FC                       	smpsAlterNote       $FC
0008D05A ECF5                       	smpsPSGAlterVol     $F5
0008D05C 9006                       	dc.b	nEb1, $06
0008D05E EC04                       	smpsPSGAlterVol     $04
0008D060 E701                       	dc.b	smpsNoAttack, $01
0008D062 EC07                       	smpsPSGAlterVol     $07
0008D064 8003                       	dc.b	nRst, $03
0008D066 ECF5                       	smpsPSGAlterVol     $F5
0008D068 9007                       	dc.b	nEb1, $07
0008D06A EC0B                       	smpsPSGAlterVol     $0B
0008D06C 8006                       	dc.b	nRst, $06
0008D06E E1FF                       	smpsAlterNote       $FF
0008D070 01                         	dc.b	$01
0008D071 E103                       	smpsAlterNote       $03
0008D073 0101                       	dc.b	$01, $01
0008D075 E1FC                       	smpsAlterNote       $FC
0008D077 01                         	dc.b	$01
0008D078 ECF5                       	smpsPSGAlterVol     $F5
0008D07A 8F07                       	dc.b	nD1, $07
0008D07C EC0B                       	smpsPSGAlterVol     $0B
0008D07E 8004                       	dc.b	nRst, $04
0008D080 ECF5                       	smpsPSGAlterVol     $F5
0008D082 8F06                       	dc.b	nD1, $06
0008D084 EC04                       	smpsPSGAlterVol     $04
0008D086 E701                       	dc.b	smpsNoAttack, $01
0008D088 EC07                       	smpsPSGAlterVol     $07
0008D08A 8006                       	dc.b	nRst, $06
0008D08C E102                       	smpsAlterNote       $02
0008D08E 01                         	dc.b	$01
0008D08F E103                       	smpsAlterNote       $03
0008D091 01                         	dc.b	$01
0008D092 E1FF                       	smpsAlterNote       $FF
0008D094 01                         	dc.b	$01
0008D095 E1F9                       	smpsAlterNote       $F9
0008D097 01                         	dc.b	$01
0008D098 E1FC                       	smpsAlterNote       $FC
0008D09A ECF5                       	smpsPSGAlterVol     $F5
0008D09C 8F06                       	dc.b	nD1, $06
0008D09E EC04                       	smpsPSGAlterVol     $04
0008D0A0 E701                       	dc.b	smpsNoAttack, $01
0008D0A2 EC07                       	smpsPSGAlterVol     $07
0008D0A4 8003                       	dc.b	nRst, $03
0008D0A6 ECF5                       	smpsPSGAlterVol     $F5
0008D0A8 8F06                       	dc.b	nD1, $06
0008D0AA EC04                       	smpsPSGAlterVol     $04
0008D0AC E701                       	dc.b	smpsNoAttack, $01
0008D0AE EC07                       	smpsPSGAlterVol     $07
0008D0B0 8006                       	dc.b	nRst, $06
0008D0B2 E1FF                       	smpsAlterNote       $FF
0008D0B4 01                         	dc.b	$01
0008D0B5 E103                       	smpsAlterNote       $03
0008D0B7 01                         	dc.b	$01
0008D0B8 E1FF                       	smpsAlterNote       $FF
0008D0BA 01                         	dc.b	$01
0008D0BB E1FC                       	smpsAlterNote       $FC
0008D0BD 01                         	dc.b	$01
0008D0BE ECF5                       	smpsPSGAlterVol     $F5
0008D0C0 8F06                       	dc.b	nD1, $06
0008D0C2 EC04                       	smpsPSGAlterVol     $04
0008D0C4 E701                       	dc.b	smpsNoAttack, $01
0008D0C6 EC07                       	smpsPSGAlterVol     $07
0008D0C8 8003                       	dc.b	nRst, $03
0008D0CA ECF5                       	smpsPSGAlterVol     $F5
0008D0CC 8F07                       	dc.b	nD1, $07
0008D0CE EC0B                       	smpsPSGAlterVol     $0B
0008D0D0 8007                       	dc.b	nRst, $07
0008D0D2 E101                       	smpsAlterNote       $01
0008D0D4 0101                       	dc.b	$01, $01
0008D0D6 E1FC                       	smpsAlterNote       $FC
0008D0D8 01                         	dc.b	$01
0008D0D9 E1F9                       	smpsAlterNote       $F9
0008D0DB 01                         	dc.b	$01
0008D0DC E1FC                       	smpsAlterNote       $FC
0008D0DE ECF5                       	smpsPSGAlterVol     $F5
0008D0E0 9006                       	dc.b	nEb1, $06
0008D0E2 EC0B                       	smpsPSGAlterVol     $0B
0008D0E4 8004                       	dc.b	nRst, $04
0008D0E6 ECF5                       	smpsPSGAlterVol     $F5
0008D0E8 9006                       	dc.b	nEb1, $06
0008D0EA EC04                       	smpsPSGAlterVol     $04
0008D0EC E701                       	dc.b	smpsNoAttack, $01
0008D0EE EC07                       	smpsPSGAlterVol     $07
0008D0F0 8006                       	dc.b	nRst, $06
0008D0F2 E100                       	smpsAlterNote       $00
0008D0F4 01                         	dc.b	$01
0008D0F5 E102                       	smpsAlterNote       $02
0008D0F7 01                         	dc.b	$01
0008D0F8 E100                       	smpsAlterNote       $00
0008D0FA 01                         	dc.b	$01
0008D0FB E1FD                       	smpsAlterNote       $FD
0008D0FD 01                         	dc.b	$01
0008D0FE E1FF                       	smpsAlterNote       $FF
0008D100 ECF5                       	smpsPSGAlterVol     $F5
0008D102 9B06                       	dc.b	nD2, $06
0008D104 EC04                       	smpsPSGAlterVol     $04
0008D106 E701                       	dc.b	smpsNoAttack, $01
0008D108 EC07                       	smpsPSGAlterVol     $07
0008D10A 8003                       	dc.b	nRst, $03
0008D10C ECF5                       	smpsPSGAlterVol     $F5
0008D10E 9B07                       	dc.b	nD2, $07
0008D110 EC0B                       	smpsPSGAlterVol     $0B
0008D112 8006                       	dc.b	nRst, $06
0008D114 E102                       	smpsAlterNote       $02
0008D116 01                         	dc.b	$01
0008D117 E106                       	smpsAlterNote       $06
0008D119 01                         	dc.b	$01
0008D11A E105                       	smpsAlterNote       $05
0008D11C 01                         	dc.b	$01
0008D11D E1FF                       	smpsAlterNote       $FF
0008D11F 01                         	dc.b	$01
0008D120 ECF5                       	smpsPSGAlterVol     $F5
0008D122 9B07                       	dc.b	nD2, $07
0008D124 EC0B                       	smpsPSGAlterVol     $0B
0008D126 8004                       	dc.b	nRst, $04
0008D128 ECF5                       	smpsPSGAlterVol     $F5
0008D12A 9B06                       	dc.b	nD2, $06
0008D12C EC0B                       	smpsPSGAlterVol     $0B
0008D12E 8007                       	dc.b	nRst, $07
0008D130 E105                       	smpsAlterNote       $05
0008D132 0101                       	dc.b	$01, $01
0008D134 E102                       	smpsAlterNote       $02
0008D136 01                         	dc.b	$01
0008D137 E1FC                       	smpsAlterNote       $FC
0008D139 01                         	dc.b	$01
0008D13A E1FF                       	smpsAlterNote       $FF
0008D13C ECF5                       	smpsPSGAlterVol     $F5
0008D13E 9B06                       	dc.b	nD2, $06
0008D140 EC04                       	smpsPSGAlterVol     $04
0008D142 E701                       	dc.b	smpsNoAttack, $01
0008D144 EC07                       	smpsPSGAlterVol     $07
0008D146 8003                       	dc.b	nRst, $03
0008D148 ECF5                       	smpsPSGAlterVol     $F5
0008D14A 9B06                       	dc.b	nD2, $06
0008D14C EC04                       	smpsPSGAlterVol     $04
0008D14E E701                       	dc.b	smpsNoAttack, $01
0008D150 EC07                       	smpsPSGAlterVol     $07
0008D152 8006                       	dc.b	nRst, $06
0008D154 E102                       	smpsAlterNote       $02
0008D156 01                         	dc.b	$01
0008D157 E106                       	smpsAlterNote       $06
0008D159 01                         	dc.b	$01
0008D15A E102                       	smpsAlterNote       $02
0008D15C 01                         	dc.b	$01
0008D15D E1FF                       	smpsAlterNote       $FF
0008D15F 01                         	dc.b	$01
0008D160 ECF5                       	smpsPSGAlterVol     $F5
0008D162 9B06                       	dc.b	nD2, $06
0008D164 EC04                       	smpsPSGAlterVol     $04
0008D166 E701                       	dc.b	smpsNoAttack, $01
0008D168 EC07                       	smpsPSGAlterVol     $07
0008D16A 8003                       	dc.b	nRst, $03
0008D16C ECF5                       	smpsPSGAlterVol     $F5
0008D16E 9B07                       	dc.b	nD2, $07
0008D170 EC0B                       	smpsPSGAlterVol     $0B
0008D172 8007                       	dc.b	nRst, $07
0008D174 E105                       	smpsAlterNote       $05
0008D176 0101                       	dc.b	$01, $01
0008D178 E1FF                       	smpsAlterNote       $FF
0008D17A 01                         	dc.b	$01
0008D17B E1FC                       	smpsAlterNote       $FC
0008D17D 01                         	dc.b	$01
0008D17E E1FF                       	smpsAlterNote       $FF
0008D180 ECF5                       	smpsPSGAlterVol     $F5
0008D182 9B06                       	dc.b	nD2, $06
0008D184 EC0B                       	smpsPSGAlterVol     $0B
0008D186 8004                       	dc.b	nRst, $04
0008D188 ECF5                       	smpsPSGAlterVol     $F5
0008D18A 9B06                       	dc.b	nD2, $06
0008D18C EC04                       	smpsPSGAlterVol     $04
0008D18E E701                       	dc.b	smpsNoAttack, $01
0008D190 EC07                       	smpsPSGAlterVol     $07
0008D192 8006                       	dc.b	nRst, $06
0008D194 E105                       	smpsAlterNote       $05
0008D196 01                         	dc.b	$01
0008D197 E106                       	smpsAlterNote       $06
0008D199 01                         	dc.b	$01
0008D19A E102                       	smpsAlterNote       $02
0008D19C 01                         	dc.b	$01
0008D19D E1FC                       	smpsAlterNote       $FC
0008D19F 01                         	dc.b	$01
0008D1A0 E1FF                       	smpsAlterNote       $FF
0008D1A2 ECF5                       	smpsPSGAlterVol     $F5
0008D1A4 9B06                       	dc.b	nD2, $06
0008D1A6 EC04                       	smpsPSGAlterVol     $04
0008D1A8 E701                       	dc.b	smpsNoAttack, $01
0008D1AA EC07                       	smpsPSGAlterVol     $07
0008D1AC 8003                       	dc.b	nRst, $03
0008D1AE ECF5                       	smpsPSGAlterVol     $F5
0008D1B0 9B06                       	dc.b	nD2, $06
0008D1B2 EC04                       	smpsPSGAlterVol     $04
0008D1B4 E701                       	dc.b	smpsNoAttack, $01
0008D1B6 EC07                       	smpsPSGAlterVol     $07
0008D1B8 8006                       	dc.b	nRst, $06
0008D1BA E102                       	smpsAlterNote       $02
0008D1BC 01                         	dc.b	$01
0008D1BD E106                       	smpsAlterNote       $06
0008D1BF 01                         	dc.b	$01
0008D1C0 E105                       	smpsAlterNote       $05
0008D1C2 01                         	dc.b	$01
0008D1C3 E1FF                       	smpsAlterNote       $FF
0008D1C5 01                         	dc.b	$01
0008D1C6 ECF5                       	smpsPSGAlterVol     $F5
0008D1C8 9B07                       	dc.b	nD2, $07
0008D1CA EC0B                       	smpsPSGAlterVol     $0B
0008D1CC 8004                       	dc.b	nRst, $04
0008D1CE ECF5                       	smpsPSGAlterVol     $F5
0008D1D0 9B06                       	dc.b	nD2, $06
0008D1D2 EC0B                       	smpsPSGAlterVol     $0B
0008D1D4 8007                       	dc.b	nRst, $07
0008D1D6 E105                       	smpsAlterNote       $05
0008D1D8 0101                       	dc.b	$01, $01
0008D1DA E102                       	smpsAlterNote       $02
0008D1DC 01                         	dc.b	$01
0008D1DD E1FC                       	smpsAlterNote       $FC
0008D1DF 01                         	dc.b	$01
0008D1E0 E1FF                       	smpsAlterNote       $FF
0008D1E2 ECF5                       	smpsPSGAlterVol     $F5
0008D1E4 9B06                       	dc.b	nD2, $06
0008D1E6 EC04                       	smpsPSGAlterVol     $04
0008D1E8 E701                       	dc.b	smpsNoAttack, $01
0008D1EA EC07                       	smpsPSGAlterVol     $07
0008D1EC 8003                       	dc.b	nRst, $03
0008D1EE ECF5                       	smpsPSGAlterVol     $F5
0008D1F0 9B06                       	dc.b	nD2, $06
0008D1F2 EC04                       	smpsPSGAlterVol     $04
0008D1F4 E701                       	dc.b	smpsNoAttack, $01
0008D1F6 EC07                       	smpsPSGAlterVol     $07
0008D1F8 8006                       	dc.b	nRst, $06
0008D1FA E102                       	smpsAlterNote       $02
0008D1FC 01                         	dc.b	$01
0008D1FD E106                       	smpsAlterNote       $06
0008D1FF 01                         	dc.b	$01
0008D200 E102                       	smpsAlterNote       $02
0008D202 01                         	dc.b	$01
0008D203 E1FF                       	smpsAlterNote       $FF
0008D205 01                         	dc.b	$01
0008D206 ECF5                       	smpsPSGAlterVol     $F5
0008D208 9B06                       	dc.b	nD2, $06
0008D20A EC04                       	smpsPSGAlterVol     $04
0008D20C E701                       	dc.b	smpsNoAttack, $01
0008D20E EC07                       	smpsPSGAlterVol     $07
0008D210 8003                       	dc.b	nRst, $03
0008D212 ECF5                       	smpsPSGAlterVol     $F5
0008D214 9B07                       	dc.b	nD2, $07
0008D216 E1FE                       	smpsAlterNote       $FE
0008D218 9706                       	dc.b	nBb1, $06
0008D21A EC04                       	smpsPSGAlterVol     $04
0008D21C E701                       	dc.b	smpsNoAttack, $01
0008D21E ECFC                       	smpsPSGAlterVol     $FC
0008D220 9703                       	dc.b	nBb1, $03
0008D222 EC04                       	smpsPSGAlterVol     $04
0008D224 E701                       	dc.b	smpsNoAttack, $01
0008D226 ECFC                       	smpsPSGAlterVol     $FC
0008D228 9702                       	dc.b	nBb1, $02
0008D22A EC04                       	smpsPSGAlterVol     $04
0008D22C E701                       	dc.b	smpsNoAttack, $01
0008D22E ECFC                       	smpsPSGAlterVol     $FC
0008D230 9606                       	dc.b	nA1, $06
0008D232 EC04                       	smpsPSGAlterVol     $04
0008D234 E701                       	dc.b	smpsNoAttack, $01
0008D236 EC07                       	smpsPSGAlterVol     $07
0008D238 8006                       	dc.b	nRst, $06
0008D23A E101                       	smpsAlterNote       $01
0008D23C 01                         	dc.b	$01
0008D23D E107                       	smpsAlterNote       $07
0008D23F 01                         	dc.b	$01
0008D240 E101                       	smpsAlterNote       $01
0008D242 01                         	dc.b	$01
0008D243 E1F8                       	smpsAlterNote       $F8
0008D245 01                         	dc.b	$01
0008D246 E1F7                       	smpsAlterNote       $F7
0008D248 01                         	dc.b	$01
0008D249 E1FC                       	smpsAlterNote       $FC
0008D24B 01                         	dc.b	$01
0008D24C E106                       	smpsAlterNote       $06
0008D24E 01                         	dc.b	$01
0008D24F E107                       	smpsAlterNote       $07
0008D251 01                         	dc.b	$01
0008D252 E101                       	smpsAlterNote       $01
0008D254 01                         	dc.b	$01
0008D255 E1F8                       	smpsAlterNote       $F8
0008D257 0101                       	dc.b	$01, $01
0008D259 E1FC                       	smpsAlterNote       $FC
0008D25B ECF5                       	smpsPSGAlterVol     $F5
0008D25D 8F06                       	dc.b	nD1, $06
0008D25F EC04                       	smpsPSGAlterVol     $04
0008D261 E701                       	dc.b	smpsNoAttack, $01
0008D263 EC07                       	smpsPSGAlterVol     $07
0008D265 8003                       	dc.b	nRst, $03
0008D267 ECF5                       	smpsPSGAlterVol     $F5
0008D269 8F06                       	dc.b	nD1, $06
0008D26B EC04                       	smpsPSGAlterVol     $04
0008D26D E701                       	dc.b	smpsNoAttack, $01
0008D26F EC07                       	smpsPSGAlterVol     $07
0008D271 8006                       	dc.b	nRst, $06
0008D273 E1FF                       	smpsAlterNote       $FF
0008D275 01                         	dc.b	$01
0008D276 E102                       	smpsAlterNote       $02
0008D278 01                         	dc.b	$01
0008D279 E101                       	smpsAlterNote       $01
0008D27B 01                         	dc.b	$01
0008D27C E1FC                       	smpsAlterNote       $FC
0008D27E 01                         	dc.b	$01
0008D27F ECF5                       	smpsPSGAlterVol     $F5
0008D281 9007                       	dc.b	nEb1, $07
0008D283 EC0B                       	smpsPSGAlterVol     $0B
0008D285 8004                       	dc.b	nRst, $04
0008D287 ECF5                       	smpsPSGAlterVol     $F5
0008D289 9006                       	dc.b	nEb1, $06
0008D28B EC0B                       	smpsPSGAlterVol     $0B
0008D28D 8007                       	dc.b	nRst, $07
0008D28F E103                       	smpsAlterNote       $03
0008D291 0101                       	dc.b	$01, $01
0008D293 E1FC                       	smpsAlterNote       $FC
0008D295 01                         	dc.b	$01
0008D296 E1F9                       	smpsAlterNote       $F9
0008D298 01                         	dc.b	$01
0008D299 E1FC                       	smpsAlterNote       $FC
0008D29B ECF5                       	smpsPSGAlterVol     $F5
0008D29D 8F06                       	dc.b	nD1, $06
0008D29F EC04                       	smpsPSGAlterVol     $04
0008D2A1 E701                       	dc.b	smpsNoAttack, $01
0008D2A3 EC07                       	smpsPSGAlterVol     $07
0008D2A5 8003                       	dc.b	nRst, $03
0008D2A7 ECF5                       	smpsPSGAlterVol     $F5
0008D2A9 8F06                       	dc.b	nD1, $06
0008D2AB EC04                       	smpsPSGAlterVol     $04
0008D2AD E701                       	dc.b	smpsNoAttack, $01
0008D2AF EC07                       	smpsPSGAlterVol     $07
0008D2B1 8006                       	dc.b	nRst, $06
0008D2B3 E1FF                       	smpsAlterNote       $FF
0008D2B5 01                         	dc.b	$01
0008D2B6 E103                       	smpsAlterNote       $03
0008D2B8 01                         	dc.b	$01
0008D2B9 E1FF                       	smpsAlterNote       $FF
0008D2BB 01                         	dc.b	$01
0008D2BC E1F9                       	smpsAlterNote       $F9
0008D2BE 01                         	dc.b	$01
0008D2BF E1FC                       	smpsAlterNote       $FC
0008D2C1 ECF5                       	smpsPSGAlterVol     $F5
0008D2C3 8F06                       	dc.b	nD1, $06
0008D2C5 EC04                       	smpsPSGAlterVol     $04
0008D2C7 E701                       	dc.b	smpsNoAttack, $01
0008D2C9 EC07                       	smpsPSGAlterVol     $07
0008D2CB 8003                       	dc.b	nRst, $03
0008D2CD ECF5                       	smpsPSGAlterVol     $F5
0008D2CF 8F07                       	dc.b	nD1, $07
0008D2D1 EC0B                       	smpsPSGAlterVol     $0B
0008D2D3 8006                       	dc.b	nRst, $06
0008D2D5 E1FF                       	smpsAlterNote       $FF
0008D2D7 01                         	dc.b	$01
0008D2D8 E102                       	smpsAlterNote       $02
0008D2DA 0101                       	dc.b	$01, $01
0008D2DC E1FC                       	smpsAlterNote       $FC
0008D2DE 01                         	dc.b	$01
0008D2DF ECF5                       	smpsPSGAlterVol     $F5
0008D2E1 8F07                       	dc.b	nD1, $07
0008D2E3 EC0B                       	smpsPSGAlterVol     $0B
0008D2E5 8004                       	dc.b	nRst, $04
0008D2E7 ECF5                       	smpsPSGAlterVol     $F5
0008D2E9 8F06                       	dc.b	nD1, $06
0008D2EB EC04                       	smpsPSGAlterVol     $04
0008D2ED E701                       	dc.b	smpsNoAttack, $01
0008D2EF EC07                       	smpsPSGAlterVol     $07
0008D2F1 8006                       	dc.b	nRst, $06
0008D2F3 E101                       	smpsAlterNote       $01
0008D2F5 01                         	dc.b	$01
0008D2F6 E102                       	smpsAlterNote       $02
0008D2F8 01                         	dc.b	$01
0008D2F9 E1FF                       	smpsAlterNote       $FF
0008D2FB 01                         	dc.b	$01
0008D2FC E1F9                       	smpsAlterNote       $F9
0008D2FE 01                         	dc.b	$01
0008D2FF E1FC                       	smpsAlterNote       $FC
0008D301 ECF5                       	smpsPSGAlterVol     $F5
0008D303 9006                       	dc.b	nEb1, $06
0008D305 EC04                       	smpsPSGAlterVol     $04
0008D307 E701                       	dc.b	smpsNoAttack, $01
0008D309 EC07                       	smpsPSGAlterVol     $07
0008D30B 8003                       	dc.b	nRst, $03
0008D30D ECF5                       	smpsPSGAlterVol     $F5
0008D30F 9006                       	dc.b	nEb1, $06
0008D311 EC04                       	smpsPSGAlterVol     $04
0008D313 E701                       	dc.b	smpsNoAttack, $01
0008D315 EC07                       	smpsPSGAlterVol     $07
0008D317 8006                       	dc.b	nRst, $06
0008D319 E100                       	smpsAlterNote       $00
0008D31B 01                         	dc.b	$01
0008D31C E102                       	smpsAlterNote       $02
0008D31E 01                         	dc.b	$01
0008D31F E100                       	smpsAlterNote       $00
0008D321 01                         	dc.b	$01
0008D322 E1FF                       	smpsAlterNote       $FF
0008D324 01                         	dc.b	$01
0008D325 ECF5                       	smpsPSGAlterVol     $F5
0008D327 9B06                       	dc.b	nD2, $06
0008D329 EC04                       	smpsPSGAlterVol     $04
0008D32B E701                       	dc.b	smpsNoAttack, $01
0008D32D EC07                       	smpsPSGAlterVol     $07
0008D32F 8003                       	dc.b	nRst, $03
0008D331 ECF5                       	smpsPSGAlterVol     $F5
0008D333 9B07                       	dc.b	nD2, $07
0008D335 EC0B                       	smpsPSGAlterVol     $0B
0008D337 8007                       	dc.b	nRst, $07
0008D339 E105                       	smpsAlterNote       $05
0008D33B 0101                       	dc.b	$01, $01
0008D33D E1FF                       	smpsAlterNote       $FF
0008D33F 01                         	dc.b	$01
0008D340 E1FC                       	smpsAlterNote       $FC
0008D342 01                         	dc.b	$01
0008D343 E1FF                       	smpsAlterNote       $FF
0008D345 ECF5                       	smpsPSGAlterVol     $F5
0008D347 9B06                       	dc.b	nD2, $06
0008D349 EC0B                       	smpsPSGAlterVol     $0B
0008D34B 8004                       	dc.b	nRst, $04
0008D34D ECF5                       	smpsPSGAlterVol     $F5
0008D34F 9B06                       	dc.b	nD2, $06
0008D351 EC04                       	smpsPSGAlterVol     $04
0008D353 E701                       	dc.b	smpsNoAttack, $01
0008D355 EC07                       	smpsPSGAlterVol     $07
0008D357 8006                       	dc.b	nRst, $06
0008D359 E102                       	smpsAlterNote       $02
0008D35B 01                         	dc.b	$01
0008D35C E106                       	smpsAlterNote       $06
0008D35E 01                         	dc.b	$01
0008D35F E102                       	smpsAlterNote       $02
0008D361 01                         	dc.b	$01
0008D362 E1FC                       	smpsAlterNote       $FC
0008D364 01                         	dc.b	$01
0008D365 E1FF                       	smpsAlterNote       $FF
0008D367 ECF5                       	smpsPSGAlterVol     $F5
0008D369 9B06                       	dc.b	nD2, $06
0008D36B EC04                       	smpsPSGAlterVol     $04
0008D36D E701                       	dc.b	smpsNoAttack, $01
0008D36F EC07                       	smpsPSGAlterVol     $07
0008D371 8003                       	dc.b	nRst, $03
0008D373 ECF5                       	smpsPSGAlterVol     $F5
0008D375 9B07                       	dc.b	nD2, $07
0008D377 EC0B                       	smpsPSGAlterVol     $0B
0008D379 8006                       	dc.b	nRst, $06
0008D37B E102                       	smpsAlterNote       $02
0008D37D 01                         	dc.b	$01
0008D37E E105                       	smpsAlterNote       $05
0008D380 0101                       	dc.b	$01, $01
0008D382 E1FF                       	smpsAlterNote       $FF
0008D384 01                         	dc.b	$01
0008D385 ECF5                       	smpsPSGAlterVol     $F5
0008D387 9B07                       	dc.b	nD2, $07
0008D389 EC0B                       	smpsPSGAlterVol     $0B
0008D38B 8004                       	dc.b	nRst, $04
0008D38D ECF5                       	smpsPSGAlterVol     $F5
0008D38F 9B06                       	dc.b	nD2, $06
0008D391 EC0B                       	smpsPSGAlterVol     $0B
0008D393 8007                       	dc.b	nRst, $07
0008D395 E105                       	smpsAlterNote       $05
0008D397 0101                       	dc.b	$01, $01
0008D399 E102                       	smpsAlterNote       $02
0008D39B 01                         	dc.b	$01
0008D39C E1FC                       	smpsAlterNote       $FC
0008D39E 01                         	dc.b	$01
0008D39F E1FF                       	smpsAlterNote       $FF
0008D3A1 ECF5                       	smpsPSGAlterVol     $F5
0008D3A3 9B06                       	dc.b	nD2, $06
0008D3A5 EC04                       	smpsPSGAlterVol     $04
0008D3A7 E701                       	dc.b	smpsNoAttack, $01
0008D3A9 EC07                       	smpsPSGAlterVol     $07
0008D3AB 8003                       	dc.b	nRst, $03
0008D3AD ECF5                       	smpsPSGAlterVol     $F5
0008D3AF 9B06                       	dc.b	nD2, $06
0008D3B1 EC04                       	smpsPSGAlterVol     $04
0008D3B3 E701                       	dc.b	smpsNoAttack, $01
0008D3B5 EC07                       	smpsPSGAlterVol     $07
0008D3B7 8006                       	dc.b	nRst, $06
0008D3B9 E102                       	smpsAlterNote       $02
0008D3BB 01                         	dc.b	$01
0008D3BC E106                       	smpsAlterNote       $06
0008D3BE 01                         	dc.b	$01
0008D3BF E102                       	smpsAlterNote       $02
0008D3C1 01                         	dc.b	$01
0008D3C2 E1FF                       	smpsAlterNote       $FF
0008D3C4 01                         	dc.b	$01
0008D3C5 ECF5                       	smpsPSGAlterVol     $F5
0008D3C7 9B06                       	dc.b	nD2, $06
0008D3C9 EC04                       	smpsPSGAlterVol     $04
0008D3CB E701                       	dc.b	smpsNoAttack, $01
0008D3CD EC07                       	smpsPSGAlterVol     $07
0008D3CF 8003                       	dc.b	nRst, $03
0008D3D1 ECF5                       	smpsPSGAlterVol     $F5
0008D3D3 9B07                       	dc.b	nD2, $07
0008D3D5 EC0B                       	smpsPSGAlterVol     $0B
0008D3D7 8007                       	dc.b	nRst, $07
0008D3D9 E105                       	smpsAlterNote       $05
0008D3DB 0101                       	dc.b	$01, $01
0008D3DD E1FF                       	smpsAlterNote       $FF
0008D3DF 01                         	dc.b	$01
0008D3E0 E1FC                       	smpsAlterNote       $FC
0008D3E2 01                         	dc.b	$01
0008D3E3 E1FF                       	smpsAlterNote       $FF
0008D3E5 ECF5                       	smpsPSGAlterVol     $F5
0008D3E7 9B06                       	dc.b	nD2, $06
0008D3E9 EC0B                       	smpsPSGAlterVol     $0B
0008D3EB 8004                       	dc.b	nRst, $04
0008D3ED ECF5                       	smpsPSGAlterVol     $F5
0008D3EF 9B06                       	dc.b	nD2, $06
0008D3F1 EC04                       	smpsPSGAlterVol     $04
0008D3F3 E701                       	dc.b	smpsNoAttack, $01
0008D3F5 EC07                       	smpsPSGAlterVol     $07
0008D3F7 8006                       	dc.b	nRst, $06
0008D3F9 E102                       	smpsAlterNote       $02
0008D3FB 01                         	dc.b	$01
0008D3FC E106                       	smpsAlterNote       $06
0008D3FE 01                         	dc.b	$01
0008D3FF E102                       	smpsAlterNote       $02
0008D401 01                         	dc.b	$01
0008D402 E1FC                       	smpsAlterNote       $FC
0008D404 01                         	dc.b	$01
0008D405 E1FF                       	smpsAlterNote       $FF
0008D407 ECF5                       	smpsPSGAlterVol     $F5
0008D409 9B06                       	dc.b	nD2, $06
0008D40B EC04                       	smpsPSGAlterVol     $04
0008D40D E701                       	dc.b	smpsNoAttack, $01
0008D40F EC07                       	smpsPSGAlterVol     $07
0008D411 8003                       	dc.b	nRst, $03
0008D413 ECF5                       	smpsPSGAlterVol     $F5
0008D415 9B06                       	dc.b	nD2, $06
0008D417 EC04                       	smpsPSGAlterVol     $04
0008D419 E701                       	dc.b	smpsNoAttack, $01
0008D41B EC07                       	smpsPSGAlterVol     $07
0008D41D 8006                       	dc.b	nRst, $06
0008D41F E102                       	smpsAlterNote       $02
0008D421 01                         	dc.b	$01
0008D422 E106                       	smpsAlterNote       $06
0008D424 01                         	dc.b	$01
0008D425 E105                       	smpsAlterNote       $05
0008D427 01                         	dc.b	$01
0008D428 E1FF                       	smpsAlterNote       $FF
0008D42A 01                         	dc.b	$01
0008D42B ECF5                       	smpsPSGAlterVol     $F5
0008D42D 9B07                       	dc.b	nD2, $07
0008D42F EC0B                       	smpsPSGAlterVol     $0B
0008D431 8004                       	dc.b	nRst, $04
0008D433 ECF5                       	smpsPSGAlterVol     $F5
0008D435 9B06                       	dc.b	nD2, $06
0008D437 EC0B                       	smpsPSGAlterVol     $0B
0008D439 8007                       	dc.b	nRst, $07
0008D43B E105                       	smpsAlterNote       $05
0008D43D 0101                       	dc.b	$01, $01
0008D43F E101                       	smpsAlterNote       $01
0008D441 01                         	dc.b	$01
0008D442 E1FB                       	smpsAlterNote       $FB
0008D444 01                         	dc.b	$01
0008D445 E1FE                       	smpsAlterNote       $FE
0008D447 ECF5                       	smpsPSGAlterVol     $F5
0008D449 9A06                       	dc.b	nCs2, $06
0008D44B EC04                       	smpsPSGAlterVol     $04
0008D44D E701                       	dc.b	smpsNoAttack, $01
0008D44F EC07                       	smpsPSGAlterVol     $07
0008D451 8003                       	dc.b	nRst, $03
0008D453 ECF5                       	smpsPSGAlterVol     $F5
0008D455 9A06                       	dc.b	nCs2, $06
0008D457 EC04                       	smpsPSGAlterVol     $04
0008D459 E701                       	dc.b	smpsNoAttack, $01
0008D45B EC07                       	smpsPSGAlterVol     $07
0008D45D 8003                       	dc.b	nRst, $03
0008D45F E1FC                       	smpsAlterNote       $FC
0008D461 ECF5                       	smpsPSGAlterVol     $F5
0008D463 8F07                       	dc.b	nD1, $07
0008D465 EC0B                       	smpsPSGAlterVol     $0B
0008D467 8006                       	dc.b	nRst, $06
0008D469 E1FF                       	smpsAlterNote       $FF
0008D46B 01                         	dc.b	$01
0008D46C E103                       	smpsAlterNote       $03
0008D46E 01                         	dc.b	$01
0008D46F E102                       	smpsAlterNote       $02
0008D471 01                         	dc.b	$01
0008D472 E1FC                       	smpsAlterNote       $FC
0008D474 01                         	dc.b	$01
0008D475 E1F8                       	smpsAlterNote       $F8
0008D477 01                         	dc.b	$01
0008D478 E1FC                       	smpsAlterNote       $FC
0008D47A 01                         	dc.b	$01
0008D47B E1FF                       	smpsAlterNote       $FF
0008D47D 01                         	dc.b	$01
0008D47E E103                       	smpsAlterNote       $03
0008D480 01                         	dc.b	$01
0008D481 E1FC                       	smpsAlterNote       $FC
0008D483 ECF5                       	smpsPSGAlterVol     $F5
0008D485 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
0008D489 EC04                       	smpsPSGAlterVol     $04
0008D48B E701                       	dc.b	smpsNoAttack, $01
0008D48D EC07                       	smpsPSGAlterVol     $07
0008D48F 8009                       	dc.b	nRst, $09
0008D491 E1FF                       	smpsAlterNote       $FF
0008D493 01                         	dc.b	$01
0008D494 E103                       	smpsAlterNote       $03
0008D496 01                         	dc.b	$01
0008D497 E102                       	smpsAlterNote       $02
0008D499 01                         	dc.b	$01
0008D49A E1FC                       	smpsAlterNote       $FC
0008D49C 01                         	dc.b	$01
0008D49D E1F8                       	smpsAlterNote       $F8
0008D49F 01                         	dc.b	$01
0008D4A0 E1FC                       	smpsAlterNote       $FC
0008D4A2 01                         	dc.b	$01
0008D4A3 E1FF                       	smpsAlterNote       $FF
0008D4A5 01                         	dc.b	$01
0008D4A6 E103                       	smpsAlterNote       $03
0008D4A8 01                         	dc.b	$01
0008D4A9 E1FF                       	smpsAlterNote       $FF
0008D4AB 01                         	dc.b	$01
0008D4AC E1F9                       	smpsAlterNote       $F9
0008D4AE 01                         	dc.b	$01
0008D4AF E1F8                       	smpsAlterNote       $F8
0008D4B1 01                         	dc.b	$01
0008D4B2 E1FC                       	smpsAlterNote       $FC
0008D4B4 01                         	dc.b	$01
0008D4B5 E102                       	smpsAlterNote       $02
0008D4B7 0101                       	dc.b	$01, $01
0008D4B9 E1FF                       	smpsAlterNote       $FF
0008D4BB 01                         	dc.b	$01
0008D4BC E1FC                       	smpsAlterNote       $FC
0008D4BE ECF5                       	smpsPSGAlterVol     $F5
0008D4C0 8F02                       	dc.b	nD1, $02
0008D4C2 EC04                       	smpsPSGAlterVol     $04
0008D4C4 E701                       	dc.b	smpsNoAttack, $01
0008D4C6 ECFC                       	smpsPSGAlterVol     $FC
0008D4C8 E1FB                       	smpsAlterNote       $FB
0008D4CA 8D06                       	dc.b	nC1, $06
0008D4CC EC04                       	smpsPSGAlterVol     $04
0008D4CE E701                       	dc.b	smpsNoAttack, $01
0008D4D0 EC07                       	smpsPSGAlterVol     $07
0008D4D2 8006                       	dc.b	nRst, $06
0008D4D4 E1FE                       	smpsAlterNote       $FE
0008D4D6 01                         	dc.b	$01
0008D4D7 E102                       	smpsAlterNote       $02
0008D4D9 01                         	dc.b	$01
0008D4DA E1FE                       	smpsAlterNote       $FE
0008D4DC 01                         	dc.b	$01
0008D4DD E1FB                       	smpsAlterNote       $FB
0008D4DF 01                         	dc.b	$01
0008D4E0 E1F7                       	smpsAlterNote       $F7
0008D4E2 01                         	dc.b	$01
0008D4E3 E1FB                       	smpsAlterNote       $FB
0008D4E5 01                         	dc.b	$01
0008D4E6 E101                       	smpsAlterNote       $01
0008D4E8 01                         	dc.b	$01
0008D4E9 E102                       	smpsAlterNote       $02
0008D4EB 01                         	dc.b	$01
0008D4EC E1FB                       	smpsAlterNote       $FB
0008D4EE ECF5                       	smpsPSGAlterVol     $F5
0008D4F0 8D02                       	dc.b	nC1, $02
0008D4F2 EC04                       	smpsPSGAlterVol     $04
0008D4F4 E701                       	dc.b	smpsNoAttack, $01
0008D4F6 E1FC                       	smpsAlterNote       $FC
0008D4F8 ECFC                       	smpsPSGAlterVol     $FC
0008D4FA 8F0D                       	dc.b	nD1, $0D
0008D4FC E1FF                       	smpsAlterNote       $FF
0008D4FE E701                       	dc.b	smpsNoAttack, $01
0008D500 E103                       	smpsAlterNote       $03
0008D502 E701                       	dc.b	smpsNoAttack, $01
0008D504 E1FF                       	smpsAlterNote       $FF
0008D506 E701                       	dc.b	smpsNoAttack, $01
0008D508 E1FC                       	smpsAlterNote       $FC
0008D50A E701                       	dc.b	smpsNoAttack, $01
0008D50C E1F8                       	smpsAlterNote       $F8
0008D50E E701                       	dc.b	smpsNoAttack, $01
0008D510 E1FC                       	smpsAlterNote       $FC
0008D512 E701                       	dc.b	smpsNoAttack, $01
0008D514 E102                       	smpsAlterNote       $02
0008D516 E701                       	dc.b	smpsNoAttack, $01
0008D518 E103                       	smpsAlterNote       $03
0008D51A E701                       	dc.b	smpsNoAttack, $01
0008D51C E1FF                       	smpsAlterNote       $FF
0008D51E E701                       	dc.b	smpsNoAttack, $01
0008D520 E1F9                       	smpsAlterNote       $F9
0008D522 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D526 E1FC                       	smpsAlterNote       $FC
0008D528 E701                       	dc.b	smpsNoAttack, $01
0008D52A E102                       	smpsAlterNote       $02
0008D52C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D530 E1FC                       	smpsAlterNote       $FC
0008D532 E701                       	dc.b	smpsNoAttack, $01
0008D534 E1F9                       	smpsAlterNote       $F9
0008D536 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D53A E1FF                       	smpsAlterNote       $FF
0008D53C EC04                       	smpsPSGAlterVol     $04
0008D53E E701                       	dc.b	smpsNoAttack, $01
0008D540 EC07                       	smpsPSGAlterVol     $07
0008D542 E103                       	smpsAlterNote       $03
0008D544 8001                       	dc.b	nRst, $01
0008D546 E102                       	smpsAlterNote       $02
0008D548 01                         	dc.b	$01
0008D549 E1FB                       	smpsAlterNote       $FB
0008D54B 01                         	dc.b	$01
0008D54C E1F7                       	smpsAlterNote       $F7
0008D54E 01                         	dc.b	$01
0008D54F E1FB                       	smpsAlterNote       $FB
0008D551 01                         	dc.b	$01
0008D552 E102                       	smpsAlterNote       $02
0008D554 01                         	dc.b	$01
0008D555 E103                       	smpsAlterNote       $03
0008D557 01                         	dc.b	$01
0008D558 E1FB                       	smpsAlterNote       $FB
0008D55A ECF5                       	smpsPSGAlterVol     $F5
0008D55C 8E06                       	dc.b	nCs1, $06
0008D55E EC04                       	smpsPSGAlterVol     $04
0008D560 E701                       	dc.b	smpsNoAttack, $01
0008D562 EC07                       	smpsPSGAlterVol     $07
0008D564 8003                       	dc.b	nRst, $03
0008D566 ECF5                       	smpsPSGAlterVol     $F5
0008D568 8E06                       	dc.b	nCs1, $06
0008D56A EC04                       	smpsPSGAlterVol     $04
0008D56C E701                       	dc.b	smpsNoAttack, $01
0008D56E EC07                       	smpsPSGAlterVol     $07
0008D570 8006                       	dc.b	nRst, $06
0008D572 E1FE                       	smpsAlterNote       $FE
0008D574 01                         	dc.b	$01
0008D575 E102                       	smpsAlterNote       $02
0008D577 01                         	dc.b	$01
0008D578 E1FE                       	smpsAlterNote       $FE
0008D57A 01                         	dc.b	$01
0008D57B E1F9                       	smpsAlterNote       $F9
0008D57D 01                         	dc.b	$01
0008D57E E1FC                       	smpsAlterNote       $FC
0008D580 ECF5                       	smpsPSGAlterVol     $F5
0008D582 8F06                       	dc.b	nD1, $06
0008D584 EC04                       	smpsPSGAlterVol     $04
0008D586 E701                       	dc.b	smpsNoAttack, $01
0008D588 EC07                       	smpsPSGAlterVol     $07
0008D58A 8003                       	dc.b	nRst, $03
0008D58C ECF5                       	smpsPSGAlterVol     $F5
0008D58E 8F07                       	dc.b	nD1, $07
0008D590 EC0B                       	smpsPSGAlterVol     $0B
0008D592 8006                       	dc.b	nRst, $06
0008D594 E1FF                       	smpsAlterNote       $FF
0008D596 01                         	dc.b	$01
0008D597 E102                       	smpsAlterNote       $02
0008D599 0101                       	dc.b	$01, $01
0008D59B E1FB                       	smpsAlterNote       $FB
0008D59D 01                         	dc.b	$01
0008D59E ECF5                       	smpsPSGAlterVol     $F5
0008D5A0 8E07                       	dc.b	nCs1, $07
0008D5A2 EC0B                       	smpsPSGAlterVol     $0B
0008D5A4 8004                       	dc.b	nRst, $04
0008D5A6 ECF5                       	smpsPSGAlterVol     $F5
0008D5A8 8E06                       	dc.b	nCs1, $06
0008D5AA EC04                       	smpsPSGAlterVol     $04
0008D5AC E701                       	dc.b	smpsNoAttack, $01
0008D5AE EC07                       	smpsPSGAlterVol     $07
0008D5B0 8006                       	dc.b	nRst, $06
0008D5B2 E101                       	smpsAlterNote       $01
0008D5B4 01                         	dc.b	$01
0008D5B5 E102                       	smpsAlterNote       $02
0008D5B7 01                         	dc.b	$01
0008D5B8 E1FE                       	smpsAlterNote       $FE
0008D5BA 01                         	dc.b	$01
0008D5BB E1F8                       	smpsAlterNote       $F8
0008D5BD 01                         	dc.b	$01
0008D5BE E1FB                       	smpsAlterNote       $FB
0008D5C0 ECF5                       	smpsPSGAlterVol     $F5
0008D5C2 8E06                       	dc.b	nCs1, $06
0008D5C4 EC04                       	smpsPSGAlterVol     $04
0008D5C6 E701                       	dc.b	smpsNoAttack, $01
0008D5C8 EC07                       	smpsPSGAlterVol     $07
0008D5CA 8003                       	dc.b	nRst, $03
0008D5CC ECF5                       	smpsPSGAlterVol     $F5
0008D5CE 8E06                       	dc.b	nCs1, $06
0008D5D0 EC04                       	smpsPSGAlterVol     $04
0008D5D2 E701                       	dc.b	smpsNoAttack, $01
0008D5D4 EC07                       	smpsPSGAlterVol     $07
0008D5D6 8004                       	dc.b	nRst, $04
0008D5D8 E1FC                       	smpsAlterNote       $FC
0008D5DA ECF5                       	smpsPSGAlterVol     $F5
0008D5DC 8F06                       	dc.b	nD1, $06
0008D5DE EC0B                       	smpsPSGAlterVol     $0B
0008D5E0 8006                       	dc.b	nRst, $06
0008D5E2 E1FF                       	smpsAlterNote       $FF
0008D5E4 01                         	dc.b	$01
0008D5E5 E102                       	smpsAlterNote       $02
0008D5E7 0101                       	dc.b	$01, $01
0008D5E9 E1FC                       	smpsAlterNote       $FC
0008D5EB 01                         	dc.b	$01
0008D5EC E1F8                       	smpsAlterNote       $F8
0008D5EE 01                         	dc.b	$01
0008D5EF E1F9                       	smpsAlterNote       $F9
0008D5F1 01                         	dc.b	$01
0008D5F2 E1FF                       	smpsAlterNote       $FF
0008D5F4 01                         	dc.b	$01
0008D5F5 E103                       	smpsAlterNote       $03
0008D5F7 01                         	dc.b	$01
0008D5F8 E1FC                       	smpsAlterNote       $FC
0008D5FA ECF5                       	smpsPSGAlterVol     $F5
0008D5FC 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
0008D600 EC04                       	smpsPSGAlterVol     $04
0008D602 E701                       	dc.b	smpsNoAttack, $01
0008D604 EC07                       	smpsPSGAlterVol     $07
0008D606 8009                       	dc.b	nRst, $09
0008D608 E1FF                       	smpsAlterNote       $FF
0008D60A 01                         	dc.b	$01
0008D60B E102                       	smpsAlterNote       $02
0008D60D 0101                       	dc.b	$01, $01
0008D60F E1FC                       	smpsAlterNote       $FC
0008D611 01                         	dc.b	$01
0008D612 E1F8                       	smpsAlterNote       $F8
0008D614 01                         	dc.b	$01
0008D615 E1F9                       	smpsAlterNote       $F9
0008D617 01                         	dc.b	$01
0008D618 E1FF                       	smpsAlterNote       $FF
0008D61A 01                         	dc.b	$01
0008D61B E103                       	smpsAlterNote       $03
0008D61D 01                         	dc.b	$01
0008D61E E1FF                       	smpsAlterNote       $FF
0008D620 01                         	dc.b	$01
0008D621 E1FC                       	smpsAlterNote       $FC
0008D623 01                         	dc.b	$01
0008D624 E1F8                       	smpsAlterNote       $F8
0008D626 01                         	dc.b	$01
0008D627 E1FC                       	smpsAlterNote       $FC
0008D629 01                         	dc.b	$01
0008D62A E102                       	smpsAlterNote       $02
0008D62C 01                         	dc.b	$01
0008D62D E103                       	smpsAlterNote       $03
0008D62F 01                         	dc.b	$01
0008D630 E1FF                       	smpsAlterNote       $FF
0008D632 01                         	dc.b	$01
0008D633 E1FC                       	smpsAlterNote       $FC
0008D635 ECF5                       	smpsPSGAlterVol     $F5
0008D637 8F03                       	dc.b	nD1, $03
0008D639 E1FB                       	smpsAlterNote       $FB
0008D63B 8D06                       	dc.b	nC1, $06
0008D63D EC04                       	smpsPSGAlterVol     $04
0008D63F E701                       	dc.b	smpsNoAttack, $01
0008D641 EC07                       	smpsPSGAlterVol     $07
0008D643 8006                       	dc.b	nRst, $06
0008D645 E1FE                       	smpsAlterNote       $FE
0008D647 01                         	dc.b	$01
0008D648 E102                       	smpsAlterNote       $02
0008D64A 01                         	dc.b	$01
0008D64B E101                       	smpsAlterNote       $01
0008D64D 01                         	dc.b	$01
0008D64E E1FB                       	smpsAlterNote       $FB
0008D650 01                         	dc.b	$01
0008D651 E1F7                       	smpsAlterNote       $F7
0008D653 01                         	dc.b	$01
0008D654 E1FB                       	smpsAlterNote       $FB
0008D656 01                         	dc.b	$01
0008D657 E1FE                       	smpsAlterNote       $FE
0008D659 01                         	dc.b	$01
0008D65A E102                       	smpsAlterNote       $02
0008D65C 01                         	dc.b	$01
0008D65D E1FB                       	smpsAlterNote       $FB
0008D65F ECF5                       	smpsPSGAlterVol     $F5
0008D661 8D03                       	dc.b	nC1, $03
0008D663 E1FC                       	smpsAlterNote       $FC
0008D665 8F0D                       	dc.b	nD1, $0D
0008D667 E1FF                       	smpsAlterNote       $FF
0008D669 E701                       	dc.b	smpsNoAttack, $01
0008D66B E103                       	smpsAlterNote       $03
0008D66D E701                       	dc.b	smpsNoAttack, $01
0008D66F E1FF                       	smpsAlterNote       $FF
0008D671 E701                       	dc.b	smpsNoAttack, $01
0008D673 E1FC                       	smpsAlterNote       $FC
0008D675 E701                       	dc.b	smpsNoAttack, $01
0008D677 E1F8                       	smpsAlterNote       $F8
0008D679 E701                       	dc.b	smpsNoAttack, $01
0008D67B E1FC                       	smpsAlterNote       $FC
0008D67D E701                       	dc.b	smpsNoAttack, $01
0008D67F E102                       	smpsAlterNote       $02
0008D681 E701                       	dc.b	smpsNoAttack, $01
0008D683 E103                       	smpsAlterNote       $03
0008D685 E701                       	dc.b	smpsNoAttack, $01
0008D687 E1FF                       	smpsAlterNote       $FF
0008D689 E701                       	dc.b	smpsNoAttack, $01
0008D68B E1F9                       	smpsAlterNote       $F9
0008D68D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D691 E1FC                       	smpsAlterNote       $FC
0008D693 E701                       	dc.b	smpsNoAttack, $01
0008D695 E102                       	smpsAlterNote       $02
0008D697 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D69B E1FF                       	smpsAlterNote       $FF
0008D69D E701                       	dc.b	smpsNoAttack, $01
0008D69F E1F9                       	smpsAlterNote       $F9
0008D6A1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D6A5 E1FF                       	smpsAlterNote       $FF
0008D6A7 EC04                       	smpsPSGAlterVol     $04
0008D6A9 E701                       	dc.b	smpsNoAttack, $01
0008D6AB EC07                       	smpsPSGAlterVol     $07
0008D6AD E103                       	smpsAlterNote       $03
0008D6AF 8001                       	dc.b	nRst, $01
0008D6B1 E102                       	smpsAlterNote       $02
0008D6B3 01                         	dc.b	$01
0008D6B4 E1FB                       	smpsAlterNote       $FB
0008D6B6 01                         	dc.b	$01
0008D6B7 E1F7                       	smpsAlterNote       $F7
0008D6B9 01                         	dc.b	$01
0008D6BA E1FB                       	smpsAlterNote       $FB
0008D6BC 01                         	dc.b	$01
0008D6BD E1FF                       	smpsAlterNote       $FF
0008D6BF 01                         	dc.b	$01
0008D6C0 E103                       	smpsAlterNote       $03
0008D6C2 01                         	dc.b	$01
0008D6C3 E1FB                       	smpsAlterNote       $FB
0008D6C5 ECF5                       	smpsPSGAlterVol     $F5
0008D6C7 8E06                       	dc.b	nCs1, $06
0008D6C9 EC04                       	smpsPSGAlterVol     $04
0008D6CB E701                       	dc.b	smpsNoAttack, $01
0008D6CD EC07                       	smpsPSGAlterVol     $07
0008D6CF 8003                       	dc.b	nRst, $03
0008D6D1 ECF5                       	smpsPSGAlterVol     $F5
0008D6D3 8E06                       	dc.b	nCs1, $06
0008D6D5 EC04                       	smpsPSGAlterVol     $04
0008D6D7 E701                       	dc.b	smpsNoAttack, $01
0008D6D9 EC07                       	smpsPSGAlterVol     $07
0008D6DB 8006                       	dc.b	nRst, $06
0008D6DD E1FE                       	smpsAlterNote       $FE
0008D6DF 01                         	dc.b	$01
0008D6E0 E102                       	smpsAlterNote       $02
0008D6E2 01                         	dc.b	$01
0008D6E3 E1FE                       	smpsAlterNote       $FE
0008D6E5 01                         	dc.b	$01
0008D6E6 E1FC                       	smpsAlterNote       $FC
0008D6E8 01                         	dc.b	$01
0008D6E9 ECF5                       	smpsPSGAlterVol     $F5
0008D6EB 8F06                       	dc.b	nD1, $06
0008D6ED EC04                       	smpsPSGAlterVol     $04
0008D6EF E701                       	dc.b	smpsNoAttack, $01
0008D6F1 EC07                       	smpsPSGAlterVol     $07
0008D6F3 8003                       	dc.b	nRst, $03
0008D6F5 ECF5                       	smpsPSGAlterVol     $F5
0008D6F7 8F07                       	dc.b	nD1, $07
0008D6F9 EC0B                       	smpsPSGAlterVol     $0B
0008D6FB 8007                       	dc.b	nRst, $07
0008D6FD E102                       	smpsAlterNote       $02
0008D6FF 0101                       	dc.b	$01, $01
0008D701 E1FB                       	smpsAlterNote       $FB
0008D703 01                         	dc.b	$01
0008D704 E1F8                       	smpsAlterNote       $F8
0008D706 01                         	dc.b	$01
0008D707 E1FB                       	smpsAlterNote       $FB
0008D709 ECF5                       	smpsPSGAlterVol     $F5
0008D70B 8E06                       	dc.b	nCs1, $06
0008D70D EC0B                       	smpsPSGAlterVol     $0B
0008D70F 8004                       	dc.b	nRst, $04
0008D711 ECF5                       	smpsPSGAlterVol     $F5
0008D713 8E06                       	dc.b	nCs1, $06
0008D715 EC04                       	smpsPSGAlterVol     $04
0008D717 E701                       	dc.b	smpsNoAttack, $01
0008D719 EC07                       	smpsPSGAlterVol     $07
0008D71B 8006                       	dc.b	nRst, $06
0008D71D E1FE                       	smpsAlterNote       $FE
0008D71F 01                         	dc.b	$01
0008D720 E102                       	smpsAlterNote       $02
0008D722 01                         	dc.b	$01
0008D723 E1FE                       	smpsAlterNote       $FE
0008D725 01                         	dc.b	$01
0008D726 E1F9                       	smpsAlterNote       $F9
0008D728 01                         	dc.b	$01
0008D729 E1FC                       	smpsAlterNote       $FC
0008D72B ECF5                       	smpsPSGAlterVol     $F5
0008D72D 8F06                       	dc.b	nD1, $06
0008D72F EC04                       	smpsPSGAlterVol     $04
0008D731 E701                       	dc.b	smpsNoAttack, $01
0008D733 EC07                       	smpsPSGAlterVol     $07
0008D735 8003                       	dc.b	nRst, $03
0008D737 ECF5                       	smpsPSGAlterVol     $F5
0008D739 8F06                       	dc.b	nD1, $06
0008D73B EC04                       	smpsPSGAlterVol     $04
0008D73D E701                       	dc.b	smpsNoAttack, $01
0008D73F EC07                       	smpsPSGAlterVol     $07
0008D741 8006                       	dc.b	nRst, $06
0008D743 E1FF                       	smpsAlterNote       $FF
0008D745 01                         	dc.b	$01
0008D746 E103                       	smpsAlterNote       $03
0008D748 01                         	dc.b	$01
0008D749 E102                       	smpsAlterNote       $02
0008D74B 01                         	dc.b	$01
0008D74C E1FB                       	smpsAlterNote       $FB
0008D74E 01                         	dc.b	$01
0008D74F ECF5                       	smpsPSGAlterVol     $F5
0008D751 8E07                       	dc.b	nCs1, $07
0008D753 EC0B                       	smpsPSGAlterVol     $0B
0008D755 8004                       	dc.b	nRst, $04
0008D757 ECF5                       	smpsPSGAlterVol     $F5
0008D759 8E06                       	dc.b	nCs1, $06
0008D75B EC0B                       	smpsPSGAlterVol     $0B
0008D75D 8007                       	dc.b	nRst, $07
0008D75F E101                       	smpsAlterNote       $01
0008D761 0101                       	dc.b	$01, $01
0008D763 E1FE                       	smpsAlterNote       $FE
0008D765 01                         	dc.b	$01
0008D766 E1F9                       	smpsAlterNote       $F9
0008D768 01                         	dc.b	$01
0008D769 E1FC                       	smpsAlterNote       $FC
0008D76B ECF5                       	smpsPSGAlterVol     $F5
0008D76D 8F06                       	dc.b	nD1, $06
0008D76F EC04                       	smpsPSGAlterVol     $04
0008D771 E701                       	dc.b	smpsNoAttack, $01
0008D773 EC07                       	smpsPSGAlterVol     $07
0008D775 8003                       	dc.b	nRst, $03
0008D777 ECF5                       	smpsPSGAlterVol     $F5
0008D779 8F06                       	dc.b	nD1, $06
0008D77B EC04                       	smpsPSGAlterVol     $04
0008D77D E701                       	dc.b	smpsNoAttack, $01
0008D77F EC07                       	smpsPSGAlterVol     $07
0008D781 8006                       	dc.b	nRst, $06
0008D783 E1FF                       	smpsAlterNote       $FF
0008D785 01                         	dc.b	$01
0008D786 E103                       	smpsAlterNote       $03
0008D788 01                         	dc.b	$01
0008D789 E1FF                       	smpsAlterNote       $FF
0008D78B 01                         	dc.b	$01
0008D78C E1FB                       	smpsAlterNote       $FB
0008D78E 01                         	dc.b	$01
0008D78F ECF5                       	smpsPSGAlterVol     $F5
0008D791 8E06                       	dc.b	nCs1, $06
0008D793 EC04                       	smpsPSGAlterVol     $04
0008D795 E701                       	dc.b	smpsNoAttack, $01
0008D797 EC07                       	smpsPSGAlterVol     $07
0008D799 8003                       	dc.b	nRst, $03
0008D79B ECF5                       	smpsPSGAlterVol     $F5
0008D79D 8E07                       	dc.b	nCs1, $07
0008D79F E1FF                       	smpsAlterNote       $FF
0008D7A1 9B06                       	dc.b	nD2, $06
0008D7A3 EC04                       	smpsPSGAlterVol     $04
0008D7A5 E701                       	dc.b	smpsNoAttack, $01
0008D7A7 ECFC                       	smpsPSGAlterVol     $FC
0008D7A9 9B03                       	dc.b	nD2, $03
0008D7AB EC04                       	smpsPSGAlterVol     $04
0008D7AD E701                       	dc.b	smpsNoAttack, $01
0008D7AF ECFC                       	smpsPSGAlterVol     $FC
0008D7B1 9B02                       	dc.b	nD2, $02
0008D7B3 EC04                       	smpsPSGAlterVol     $04
0008D7B5 E701                       	dc.b	smpsNoAttack, $01
0008D7B7 ECFC                       	smpsPSGAlterVol     $FC
0008D7B9 E1FE                       	smpsAlterNote       $FE
0008D7BB 9A03                       	dc.b	nCs2, $03
0008D7BD EC0B                       	smpsPSGAlterVol     $0B
0008D7BF 800A                       	dc.b	nRst, $0A
0008D7C1 E102                       	smpsAlterNote       $02
0008D7C3 01                         	dc.b	$01
0008D7C4 E10A                       	smpsAlterNote       $0A
0008D7C6 01                         	dc.b	$01
0008D7C7 E102                       	smpsAlterNote       $02
0008D7C9 01                         	dc.b	$01
0008D7CA E1F7                       	smpsAlterNote       $F7
0008D7CC 01                         	dc.b	$01
0008D7CD E10A                       	smpsAlterNote       $0A
0008D7CF 01                         	dc.b	$01
0008D7D0 E1FC                       	smpsAlterNote       $FC
0008D7D2 01                         	dc.b	$01
0008D7D3 E108                       	smpsAlterNote       $08
0008D7D5 0101                       	dc.b	$01, $01
0008D7D7 E102                       	smpsAlterNote       $02
0008D7D9 01                         	dc.b	$01
0008D7DA E1F7                       	smpsAlterNote       $F7
0008D7DC 0101                       	dc.b	$01, $01
0008D7DE E1FC                       	smpsAlterNote       $FC
0008D7E0 ECF5                       	smpsPSGAlterVol     $F5
0008D7E2 8F06                       	dc.b	nD1, $06
0008D7E4 EC04                       	smpsPSGAlterVol     $04
0008D7E6 E701                       	dc.b	smpsNoAttack, $01
0008D7E8 EC07                       	smpsPSGAlterVol     $07
0008D7EA 8003                       	dc.b	nRst, $03
0008D7EC ECF5                       	smpsPSGAlterVol     $F5
0008D7EE 8F06                       	dc.b	nD1, $06
0008D7F0 EC04                       	smpsPSGAlterVol     $04
0008D7F2 E701                       	dc.b	smpsNoAttack, $01
0008D7F4 EC07                       	smpsPSGAlterVol     $07
0008D7F6 8006                       	dc.b	nRst, $06
0008D7F8 E1FF                       	smpsAlterNote       $FF
0008D7FA 01                         	dc.b	$01
0008D7FB E102                       	smpsAlterNote       $02
0008D7FD 01                         	dc.b	$01
0008D7FE E101                       	smpsAlterNote       $01
0008D800 01                         	dc.b	$01
0008D801 E1FC                       	smpsAlterNote       $FC
0008D803 01                         	dc.b	$01
0008D804 ECF5                       	smpsPSGAlterVol     $F5
0008D806 9007                       	dc.b	nEb1, $07
0008D808 EC0B                       	smpsPSGAlterVol     $0B
0008D80A 8004                       	dc.b	nRst, $04
0008D80C ECF5                       	smpsPSGAlterVol     $F5
0008D80E 9006                       	dc.b	nEb1, $06
0008D810 EC0B                       	smpsPSGAlterVol     $0B
0008D812 8007                       	dc.b	nRst, $07
0008D814 E103                       	smpsAlterNote       $03
0008D816 0101                       	dc.b	$01, $01
0008D818 E1FF                       	smpsAlterNote       $FF
0008D81A 01                         	dc.b	$01
0008D81B E1F9                       	smpsAlterNote       $F9
0008D81D 01                         	dc.b	$01
0008D81E E1FC                       	smpsAlterNote       $FC
0008D820 ECF5                       	smpsPSGAlterVol     $F5
0008D822 8F06                       	dc.b	nD1, $06
0008D824 EC04                       	smpsPSGAlterVol     $04
0008D826 E701                       	dc.b	smpsNoAttack, $01
0008D828 EC07                       	smpsPSGAlterVol     $07
0008D82A 8003                       	dc.b	nRst, $03
0008D82C ECF5                       	smpsPSGAlterVol     $F5
0008D82E 8F06                       	dc.b	nD1, $06
0008D830 EC04                       	smpsPSGAlterVol     $04
0008D832 E701                       	dc.b	smpsNoAttack, $01
0008D834 EC07                       	smpsPSGAlterVol     $07
0008D836 8006                       	dc.b	nRst, $06
0008D838 E1FF                       	smpsAlterNote       $FF
0008D83A 01                         	dc.b	$01
0008D83B E103                       	smpsAlterNote       $03
0008D83D 01                         	dc.b	$01
0008D83E E1FF                       	smpsAlterNote       $FF
0008D840 01                         	dc.b	$01
0008D841 E1F9                       	smpsAlterNote       $F9
0008D843 01                         	dc.b	$01
0008D844 E1FC                       	smpsAlterNote       $FC
0008D846 ECF5                       	smpsPSGAlterVol     $F5
0008D848 8F06                       	dc.b	nD1, $06
0008D84A EC04                       	smpsPSGAlterVol     $04
0008D84C E701                       	dc.b	smpsNoAttack, $01
0008D84E EC07                       	smpsPSGAlterVol     $07
0008D850 8003                       	dc.b	nRst, $03
0008D852 ECF5                       	smpsPSGAlterVol     $F5
0008D854 8F07                       	dc.b	nD1, $07
0008D856 EC0B                       	smpsPSGAlterVol     $0B
0008D858 8006                       	dc.b	nRst, $06
0008D85A E1FF                       	smpsAlterNote       $FF
0008D85C 01                         	dc.b	$01
0008D85D E102                       	smpsAlterNote       $02
0008D85F 0101                       	dc.b	$01, $01
0008D861 E1FC                       	smpsAlterNote       $FC
0008D863 01                         	dc.b	$01
0008D864 ECF5                       	smpsPSGAlterVol     $F5
0008D866 8F07                       	dc.b	nD1, $07
0008D868 EC0B                       	smpsPSGAlterVol     $0B
0008D86A 8004                       	dc.b	nRst, $04
0008D86C ECF5                       	smpsPSGAlterVol     $F5
0008D86E 8F06                       	dc.b	nD1, $06
0008D870 EC04                       	smpsPSGAlterVol     $04
0008D872 E701                       	dc.b	smpsNoAttack, $01
0008D874 EC07                       	smpsPSGAlterVol     $07
0008D876 8006                       	dc.b	nRst, $06
0008D878 E101                       	smpsAlterNote       $01
0008D87A 01                         	dc.b	$01
0008D87B E102                       	smpsAlterNote       $02
0008D87D 01                         	dc.b	$01
0008D87E E1FF                       	smpsAlterNote       $FF
0008D880 01                         	dc.b	$01
0008D881 E1F9                       	smpsAlterNote       $F9
0008D883 01                         	dc.b	$01
0008D884 E1FC                       	smpsAlterNote       $FC
0008D886 ECF5                       	smpsPSGAlterVol     $F5
0008D888 9006                       	dc.b	nEb1, $06
0008D88A EC04                       	smpsPSGAlterVol     $04
0008D88C E701                       	dc.b	smpsNoAttack, $01
0008D88E EC07                       	smpsPSGAlterVol     $07
0008D890 8003                       	dc.b	nRst, $03
0008D892 ECF5                       	smpsPSGAlterVol     $F5
0008D894 9006                       	dc.b	nEb1, $06
0008D896 EC04                       	smpsPSGAlterVol     $04
0008D898 E701                       	dc.b	smpsNoAttack, $01
0008D89A EC07                       	smpsPSGAlterVol     $07
0008D89C 8006                       	dc.b	nRst, $06
0008D89E E100                       	smpsAlterNote       $00
0008D8A0 01                         	dc.b	$01
0008D8A1 E102                       	smpsAlterNote       $02
0008D8A3 01                         	dc.b	$01
0008D8A4 E100                       	smpsAlterNote       $00
0008D8A6 01                         	dc.b	$01
0008D8A7 E1FF                       	smpsAlterNote       $FF
0008D8A9 01                         	dc.b	$01
0008D8AA ECF5                       	smpsPSGAlterVol     $F5
0008D8AC 9B06                       	dc.b	nD2, $06
0008D8AE EC04                       	smpsPSGAlterVol     $04
0008D8B0 E701                       	dc.b	smpsNoAttack, $01
0008D8B2 EC07                       	smpsPSGAlterVol     $07
0008D8B4 8003                       	dc.b	nRst, $03
0008D8B6 ECF5                       	smpsPSGAlterVol     $F5
0008D8B8 9B07                       	dc.b	nD2, $07
0008D8BA EC0B                       	smpsPSGAlterVol     $0B
0008D8BC 8007                       	dc.b	nRst, $07
0008D8BE E105                       	smpsAlterNote       $05
0008D8C0 0101                       	dc.b	$01, $01
0008D8C2 E1FF                       	smpsAlterNote       $FF
0008D8C4 01                         	dc.b	$01
0008D8C5 E1FC                       	smpsAlterNote       $FC
0008D8C7 01                         	dc.b	$01
0008D8C8 E1FF                       	smpsAlterNote       $FF
0008D8CA ECF5                       	smpsPSGAlterVol     $F5
0008D8CC 9B06                       	dc.b	nD2, $06
0008D8CE EC0B                       	smpsPSGAlterVol     $0B
0008D8D0 8004                       	dc.b	nRst, $04
0008D8D2 ECF5                       	smpsPSGAlterVol     $F5
0008D8D4 9B06                       	dc.b	nD2, $06
0008D8D6 EC04                       	smpsPSGAlterVol     $04
0008D8D8 E701                       	dc.b	smpsNoAttack, $01
0008D8DA EC07                       	smpsPSGAlterVol     $07
0008D8DC 8006                       	dc.b	nRst, $06
0008D8DE E102                       	smpsAlterNote       $02
0008D8E0 01                         	dc.b	$01
0008D8E1 E106                       	smpsAlterNote       $06
0008D8E3 01                         	dc.b	$01
0008D8E4 E102                       	smpsAlterNote       $02
0008D8E6 01                         	dc.b	$01
0008D8E7 E1FC                       	smpsAlterNote       $FC
0008D8E9 01                         	dc.b	$01
0008D8EA E1FF                       	smpsAlterNote       $FF
0008D8EC ECF5                       	smpsPSGAlterVol     $F5
0008D8EE 9B06                       	dc.b	nD2, $06
0008D8F0 EC04                       	smpsPSGAlterVol     $04
0008D8F2 E701                       	dc.b	smpsNoAttack, $01
0008D8F4 EC07                       	smpsPSGAlterVol     $07
0008D8F6 8003                       	dc.b	nRst, $03
0008D8F8 ECF5                       	smpsPSGAlterVol     $F5
0008D8FA 9B07                       	dc.b	nD2, $07
0008D8FC EC0B                       	smpsPSGAlterVol     $0B
0008D8FE 8006                       	dc.b	nRst, $06
0008D900 E102                       	smpsAlterNote       $02
0008D902 01                         	dc.b	$01
0008D903 E105                       	smpsAlterNote       $05
0008D905 0101                       	dc.b	$01, $01
0008D907 E1FF                       	smpsAlterNote       $FF
0008D909 01                         	dc.b	$01
0008D90A ECF5                       	smpsPSGAlterVol     $F5
0008D90C 9B07                       	dc.b	nD2, $07
0008D90E EC0B                       	smpsPSGAlterVol     $0B
0008D910 8004                       	dc.b	nRst, $04
0008D912 ECF5                       	smpsPSGAlterVol     $F5
0008D914 9B06                       	dc.b	nD2, $06
0008D916 EC04                       	smpsPSGAlterVol     $04
0008D918 E701                       	dc.b	smpsNoAttack, $01
0008D91A EC07                       	smpsPSGAlterVol     $07
0008D91C 8006                       	dc.b	nRst, $06
0008D91E E105                       	smpsAlterNote       $05
0008D920 0101                       	dc.b	$01, $01
0008D922 E102                       	smpsAlterNote       $02
0008D924 01                         	dc.b	$01
0008D925 E1FC                       	smpsAlterNote       $FC
0008D927 01                         	dc.b	$01
0008D928 E1FF                       	smpsAlterNote       $FF
0008D92A ECF5                       	smpsPSGAlterVol     $F5
0008D92C 9B06                       	dc.b	nD2, $06
0008D92E EC04                       	smpsPSGAlterVol     $04
0008D930 E701                       	dc.b	smpsNoAttack, $01
0008D932 EC07                       	smpsPSGAlterVol     $07
0008D934 8003                       	dc.b	nRst, $03
0008D936 ECF5                       	smpsPSGAlterVol     $F5
0008D938 9B06                       	dc.b	nD2, $06
0008D93A EC04                       	smpsPSGAlterVol     $04
0008D93C E701                       	dc.b	smpsNoAttack, $01
0008D93E EC07                       	smpsPSGAlterVol     $07
0008D940 8006                       	dc.b	nRst, $06
0008D942 E102                       	smpsAlterNote       $02
0008D944 01                         	dc.b	$01
0008D945 E106                       	smpsAlterNote       $06
0008D947 01                         	dc.b	$01
0008D948 E102                       	smpsAlterNote       $02
0008D94A 01                         	dc.b	$01
0008D94B E1FF                       	smpsAlterNote       $FF
0008D94D 01                         	dc.b	$01
0008D94E ECF5                       	smpsPSGAlterVol     $F5
0008D950 9B06                       	dc.b	nD2, $06
0008D952 EC04                       	smpsPSGAlterVol     $04
0008D954 E701                       	dc.b	smpsNoAttack, $01
0008D956 EC07                       	smpsPSGAlterVol     $07
0008D958 8003                       	dc.b	nRst, $03
0008D95A ECF5                       	smpsPSGAlterVol     $F5
0008D95C 9B07                       	dc.b	nD2, $07
0008D95E EC0B                       	smpsPSGAlterVol     $0B
0008D960 8007                       	dc.b	nRst, $07
0008D962 E107                       	smpsAlterNote       $07
0008D964 0101                       	dc.b	$01, $01
0008D966 E1FE                       	smpsAlterNote       $FE
0008D968 01                         	dc.b	$01
0008D969 E1FA                       	smpsAlterNote       $FA
0008D96B 0101                       	dc.b	$01, $01
0008D96D E103                       	smpsAlterNote       $03
0008D96F 01                         	dc.b	$01
0008D970 E109                       	smpsAlterNote       $09
0008D972 01                         	dc.b	$01
0008D973 E107                       	smpsAlterNote       $07
0008D975 01                         	dc.b	$01
0008D976 E1FE                       	smpsAlterNote       $FE
0008D978 01                         	dc.b	$01
0008D979 E108                       	smpsAlterNote       $08
0008D97B 01                         	dc.b	$01
0008D97C E1FD                       	smpsAlterNote       $FD
0008D97E ECF5                       	smpsPSGAlterVol     $F5
0008D980 940E                       	dc.b	nG1, $0E
0008D982 E103                       	smpsAlterNote       $03
0008D984 EC0B                       	smpsPSGAlterVol     $0B
0008D986 8001 01                    	dc.b	nRst, $01, $01
0008D989 E1FD                       	smpsAlterNote       $FD
0008D98B 01                         	dc.b	$01
0008D98C E1FB                       	smpsAlterNote       $FB
0008D98E 0101                       	dc.b	$01, $01
0008D990 E100                       	smpsAlterNote       $00
0008D992 01                         	dc.b	$01
0008D993 E103                       	smpsAlterNote       $03
0008D995 01                         	dc.b	$01
0008D996 E100                       	smpsAlterNote       $00
0008D998 01                         	dc.b	$01
0008D999 E1FD                       	smpsAlterNote       $FD
0008D99B 01                         	dc.b	$01
0008D99C E1FA                       	smpsAlterNote       $FA
0008D99E 01                         	dc.b	$01
0008D99F E1FD                       	smpsAlterNote       $FD
0008D9A1 01                         	dc.b	$01
0008D9A2 E103                       	smpsAlterNote       $03
0008D9A4 0101                       	dc.b	$01, $01
0008D9A6 E100                       	smpsAlterNote       $00
0008D9A8 01                         	dc.b	$01
0008D9A9 E1FE                       	smpsAlterNote       $FE
0008D9AB ECF5                       	smpsPSGAlterVol     $F5
0008D9AD 960D                       	dc.b	nA1, $0D
0008D9AF E104                       	smpsAlterNote       $04
0008D9B1 EC0B                       	smpsPSGAlterVol     $0B
0008D9B3 8001 01                    	dc.b	nRst, $01, $01
0008D9B6 E101                       	smpsAlterNote       $01
0008D9B8 01                         	dc.b	$01
0008D9B9 E1FB                       	smpsAlterNote       $FB
0008D9BB 0101                       	dc.b	$01, $01
0008D9BD E1FE                       	smpsAlterNote       $FE
0008D9BF 01                         	dc.b	$01
0008D9C0 E104                       	smpsAlterNote       $04
0008D9C2 0101                       	dc.b	$01, $01
0008D9C4 E1FE                       	smpsAlterNote       $FE
0008D9C6 01                         	dc.b	$01
0008D9C7 E1FB                       	smpsAlterNote       $FB
0008D9C9 0101                       	dc.b	$01, $01
0008D9CB E101                       	smpsAlterNote       $01
0008D9CD 01                         	dc.b	$01
0008D9CE E104                       	smpsAlterNote       $04
0008D9D0 0101                       	dc.b	$01, $01
0008D9D2 E1FE                       	smpsAlterNote       $FE
0008D9D4 ECF5                       	smpsPSGAlterVol     $F5
0008D9D6 970D                       	dc.b	nBb1, $0D
0008D9D8 E101                       	smpsAlterNote       $01
0008D9DA EC04                       	smpsPSGAlterVol     $04
0008D9DC E701                       	dc.b	smpsNoAttack, $01
0008D9DE EC07                       	smpsPSGAlterVol     $07
0008D9E0 E104                       	smpsAlterNote       $04
0008D9E2 8001                       	dc.b	nRst, $01
0008D9E4 E103                       	smpsAlterNote       $03
0008D9E6 01                         	dc.b	$01
0008D9E7 E1FE                       	smpsAlterNote       $FE
0008D9E9 01                         	dc.b	$01
0008D9EA E1FA                       	smpsAlterNote       $FA
0008D9EC 01                         	dc.b	$01
0008D9ED E1FE                       	smpsAlterNote       $FE
0008D9EF 01                         	dc.b	$01
0008D9F0 E101                       	smpsAlterNote       $01
0008D9F2 01                         	dc.b	$01
0008D9F3 E104                       	smpsAlterNote       $04
0008D9F5 01                         	dc.b	$01
0008D9F6 E101                       	smpsAlterNote       $01
0008D9F8 01                         	dc.b	$01
0008D9F9 E1FB                       	smpsAlterNote       $FB
0008D9FB 01                         	dc.b	$01
0008D9FC E1FA                       	smpsAlterNote       $FA
0008D9FE 01                         	dc.b	$01
0008D9FF E1FE                       	smpsAlterNote       $FE
0008DA01 01                         	dc.b	$01
0008DA02 E103                       	smpsAlterNote       $03
0008DA04 0101                       	dc.b	$01, $01
0008DA06 E101                       	smpsAlterNote       $01
0008DA08 01                         	dc.b	$01
0008DA09 E1FE                       	smpsAlterNote       $FE
0008DA0B ECF5                       	smpsPSGAlterVol     $F5
0008DA0D 990D                       	dc.b	nC2, $0D
0008DA0F E104                       	smpsAlterNote       $04
0008DA11 EC0B                       	smpsPSGAlterVol     $0B
0008DA13 8001 01                    	dc.b	nRst, $01, $01
0008DA16 E102                       	smpsAlterNote       $02
0008DA18 01                         	dc.b	$01
0008DA19 E1FC                       	smpsAlterNote       $FC
0008DA1B 0101                       	dc.b	$01, $01
0008DA1D E102                       	smpsAlterNote       $02
0008DA1F 01                         	dc.b	$01
0008DA20 E104                       	smpsAlterNote       $04
0008DA22 01                         	dc.b	$01
0008DA23 E1FF                       	smpsAlterNote       $FF
0008DA25 ECF5                       	smpsPSGAlterVol     $F5
0008DA27 9B06                       	dc.b	nD2, $06
0008DA29 EC04                       	smpsPSGAlterVol     $04
0008DA2B E701                       	dc.b	smpsNoAttack, $01
0008DA2D EC07                       	smpsPSGAlterVol     $07
0008DA2F 8003                       	dc.b	nRst, $03
0008DA31 ECF5                       	smpsPSGAlterVol     $F5
0008DA33 9B07                       	dc.b	nD2, $07
0008DA35 EC0B                       	smpsPSGAlterVol     $0B
0008DA37 8006                       	dc.b	nRst, $06
0008DA39 E101                       	smpsAlterNote       $01
0008DA3B 01                         	dc.b	$01
0008DA3C E104                       	smpsAlterNote       $04
0008DA3E 0101                       	dc.b	$01, $01
0008DA40 E1FE                       	smpsAlterNote       $FE
0008DA42 01                         	dc.b	$01
0008DA43 E1FC                       	smpsAlterNote       $FC
0008DA45 01                         	dc.b	$01
0008DA46 E1FE                       	smpsAlterNote       $FE
0008DA48 ECF5                       	smpsPSGAlterVol     $F5
0008DA4A 9C06                       	dc.b	nEb2, $06
0008DA4C EC0B                       	smpsPSGAlterVol     $0B
0008DA4E 8004                       	dc.b	nRst, $04
0008DA50 ECF5                       	smpsPSGAlterVol     $F5
0008DA52 9C06                       	dc.b	nEb2, $06
0008DA54 EC04                       	smpsPSGAlterVol     $04
0008DA56 E701                       	dc.b	smpsNoAttack, $01
0008DA58 EC07                       	smpsPSGAlterVol     $07
0008DA5A 8006                       	dc.b	nRst, $06
0008DA5C E105                       	smpsAlterNote       $05
0008DA5E 01                         	dc.b	$01
0008DA5F E106                       	smpsAlterNote       $06
0008DA61 01                         	dc.b	$01
0008DA62 E102                       	smpsAlterNote       $02
0008DA64 01                         	dc.b	$01
0008DA65 E1FB                       	smpsAlterNote       $FB
0008DA67 01                         	dc.b	$01
0008DA68 E1FF                       	smpsAlterNote       $FF
0008DA6A ECF5                       	smpsPSGAlterVol     $F5
0008DA6C 9B06                       	dc.b	nD2, $06
0008DA6E EC04                       	smpsPSGAlterVol     $04
0008DA70 E701                       	dc.b	smpsNoAttack, $01
0008DA72 EC07                       	smpsPSGAlterVol     $07
0008DA74 8003                       	dc.b	nRst, $03
0008DA76 ECF5                       	smpsPSGAlterVol     $F5
0008DA78 9B06                       	dc.b	nD2, $06
0008DA7A EC04                       	smpsPSGAlterVol     $04
0008DA7C E701                       	dc.b	smpsNoAttack, $01
0008DA7E EC07                       	smpsPSGAlterVol     $07
0008DA80 8006                       	dc.b	nRst, $06
0008DA82 E101                       	smpsAlterNote       $01
0008DA84 01                         	dc.b	$01
0008DA85 E105                       	smpsAlterNote       $05
0008DA87 01                         	dc.b	$01
0008DA88 E104                       	smpsAlterNote       $04
0008DA8A 01                         	dc.b	$01
0008DA8B E1FE                       	smpsAlterNote       $FE
0008DA8D 01                         	dc.b	$01
0008DA8E ECF5                       	smpsPSGAlterVol     $F5
0008DA90 9C07                       	dc.b	nEb2, $07
0008DA92 EC0B                       	smpsPSGAlterVol     $0B
0008DA94 8004                       	dc.b	nRst, $04
0008DA96 ECF5                       	smpsPSGAlterVol     $F5
0008DA98 9C06                       	dc.b	nEb2, $06
0008DA9A EC0B                       	smpsPSGAlterVol     $0B
0008DA9C 8007                       	dc.b	nRst, $07
0008DA9E E105                       	smpsAlterNote       $05
0008DAA0 0101                       	dc.b	$01, $01
0008DAA2 E102                       	smpsAlterNote       $02
0008DAA4 01                         	dc.b	$01
0008DAA5 E1FB                       	smpsAlterNote       $FB
0008DAA7 01                         	dc.b	$01
0008DAA8 E1FF                       	smpsAlterNote       $FF
0008DAAA ECF5                       	smpsPSGAlterVol     $F5
0008DAAC 9B06                       	dc.b	nD2, $06
0008DAAE EC04                       	smpsPSGAlterVol     $04
0008DAB0 E701                       	dc.b	smpsNoAttack, $01
0008DAB2 EC07                       	smpsPSGAlterVol     $07
0008DAB4 8003                       	dc.b	nRst, $03
0008DAB6 ECF5                       	smpsPSGAlterVol     $F5
0008DAB8 9B06                       	dc.b	nD2, $06
0008DABA EC04                       	smpsPSGAlterVol     $04
0008DABC E701                       	dc.b	smpsNoAttack, $01
0008DABE EC07                       	smpsPSGAlterVol     $07
0008DAC0 8006                       	dc.b	nRst, $06
0008DAC2 E101                       	smpsAlterNote       $01
0008DAC4 01                         	dc.b	$01
0008DAC5 E105                       	smpsAlterNote       $05
0008DAC7 01                         	dc.b	$01
0008DAC8 E101                       	smpsAlterNote       $01
0008DACA 01                         	dc.b	$01
0008DACB E1FC                       	smpsAlterNote       $FC
0008DACD 01                         	dc.b	$01
0008DACE E1FE                       	smpsAlterNote       $FE
0008DAD0 ECF5                       	smpsPSGAlterVol     $F5
0008DAD2 9C06                       	dc.b	nEb2, $06
0008DAD4 EC04                       	smpsPSGAlterVol     $04
0008DAD6 E701                       	dc.b	smpsNoAttack, $01
0008DAD8 EC07                       	smpsPSGAlterVol     $07
0008DADA 8003                       	dc.b	nRst, $03
0008DADC ECF5                       	smpsPSGAlterVol     $F5
0008DADE 9C07                       	dc.b	nEb2, $07
0008DAE0 EC0B                       	smpsPSGAlterVol     $0B
0008DAE2 8006                       	dc.b	nRst, $06
0008DAE4 E102                       	smpsAlterNote       $02
0008DAE6 01                         	dc.b	$01
0008DAE7 E105                       	smpsAlterNote       $05
0008DAE9 0101                       	dc.b	$01, $01
0008DAEB E1FF                       	smpsAlterNote       $FF
0008DAED 01                         	dc.b	$01
0008DAEE ECF5                       	smpsPSGAlterVol     $F5
0008DAF0 9B07                       	dc.b	nD2, $07
0008DAF2 EC0B                       	smpsPSGAlterVol     $0B
0008DAF4 8004                       	dc.b	nRst, $04
0008DAF6 ECF5                       	smpsPSGAlterVol     $F5
0008DAF8 9B06                       	dc.b	nD2, $06
0008DAFA EC04                       	smpsPSGAlterVol     $04
0008DAFC E701                       	dc.b	smpsNoAttack, $01
0008DAFE EC07                       	smpsPSGAlterVol     $07
0008DB00 8002                       	dc.b	nRst, $02
0008DB02 E1FC                       	smpsAlterNote       $FC
0008DB04 ECF5                       	smpsPSGAlterVol     $F5
0008DB06 9006                       	dc.b	nEb1, $06
0008DB08 EC04                       	smpsPSGAlterVol     $04
0008DB0A E701                       	dc.b	smpsNoAttack, $01
0008DB0C ECFC                       	smpsPSGAlterVol     $FC
0008DB0E 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
0008DB12 EC04                       	smpsPSGAlterVol     $04
0008DB14 E701                       	dc.b	smpsNoAttack, $01
0008DB16 E1FD                       	smpsAlterNote       $FD
0008DB18 ECFC                       	smpsPSGAlterVol     $FC
0008DB1A 9402                       	dc.b	nG1, $02
0008DB1C EC04                       	smpsPSGAlterVol     $04
0008DB1E E701                       	dc.b	smpsNoAttack, $01
0008DB20 E1FE                       	smpsAlterNote       $FE
0008DB22 ECFC                       	smpsPSGAlterVol     $FC
0008DB24 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0008DB28 EC04                       	smpsPSGAlterVol     $04
0008DB2A E701                       	dc.b	smpsNoAttack, $01
0008DB2C EC07                       	smpsPSGAlterVol     $07
0008DB2E 8008                       	dc.b	nRst, $08
0008DB30 F6F4 F3                    	smpsJump            music84_Jump06
0008DB33                            
0008DB33                            ; PSG3 Data
0008DB33                            music84_PSG3:
0008DB33 F500                       	smpsPSGvoice        $00
0008DB35 E1FF                       	smpsAlterNote       $FF
0008DB37 EC0F                       	smpsPSGAlterVol     $0F
0008DB39 803A                       	dc.b	nRst, $3A
0008DB3B                            
0008DB3B                            music84_Jump05:
0008DB3B 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
0008DB47 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
0008DB51 F6FF E8                    	smpsJump            music84_Jump05
0008DB54                            
0008DB54                            ; DAC Data
0008DB54                            music84_DAC:
0008DB54 E0C0                       	smpsPan             panCenter, $00
0008DB56 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
0008DB62 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
0008DB6E 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
0008DB7A 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0008DB86 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0008DB92 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
0008DB9E 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0008DBAA 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
0008DBB6 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0008DBC2 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
0008DBCE 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0008DBDA 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
0008DBE6 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0008DBF2 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0008DBFE 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
0008DC0A 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
0008DC16 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
0008DC22 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
0008DC2E 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
0008DC3A 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0008DC46 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008DC52 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0008DC5E 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
0008DC6A 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0008DC76 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
0008DC82 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
0008DC8E 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
0008DC9A 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008DCA6 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0008DCB2 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0008DCBE 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008DCCA 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0008DCD6 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
0008DCE2 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
0008DCEE 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
0008DCFA 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008DD06 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
0008DD12 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
0008DD1E 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0008DD2A 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
0008DD36 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
0008DD42 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
0008DD4E 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008DD5A 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0008DD66 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0008DD72 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008DD7E 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0008DD8A 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
0008DD96 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
0008DDA2 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
0008DDAE 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
0008DDBA 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
0008DDC6 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
0008DDD2 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
0008DDDE 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008DDEA 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
0008DDF6 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
0008DE02 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0008DE0E 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0008DE1A 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008DE26 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
0008DE32 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
0008DE3E 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
0008DE4A 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
0008DE56 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
0008DE62 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
0008DE6E 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
0008DE7A 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
0008DE86 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
0008DE92 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0008DE9E 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
0008DEAA 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008DEB6 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
0008DEC2 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
0008DECE 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
0008DEDA E0C0                       	smpsPan             panCenter, $00
0008DEDC F2                         	smpsStop
0008DEDD                            
0008DEDD                            music84_Voices:
0008DEDD                            ;	Voice $00
0008DEDD                            ;	$3D
0008DEDD                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
0008DEDD                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
0008DEDD                            	smpsVcAlgorithm     $05
0008DEDD                            	smpsVcFeedback      $07
0008DEDD                            	smpsVcUnusedBits    $00
0008DEDD                            	smpsVcDetune        $05, $04, $03, $04
0008DEDD                            	smpsVcCoarseFreq    $01, $01, $01, $01
0008DEDD                            	smpsVcRateScale     $00, $00, $00, $00
0008DEDD                            	smpsVcAttackRate    $11, $11, $11, $11
0008DEDD                            	smpsVcAmpMod        $00, $00, $00, $00
0008DEDD                            	smpsVcDecayRate1    $00, $00, $00, $0A
0008DEDD                            	smpsVcDecayRate2    $00, $00, $00, $0B
0008DEDD                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0008DEDD                            	smpsVcReleaseRate   $08, $08, $08, $07
0008DEDD 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
0008DEF6                            
0008DEF6                            ;	Voice $01
0008DEF6                            ;	$04
0008DEF6                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
0008DEF6                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
0008DEF6                            	smpsVcAlgorithm     $04
0008DEF6                            	smpsVcFeedback      $00
0008DEF6                            	smpsVcUnusedBits    $00
0008DEF6                            	smpsVcDetune        $04, $03, $04, $05
0008DEF6                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
0008DEF6                            	smpsVcRateScale     $00, $01, $00, $01
0008DEF6                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0008DEF6                            	smpsVcAmpMod        $00, $00, $00, $00
0008DEF6                            	smpsVcDecayRate1    $0E, $00, $0E, $00
0008DEF6                            	smpsVcDecayRate2    $05, $00, $05, $00
0008DEF6                            	smpsVcDecayLevel    $08, $0E, $08, $0E
0008DEF6                            	smpsVcReleaseRate   $06, $06, $06, $06
0008DEF6 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
0008DF0F                            
0008DF0F                            ;	Voice $02
0008DF0F                            ;	$30
0008DF0F                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
0008DF0F                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
0008DF0F                            	smpsVcAlgorithm     $00
0008DF0F                            	smpsVcFeedback      $06
0008DF0F                            	smpsVcUnusedBits    $00
0008DF0F                            	smpsVcDetune        $04, $02, $00, $06
0008DF0F                            	smpsVcCoarseFreq    $01, $01, $03, $0C
0008DF0F                            	smpsVcRateScale     $00, $00, $00, $00
0008DF0F                            	smpsVcAttackRate    $1F, $1F, $1F, $14
0008DF0F                            	smpsVcAmpMod        $00, $00, $00, $00
0008DF0F                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
0008DF0F                            	smpsVcDecayRate2    $01, $01, $01, $01
0008DF0F                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
0008DF0F                            	smpsVcReleaseRate   $09, $0B, $08, $0F
0008DF0F 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
0008DF28                            
0008DF28                            ;	Voice $03
0008DF28                            ;	$3A
0008DF28                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
0008DF28                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
0008DF28                            	smpsVcAlgorithm     $02
0008DF28                            	smpsVcFeedback      $07
0008DF28                            	smpsVcUnusedBits    $00
0008DF28                            	smpsVcDetune        $04, $06, $02, $00
0008DF28                            	smpsVcCoarseFreq    $01, $01, $01, $01
0008DF28                            	smpsVcRateScale     $00, $00, $00, $00
0008DF28                            	smpsVcAttackRate    $18, $19, $14, $14
0008DF28                            	smpsVcAmpMod        $00, $00, $00, $00
0008DF28                            	smpsVcDecayRate1    $09, $0D, $09, $09
0008DF28                            	smpsVcDecayRate2    $00, $00, $00, $00
0008DF28                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
0008DF28                            	smpsVcReleaseRate   $08, $0F, $0F, $07
0008DF28 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
0008DF41                            
0008DF41                            ;	Voice $04
0008DF41                            ;	$3C
0008DF41                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
0008DF41                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
0008DF41                            	smpsVcAlgorithm     $04
0008DF41                            	smpsVcFeedback      $07
0008DF41                            	smpsVcUnusedBits    $00
0008DF41                            	smpsVcDetune        $07, $00, $00, $03
0008DF41                            	smpsVcCoarseFreq    $00, $00, $02, $0A
0008DF41                            	smpsVcRateScale     $00, $00, $00, $00
0008DF41                            	smpsVcAttackRate    $10, $1F, $10, $1F
0008DF41                            	smpsVcAmpMod        $00, $00, $00, $00
0008DF41                            	smpsVcDecayRate1    $00, $00, $00, $00
0008DF41                            	smpsVcDecayRate2    $00, $00, $00, $00
0008DF41                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0008DF41                            	smpsVcReleaseRate   $0A, $02, $0A, $02
0008DF41 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
0008DF5A                            
0008DF5A                            ;	Voice $05
0008DF5A                            ;	$38
0008DF5A                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
0008DF5A                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
0008DF5A                            	smpsVcAlgorithm     $00
0008DF5A                            	smpsVcFeedback      $07
0008DF5A                            	smpsVcUnusedBits    $00
0008DF5A                            	smpsVcDetune        $04, $06, $02, $00
0008DF5A                            	smpsVcCoarseFreq    $01, $01, $01, $00
0008DF5A                            	smpsVcRateScale     $00, $00, $00, $00
0008DF5A                            	smpsVcAttackRate    $1F, $1F, $1F, $10
0008DF5A                            	smpsVcAmpMod        $00, $00, $00, $00
0008DF5A                            	smpsVcDecayRate1    $00, $03, $00, $17
0008DF5A                            	smpsVcDecayRate2    $00, $08, $08, $0B
0008DF5A                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
0008DF5A                            	smpsVcReleaseRate   $08, $05, $05, $05
0008DF5A 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
0008DF73                            
0008DF73                            
0008DF74 00                         		even
0008DF74                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
00092184                            		even
00092184                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
00095CDC 00                         		even
00095CDC                            Music87:	include	sound\music87.asm; Invincibility
00095CDC                            triple_Header:
00095CDC =00000001                  smpsHeaderStartSong = 1
00095CDC 0000                       	smpsHeaderVoice     triple_Voices
00095CDE 0501                       	smpsHeaderChan      $05, $01
00095CE0 0200                       	smpsHeaderTempo     $02, $00
00095CE2                            
00095CE6 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
00095CEA 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
00095CEE 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
00095CF2 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
00095CF6 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
00095CFC                            
00095CFC                            ; DAC Data
00095CFC                            triple_DAC:
00095CFC E0C0                       	smpsPan             panCenter, $00
00095CFE 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
00095D04                            
00095D04                            triple_Loop01:
00095D04 8282 82                    	dc.b	dSnare, dSnare, dSnare
00095D07                            
00095D07                            triple_Loop00:
00095D07 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
00095D13 06                         	dc.b	$06
00095D14 F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
00095D19 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
00095D25 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
00095D2C F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
00095D31 0303 1B                    	dc.b	$03, $03, $1B
00095D34 E0C0                       	smpsPan             panCenter, $00
00095D36 F6FF C4                    	smpsJump triple_DAC
00095D39                            
00095D39                            ; FM1 Data
00095D39                            triple_FM1:
00095D39 E0C0                       	smpsPan             panCenter, $00
00095D3D 8018                       	dc.b	nRst, $18
00095D3F                            
00095D3F                            triple_Loop0B:
00095D3F AC06 B8                    	dc.b	nG3, $06, nG4
00095D42 F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
00095D47                            
00095D47                            triple_Loop0C:
00095D47 A7B3                       	dc.b	nD3, nD4
00095D49 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
00095D4E                            
00095D4E                            triple_Loop0D:
00095D4E A9B5                       	dc.b	nE3, nE4
00095D50 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
00095D55 A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
00095D5D F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
00095D62 A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
00095D6E 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
00095D7A AD                         	dc.b	nAb3
00095D7B F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
00095D80 8018                       	dc.b	nRst, $18
00095D82 E0C0                       	smpsPan             panCenter, $00
00095D86 F6FF B1                    	smpsJump triple_FM1
00095D89                            
00095D89                            ; FM2 Data
00095D89                            triple_FM2:
00095D89 E0C0                       	smpsPan             panCenter, $00
00095D8D 8018                       	dc.b	nRst, $18
00095D8F                            
00095D8F                            triple_Loop07:
00095D8F C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00095D9B C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00095DA7 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
00095DAC 8003                       	dc.b	nRst, $03
00095DAE                            
00095DAE                            triple_Loop08:
00095DAE B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00095DB4 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
00095DB9 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
00095DBF                            
00095DBF                            triple_Loop09:
00095DBF C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00095DCB C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00095DD7 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
00095DDC 8003                       	dc.b	nRst, $03
00095DDE                            
00095DDE                            triple_Loop0A:
00095DDE B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00095DE4 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
00095DE9 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
00095DEF E0C0                       	smpsPan             panCenter, $00
00095DF3 F6FF 94                    	smpsJump triple_FM2
00095DF6                            
00095DF6                            ; FM3 Data
00095DF6                            triple_FM3:
00095DF6 E0C0                       	smpsPan             panCenter, $00
00095DFA 8018                       	dc.b	nRst, $18
00095DFC                            
00095DFC                            triple_Loop06:
00095DFC B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
00095E03 F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
00095E08 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
00095E14 BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
00095E20 C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
00095E23 F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
00095E28 8018                       	dc.b	nRst, $18
00095E2A E0C0                       	smpsPan             panCenter, $00
00095E2E F6FF C6                    	smpsJump triple_FM3
00095E31                            
00095E31                            ; FM4 Data
00095E31                            triple_FM4:
00095E31 E103                       	smpsAlterNote       $03
00095E35 E0C0                       	smpsPan             panCenter, $00
00095E37 8018                       	dc.b	nRst, $18
00095E39                            
00095E39                            triple_Loop02:
00095E39 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00095E45 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00095E51 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
00095E56 8003                       	dc.b	nRst, $03
00095E58                            
00095E58                            triple_Loop03:
00095E58 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00095E5E F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
00095E63 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
00095E69                            
00095E69                            triple_Loop04:
00095E69 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00095E75 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00095E81 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
00095E86 8003                       	dc.b	nRst, $03
00095E88                            
00095E88                            triple_Loop05:
00095E88 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00095E8E F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
00095E93 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
00095E99 E0C0                       	smpsPan             panCenter, $00
00095E9B F6FF 94                    	smpsJump triple_FM4
00095E9E                            
00095E9E                            ; PSG1 Data
00095E9E                            triple_PSG1:
00095E9E 8018                       	dc.b	nRst, $18
00095EA0                            
00095EA0                            triple_Loop0E:
00095EA0 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00095EAC 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00095EB8 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00095EC4 9402 8004                  	dc.b	nG1, $02, nRst, $04
00095EC8 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
00095ECD A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00095ED9 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00095EE5 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00095EF1 9402 8007                  	dc.b	nG1, $02, nRst, $07
00095EF5                            
00095EF5                            triple_Loop0F:
00095EF5 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
00095EFB F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
00095F00 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
00095F06                            
00095F06                            triple_Loop10:
00095F06 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00095F12 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00095F1E 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00095F2A 9402 8004                  	dc.b	nG1, $02, nRst, $04
00095F2E F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
00095F33 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00095F3F 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00095F4B 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00095F57 9402 8007                  	dc.b	nG1, $02, nRst, $07
00095F5B                            
00095F5B                            triple_Loop11:
00095F5B 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
00095F61 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
00095F66 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
00095F6C F500                       	smpsPSGvoice        $00
00095F6E F6FF 2E                    	smpsJump triple_PSG1
00095F71                            
00095F71                            triple_Voices:
00095F71                            ;	Voice $00
00095F71                            ;	$3A
00095F71                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
00095F71                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
00095F71                            	smpsVcAlgorithm     $02
00095F71                            	smpsVcFeedback      $07
00095F71                            	smpsVcUnusedBits    $00
00095F71                            	smpsVcDetune        $00, $00, $00, $00
00095F71                            	smpsVcCoarseFreq    $01, $01, $07, $01
00095F71                            	smpsVcRateScale     $01, $02, $02, $02
00095F71                            	smpsVcAttackRate    $13, $0D, $0E, $0E
00095F71                            	smpsVcAmpMod        $00, $00, $00, $00
00095F71                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
00095F71                            	smpsVcDecayRate2    $00, $00, $00, $00
00095F71                            	smpsVcDecayLevel    $00, $01, $0F, $01
00095F71                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00095F71 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
00095F8A                            
00095F8A                            ;	Voice $01
00095F8A                            ;	$20
00095F8A                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
00095F8A                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
00095F8A                            	smpsVcAlgorithm     $00
00095F8A                            	smpsVcFeedback      $04
00095F8A                            	smpsVcUnusedBits    $00
00095F8A                            	smpsVcDetune        $00, $00, $03, $07
00095F8A                            	smpsVcCoarseFreq    $00, $00, $01, $0A
00095F8A                            	smpsVcRateScale     $03, $03, $03, $02
00095F8A                            	smpsVcAttackRate    $1F, $1C, $18, $1F
00095F8A                            	smpsVcAmpMod        $00, $00, $00, $00
00095F8A                            	smpsVcDecayRate1    $04, $04, $0A, $10
00095F8A                            	smpsVcDecayRate2    $08, $08, $08, $0F
00095F8A                            	smpsVcDecayLevel    $0B, $0B, $05, $05
00095F8A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00095F8A 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
00095F8A 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
00095FA4 00                         		even
00095FA4                            Music88:	incbin	sound\music88.bin; Extra Life
00096092                            		even
00096092                            Music89:	incbin	sound\music89.bin; Special Stage
00099F5A 00                         		even
00099F5A                            Music8A:	incbin	sound\music8A.bin; Title Screen
0009A124                            		even
0009A124                            Music8B:	incbin	sound\music8B.bin; Ending Theme
0009A3BE                            		even
0009A3BE                            Music8C:	incbin	sound\music8C.bin; VS Boss
0009A5DA                            		even
0009A5DA                            Music8D:	incbin	sound\music8D.bin; Final Zone
0009A7F6                            		even
0009A7F6                            Music8E:	incbin	sound\fle.bin ;		Act Clear
0009AC64 00                         		even
0009AC64                            Music8F:	incbin	sound\music8F.bin ; Game Over
0009B2A4 00                         		even
0009B2A4                            Music90:	incbin	sound\music90.bin ; Continue
0009B63E 00                         		even
0009B63E                            Music91:	incbin	sound\music91.bin ; Credits
0009C90C                            		even
0009C90C                            Music92:	incbin	sound\music92.bin ; Drowning
0009CA36                            		even
0009CA36                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
0009CB06                            		even
0009CB06                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
0009CB40 00                         		even
0009CB40                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
0009CB7A 00                         		even
0009CB7A                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
0009CBB4 00                         		even
0009CBB4                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
0009CBEE 00                         		even
0009CBEE                            Music98:	incbin	sound\music98.bin ; Marble Act 2
0009CC28 00                         		even
0009CC28                            Music99:	incbin	sound\music99.bin ; Marble Act 3
0009CC62 00                         		even
0009CC62                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
0009CC9C 00                         		even
0009CC9C                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
0009CCD6 00                         		even
0009CCD6                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
0009CD10 00                         		even
0009CD10                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
0009CD4A 00                         		even
0009CD4A                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
0009D23A                            		even
0009D23A                            Music9F:	incbin	sound\music9F.bin ; Scrap Brain Act 3
0009D274 00                         		even
0009D274                            ; ---------------------------------------------------------------------------
0009D274                            ; Sound	effect pointers
0009D274                            ; ---------------------------------------------------------------------------
0009D274 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
0009D280 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
0009D28C 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
0009D298 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
0009D2A4 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
0009D2B0 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
0009D2BC 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
0009D2C8 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
0009D2D4 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
0009D2E0 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
0009D2EC 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
0009D2F8 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
0009D304 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
0009D310 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
0009D31C 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
0009D328 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
0009D334 0000 0000                  SoundD0Index:	dc.l SoundD0
0009D338                            SoundA0:	incbin	sound\soundA0.bin
0009D34E                            		even
0009D34E                            SoundA1:	incbin	sound\soundA1.bin
0009D378                            		even
0009D378                            SoundA2:	incbin	sound\soundA2.bin
0009D398                            		even
0009D398                            SoundA3:	incbin	sound\soundA3.bin
0009D3CA                            		even
0009D3CA                            SoundA4:	incbin	sound\soundA4.bin
0009D400                            		even
0009D400                            SoundA5:	incbin	sound\soundA5.bin
0009D42C                            		even
0009D42C                            SoundA6:	incbin	sound\soundA6.bin
0009D45C                            		even
0009D45C                            SoundA7:	incbin	sound\soundA7.bin
0009D48C                            		even
0009D48C                            SoundA8:	incbin	sound\soundA8.bin
0009D4C0                            		even
0009D4C0                            SoundA9:	incbin	sound\soundA9.bin
0009D4D2                            		even
0009D4D2                            SoundAA:	incbin	sound\soundAA.bin
0009D514                            		even
0009D514                            SoundAB:	incbin	sound\soundAB.bin
0009D534                            		even
0009D534                            SoundAC:	incbin	sound\soundAC.bin
0009D568                            		even
0009D568                            SoundAD:	incbin	sound\soundAD.bin
0009D59E                            		even
0009D59E                            SoundAE:	incbin	sound\soundAE.bin
0009D5E8                            		even
0009D5E8                            SoundAF:	incbin	sound\soundAF.bin
0009D616                            		even
0009D616                            SoundB0:	incbin	sound\soundB0.bin
0009D648                            		even
0009D648                            SoundB1:	incbin	sound\soundB1.bin
0009D674                            		even
0009D674                            SoundB2:	incbin	sound\soundB2.bin
0009D6C4                            		even
0009D6C4                            SoundB3:	incbin	sound\soundB3.bin
0009D70E                            		even
0009D70E                            SoundB4:	include	sound\soundB4.asm
0009D70E                            SndB4_Bumper_Header:
0009D70E =00000001                  smpsHeaderStartSong = 1
0009D70E 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
0009D710 01                         	smpsHeaderTempoSFX  $01
0009D711 03                         	smpsHeaderChanSFX   $03
0009D712                            
0009D724                            
0009D724                            ; FM5 Data
0009D724                            SndB4_Bumper_FM5:
0009D726 F600 00                    	smpsJump            SndB4_Bumper_Jump00
0009D729                            
0009D729                            ; FM4 Data
0009D729                            SndB4_Bumper_FM4:
0009D729 F2                         	smpsStop
0009D72A                            
0009D72A                            SndB4_Bumper_Jump00:
0009D72A A020                       	dc.b	nG2, $20
0009D72C F2                         	smpsStop
0009D72D                            
0009D72D                            ; FM3 Data
0009D72D                            SndB4_Bumper_FM3:
0009D72D F2                         	smpsStop
0009D72E                            
0009D72E                            SndB4_Bumper_Voices:
0009D72E                            ;	Voice $00
0009D72E                            ;	$32
0009D72E                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
0009D72E                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
0009D72E                            	smpsVcAlgorithm     $02
0009D72E                            	smpsVcFeedback      $06
0009D72E                            	smpsVcUnusedBits    $00
0009D72E                            	smpsVcDetune        $07, $07, $02, $00
0009D72E                            	smpsVcCoarseFreq    $00, $00, $00, $04
0009D72E                            	smpsVcRateScale     $00, $00, $00, $00
0009D72E                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009D72E                            	smpsVcAmpMod        $00, $00, $00, $00
0009D72E                            	smpsVcDecayRate1    $08, $00, $00, $09
0009D72E                            	smpsVcDecayRate2    $0B, $00, $00, $09
0009D72E                            	smpsVcDecayLevel    $00, $00, $00, $00
0009D72E                            	smpsVcReleaseRate   $0F, $00, $00, $00
0009D72E 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
0009D72E 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
0009D748 00                         		even
0009D748                            SoundB5:	incbin	sound\soundB5.bin
0009D766 00                         		even
0009D766                            SoundB6:	incbin	sound\soundB6.bin
0009D784                            		even
0009D784                            SoundB7:	incbin	sound\soundB7.bin
0009D7C0                            		even
0009D7C0                            SoundB8:	incbin	sound\soundB8.bin
0009D7DE                            		even
0009D7DE                            SoundB9:	incbin	sound\soundB9.bin
0009D842                            		even
0009D842                            SoundBA:	incbin	sound\soundBA.bin
0009D86A                            		even
0009D86A                            SoundBB:	incbin	sound\soundBB.bin
0009D896                            		even
0009D896                            SoundBC:	incbin	sound\soundBC.bin
0009D8D8                            		even
0009D8D8                            SoundBD:	incbin	sound\soundBD.bin
0009D92C                            		even
0009D92C                            SoundBE:	incbin	sound\soundBE.bin
0009D966                            		even
0009D966                            SoundBF:	incbin	sound\soundBF.bin
0009D9D8                            		even
0009D9D8                            SoundC0:	incbin	sound\soundC0.bin
0009DA06                            		even
0009DA06                            SoundC1:	incbin	sound\soundC1.bin
0009DA60                            		even
0009DA60                            SoundC2:	incbin	sound\soundC2.bin
0009DA8A                            		even
0009DA8A                            SoundC3:	incbin	sound\soundC3.bin
0009DB04                            		even
0009DB04                            SoundC4:	incbin	sound\soundC4.bin
0009DC02                            		even
0009DC02                            SoundC5:	incbin	sound\soundC5.bin
0009DC6A                            		even
0009DC6A                            SoundC6:	incbin	sound\soundC6.bin
0009DCAC                            		even
0009DCAC                            SoundC7:	incbin	sound\soundC7.bin
0009DCDA                            		even
0009DCDA                            SoundC8:	incbin	sound\soundC8.bin
0009DCEC                            		even
0009DCEC                            SoundC9:	incbin	sound\soundC9.bin
0009DD1A                            		even
0009DD1A                            SoundCA:	incbin	sound\soundCA.bin
0009DD48                            		even
0009DD48                            SoundCB:	incbin	sound\soundCB.bin
0009DD94                            		even
0009DD94                            SoundCC:	incbin	sound\C9.ssf
0009DDC2                            		even
0009DDC2                            SoundCD:	incbin	sound\soundCD.bin
0009DDD0                            		even
0009DDD0                            SoundCE:	incbin	sound\soundCE.bin
0009DDEE 00                         		even
0009DDEE                            SoundCF:	incbin	sound\soundCF.bin
0009DE26                            		even
0009DE26                            SoundD0:	incbin	sound\soundD0.bin
0009DE60                            		even
0009DE60                            SegaPCM:	incbin	sound\segapcm.bin
000B7FB6                            SegaPCM_end:	even
000B7FB6                            
000B7FB6                            IdiotPCM:	incbin	sound\youare.bin
000C2088 00                         IdiotPCM_end:	even
000C2088                            
000C2088                            ; end of 'ROM'
000C2088                            EndOfRom:
000C2088                            
000C2088                            
